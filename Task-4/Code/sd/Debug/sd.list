
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010528  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  080105e8  080105e8  000115e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d60  08010d60  000121fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010d60  08010d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d68  08010d68  000121fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d68  08010d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d6c  08010d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08010d70  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001fc  08010f6c  000121fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  08010f6c  00012b94  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140f7  00000000  00000000  00012224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd7  00000000  00000000  0002631b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  000292f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e84  00000000  00000000  0002a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018944  00000000  00000000  0002b43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001996c  00000000  00000000  00043d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b215  00000000  00000000  0005d6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c98  00000000  00000000  000e8944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ee5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080105d0 	.word	0x080105d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	080105d0 	.word	0x080105d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f841 	bl	80024c4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff81 	bl	8002354 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f833 	bl	80024c4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f829 	bl	80024c4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ffab 	bl	80023dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffa1 	bl	80023dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fe71 	bl	80032b4 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 faac 	bl	8002b38 <__aeabi_dsub>
 80005e0:	f002 fe68 	bl	80032b4 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 ffb7 	bl	80025a8 <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fea2 	bl	8003388 <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 ffae 	bl	80025a8 <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 fa70 	bl	8002b38 <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fe5d 	bl	800332c <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 ff97 	bl	80025a8 <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fe82 	bl	8003388 <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 ffe6 	bl	8001658 <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 ff76 	bl	80035a4 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 ff71 	bl	80035a4 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fde3 	bl	8003568 <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fcb1 	bl	8003568 <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 fca5 	bl	8003568 <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	08010770 	.word	0x08010770
 8000d78:	080107b0 	.word	0x080107b0
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fa6a 	bl	8003568 <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 fa5c 	bl	8003568 <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_fsub>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4647      	mov	r7, r8
 800118c:	46ce      	mov	lr, r9
 800118e:	024e      	lsls	r6, r1, #9
 8001190:	0243      	lsls	r3, r0, #9
 8001192:	0045      	lsls	r5, r0, #1
 8001194:	0a72      	lsrs	r2, r6, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0048      	lsls	r0, r1, #1
 800119a:	b580      	push	{r7, lr}
 800119c:	4694      	mov	ip, r2
 800119e:	0a5f      	lsrs	r7, r3, #9
 80011a0:	0e2d      	lsrs	r5, r5, #24
 80011a2:	099b      	lsrs	r3, r3, #6
 80011a4:	0e00      	lsrs	r0, r0, #24
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	09b6      	lsrs	r6, r6, #6
 80011aa:	28ff      	cmp	r0, #255	@ 0xff
 80011ac:	d024      	beq.n	80011f8 <__aeabi_fsub+0x70>
 80011ae:	2201      	movs	r2, #1
 80011b0:	4051      	eors	r1, r2
 80011b2:	1a2a      	subs	r2, r5, r0
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d00f      	beq.n	80011d8 <__aeabi_fsub+0x50>
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dc00      	bgt.n	80011be <__aeabi_fsub+0x36>
 80011bc:	e16a      	b.n	8001494 <__aeabi_fsub+0x30c>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d135      	bne.n	800122e <__aeabi_fsub+0xa6>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x40>
 80011c6:	e0a2      	b.n	800130e <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x48>
 80011ce:	e124      	b.n	800141a <__aeabi_fsub+0x292>
 80011d0:	2aff      	cmp	r2, #255	@ 0xff
 80011d2:	d021      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011d4:	000a      	movs	r2, r1
 80011d6:	e02f      	b.n	8001238 <__aeabi_fsub+0xb0>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_fsub+0x56>
 80011dc:	e167      	b.n	80014ae <__aeabi_fsub+0x326>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d05e      	beq.n	80012a0 <__aeabi_fsub+0x118>
 80011e2:	2dff      	cmp	r5, #255	@ 0xff
 80011e4:	d018      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	04c9      	lsls	r1, r1, #19
 80011ea:	430e      	orrs	r6, r1
 80011ec:	2a1b      	cmp	r2, #27
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_fsub+0x6a>
 80011f0:	e076      	b.n	80012e0 <__aeabi_fsub+0x158>
 80011f2:	002a      	movs	r2, r5
 80011f4:	3301      	adds	r3, #1
 80011f6:	e032      	b.n	800125e <__aeabi_fsub+0xd6>
 80011f8:	002a      	movs	r2, r5
 80011fa:	3aff      	subs	r2, #255	@ 0xff
 80011fc:	4691      	mov	r9, r2
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d042      	beq.n	8001288 <__aeabi_fsub+0x100>
 8001202:	428c      	cmp	r4, r1
 8001204:	d055      	beq.n	80012b2 <__aeabi_fsub+0x12a>
 8001206:	464a      	mov	r2, r9
 8001208:	2a00      	cmp	r2, #0
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x86>
 800120c:	e09c      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800120e:	2d00      	cmp	r5, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x8c>
 8001212:	e077      	b.n	8001304 <__aeabi_fsub+0x17c>
 8001214:	000c      	movs	r4, r1
 8001216:	0033      	movs	r3, r6
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_fsub+0x98>
 800121e:	e06e      	b.n	80012fe <__aeabi_fsub+0x176>
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	03d2      	lsls	r2, r2, #15
 8001224:	4313      	orrs	r3, r2
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	20ff      	movs	r0, #255	@ 0xff
 800122a:	0a5b      	lsrs	r3, r3, #9
 800122c:	e024      	b.n	8001278 <__aeabi_fsub+0xf0>
 800122e:	2dff      	cmp	r5, #255	@ 0xff
 8001230:	d0f2      	beq.n	8001218 <__aeabi_fsub+0x90>
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	04c9      	lsls	r1, r1, #19
 8001236:	430e      	orrs	r6, r1
 8001238:	2101      	movs	r1, #1
 800123a:	2a1b      	cmp	r2, #27
 800123c:	dc08      	bgt.n	8001250 <__aeabi_fsub+0xc8>
 800123e:	0031      	movs	r1, r6
 8001240:	2020      	movs	r0, #32
 8001242:	40d1      	lsrs	r1, r2
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	4096      	lsls	r6, r2
 8001248:	0032      	movs	r2, r6
 800124a:	1e50      	subs	r0, r2, #1
 800124c:	4182      	sbcs	r2, r0
 800124e:	4311      	orrs	r1, r2
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	d460      	bmi.n	8001318 <__aeabi_fsub+0x190>
 8001256:	2107      	movs	r1, #7
 8001258:	002a      	movs	r2, r5
 800125a:	4019      	ands	r1, r3
 800125c:	d057      	beq.n	800130e <__aeabi_fsub+0x186>
 800125e:	210f      	movs	r1, #15
 8001260:	4019      	ands	r1, r3
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0xe0>
 8001266:	3304      	adds	r3, #4
 8001268:	0159      	lsls	r1, r3, #5
 800126a:	d550      	bpl.n	800130e <__aeabi_fsub+0x186>
 800126c:	1c50      	adds	r0, r2, #1
 800126e:	2afe      	cmp	r2, #254	@ 0xfe
 8001270:	d045      	beq.n	80012fe <__aeabi_fsub+0x176>
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b2c0      	uxtb	r0, r0
 8001276:	0a5b      	lsrs	r3, r3, #9
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4318      	orrs	r0, r3
 800127c:	07e4      	lsls	r4, r4, #31
 800127e:	4320      	orrs	r0, r4
 8001280:	bcc0      	pop	{r6, r7}
 8001282:	46b9      	mov	r9, r7
 8001284:	46b0      	mov	r8, r6
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001288:	2201      	movs	r2, #1
 800128a:	4051      	eors	r1, r2
 800128c:	428c      	cmp	r4, r1
 800128e:	d1ba      	bne.n	8001206 <__aeabi_fsub+0x7e>
 8001290:	464a      	mov	r2, r9
 8001292:	2a00      	cmp	r2, #0
 8001294:	d010      	beq.n	80012b8 <__aeabi_fsub+0x130>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x114>
 800129a:	e098      	b.n	80013ce <__aeabi_fsub+0x246>
 800129c:	2300      	movs	r3, #0
 800129e:	e7bb      	b.n	8001218 <__aeabi_fsub+0x90>
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d034      	beq.n	800130e <__aeabi_fsub+0x186>
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d06e      	beq.n	8001388 <__aeabi_fsub+0x200>
 80012aa:	2aff      	cmp	r2, #255	@ 0xff
 80012ac:	d0b4      	beq.n	8001218 <__aeabi_fsub+0x90>
 80012ae:	000a      	movs	r2, r1
 80012b0:	e79c      	b.n	80011ec <__aeabi_fsub+0x64>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d000      	beq.n	80012b8 <__aeabi_fsub+0x130>
 80012b6:	e088      	b.n	80013ca <__aeabi_fsub+0x242>
 80012b8:	20fe      	movs	r0, #254	@ 0xfe
 80012ba:	1c6a      	adds	r2, r5, #1
 80012bc:	4210      	tst	r0, r2
 80012be:	d000      	beq.n	80012c2 <__aeabi_fsub+0x13a>
 80012c0:	e092      	b.n	80013e8 <__aeabi_fsub+0x260>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x140>
 80012c6:	e0a4      	b.n	8001412 <__aeabi_fsub+0x28a>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x146>
 80012cc:	e0cb      	b.n	8001466 <__aeabi_fsub+0x2de>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 80012d2:	e0ca      	b.n	800146a <__aeabi_fsub+0x2e2>
 80012d4:	2200      	movs	r2, #0
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	b2d0      	uxtb	r0, r2
 80012de:	e7cb      	b.n	8001278 <__aeabi_fsub+0xf0>
 80012e0:	0031      	movs	r1, r6
 80012e2:	2020      	movs	r0, #32
 80012e4:	40d1      	lsrs	r1, r2
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0032      	movs	r2, r6
 80012ec:	1e50      	subs	r0, r2, #1
 80012ee:	4182      	sbcs	r2, r0
 80012f0:	430a      	orrs	r2, r1
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	d5ae      	bpl.n	8001256 <__aeabi_fsub+0xce>
 80012f8:	1c6a      	adds	r2, r5, #1
 80012fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80012fc:	d14a      	bne.n	8001394 <__aeabi_fsub+0x20c>
 80012fe:	20ff      	movs	r0, #255	@ 0xff
 8001300:	2300      	movs	r3, #0
 8001302:	e7b9      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	2b00      	cmp	r3, #0
 8001308:	d14b      	bne.n	80013a2 <__aeabi_fsub+0x21a>
 800130a:	000c      	movs	r4, r1
 800130c:	0033      	movs	r3, r6
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	2aff      	cmp	r2, #255	@ 0xff
 8001312:	d100      	bne.n	8001316 <__aeabi_fsub+0x18e>
 8001314:	e781      	b.n	800121a <__aeabi_fsub+0x92>
 8001316:	e7df      	b.n	80012d8 <__aeabi_fsub+0x150>
 8001318:	019f      	lsls	r7, r3, #6
 800131a:	09bf      	lsrs	r7, r7, #6
 800131c:	0038      	movs	r0, r7
 800131e:	f002 f923 	bl	8003568 <__clzsi2>
 8001322:	3805      	subs	r0, #5
 8001324:	4087      	lsls	r7, r0
 8001326:	4285      	cmp	r5, r0
 8001328:	dc21      	bgt.n	800136e <__aeabi_fsub+0x1e6>
 800132a:	003b      	movs	r3, r7
 800132c:	2120      	movs	r1, #32
 800132e:	1b42      	subs	r2, r0, r5
 8001330:	3201      	adds	r2, #1
 8001332:	40d3      	lsrs	r3, r2
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	4097      	lsls	r7, r2
 8001338:	1e7a      	subs	r2, r7, #1
 800133a:	4197      	sbcs	r7, r2
 800133c:	2200      	movs	r2, #0
 800133e:	433b      	orrs	r3, r7
 8001340:	0759      	lsls	r1, r3, #29
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x1be>
 8001344:	e78b      	b.n	800125e <__aeabi_fsub+0xd6>
 8001346:	e78f      	b.n	8001268 <__aeabi_fsub+0xe0>
 8001348:	20fe      	movs	r0, #254	@ 0xfe
 800134a:	1c6a      	adds	r2, r5, #1
 800134c:	4210      	tst	r0, r2
 800134e:	d112      	bne.n	8001376 <__aeabi_fsub+0x1ee>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d152      	bne.n	80013fa <__aeabi_fsub+0x272>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d07c      	beq.n	8001452 <__aeabi_fsub+0x2ca>
 8001358:	2e00      	cmp	r6, #0
 800135a:	d0bb      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 800135c:	1b9a      	subs	r2, r3, r6
 800135e:	0150      	lsls	r0, r2, #5
 8001360:	d400      	bmi.n	8001364 <__aeabi_fsub+0x1dc>
 8001362:	e08b      	b.n	800147c <__aeabi_fsub+0x2f4>
 8001364:	2401      	movs	r4, #1
 8001366:	2200      	movs	r2, #0
 8001368:	1af3      	subs	r3, r6, r3
 800136a:	400c      	ands	r4, r1
 800136c:	e7e8      	b.n	8001340 <__aeabi_fsub+0x1b8>
 800136e:	4b56      	ldr	r3, [pc, #344]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001370:	1a2a      	subs	r2, r5, r0
 8001372:	403b      	ands	r3, r7
 8001374:	e7e4      	b.n	8001340 <__aeabi_fsub+0x1b8>
 8001376:	1b9f      	subs	r7, r3, r6
 8001378:	017a      	lsls	r2, r7, #5
 800137a:	d446      	bmi.n	800140a <__aeabi_fsub+0x282>
 800137c:	2f00      	cmp	r7, #0
 800137e:	d1cd      	bne.n	800131c <__aeabi_fsub+0x194>
 8001380:	2400      	movs	r4, #0
 8001382:	2000      	movs	r0, #0
 8001384:	2300      	movs	r3, #0
 8001386:	e777      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001388:	199b      	adds	r3, r3, r6
 800138a:	2501      	movs	r5, #1
 800138c:	3201      	adds	r2, #1
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	d400      	bmi.n	8001394 <__aeabi_fsub+0x20c>
 8001392:	e760      	b.n	8001256 <__aeabi_fsub+0xce>
 8001394:	2101      	movs	r1, #1
 8001396:	484d      	ldr	r0, [pc, #308]	@ (80014cc <__aeabi_fsub+0x344>)
 8001398:	4019      	ands	r1, r3
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	4003      	ands	r3, r0
 800139e:	430b      	orrs	r3, r1
 80013a0:	e7ce      	b.n	8001340 <__aeabi_fsub+0x1b8>
 80013a2:	1e57      	subs	r7, r2, #1
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d05a      	beq.n	800145e <__aeabi_fsub+0x2d6>
 80013a8:	000c      	movs	r4, r1
 80013aa:	2aff      	cmp	r2, #255	@ 0xff
 80013ac:	d033      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2f1b      	cmp	r7, #27
 80013b2:	dc07      	bgt.n	80013c4 <__aeabi_fsub+0x23c>
 80013b4:	2120      	movs	r1, #32
 80013b6:	1bc9      	subs	r1, r1, r7
 80013b8:	001a      	movs	r2, r3
 80013ba:	408b      	lsls	r3, r1
 80013bc:	40fa      	lsrs	r2, r7
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	418b      	sbcs	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	0005      	movs	r5, r0
 80013c6:	1ab3      	subs	r3, r6, r2
 80013c8:	e743      	b.n	8001252 <__aeabi_fsub+0xca>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d123      	bne.n	8001416 <__aeabi_fsub+0x28e>
 80013ce:	22ff      	movs	r2, #255	@ 0xff
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d09b      	beq.n	800130c <__aeabi_fsub+0x184>
 80013d4:	1e51      	subs	r1, r2, #1
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d0d6      	beq.n	8001388 <__aeabi_fsub+0x200>
 80013da:	2aff      	cmp	r2, #255	@ 0xff
 80013dc:	d01b      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013de:	291b      	cmp	r1, #27
 80013e0:	dd2c      	ble.n	800143c <__aeabi_fsub+0x2b4>
 80013e2:	0002      	movs	r2, r0
 80013e4:	1c73      	adds	r3, r6, #1
 80013e6:	e73a      	b.n	800125e <__aeabi_fsub+0xd6>
 80013e8:	2aff      	cmp	r2, #255	@ 0xff
 80013ea:	d088      	beq.n	80012fe <__aeabi_fsub+0x176>
 80013ec:	199b      	adds	r3, r3, r6
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	0759      	lsls	r1, r3, #29
 80013f2:	d000      	beq.n	80013f6 <__aeabi_fsub+0x26e>
 80013f4:	e733      	b.n	800125e <__aeabi_fsub+0xd6>
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_fsub+0x150>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d110      	bne.n	8001420 <__aeabi_fsub+0x298>
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d043      	beq.n	800148a <__aeabi_fsub+0x302>
 8001402:	2401      	movs	r4, #1
 8001404:	0033      	movs	r3, r6
 8001406:	400c      	ands	r4, r1
 8001408:	e706      	b.n	8001218 <__aeabi_fsub+0x90>
 800140a:	2401      	movs	r4, #1
 800140c:	1af7      	subs	r7, r6, r3
 800140e:	400c      	ands	r4, r1
 8001410:	e784      	b.n	800131c <__aeabi_fsub+0x194>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <__aeabi_fsub+0x298>
 8001416:	0033      	movs	r3, r6
 8001418:	e6fe      	b.n	8001218 <__aeabi_fsub+0x90>
 800141a:	2501      	movs	r5, #1
 800141c:	1b9b      	subs	r3, r3, r6
 800141e:	e718      	b.n	8001252 <__aeabi_fsub+0xca>
 8001420:	2e00      	cmp	r6, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_fsub+0x29e>
 8001424:	e6f8      	b.n	8001218 <__aeabi_fsub+0x90>
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	03d2      	lsls	r2, r2, #15
 800142a:	4297      	cmp	r7, r2
 800142c:	d304      	bcc.n	8001438 <__aeabi_fsub+0x2b0>
 800142e:	4594      	cmp	ip, r2
 8001430:	d202      	bcs.n	8001438 <__aeabi_fsub+0x2b0>
 8001432:	2401      	movs	r4, #1
 8001434:	0033      	movs	r3, r6
 8001436:	400c      	ands	r4, r1
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	e6f1      	b.n	8001220 <__aeabi_fsub+0x98>
 800143c:	001a      	movs	r2, r3
 800143e:	2520      	movs	r5, #32
 8001440:	40ca      	lsrs	r2, r1
 8001442:	1a69      	subs	r1, r5, r1
 8001444:	408b      	lsls	r3, r1
 8001446:	1e59      	subs	r1, r3, #1
 8001448:	418b      	sbcs	r3, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	0005      	movs	r5, r0
 800144e:	199b      	adds	r3, r3, r6
 8001450:	e750      	b.n	80012f4 <__aeabi_fsub+0x16c>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d094      	beq.n	8001380 <__aeabi_fsub+0x1f8>
 8001456:	2401      	movs	r4, #1
 8001458:	0033      	movs	r3, r6
 800145a:	400c      	ands	r4, r1
 800145c:	e73a      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800145e:	000c      	movs	r4, r1
 8001460:	2501      	movs	r5, #1
 8001462:	1af3      	subs	r3, r6, r3
 8001464:	e6f5      	b.n	8001252 <__aeabi_fsub+0xca>
 8001466:	0033      	movs	r3, r6
 8001468:	e734      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800146a:	199b      	adds	r3, r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	0159      	lsls	r1, r3, #5
 8001470:	d5c1      	bpl.n	80013f6 <__aeabi_fsub+0x26e>
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001474:	4013      	ands	r3, r2
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	2201      	movs	r2, #1
 800147a:	e72d      	b.n	80012d8 <__aeabi_fsub+0x150>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_fsub+0x2fa>
 8001480:	e77e      	b.n	8001380 <__aeabi_fsub+0x1f8>
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	e726      	b.n	80012d8 <__aeabi_fsub+0x150>
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	2400      	movs	r4, #0
 800148e:	20ff      	movs	r0, #255	@ 0xff
 8001490:	03db      	lsls	r3, r3, #15
 8001492:	e6f1      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001494:	2a00      	cmp	r2, #0
 8001496:	d100      	bne.n	800149a <__aeabi_fsub+0x312>
 8001498:	e756      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800149a:	1b47      	subs	r7, r0, r5
 800149c:	003a      	movs	r2, r7
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_fsub+0x31c>
 80014a2:	e730      	b.n	8001306 <__aeabi_fsub+0x17e>
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	04d2      	lsls	r2, r2, #19
 80014a8:	000c      	movs	r4, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	e77f      	b.n	80013ae <__aeabi_fsub+0x226>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_fsub+0x32c>
 80014b2:	e701      	b.n	80012b8 <__aeabi_fsub+0x130>
 80014b4:	1b41      	subs	r1, r0, r5
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d101      	bne.n	80014be <__aeabi_fsub+0x336>
 80014ba:	000a      	movs	r2, r1
 80014bc:	e788      	b.n	80013d0 <__aeabi_fsub+0x248>
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	04d2      	lsls	r2, r2, #19
 80014c2:	4313      	orrs	r3, r2
 80014c4:	e78b      	b.n	80013de <__aeabi_fsub+0x256>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	fbffffff 	.word	0xfbffffff
 80014cc:	7dffffff 	.word	0x7dffffff

080014d0 <__aeabi_fcmpun>:
 80014d0:	0243      	lsls	r3, r0, #9
 80014d2:	024a      	lsls	r2, r1, #9
 80014d4:	0040      	lsls	r0, r0, #1
 80014d6:	0049      	lsls	r1, r1, #1
 80014d8:	0a5b      	lsrs	r3, r3, #9
 80014da:	0a52      	lsrs	r2, r2, #9
 80014dc:	0e09      	lsrs	r1, r1, #24
 80014de:	0e00      	lsrs	r0, r0, #24
 80014e0:	28ff      	cmp	r0, #255	@ 0xff
 80014e2:	d006      	beq.n	80014f2 <__aeabi_fcmpun+0x22>
 80014e4:	2000      	movs	r0, #0
 80014e6:	29ff      	cmp	r1, #255	@ 0xff
 80014e8:	d102      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014ea:	1e53      	subs	r3, r2, #1
 80014ec:	419a      	sbcs	r2, r3
 80014ee:	0010      	movs	r0, r2
 80014f0:	4770      	bx	lr
 80014f2:	38fe      	subs	r0, #254	@ 0xfe
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1fb      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014f8:	e7f4      	b.n	80014e4 <__aeabi_fcmpun+0x14>
 80014fa:	46c0      	nop			@ (mov r8, r8)

080014fc <__aeabi_f2iz>:
 80014fc:	0241      	lsls	r1, r0, #9
 80014fe:	0042      	lsls	r2, r0, #1
 8001500:	0fc3      	lsrs	r3, r0, #31
 8001502:	0a49      	lsrs	r1, r1, #9
 8001504:	2000      	movs	r0, #0
 8001506:	0e12      	lsrs	r2, r2, #24
 8001508:	2a7e      	cmp	r2, #126	@ 0x7e
 800150a:	dd03      	ble.n	8001514 <__aeabi_f2iz+0x18>
 800150c:	2a9d      	cmp	r2, #157	@ 0x9d
 800150e:	dd02      	ble.n	8001516 <__aeabi_f2iz+0x1a>
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <__aeabi_f2iz+0x3c>)
 8001512:	1898      	adds	r0, r3, r2
 8001514:	4770      	bx	lr
 8001516:	2080      	movs	r0, #128	@ 0x80
 8001518:	0400      	lsls	r0, r0, #16
 800151a:	4301      	orrs	r1, r0
 800151c:	2a95      	cmp	r2, #149	@ 0x95
 800151e:	dc07      	bgt.n	8001530 <__aeabi_f2iz+0x34>
 8001520:	2096      	movs	r0, #150	@ 0x96
 8001522:	1a82      	subs	r2, r0, r2
 8001524:	40d1      	lsrs	r1, r2
 8001526:	4248      	negs	r0, r1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f3      	bne.n	8001514 <__aeabi_f2iz+0x18>
 800152c:	0008      	movs	r0, r1
 800152e:	e7f1      	b.n	8001514 <__aeabi_f2iz+0x18>
 8001530:	3a96      	subs	r2, #150	@ 0x96
 8001532:	4091      	lsls	r1, r2
 8001534:	e7f7      	b.n	8001526 <__aeabi_f2iz+0x2a>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	7fffffff 	.word	0x7fffffff

0800153c <__aeabi_i2f>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	2800      	cmp	r0, #0
 8001540:	d013      	beq.n	800156a <__aeabi_i2f+0x2e>
 8001542:	17c3      	asrs	r3, r0, #31
 8001544:	18c5      	adds	r5, r0, r3
 8001546:	405d      	eors	r5, r3
 8001548:	0fc4      	lsrs	r4, r0, #31
 800154a:	0028      	movs	r0, r5
 800154c:	f002 f80c 	bl	8003568 <__clzsi2>
 8001550:	239e      	movs	r3, #158	@ 0x9e
 8001552:	0001      	movs	r1, r0
 8001554:	1a1b      	subs	r3, r3, r0
 8001556:	2b96      	cmp	r3, #150	@ 0x96
 8001558:	dc0f      	bgt.n	800157a <__aeabi_i2f+0x3e>
 800155a:	2808      	cmp	r0, #8
 800155c:	d034      	beq.n	80015c8 <__aeabi_i2f+0x8c>
 800155e:	3908      	subs	r1, #8
 8001560:	408d      	lsls	r5, r1
 8001562:	026d      	lsls	r5, r5, #9
 8001564:	0a6d      	lsrs	r5, r5, #9
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	e002      	b.n	8001570 <__aeabi_i2f+0x34>
 800156a:	2400      	movs	r4, #0
 800156c:	2000      	movs	r0, #0
 800156e:	2500      	movs	r5, #0
 8001570:	05c0      	lsls	r0, r0, #23
 8001572:	4328      	orrs	r0, r5
 8001574:	07e4      	lsls	r4, r4, #31
 8001576:	4320      	orrs	r0, r4
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	2b99      	cmp	r3, #153	@ 0x99
 800157c:	dc16      	bgt.n	80015ac <__aeabi_i2f+0x70>
 800157e:	1f42      	subs	r2, r0, #5
 8001580:	2805      	cmp	r0, #5
 8001582:	d000      	beq.n	8001586 <__aeabi_i2f+0x4a>
 8001584:	4095      	lsls	r5, r2
 8001586:	002a      	movs	r2, r5
 8001588:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <__aeabi_i2f+0x94>)
 800158a:	4002      	ands	r2, r0
 800158c:	076e      	lsls	r6, r5, #29
 800158e:	d009      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001590:	260f      	movs	r6, #15
 8001592:	4035      	ands	r5, r6
 8001594:	2d04      	cmp	r5, #4
 8001596:	d005      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001598:	3204      	adds	r2, #4
 800159a:	0155      	lsls	r5, r2, #5
 800159c:	d502      	bpl.n	80015a4 <__aeabi_i2f+0x68>
 800159e:	239f      	movs	r3, #159	@ 0x9f
 80015a0:	4002      	ands	r2, r0
 80015a2:	1a5b      	subs	r3, r3, r1
 80015a4:	0192      	lsls	r2, r2, #6
 80015a6:	0a55      	lsrs	r5, r2, #9
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	e7e1      	b.n	8001570 <__aeabi_i2f+0x34>
 80015ac:	2205      	movs	r2, #5
 80015ae:	1a12      	subs	r2, r2, r0
 80015b0:	0028      	movs	r0, r5
 80015b2:	40d0      	lsrs	r0, r2
 80015b4:	0002      	movs	r2, r0
 80015b6:	0008      	movs	r0, r1
 80015b8:	301b      	adds	r0, #27
 80015ba:	4085      	lsls	r5, r0
 80015bc:	0028      	movs	r0, r5
 80015be:	1e45      	subs	r5, r0, #1
 80015c0:	41a8      	sbcs	r0, r5
 80015c2:	4302      	orrs	r2, r0
 80015c4:	0015      	movs	r5, r2
 80015c6:	e7de      	b.n	8001586 <__aeabi_i2f+0x4a>
 80015c8:	026d      	lsls	r5, r5, #9
 80015ca:	2096      	movs	r0, #150	@ 0x96
 80015cc:	0a6d      	lsrs	r5, r5, #9
 80015ce:	e7cf      	b.n	8001570 <__aeabi_i2f+0x34>
 80015d0:	fbffffff 	.word	0xfbffffff

080015d4 <__aeabi_ui2f>:
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	1e04      	subs	r4, r0, #0
 80015d8:	d00e      	beq.n	80015f8 <__aeabi_ui2f+0x24>
 80015da:	f001 ffc5 	bl	8003568 <__clzsi2>
 80015de:	239e      	movs	r3, #158	@ 0x9e
 80015e0:	0001      	movs	r1, r0
 80015e2:	1a1b      	subs	r3, r3, r0
 80015e4:	2b96      	cmp	r3, #150	@ 0x96
 80015e6:	dc0c      	bgt.n	8001602 <__aeabi_ui2f+0x2e>
 80015e8:	2808      	cmp	r0, #8
 80015ea:	d02f      	beq.n	800164c <__aeabi_ui2f+0x78>
 80015ec:	3908      	subs	r1, #8
 80015ee:	408c      	lsls	r4, r1
 80015f0:	0264      	lsls	r4, r4, #9
 80015f2:	0a64      	lsrs	r4, r4, #9
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	e001      	b.n	80015fc <__aeabi_ui2f+0x28>
 80015f8:	2000      	movs	r0, #0
 80015fa:	2400      	movs	r4, #0
 80015fc:	05c0      	lsls	r0, r0, #23
 80015fe:	4320      	orrs	r0, r4
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	2b99      	cmp	r3, #153	@ 0x99
 8001604:	dc16      	bgt.n	8001634 <__aeabi_ui2f+0x60>
 8001606:	1f42      	subs	r2, r0, #5
 8001608:	2805      	cmp	r0, #5
 800160a:	d000      	beq.n	800160e <__aeabi_ui2f+0x3a>
 800160c:	4094      	lsls	r4, r2
 800160e:	0022      	movs	r2, r4
 8001610:	4810      	ldr	r0, [pc, #64]	@ (8001654 <__aeabi_ui2f+0x80>)
 8001612:	4002      	ands	r2, r0
 8001614:	0765      	lsls	r5, r4, #29
 8001616:	d009      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001618:	250f      	movs	r5, #15
 800161a:	402c      	ands	r4, r5
 800161c:	2c04      	cmp	r4, #4
 800161e:	d005      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001620:	3204      	adds	r2, #4
 8001622:	0154      	lsls	r4, r2, #5
 8001624:	d502      	bpl.n	800162c <__aeabi_ui2f+0x58>
 8001626:	239f      	movs	r3, #159	@ 0x9f
 8001628:	4002      	ands	r2, r0
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	0192      	lsls	r2, r2, #6
 800162e:	0a54      	lsrs	r4, r2, #9
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	e7e3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001634:	0002      	movs	r2, r0
 8001636:	0020      	movs	r0, r4
 8001638:	321b      	adds	r2, #27
 800163a:	4090      	lsls	r0, r2
 800163c:	0002      	movs	r2, r0
 800163e:	1e50      	subs	r0, r2, #1
 8001640:	4182      	sbcs	r2, r0
 8001642:	2005      	movs	r0, #5
 8001644:	1a40      	subs	r0, r0, r1
 8001646:	40c4      	lsrs	r4, r0
 8001648:	4314      	orrs	r4, r2
 800164a:	e7e0      	b.n	800160e <__aeabi_ui2f+0x3a>
 800164c:	0264      	lsls	r4, r4, #9
 800164e:	2096      	movs	r0, #150	@ 0x96
 8001650:	0a64      	lsrs	r4, r4, #9
 8001652:	e7d3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001654:	fbffffff 	.word	0xfbffffff

08001658 <__aeabi_dadd>:
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	4657      	mov	r7, sl
 800165c:	464e      	mov	r6, r9
 800165e:	4645      	mov	r5, r8
 8001660:	46de      	mov	lr, fp
 8001662:	b5e0      	push	{r5, r6, r7, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	9000      	str	r0, [sp, #0]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	030c      	lsls	r4, r1, #12
 800166c:	004f      	lsls	r7, r1, #1
 800166e:	0fce      	lsrs	r6, r1, #31
 8001670:	0a61      	lsrs	r1, r4, #9
 8001672:	9c00      	ldr	r4, [sp, #0]
 8001674:	031d      	lsls	r5, r3, #12
 8001676:	0f64      	lsrs	r4, r4, #29
 8001678:	430c      	orrs	r4, r1
 800167a:	9900      	ldr	r1, [sp, #0]
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	00c8      	lsls	r0, r1, #3
 8001682:	0059      	lsls	r1, r3, #1
 8001684:	0d4b      	lsrs	r3, r1, #21
 8001686:	4699      	mov	r9, r3
 8001688:	9a00      	ldr	r2, [sp, #0]
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0a6d      	lsrs	r5, r5, #9
 800168e:	0fd9      	lsrs	r1, r3, #31
 8001690:	0f53      	lsrs	r3, r2, #29
 8001692:	432b      	orrs	r3, r5
 8001694:	469a      	mov	sl, r3
 8001696:	9b00      	ldr	r3, [sp, #0]
 8001698:	0d7f      	lsrs	r7, r7, #21
 800169a:	00da      	lsls	r2, r3, #3
 800169c:	4694      	mov	ip, r2
 800169e:	464a      	mov	r2, r9
 80016a0:	46b0      	mov	r8, r6
 80016a2:	1aba      	subs	r2, r7, r2
 80016a4:	428e      	cmp	r6, r1
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x52>
 80016a8:	e0b0      	b.n	800180c <__aeabi_dadd+0x1b4>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	dc00      	bgt.n	80016b0 <__aeabi_dadd+0x58>
 80016ae:	e078      	b.n	80017a2 <__aeabi_dadd+0x14a>
 80016b0:	4649      	mov	r1, r9
 80016b2:	2900      	cmp	r1, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x60>
 80016b6:	e0e9      	b.n	800188c <__aeabi_dadd+0x234>
 80016b8:	49c9      	ldr	r1, [pc, #804]	@ (80019e0 <__aeabi_dadd+0x388>)
 80016ba:	428f      	cmp	r7, r1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x68>
 80016be:	e195      	b.n	80019ec <__aeabi_dadd+0x394>
 80016c0:	2501      	movs	r5, #1
 80016c2:	2a38      	cmp	r2, #56	@ 0x38
 80016c4:	dc16      	bgt.n	80016f4 <__aeabi_dadd+0x9c>
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	4653      	mov	r3, sl
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	430b      	orrs	r3, r1
 80016ce:	469a      	mov	sl, r3
 80016d0:	2a1f      	cmp	r2, #31
 80016d2:	dd00      	ble.n	80016d6 <__aeabi_dadd+0x7e>
 80016d4:	e1e7      	b.n	8001aa6 <__aeabi_dadd+0x44e>
 80016d6:	2120      	movs	r1, #32
 80016d8:	4655      	mov	r5, sl
 80016da:	1a8b      	subs	r3, r1, r2
 80016dc:	4661      	mov	r1, ip
 80016de:	409d      	lsls	r5, r3
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	430d      	orrs	r5, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	4099      	lsls	r1, r3
 80016e8:	1e4b      	subs	r3, r1, #1
 80016ea:	4199      	sbcs	r1, r3
 80016ec:	4653      	mov	r3, sl
 80016ee:	40d3      	lsrs	r3, r2
 80016f0:	430d      	orrs	r5, r1
 80016f2:	1ae4      	subs	r4, r4, r3
 80016f4:	1b45      	subs	r5, r0, r5
 80016f6:	42a8      	cmp	r0, r5
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	4240      	negs	r0, r0
 80016fc:	1a24      	subs	r4, r4, r0
 80016fe:	0223      	lsls	r3, r4, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0xac>
 8001702:	e10f      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001704:	0264      	lsls	r4, r4, #9
 8001706:	0a64      	lsrs	r4, r4, #9
 8001708:	2c00      	cmp	r4, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0xb6>
 800170c:	e139      	b.n	8001982 <__aeabi_dadd+0x32a>
 800170e:	0020      	movs	r0, r4
 8001710:	f001 ff2a 	bl	8003568 <__clzsi2>
 8001714:	0003      	movs	r3, r0
 8001716:	3b08      	subs	r3, #8
 8001718:	2120      	movs	r1, #32
 800171a:	0028      	movs	r0, r5
 800171c:	1aca      	subs	r2, r1, r3
 800171e:	40d0      	lsrs	r0, r2
 8001720:	409c      	lsls	r4, r3
 8001722:	0002      	movs	r2, r0
 8001724:	409d      	lsls	r5, r3
 8001726:	4322      	orrs	r2, r4
 8001728:	429f      	cmp	r7, r3
 800172a:	dd00      	ble.n	800172e <__aeabi_dadd+0xd6>
 800172c:	e173      	b.n	8001a16 <__aeabi_dadd+0x3be>
 800172e:	1bd8      	subs	r0, r3, r7
 8001730:	3001      	adds	r0, #1
 8001732:	1a09      	subs	r1, r1, r0
 8001734:	002c      	movs	r4, r5
 8001736:	408d      	lsls	r5, r1
 8001738:	40c4      	lsrs	r4, r0
 800173a:	1e6b      	subs	r3, r5, #1
 800173c:	419d      	sbcs	r5, r3
 800173e:	0013      	movs	r3, r2
 8001740:	40c2      	lsrs	r2, r0
 8001742:	408b      	lsls	r3, r1
 8001744:	4325      	orrs	r5, r4
 8001746:	2700      	movs	r7, #0
 8001748:	0014      	movs	r4, r2
 800174a:	431d      	orrs	r5, r3
 800174c:	076b      	lsls	r3, r5, #29
 800174e:	d009      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001750:	230f      	movs	r3, #15
 8001752:	402b      	ands	r3, r5
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001758:	1d2b      	adds	r3, r5, #4
 800175a:	42ab      	cmp	r3, r5
 800175c:	41ad      	sbcs	r5, r5
 800175e:	426d      	negs	r5, r5
 8001760:	1964      	adds	r4, r4, r5
 8001762:	001d      	movs	r5, r3
 8001764:	0223      	lsls	r3, r4, #8
 8001766:	d400      	bmi.n	800176a <__aeabi_dadd+0x112>
 8001768:	e12d      	b.n	80019c6 <__aeabi_dadd+0x36e>
 800176a:	4a9d      	ldr	r2, [pc, #628]	@ (80019e0 <__aeabi_dadd+0x388>)
 800176c:	3701      	adds	r7, #1
 800176e:	4297      	cmp	r7, r2
 8001770:	d100      	bne.n	8001774 <__aeabi_dadd+0x11c>
 8001772:	e0d3      	b.n	800191c <__aeabi_dadd+0x2c4>
 8001774:	4646      	mov	r6, r8
 8001776:	499b      	ldr	r1, [pc, #620]	@ (80019e4 <__aeabi_dadd+0x38c>)
 8001778:	08ed      	lsrs	r5, r5, #3
 800177a:	4021      	ands	r1, r4
 800177c:	074a      	lsls	r2, r1, #29
 800177e:	432a      	orrs	r2, r5
 8001780:	057c      	lsls	r4, r7, #21
 8001782:	024d      	lsls	r5, r1, #9
 8001784:	0b2d      	lsrs	r5, r5, #12
 8001786:	0d64      	lsrs	r4, r4, #21
 8001788:	0524      	lsls	r4, r4, #20
 800178a:	432c      	orrs	r4, r5
 800178c:	07f6      	lsls	r6, r6, #31
 800178e:	4334      	orrs	r4, r6
 8001790:	0010      	movs	r0, r2
 8001792:	0021      	movs	r1, r4
 8001794:	b003      	add	sp, #12
 8001796:	bcf0      	pop	{r4, r5, r6, r7}
 8001798:	46bb      	mov	fp, r7
 800179a:	46b2      	mov	sl, r6
 800179c:	46a9      	mov	r9, r5
 800179e:	46a0      	mov	r8, r4
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x150>
 80017a6:	e084      	b.n	80018b2 <__aeabi_dadd+0x25a>
 80017a8:	464a      	mov	r2, r9
 80017aa:	1bd2      	subs	r2, r2, r7
 80017ac:	2f00      	cmp	r7, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x15a>
 80017b0:	e16d      	b.n	8001a8e <__aeabi_dadd+0x436>
 80017b2:	0025      	movs	r5, r4
 80017b4:	4305      	orrs	r5, r0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x162>
 80017b8:	e127      	b.n	8001a0a <__aeabi_dadd+0x3b2>
 80017ba:	1e56      	subs	r6, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x16a>
 80017c0:	e23b      	b.n	8001c3a <__aeabi_dadd+0x5e2>
 80017c2:	4d87      	ldr	r5, [pc, #540]	@ (80019e0 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x172>
 80017c8:	e26a      	b.n	8001ca0 <__aeabi_dadd+0x648>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2e38      	cmp	r6, #56	@ 0x38
 80017ce:	dc12      	bgt.n	80017f6 <__aeabi_dadd+0x19e>
 80017d0:	0032      	movs	r2, r6
 80017d2:	2a1f      	cmp	r2, #31
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dadd+0x180>
 80017d6:	e1f8      	b.n	8001bca <__aeabi_dadd+0x572>
 80017d8:	2620      	movs	r6, #32
 80017da:	0025      	movs	r5, r4
 80017dc:	1ab6      	subs	r6, r6, r2
 80017de:	0007      	movs	r7, r0
 80017e0:	4653      	mov	r3, sl
 80017e2:	40b0      	lsls	r0, r6
 80017e4:	40d4      	lsrs	r4, r2
 80017e6:	40b5      	lsls	r5, r6
 80017e8:	40d7      	lsrs	r7, r2
 80017ea:	1e46      	subs	r6, r0, #1
 80017ec:	41b0      	sbcs	r0, r6
 80017ee:	1b1b      	subs	r3, r3, r4
 80017f0:	469a      	mov	sl, r3
 80017f2:	433d      	orrs	r5, r7
 80017f4:	4305      	orrs	r5, r0
 80017f6:	4662      	mov	r2, ip
 80017f8:	1b55      	subs	r5, r2, r5
 80017fa:	45ac      	cmp	ip, r5
 80017fc:	4192      	sbcs	r2, r2
 80017fe:	4653      	mov	r3, sl
 8001800:	4252      	negs	r2, r2
 8001802:	000e      	movs	r6, r1
 8001804:	464f      	mov	r7, r9
 8001806:	4688      	mov	r8, r1
 8001808:	1a9c      	subs	r4, r3, r2
 800180a:	e778      	b.n	80016fe <__aeabi_dadd+0xa6>
 800180c:	2a00      	cmp	r2, #0
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dadd+0x1ba>
 8001810:	e08e      	b.n	8001930 <__aeabi_dadd+0x2d8>
 8001812:	4649      	mov	r1, r9
 8001814:	2900      	cmp	r1, #0
 8001816:	d175      	bne.n	8001904 <__aeabi_dadd+0x2ac>
 8001818:	4661      	mov	r1, ip
 800181a:	4653      	mov	r3, sl
 800181c:	4319      	orrs	r1, r3
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x1ca>
 8001820:	e0f6      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001822:	1e51      	subs	r1, r2, #1
 8001824:	2a01      	cmp	r2, #1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x1d2>
 8001828:	e191      	b.n	8001b4e <__aeabi_dadd+0x4f6>
 800182a:	4d6d      	ldr	r5, [pc, #436]	@ (80019e0 <__aeabi_dadd+0x388>)
 800182c:	42aa      	cmp	r2, r5
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x1da>
 8001830:	e0dc      	b.n	80019ec <__aeabi_dadd+0x394>
 8001832:	2501      	movs	r5, #1
 8001834:	2938      	cmp	r1, #56	@ 0x38
 8001836:	dc14      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001838:	000a      	movs	r2, r1
 800183a:	2a1f      	cmp	r2, #31
 800183c:	dd00      	ble.n	8001840 <__aeabi_dadd+0x1e8>
 800183e:	e1a2      	b.n	8001b86 <__aeabi_dadd+0x52e>
 8001840:	2120      	movs	r1, #32
 8001842:	4653      	mov	r3, sl
 8001844:	1a89      	subs	r1, r1, r2
 8001846:	408b      	lsls	r3, r1
 8001848:	001d      	movs	r5, r3
 800184a:	4663      	mov	r3, ip
 800184c:	40d3      	lsrs	r3, r2
 800184e:	431d      	orrs	r5, r3
 8001850:	4663      	mov	r3, ip
 8001852:	408b      	lsls	r3, r1
 8001854:	0019      	movs	r1, r3
 8001856:	1e4b      	subs	r3, r1, #1
 8001858:	4199      	sbcs	r1, r3
 800185a:	4653      	mov	r3, sl
 800185c:	40d3      	lsrs	r3, r2
 800185e:	430d      	orrs	r5, r1
 8001860:	18e4      	adds	r4, r4, r3
 8001862:	182d      	adds	r5, r5, r0
 8001864:	4285      	cmp	r5, r0
 8001866:	4180      	sbcs	r0, r0
 8001868:	4240      	negs	r0, r0
 800186a:	1824      	adds	r4, r4, r0
 800186c:	0223      	lsls	r3, r4, #8
 800186e:	d559      	bpl.n	8001924 <__aeabi_dadd+0x2cc>
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001872:	3701      	adds	r7, #1
 8001874:	429f      	cmp	r7, r3
 8001876:	d051      	beq.n	800191c <__aeabi_dadd+0x2c4>
 8001878:	2101      	movs	r1, #1
 800187a:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <__aeabi_dadd+0x38c>)
 800187c:	086a      	lsrs	r2, r5, #1
 800187e:	401c      	ands	r4, r3
 8001880:	4029      	ands	r1, r5
 8001882:	430a      	orrs	r2, r1
 8001884:	07e5      	lsls	r5, r4, #31
 8001886:	4315      	orrs	r5, r2
 8001888:	0864      	lsrs	r4, r4, #1
 800188a:	e75f      	b.n	800174c <__aeabi_dadd+0xf4>
 800188c:	4661      	mov	r1, ip
 800188e:	4653      	mov	r3, sl
 8001890:	4319      	orrs	r1, r3
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0x23e>
 8001894:	e0bc      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001896:	1e51      	subs	r1, r2, #1
 8001898:	2a01      	cmp	r2, #1
 800189a:	d100      	bne.n	800189e <__aeabi_dadd+0x246>
 800189c:	e164      	b.n	8001b68 <__aeabi_dadd+0x510>
 800189e:	4d50      	ldr	r5, [pc, #320]	@ (80019e0 <__aeabi_dadd+0x388>)
 80018a0:	42aa      	cmp	r2, r5
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x24e>
 80018a4:	e16a      	b.n	8001b7c <__aeabi_dadd+0x524>
 80018a6:	2501      	movs	r5, #1
 80018a8:	2938      	cmp	r1, #56	@ 0x38
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dadd+0x256>
 80018ac:	e722      	b.n	80016f4 <__aeabi_dadd+0x9c>
 80018ae:	000a      	movs	r2, r1
 80018b0:	e70e      	b.n	80016d0 <__aeabi_dadd+0x78>
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <__aeabi_dadd+0x390>)
 80018b4:	1c7d      	adds	r5, r7, #1
 80018b6:	4215      	tst	r5, r2
 80018b8:	d000      	beq.n	80018bc <__aeabi_dadd+0x264>
 80018ba:	e0d0      	b.n	8001a5e <__aeabi_dadd+0x406>
 80018bc:	0025      	movs	r5, r4
 80018be:	4662      	mov	r2, ip
 80018c0:	4653      	mov	r3, sl
 80018c2:	4305      	orrs	r5, r0
 80018c4:	431a      	orrs	r2, r3
 80018c6:	2f00      	cmp	r7, #0
 80018c8:	d000      	beq.n	80018cc <__aeabi_dadd+0x274>
 80018ca:	e137      	b.n	8001b3c <__aeabi_dadd+0x4e4>
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x27a>
 80018d0:	e1a8      	b.n	8001c24 <__aeabi_dadd+0x5cc>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x280>
 80018d6:	e16a      	b.n	8001bae <__aeabi_dadd+0x556>
 80018d8:	4663      	mov	r3, ip
 80018da:	1ac5      	subs	r5, r0, r3
 80018dc:	4653      	mov	r3, sl
 80018de:	1ae2      	subs	r2, r4, r3
 80018e0:	42a8      	cmp	r0, r5
 80018e2:	419b      	sbcs	r3, r3
 80018e4:	425b      	negs	r3, r3
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	021a      	lsls	r2, r3, #8
 80018ea:	d400      	bmi.n	80018ee <__aeabi_dadd+0x296>
 80018ec:	e203      	b.n	8001cf6 <__aeabi_dadd+0x69e>
 80018ee:	4663      	mov	r3, ip
 80018f0:	1a1d      	subs	r5, r3, r0
 80018f2:	45ac      	cmp	ip, r5
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	4653      	mov	r3, sl
 80018f8:	4252      	negs	r2, r2
 80018fa:	1b1c      	subs	r4, r3, r4
 80018fc:	000e      	movs	r6, r1
 80018fe:	4688      	mov	r8, r1
 8001900:	1aa4      	subs	r4, r4, r2
 8001902:	e723      	b.n	800174c <__aeabi_dadd+0xf4>
 8001904:	4936      	ldr	r1, [pc, #216]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001906:	428f      	cmp	r7, r1
 8001908:	d070      	beq.n	80019ec <__aeabi_dadd+0x394>
 800190a:	2501      	movs	r5, #1
 800190c:	2a38      	cmp	r2, #56	@ 0x38
 800190e:	dca8      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	4653      	mov	r3, sl
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	430b      	orrs	r3, r1
 8001918:	469a      	mov	sl, r3
 800191a:	e78e      	b.n	800183a <__aeabi_dadd+0x1e2>
 800191c:	003c      	movs	r4, r7
 800191e:	2500      	movs	r5, #0
 8001920:	2200      	movs	r2, #0
 8001922:	e731      	b.n	8001788 <__aeabi_dadd+0x130>
 8001924:	2307      	movs	r3, #7
 8001926:	402b      	ands	r3, r5
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <__aeabi_dadd+0x2d6>
 800192c:	e710      	b.n	8001750 <__aeabi_dadd+0xf8>
 800192e:	e093      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001930:	2a00      	cmp	r2, #0
 8001932:	d074      	beq.n	8001a1e <__aeabi_dadd+0x3c6>
 8001934:	464a      	mov	r2, r9
 8001936:	1bd2      	subs	r2, r2, r7
 8001938:	2f00      	cmp	r7, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dadd+0x2e6>
 800193c:	e0c7      	b.n	8001ace <__aeabi_dadd+0x476>
 800193e:	4928      	ldr	r1, [pc, #160]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001940:	4589      	cmp	r9, r1
 8001942:	d100      	bne.n	8001946 <__aeabi_dadd+0x2ee>
 8001944:	e185      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001946:	2501      	movs	r5, #1
 8001948:	2a38      	cmp	r2, #56	@ 0x38
 800194a:	dc12      	bgt.n	8001972 <__aeabi_dadd+0x31a>
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	430c      	orrs	r4, r1
 8001952:	2a1f      	cmp	r2, #31
 8001954:	dd00      	ble.n	8001958 <__aeabi_dadd+0x300>
 8001956:	e1ab      	b.n	8001cb0 <__aeabi_dadd+0x658>
 8001958:	2120      	movs	r1, #32
 800195a:	0025      	movs	r5, r4
 800195c:	1a89      	subs	r1, r1, r2
 800195e:	0007      	movs	r7, r0
 8001960:	4088      	lsls	r0, r1
 8001962:	408d      	lsls	r5, r1
 8001964:	40d7      	lsrs	r7, r2
 8001966:	1e41      	subs	r1, r0, #1
 8001968:	4188      	sbcs	r0, r1
 800196a:	40d4      	lsrs	r4, r2
 800196c:	433d      	orrs	r5, r7
 800196e:	4305      	orrs	r5, r0
 8001970:	44a2      	add	sl, r4
 8001972:	4465      	add	r5, ip
 8001974:	4565      	cmp	r5, ip
 8001976:	4192      	sbcs	r2, r2
 8001978:	4252      	negs	r2, r2
 800197a:	4452      	add	r2, sl
 800197c:	0014      	movs	r4, r2
 800197e:	464f      	mov	r7, r9
 8001980:	e774      	b.n	800186c <__aeabi_dadd+0x214>
 8001982:	0028      	movs	r0, r5
 8001984:	f001 fdf0 	bl	8003568 <__clzsi2>
 8001988:	0003      	movs	r3, r0
 800198a:	3318      	adds	r3, #24
 800198c:	2b1f      	cmp	r3, #31
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dadd+0x33a>
 8001990:	e6c2      	b.n	8001718 <__aeabi_dadd+0xc0>
 8001992:	002a      	movs	r2, r5
 8001994:	3808      	subs	r0, #8
 8001996:	4082      	lsls	r2, r0
 8001998:	429f      	cmp	r7, r3
 800199a:	dd00      	ble.n	800199e <__aeabi_dadd+0x346>
 800199c:	e0a9      	b.n	8001af2 <__aeabi_dadd+0x49a>
 800199e:	1bdb      	subs	r3, r3, r7
 80019a0:	1c58      	adds	r0, r3, #1
 80019a2:	281f      	cmp	r0, #31
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dadd+0x350>
 80019a6:	e1ac      	b.n	8001d02 <__aeabi_dadd+0x6aa>
 80019a8:	0015      	movs	r5, r2
 80019aa:	3b1f      	subs	r3, #31
 80019ac:	40dd      	lsrs	r5, r3
 80019ae:	2820      	cmp	r0, #32
 80019b0:	d005      	beq.n	80019be <__aeabi_dadd+0x366>
 80019b2:	2340      	movs	r3, #64	@ 0x40
 80019b4:	1a1b      	subs	r3, r3, r0
 80019b6:	409a      	lsls	r2, r3
 80019b8:	1e53      	subs	r3, r2, #1
 80019ba:	419a      	sbcs	r2, r3
 80019bc:	4315      	orrs	r5, r2
 80019be:	2307      	movs	r3, #7
 80019c0:	2700      	movs	r7, #0
 80019c2:	402b      	ands	r3, r5
 80019c4:	e7b0      	b.n	8001928 <__aeabi_dadd+0x2d0>
 80019c6:	08ed      	lsrs	r5, r5, #3
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <__aeabi_dadd+0x388>)
 80019ca:	0762      	lsls	r2, r4, #29
 80019cc:	432a      	orrs	r2, r5
 80019ce:	08e4      	lsrs	r4, r4, #3
 80019d0:	429f      	cmp	r7, r3
 80019d2:	d00f      	beq.n	80019f4 <__aeabi_dadd+0x39c>
 80019d4:	0324      	lsls	r4, r4, #12
 80019d6:	0b25      	lsrs	r5, r4, #12
 80019d8:	057c      	lsls	r4, r7, #21
 80019da:	0d64      	lsrs	r4, r4, #21
 80019dc:	e6d4      	b.n	8001788 <__aeabi_dadd+0x130>
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	ff7fffff 	.word	0xff7fffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	08c0      	lsrs	r0, r0, #3
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	4302      	orrs	r2, r0
 80019f2:	08e4      	lsrs	r4, r4, #3
 80019f4:	0013      	movs	r3, r2
 80019f6:	4323      	orrs	r3, r4
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x3a4>
 80019fa:	e186      	b.n	8001d0a <__aeabi_dadd+0x6b2>
 80019fc:	2580      	movs	r5, #128	@ 0x80
 80019fe:	032d      	lsls	r5, r5, #12
 8001a00:	4325      	orrs	r5, r4
 8001a02:	032d      	lsls	r5, r5, #12
 8001a04:	4cc3      	ldr	r4, [pc, #780]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a06:	0b2d      	lsrs	r5, r5, #12
 8001a08:	e6be      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a0a:	4660      	mov	r0, ip
 8001a0c:	4654      	mov	r4, sl
 8001a0e:	000e      	movs	r6, r1
 8001a10:	0017      	movs	r7, r2
 8001a12:	08c5      	lsrs	r5, r0, #3
 8001a14:	e7d8      	b.n	80019c8 <__aeabi_dadd+0x370>
 8001a16:	4cc0      	ldr	r4, [pc, #768]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	e696      	b.n	800174c <__aeabi_dadd+0xf4>
 8001a1e:	4abf      	ldr	r2, [pc, #764]	@ (8001d1c <__aeabi_dadd+0x6c4>)
 8001a20:	1c79      	adds	r1, r7, #1
 8001a22:	4211      	tst	r1, r2
 8001a24:	d16b      	bne.n	8001afe <__aeabi_dadd+0x4a6>
 8001a26:	0022      	movs	r2, r4
 8001a28:	4302      	orrs	r2, r0
 8001a2a:	2f00      	cmp	r7, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dadd+0x3d8>
 8001a2e:	e0db      	b.n	8001be8 <__aeabi_dadd+0x590>
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x3de>
 8001a34:	e12d      	b.n	8001c92 <__aeabi_dadd+0x63a>
 8001a36:	4662      	mov	r2, ip
 8001a38:	4653      	mov	r3, sl
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dadd+0x3e8>
 8001a3e:	e0b6      	b.n	8001bae <__aeabi_dadd+0x556>
 8001a40:	4663      	mov	r3, ip
 8001a42:	18c5      	adds	r5, r0, r3
 8001a44:	4285      	cmp	r5, r0
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4454      	add	r4, sl
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1824      	adds	r4, r4, r0
 8001a4e:	0223      	lsls	r3, r4, #8
 8001a50:	d502      	bpl.n	8001a58 <__aeabi_dadd+0x400>
 8001a52:	000f      	movs	r7, r1
 8001a54:	4bb0      	ldr	r3, [pc, #704]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a56:	401c      	ands	r4, r3
 8001a58:	003a      	movs	r2, r7
 8001a5a:	0028      	movs	r0, r5
 8001a5c:	e7d8      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001a5e:	4662      	mov	r2, ip
 8001a60:	1a85      	subs	r5, r0, r2
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4653      	mov	r3, sl
 8001a68:	4252      	negs	r2, r2
 8001a6a:	4691      	mov	r9, r2
 8001a6c:	1ae3      	subs	r3, r4, r3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	464b      	mov	r3, r9
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	4691      	mov	r9, r2
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	d454      	bmi.n	8001b26 <__aeabi_dadd+0x4ce>
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	464c      	mov	r4, r9
 8001a80:	432a      	orrs	r2, r5
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dadd+0x42e>
 8001a84:	e640      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001a86:	2600      	movs	r6, #0
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	e67c      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a8e:	4da1      	ldr	r5, [pc, #644]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a90:	45a9      	cmp	r9, r5
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x43e>
 8001a94:	e090      	b.n	8001bb8 <__aeabi_dadd+0x560>
 8001a96:	2501      	movs	r5, #1
 8001a98:	2a38      	cmp	r2, #56	@ 0x38
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dadd+0x446>
 8001a9c:	e6ab      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001a9e:	2580      	movs	r5, #128	@ 0x80
 8001aa0:	042d      	lsls	r5, r5, #16
 8001aa2:	432c      	orrs	r4, r5
 8001aa4:	e695      	b.n	80017d2 <__aeabi_dadd+0x17a>
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	4655      	mov	r5, sl
 8001aaa:	3920      	subs	r1, #32
 8001aac:	40cd      	lsrs	r5, r1
 8001aae:	46a9      	mov	r9, r5
 8001ab0:	2a20      	cmp	r2, #32
 8001ab2:	d006      	beq.n	8001ac2 <__aeabi_dadd+0x46a>
 8001ab4:	2140      	movs	r1, #64	@ 0x40
 8001ab6:	4653      	mov	r3, sl
 8001ab8:	1a8a      	subs	r2, r1, r2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	4662      	mov	r2, ip
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	4694      	mov	ip, r2
 8001ac2:	4665      	mov	r5, ip
 8001ac4:	1e6b      	subs	r3, r5, #1
 8001ac6:	419d      	sbcs	r5, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	431d      	orrs	r5, r3
 8001acc:	e612      	b.n	80016f4 <__aeabi_dadd+0x9c>
 8001ace:	0021      	movs	r1, r4
 8001ad0:	4301      	orrs	r1, r0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dadd+0x47e>
 8001ad4:	e0c4      	b.n	8001c60 <__aeabi_dadd+0x608>
 8001ad6:	1e51      	subs	r1, r2, #1
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d100      	bne.n	8001ade <__aeabi_dadd+0x486>
 8001adc:	e0fb      	b.n	8001cd6 <__aeabi_dadd+0x67e>
 8001ade:	4d8d      	ldr	r5, [pc, #564]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001ae0:	42aa      	cmp	r2, r5
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dadd+0x48e>
 8001ae4:	e0b5      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	2938      	cmp	r1, #56	@ 0x38
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dadd+0x496>
 8001aec:	e741      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001aee:	000a      	movs	r2, r1
 8001af0:	e72f      	b.n	8001952 <__aeabi_dadd+0x2fa>
 8001af2:	4c89      	ldr	r4, [pc, #548]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001af4:	1aff      	subs	r7, r7, r3
 8001af6:	4014      	ands	r4, r2
 8001af8:	0762      	lsls	r2, r4, #29
 8001afa:	08e4      	lsrs	r4, r4, #3
 8001afc:	e76a      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001afe:	4a85      	ldr	r2, [pc, #532]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001b00:	4291      	cmp	r1, r2
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dadd+0x4ae>
 8001b04:	e0e3      	b.n	8001cce <__aeabi_dadd+0x676>
 8001b06:	4663      	mov	r3, ip
 8001b08:	18c2      	adds	r2, r0, r3
 8001b0a:	4282      	cmp	r2, r0
 8001b0c:	4180      	sbcs	r0, r0
 8001b0e:	0023      	movs	r3, r4
 8001b10:	4240      	negs	r0, r0
 8001b12:	4453      	add	r3, sl
 8001b14:	181b      	adds	r3, r3, r0
 8001b16:	07dd      	lsls	r5, r3, #31
 8001b18:	085c      	lsrs	r4, r3, #1
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	0852      	lsrs	r2, r2, #1
 8001b1e:	4315      	orrs	r5, r2
 8001b20:	000f      	movs	r7, r1
 8001b22:	402b      	ands	r3, r5
 8001b24:	e700      	b.n	8001928 <__aeabi_dadd+0x2d0>
 8001b26:	4663      	mov	r3, ip
 8001b28:	1a1d      	subs	r5, r3, r0
 8001b2a:	45ac      	cmp	ip, r5
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	4653      	mov	r3, sl
 8001b30:	4252      	negs	r2, r2
 8001b32:	1b1c      	subs	r4, r3, r4
 8001b34:	000e      	movs	r6, r1
 8001b36:	4688      	mov	r8, r1
 8001b38:	1aa4      	subs	r4, r4, r2
 8001b3a:	e5e5      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_dadd+0x4ea>
 8001b40:	e091      	b.n	8001c66 <__aeabi_dadd+0x60e>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d138      	bne.n	8001bb8 <__aeabi_dadd+0x560>
 8001b46:	2480      	movs	r4, #128	@ 0x80
 8001b48:	2600      	movs	r6, #0
 8001b4a:	0324      	lsls	r4, r4, #12
 8001b4c:	e756      	b.n	80019fc <__aeabi_dadd+0x3a4>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	18c5      	adds	r5, r0, r3
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4454      	add	r4, sl
 8001b58:	4240      	negs	r0, r0
 8001b5a:	1824      	adds	r4, r4, r0
 8001b5c:	2701      	movs	r7, #1
 8001b5e:	0223      	lsls	r3, r4, #8
 8001b60:	d400      	bmi.n	8001b64 <__aeabi_dadd+0x50c>
 8001b62:	e6df      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001b64:	2702      	movs	r7, #2
 8001b66:	e687      	b.n	8001878 <__aeabi_dadd+0x220>
 8001b68:	4663      	mov	r3, ip
 8001b6a:	1ac5      	subs	r5, r0, r3
 8001b6c:	42a8      	cmp	r0, r5
 8001b6e:	4180      	sbcs	r0, r0
 8001b70:	4653      	mov	r3, sl
 8001b72:	4240      	negs	r0, r0
 8001b74:	1ae4      	subs	r4, r4, r3
 8001b76:	2701      	movs	r7, #1
 8001b78:	1a24      	subs	r4, r4, r0
 8001b7a:	e5c0      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	08c0      	lsrs	r0, r0, #3
 8001b80:	4302      	orrs	r2, r0
 8001b82:	08e4      	lsrs	r4, r4, #3
 8001b84:	e736      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001b86:	0011      	movs	r1, r2
 8001b88:	4653      	mov	r3, sl
 8001b8a:	3920      	subs	r1, #32
 8001b8c:	40cb      	lsrs	r3, r1
 8001b8e:	4699      	mov	r9, r3
 8001b90:	2a20      	cmp	r2, #32
 8001b92:	d006      	beq.n	8001ba2 <__aeabi_dadd+0x54a>
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4653      	mov	r3, sl
 8001b98:	1a8a      	subs	r2, r1, r2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	4694      	mov	ip, r2
 8001ba2:	4665      	mov	r5, ip
 8001ba4:	1e6b      	subs	r3, r5, #1
 8001ba6:	419d      	sbcs	r5, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	431d      	orrs	r5, r3
 8001bac:	e659      	b.n	8001862 <__aeabi_dadd+0x20a>
 8001bae:	0762      	lsls	r2, r4, #29
 8001bb0:	08c0      	lsrs	r0, r0, #3
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	08e4      	lsrs	r4, r4, #3
 8001bb6:	e70d      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001bb8:	4653      	mov	r3, sl
 8001bba:	075a      	lsls	r2, r3, #29
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	08d8      	lsrs	r0, r3, #3
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e714      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001bca:	0015      	movs	r5, r2
 8001bcc:	0026      	movs	r6, r4
 8001bce:	3d20      	subs	r5, #32
 8001bd0:	40ee      	lsrs	r6, r5
 8001bd2:	2a20      	cmp	r2, #32
 8001bd4:	d003      	beq.n	8001bde <__aeabi_dadd+0x586>
 8001bd6:	2540      	movs	r5, #64	@ 0x40
 8001bd8:	1aaa      	subs	r2, r5, r2
 8001bda:	4094      	lsls	r4, r2
 8001bdc:	4320      	orrs	r0, r4
 8001bde:	1e42      	subs	r2, r0, #1
 8001be0:	4190      	sbcs	r0, r2
 8001be2:	0005      	movs	r5, r0
 8001be4:	4335      	orrs	r5, r6
 8001be6:	e606      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d07c      	beq.n	8001ce6 <__aeabi_dadd+0x68e>
 8001bec:	4662      	mov	r2, ip
 8001bee:	4653      	mov	r3, sl
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dadd+0x5a0>
 8001bf6:	e6fa      	b.n	80019ee <__aeabi_dadd+0x396>
 8001bf8:	0762      	lsls	r2, r4, #29
 8001bfa:	4310      	orrs	r0, r2
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	08e4      	lsrs	r4, r4, #3
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	4214      	tst	r4, r2
 8001c04:	d008      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c06:	08d9      	lsrs	r1, r3, #3
 8001c08:	4211      	tst	r1, r2
 8001c0a:	d105      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	08d8      	lsrs	r0, r3, #3
 8001c10:	4653      	mov	r3, sl
 8001c12:	000c      	movs	r4, r1
 8001c14:	075b      	lsls	r3, r3, #29
 8001c16:	4318      	orrs	r0, r3
 8001c18:	0f42      	lsrs	r2, r0, #29
 8001c1a:	00c0      	lsls	r0, r0, #3
 8001c1c:	08c0      	lsrs	r0, r0, #3
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	4302      	orrs	r2, r0
 8001c22:	e6e7      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dadd+0x5d2>
 8001c28:	e72d      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	08d8      	lsrs	r0, r3, #3
 8001c2e:	4653      	mov	r3, sl
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	000e      	movs	r6, r1
 8001c34:	4302      	orrs	r2, r0
 8001c36:	08dc      	lsrs	r4, r3, #3
 8001c38:	e6cc      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	1a1d      	subs	r5, r3, r0
 8001c3e:	45ac      	cmp	ip, r5
 8001c40:	4192      	sbcs	r2, r2
 8001c42:	4653      	mov	r3, sl
 8001c44:	4252      	negs	r2, r2
 8001c46:	1b1c      	subs	r4, r3, r4
 8001c48:	000e      	movs	r6, r1
 8001c4a:	4688      	mov	r8, r1
 8001c4c:	1aa4      	subs	r4, r4, r2
 8001c4e:	3701      	adds	r7, #1
 8001c50:	e555      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001c52:	4663      	mov	r3, ip
 8001c54:	08d9      	lsrs	r1, r3, #3
 8001c56:	4653      	mov	r3, sl
 8001c58:	075a      	lsls	r2, r3, #29
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	08dc      	lsrs	r4, r3, #3
 8001c5e:	e6c9      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c60:	4660      	mov	r0, ip
 8001c62:	4654      	mov	r4, sl
 8001c64:	e6d4      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001c66:	08c0      	lsrs	r0, r0, #3
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dadd+0x616>
 8001c6c:	e6bf      	b.n	80019ee <__aeabi_dadd+0x396>
 8001c6e:	0762      	lsls	r2, r4, #29
 8001c70:	4310      	orrs	r0, r2
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	08e4      	lsrs	r4, r4, #3
 8001c76:	0312      	lsls	r2, r2, #12
 8001c78:	4214      	tst	r4, r2
 8001c7a:	d0cd      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c7c:	08dd      	lsrs	r5, r3, #3
 8001c7e:	4215      	tst	r5, r2
 8001c80:	d1ca      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c82:	4663      	mov	r3, ip
 8001c84:	08d8      	lsrs	r0, r3, #3
 8001c86:	4653      	mov	r3, sl
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	000e      	movs	r6, r1
 8001c8c:	002c      	movs	r4, r5
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	e7c2      	b.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c92:	4663      	mov	r3, ip
 8001c94:	08d9      	lsrs	r1, r3, #3
 8001c96:	4653      	mov	r3, sl
 8001c98:	075a      	lsls	r2, r3, #29
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	08dc      	lsrs	r4, r3, #3
 8001c9e:	e699      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	075a      	lsls	r2, r3, #29
 8001ca8:	000e      	movs	r6, r1
 8001caa:	4302      	orrs	r2, r0
 8001cac:	08dc      	lsrs	r4, r3, #3
 8001cae:	e6a1      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0027      	movs	r7, r4
 8001cb4:	3920      	subs	r1, #32
 8001cb6:	40cf      	lsrs	r7, r1
 8001cb8:	2a20      	cmp	r2, #32
 8001cba:	d003      	beq.n	8001cc4 <__aeabi_dadd+0x66c>
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	1a8a      	subs	r2, r1, r2
 8001cc0:	4094      	lsls	r4, r2
 8001cc2:	4320      	orrs	r0, r4
 8001cc4:	1e42      	subs	r2, r0, #1
 8001cc6:	4190      	sbcs	r0, r2
 8001cc8:	0005      	movs	r5, r0
 8001cca:	433d      	orrs	r5, r7
 8001ccc:	e651      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001cce:	000c      	movs	r4, r1
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	e558      	b.n	8001788 <__aeabi_dadd+0x130>
 8001cd6:	4460      	add	r0, ip
 8001cd8:	4560      	cmp	r0, ip
 8001cda:	4192      	sbcs	r2, r2
 8001cdc:	4454      	add	r4, sl
 8001cde:	4252      	negs	r2, r2
 8001ce0:	0005      	movs	r5, r0
 8001ce2:	18a4      	adds	r4, r4, r2
 8001ce4:	e73a      	b.n	8001b5c <__aeabi_dadd+0x504>
 8001ce6:	4653      	mov	r3, sl
 8001ce8:	075a      	lsls	r2, r3, #29
 8001cea:	4663      	mov	r3, ip
 8001cec:	08d9      	lsrs	r1, r3, #3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	08dc      	lsrs	r4, r3, #3
 8001cf4:	e67e      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	432a      	orrs	r2, r5
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dadd+0x6a8>
 8001cfe:	e6ab      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001d00:	e6c1      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001d02:	2120      	movs	r1, #32
 8001d04:	2500      	movs	r5, #0
 8001d06:	1a09      	subs	r1, r1, r0
 8001d08:	e519      	b.n	800173e <__aeabi_dadd+0xe6>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4c01      	ldr	r4, [pc, #4]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001d10:	e53a      	b.n	8001788 <__aeabi_dadd+0x130>
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	000007ff 	.word	0x000007ff
 8001d18:	ff7fffff 	.word	0xff7fffff
 8001d1c:	000007fe 	.word	0x000007fe

08001d20 <__aeabi_ddiv>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	46de      	mov	lr, fp
 8001d24:	4645      	mov	r5, r8
 8001d26:	4657      	mov	r7, sl
 8001d28:	464e      	mov	r6, r9
 8001d2a:	b5e0      	push	{r5, r6, r7, lr}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	030b      	lsls	r3, r1, #12
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	469b      	mov	fp, r3
 8001d38:	0fca      	lsrs	r2, r1, #31
 8001d3a:	004b      	lsls	r3, r1, #1
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	4680      	mov	r8, r0
 8001d40:	0d5b      	lsrs	r3, r3, #21
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	d100      	bne.n	8001d48 <__aeabi_ddiv+0x28>
 8001d46:	e16a      	b.n	800201e <__aeabi_ddiv+0x2fe>
 8001d48:	4ad4      	ldr	r2, [pc, #848]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x30>
 8001d4e:	e18c      	b.n	800206a <__aeabi_ddiv+0x34a>
 8001d50:	4659      	mov	r1, fp
 8001d52:	0f42      	lsrs	r2, r0, #29
 8001d54:	00c9      	lsls	r1, r1, #3
 8001d56:	430a      	orrs	r2, r1
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	0409      	lsls	r1, r1, #16
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	00c2      	lsls	r2, r0, #3
 8001d60:	4690      	mov	r8, r2
 8001d62:	4acf      	ldr	r2, [pc, #828]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001d64:	4689      	mov	r9, r1
 8001d66:	4692      	mov	sl, r2
 8001d68:	449a      	add	sl, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9e00      	ldr	r6, [sp, #0]
 8001d72:	9f01      	ldr	r7, [sp, #4]
 8001d74:	033b      	lsls	r3, r7, #12
 8001d76:	0b1b      	lsrs	r3, r3, #12
 8001d78:	469b      	mov	fp, r3
 8001d7a:	007b      	lsls	r3, r7, #1
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0d5b      	lsrs	r3, r3, #21
 8001d80:	0ffd      	lsrs	r5, r7, #31
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x68>
 8001d86:	e128      	b.n	8001fda <__aeabi_ddiv+0x2ba>
 8001d88:	4ac4      	ldr	r2, [pc, #784]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x70>
 8001d8e:	e177      	b.n	8002080 <__aeabi_ddiv+0x360>
 8001d90:	4659      	mov	r1, fp
 8001d92:	0f72      	lsrs	r2, r6, #29
 8001d94:	00c9      	lsls	r1, r1, #3
 8001d96:	430a      	orrs	r2, r1
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	0409      	lsls	r1, r1, #16
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	468b      	mov	fp, r1
 8001da0:	49bf      	ldr	r1, [pc, #764]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001da2:	00f2      	lsls	r2, r6, #3
 8001da4:	468c      	mov	ip, r1
 8001da6:	4651      	mov	r1, sl
 8001da8:	4463      	add	r3, ip
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	469a      	mov	sl, r3
 8001dae:	2300      	movs	r3, #0
 8001db0:	9e02      	ldr	r6, [sp, #8]
 8001db2:	406e      	eors	r6, r5
 8001db4:	2c0f      	cmp	r4, #15
 8001db6:	d827      	bhi.n	8001e08 <__aeabi_ddiv+0xe8>
 8001db8:	49ba      	ldr	r1, [pc, #744]	@ (80020a4 <__aeabi_ddiv+0x384>)
 8001dba:	00a4      	lsls	r4, r4, #2
 8001dbc:	5909      	ldr	r1, [r1, r4]
 8001dbe:	468f      	mov	pc, r1
 8001dc0:	46cb      	mov	fp, r9
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d016      	beq.n	8001dfa <__aeabi_ddiv+0xda>
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0xb2>
 8001dd0:	e2a6      	b.n	8002320 <__aeabi_ddiv+0x600>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0xb8>
 8001dd6:	e0df      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	4690      	mov	r8, r2
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	4323      	orrs	r3, r4
 8001de4:	07f6      	lsls	r6, r6, #31
 8001de6:	4333      	orrs	r3, r6
 8001de8:	4640      	mov	r0, r8
 8001dea:	0019      	movs	r1, r3
 8001dec:	b007      	add	sp, #28
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4690      	mov	r8, r2
 8001e00:	4ba6      	ldr	r3, [pc, #664]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001e02:	e7ed      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001e04:	002e      	movs	r6, r5
 8001e06:	e7df      	b.n	8001dc8 <__aeabi_ddiv+0xa8>
 8001e08:	45cb      	cmp	fp, r9
 8001e0a:	d200      	bcs.n	8001e0e <__aeabi_ddiv+0xee>
 8001e0c:	e1d4      	b.n	80021b8 <__aeabi_ddiv+0x498>
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0xf2>
 8001e10:	e1cf      	b.n	80021b2 <__aeabi_ddiv+0x492>
 8001e12:	2301      	movs	r3, #1
 8001e14:	425b      	negs	r3, r3
 8001e16:	469c      	mov	ip, r3
 8001e18:	4644      	mov	r4, r8
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	2700      	movs	r7, #0
 8001e1e:	44e2      	add	sl, ip
 8001e20:	465b      	mov	r3, fp
 8001e22:	0e15      	lsrs	r5, r2, #24
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	431d      	orrs	r5, r3
 8001e28:	0c19      	lsrs	r1, r3, #16
 8001e2a:	042b      	lsls	r3, r5, #16
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	9500      	str	r5, [sp, #0]
 8001e30:	0c1d      	lsrs	r5, r3, #16
 8001e32:	4691      	mov	r9, r2
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9503      	str	r5, [sp, #12]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	436a      	muls	r2, r5
 8001e40:	040b      	lsls	r3, r1, #16
 8001e42:	0c21      	lsrs	r1, r4, #16
 8001e44:	4680      	mov	r8, r0
 8001e46:	4319      	orrs	r1, r3
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d909      	bls.n	8001e60 <__aeabi_ddiv+0x140>
 8001e4c:	9d00      	ldr	r5, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	46ac      	mov	ip, r5
 8001e52:	425b      	negs	r3, r3
 8001e54:	4461      	add	r1, ip
 8001e56:	469c      	mov	ip, r3
 8001e58:	44e0      	add	r8, ip
 8001e5a:	428d      	cmp	r5, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x140>
 8001e5e:	e1fb      	b.n	8002258 <__aeabi_ddiv+0x538>
 8001e60:	1a88      	subs	r0, r1, r2
 8001e62:	9902      	ldr	r1, [sp, #8]
 8001e64:	f7fe f9f2 	bl	800024c <__aeabi_uidivmod>
 8001e68:	9a03      	ldr	r2, [sp, #12]
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	4342      	muls	r2, r0
 8001e6e:	0409      	lsls	r1, r1, #16
 8001e70:	0c24      	lsrs	r4, r4, #16
 8001e72:	0003      	movs	r3, r0
 8001e74:	430c      	orrs	r4, r1
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d906      	bls.n	8001e88 <__aeabi_ddiv+0x168>
 8001e7a:	9900      	ldr	r1, [sp, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4464      	add	r4, ip
 8001e82:	42a1      	cmp	r1, r4
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x168>
 8001e86:	e1e1      	b.n	800224c <__aeabi_ddiv+0x52c>
 8001e88:	1aa0      	subs	r0, r4, r2
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	0412      	lsls	r2, r2, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	4693      	mov	fp, r2
 8001e92:	464b      	mov	r3, r9
 8001e94:	4659      	mov	r1, fp
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	001d      	movs	r5, r3
 8001e9a:	9304      	str	r3, [sp, #16]
 8001e9c:	040b      	lsls	r3, r1, #16
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	0409      	lsls	r1, r1, #16
 8001ea2:	0c09      	lsrs	r1, r1, #16
 8001ea4:	000c      	movs	r4, r1
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	435c      	muls	r4, r3
 8001eaa:	0c12      	lsrs	r2, r2, #16
 8001eac:	436b      	muls	r3, r5
 8001eae:	4688      	mov	r8, r1
 8001eb0:	4351      	muls	r1, r2
 8001eb2:	436a      	muls	r2, r5
 8001eb4:	0c25      	lsrs	r5, r4, #16
 8001eb6:	46ac      	mov	ip, r5
 8001eb8:	185b      	adds	r3, r3, r1
 8001eba:	4463      	add	r3, ip
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d903      	bls.n	8001ec8 <__aeabi_ddiv+0x1a8>
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4462      	add	r2, ip
 8001ec8:	0c19      	lsrs	r1, r3, #16
 8001eca:	0424      	lsls	r4, r4, #16
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c24      	lsrs	r4, r4, #16
 8001ed0:	188a      	adds	r2, r1, r2
 8001ed2:	191c      	adds	r4, r3, r4
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	d302      	bcc.n	8001ede <__aeabi_ddiv+0x1be>
 8001ed8:	d116      	bne.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001eda:	42a7      	cmp	r7, r4
 8001edc:	d214      	bcs.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001ede:	465b      	mov	r3, fp
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	444f      	add	r7, r9
 8001ee6:	9305      	str	r3, [sp, #20]
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	419b      	sbcs	r3, r3
 8001eec:	46ac      	mov	ip, r5
 8001eee:	425b      	negs	r3, r3
 8001ef0:	4463      	add	r3, ip
 8001ef2:	18c0      	adds	r0, r0, r3
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d300      	bcc.n	8001efa <__aeabi_ddiv+0x1da>
 8001ef8:	e1a1      	b.n	800223e <__aeabi_ddiv+0x51e>
 8001efa:	4282      	cmp	r2, r0
 8001efc:	d900      	bls.n	8001f00 <__aeabi_ddiv+0x1e0>
 8001efe:	e1f6      	b.n	80022ee <__aeabi_ddiv+0x5ce>
 8001f00:	d100      	bne.n	8001f04 <__aeabi_ddiv+0x1e4>
 8001f02:	e1f1      	b.n	80022e8 <__aeabi_ddiv+0x5c8>
 8001f04:	9b05      	ldr	r3, [sp, #20]
 8001f06:	469b      	mov	fp, r3
 8001f08:	1b3c      	subs	r4, r7, r4
 8001f0a:	42a7      	cmp	r7, r4
 8001f0c:	41bf      	sbcs	r7, r7
 8001f0e:	9d00      	ldr	r5, [sp, #0]
 8001f10:	1a80      	subs	r0, r0, r2
 8001f12:	427f      	negs	r7, r7
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	4285      	cmp	r5, r0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_ddiv+0x1fc>
 8001f1a:	e1d0      	b.n	80022be <__aeabi_ddiv+0x59e>
 8001f1c:	9902      	ldr	r1, [sp, #8]
 8001f1e:	f7fe f995 	bl	800024c <__aeabi_uidivmod>
 8001f22:	9a03      	ldr	r2, [sp, #12]
 8001f24:	040b      	lsls	r3, r1, #16
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c21      	lsrs	r1, r4, #16
 8001f2a:	0007      	movs	r7, r0
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d900      	bls.n	8001f34 <__aeabi_ddiv+0x214>
 8001f32:	e178      	b.n	8002226 <__aeabi_ddiv+0x506>
 8001f34:	1a88      	subs	r0, r1, r2
 8001f36:	9902      	ldr	r1, [sp, #8]
 8001f38:	f7fe f988 	bl	800024c <__aeabi_uidivmod>
 8001f3c:	9a03      	ldr	r2, [sp, #12]
 8001f3e:	0424      	lsls	r4, r4, #16
 8001f40:	4342      	muls	r2, r0
 8001f42:	0409      	lsls	r1, r1, #16
 8001f44:	0c24      	lsrs	r4, r4, #16
 8001f46:	0003      	movs	r3, r0
 8001f48:	430c      	orrs	r4, r1
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x230>
 8001f4e:	e15d      	b.n	800220c <__aeabi_ddiv+0x4ec>
 8001f50:	4641      	mov	r1, r8
 8001f52:	1aa4      	subs	r4, r4, r2
 8001f54:	043a      	lsls	r2, r7, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	9d04      	ldr	r5, [sp, #16]
 8001f5a:	0413      	lsls	r3, r2, #16
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	4359      	muls	r1, r3
 8001f60:	4647      	mov	r7, r8
 8001f62:	436b      	muls	r3, r5
 8001f64:	469c      	mov	ip, r3
 8001f66:	0c10      	lsrs	r0, r2, #16
 8001f68:	4347      	muls	r7, r0
 8001f6a:	0c0b      	lsrs	r3, r1, #16
 8001f6c:	44bc      	add	ip, r7
 8001f6e:	4463      	add	r3, ip
 8001f70:	4368      	muls	r0, r5
 8001f72:	429f      	cmp	r7, r3
 8001f74:	d903      	bls.n	8001f7e <__aeabi_ddiv+0x25e>
 8001f76:	2580      	movs	r5, #128	@ 0x80
 8001f78:	026d      	lsls	r5, r5, #9
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	4460      	add	r0, ip
 8001f7e:	0c1f      	lsrs	r7, r3, #16
 8001f80:	0409      	lsls	r1, r1, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c09      	lsrs	r1, r1, #16
 8001f86:	183f      	adds	r7, r7, r0
 8001f88:	185b      	adds	r3, r3, r1
 8001f8a:	42bc      	cmp	r4, r7
 8001f8c:	d200      	bcs.n	8001f90 <__aeabi_ddiv+0x270>
 8001f8e:	e102      	b.n	8002196 <__aeabi_ddiv+0x476>
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x274>
 8001f92:	e0fd      	b.n	8002190 <__aeabi_ddiv+0x470>
 8001f94:	2301      	movs	r3, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <__aeabi_ddiv+0x388>)
 8001f9a:	4453      	add	r3, sl
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_ddiv+0x282>
 8001fa0:	e0ae      	b.n	8002100 <__aeabi_ddiv+0x3e0>
 8001fa2:	0751      	lsls	r1, r2, #29
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x288>
 8001fa6:	e198      	b.n	80022da <__aeabi_ddiv+0x5ba>
 8001fa8:	4659      	mov	r1, fp
 8001faa:	01c9      	lsls	r1, r1, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_ddiv+0x29c>
 8001fae:	4659      	mov	r1, fp
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <__aeabi_ddiv+0x38c>)
 8001fb2:	4019      	ands	r1, r3
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	468b      	mov	fp, r1
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4453      	add	r3, sl
 8001fbc:	493c      	ldr	r1, [pc, #240]	@ (80020b0 <__aeabi_ddiv+0x390>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_ddiv+0x2a4>
 8001fc2:	e71a      	b.n	8001dfa <__aeabi_ddiv+0xda>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	465a      	mov	r2, fp
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	0254      	lsls	r4, r2, #9
 8001fd2:	4688      	mov	r8, r1
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	e702      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001fda:	465a      	mov	r2, fp
 8001fdc:	9b00      	ldr	r3, [sp, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_ddiv+0x2c4>
 8001fe2:	e07e      	b.n	80020e2 <__aeabi_ddiv+0x3c2>
 8001fe4:	465b      	mov	r3, fp
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x2cc>
 8001fea:	e100      	b.n	80021ee <__aeabi_ddiv+0x4ce>
 8001fec:	4658      	mov	r0, fp
 8001fee:	f001 fabb 	bl	8003568 <__clzsi2>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	3a0b      	subs	r2, #11
 8001ff8:	271d      	movs	r7, #29
 8001ffa:	9e00      	ldr	r6, [sp, #0]
 8001ffc:	1aba      	subs	r2, r7, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	4658      	mov	r0, fp
 8002002:	40d6      	lsrs	r6, r2
 8002004:	3908      	subs	r1, #8
 8002006:	4088      	lsls	r0, r1
 8002008:	0032      	movs	r2, r6
 800200a:	4302      	orrs	r2, r0
 800200c:	4693      	mov	fp, r2
 800200e:	9a00      	ldr	r2, [sp, #0]
 8002010:	408a      	lsls	r2, r1
 8002012:	4928      	ldr	r1, [pc, #160]	@ (80020b4 <__aeabi_ddiv+0x394>)
 8002014:	4453      	add	r3, sl
 8002016:	468a      	mov	sl, r1
 8002018:	449a      	add	sl, r3
 800201a:	2300      	movs	r3, #0
 800201c:	e6c8      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800201e:	465b      	mov	r3, fp
 8002020:	4303      	orrs	r3, r0
 8002022:	4699      	mov	r9, r3
 8002024:	d056      	beq.n	80020d4 <__aeabi_ddiv+0x3b4>
 8002026:	465b      	mov	r3, fp
 8002028:	2b00      	cmp	r3, #0
 800202a:	d100      	bne.n	800202e <__aeabi_ddiv+0x30e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_ddiv+0x4aa>
 800202e:	4658      	mov	r0, fp
 8002030:	f001 fa9a 	bl	8003568 <__clzsi2>
 8002034:	230b      	movs	r3, #11
 8002036:	425b      	negs	r3, r3
 8002038:	469c      	mov	ip, r3
 800203a:	0002      	movs	r2, r0
 800203c:	4484      	add	ip, r0
 800203e:	4666      	mov	r6, ip
 8002040:	231d      	movs	r3, #29
 8002042:	1b9b      	subs	r3, r3, r6
 8002044:	0026      	movs	r6, r4
 8002046:	0011      	movs	r1, r2
 8002048:	4658      	mov	r0, fp
 800204a:	40de      	lsrs	r6, r3
 800204c:	3908      	subs	r1, #8
 800204e:	4088      	lsls	r0, r1
 8002050:	0033      	movs	r3, r6
 8002052:	4303      	orrs	r3, r0
 8002054:	4699      	mov	r9, r3
 8002056:	0023      	movs	r3, r4
 8002058:	408b      	lsls	r3, r1
 800205a:	4698      	mov	r8, r3
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <__aeabi_ddiv+0x398>)
 800205e:	2400      	movs	r4, #0
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	469a      	mov	sl, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	e682      	b.n	8001d70 <__aeabi_ddiv+0x50>
 800206a:	465a      	mov	r2, fp
 800206c:	4302      	orrs	r2, r0
 800206e:	4691      	mov	r9, r2
 8002070:	d12a      	bne.n	80020c8 <__aeabi_ddiv+0x3a8>
 8002072:	2200      	movs	r2, #0
 8002074:	469a      	mov	sl, r3
 8002076:	2302      	movs	r3, #2
 8002078:	4690      	mov	r8, r2
 800207a:	2408      	movs	r4, #8
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	e677      	b.n	8001d70 <__aeabi_ddiv+0x50>
 8002080:	465a      	mov	r2, fp
 8002082:	9b00      	ldr	r3, [sp, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <__aeabi_ddiv+0x39c>)
 8002088:	469c      	mov	ip, r3
 800208a:	44e2      	add	sl, ip
 800208c:	2a00      	cmp	r2, #0
 800208e:	d117      	bne.n	80020c0 <__aeabi_ddiv+0x3a0>
 8002090:	2302      	movs	r3, #2
 8002092:	431c      	orrs	r4, r3
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3302      	adds	r3, #2
 800209a:	e689      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	fffffc01 	.word	0xfffffc01
 80020a4:	080107ec 	.word	0x080107ec
 80020a8:	000003ff 	.word	0x000003ff
 80020ac:	feffffff 	.word	0xfeffffff
 80020b0:	000007fe 	.word	0x000007fe
 80020b4:	000003f3 	.word	0x000003f3
 80020b8:	fffffc0d 	.word	0xfffffc0d
 80020bc:	fffff801 	.word	0xfffff801
 80020c0:	2303      	movs	r3, #3
 80020c2:	0032      	movs	r2, r6
 80020c4:	431c      	orrs	r4, r3
 80020c6:	e673      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020c8:	469a      	mov	sl, r3
 80020ca:	2303      	movs	r3, #3
 80020cc:	46d9      	mov	r9, fp
 80020ce:	240c      	movs	r4, #12
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	e64d      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020d4:	2300      	movs	r3, #0
 80020d6:	4698      	mov	r8, r3
 80020d8:	469a      	mov	sl, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	2404      	movs	r4, #4
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	e646      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020e2:	2301      	movs	r3, #1
 80020e4:	431c      	orrs	r4, r3
 80020e6:	2300      	movs	r3, #0
 80020e8:	469b      	mov	fp, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	e660      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	4698      	mov	r8, r3
 80020f4:	2600      	movs	r6, #0
 80020f6:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <__aeabi_ddiv+0x620>)
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	e671      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4252      	negs	r2, r2
 8002100:	2101      	movs	r1, #1
 8002102:	1ac9      	subs	r1, r1, r3
 8002104:	2938      	cmp	r1, #56	@ 0x38
 8002106:	dd00      	ble.n	800210a <__aeabi_ddiv+0x3ea>
 8002108:	e666      	b.n	8001dd8 <__aeabi_ddiv+0xb8>
 800210a:	291f      	cmp	r1, #31
 800210c:	dc00      	bgt.n	8002110 <__aeabi_ddiv+0x3f0>
 800210e:	e0ab      	b.n	8002268 <__aeabi_ddiv+0x548>
 8002110:	201f      	movs	r0, #31
 8002112:	4240      	negs	r0, r0
 8002114:	1ac3      	subs	r3, r0, r3
 8002116:	4658      	mov	r0, fp
 8002118:	40d8      	lsrs	r0, r3
 800211a:	0003      	movs	r3, r0
 800211c:	2920      	cmp	r1, #32
 800211e:	d004      	beq.n	800212a <__aeabi_ddiv+0x40a>
 8002120:	4658      	mov	r0, fp
 8002122:	4988      	ldr	r1, [pc, #544]	@ (8002344 <__aeabi_ddiv+0x624>)
 8002124:	4451      	add	r1, sl
 8002126:	4088      	lsls	r0, r1
 8002128:	4302      	orrs	r2, r0
 800212a:	1e51      	subs	r1, r2, #1
 800212c:	418a      	sbcs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	2307      	movs	r3, #7
 8002132:	0019      	movs	r1, r3
 8002134:	2400      	movs	r4, #0
 8002136:	4011      	ands	r1, r2
 8002138:	4213      	tst	r3, r2
 800213a:	d00c      	beq.n	8002156 <__aeabi_ddiv+0x436>
 800213c:	230f      	movs	r3, #15
 800213e:	4013      	ands	r3, r2
 8002140:	2b04      	cmp	r3, #4
 8002142:	d100      	bne.n	8002146 <__aeabi_ddiv+0x426>
 8002144:	e0f9      	b.n	800233a <__aeabi_ddiv+0x61a>
 8002146:	1d11      	adds	r1, r2, #4
 8002148:	4291      	cmp	r1, r2
 800214a:	419b      	sbcs	r3, r3
 800214c:	000a      	movs	r2, r1
 800214e:	425b      	negs	r3, r3
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	0b1c      	lsrs	r4, r3, #12
 8002156:	08d2      	lsrs	r2, r2, #3
 8002158:	430a      	orrs	r2, r1
 800215a:	4690      	mov	r8, r2
 800215c:	2300      	movs	r3, #0
 800215e:	e63f      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002160:	2480      	movs	r4, #128	@ 0x80
 8002162:	464b      	mov	r3, r9
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	4223      	tst	r3, r4
 8002168:	d009      	beq.n	800217e <__aeabi_ddiv+0x45e>
 800216a:	465b      	mov	r3, fp
 800216c:	4223      	tst	r3, r4
 800216e:	d106      	bne.n	800217e <__aeabi_ddiv+0x45e>
 8002170:	431c      	orrs	r4, r3
 8002172:	0324      	lsls	r4, r4, #12
 8002174:	002e      	movs	r6, r5
 8002176:	4690      	mov	r8, r2
 8002178:	4b71      	ldr	r3, [pc, #452]	@ (8002340 <__aeabi_ddiv+0x620>)
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	e630      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 800217e:	2480      	movs	r4, #128	@ 0x80
 8002180:	464b      	mov	r3, r9
 8002182:	0324      	lsls	r4, r4, #12
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	9e02      	ldr	r6, [sp, #8]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <__aeabi_ddiv+0x620>)
 800218c:	0b24      	lsrs	r4, r4, #12
 800218e:	e627      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <__aeabi_ddiv+0x476>
 8002194:	e700      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8002196:	9800      	ldr	r0, [sp, #0]
 8002198:	1e51      	subs	r1, r2, #1
 800219a:	4684      	mov	ip, r0
 800219c:	4464      	add	r4, ip
 800219e:	4284      	cmp	r4, r0
 80021a0:	d200      	bcs.n	80021a4 <__aeabi_ddiv+0x484>
 80021a2:	e084      	b.n	80022ae <__aeabi_ddiv+0x58e>
 80021a4:	42bc      	cmp	r4, r7
 80021a6:	d200      	bcs.n	80021aa <__aeabi_ddiv+0x48a>
 80021a8:	e0ae      	b.n	8002308 <__aeabi_ddiv+0x5e8>
 80021aa:	d100      	bne.n	80021ae <__aeabi_ddiv+0x48e>
 80021ac:	e0c1      	b.n	8002332 <__aeabi_ddiv+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	e6f0      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80021b2:	4542      	cmp	r2, r8
 80021b4:	d900      	bls.n	80021b8 <__aeabi_ddiv+0x498>
 80021b6:	e62c      	b.n	8001e12 <__aeabi_ddiv+0xf2>
 80021b8:	464b      	mov	r3, r9
 80021ba:	07dc      	lsls	r4, r3, #31
 80021bc:	0858      	lsrs	r0, r3, #1
 80021be:	4643      	mov	r3, r8
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	431c      	orrs	r4, r3
 80021c4:	4643      	mov	r3, r8
 80021c6:	07df      	lsls	r7, r3, #31
 80021c8:	e62a      	b.n	8001e20 <__aeabi_ddiv+0x100>
 80021ca:	f001 f9cd 	bl	8003568 <__clzsi2>
 80021ce:	2315      	movs	r3, #21
 80021d0:	469c      	mov	ip, r3
 80021d2:	4484      	add	ip, r0
 80021d4:	0002      	movs	r2, r0
 80021d6:	4663      	mov	r3, ip
 80021d8:	3220      	adds	r2, #32
 80021da:	2b1c      	cmp	r3, #28
 80021dc:	dc00      	bgt.n	80021e0 <__aeabi_ddiv+0x4c0>
 80021de:	e72e      	b.n	800203e <__aeabi_ddiv+0x31e>
 80021e0:	0023      	movs	r3, r4
 80021e2:	3808      	subs	r0, #8
 80021e4:	4083      	lsls	r3, r0
 80021e6:	4699      	mov	r9, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	4698      	mov	r8, r3
 80021ec:	e736      	b.n	800205c <__aeabi_ddiv+0x33c>
 80021ee:	f001 f9bb 	bl	8003568 <__clzsi2>
 80021f2:	0002      	movs	r2, r0
 80021f4:	0003      	movs	r3, r0
 80021f6:	3215      	adds	r2, #21
 80021f8:	3320      	adds	r3, #32
 80021fa:	2a1c      	cmp	r2, #28
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_ddiv+0x4e0>
 80021fe:	e6fb      	b.n	8001ff8 <__aeabi_ddiv+0x2d8>
 8002200:	9900      	ldr	r1, [sp, #0]
 8002202:	3808      	subs	r0, #8
 8002204:	4081      	lsls	r1, r0
 8002206:	2200      	movs	r2, #0
 8002208:	468b      	mov	fp, r1
 800220a:	e702      	b.n	8002012 <__aeabi_ddiv+0x2f2>
 800220c:	9900      	ldr	r1, [sp, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	468c      	mov	ip, r1
 8002212:	4464      	add	r4, ip
 8002214:	42a1      	cmp	r1, r4
 8002216:	d900      	bls.n	800221a <__aeabi_ddiv+0x4fa>
 8002218:	e69a      	b.n	8001f50 <__aeabi_ddiv+0x230>
 800221a:	42a2      	cmp	r2, r4
 800221c:	d800      	bhi.n	8002220 <__aeabi_ddiv+0x500>
 800221e:	e697      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002220:	1e83      	subs	r3, r0, #2
 8002222:	4464      	add	r4, ip
 8002224:	e694      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002226:	46ac      	mov	ip, r5
 8002228:	4461      	add	r1, ip
 800222a:	3f01      	subs	r7, #1
 800222c:	428d      	cmp	r5, r1
 800222e:	d900      	bls.n	8002232 <__aeabi_ddiv+0x512>
 8002230:	e680      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002232:	428a      	cmp	r2, r1
 8002234:	d800      	bhi.n	8002238 <__aeabi_ddiv+0x518>
 8002236:	e67d      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002238:	1e87      	subs	r7, r0, #2
 800223a:	4461      	add	r1, ip
 800223c:	e67a      	b.n	8001f34 <__aeabi_ddiv+0x214>
 800223e:	4285      	cmp	r5, r0
 8002240:	d000      	beq.n	8002244 <__aeabi_ddiv+0x524>
 8002242:	e65f      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 8002244:	45b9      	cmp	r9, r7
 8002246:	d900      	bls.n	800224a <__aeabi_ddiv+0x52a>
 8002248:	e65c      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 800224a:	e656      	b.n	8001efa <__aeabi_ddiv+0x1da>
 800224c:	42a2      	cmp	r2, r4
 800224e:	d800      	bhi.n	8002252 <__aeabi_ddiv+0x532>
 8002250:	e61a      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002252:	1e83      	subs	r3, r0, #2
 8002254:	4464      	add	r4, ip
 8002256:	e617      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002258:	428a      	cmp	r2, r1
 800225a:	d800      	bhi.n	800225e <__aeabi_ddiv+0x53e>
 800225c:	e600      	b.n	8001e60 <__aeabi_ddiv+0x140>
 800225e:	46ac      	mov	ip, r5
 8002260:	1e83      	subs	r3, r0, #2
 8002262:	4698      	mov	r8, r3
 8002264:	4461      	add	r1, ip
 8002266:	e5fb      	b.n	8001e60 <__aeabi_ddiv+0x140>
 8002268:	4837      	ldr	r0, [pc, #220]	@ (8002348 <__aeabi_ddiv+0x628>)
 800226a:	0014      	movs	r4, r2
 800226c:	4450      	add	r0, sl
 800226e:	4082      	lsls	r2, r0
 8002270:	465b      	mov	r3, fp
 8002272:	0017      	movs	r7, r2
 8002274:	4083      	lsls	r3, r0
 8002276:	40cc      	lsrs	r4, r1
 8002278:	1e7a      	subs	r2, r7, #1
 800227a:	4197      	sbcs	r7, r2
 800227c:	4323      	orrs	r3, r4
 800227e:	433b      	orrs	r3, r7
 8002280:	001a      	movs	r2, r3
 8002282:	465b      	mov	r3, fp
 8002284:	40cb      	lsrs	r3, r1
 8002286:	0751      	lsls	r1, r2, #29
 8002288:	d009      	beq.n	800229e <__aeabi_ddiv+0x57e>
 800228a:	210f      	movs	r1, #15
 800228c:	4011      	ands	r1, r2
 800228e:	2904      	cmp	r1, #4
 8002290:	d005      	beq.n	800229e <__aeabi_ddiv+0x57e>
 8002292:	1d11      	adds	r1, r2, #4
 8002294:	4291      	cmp	r1, r2
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	189b      	adds	r3, r3, r2
 800229c:	000a      	movs	r2, r1
 800229e:	0219      	lsls	r1, r3, #8
 80022a0:	d400      	bmi.n	80022a4 <__aeabi_ddiv+0x584>
 80022a2:	e755      	b.n	8002150 <__aeabi_ddiv+0x430>
 80022a4:	2200      	movs	r2, #0
 80022a6:	2301      	movs	r3, #1
 80022a8:	2400      	movs	r4, #0
 80022aa:	4690      	mov	r8, r2
 80022ac:	e598      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80022ae:	000a      	movs	r2, r1
 80022b0:	42bc      	cmp	r4, r7
 80022b2:	d000      	beq.n	80022b6 <__aeabi_ddiv+0x596>
 80022b4:	e66e      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022b6:	454b      	cmp	r3, r9
 80022b8:	d000      	beq.n	80022bc <__aeabi_ddiv+0x59c>
 80022ba:	e66b      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022bc:	e66c      	b.n	8001f98 <__aeabi_ddiv+0x278>
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <__aeabi_ddiv+0x62c>)
 80022c0:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <__aeabi_ddiv+0x630>)
 80022c2:	4453      	add	r3, sl
 80022c4:	4592      	cmp	sl, r2
 80022c6:	da00      	bge.n	80022ca <__aeabi_ddiv+0x5aa>
 80022c8:	e718      	b.n	80020fc <__aeabi_ddiv+0x3dc>
 80022ca:	2101      	movs	r1, #1
 80022cc:	4249      	negs	r1, r1
 80022ce:	1d0a      	adds	r2, r1, #4
 80022d0:	428a      	cmp	r2, r1
 80022d2:	4189      	sbcs	r1, r1
 80022d4:	4249      	negs	r1, r1
 80022d6:	448b      	add	fp, r1
 80022d8:	e666      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022da:	210f      	movs	r1, #15
 80022dc:	4011      	ands	r1, r2
 80022de:	2904      	cmp	r1, #4
 80022e0:	d100      	bne.n	80022e4 <__aeabi_ddiv+0x5c4>
 80022e2:	e661      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022e4:	0011      	movs	r1, r2
 80022e6:	e7f2      	b.n	80022ce <__aeabi_ddiv+0x5ae>
 80022e8:	42bc      	cmp	r4, r7
 80022ea:	d800      	bhi.n	80022ee <__aeabi_ddiv+0x5ce>
 80022ec:	e60a      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 80022ee:	2302      	movs	r3, #2
 80022f0:	425b      	negs	r3, r3
 80022f2:	469c      	mov	ip, r3
 80022f4:	9900      	ldr	r1, [sp, #0]
 80022f6:	444f      	add	r7, r9
 80022f8:	454f      	cmp	r7, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	44e3      	add	fp, ip
 80022fe:	468c      	mov	ip, r1
 8002300:	425b      	negs	r3, r3
 8002302:	4463      	add	r3, ip
 8002304:	18c0      	adds	r0, r0, r3
 8002306:	e5ff      	b.n	8001f08 <__aeabi_ddiv+0x1e8>
 8002308:	4649      	mov	r1, r9
 800230a:	9d00      	ldr	r5, [sp, #0]
 800230c:	0048      	lsls	r0, r1, #1
 800230e:	4548      	cmp	r0, r9
 8002310:	4189      	sbcs	r1, r1
 8002312:	46ac      	mov	ip, r5
 8002314:	4249      	negs	r1, r1
 8002316:	4461      	add	r1, ip
 8002318:	4681      	mov	r9, r0
 800231a:	3a02      	subs	r2, #2
 800231c:	1864      	adds	r4, r4, r1
 800231e:	e7c7      	b.n	80022b0 <__aeabi_ddiv+0x590>
 8002320:	2480      	movs	r4, #128	@ 0x80
 8002322:	465b      	mov	r3, fp
 8002324:	0324      	lsls	r4, r4, #12
 8002326:	431c      	orrs	r4, r3
 8002328:	0324      	lsls	r4, r4, #12
 800232a:	4690      	mov	r8, r2
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__aeabi_ddiv+0x620>)
 800232e:	0b24      	lsrs	r4, r4, #12
 8002330:	e556      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002332:	4599      	cmp	r9, r3
 8002334:	d3e8      	bcc.n	8002308 <__aeabi_ddiv+0x5e8>
 8002336:	000a      	movs	r2, r1
 8002338:	e7bd      	b.n	80022b6 <__aeabi_ddiv+0x596>
 800233a:	2300      	movs	r3, #0
 800233c:	e708      	b.n	8002150 <__aeabi_ddiv+0x430>
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff
 8002344:	0000043e 	.word	0x0000043e
 8002348:	0000041e 	.word	0x0000041e
 800234c:	000003ff 	.word	0x000003ff
 8002350:	fffffc02 	.word	0xfffffc02

08002354 <__eqdf2>:
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	4657      	mov	r7, sl
 8002358:	46de      	mov	lr, fp
 800235a:	464e      	mov	r6, r9
 800235c:	4645      	mov	r5, r8
 800235e:	b5e0      	push	{r5, r6, r7, lr}
 8002360:	000d      	movs	r5, r1
 8002362:	0004      	movs	r4, r0
 8002364:	0fe8      	lsrs	r0, r5, #31
 8002366:	4683      	mov	fp, r0
 8002368:	0309      	lsls	r1, r1, #12
 800236a:	0fd8      	lsrs	r0, r3, #31
 800236c:	0b09      	lsrs	r1, r1, #12
 800236e:	4682      	mov	sl, r0
 8002370:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <__eqdf2+0x84>)
 8002372:	468c      	mov	ip, r1
 8002374:	031f      	lsls	r7, r3, #12
 8002376:	0069      	lsls	r1, r5, #1
 8002378:	005e      	lsls	r6, r3, #1
 800237a:	0d49      	lsrs	r1, r1, #21
 800237c:	0b3f      	lsrs	r7, r7, #12
 800237e:	0d76      	lsrs	r6, r6, #21
 8002380:	4281      	cmp	r1, r0
 8002382:	d018      	beq.n	80023b6 <__eqdf2+0x62>
 8002384:	4286      	cmp	r6, r0
 8002386:	d00f      	beq.n	80023a8 <__eqdf2+0x54>
 8002388:	2001      	movs	r0, #1
 800238a:	42b1      	cmp	r1, r6
 800238c:	d10d      	bne.n	80023aa <__eqdf2+0x56>
 800238e:	45bc      	cmp	ip, r7
 8002390:	d10b      	bne.n	80023aa <__eqdf2+0x56>
 8002392:	4294      	cmp	r4, r2
 8002394:	d109      	bne.n	80023aa <__eqdf2+0x56>
 8002396:	45d3      	cmp	fp, sl
 8002398:	d01c      	beq.n	80023d4 <__eqdf2+0x80>
 800239a:	2900      	cmp	r1, #0
 800239c:	d105      	bne.n	80023aa <__eqdf2+0x56>
 800239e:	4660      	mov	r0, ip
 80023a0:	4320      	orrs	r0, r4
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e000      	b.n	80023aa <__eqdf2+0x56>
 80023a8:	2001      	movs	r0, #1
 80023aa:	bcf0      	pop	{r4, r5, r6, r7}
 80023ac:	46bb      	mov	fp, r7
 80023ae:	46b2      	mov	sl, r6
 80023b0:	46a9      	mov	r9, r5
 80023b2:	46a0      	mov	r8, r4
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b6:	2001      	movs	r0, #1
 80023b8:	428e      	cmp	r6, r1
 80023ba:	d1f6      	bne.n	80023aa <__eqdf2+0x56>
 80023bc:	4661      	mov	r1, ip
 80023be:	4339      	orrs	r1, r7
 80023c0:	000f      	movs	r7, r1
 80023c2:	4317      	orrs	r7, r2
 80023c4:	4327      	orrs	r7, r4
 80023c6:	d1f0      	bne.n	80023aa <__eqdf2+0x56>
 80023c8:	465b      	mov	r3, fp
 80023ca:	4652      	mov	r2, sl
 80023cc:	1a98      	subs	r0, r3, r2
 80023ce:	1e43      	subs	r3, r0, #1
 80023d0:	4198      	sbcs	r0, r3
 80023d2:	e7ea      	b.n	80023aa <__eqdf2+0x56>
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7e8      	b.n	80023aa <__eqdf2+0x56>
 80023d8:	000007ff 	.word	0x000007ff

080023dc <__gedf2>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	4657      	mov	r7, sl
 80023e0:	464e      	mov	r6, r9
 80023e2:	4645      	mov	r5, r8
 80023e4:	46de      	mov	lr, fp
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	000d      	movs	r5, r1
 80023ea:	030f      	lsls	r7, r1, #12
 80023ec:	0b39      	lsrs	r1, r7, #12
 80023ee:	b083      	sub	sp, #12
 80023f0:	0004      	movs	r4, r0
 80023f2:	4680      	mov	r8, r0
 80023f4:	9101      	str	r1, [sp, #4]
 80023f6:	0058      	lsls	r0, r3, #1
 80023f8:	0fe9      	lsrs	r1, r5, #31
 80023fa:	4f31      	ldr	r7, [pc, #196]	@ (80024c0 <__gedf2+0xe4>)
 80023fc:	0d40      	lsrs	r0, r0, #21
 80023fe:	468c      	mov	ip, r1
 8002400:	006e      	lsls	r6, r5, #1
 8002402:	0319      	lsls	r1, r3, #12
 8002404:	4682      	mov	sl, r0
 8002406:	4691      	mov	r9, r2
 8002408:	0d76      	lsrs	r6, r6, #21
 800240a:	0b09      	lsrs	r1, r1, #12
 800240c:	0fd8      	lsrs	r0, r3, #31
 800240e:	42be      	cmp	r6, r7
 8002410:	d01f      	beq.n	8002452 <__gedf2+0x76>
 8002412:	45ba      	cmp	sl, r7
 8002414:	d00f      	beq.n	8002436 <__gedf2+0x5a>
 8002416:	2e00      	cmp	r6, #0
 8002418:	d12f      	bne.n	800247a <__gedf2+0x9e>
 800241a:	4655      	mov	r5, sl
 800241c:	9e01      	ldr	r6, [sp, #4]
 800241e:	4334      	orrs	r4, r6
 8002420:	2d00      	cmp	r5, #0
 8002422:	d127      	bne.n	8002474 <__gedf2+0x98>
 8002424:	430a      	orrs	r2, r1
 8002426:	d03a      	beq.n	800249e <__gedf2+0xc2>
 8002428:	2c00      	cmp	r4, #0
 800242a:	d145      	bne.n	80024b8 <__gedf2+0xdc>
 800242c:	2800      	cmp	r0, #0
 800242e:	d11a      	bne.n	8002466 <__gedf2+0x8a>
 8002430:	2001      	movs	r0, #1
 8002432:	4240      	negs	r0, r0
 8002434:	e017      	b.n	8002466 <__gedf2+0x8a>
 8002436:	4311      	orrs	r1, r2
 8002438:	d13b      	bne.n	80024b2 <__gedf2+0xd6>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d102      	bne.n	8002444 <__gedf2+0x68>
 800243e:	9f01      	ldr	r7, [sp, #4]
 8002440:	4327      	orrs	r7, r4
 8002442:	d0f3      	beq.n	800242c <__gedf2+0x50>
 8002444:	4584      	cmp	ip, r0
 8002446:	d109      	bne.n	800245c <__gedf2+0x80>
 8002448:	4663      	mov	r3, ip
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <__gedf2+0x54>
 800244e:	4660      	mov	r0, ip
 8002450:	e009      	b.n	8002466 <__gedf2+0x8a>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d12c      	bne.n	80024b2 <__gedf2+0xd6>
 8002458:	45b2      	cmp	sl, r6
 800245a:	d024      	beq.n	80024a6 <__gedf2+0xca>
 800245c:	4663      	mov	r3, ip
 800245e:	2002      	movs	r0, #2
 8002460:	3b01      	subs	r3, #1
 8002462:	4018      	ands	r0, r3
 8002464:	3801      	subs	r0, #1
 8002466:	b003      	add	sp, #12
 8002468:	bcf0      	pop	{r4, r5, r6, r7}
 800246a:	46bb      	mov	fp, r7
 800246c:	46b2      	mov	sl, r6
 800246e:	46a9      	mov	r9, r5
 8002470:	46a0      	mov	r8, r4
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0d9      	beq.n	800242c <__gedf2+0x50>
 8002478:	e7e4      	b.n	8002444 <__gedf2+0x68>
 800247a:	4654      	mov	r4, sl
 800247c:	2c00      	cmp	r4, #0
 800247e:	d0ed      	beq.n	800245c <__gedf2+0x80>
 8002480:	4584      	cmp	ip, r0
 8002482:	d1eb      	bne.n	800245c <__gedf2+0x80>
 8002484:	4556      	cmp	r6, sl
 8002486:	dce9      	bgt.n	800245c <__gedf2+0x80>
 8002488:	dbde      	blt.n	8002448 <__gedf2+0x6c>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	428b      	cmp	r3, r1
 800248e:	d8e5      	bhi.n	800245c <__gedf2+0x80>
 8002490:	d1da      	bne.n	8002448 <__gedf2+0x6c>
 8002492:	45c8      	cmp	r8, r9
 8002494:	d8e2      	bhi.n	800245c <__gedf2+0x80>
 8002496:	2000      	movs	r0, #0
 8002498:	45c8      	cmp	r8, r9
 800249a:	d2e4      	bcs.n	8002466 <__gedf2+0x8a>
 800249c:	e7d4      	b.n	8002448 <__gedf2+0x6c>
 800249e:	2000      	movs	r0, #0
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0e0      	beq.n	8002466 <__gedf2+0x8a>
 80024a4:	e7da      	b.n	800245c <__gedf2+0x80>
 80024a6:	4311      	orrs	r1, r2
 80024a8:	d103      	bne.n	80024b2 <__gedf2+0xd6>
 80024aa:	4584      	cmp	ip, r0
 80024ac:	d1d6      	bne.n	800245c <__gedf2+0x80>
 80024ae:	2000      	movs	r0, #0
 80024b0:	e7d9      	b.n	8002466 <__gedf2+0x8a>
 80024b2:	2002      	movs	r0, #2
 80024b4:	4240      	negs	r0, r0
 80024b6:	e7d6      	b.n	8002466 <__gedf2+0x8a>
 80024b8:	4584      	cmp	ip, r0
 80024ba:	d0e6      	beq.n	800248a <__gedf2+0xae>
 80024bc:	e7ce      	b.n	800245c <__gedf2+0x80>
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff

080024c4 <__ledf2>:
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	4657      	mov	r7, sl
 80024c8:	464e      	mov	r6, r9
 80024ca:	4645      	mov	r5, r8
 80024cc:	46de      	mov	lr, fp
 80024ce:	b5e0      	push	{r5, r6, r7, lr}
 80024d0:	000d      	movs	r5, r1
 80024d2:	030f      	lsls	r7, r1, #12
 80024d4:	0004      	movs	r4, r0
 80024d6:	4680      	mov	r8, r0
 80024d8:	0fe8      	lsrs	r0, r5, #31
 80024da:	0b39      	lsrs	r1, r7, #12
 80024dc:	4684      	mov	ip, r0
 80024de:	b083      	sub	sp, #12
 80024e0:	0058      	lsls	r0, r3, #1
 80024e2:	4f30      	ldr	r7, [pc, #192]	@ (80025a4 <__ledf2+0xe0>)
 80024e4:	0d40      	lsrs	r0, r0, #21
 80024e6:	9101      	str	r1, [sp, #4]
 80024e8:	031e      	lsls	r6, r3, #12
 80024ea:	0069      	lsls	r1, r5, #1
 80024ec:	4682      	mov	sl, r0
 80024ee:	4691      	mov	r9, r2
 80024f0:	0d49      	lsrs	r1, r1, #21
 80024f2:	0b36      	lsrs	r6, r6, #12
 80024f4:	0fd8      	lsrs	r0, r3, #31
 80024f6:	42b9      	cmp	r1, r7
 80024f8:	d020      	beq.n	800253c <__ledf2+0x78>
 80024fa:	45ba      	cmp	sl, r7
 80024fc:	d00f      	beq.n	800251e <__ledf2+0x5a>
 80024fe:	2900      	cmp	r1, #0
 8002500:	d12b      	bne.n	800255a <__ledf2+0x96>
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	430c      	orrs	r4, r1
 8002506:	4651      	mov	r1, sl
 8002508:	2900      	cmp	r1, #0
 800250a:	d137      	bne.n	800257c <__ledf2+0xb8>
 800250c:	4332      	orrs	r2, r6
 800250e:	d038      	beq.n	8002582 <__ledf2+0xbe>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d144      	bne.n	800259e <__ledf2+0xda>
 8002514:	2800      	cmp	r0, #0
 8002516:	d119      	bne.n	800254c <__ledf2+0x88>
 8002518:	2001      	movs	r0, #1
 800251a:	4240      	negs	r0, r0
 800251c:	e016      	b.n	800254c <__ledf2+0x88>
 800251e:	4316      	orrs	r6, r2
 8002520:	d113      	bne.n	800254a <__ledf2+0x86>
 8002522:	2900      	cmp	r1, #0
 8002524:	d102      	bne.n	800252c <__ledf2+0x68>
 8002526:	9f01      	ldr	r7, [sp, #4]
 8002528:	4327      	orrs	r7, r4
 800252a:	d0f3      	beq.n	8002514 <__ledf2+0x50>
 800252c:	4584      	cmp	ip, r0
 800252e:	d020      	beq.n	8002572 <__ledf2+0xae>
 8002530:	4663      	mov	r3, ip
 8002532:	2002      	movs	r0, #2
 8002534:	3b01      	subs	r3, #1
 8002536:	4018      	ands	r0, r3
 8002538:	3801      	subs	r0, #1
 800253a:	e007      	b.n	800254c <__ledf2+0x88>
 800253c:	9f01      	ldr	r7, [sp, #4]
 800253e:	4327      	orrs	r7, r4
 8002540:	d103      	bne.n	800254a <__ledf2+0x86>
 8002542:	458a      	cmp	sl, r1
 8002544:	d1f4      	bne.n	8002530 <__ledf2+0x6c>
 8002546:	4316      	orrs	r6, r2
 8002548:	d01f      	beq.n	800258a <__ledf2+0xc6>
 800254a:	2002      	movs	r0, #2
 800254c:	b003      	add	sp, #12
 800254e:	bcf0      	pop	{r4, r5, r6, r7}
 8002550:	46bb      	mov	fp, r7
 8002552:	46b2      	mov	sl, r6
 8002554:	46a9      	mov	r9, r5
 8002556:	46a0      	mov	r8, r4
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	4654      	mov	r4, sl
 800255c:	2c00      	cmp	r4, #0
 800255e:	d0e7      	beq.n	8002530 <__ledf2+0x6c>
 8002560:	4584      	cmp	ip, r0
 8002562:	d1e5      	bne.n	8002530 <__ledf2+0x6c>
 8002564:	4551      	cmp	r1, sl
 8002566:	dce3      	bgt.n	8002530 <__ledf2+0x6c>
 8002568:	db03      	blt.n	8002572 <__ledf2+0xae>
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	42b3      	cmp	r3, r6
 800256e:	d8df      	bhi.n	8002530 <__ledf2+0x6c>
 8002570:	d00f      	beq.n	8002592 <__ledf2+0xce>
 8002572:	4663      	mov	r3, ip
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0cf      	beq.n	8002518 <__ledf2+0x54>
 8002578:	4660      	mov	r0, ip
 800257a:	e7e7      	b.n	800254c <__ledf2+0x88>
 800257c:	2c00      	cmp	r4, #0
 800257e:	d0c9      	beq.n	8002514 <__ledf2+0x50>
 8002580:	e7d4      	b.n	800252c <__ledf2+0x68>
 8002582:	2000      	movs	r0, #0
 8002584:	2c00      	cmp	r4, #0
 8002586:	d0e1      	beq.n	800254c <__ledf2+0x88>
 8002588:	e7d2      	b.n	8002530 <__ledf2+0x6c>
 800258a:	4584      	cmp	ip, r0
 800258c:	d1d0      	bne.n	8002530 <__ledf2+0x6c>
 800258e:	2000      	movs	r0, #0
 8002590:	e7dc      	b.n	800254c <__ledf2+0x88>
 8002592:	45c8      	cmp	r8, r9
 8002594:	d8cc      	bhi.n	8002530 <__ledf2+0x6c>
 8002596:	2000      	movs	r0, #0
 8002598:	45c8      	cmp	r8, r9
 800259a:	d2d7      	bcs.n	800254c <__ledf2+0x88>
 800259c:	e7e9      	b.n	8002572 <__ledf2+0xae>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d0e3      	beq.n	800256a <__ledf2+0xa6>
 80025a2:	e7c5      	b.n	8002530 <__ledf2+0x6c>
 80025a4:	000007ff 	.word	0x000007ff

080025a8 <__aeabi_dmul>:
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	4657      	mov	r7, sl
 80025ac:	46de      	mov	lr, fp
 80025ae:	464e      	mov	r6, r9
 80025b0:	4645      	mov	r5, r8
 80025b2:	b5e0      	push	{r5, r6, r7, lr}
 80025b4:	001f      	movs	r7, r3
 80025b6:	030b      	lsls	r3, r1, #12
 80025b8:	0b1b      	lsrs	r3, r3, #12
 80025ba:	0016      	movs	r6, r2
 80025bc:	469a      	mov	sl, r3
 80025be:	0fca      	lsrs	r2, r1, #31
 80025c0:	004b      	lsls	r3, r1, #1
 80025c2:	0004      	movs	r4, r0
 80025c4:	4693      	mov	fp, r2
 80025c6:	b087      	sub	sp, #28
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	d100      	bne.n	80025ce <__aeabi_dmul+0x26>
 80025cc:	e0d5      	b.n	800277a <__aeabi_dmul+0x1d2>
 80025ce:	4abb      	ldr	r2, [pc, #748]	@ (80028bc <__aeabi_dmul+0x314>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dmul+0x2e>
 80025d4:	e0f8      	b.n	80027c8 <__aeabi_dmul+0x220>
 80025d6:	4651      	mov	r1, sl
 80025d8:	0f42      	lsrs	r2, r0, #29
 80025da:	00c9      	lsls	r1, r1, #3
 80025dc:	430a      	orrs	r2, r1
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	0409      	lsls	r1, r1, #16
 80025e2:	4311      	orrs	r1, r2
 80025e4:	00c2      	lsls	r2, r0, #3
 80025e6:	4691      	mov	r9, r2
 80025e8:	4ab5      	ldr	r2, [pc, #724]	@ (80028c0 <__aeabi_dmul+0x318>)
 80025ea:	468a      	mov	sl, r1
 80025ec:	189d      	adds	r5, r3, r2
 80025ee:	2300      	movs	r3, #0
 80025f0:	4698      	mov	r8, r3
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	033c      	lsls	r4, r7, #12
 80025f6:	007b      	lsls	r3, r7, #1
 80025f8:	0ffa      	lsrs	r2, r7, #31
 80025fa:	0030      	movs	r0, r6
 80025fc:	0b24      	lsrs	r4, r4, #12
 80025fe:	0d5b      	lsrs	r3, r3, #21
 8002600:	9200      	str	r2, [sp, #0]
 8002602:	d100      	bne.n	8002606 <__aeabi_dmul+0x5e>
 8002604:	e096      	b.n	8002734 <__aeabi_dmul+0x18c>
 8002606:	4aad      	ldr	r2, [pc, #692]	@ (80028bc <__aeabi_dmul+0x314>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d031      	beq.n	8002670 <__aeabi_dmul+0xc8>
 800260c:	0f72      	lsrs	r2, r6, #29
 800260e:	00e4      	lsls	r4, r4, #3
 8002610:	4322      	orrs	r2, r4
 8002612:	2480      	movs	r4, #128	@ 0x80
 8002614:	0424      	lsls	r4, r4, #16
 8002616:	4314      	orrs	r4, r2
 8002618:	4aa9      	ldr	r2, [pc, #676]	@ (80028c0 <__aeabi_dmul+0x318>)
 800261a:	00f0      	lsls	r0, r6, #3
 800261c:	4694      	mov	ip, r2
 800261e:	4463      	add	r3, ip
 8002620:	195b      	adds	r3, r3, r5
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	4642      	mov	r2, r8
 8002628:	2600      	movs	r6, #0
 800262a:	2a0a      	cmp	r2, #10
 800262c:	dc42      	bgt.n	80026b4 <__aeabi_dmul+0x10c>
 800262e:	465a      	mov	r2, fp
 8002630:	9900      	ldr	r1, [sp, #0]
 8002632:	404a      	eors	r2, r1
 8002634:	4693      	mov	fp, r2
 8002636:	4642      	mov	r2, r8
 8002638:	2a02      	cmp	r2, #2
 800263a:	dc32      	bgt.n	80026a2 <__aeabi_dmul+0xfa>
 800263c:	3a01      	subs	r2, #1
 800263e:	2a01      	cmp	r2, #1
 8002640:	d900      	bls.n	8002644 <__aeabi_dmul+0x9c>
 8002642:	e149      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002644:	2e02      	cmp	r6, #2
 8002646:	d100      	bne.n	800264a <__aeabi_dmul+0xa2>
 8002648:	e0ca      	b.n	80027e0 <__aeabi_dmul+0x238>
 800264a:	2e01      	cmp	r6, #1
 800264c:	d13d      	bne.n	80026ca <__aeabi_dmul+0x122>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	0010      	movs	r0, r2
 8002656:	465a      	mov	r2, fp
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	4323      	orrs	r3, r4
 800265c:	07d2      	lsls	r2, r2, #31
 800265e:	4313      	orrs	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	b007      	add	sp, #28
 8002664:	bcf0      	pop	{r4, r5, r6, r7}
 8002666:	46bb      	mov	fp, r7
 8002668:	46b2      	mov	sl, r6
 800266a:	46a9      	mov	r9, r5
 800266c:	46a0      	mov	r8, r4
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	4b92      	ldr	r3, [pc, #584]	@ (80028bc <__aeabi_dmul+0x314>)
 8002672:	4326      	orrs	r6, r4
 8002674:	18eb      	adds	r3, r5, r3
 8002676:	2e00      	cmp	r6, #0
 8002678:	d100      	bne.n	800267c <__aeabi_dmul+0xd4>
 800267a:	e0bb      	b.n	80027f4 <__aeabi_dmul+0x24c>
 800267c:	2203      	movs	r2, #3
 800267e:	4641      	mov	r1, r8
 8002680:	4311      	orrs	r1, r2
 8002682:	465a      	mov	r2, fp
 8002684:	4688      	mov	r8, r1
 8002686:	9900      	ldr	r1, [sp, #0]
 8002688:	404a      	eors	r2, r1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	0109      	lsls	r1, r1, #4
 800268e:	468c      	mov	ip, r1
 8002690:	0029      	movs	r1, r5
 8002692:	4461      	add	r1, ip
 8002694:	9101      	str	r1, [sp, #4]
 8002696:	4641      	mov	r1, r8
 8002698:	290a      	cmp	r1, #10
 800269a:	dd00      	ble.n	800269e <__aeabi_dmul+0xf6>
 800269c:	e233      	b.n	8002b06 <__aeabi_dmul+0x55e>
 800269e:	4693      	mov	fp, r2
 80026a0:	2603      	movs	r6, #3
 80026a2:	4642      	mov	r2, r8
 80026a4:	2701      	movs	r7, #1
 80026a6:	4097      	lsls	r7, r2
 80026a8:	21a6      	movs	r1, #166	@ 0xa6
 80026aa:	003a      	movs	r2, r7
 80026ac:	00c9      	lsls	r1, r1, #3
 80026ae:	400a      	ands	r2, r1
 80026b0:	420f      	tst	r7, r1
 80026b2:	d031      	beq.n	8002718 <__aeabi_dmul+0x170>
 80026b4:	9e02      	ldr	r6, [sp, #8]
 80026b6:	2e02      	cmp	r6, #2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dmul+0x114>
 80026ba:	e235      	b.n	8002b28 <__aeabi_dmul+0x580>
 80026bc:	2e03      	cmp	r6, #3
 80026be:	d100      	bne.n	80026c2 <__aeabi_dmul+0x11a>
 80026c0:	e1d2      	b.n	8002a68 <__aeabi_dmul+0x4c0>
 80026c2:	4654      	mov	r4, sl
 80026c4:	4648      	mov	r0, r9
 80026c6:	2e01      	cmp	r6, #1
 80026c8:	d0c1      	beq.n	800264e <__aeabi_dmul+0xa6>
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	4b7d      	ldr	r3, [pc, #500]	@ (80028c4 <__aeabi_dmul+0x31c>)
 80026ce:	4694      	mov	ip, r2
 80026d0:	4463      	add	r3, ip
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dc00      	bgt.n	80026d8 <__aeabi_dmul+0x130>
 80026d6:	e0c0      	b.n	800285a <__aeabi_dmul+0x2b2>
 80026d8:	0742      	lsls	r2, r0, #29
 80026da:	d009      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026dc:	220f      	movs	r2, #15
 80026de:	4002      	ands	r2, r0
 80026e0:	2a04      	cmp	r2, #4
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026e4:	1d02      	adds	r2, r0, #4
 80026e6:	4282      	cmp	r2, r0
 80026e8:	4180      	sbcs	r0, r0
 80026ea:	4240      	negs	r0, r0
 80026ec:	1824      	adds	r4, r4, r0
 80026ee:	0010      	movs	r0, r2
 80026f0:	01e2      	lsls	r2, r4, #7
 80026f2:	d506      	bpl.n	8002702 <__aeabi_dmul+0x15a>
 80026f4:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <__aeabi_dmul+0x320>)
 80026f6:	9a01      	ldr	r2, [sp, #4]
 80026f8:	401c      	ands	r4, r3
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	4694      	mov	ip, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4463      	add	r3, ip
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <__aeabi_dmul+0x324>)
 8002704:	4293      	cmp	r3, r2
 8002706:	dc6b      	bgt.n	80027e0 <__aeabi_dmul+0x238>
 8002708:	0762      	lsls	r2, r4, #29
 800270a:	08c0      	lsrs	r0, r0, #3
 800270c:	0264      	lsls	r4, r4, #9
 800270e:	055b      	lsls	r3, r3, #21
 8002710:	4302      	orrs	r2, r0
 8002712:	0b24      	lsrs	r4, r4, #12
 8002714:	0d5b      	lsrs	r3, r3, #21
 8002716:	e79d      	b.n	8002654 <__aeabi_dmul+0xac>
 8002718:	2190      	movs	r1, #144	@ 0x90
 800271a:	0089      	lsls	r1, r1, #2
 800271c:	420f      	tst	r7, r1
 800271e:	d163      	bne.n	80027e8 <__aeabi_dmul+0x240>
 8002720:	2288      	movs	r2, #136	@ 0x88
 8002722:	423a      	tst	r2, r7
 8002724:	d100      	bne.n	8002728 <__aeabi_dmul+0x180>
 8002726:	e0d7      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002728:	9b00      	ldr	r3, [sp, #0]
 800272a:	46a2      	mov	sl, r4
 800272c:	469b      	mov	fp, r3
 800272e:	4681      	mov	r9, r0
 8002730:	9602      	str	r6, [sp, #8]
 8002732:	e7bf      	b.n	80026b4 <__aeabi_dmul+0x10c>
 8002734:	0023      	movs	r3, r4
 8002736:	4333      	orrs	r3, r6
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x194>
 800273a:	e07f      	b.n	800283c <__aeabi_dmul+0x294>
 800273c:	2c00      	cmp	r4, #0
 800273e:	d100      	bne.n	8002742 <__aeabi_dmul+0x19a>
 8002740:	e1ad      	b.n	8002a9e <__aeabi_dmul+0x4f6>
 8002742:	0020      	movs	r0, r4
 8002744:	f000 ff10 	bl	8003568 <__clzsi2>
 8002748:	0002      	movs	r2, r0
 800274a:	0003      	movs	r3, r0
 800274c:	3a0b      	subs	r2, #11
 800274e:	201d      	movs	r0, #29
 8002750:	0019      	movs	r1, r3
 8002752:	1a82      	subs	r2, r0, r2
 8002754:	0030      	movs	r0, r6
 8002756:	3908      	subs	r1, #8
 8002758:	40d0      	lsrs	r0, r2
 800275a:	408c      	lsls	r4, r1
 800275c:	4304      	orrs	r4, r0
 800275e:	0030      	movs	r0, r6
 8002760:	4088      	lsls	r0, r1
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <__aeabi_dmul+0x328>)
 8002764:	1aeb      	subs	r3, r5, r3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2600      	movs	r6, #0
 8002772:	2a0a      	cmp	r2, #10
 8002774:	dc00      	bgt.n	8002778 <__aeabi_dmul+0x1d0>
 8002776:	e75a      	b.n	800262e <__aeabi_dmul+0x86>
 8002778:	e79c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800277a:	4653      	mov	r3, sl
 800277c:	4303      	orrs	r3, r0
 800277e:	4699      	mov	r9, r3
 8002780:	d054      	beq.n	800282c <__aeabi_dmul+0x284>
 8002782:	4653      	mov	r3, sl
 8002784:	2b00      	cmp	r3, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dmul+0x1e2>
 8002788:	e177      	b.n	8002a7a <__aeabi_dmul+0x4d2>
 800278a:	4650      	mov	r0, sl
 800278c:	f000 feec 	bl	8003568 <__clzsi2>
 8002790:	230b      	movs	r3, #11
 8002792:	425b      	negs	r3, r3
 8002794:	469c      	mov	ip, r3
 8002796:	0002      	movs	r2, r0
 8002798:	4484      	add	ip, r0
 800279a:	0011      	movs	r1, r2
 800279c:	4650      	mov	r0, sl
 800279e:	3908      	subs	r1, #8
 80027a0:	4088      	lsls	r0, r1
 80027a2:	231d      	movs	r3, #29
 80027a4:	4680      	mov	r8, r0
 80027a6:	4660      	mov	r0, ip
 80027a8:	1a1b      	subs	r3, r3, r0
 80027aa:	0020      	movs	r0, r4
 80027ac:	40d8      	lsrs	r0, r3
 80027ae:	0003      	movs	r3, r0
 80027b0:	4640      	mov	r0, r8
 80027b2:	4303      	orrs	r3, r0
 80027b4:	469a      	mov	sl, r3
 80027b6:	0023      	movs	r3, r4
 80027b8:	408b      	lsls	r3, r1
 80027ba:	4699      	mov	r9, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	4d44      	ldr	r5, [pc, #272]	@ (80028d0 <__aeabi_dmul+0x328>)
 80027c0:	4698      	mov	r8, r3
 80027c2:	1aad      	subs	r5, r5, r2
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	e715      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027c8:	4652      	mov	r2, sl
 80027ca:	4302      	orrs	r2, r0
 80027cc:	4691      	mov	r9, r2
 80027ce:	d126      	bne.n	800281e <__aeabi_dmul+0x276>
 80027d0:	2200      	movs	r2, #0
 80027d2:	001d      	movs	r5, r3
 80027d4:	2302      	movs	r3, #2
 80027d6:	4692      	mov	sl, r2
 80027d8:	3208      	adds	r2, #8
 80027da:	4690      	mov	r8, r2
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	e709      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027e0:	2400      	movs	r4, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <__aeabi_dmul+0x314>)
 80027e6:	e735      	b.n	8002654 <__aeabi_dmul+0xac>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2480      	movs	r4, #128	@ 0x80
 80027ec:	469b      	mov	fp, r3
 80027ee:	0324      	lsls	r4, r4, #12
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <__aeabi_dmul+0x314>)
 80027f2:	e72f      	b.n	8002654 <__aeabi_dmul+0xac>
 80027f4:	2202      	movs	r2, #2
 80027f6:	4641      	mov	r1, r8
 80027f8:	4311      	orrs	r1, r2
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	4694      	mov	ip, r2
 8002800:	002a      	movs	r2, r5
 8002802:	4462      	add	r2, ip
 8002804:	4688      	mov	r8, r1
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	290a      	cmp	r1, #10
 800280a:	dd00      	ble.n	800280e <__aeabi_dmul+0x266>
 800280c:	e752      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800280e:	465a      	mov	r2, fp
 8002810:	2000      	movs	r0, #0
 8002812:	9900      	ldr	r1, [sp, #0]
 8002814:	0004      	movs	r4, r0
 8002816:	404a      	eors	r2, r1
 8002818:	4693      	mov	fp, r2
 800281a:	2602      	movs	r6, #2
 800281c:	e70b      	b.n	8002636 <__aeabi_dmul+0x8e>
 800281e:	220c      	movs	r2, #12
 8002820:	001d      	movs	r5, r3
 8002822:	2303      	movs	r3, #3
 8002824:	4681      	mov	r9, r0
 8002826:	4690      	mov	r8, r2
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	e6e3      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800282c:	2300      	movs	r3, #0
 800282e:	469a      	mov	sl, r3
 8002830:	3304      	adds	r3, #4
 8002832:	4698      	mov	r8, r3
 8002834:	3b03      	subs	r3, #3
 8002836:	2500      	movs	r5, #0
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	e6db      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800283c:	4642      	mov	r2, r8
 800283e:	3301      	adds	r3, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	002b      	movs	r3, r5
 8002844:	4690      	mov	r8, r2
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	4642      	mov	r2, r8
 800284c:	2400      	movs	r4, #0
 800284e:	2000      	movs	r0, #0
 8002850:	2601      	movs	r6, #1
 8002852:	2a0a      	cmp	r2, #10
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dmul+0x2b0>
 8002856:	e6ea      	b.n	800262e <__aeabi_dmul+0x86>
 8002858:	e72c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800285a:	2201      	movs	r2, #1
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	2a38      	cmp	r2, #56	@ 0x38
 8002860:	dd00      	ble.n	8002864 <__aeabi_dmul+0x2bc>
 8002862:	e6f4      	b.n	800264e <__aeabi_dmul+0xa6>
 8002864:	2a1f      	cmp	r2, #31
 8002866:	dc00      	bgt.n	800286a <__aeabi_dmul+0x2c2>
 8002868:	e12a      	b.n	8002ac0 <__aeabi_dmul+0x518>
 800286a:	211f      	movs	r1, #31
 800286c:	4249      	negs	r1, r1
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	0021      	movs	r1, r4
 8002872:	40d9      	lsrs	r1, r3
 8002874:	000b      	movs	r3, r1
 8002876:	2a20      	cmp	r2, #32
 8002878:	d005      	beq.n	8002886 <__aeabi_dmul+0x2de>
 800287a:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <__aeabi_dmul+0x32c>)
 800287c:	9d01      	ldr	r5, [sp, #4]
 800287e:	4694      	mov	ip, r2
 8002880:	4465      	add	r5, ip
 8002882:	40ac      	lsls	r4, r5
 8002884:	4320      	orrs	r0, r4
 8002886:	1e42      	subs	r2, r0, #1
 8002888:	4190      	sbcs	r0, r2
 800288a:	4318      	orrs	r0, r3
 800288c:	2307      	movs	r3, #7
 800288e:	0019      	movs	r1, r3
 8002890:	2400      	movs	r4, #0
 8002892:	4001      	ands	r1, r0
 8002894:	4203      	tst	r3, r0
 8002896:	d00c      	beq.n	80028b2 <__aeabi_dmul+0x30a>
 8002898:	230f      	movs	r3, #15
 800289a:	4003      	ands	r3, r0
 800289c:	2b04      	cmp	r3, #4
 800289e:	d100      	bne.n	80028a2 <__aeabi_dmul+0x2fa>
 80028a0:	e140      	b.n	8002b24 <__aeabi_dmul+0x57c>
 80028a2:	1d03      	adds	r3, r0, #4
 80028a4:	4283      	cmp	r3, r0
 80028a6:	41a4      	sbcs	r4, r4
 80028a8:	0018      	movs	r0, r3
 80028aa:	4264      	negs	r4, r4
 80028ac:	0761      	lsls	r1, r4, #29
 80028ae:	0264      	lsls	r4, r4, #9
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	08c2      	lsrs	r2, r0, #3
 80028b4:	2300      	movs	r3, #0
 80028b6:	430a      	orrs	r2, r1
 80028b8:	e6cc      	b.n	8002654 <__aeabi_dmul+0xac>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000007ff 	.word	0x000007ff
 80028c0:	fffffc01 	.word	0xfffffc01
 80028c4:	000003ff 	.word	0x000003ff
 80028c8:	feffffff 	.word	0xfeffffff
 80028cc:	000007fe 	.word	0x000007fe
 80028d0:	fffffc0d 	.word	0xfffffc0d
 80028d4:	0000043e 	.word	0x0000043e
 80028d8:	4649      	mov	r1, r9
 80028da:	464a      	mov	r2, r9
 80028dc:	0409      	lsls	r1, r1, #16
 80028de:	0c09      	lsrs	r1, r1, #16
 80028e0:	000d      	movs	r5, r1
 80028e2:	0c16      	lsrs	r6, r2, #16
 80028e4:	0c02      	lsrs	r2, r0, #16
 80028e6:	0400      	lsls	r0, r0, #16
 80028e8:	0c00      	lsrs	r0, r0, #16
 80028ea:	4345      	muls	r5, r0
 80028ec:	46ac      	mov	ip, r5
 80028ee:	0005      	movs	r5, r0
 80028f0:	4375      	muls	r5, r6
 80028f2:	46a8      	mov	r8, r5
 80028f4:	0015      	movs	r5, r2
 80028f6:	000f      	movs	r7, r1
 80028f8:	4375      	muls	r5, r6
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	9502      	str	r5, [sp, #8]
 80028fe:	002a      	movs	r2, r5
 8002900:	9d00      	ldr	r5, [sp, #0]
 8002902:	436f      	muls	r7, r5
 8002904:	4665      	mov	r5, ip
 8002906:	0c2d      	lsrs	r5, r5, #16
 8002908:	46a9      	mov	r9, r5
 800290a:	4447      	add	r7, r8
 800290c:	444f      	add	r7, r9
 800290e:	45b8      	cmp	r8, r7
 8002910:	d905      	bls.n	800291e <__aeabi_dmul+0x376>
 8002912:	0015      	movs	r5, r2
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0252      	lsls	r2, r2, #9
 8002918:	4690      	mov	r8, r2
 800291a:	4445      	add	r5, r8
 800291c:	9502      	str	r5, [sp, #8]
 800291e:	0c3d      	lsrs	r5, r7, #16
 8002920:	9503      	str	r5, [sp, #12]
 8002922:	4665      	mov	r5, ip
 8002924:	042d      	lsls	r5, r5, #16
 8002926:	043f      	lsls	r7, r7, #16
 8002928:	0c2d      	lsrs	r5, r5, #16
 800292a:	46ac      	mov	ip, r5
 800292c:	003d      	movs	r5, r7
 800292e:	4465      	add	r5, ip
 8002930:	9504      	str	r5, [sp, #16]
 8002932:	0c25      	lsrs	r5, r4, #16
 8002934:	0424      	lsls	r4, r4, #16
 8002936:	0c24      	lsrs	r4, r4, #16
 8002938:	46ac      	mov	ip, r5
 800293a:	0025      	movs	r5, r4
 800293c:	4375      	muls	r5, r6
 800293e:	46a8      	mov	r8, r5
 8002940:	4665      	mov	r5, ip
 8002942:	000f      	movs	r7, r1
 8002944:	4369      	muls	r1, r5
 8002946:	4441      	add	r1, r8
 8002948:	4689      	mov	r9, r1
 800294a:	4367      	muls	r7, r4
 800294c:	0c39      	lsrs	r1, r7, #16
 800294e:	4449      	add	r1, r9
 8002950:	436e      	muls	r6, r5
 8002952:	4588      	cmp	r8, r1
 8002954:	d903      	bls.n	800295e <__aeabi_dmul+0x3b6>
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0252      	lsls	r2, r2, #9
 800295a:	4690      	mov	r8, r2
 800295c:	4446      	add	r6, r8
 800295e:	0c0d      	lsrs	r5, r1, #16
 8002960:	46a8      	mov	r8, r5
 8002962:	0035      	movs	r5, r6
 8002964:	4445      	add	r5, r8
 8002966:	9505      	str	r5, [sp, #20]
 8002968:	9d03      	ldr	r5, [sp, #12]
 800296a:	043f      	lsls	r7, r7, #16
 800296c:	46a8      	mov	r8, r5
 800296e:	0c3f      	lsrs	r7, r7, #16
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	19c9      	adds	r1, r1, r7
 8002974:	4488      	add	r8, r1
 8002976:	4645      	mov	r5, r8
 8002978:	9503      	str	r5, [sp, #12]
 800297a:	4655      	mov	r5, sl
 800297c:	042e      	lsls	r6, r5, #16
 800297e:	0c36      	lsrs	r6, r6, #16
 8002980:	0c2f      	lsrs	r7, r5, #16
 8002982:	0035      	movs	r5, r6
 8002984:	4345      	muls	r5, r0
 8002986:	4378      	muls	r0, r7
 8002988:	4681      	mov	r9, r0
 800298a:	0038      	movs	r0, r7
 800298c:	46a8      	mov	r8, r5
 800298e:	0c2d      	lsrs	r5, r5, #16
 8002990:	46aa      	mov	sl, r5
 8002992:	9a00      	ldr	r2, [sp, #0]
 8002994:	4350      	muls	r0, r2
 8002996:	4372      	muls	r2, r6
 8002998:	444a      	add	r2, r9
 800299a:	4452      	add	r2, sl
 800299c:	4591      	cmp	r9, r2
 800299e:	d903      	bls.n	80029a8 <__aeabi_dmul+0x400>
 80029a0:	2580      	movs	r5, #128	@ 0x80
 80029a2:	026d      	lsls	r5, r5, #9
 80029a4:	46a9      	mov	r9, r5
 80029a6:	4448      	add	r0, r9
 80029a8:	0c15      	lsrs	r5, r2, #16
 80029aa:	46a9      	mov	r9, r5
 80029ac:	4645      	mov	r5, r8
 80029ae:	042d      	lsls	r5, r5, #16
 80029b0:	0c2d      	lsrs	r5, r5, #16
 80029b2:	46a8      	mov	r8, r5
 80029b4:	4665      	mov	r5, ip
 80029b6:	437d      	muls	r5, r7
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	4448      	add	r0, r9
 80029bc:	4490      	add	r8, r2
 80029be:	46a9      	mov	r9, r5
 80029c0:	0032      	movs	r2, r6
 80029c2:	4665      	mov	r5, ip
 80029c4:	4362      	muls	r2, r4
 80029c6:	436e      	muls	r6, r5
 80029c8:	437c      	muls	r4, r7
 80029ca:	0c17      	lsrs	r7, r2, #16
 80029cc:	1936      	adds	r6, r6, r4
 80029ce:	19bf      	adds	r7, r7, r6
 80029d0:	42bc      	cmp	r4, r7
 80029d2:	d903      	bls.n	80029dc <__aeabi_dmul+0x434>
 80029d4:	2480      	movs	r4, #128	@ 0x80
 80029d6:	0264      	lsls	r4, r4, #9
 80029d8:	46a4      	mov	ip, r4
 80029da:	44e1      	add	r9, ip
 80029dc:	9c02      	ldr	r4, [sp, #8]
 80029de:	9e03      	ldr	r6, [sp, #12]
 80029e0:	46a4      	mov	ip, r4
 80029e2:	9d05      	ldr	r5, [sp, #20]
 80029e4:	4466      	add	r6, ip
 80029e6:	428e      	cmp	r6, r1
 80029e8:	4189      	sbcs	r1, r1
 80029ea:	46ac      	mov	ip, r5
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	043c      	lsls	r4, r7, #16
 80029f0:	0c12      	lsrs	r2, r2, #16
 80029f2:	18a2      	adds	r2, r4, r2
 80029f4:	4462      	add	r2, ip
 80029f6:	4249      	negs	r1, r1
 80029f8:	1854      	adds	r4, r2, r1
 80029fa:	4446      	add	r6, r8
 80029fc:	46a4      	mov	ip, r4
 80029fe:	4546      	cmp	r6, r8
 8002a00:	41a4      	sbcs	r4, r4
 8002a02:	4682      	mov	sl, r0
 8002a04:	4264      	negs	r4, r4
 8002a06:	46a0      	mov	r8, r4
 8002a08:	42aa      	cmp	r2, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	458c      	cmp	ip, r1
 8002a0e:	4189      	sbcs	r1, r1
 8002a10:	44e2      	add	sl, ip
 8002a12:	44d0      	add	r8, sl
 8002a14:	4249      	negs	r1, r1
 8002a16:	4252      	negs	r2, r2
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	45a0      	cmp	r8, r4
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4582      	cmp	sl, r0
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	4264      	negs	r4, r4
 8002a24:	4249      	negs	r1, r1
 8002a26:	430c      	orrs	r4, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	0c3f      	lsrs	r7, r7, #16
 8002a2c:	19d2      	adds	r2, r2, r7
 8002a2e:	1912      	adds	r2, r2, r4
 8002a30:	0dcc      	lsrs	r4, r1, #23
 8002a32:	9904      	ldr	r1, [sp, #16]
 8002a34:	0270      	lsls	r0, r6, #9
 8002a36:	4308      	orrs	r0, r1
 8002a38:	1e41      	subs	r1, r0, #1
 8002a3a:	4188      	sbcs	r0, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	444a      	add	r2, r9
 8002a40:	0df6      	lsrs	r6, r6, #23
 8002a42:	0252      	lsls	r2, r2, #9
 8002a44:	4330      	orrs	r0, r6
 8002a46:	0249      	lsls	r1, r1, #9
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	01d2      	lsls	r2, r2, #7
 8002a4e:	d535      	bpl.n	8002abc <__aeabi_dmul+0x514>
 8002a50:	2201      	movs	r2, #1
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4002      	ands	r2, r0
 8002a56:	4313      	orrs	r3, r2
 8002a58:	07e0      	lsls	r0, r4, #31
 8002a5a:	4318      	orrs	r0, r3
 8002a5c:	0864      	lsrs	r4, r4, #1
 8002a5e:	e634      	b.n	80026ca <__aeabi_dmul+0x122>
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	46a2      	mov	sl, r4
 8002a64:	469b      	mov	fp, r3
 8002a66:	4681      	mov	r9, r0
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	0324      	lsls	r4, r4, #12
 8002a6e:	431c      	orrs	r4, r3
 8002a70:	0324      	lsls	r4, r4, #12
 8002a72:	464a      	mov	r2, r9
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002a76:	0b24      	lsrs	r4, r4, #12
 8002a78:	e5ec      	b.n	8002654 <__aeabi_dmul+0xac>
 8002a7a:	f000 fd75 	bl	8003568 <__clzsi2>
 8002a7e:	2315      	movs	r3, #21
 8002a80:	469c      	mov	ip, r3
 8002a82:	4484      	add	ip, r0
 8002a84:	0002      	movs	r2, r0
 8002a86:	4663      	mov	r3, ip
 8002a88:	3220      	adds	r2, #32
 8002a8a:	2b1c      	cmp	r3, #28
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x4e8>
 8002a8e:	e684      	b.n	800279a <__aeabi_dmul+0x1f2>
 8002a90:	2300      	movs	r3, #0
 8002a92:	4699      	mov	r9, r3
 8002a94:	0023      	movs	r3, r4
 8002a96:	3808      	subs	r0, #8
 8002a98:	4083      	lsls	r3, r0
 8002a9a:	469a      	mov	sl, r3
 8002a9c:	e68e      	b.n	80027bc <__aeabi_dmul+0x214>
 8002a9e:	f000 fd63 	bl	8003568 <__clzsi2>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3215      	adds	r2, #21
 8002aa8:	3320      	adds	r3, #32
 8002aaa:	2a1c      	cmp	r2, #28
 8002aac:	dc00      	bgt.n	8002ab0 <__aeabi_dmul+0x508>
 8002aae:	e64e      	b.n	800274e <__aeabi_dmul+0x1a6>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	0034      	movs	r4, r6
 8002ab4:	3a08      	subs	r2, #8
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4094      	lsls	r4, r2
 8002aba:	e652      	b.n	8002762 <__aeabi_dmul+0x1ba>
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	e604      	b.n	80026ca <__aeabi_dmul+0x122>
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <__aeabi_dmul+0x58c>)
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	469c      	mov	ip, r3
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	9d01      	ldr	r5, [sp, #4]
 8002aca:	40d3      	lsrs	r3, r2
 8002acc:	4465      	add	r5, ip
 8002ace:	40a9      	lsls	r1, r5
 8002ad0:	4319      	orrs	r1, r3
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	40ab      	lsls	r3, r5
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	4183      	sbcs	r3, r0
 8002ada:	4319      	orrs	r1, r3
 8002adc:	0008      	movs	r0, r1
 8002ade:	40d4      	lsrs	r4, r2
 8002ae0:	074b      	lsls	r3, r1, #29
 8002ae2:	d009      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d005      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002aec:	1d0b      	adds	r3, r1, #4
 8002aee:	428b      	cmp	r3, r1
 8002af0:	4180      	sbcs	r0, r0
 8002af2:	4240      	negs	r0, r0
 8002af4:	1824      	adds	r4, r4, r0
 8002af6:	0018      	movs	r0, r3
 8002af8:	0223      	lsls	r3, r4, #8
 8002afa:	d400      	bmi.n	8002afe <__aeabi_dmul+0x556>
 8002afc:	e6d6      	b.n	80028ac <__aeabi_dmul+0x304>
 8002afe:	2301      	movs	r3, #1
 8002b00:	2400      	movs	r4, #0
 8002b02:	2200      	movs	r2, #0
 8002b04:	e5a6      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b06:	290f      	cmp	r1, #15
 8002b08:	d1aa      	bne.n	8002a60 <__aeabi_dmul+0x4b8>
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	421a      	tst	r2, r3
 8002b12:	d0a9      	beq.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b14:	421c      	tst	r4, r3
 8002b16:	d1a7      	bne.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b18:	431c      	orrs	r4, r3
 8002b1a:	9b00      	ldr	r3, [sp, #0]
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	469b      	mov	fp, r3
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b22:	e597      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b24:	2400      	movs	r4, #0
 8002b26:	e6c1      	b.n	80028ac <__aeabi_dmul+0x304>
 8002b28:	2400      	movs	r4, #0
 8002b2a:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b2c:	0022      	movs	r2, r4
 8002b2e:	e591      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b30:	000007ff 	.word	0x000007ff
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_dsub>:
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	464e      	mov	r6, r9
 8002b3c:	4645      	mov	r5, r8
 8002b3e:	46de      	mov	lr, fp
 8002b40:	4657      	mov	r7, sl
 8002b42:	b5e0      	push	{r5, r6, r7, lr}
 8002b44:	b085      	sub	sp, #20
 8002b46:	9000      	str	r0, [sp, #0]
 8002b48:	9101      	str	r1, [sp, #4]
 8002b4a:	030c      	lsls	r4, r1, #12
 8002b4c:	004f      	lsls	r7, r1, #1
 8002b4e:	0fce      	lsrs	r6, r1, #31
 8002b50:	0a61      	lsrs	r1, r4, #9
 8002b52:	9c00      	ldr	r4, [sp, #0]
 8002b54:	46b0      	mov	r8, r6
 8002b56:	0f64      	lsrs	r4, r4, #29
 8002b58:	430c      	orrs	r4, r1
 8002b5a:	9900      	ldr	r1, [sp, #0]
 8002b5c:	0d7f      	lsrs	r7, r7, #21
 8002b5e:	00c8      	lsls	r0, r1, #3
 8002b60:	0011      	movs	r1, r2
 8002b62:	001a      	movs	r2, r3
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	469c      	mov	ip, r3
 8002b68:	9100      	str	r1, [sp, #0]
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	0051      	lsls	r1, r2, #1
 8002b6e:	0d4b      	lsrs	r3, r1, #21
 8002b70:	4699      	mov	r9, r3
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	9d00      	ldr	r5, [sp, #0]
 8002b76:	0fd9      	lsrs	r1, r3, #31
 8002b78:	4663      	mov	r3, ip
 8002b7a:	0f6a      	lsrs	r2, r5, #29
 8002b7c:	0a5b      	lsrs	r3, r3, #9
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	00ea      	lsls	r2, r5, #3
 8002b82:	4694      	mov	ip, r2
 8002b84:	4693      	mov	fp, r2
 8002b86:	4ac1      	ldr	r2, [pc, #772]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002b88:	9003      	str	r0, [sp, #12]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	4591      	cmp	r9, r2
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x5a>
 8002b90:	e0cd      	b.n	8002d2e <__aeabi_dsub+0x1f6>
 8002b92:	2501      	movs	r5, #1
 8002b94:	4069      	eors	r1, r5
 8002b96:	464d      	mov	r5, r9
 8002b98:	1b7d      	subs	r5, r7, r5
 8002b9a:	46aa      	mov	sl, r5
 8002b9c:	428e      	cmp	r6, r1
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x6a>
 8002ba0:	e080      	b.n	8002ca4 <__aeabi_dsub+0x16c>
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	dc00      	bgt.n	8002ba8 <__aeabi_dsub+0x70>
 8002ba6:	e335      	b.n	8003214 <__aeabi_dsub+0x6dc>
 8002ba8:	4649      	mov	r1, r9
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x78>
 8002bae:	e0df      	b.n	8002d70 <__aeabi_dsub+0x238>
 8002bb0:	4297      	cmp	r7, r2
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x7e>
 8002bb4:	e194      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	2501      	movs	r5, #1
 8002bba:	2a38      	cmp	r2, #56	@ 0x38
 8002bbc:	dc19      	bgt.n	8002bf2 <__aeabi_dsub+0xba>
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	9b02      	ldr	r3, [sp, #8]
 8002bc2:	0412      	lsls	r2, r2, #16
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	4652      	mov	r2, sl
 8002bca:	2a1f      	cmp	r2, #31
 8002bcc:	dd00      	ble.n	8002bd0 <__aeabi_dsub+0x98>
 8002bce:	e1e3      	b.n	8002f98 <__aeabi_dsub+0x460>
 8002bd0:	4653      	mov	r3, sl
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	4661      	mov	r1, ip
 8002bd6:	9d02      	ldr	r5, [sp, #8]
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	4095      	lsls	r5, r2
 8002bdc:	40d9      	lsrs	r1, r3
 8002bde:	430d      	orrs	r5, r1
 8002be0:	4661      	mov	r1, ip
 8002be2:	4091      	lsls	r1, r2
 8002be4:	000a      	movs	r2, r1
 8002be6:	1e51      	subs	r1, r2, #1
 8002be8:	418a      	sbcs	r2, r1
 8002bea:	4315      	orrs	r5, r2
 8002bec:	9a02      	ldr	r2, [sp, #8]
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	1aa4      	subs	r4, r4, r2
 8002bf2:	1b45      	subs	r5, r0, r5
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	4180      	sbcs	r0, r0
 8002bf8:	4240      	negs	r0, r0
 8002bfa:	1a24      	subs	r4, r4, r0
 8002bfc:	0223      	lsls	r3, r4, #8
 8002bfe:	d400      	bmi.n	8002c02 <__aeabi_dsub+0xca>
 8002c00:	e13d      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002c02:	0264      	lsls	r4, r4, #9
 8002c04:	0a64      	lsrs	r4, r4, #9
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0xd4>
 8002c0a:	e147      	b.n	8002e9c <__aeabi_dsub+0x364>
 8002c0c:	0020      	movs	r0, r4
 8002c0e:	f000 fcab 	bl	8003568 <__clzsi2>
 8002c12:	0003      	movs	r3, r0
 8002c14:	3b08      	subs	r3, #8
 8002c16:	2120      	movs	r1, #32
 8002c18:	0028      	movs	r0, r5
 8002c1a:	1aca      	subs	r2, r1, r3
 8002c1c:	40d0      	lsrs	r0, r2
 8002c1e:	409c      	lsls	r4, r3
 8002c20:	0002      	movs	r2, r0
 8002c22:	409d      	lsls	r5, r3
 8002c24:	4322      	orrs	r2, r4
 8002c26:	429f      	cmp	r7, r3
 8002c28:	dd00      	ble.n	8002c2c <__aeabi_dsub+0xf4>
 8002c2a:	e177      	b.n	8002f1c <__aeabi_dsub+0x3e4>
 8002c2c:	1bd8      	subs	r0, r3, r7
 8002c2e:	3001      	adds	r0, #1
 8002c30:	1a09      	subs	r1, r1, r0
 8002c32:	002c      	movs	r4, r5
 8002c34:	408d      	lsls	r5, r1
 8002c36:	40c4      	lsrs	r4, r0
 8002c38:	1e6b      	subs	r3, r5, #1
 8002c3a:	419d      	sbcs	r5, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	40c2      	lsrs	r2, r0
 8002c40:	408b      	lsls	r3, r1
 8002c42:	4325      	orrs	r5, r4
 8002c44:	2700      	movs	r7, #0
 8002c46:	0014      	movs	r4, r2
 8002c48:	431d      	orrs	r5, r3
 8002c4a:	076b      	lsls	r3, r5, #29
 8002c4c:	d009      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c4e:	230f      	movs	r3, #15
 8002c50:	402b      	ands	r3, r5
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d005      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c56:	1d2b      	adds	r3, r5, #4
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	41ad      	sbcs	r5, r5
 8002c5c:	426d      	negs	r5, r5
 8002c5e:	1964      	adds	r4, r4, r5
 8002c60:	001d      	movs	r5, r3
 8002c62:	0223      	lsls	r3, r4, #8
 8002c64:	d400      	bmi.n	8002c68 <__aeabi_dsub+0x130>
 8002c66:	e140      	b.n	8002eea <__aeabi_dsub+0x3b2>
 8002c68:	4a88      	ldr	r2, [pc, #544]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002c6a:	3701      	adds	r7, #1
 8002c6c:	4297      	cmp	r7, r2
 8002c6e:	d100      	bne.n	8002c72 <__aeabi_dsub+0x13a>
 8002c70:	e101      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002c72:	2601      	movs	r6, #1
 8002c74:	4643      	mov	r3, r8
 8002c76:	4986      	ldr	r1, [pc, #536]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002c78:	08ed      	lsrs	r5, r5, #3
 8002c7a:	4021      	ands	r1, r4
 8002c7c:	074a      	lsls	r2, r1, #29
 8002c7e:	432a      	orrs	r2, r5
 8002c80:	057c      	lsls	r4, r7, #21
 8002c82:	024d      	lsls	r5, r1, #9
 8002c84:	0b2d      	lsrs	r5, r5, #12
 8002c86:	0d64      	lsrs	r4, r4, #21
 8002c88:	401e      	ands	r6, r3
 8002c8a:	0524      	lsls	r4, r4, #20
 8002c8c:	432c      	orrs	r4, r5
 8002c8e:	07f6      	lsls	r6, r6, #31
 8002c90:	4334      	orrs	r4, r6
 8002c92:	0010      	movs	r0, r2
 8002c94:	0021      	movs	r1, r4
 8002c96:	b005      	add	sp, #20
 8002c98:	bcf0      	pop	{r4, r5, r6, r7}
 8002c9a:	46bb      	mov	fp, r7
 8002c9c:	46b2      	mov	sl, r6
 8002c9e:	46a9      	mov	r9, r5
 8002ca0:	46a0      	mov	r8, r4
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	dc00      	bgt.n	8002caa <__aeabi_dsub+0x172>
 8002ca8:	e2d0      	b.n	800324c <__aeabi_dsub+0x714>
 8002caa:	4649      	mov	r1, r9
 8002cac:	2900      	cmp	r1, #0
 8002cae:	d000      	beq.n	8002cb2 <__aeabi_dsub+0x17a>
 8002cb0:	e0d4      	b.n	8002e5c <__aeabi_dsub+0x324>
 8002cb2:	4661      	mov	r1, ip
 8002cb4:	9b02      	ldr	r3, [sp, #8]
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x184>
 8002cba:	e12b      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002cbc:	1e69      	subs	r1, r5, #1
 8002cbe:	2d01      	cmp	r5, #1
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x18c>
 8002cc2:	e1d9      	b.n	8003078 <__aeabi_dsub+0x540>
 8002cc4:	4295      	cmp	r5, r2
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x192>
 8002cc8:	e10a      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002cca:	2501      	movs	r5, #1
 8002ccc:	2938      	cmp	r1, #56	@ 0x38
 8002cce:	dc17      	bgt.n	8002d00 <__aeabi_dsub+0x1c8>
 8002cd0:	468a      	mov	sl, r1
 8002cd2:	4653      	mov	r3, sl
 8002cd4:	2b1f      	cmp	r3, #31
 8002cd6:	dd00      	ble.n	8002cda <__aeabi_dsub+0x1a2>
 8002cd8:	e1e7      	b.n	80030aa <__aeabi_dsub+0x572>
 8002cda:	2220      	movs	r2, #32
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	4661      	mov	r1, ip
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	001d      	movs	r5, r3
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	4663      	mov	r3, ip
 8002cec:	4093      	lsls	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	430d      	orrs	r5, r1
 8002cf2:	1e51      	subs	r1, r2, #1
 8002cf4:	418a      	sbcs	r2, r1
 8002cf6:	4653      	mov	r3, sl
 8002cf8:	4315      	orrs	r5, r2
 8002cfa:	9a02      	ldr	r2, [sp, #8]
 8002cfc:	40da      	lsrs	r2, r3
 8002cfe:	18a4      	adds	r4, r4, r2
 8002d00:	182d      	adds	r5, r5, r0
 8002d02:	4285      	cmp	r5, r0
 8002d04:	4180      	sbcs	r0, r0
 8002d06:	4240      	negs	r0, r0
 8002d08:	1824      	adds	r4, r4, r0
 8002d0a:	0223      	lsls	r3, r4, #8
 8002d0c:	d400      	bmi.n	8002d10 <__aeabi_dsub+0x1d8>
 8002d0e:	e0b6      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d12:	3701      	adds	r7, #1
 8002d14:	429f      	cmp	r7, r3
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x1e2>
 8002d18:	e0ad      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002d1e:	086a      	lsrs	r2, r5, #1
 8002d20:	401c      	ands	r4, r3
 8002d22:	4029      	ands	r1, r5
 8002d24:	430a      	orrs	r2, r1
 8002d26:	07e5      	lsls	r5, r4, #31
 8002d28:	4315      	orrs	r5, r2
 8002d2a:	0864      	lsrs	r4, r4, #1
 8002d2c:	e78d      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002d2e:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <__aeabi_dsub+0x35c>)
 8002d30:	9b02      	ldr	r3, [sp, #8]
 8002d32:	4692      	mov	sl, r2
 8002d34:	4662      	mov	r2, ip
 8002d36:	44ba      	add	sl, r7
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	d02c      	beq.n	8002d96 <__aeabi_dsub+0x25e>
 8002d3c:	428e      	cmp	r6, r1
 8002d3e:	d02e      	beq.n	8002d9e <__aeabi_dsub+0x266>
 8002d40:	4652      	mov	r2, sl
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d060      	beq.n	8002e08 <__aeabi_dsub+0x2d0>
 8002d46:	2f00      	cmp	r7, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x214>
 8002d4a:	e0db      	b.n	8002f04 <__aeabi_dsub+0x3cc>
 8002d4c:	4663      	mov	r3, ip
 8002d4e:	000e      	movs	r6, r1
 8002d50:	9c02      	ldr	r4, [sp, #8]
 8002d52:	08d8      	lsrs	r0, r3, #3
 8002d54:	0762      	lsls	r2, r4, #29
 8002d56:	4302      	orrs	r2, r0
 8002d58:	08e4      	lsrs	r4, r4, #3
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x22a>
 8002d60:	e254      	b.n	800320c <__aeabi_dsub+0x6d4>
 8002d62:	2580      	movs	r5, #128	@ 0x80
 8002d64:	032d      	lsls	r5, r5, #12
 8002d66:	4325      	orrs	r5, r4
 8002d68:	032d      	lsls	r5, r5, #12
 8002d6a:	4c48      	ldr	r4, [pc, #288]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d6c:	0b2d      	lsrs	r5, r5, #12
 8002d6e:	e78c      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002d70:	4661      	mov	r1, ip
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4319      	orrs	r1, r3
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x242>
 8002d78:	e0cc      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	3901      	subs	r1, #1
 8002d7e:	2d01      	cmp	r5, #1
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x24c>
 8002d82:	e188      	b.n	8003096 <__aeabi_dsub+0x55e>
 8002d84:	4295      	cmp	r5, r2
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x252>
 8002d88:	e0aa      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002d8a:	2501      	movs	r5, #1
 8002d8c:	2938      	cmp	r1, #56	@ 0x38
 8002d8e:	dd00      	ble.n	8002d92 <__aeabi_dsub+0x25a>
 8002d90:	e72f      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002d92:	468a      	mov	sl, r1
 8002d94:	e718      	b.n	8002bc8 <__aeabi_dsub+0x90>
 8002d96:	2201      	movs	r2, #1
 8002d98:	4051      	eors	r1, r2
 8002d9a:	428e      	cmp	r6, r1
 8002d9c:	d1d0      	bne.n	8002d40 <__aeabi_dsub+0x208>
 8002d9e:	4653      	mov	r3, sl
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x26e>
 8002da4:	e0be      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x274>
 8002daa:	e138      	b.n	800301e <__aeabi_dsub+0x4e6>
 8002dac:	46ca      	mov	sl, r9
 8002dae:	0022      	movs	r2, r4
 8002db0:	4302      	orrs	r2, r0
 8002db2:	d100      	bne.n	8002db6 <__aeabi_dsub+0x27e>
 8002db4:	e1e2      	b.n	800317c <__aeabi_dsub+0x644>
 8002db6:	4653      	mov	r3, sl
 8002db8:	1e59      	subs	r1, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x288>
 8002dbe:	e20d      	b.n	80031dc <__aeabi_dsub+0x6a4>
 8002dc0:	4a32      	ldr	r2, [pc, #200]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002dc2:	4592      	cmp	sl, r2
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x290>
 8002dc6:	e1d2      	b.n	800316e <__aeabi_dsub+0x636>
 8002dc8:	2701      	movs	r7, #1
 8002dca:	2938      	cmp	r1, #56	@ 0x38
 8002dcc:	dc13      	bgt.n	8002df6 <__aeabi_dsub+0x2be>
 8002dce:	291f      	cmp	r1, #31
 8002dd0:	dd00      	ble.n	8002dd4 <__aeabi_dsub+0x29c>
 8002dd2:	e1ee      	b.n	80031b2 <__aeabi_dsub+0x67a>
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	1a52      	subs	r2, r2, r1
 8002dda:	0025      	movs	r5, r4
 8002ddc:	0007      	movs	r7, r0
 8002dde:	469a      	mov	sl, r3
 8002de0:	40cc      	lsrs	r4, r1
 8002de2:	4090      	lsls	r0, r2
 8002de4:	4095      	lsls	r5, r2
 8002de6:	40cf      	lsrs	r7, r1
 8002de8:	44a2      	add	sl, r4
 8002dea:	1e42      	subs	r2, r0, #1
 8002dec:	4190      	sbcs	r0, r2
 8002dee:	4653      	mov	r3, sl
 8002df0:	432f      	orrs	r7, r5
 8002df2:	4307      	orrs	r7, r0
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	003d      	movs	r5, r7
 8002df8:	4465      	add	r5, ip
 8002dfa:	4565      	cmp	r5, ip
 8002dfc:	4192      	sbcs	r2, r2
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	4252      	negs	r2, r2
 8002e02:	464f      	mov	r7, r9
 8002e04:	18d4      	adds	r4, r2, r3
 8002e06:	e780      	b.n	8002d0a <__aeabi_dsub+0x1d2>
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <__aeabi_dsub+0x360>)
 8002e0a:	1c7d      	adds	r5, r7, #1
 8002e0c:	4215      	tst	r5, r2
 8002e0e:	d000      	beq.n	8002e12 <__aeabi_dsub+0x2da>
 8002e10:	e0aa      	b.n	8002f68 <__aeabi_dsub+0x430>
 8002e12:	4662      	mov	r2, ip
 8002e14:	0025      	movs	r5, r4
 8002e16:	9b02      	ldr	r3, [sp, #8]
 8002e18:	4305      	orrs	r5, r0
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	2f00      	cmp	r7, #0
 8002e1e:	d000      	beq.n	8002e22 <__aeabi_dsub+0x2ea>
 8002e20:	e0f5      	b.n	800300e <__aeabi_dsub+0x4d6>
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d100      	bne.n	8002e28 <__aeabi_dsub+0x2f0>
 8002e26:	e16b      	b.n	8003100 <__aeabi_dsub+0x5c8>
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x2f6>
 8002e2c:	e152      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002e2e:	4663      	mov	r3, ip
 8002e30:	1ac5      	subs	r5, r0, r3
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	1ae2      	subs	r2, r4, r3
 8002e36:	42a8      	cmp	r0, r5
 8002e38:	419b      	sbcs	r3, r3
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	d400      	bmi.n	8002e44 <__aeabi_dsub+0x30c>
 8002e42:	e1d5      	b.n	80031f0 <__aeabi_dsub+0x6b8>
 8002e44:	4663      	mov	r3, ip
 8002e46:	1a1d      	subs	r5, r3, r0
 8002e48:	45ac      	cmp	ip, r5
 8002e4a:	4192      	sbcs	r2, r2
 8002e4c:	2601      	movs	r6, #1
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	4252      	negs	r2, r2
 8002e52:	1b1c      	subs	r4, r3, r4
 8002e54:	4688      	mov	r8, r1
 8002e56:	1aa4      	subs	r4, r4, r2
 8002e58:	400e      	ands	r6, r1
 8002e5a:	e6f6      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002e5c:	4297      	cmp	r7, r2
 8002e5e:	d03f      	beq.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002e60:	4652      	mov	r2, sl
 8002e62:	2501      	movs	r5, #1
 8002e64:	2a38      	cmp	r2, #56	@ 0x38
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0x332>
 8002e68:	e74a      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	9b02      	ldr	r3, [sp, #8]
 8002e6e:	0412      	lsls	r2, r2, #16
 8002e70:	4313      	orrs	r3, r2
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	e72d      	b.n	8002cd2 <__aeabi_dsub+0x19a>
 8002e76:	003c      	movs	r4, r7
 8002e78:	2500      	movs	r5, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	e705      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	402b      	ands	r3, r5
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d000      	beq.n	8002e88 <__aeabi_dsub+0x350>
 8002e86:	e6e2      	b.n	8002c4e <__aeabi_dsub+0x116>
 8002e88:	e06b      	b.n	8002f62 <__aeabi_dsub+0x42a>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	000007ff 	.word	0x000007ff
 8002e90:	ff7fffff 	.word	0xff7fffff
 8002e94:	fffff801 	.word	0xfffff801
 8002e98:	000007fe 	.word	0x000007fe
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f000 fb63 	bl	8003568 <__clzsi2>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	2b1f      	cmp	r3, #31
 8002ea8:	dc00      	bgt.n	8002eac <__aeabi_dsub+0x374>
 8002eaa:	e6b4      	b.n	8002c16 <__aeabi_dsub+0xde>
 8002eac:	002a      	movs	r2, r5
 8002eae:	3808      	subs	r0, #8
 8002eb0:	4082      	lsls	r2, r0
 8002eb2:	429f      	cmp	r7, r3
 8002eb4:	dd00      	ble.n	8002eb8 <__aeabi_dsub+0x380>
 8002eb6:	e0b9      	b.n	800302c <__aeabi_dsub+0x4f4>
 8002eb8:	1bdb      	subs	r3, r3, r7
 8002eba:	1c58      	adds	r0, r3, #1
 8002ebc:	281f      	cmp	r0, #31
 8002ebe:	dc00      	bgt.n	8002ec2 <__aeabi_dsub+0x38a>
 8002ec0:	e1a0      	b.n	8003204 <__aeabi_dsub+0x6cc>
 8002ec2:	0015      	movs	r5, r2
 8002ec4:	3b1f      	subs	r3, #31
 8002ec6:	40dd      	lsrs	r5, r3
 8002ec8:	2820      	cmp	r0, #32
 8002eca:	d005      	beq.n	8002ed8 <__aeabi_dsub+0x3a0>
 8002ecc:	2340      	movs	r3, #64	@ 0x40
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	1e53      	subs	r3, r2, #1
 8002ed4:	419a      	sbcs	r2, r3
 8002ed6:	4315      	orrs	r5, r2
 8002ed8:	2307      	movs	r3, #7
 8002eda:	2700      	movs	r7, #0
 8002edc:	402b      	ands	r3, r5
 8002ede:	e7d0      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8002ee0:	08c0      	lsrs	r0, r0, #3
 8002ee2:	0762      	lsls	r2, r4, #29
 8002ee4:	4302      	orrs	r2, r0
 8002ee6:	08e4      	lsrs	r4, r4, #3
 8002ee8:	e737      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002eea:	08ea      	lsrs	r2, r5, #3
 8002eec:	0763      	lsls	r3, r4, #29
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	4bd3      	ldr	r3, [pc, #844]	@ (8003240 <__aeabi_dsub+0x708>)
 8002ef2:	08e4      	lsrs	r4, r4, #3
 8002ef4:	429f      	cmp	r7, r3
 8002ef6:	d100      	bne.n	8002efa <__aeabi_dsub+0x3c2>
 8002ef8:	e72f      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002efa:	0324      	lsls	r4, r4, #12
 8002efc:	0b25      	lsrs	r5, r4, #12
 8002efe:	057c      	lsls	r4, r7, #21
 8002f00:	0d64      	lsrs	r4, r4, #21
 8002f02:	e6c2      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f04:	46ca      	mov	sl, r9
 8002f06:	0022      	movs	r2, r4
 8002f08:	4302      	orrs	r2, r0
 8002f0a:	d158      	bne.n	8002fbe <__aeabi_dsub+0x486>
 8002f0c:	4663      	mov	r3, ip
 8002f0e:	000e      	movs	r6, r1
 8002f10:	9c02      	ldr	r4, [sp, #8]
 8002f12:	9303      	str	r3, [sp, #12]
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	4657      	mov	r7, sl
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	e7e7      	b.n	8002eec <__aeabi_dsub+0x3b4>
 8002f1c:	4cc9      	ldr	r4, [pc, #804]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f1e:	1aff      	subs	r7, r7, r3
 8002f20:	4014      	ands	r4, r2
 8002f22:	e692      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002f24:	4dc8      	ldr	r5, [pc, #800]	@ (8003248 <__aeabi_dsub+0x710>)
 8002f26:	1c7a      	adds	r2, r7, #1
 8002f28:	422a      	tst	r2, r5
 8002f2a:	d000      	beq.n	8002f2e <__aeabi_dsub+0x3f6>
 8002f2c:	e084      	b.n	8003038 <__aeabi_dsub+0x500>
 8002f2e:	0022      	movs	r2, r4
 8002f30:	4302      	orrs	r2, r0
 8002f32:	2f00      	cmp	r7, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x400>
 8002f36:	e0ef      	b.n	8003118 <__aeabi_dsub+0x5e0>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x406>
 8002f3c:	e0e5      	b.n	800310a <__aeabi_dsub+0x5d2>
 8002f3e:	4662      	mov	r2, ip
 8002f40:	9902      	ldr	r1, [sp, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	d100      	bne.n	8002f48 <__aeabi_dsub+0x410>
 8002f46:	e0c5      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002f48:	4663      	mov	r3, ip
 8002f4a:	18c5      	adds	r5, r0, r3
 8002f4c:	468c      	mov	ip, r1
 8002f4e:	4285      	cmp	r5, r0
 8002f50:	4180      	sbcs	r0, r0
 8002f52:	4464      	add	r4, ip
 8002f54:	4240      	negs	r0, r0
 8002f56:	1824      	adds	r4, r4, r0
 8002f58:	0223      	lsls	r3, r4, #8
 8002f5a:	d502      	bpl.n	8002f62 <__aeabi_dsub+0x42a>
 8002f5c:	4bb9      	ldr	r3, [pc, #740]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f5e:	3701      	adds	r7, #1
 8002f60:	401c      	ands	r4, r3
 8002f62:	46ba      	mov	sl, r7
 8002f64:	9503      	str	r5, [sp, #12]
 8002f66:	e7d5      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002f68:	4662      	mov	r2, ip
 8002f6a:	1a85      	subs	r5, r0, r2
 8002f6c:	42a8      	cmp	r0, r5
 8002f6e:	4192      	sbcs	r2, r2
 8002f70:	4252      	negs	r2, r2
 8002f72:	4691      	mov	r9, r2
 8002f74:	9b02      	ldr	r3, [sp, #8]
 8002f76:	1ae3      	subs	r3, r4, r3
 8002f78:	001a      	movs	r2, r3
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	0013      	movs	r3, r2
 8002f80:	4691      	mov	r9, r2
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	d46c      	bmi.n	8003060 <__aeabi_dsub+0x528>
 8002f86:	464a      	mov	r2, r9
 8002f88:	464c      	mov	r4, r9
 8002f8a:	432a      	orrs	r2, r5
 8002f8c:	d000      	beq.n	8002f90 <__aeabi_dsub+0x458>
 8002f8e:	e63a      	b.n	8002c06 <__aeabi_dsub+0xce>
 8002f90:	2600      	movs	r6, #0
 8002f92:	2400      	movs	r4, #0
 8002f94:	2500      	movs	r5, #0
 8002f96:	e678      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f98:	9902      	ldr	r1, [sp, #8]
 8002f9a:	4653      	mov	r3, sl
 8002f9c:	000d      	movs	r5, r1
 8002f9e:	3a20      	subs	r2, #32
 8002fa0:	40d5      	lsrs	r5, r2
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d006      	beq.n	8002fb4 <__aeabi_dsub+0x47c>
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	000b      	movs	r3, r1
 8002fac:	4093      	lsls	r3, r2
 8002fae:	4662      	mov	r2, ip
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	4693      	mov	fp, r2
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	4193      	sbcs	r3, r2
 8002fba:	431d      	orrs	r5, r3
 8002fbc:	e619      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002fbe:	4653      	mov	r3, sl
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d100      	bne.n	8002fc8 <__aeabi_dsub+0x490>
 8002fc6:	e0c6      	b.n	8003156 <__aeabi_dsub+0x61e>
 8002fc8:	4e9d      	ldr	r6, [pc, #628]	@ (8003240 <__aeabi_dsub+0x708>)
 8002fca:	45b2      	cmp	sl, r6
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x498>
 8002fce:	e6bd      	b.n	8002d4c <__aeabi_dsub+0x214>
 8002fd0:	4688      	mov	r8, r1
 8002fd2:	000e      	movs	r6, r1
 8002fd4:	2501      	movs	r5, #1
 8002fd6:	2a38      	cmp	r2, #56	@ 0x38
 8002fd8:	dc10      	bgt.n	8002ffc <__aeabi_dsub+0x4c4>
 8002fda:	2a1f      	cmp	r2, #31
 8002fdc:	dc7f      	bgt.n	80030de <__aeabi_dsub+0x5a6>
 8002fde:	2120      	movs	r1, #32
 8002fe0:	0025      	movs	r5, r4
 8002fe2:	1a89      	subs	r1, r1, r2
 8002fe4:	0007      	movs	r7, r0
 8002fe6:	4088      	lsls	r0, r1
 8002fe8:	408d      	lsls	r5, r1
 8002fea:	40d7      	lsrs	r7, r2
 8002fec:	40d4      	lsrs	r4, r2
 8002fee:	1e41      	subs	r1, r0, #1
 8002ff0:	4188      	sbcs	r0, r1
 8002ff2:	9b02      	ldr	r3, [sp, #8]
 8002ff4:	433d      	orrs	r5, r7
 8002ff6:	1b1b      	subs	r3, r3, r4
 8002ff8:	4305      	orrs	r5, r0
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1b55      	subs	r5, r2, r5
 8003000:	45ac      	cmp	ip, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	9b02      	ldr	r3, [sp, #8]
 8003006:	4252      	negs	r2, r2
 8003008:	464f      	mov	r7, r9
 800300a:	1a9c      	subs	r4, r3, r2
 800300c:	e5f6      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800300e:	2d00      	cmp	r5, #0
 8003010:	d000      	beq.n	8003014 <__aeabi_dsub+0x4dc>
 8003012:	e0b7      	b.n	8003184 <__aeabi_dsub+0x64c>
 8003014:	2a00      	cmp	r2, #0
 8003016:	d100      	bne.n	800301a <__aeabi_dsub+0x4e2>
 8003018:	e0f0      	b.n	80031fc <__aeabi_dsub+0x6c4>
 800301a:	2601      	movs	r6, #1
 800301c:	400e      	ands	r6, r1
 800301e:	4663      	mov	r3, ip
 8003020:	9802      	ldr	r0, [sp, #8]
 8003022:	08d9      	lsrs	r1, r3, #3
 8003024:	0742      	lsls	r2, r0, #29
 8003026:	430a      	orrs	r2, r1
 8003028:	08c4      	lsrs	r4, r0, #3
 800302a:	e696      	b.n	8002d5a <__aeabi_dsub+0x222>
 800302c:	4c85      	ldr	r4, [pc, #532]	@ (8003244 <__aeabi_dsub+0x70c>)
 800302e:	1aff      	subs	r7, r7, r3
 8003030:	4014      	ands	r4, r2
 8003032:	0762      	lsls	r2, r4, #29
 8003034:	08e4      	lsrs	r4, r4, #3
 8003036:	e760      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003038:	4981      	ldr	r1, [pc, #516]	@ (8003240 <__aeabi_dsub+0x708>)
 800303a:	428a      	cmp	r2, r1
 800303c:	d100      	bne.n	8003040 <__aeabi_dsub+0x508>
 800303e:	e0c9      	b.n	80031d4 <__aeabi_dsub+0x69c>
 8003040:	4663      	mov	r3, ip
 8003042:	18c1      	adds	r1, r0, r3
 8003044:	4281      	cmp	r1, r0
 8003046:	4180      	sbcs	r0, r0
 8003048:	9b02      	ldr	r3, [sp, #8]
 800304a:	4240      	negs	r0, r0
 800304c:	18e3      	adds	r3, r4, r3
 800304e:	181b      	adds	r3, r3, r0
 8003050:	07dd      	lsls	r5, r3, #31
 8003052:	085c      	lsrs	r4, r3, #1
 8003054:	2307      	movs	r3, #7
 8003056:	0849      	lsrs	r1, r1, #1
 8003058:	430d      	orrs	r5, r1
 800305a:	0017      	movs	r7, r2
 800305c:	402b      	ands	r3, r5
 800305e:	e710      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8003060:	4663      	mov	r3, ip
 8003062:	1a1d      	subs	r5, r3, r0
 8003064:	45ac      	cmp	ip, r5
 8003066:	4192      	sbcs	r2, r2
 8003068:	2601      	movs	r6, #1
 800306a:	9b02      	ldr	r3, [sp, #8]
 800306c:	4252      	negs	r2, r2
 800306e:	1b1c      	subs	r4, r3, r4
 8003070:	4688      	mov	r8, r1
 8003072:	1aa4      	subs	r4, r4, r2
 8003074:	400e      	ands	r6, r1
 8003076:	e5c6      	b.n	8002c06 <__aeabi_dsub+0xce>
 8003078:	4663      	mov	r3, ip
 800307a:	18c5      	adds	r5, r0, r3
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	4285      	cmp	r5, r0
 8003080:	4180      	sbcs	r0, r0
 8003082:	469c      	mov	ip, r3
 8003084:	4240      	negs	r0, r0
 8003086:	4464      	add	r4, ip
 8003088:	1824      	adds	r4, r4, r0
 800308a:	2701      	movs	r7, #1
 800308c:	0223      	lsls	r3, r4, #8
 800308e:	d400      	bmi.n	8003092 <__aeabi_dsub+0x55a>
 8003090:	e6f5      	b.n	8002e7e <__aeabi_dsub+0x346>
 8003092:	2702      	movs	r7, #2
 8003094:	e641      	b.n	8002d1a <__aeabi_dsub+0x1e2>
 8003096:	4663      	mov	r3, ip
 8003098:	1ac5      	subs	r5, r0, r3
 800309a:	42a8      	cmp	r0, r5
 800309c:	4180      	sbcs	r0, r0
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	4240      	negs	r0, r0
 80030a2:	1ae4      	subs	r4, r4, r3
 80030a4:	2701      	movs	r7, #1
 80030a6:	1a24      	subs	r4, r4, r0
 80030a8:	e5a8      	b.n	8002bfc <__aeabi_dsub+0xc4>
 80030aa:	9d02      	ldr	r5, [sp, #8]
 80030ac:	4652      	mov	r2, sl
 80030ae:	002b      	movs	r3, r5
 80030b0:	3a20      	subs	r2, #32
 80030b2:	40d3      	lsrs	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	4653      	mov	r3, sl
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d006      	beq.n	80030ca <__aeabi_dsub+0x592>
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	002b      	movs	r3, r5
 80030c2:	4093      	lsls	r3, r2
 80030c4:	4662      	mov	r2, ip
 80030c6:	431a      	orrs	r2, r3
 80030c8:	4693      	mov	fp, r2
 80030ca:	465d      	mov	r5, fp
 80030cc:	1e6b      	subs	r3, r5, #1
 80030ce:	419d      	sbcs	r5, r3
 80030d0:	430d      	orrs	r5, r1
 80030d2:	e615      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 80030d4:	0762      	lsls	r2, r4, #29
 80030d6:	08c0      	lsrs	r0, r0, #3
 80030d8:	4302      	orrs	r2, r0
 80030da:	08e4      	lsrs	r4, r4, #3
 80030dc:	e70d      	b.n	8002efa <__aeabi_dsub+0x3c2>
 80030de:	0011      	movs	r1, r2
 80030e0:	0027      	movs	r7, r4
 80030e2:	3920      	subs	r1, #32
 80030e4:	40cf      	lsrs	r7, r1
 80030e6:	2a20      	cmp	r2, #32
 80030e8:	d005      	beq.n	80030f6 <__aeabi_dsub+0x5be>
 80030ea:	2140      	movs	r1, #64	@ 0x40
 80030ec:	1a8a      	subs	r2, r1, r2
 80030ee:	4094      	lsls	r4, r2
 80030f0:	0025      	movs	r5, r4
 80030f2:	4305      	orrs	r5, r0
 80030f4:	9503      	str	r5, [sp, #12]
 80030f6:	9d03      	ldr	r5, [sp, #12]
 80030f8:	1e6a      	subs	r2, r5, #1
 80030fa:	4195      	sbcs	r5, r2
 80030fc:	433d      	orrs	r5, r7
 80030fe:	e77d      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 8003100:	2a00      	cmp	r2, #0
 8003102:	d100      	bne.n	8003106 <__aeabi_dsub+0x5ce>
 8003104:	e744      	b.n	8002f90 <__aeabi_dsub+0x458>
 8003106:	2601      	movs	r6, #1
 8003108:	400e      	ands	r6, r1
 800310a:	4663      	mov	r3, ip
 800310c:	08d9      	lsrs	r1, r3, #3
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	075a      	lsls	r2, r3, #29
 8003112:	430a      	orrs	r2, r1
 8003114:	08dc      	lsrs	r4, r3, #3
 8003116:	e6f0      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003118:	2a00      	cmp	r2, #0
 800311a:	d028      	beq.n	800316e <__aeabi_dsub+0x636>
 800311c:	4662      	mov	r2, ip
 800311e:	9f02      	ldr	r7, [sp, #8]
 8003120:	08c0      	lsrs	r0, r0, #3
 8003122:	433a      	orrs	r2, r7
 8003124:	d100      	bne.n	8003128 <__aeabi_dsub+0x5f0>
 8003126:	e6dc      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 8003128:	0762      	lsls	r2, r4, #29
 800312a:	4310      	orrs	r0, r2
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	08e4      	lsrs	r4, r4, #3
 8003130:	0312      	lsls	r2, r2, #12
 8003132:	4214      	tst	r4, r2
 8003134:	d009      	beq.n	800314a <__aeabi_dsub+0x612>
 8003136:	08fd      	lsrs	r5, r7, #3
 8003138:	4215      	tst	r5, r2
 800313a:	d106      	bne.n	800314a <__aeabi_dsub+0x612>
 800313c:	4663      	mov	r3, ip
 800313e:	2601      	movs	r6, #1
 8003140:	002c      	movs	r4, r5
 8003142:	08d8      	lsrs	r0, r3, #3
 8003144:	077b      	lsls	r3, r7, #29
 8003146:	4318      	orrs	r0, r3
 8003148:	400e      	ands	r6, r1
 800314a:	0f42      	lsrs	r2, r0, #29
 800314c:	00c0      	lsls	r0, r0, #3
 800314e:	08c0      	lsrs	r0, r0, #3
 8003150:	0752      	lsls	r2, r2, #29
 8003152:	4302      	orrs	r2, r0
 8003154:	e601      	b.n	8002d5a <__aeabi_dsub+0x222>
 8003156:	4663      	mov	r3, ip
 8003158:	1a1d      	subs	r5, r3, r0
 800315a:	45ac      	cmp	ip, r5
 800315c:	4192      	sbcs	r2, r2
 800315e:	9b02      	ldr	r3, [sp, #8]
 8003160:	4252      	negs	r2, r2
 8003162:	1b1c      	subs	r4, r3, r4
 8003164:	000e      	movs	r6, r1
 8003166:	4688      	mov	r8, r1
 8003168:	2701      	movs	r7, #1
 800316a:	1aa4      	subs	r4, r4, r2
 800316c:	e546      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800316e:	4663      	mov	r3, ip
 8003170:	08d9      	lsrs	r1, r3, #3
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	075a      	lsls	r2, r3, #29
 8003176:	430a      	orrs	r2, r1
 8003178:	08dc      	lsrs	r4, r3, #3
 800317a:	e5ee      	b.n	8002d5a <__aeabi_dsub+0x222>
 800317c:	4663      	mov	r3, ip
 800317e:	9c02      	ldr	r4, [sp, #8]
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	e6c7      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8003184:	08c0      	lsrs	r0, r0, #3
 8003186:	2a00      	cmp	r2, #0
 8003188:	d100      	bne.n	800318c <__aeabi_dsub+0x654>
 800318a:	e6aa      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 800318c:	0762      	lsls	r2, r4, #29
 800318e:	4310      	orrs	r0, r2
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	08e4      	lsrs	r4, r4, #3
 8003194:	0312      	lsls	r2, r2, #12
 8003196:	4214      	tst	r4, r2
 8003198:	d0d7      	beq.n	800314a <__aeabi_dsub+0x612>
 800319a:	9f02      	ldr	r7, [sp, #8]
 800319c:	08fd      	lsrs	r5, r7, #3
 800319e:	4215      	tst	r5, r2
 80031a0:	d1d3      	bne.n	800314a <__aeabi_dsub+0x612>
 80031a2:	4663      	mov	r3, ip
 80031a4:	2601      	movs	r6, #1
 80031a6:	08d8      	lsrs	r0, r3, #3
 80031a8:	077b      	lsls	r3, r7, #29
 80031aa:	002c      	movs	r4, r5
 80031ac:	4318      	orrs	r0, r3
 80031ae:	400e      	ands	r6, r1
 80031b0:	e7cb      	b.n	800314a <__aeabi_dsub+0x612>
 80031b2:	000a      	movs	r2, r1
 80031b4:	0027      	movs	r7, r4
 80031b6:	3a20      	subs	r2, #32
 80031b8:	40d7      	lsrs	r7, r2
 80031ba:	2920      	cmp	r1, #32
 80031bc:	d005      	beq.n	80031ca <__aeabi_dsub+0x692>
 80031be:	2240      	movs	r2, #64	@ 0x40
 80031c0:	1a52      	subs	r2, r2, r1
 80031c2:	4094      	lsls	r4, r2
 80031c4:	0025      	movs	r5, r4
 80031c6:	4305      	orrs	r5, r0
 80031c8:	9503      	str	r5, [sp, #12]
 80031ca:	9d03      	ldr	r5, [sp, #12]
 80031cc:	1e6a      	subs	r2, r5, #1
 80031ce:	4195      	sbcs	r5, r2
 80031d0:	432f      	orrs	r7, r5
 80031d2:	e610      	b.n	8002df6 <__aeabi_dsub+0x2be>
 80031d4:	0014      	movs	r4, r2
 80031d6:	2500      	movs	r5, #0
 80031d8:	2200      	movs	r2, #0
 80031da:	e556      	b.n	8002c8a <__aeabi_dsub+0x152>
 80031dc:	9b02      	ldr	r3, [sp, #8]
 80031de:	4460      	add	r0, ip
 80031e0:	4699      	mov	r9, r3
 80031e2:	4560      	cmp	r0, ip
 80031e4:	4192      	sbcs	r2, r2
 80031e6:	444c      	add	r4, r9
 80031e8:	4252      	negs	r2, r2
 80031ea:	0005      	movs	r5, r0
 80031ec:	18a4      	adds	r4, r4, r2
 80031ee:	e74c      	b.n	800308a <__aeabi_dsub+0x552>
 80031f0:	001a      	movs	r2, r3
 80031f2:	001c      	movs	r4, r3
 80031f4:	432a      	orrs	r2, r5
 80031f6:	d000      	beq.n	80031fa <__aeabi_dsub+0x6c2>
 80031f8:	e6b3      	b.n	8002f62 <__aeabi_dsub+0x42a>
 80031fa:	e6c9      	b.n	8002f90 <__aeabi_dsub+0x458>
 80031fc:	2480      	movs	r4, #128	@ 0x80
 80031fe:	2600      	movs	r6, #0
 8003200:	0324      	lsls	r4, r4, #12
 8003202:	e5ae      	b.n	8002d62 <__aeabi_dsub+0x22a>
 8003204:	2120      	movs	r1, #32
 8003206:	2500      	movs	r5, #0
 8003208:	1a09      	subs	r1, r1, r0
 800320a:	e517      	b.n	8002c3c <__aeabi_dsub+0x104>
 800320c:	2200      	movs	r2, #0
 800320e:	2500      	movs	r5, #0
 8003210:	4c0b      	ldr	r4, [pc, #44]	@ (8003240 <__aeabi_dsub+0x708>)
 8003212:	e53a      	b.n	8002c8a <__aeabi_dsub+0x152>
 8003214:	2d00      	cmp	r5, #0
 8003216:	d100      	bne.n	800321a <__aeabi_dsub+0x6e2>
 8003218:	e5f6      	b.n	8002e08 <__aeabi_dsub+0x2d0>
 800321a:	464b      	mov	r3, r9
 800321c:	1bda      	subs	r2, r3, r7
 800321e:	4692      	mov	sl, r2
 8003220:	2f00      	cmp	r7, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x6ee>
 8003224:	e66f      	b.n	8002f06 <__aeabi_dsub+0x3ce>
 8003226:	2a38      	cmp	r2, #56	@ 0x38
 8003228:	dc05      	bgt.n	8003236 <__aeabi_dsub+0x6fe>
 800322a:	2680      	movs	r6, #128	@ 0x80
 800322c:	0436      	lsls	r6, r6, #16
 800322e:	4334      	orrs	r4, r6
 8003230:	4688      	mov	r8, r1
 8003232:	000e      	movs	r6, r1
 8003234:	e6d1      	b.n	8002fda <__aeabi_dsub+0x4a2>
 8003236:	4688      	mov	r8, r1
 8003238:	000e      	movs	r6, r1
 800323a:	2501      	movs	r5, #1
 800323c:	e6de      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	000007ff 	.word	0x000007ff
 8003244:	ff7fffff 	.word	0xff7fffff
 8003248:	000007fe 	.word	0x000007fe
 800324c:	2d00      	cmp	r5, #0
 800324e:	d100      	bne.n	8003252 <__aeabi_dsub+0x71a>
 8003250:	e668      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8003252:	464b      	mov	r3, r9
 8003254:	1bd9      	subs	r1, r3, r7
 8003256:	2f00      	cmp	r7, #0
 8003258:	d101      	bne.n	800325e <__aeabi_dsub+0x726>
 800325a:	468a      	mov	sl, r1
 800325c:	e5a7      	b.n	8002dae <__aeabi_dsub+0x276>
 800325e:	2701      	movs	r7, #1
 8003260:	2938      	cmp	r1, #56	@ 0x38
 8003262:	dd00      	ble.n	8003266 <__aeabi_dsub+0x72e>
 8003264:	e5c7      	b.n	8002df6 <__aeabi_dsub+0x2be>
 8003266:	2280      	movs	r2, #128	@ 0x80
 8003268:	0412      	lsls	r2, r2, #16
 800326a:	4314      	orrs	r4, r2
 800326c:	e5af      	b.n	8002dce <__aeabi_dsub+0x296>
 800326e:	46c0      	nop			@ (mov r8, r8)

08003270 <__aeabi_dcmpun>:
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	46c6      	mov	lr, r8
 8003274:	031e      	lsls	r6, r3, #12
 8003276:	0b36      	lsrs	r6, r6, #12
 8003278:	46b0      	mov	r8, r6
 800327a:	4e0d      	ldr	r6, [pc, #52]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 800327c:	030c      	lsls	r4, r1, #12
 800327e:	004d      	lsls	r5, r1, #1
 8003280:	005f      	lsls	r7, r3, #1
 8003282:	b500      	push	{lr}
 8003284:	0b24      	lsrs	r4, r4, #12
 8003286:	0d6d      	lsrs	r5, r5, #21
 8003288:	0d7f      	lsrs	r7, r7, #21
 800328a:	42b5      	cmp	r5, r6
 800328c:	d00b      	beq.n	80032a6 <__aeabi_dcmpun+0x36>
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 8003290:	2000      	movs	r0, #0
 8003292:	428f      	cmp	r7, r1
 8003294:	d104      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 8003296:	4646      	mov	r6, r8
 8003298:	4316      	orrs	r6, r2
 800329a:	0030      	movs	r0, r6
 800329c:	1e43      	subs	r3, r0, #1
 800329e:	4198      	sbcs	r0, r3
 80032a0:	bc80      	pop	{r7}
 80032a2:	46b8      	mov	r8, r7
 80032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a6:	4304      	orrs	r4, r0
 80032a8:	2001      	movs	r0, #1
 80032aa:	2c00      	cmp	r4, #0
 80032ac:	d1f8      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 80032ae:	e7ee      	b.n	800328e <__aeabi_dcmpun+0x1e>
 80032b0:	000007ff 	.word	0x000007ff

080032b4 <__aeabi_d2iz>:
 80032b4:	000b      	movs	r3, r1
 80032b6:	0002      	movs	r2, r0
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d16      	ldr	r5, [pc, #88]	@ (8003314 <__aeabi_d2iz+0x60>)
 80032bc:	030c      	lsls	r4, r1, #12
 80032be:	b082      	sub	sp, #8
 80032c0:	0049      	lsls	r1, r1, #1
 80032c2:	2000      	movs	r0, #0
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	0b24      	lsrs	r4, r4, #12
 80032ca:	0d49      	lsrs	r1, r1, #21
 80032cc:	0fde      	lsrs	r6, r3, #31
 80032ce:	42a9      	cmp	r1, r5
 80032d0:	dd04      	ble.n	80032dc <__aeabi_d2iz+0x28>
 80032d2:	4811      	ldr	r0, [pc, #68]	@ (8003318 <__aeabi_d2iz+0x64>)
 80032d4:	4281      	cmp	r1, r0
 80032d6:	dd03      	ble.n	80032e0 <__aeabi_d2iz+0x2c>
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <__aeabi_d2iz+0x68>)
 80032da:	18f0      	adds	r0, r6, r3
 80032dc:	b002      	add	sp, #8
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	2080      	movs	r0, #128	@ 0x80
 80032e2:	0340      	lsls	r0, r0, #13
 80032e4:	4320      	orrs	r0, r4
 80032e6:	4c0e      	ldr	r4, [pc, #56]	@ (8003320 <__aeabi_d2iz+0x6c>)
 80032e8:	1a64      	subs	r4, r4, r1
 80032ea:	2c1f      	cmp	r4, #31
 80032ec:	dd08      	ble.n	8003300 <__aeabi_d2iz+0x4c>
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <__aeabi_d2iz+0x70>)
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	40d8      	lsrs	r0, r3
 80032f4:	0003      	movs	r3, r0
 80032f6:	4258      	negs	r0, r3
 80032f8:	2e00      	cmp	r6, #0
 80032fa:	d1ef      	bne.n	80032dc <__aeabi_d2iz+0x28>
 80032fc:	0018      	movs	r0, r3
 80032fe:	e7ed      	b.n	80032dc <__aeabi_d2iz+0x28>
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <__aeabi_d2iz+0x74>)
 8003302:	9a00      	ldr	r2, [sp, #0]
 8003304:	469c      	mov	ip, r3
 8003306:	0003      	movs	r3, r0
 8003308:	4461      	add	r1, ip
 800330a:	408b      	lsls	r3, r1
 800330c:	40e2      	lsrs	r2, r4
 800330e:	4313      	orrs	r3, r2
 8003310:	e7f1      	b.n	80032f6 <__aeabi_d2iz+0x42>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	000003fe 	.word	0x000003fe
 8003318:	0000041d 	.word	0x0000041d
 800331c:	7fffffff 	.word	0x7fffffff
 8003320:	00000433 	.word	0x00000433
 8003324:	00000413 	.word	0x00000413
 8003328:	fffffbed 	.word	0xfffffbed

0800332c <__aeabi_i2d>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2800      	cmp	r0, #0
 8003330:	d016      	beq.n	8003360 <__aeabi_i2d+0x34>
 8003332:	17c3      	asrs	r3, r0, #31
 8003334:	18c5      	adds	r5, r0, r3
 8003336:	405d      	eors	r5, r3
 8003338:	0fc4      	lsrs	r4, r0, #31
 800333a:	0028      	movs	r0, r5
 800333c:	f000 f914 	bl	8003568 <__clzsi2>
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <__aeabi_i2d+0x58>)
 8003342:	1a1b      	subs	r3, r3, r0
 8003344:	055b      	lsls	r3, r3, #21
 8003346:	0d5b      	lsrs	r3, r3, #21
 8003348:	280a      	cmp	r0, #10
 800334a:	dc14      	bgt.n	8003376 <__aeabi_i2d+0x4a>
 800334c:	0002      	movs	r2, r0
 800334e:	002e      	movs	r6, r5
 8003350:	3215      	adds	r2, #21
 8003352:	4096      	lsls	r6, r2
 8003354:	220b      	movs	r2, #11
 8003356:	1a12      	subs	r2, r2, r0
 8003358:	40d5      	lsrs	r5, r2
 800335a:	032d      	lsls	r5, r5, #12
 800335c:	0b2d      	lsrs	r5, r5, #12
 800335e:	e003      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003360:	2400      	movs	r4, #0
 8003362:	2300      	movs	r3, #0
 8003364:	2500      	movs	r5, #0
 8003366:	2600      	movs	r6, #0
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	432b      	orrs	r3, r5
 800336c:	07e4      	lsls	r4, r4, #31
 800336e:	4323      	orrs	r3, r4
 8003370:	0030      	movs	r0, r6
 8003372:	0019      	movs	r1, r3
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	380b      	subs	r0, #11
 8003378:	4085      	lsls	r5, r0
 800337a:	032d      	lsls	r5, r5, #12
 800337c:	2600      	movs	r6, #0
 800337e:	0b2d      	lsrs	r5, r5, #12
 8003380:	e7f2      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	0000041e 	.word	0x0000041e

08003388 <__aeabi_ui2d>:
 8003388:	b510      	push	{r4, lr}
 800338a:	1e04      	subs	r4, r0, #0
 800338c:	d010      	beq.n	80033b0 <__aeabi_ui2d+0x28>
 800338e:	f000 f8eb 	bl	8003568 <__clzsi2>
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <__aeabi_ui2d+0x44>)
 8003394:	1a1b      	subs	r3, r3, r0
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	0d5b      	lsrs	r3, r3, #21
 800339a:	280a      	cmp	r0, #10
 800339c:	dc0f      	bgt.n	80033be <__aeabi_ui2d+0x36>
 800339e:	220b      	movs	r2, #11
 80033a0:	0021      	movs	r1, r4
 80033a2:	1a12      	subs	r2, r2, r0
 80033a4:	40d1      	lsrs	r1, r2
 80033a6:	3015      	adds	r0, #21
 80033a8:	030a      	lsls	r2, r1, #12
 80033aa:	4084      	lsls	r4, r0
 80033ac:	0b12      	lsrs	r2, r2, #12
 80033ae:	e001      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2200      	movs	r2, #0
 80033b4:	051b      	lsls	r3, r3, #20
 80033b6:	4313      	orrs	r3, r2
 80033b8:	0020      	movs	r0, r4
 80033ba:	0019      	movs	r1, r3
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	0022      	movs	r2, r4
 80033c0:	380b      	subs	r0, #11
 80033c2:	4082      	lsls	r2, r0
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	2400      	movs	r4, #0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e7f3      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033cc:	0000041e 	.word	0x0000041e

080033d0 <__aeabi_f2d>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	0242      	lsls	r2, r0, #9
 80033d4:	0043      	lsls	r3, r0, #1
 80033d6:	0fc4      	lsrs	r4, r0, #31
 80033d8:	20fe      	movs	r0, #254	@ 0xfe
 80033da:	0e1b      	lsrs	r3, r3, #24
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	0a55      	lsrs	r5, r2, #9
 80033e0:	4208      	tst	r0, r1
 80033e2:	d00c      	beq.n	80033fe <__aeabi_f2d+0x2e>
 80033e4:	21e0      	movs	r1, #224	@ 0xe0
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	468c      	mov	ip, r1
 80033ea:	076d      	lsls	r5, r5, #29
 80033ec:	0b12      	lsrs	r2, r2, #12
 80033ee:	4463      	add	r3, ip
 80033f0:	051b      	lsls	r3, r3, #20
 80033f2:	4313      	orrs	r3, r2
 80033f4:	07e4      	lsls	r4, r4, #31
 80033f6:	4323      	orrs	r3, r4
 80033f8:	0028      	movs	r0, r5
 80033fa:	0019      	movs	r1, r3
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <__aeabi_f2d+0x5c>
 8003402:	2d00      	cmp	r5, #0
 8003404:	d01b      	beq.n	800343e <__aeabi_f2d+0x6e>
 8003406:	0028      	movs	r0, r5
 8003408:	f000 f8ae 	bl	8003568 <__clzsi2>
 800340c:	280a      	cmp	r0, #10
 800340e:	dc1c      	bgt.n	800344a <__aeabi_f2d+0x7a>
 8003410:	230b      	movs	r3, #11
 8003412:	002a      	movs	r2, r5
 8003414:	1a1b      	subs	r3, r3, r0
 8003416:	40da      	lsrs	r2, r3
 8003418:	0003      	movs	r3, r0
 800341a:	3315      	adds	r3, #21
 800341c:	409d      	lsls	r5, r3
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <__aeabi_f2d+0x88>)
 8003420:	0312      	lsls	r2, r2, #12
 8003422:	1a1b      	subs	r3, r3, r0
 8003424:	055b      	lsls	r3, r3, #21
 8003426:	0b12      	lsrs	r2, r2, #12
 8003428:	0d5b      	lsrs	r3, r3, #21
 800342a:	e7e1      	b.n	80033f0 <__aeabi_f2d+0x20>
 800342c:	2d00      	cmp	r5, #0
 800342e:	d009      	beq.n	8003444 <__aeabi_f2d+0x74>
 8003430:	0b13      	lsrs	r3, r2, #12
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	431a      	orrs	r2, r3
 8003438:	076d      	lsls	r5, r5, #29
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <__aeabi_f2d+0x8c>)
 800343c:	e7d8      	b.n	80033f0 <__aeabi_f2d+0x20>
 800343e:	2300      	movs	r3, #0
 8003440:	2200      	movs	r2, #0
 8003442:	e7d5      	b.n	80033f0 <__aeabi_f2d+0x20>
 8003444:	2200      	movs	r2, #0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <__aeabi_f2d+0x8c>)
 8003448:	e7d2      	b.n	80033f0 <__aeabi_f2d+0x20>
 800344a:	0003      	movs	r3, r0
 800344c:	002a      	movs	r2, r5
 800344e:	3b0b      	subs	r3, #11
 8003450:	409a      	lsls	r2, r3
 8003452:	2500      	movs	r5, #0
 8003454:	e7e3      	b.n	800341e <__aeabi_f2d+0x4e>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	00000389 	.word	0x00000389
 800345c:	000007ff 	.word	0x000007ff

08003460 <__aeabi_d2f>:
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	004b      	lsls	r3, r1, #1
 8003464:	030f      	lsls	r7, r1, #12
 8003466:	0d5b      	lsrs	r3, r3, #21
 8003468:	4c3b      	ldr	r4, [pc, #236]	@ (8003558 <__aeabi_d2f+0xf8>)
 800346a:	0f45      	lsrs	r5, r0, #29
 800346c:	b083      	sub	sp, #12
 800346e:	0a7f      	lsrs	r7, r7, #9
 8003470:	1c5e      	adds	r6, r3, #1
 8003472:	432f      	orrs	r7, r5
 8003474:	9000      	str	r0, [sp, #0]
 8003476:	9101      	str	r1, [sp, #4]
 8003478:	0fca      	lsrs	r2, r1, #31
 800347a:	00c5      	lsls	r5, r0, #3
 800347c:	4226      	tst	r6, r4
 800347e:	d00b      	beq.n	8003498 <__aeabi_d2f+0x38>
 8003480:	4936      	ldr	r1, [pc, #216]	@ (800355c <__aeabi_d2f+0xfc>)
 8003482:	185c      	adds	r4, r3, r1
 8003484:	2cfe      	cmp	r4, #254	@ 0xfe
 8003486:	dd13      	ble.n	80034b0 <__aeabi_d2f+0x50>
 8003488:	20ff      	movs	r0, #255	@ 0xff
 800348a:	2300      	movs	r3, #0
 800348c:	05c0      	lsls	r0, r0, #23
 800348e:	4318      	orrs	r0, r3
 8003490:	07d2      	lsls	r2, r2, #31
 8003492:	4310      	orrs	r0, r2
 8003494:	b003      	add	sp, #12
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <__aeabi_d2f+0x42>
 800349c:	2000      	movs	r0, #0
 800349e:	2300      	movs	r3, #0
 80034a0:	e7f4      	b.n	800348c <__aeabi_d2f+0x2c>
 80034a2:	433d      	orrs	r5, r7
 80034a4:	d0f0      	beq.n	8003488 <__aeabi_d2f+0x28>
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	03db      	lsls	r3, r3, #15
 80034aa:	20ff      	movs	r0, #255	@ 0xff
 80034ac:	433b      	orrs	r3, r7
 80034ae:	e7ed      	b.n	800348c <__aeabi_d2f+0x2c>
 80034b0:	2c00      	cmp	r4, #0
 80034b2:	dd14      	ble.n	80034de <__aeabi_d2f+0x7e>
 80034b4:	9b00      	ldr	r3, [sp, #0]
 80034b6:	00ff      	lsls	r7, r7, #3
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	4183      	sbcs	r3, r0
 80034be:	0f69      	lsrs	r1, r5, #29
 80034c0:	433b      	orrs	r3, r7
 80034c2:	430b      	orrs	r3, r1
 80034c4:	0759      	lsls	r1, r3, #29
 80034c6:	d041      	beq.n	800354c <__aeabi_d2f+0xec>
 80034c8:	210f      	movs	r1, #15
 80034ca:	4019      	ands	r1, r3
 80034cc:	2904      	cmp	r1, #4
 80034ce:	d028      	beq.n	8003522 <__aeabi_d2f+0xc2>
 80034d0:	3304      	adds	r3, #4
 80034d2:	0159      	lsls	r1, r3, #5
 80034d4:	d525      	bpl.n	8003522 <__aeabi_d2f+0xc2>
 80034d6:	3401      	adds	r4, #1
 80034d8:	2300      	movs	r3, #0
 80034da:	b2e0      	uxtb	r0, r4
 80034dc:	e7d6      	b.n	800348c <__aeabi_d2f+0x2c>
 80034de:	0021      	movs	r1, r4
 80034e0:	3117      	adds	r1, #23
 80034e2:	dbdb      	blt.n	800349c <__aeabi_d2f+0x3c>
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	201e      	movs	r0, #30
 80034e8:	0409      	lsls	r1, r1, #16
 80034ea:	4339      	orrs	r1, r7
 80034ec:	1b00      	subs	r0, r0, r4
 80034ee:	281f      	cmp	r0, #31
 80034f0:	dd1b      	ble.n	800352a <__aeabi_d2f+0xca>
 80034f2:	2602      	movs	r6, #2
 80034f4:	4276      	negs	r6, r6
 80034f6:	1b34      	subs	r4, r6, r4
 80034f8:	000e      	movs	r6, r1
 80034fa:	40e6      	lsrs	r6, r4
 80034fc:	0034      	movs	r4, r6
 80034fe:	2820      	cmp	r0, #32
 8003500:	d004      	beq.n	800350c <__aeabi_d2f+0xac>
 8003502:	4817      	ldr	r0, [pc, #92]	@ (8003560 <__aeabi_d2f+0x100>)
 8003504:	4684      	mov	ip, r0
 8003506:	4463      	add	r3, ip
 8003508:	4099      	lsls	r1, r3
 800350a:	430d      	orrs	r5, r1
 800350c:	002b      	movs	r3, r5
 800350e:	1e59      	subs	r1, r3, #1
 8003510:	418b      	sbcs	r3, r1
 8003512:	4323      	orrs	r3, r4
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d015      	beq.n	8003544 <__aeabi_d2f+0xe4>
 8003518:	210f      	movs	r1, #15
 800351a:	2400      	movs	r4, #0
 800351c:	4019      	ands	r1, r3
 800351e:	2904      	cmp	r1, #4
 8003520:	d117      	bne.n	8003552 <__aeabi_d2f+0xf2>
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	b2e0      	uxtb	r0, r4
 8003528:	e7b0      	b.n	800348c <__aeabi_d2f+0x2c>
 800352a:	4c0e      	ldr	r4, [pc, #56]	@ (8003564 <__aeabi_d2f+0x104>)
 800352c:	191c      	adds	r4, r3, r4
 800352e:	002b      	movs	r3, r5
 8003530:	40a5      	lsls	r5, r4
 8003532:	40c3      	lsrs	r3, r0
 8003534:	40a1      	lsls	r1, r4
 8003536:	1e68      	subs	r0, r5, #1
 8003538:	4185      	sbcs	r5, r0
 800353a:	4329      	orrs	r1, r5
 800353c:	430b      	orrs	r3, r1
 800353e:	2400      	movs	r4, #0
 8003540:	0759      	lsls	r1, r3, #29
 8003542:	d1c1      	bne.n	80034c8 <__aeabi_d2f+0x68>
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	2000      	movs	r0, #0
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	e79f      	b.n	800348c <__aeabi_d2f+0x2c>
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2e0      	uxtb	r0, r4
 8003550:	e79c      	b.n	800348c <__aeabi_d2f+0x2c>
 8003552:	3304      	adds	r3, #4
 8003554:	e7e5      	b.n	8003522 <__aeabi_d2f+0xc2>
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	000007fe 	.word	0x000007fe
 800355c:	fffffc80 	.word	0xfffffc80
 8003560:	fffffca2 	.word	0xfffffca2
 8003564:	fffffc82 	.word	0xfffffc82

08003568 <__clzsi2>:
 8003568:	211c      	movs	r1, #28
 800356a:	2301      	movs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4298      	cmp	r0, r3
 8003570:	d301      	bcc.n	8003576 <__clzsi2+0xe>
 8003572:	0c00      	lsrs	r0, r0, #16
 8003574:	3910      	subs	r1, #16
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	4298      	cmp	r0, r3
 800357a:	d301      	bcc.n	8003580 <__clzsi2+0x18>
 800357c:	0a00      	lsrs	r0, r0, #8
 800357e:	3908      	subs	r1, #8
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0x22>
 8003586:	0900      	lsrs	r0, r0, #4
 8003588:	3904      	subs	r1, #4
 800358a:	a202      	add	r2, pc, #8	@ (adr r2, 8003594 <__clzsi2+0x2c>)
 800358c:	5c10      	ldrb	r0, [r2, r0]
 800358e:	1840      	adds	r0, r0, r1
 8003590:	4770      	bx	lr
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	02020304 	.word	0x02020304
 8003598:	01010101 	.word	0x01010101
	...

080035a4 <__clzdi2>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d103      	bne.n	80035b2 <__clzdi2+0xe>
 80035aa:	f7ff ffdd 	bl	8003568 <__clzsi2>
 80035ae:	3020      	adds	r0, #32
 80035b0:	e002      	b.n	80035b8 <__clzdi2+0x14>
 80035b2:	0008      	movs	r0, r1
 80035b4:	f7ff ffd8 	bl	8003568 <__clzsi2>
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)

080035bc <MAX30102_Init>:
 * @brief  Initializes the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    // Reset the MAX30102
    MAX30102_Reset(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f864 	bl	8003694 <MAX30102_Reset>

    // Wait for the reset to complete
    HAL_Delay(100);
 80035cc:	2064      	movs	r0, #100	@ 0x64
 80035ce:	f001 fbbd 	bl	8004d4c <HAL_Delay>
    MAX30102_ReadRegister(hi2c, MAX30102_REG_INTR_STATUS_1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2100      	movs	r1, #0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f8e6 	bl	80037a8 <MAX30102_ReadRegister>
     MAX30102_ReadRegister(hi2c, MAX30102_REG_INTR_STATUS_2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2101      	movs	r1, #1
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 f8e1 	bl	80037a8 <MAX30102_ReadRegister>

    // Set the mode to SpO2 mode
    MAX30102_SetMode(hi2c, MAX30102_MODE_SPO2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2103      	movs	r1, #3
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f860 	bl	80036b0 <MAX30102_SetMode>

    // Configure SpO2 sensor parameters
    MAX30102_SetSpO2Config(hi2c, MAX30102_SPO2_PW_411, MAX30102_SPO2_ADC_RGE_2048, MAX30102_SPO2_SR_400);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	2303      	movs	r3, #3
 80035f4:	2200      	movs	r2, #0
 80035f6:	2103      	movs	r1, #3
 80035f8:	f000 f86c 	bl	80036d4 <MAX30102_SetSpO2Config>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_INTR_ENABLE_2, MAX30102_REG_INTR_ENABLE_2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	2103      	movs	r1, #3
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f8b1 	bl	800376a <MAX30102_WriteRegister>




    // Set the LED pulse amplitudes (adjust according to your requirements)
    MAX30102_SetLedPulseAmplitude(hi2c, MAX30100_LED_CURRENT_11MA , MAX30100_LED_CURRENT_11MA );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2203      	movs	r2, #3
 800360c:	2103      	movs	r1, #3
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f88d 	bl	800372e <MAX30102_SetLedPulseAmplitude>


    // Additional sensor configurations can go here
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <MAX30102_ReadFifo>:
 * @param  hi2c: I2C handle
 * @param  data: pointer to MAX30102_Data structure to store the results
 * @retval None
 */
void MAX30102_ReadFifo(I2C_HandleTypeDef *hi2c, MAX30102_Data *data)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af04      	add	r7, sp, #16
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
    uint8_t fifoData[6];

    // Read 6 bytes from the FIFO_DATA register
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, MAX30102_REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, fifoData, 6, HAL_MAX_DELAY);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	2301      	movs	r3, #1
 800362a:	425b      	negs	r3, r3
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	2306      	movs	r3, #6
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2408      	movs	r4, #8
 8003634:	193b      	adds	r3, r7, r4
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	2207      	movs	r2, #7
 800363c:	21ae      	movs	r1, #174	@ 0xae
 800363e:	f002 f803 	bl	8005648 <HAL_I2C_Mem_Read>

    // Combine the bytes to form 16-bit values for Red and IR data
    data->red = (fifoData[0] << 16) | (fifoData[1] << 8) | fifoData[2];
 8003642:	0021      	movs	r1, r4
 8003644:	187b      	adds	r3, r7, r1
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	b21a      	sxth	r2, r3
 800364c:	187b      	adds	r3, r7, r1
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b21b      	sxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b21a      	sxth	r2, r3
 8003658:	187b      	adds	r3, r7, r1
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	b21b      	sxth	r3, r3
 800365e:	4313      	orrs	r3, r2
 8003660:	b21b      	sxth	r3, r3
 8003662:	b29a      	uxth	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	801a      	strh	r2, [r3, #0]
    data->ir = (fifoData[3] << 16) | (fifoData[4] << 8) | fifoData[5];
 8003668:	187b      	adds	r3, r7, r1
 800366a:	78db      	ldrb	r3, [r3, #3]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	b21a      	sxth	r2, r3
 8003670:	187b      	adds	r3, r7, r1
 8003672:	791b      	ldrb	r3, [r3, #4]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21a      	sxth	r2, r3
 800367c:	187b      	adds	r3, r7, r1
 800367e:	795b      	ldrb	r3, [r3, #5]
 8003680:	b21b      	sxth	r3, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	b21b      	sxth	r3, r3
 8003686:	b29a      	uxth	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	805a      	strh	r2, [r3, #2]
}
 800368c:	46c0      	nop			@ (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b005      	add	sp, #20
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <MAX30102_Reset>:
 * @brief  Resets the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Reset(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    // Write 0x40 to the MODE_CONFIG register to reset the device
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, 0x40);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	2109      	movs	r1, #9
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f861 	bl	800376a <MAX30102_WriteRegister>
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <MAX30102_SetMode>:
 * @param  hi2c: I2C handle
 * @param  mode: Desired mode (e.g., MAX30102_MODE_SPO2, MAX30102_MODE_HR_ONLY)
 * @retval None
 */
void MAX30102_SetMode(I2C_HandleTypeDef *hi2c, uint8_t mode)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	000a      	movs	r2, r1
 80036ba:	1cfb      	adds	r3, r7, #3
 80036bc:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, mode);
 80036be:	1cfb      	adds	r3, r7, #3
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2109      	movs	r1, #9
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f84f 	bl	800376a <MAX30102_WriteRegister>
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <MAX30102_SetSpO2Config>:
 * @param  adc_rge: ADC range (e.g., MAX30102_SPO2_ADC_RGE_4096)
 * @param  sr: Sample rate (e.g., MAX30102_SPO2_SR_100)
 * @retval None
 */
void MAX30102_SetSpO2Config(I2C_HandleTypeDef *hi2c, uint8_t led_pw, uint8_t adc_rge, uint8_t sr)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	000c      	movs	r4, r1
 80036de:	0010      	movs	r0, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	1c22      	adds	r2, r4, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	1cbb      	adds	r3, r7, #2
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	1c7b      	adds	r3, r7, #1
 80036f0:	1c0a      	adds	r2, r1, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    uint8_t config = (adc_rge << 5) | (sr << 2) | led_pw;
 80036f4:	1cbb      	adds	r3, r7, #2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	b25a      	sxtb	r2, r3
 80036fc:	1c7b      	adds	r3, r7, #1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	b25b      	sxtb	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	b25a      	sxtb	r2, r3
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b25a      	sxtb	r2, r3
 8003712:	210f      	movs	r1, #15
 8003714:	187b      	adds	r3, r7, r1
 8003716:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_SPO2_CONFIG, config);
 8003718:	187b      	adds	r3, r7, r1
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	210a      	movs	r1, #10
 8003720:	0018      	movs	r0, r3
 8003722:	f000 f822 	bl	800376a <MAX30102_WriteRegister>
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b005      	add	sp, #20
 800372c:	bd90      	pop	{r4, r7, pc}

0800372e <MAX30102_SetLedPulseAmplitude>:
 * @param  led1_pa: Pulse amplitude for LED1 (Red)
 * @param  led2_pa: Pulse amplitude for LED2 (IR)
 * @retval None
 */
void MAX30102_SetLedPulseAmplitude(I2C_HandleTypeDef *hi2c, uint8_t led1_pa, uint8_t led2_pa)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	0008      	movs	r0, r1
 8003738:	0011      	movs	r1, r2
 800373a:	1cfb      	adds	r3, r7, #3
 800373c:	1c02      	adds	r2, r0, #0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	1c0a      	adds	r2, r1, #0
 8003744:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED1_PA, led1_pa);
 8003746:	1cfb      	adds	r3, r7, #3
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	210c      	movs	r1, #12
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f80b 	bl	800376a <MAX30102_WriteRegister>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED2_PA, led2_pa);
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	210d      	movs	r1, #13
 800375c:	0018      	movs	r0, r3
 800375e:	f000 f804 	bl	800376a <MAX30102_WriteRegister>
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <MAX30102_WriteRegister>:
 * @param  reg: Register address
 * @param  value: Value to write
 * @retval None
 */
void MAX30102_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af04      	add	r7, sp, #16
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	0008      	movs	r0, r1
 8003774:	0011      	movs	r1, r2
 8003776:	1cfb      	adds	r3, r7, #3
 8003778:	1c02      	adds	r2, r0, #0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	1cbb      	adds	r3, r7, #2
 800377e:	1c0a      	adds	r2, r1, #0
 8003780:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8003782:	1cfb      	adds	r3, r7, #3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b29a      	uxth	r2, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	2301      	movs	r3, #1
 800378c:	425b      	negs	r3, r3
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2301      	movs	r3, #1
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	1cbb      	adds	r3, r7, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	21ae      	movs	r1, #174	@ 0xae
 800379c:	f001 fe26 	bl	80053ec <HAL_I2C_Mem_Write>
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <MAX30102_ReadRegister>:
 * @param  hi2c: I2C handle
 * @param  reg: Register address
 * @retval Register value
 */
uint8_t MAX30102_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b089      	sub	sp, #36	@ 0x24
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	000a      	movs	r2, r1
 80037b2:	1cfb      	adds	r3, r7, #3
 80037b4:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 80037b6:	210f      	movs	r1, #15
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80037be:	1cfb      	adds	r3, r7, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	2301      	movs	r3, #1
 80037c8:	425b      	negs	r3, r3
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	2301      	movs	r3, #1
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	000c      	movs	r4, r1
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	21ae      	movs	r1, #174	@ 0xae
 80037da:	f001 ff35 	bl	8005648 <HAL_I2C_Mem_Read>
    return value;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b005      	add	sp, #20
 80037e8:	bd90      	pop	{r4, r7, pc}
	...

080037ec <MAX30102_ReadTemperature>:
    }
    return spo2;
}

float MAX30102_ReadTemperature(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    // Enable temperature conversion
    MAX30102_WriteRegister(hi2c, MAX30102_REG_TEMP_CONFIG, 0x01);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	2121      	movs	r1, #33	@ 0x21
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff ffb5 	bl	800376a <MAX30102_WriteRegister>

    // Wait for the temperature conversion to complete
    HAL_Delay(30);
 8003800:	201e      	movs	r0, #30
 8003802:	f001 faa3 	bl	8004d4c <HAL_Delay>

    // Read the integer part of the temperature
    uint8_t temp_int = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_INT);
 8003806:	250f      	movs	r5, #15
 8003808:	197c      	adds	r4, r7, r5
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	211f      	movs	r1, #31
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff ffca 	bl	80037a8 <MAX30102_ReadRegister>
 8003814:	0003      	movs	r3, r0
 8003816:	7023      	strb	r3, [r4, #0]

    // Read the fractional part of the temperature
    uint8_t temp_frac = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_FRAC);
 8003818:	260e      	movs	r6, #14
 800381a:	19bc      	adds	r4, r7, r6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2120      	movs	r1, #32
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ffc1 	bl	80037a8 <MAX30102_ReadRegister>
 8003826:	0003      	movs	r3, r0
 8003828:	7023      	strb	r3, [r4, #0]

    // Combine the integer and fractional parts
    float temperature = temp_int + (temp_frac * 0.0625);
 800382a:	197b      	adds	r3, r7, r5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fd7c 	bl	800332c <__aeabi_i2d>
 8003834:	0004      	movs	r4, r0
 8003836:	000d      	movs	r5, r1
 8003838:	19bb      	adds	r3, r7, r6
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fd75 	bl	800332c <__aeabi_i2d>
 8003842:	2200      	movs	r2, #0
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <MAX30102_ReadTemperature+0x84>)
 8003846:	f7fe feaf 	bl	80025a8 <__aeabi_dmul>
 800384a:	0002      	movs	r2, r0
 800384c:	000b      	movs	r3, r1
 800384e:	0020      	movs	r0, r4
 8003850:	0029      	movs	r1, r5
 8003852:	f7fd ff01 	bl	8001658 <__aeabi_dadd>
 8003856:	0002      	movs	r2, r0
 8003858:	000b      	movs	r3, r1
 800385a:	0010      	movs	r0, r2
 800385c:	0019      	movs	r1, r3
 800385e:	f7ff fdff 	bl	8003460 <__aeabi_d2f>
 8003862:	1c03      	adds	r3, r0, #0
 8003864:	60bb      	str	r3, [r7, #8]

    return temperature;
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	1c18      	adds	r0, r3, #0
 800386a:	46bd      	mov	sp, r7
 800386c:	b005      	add	sp, #20
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003870:	3fb00000 	.word	0x3fb00000

08003874 <MinMaxAvgStatistic_Init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

/* Initialize the Statistic block */
void MinMaxAvgStatistic_Init(MinMaxAvgStatistic* stat) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a07      	ldr	r2, [pc, #28]	@ (800389c <MinMaxAvgStatistic_Init+0x28>)
 8003880:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a05      	ldr	r2, [pc, #20]	@ (800389c <MinMaxAvgStatistic_Init+0x28>)
 8003886:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	7fc00000 	.word	0x7fc00000

080038a0 <MinMaxAvgStatistic_Process>:

/* Add value to the statistic */
void MinMaxAvgStatistic_Process(MinMaxAvgStatistic* stat, float value) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    stat->min = isnan(stat->min) ? value : fminf(stat->min, value);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1c19      	adds	r1, r3, #0
 80038b0:	1c18      	adds	r0, r3, #0
 80038b2:	f7fd fe0d 	bl	80014d0 <__aeabi_fcmpun>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d108      	bne.n	80038cc <MinMaxAvgStatistic_Process+0x2c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	1c11      	adds	r1, r2, #0
 80038c2:	1c18      	adds	r0, r3, #0
 80038c4:	f00c fd3f 	bl	8010346 <fminf>
 80038c8:	1c02      	adds	r2, r0, #0
 80038ca:	e000      	b.n	80038ce <MinMaxAvgStatistic_Process+0x2e>
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
    stat->max = isnan(stat->max) ? value : fmaxf(stat->max, value);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	1c19      	adds	r1, r3, #0
 80038d8:	1c18      	adds	r0, r3, #0
 80038da:	f7fd fdf9 	bl	80014d0 <__aeabi_fcmpun>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d108      	bne.n	80038f4 <MinMaxAvgStatistic_Process+0x54>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	1c11      	adds	r1, r2, #0
 80038ea:	1c18      	adds	r0, r3, #0
 80038ec:	f00c fd15 	bl	801031a <fmaxf>
 80038f0:	1c02      	adds	r2, r0, #0
 80038f2:	e000      	b.n	80038f6 <MinMaxAvgStatistic_Process+0x56>
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	605a      	str	r2, [r3, #4]
    stat->sum += value;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	1c18      	adds	r0, r3, #0
 8003902:	f7fc ff93 	bl	800082c <__aeabi_fadd>
 8003906:	1c03      	adds	r3, r0, #0
 8003908:	1c1a      	adds	r2, r3, #0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
    stat->count++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <MinMaxAvgStatistic_Reset>:

/* Reset the statistic block */
void MinMaxAvgStatistic_Reset(MinMaxAvgStatistic* stat) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	@ (8003948 <MinMaxAvgStatistic_Reset+0x28>)
 800392c:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <MinMaxAvgStatistic_Reset+0x28>)
 8003932:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	7fc00000 	.word	0x7fc00000

0800394c <MinMaxAvgStatistic_Minimum>:

/* Get the minimum value */
float MinMaxAvgStatistic_Minimum(const MinMaxAvgStatistic* stat) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    return stat->min;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	1c18      	adds	r0, r3, #0
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <MinMaxAvgStatistic_Maximum>:

/* Get the maximum value */
float MinMaxAvgStatistic_Maximum(const MinMaxAvgStatistic* stat) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
    return stat->max;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
}
 800396c:	1c18      	adds	r0, r3, #0
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <MinMaxAvgStatistic_Average>:

/* Get the average value */
float MinMaxAvgStatistic_Average(const MinMaxAvgStatistic* stat) {
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    return stat->sum / stat->count;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689c      	ldr	r4, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0018      	movs	r0, r3
 8003986:	f7fd fdd9 	bl	800153c <__aeabi_i2f>
 800398a:	1c03      	adds	r3, r0, #0
 800398c:	1c19      	adds	r1, r3, #0
 800398e:	1c20      	adds	r0, r4, #0
 8003990:	f7fd f8d6 	bl	8000b40 <__aeabi_fdiv>
 8003994:	1c03      	adds	r3, r0, #0
}
 8003996:	1c18      	adds	r0, r3, #0
 8003998:	46bd      	mov	sp, r7
 800399a:	b003      	add	sp, #12
 800399c:	bd90      	pop	{r4, r7, pc}
	...

080039a0 <HighPassFilter_Init>:
    float last_filter_value;
    float last_raw_value;
} HighPassFilter;

/* Initialize High Pass Filter with samples */
void HighPassFilter_Init(HighPassFilter* filter, float samples) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	4817      	ldr	r0, [pc, #92]	@ (8003a0c <HighPassFilter_Init+0x6c>)
 80039ae:	f7fd f8c7 	bl	8000b40 <__aeabi_fdiv>
 80039b2:	1c03      	adds	r3, r0, #0
 80039b4:	1c18      	adds	r0, r3, #0
 80039b6:	f00c fc7f 	bl	80102b8 <expf>
 80039ba:	1c02      	adds	r2, r0, #0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	21fe      	movs	r1, #254	@ 0xfe
 80039c6:	0589      	lsls	r1, r1, #22
 80039c8:	1c18      	adds	r0, r3, #0
 80039ca:	f7fc ff2f 	bl	800082c <__aeabi_fadd>
 80039ce:	1c03      	adds	r3, r0, #0
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	05c9      	lsls	r1, r1, #23
 80039d4:	1c18      	adds	r0, r3, #0
 80039d6:	f7fd f8b3 	bl	8000b40 <__aeabi_fdiv>
 80039da:	1c03      	adds	r3, r0, #0
 80039dc:	1c1a      	adds	r2, r3, #0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	605a      	str	r2, [r3, #4]
    filter->kA1 = -(filter->kA0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2280      	movs	r2, #128	@ 0x80
 80039e8:	0612      	lsls	r2, r2, #24
 80039ea:	405a      	eors	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a05      	ldr	r2, [pc, #20]	@ (8003a10 <HighPassFilter_Init+0x70>)
 80039fc:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a03      	ldr	r2, [pc, #12]	@ (8003a10 <HighPassFilter_Init+0x70>)
 8003a02:	615a      	str	r2, [r3, #20]
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	bf800000 	.word	0xbf800000
 8003a10:	7fc00000 	.word	0x7fc00000

08003a14 <HighPassFilter_InitWithCutoff>:

/* Initialize High Pass Filter with cutoff and sampling frequency */
void HighPassFilter_InitWithCutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
    HighPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fcd5 	bl	80033d0 <__aeabi_f2d>
 8003a26:	0004      	movs	r4, r0
 8003a28:	000d      	movs	r5, r1
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1c19      	adds	r1, r3, #0
 8003a2e:	1c18      	adds	r0, r3, #0
 8003a30:	f7fc fefc 	bl	800082c <__aeabi_fadd>
 8003a34:	1c03      	adds	r3, r0, #0
 8003a36:	1c18      	adds	r0, r3, #0
 8003a38:	f7ff fcca 	bl	80033d0 <__aeabi_f2d>
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <HighPassFilter_InitWithCutoff+0x5c>)
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HighPassFilter_InitWithCutoff+0x60>)
 8003a40:	f7fe fdb2 	bl	80025a8 <__aeabi_dmul>
 8003a44:	0002      	movs	r2, r0
 8003a46:	000b      	movs	r3, r1
 8003a48:	0020      	movs	r0, r4
 8003a4a:	0029      	movs	r1, r5
 8003a4c:	f7fe f968 	bl	8001d20 <__aeabi_ddiv>
 8003a50:	0002      	movs	r2, r0
 8003a52:	000b      	movs	r3, r1
 8003a54:	0010      	movs	r0, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	f7ff fd02 	bl	8003460 <__aeabi_d2f>
 8003a5c:	1c02      	adds	r2, r0, #0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1c11      	adds	r1, r2, #0
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7ff ff9c 	bl	80039a0 <HighPassFilter_Init>
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b004      	add	sp, #16
 8003a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a70:	54442d18 	.word	0x54442d18
 8003a74:	400921fb 	.word	0x400921fb

08003a78 <HighPassFilter_Reset>:
    filter->last_raw_value = value;
    return filter->last_filter_value;
}

/* Reset High Pass Filter */
void HighPassFilter_Reset(HighPassFilter* filter) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = NAN;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <HighPassFilter_Reset+0x1c>)
 8003a84:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = NAN;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a02      	ldr	r2, [pc, #8]	@ (8003a94 <HighPassFilter_Reset+0x1c>)
 8003a8a:	611a      	str	r2, [r3, #16]
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	7fc00000 	.word	0x7fc00000

08003a98 <LowPassFilter_Init>:
    float kB1;
    float last_value;
} LowPassFilter;

/* Initialize Low Pass Filter with samples */
void LowPassFilter_Init(LowPassFilter* filter, float samples) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 8003aa2:	6839      	ldr	r1, [r7, #0]
 8003aa4:	480f      	ldr	r0, [pc, #60]	@ (8003ae4 <LowPassFilter_Init+0x4c>)
 8003aa6:	f7fd f84b 	bl	8000b40 <__aeabi_fdiv>
 8003aaa:	1c03      	adds	r3, r0, #0
 8003aac:	1c18      	adds	r0, r3, #0
 8003aae:	f00c fc03 	bl	80102b8 <expf>
 8003ab2:	1c02      	adds	r2, r0, #0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1c19      	adds	r1, r3, #0
 8003abe:	20fe      	movs	r0, #254	@ 0xfe
 8003ac0:	0580      	lsls	r0, r0, #22
 8003ac2:	f7fd fb61 	bl	8001188 <__aeabi_fsub>
 8003ac6:	1c03      	adds	r3, r0, #0
 8003ac8:	1c1a      	adds	r2, r3, #0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a03      	ldr	r2, [pc, #12]	@ (8003ae8 <LowPassFilter_Init+0x50>)
 8003ada:	60da      	str	r2, [r3, #12]
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	bf800000 	.word	0xbf800000
 8003ae8:	7fc00000 	.word	0x7fc00000

08003aec <LowPassFilter_InitWithCutoff>:

/* Initialize Low Pass Filter with cutoff and sampling frequency */
void LowPassFilter_InitWithCutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 8003aec:	b5b0      	push	{r4, r5, r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
    LowPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fc69 	bl	80033d0 <__aeabi_f2d>
 8003afe:	0004      	movs	r4, r0
 8003b00:	000d      	movs	r5, r1
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1c19      	adds	r1, r3, #0
 8003b06:	1c18      	adds	r0, r3, #0
 8003b08:	f7fc fe90 	bl	800082c <__aeabi_fadd>
 8003b0c:	1c03      	adds	r3, r0, #0
 8003b0e:	1c18      	adds	r0, r3, #0
 8003b10:	f7ff fc5e 	bl	80033d0 <__aeabi_f2d>
 8003b14:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <LowPassFilter_InitWithCutoff+0x5c>)
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <LowPassFilter_InitWithCutoff+0x60>)
 8003b18:	f7fe fd46 	bl	80025a8 <__aeabi_dmul>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	000b      	movs	r3, r1
 8003b20:	0020      	movs	r0, r4
 8003b22:	0029      	movs	r1, r5
 8003b24:	f7fe f8fc 	bl	8001d20 <__aeabi_ddiv>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	000b      	movs	r3, r1
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	f7ff fc96 	bl	8003460 <__aeabi_d2f>
 8003b34:	1c02      	adds	r2, r0, #0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1c11      	adds	r1, r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff ffac 	bl	8003a98 <LowPassFilter_Init>
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}
 8003b48:	54442d18 	.word	0x54442d18
 8003b4c:	400921fb 	.word	0x400921fb

08003b50 <LowPassFilter_Process>:

/* Apply Low Pass Filter */
float LowPassFilter_Process(LowPassFilter* filter, float value) {
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    if (isnan(filter->last_value)) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	1c19      	adds	r1, r3, #0
 8003b60:	1c18      	adds	r0, r3, #0
 8003b62:	f7fd fcb5 	bl	80014d0 <__aeabi_fcmpun>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d003      	beq.n	8003b72 <LowPassFilter_Process+0x22>
        filter->last_value = value;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e018      	b.n	8003ba4 <LowPassFilter_Process+0x54>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	1c18      	adds	r0, r3, #0
 8003b7a:	f7fd f9c7 	bl	8000f0c <__aeabi_fmul>
 8003b7e:	1c03      	adds	r3, r0, #0
 8003b80:	1c1c      	adds	r4, r3, #0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	1c19      	adds	r1, r3, #0
 8003b8c:	1c10      	adds	r0, r2, #0
 8003b8e:	f7fd f9bd 	bl	8000f0c <__aeabi_fmul>
 8003b92:	1c03      	adds	r3, r0, #0
 8003b94:	1c19      	adds	r1, r3, #0
 8003b96:	1c20      	adds	r0, r4, #0
 8003b98:	f7fc fe48 	bl	800082c <__aeabi_fadd>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	1c1a      	adds	r2, r3, #0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]
    }
    return filter->last_value;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
}
 8003ba8:	1c18      	adds	r0, r3, #0
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b003      	add	sp, #12
 8003bae:	bd90      	pop	{r4, r7, pc}

08003bb0 <LowPassFilter_Reset>:

/* Reset Low Pass Filter */
void LowPassFilter_Reset(LowPassFilter* filter) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    filter->last_value = NAN;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a03      	ldr	r2, [pc, #12]	@ (8003bc8 <LowPassFilter_Reset+0x18>)
 8003bbc:	60da      	str	r2, [r3, #12]
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	7fc00000 	.word	0x7fc00000

08003bcc <Differentiator_Init>:
    float sampling_frequency;
    float last_value;
} Differentiator;

/* Initialize Differentiator */
void Differentiator_Init(Differentiator* diff, float sampling_frequency) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    diff->sampling_frequency = sampling_frequency;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a03      	ldr	r2, [pc, #12]	@ (8003bec <Differentiator_Init+0x20>)
 8003be0:	605a      	str	r2, [r3, #4]
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	7fc00000 	.word	0x7fc00000

08003bf0 <Differentiator_Process>:

/* Apply Differentiator */
float Differentiator_Process(Differentiator* diff, float value) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    if (isnan(diff->last_value)) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	1c19      	adds	r1, r3, #0
 8003c00:	1c18      	adds	r0, r3, #0
 8003c02:	f7fd fc65 	bl	80014d0 <__aeabi_fcmpun>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d004      	beq.n	8003c14 <Differentiator_Process+0x24>
        diff->last_value = value;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
        return 0.0;  // No change in the first iteration
 8003c10:	2300      	movs	r3, #0
 8003c12:	e013      	b.n	8003c3c <Differentiator_Process+0x4c>
    }
    float result = (value - diff->last_value) * diff->sampling_frequency;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	1c19      	adds	r1, r3, #0
 8003c1a:	6838      	ldr	r0, [r7, #0]
 8003c1c:	f7fd fab4 	bl	8001188 <__aeabi_fsub>
 8003c20:	1c03      	adds	r3, r0, #0
 8003c22:	1c1a      	adds	r2, r3, #0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c19      	adds	r1, r3, #0
 8003c2a:	1c10      	adds	r0, r2, #0
 8003c2c:	f7fd f96e 	bl	8000f0c <__aeabi_fmul>
 8003c30:	1c03      	adds	r3, r0, #0
 8003c32:	60fb      	str	r3, [r7, #12]
    diff->last_value = value;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	605a      	str	r2, [r3, #4]
    return result;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	1c18      	adds	r0, r3, #0
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <Differentiator_Reset>:

/* Reset Differentiator */
void Differentiator_Reset(Differentiator* diff) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    diff->last_value = NAN;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a03      	ldr	r2, [pc, #12]	@ (8003c5c <Differentiator_Reset+0x18>)
 8003c50:	605a      	str	r2, [r3, #4]
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	7fc00000 	.word	0x7fc00000

08003c60 <MovingAverageFilter_Init>:
    int buffer_size;
    float* values;
} MovingAverageFilter;

/* Initialize Moving Average Filter */
void MovingAverageFilter_Init(MovingAverageFilter* filter, float* buffer, int buffer_size) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
    filter->index = 0;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
    filter->values = buffer;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <MovingAverageFilter_Process>:

/* Apply Moving Average Filter */
float MovingAverageFilter_Process(MovingAverageFilter* filter, float value) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
    filter->values[filter->index] = value;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
    filter->index = (filter->index + 1) % filter->buffer_size;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	f7fc fbb4 	bl	8000420 <__aeabi_idivmod>
 8003cb8:	000b      	movs	r3, r1
 8003cba:	001a      	movs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]
    if (filter->count < filter->buffer_size) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	da04      	bge.n	8003cd6 <MovingAverageFilter_Process+0x4a>
        filter->count++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	605a      	str	r2, [r3, #4]
    }

    float sum = 0.0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	e00e      	b.n	8003cfe <MovingAverageFilter_Process+0x72>
        sum += filter->values[i];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c19      	adds	r1, r3, #0
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7fc fd9c 	bl	800082c <__aeabi_fadd>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	dbeb      	blt.n	8003ce0 <MovingAverageFilter_Process+0x54>
    }
    return sum / filter->count;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7fd fc15 	bl	800153c <__aeabi_i2f>
 8003d12:	1c03      	adds	r3, r0, #0
 8003d14:	1c19      	adds	r1, r3, #0
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7fc ff12 	bl	8000b40 <__aeabi_fdiv>
 8003d1c:	1c03      	adds	r3, r0, #0
}
 8003d1e:	1c18      	adds	r0, r3, #0
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <MovingAverageFilter_Reset>:

/* Reset Moving Average Filter */
void MovingAverageFilter_Reset(MovingAverageFilter* filter) {
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
    filter->index = 0;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <send_uart>:
static void MX_SPI2_Init(void);
void init_filters(void);
static void MX_RTC_Init(void); // RTC initialization

// UART Transmit Helper Function
void send_uart(char *message) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7fc f9da 	bl	8000108 <strlen>
 8003d54:	0003      	movs	r3, r0
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	2301      	movs	r3, #1
 8003d5a:	425b      	negs	r3, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4803      	ldr	r0, [pc, #12]	@ (8003d6c <send_uart+0x28>)
 8003d60:	f003 ffb8 	bl	8007cd4 <HAL_UART_Transmit>
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000218 	.word	0x20000218

08003d70 <log_data_to_sd>:

// SD Card Logging Function with Timestamp
void log_data_to_sd(char *message) {
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	46c6      	mov	lr, r8
 8003d74:	b500      	push	{lr}
 8003d76:	b0b0      	sub	sp, #192	@ 0xc0
 8003d78:	af06      	add	r7, sp, #24
 8003d7a:	6078      	str	r0, [r7, #4]
    if (stop_logging_flag) return;  // Stop logging if flag is set
 8003d7c:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <log_data_to_sd+0xe0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d15d      	bne.n	8003e42 <log_data_to_sd+0xd2>

    RTC_DateTypeDef sDate;
    RTC_TimeTypeDef sTime;

    // Get the current date and time from RTC
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003d86:	24a4      	movs	r4, #164	@ 0xa4
 8003d88:	1939      	adds	r1, r7, r4
 8003d8a:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <log_data_to_sd+0xe4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f003 f9b6 	bl	8007100 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003d94:	2590      	movs	r5, #144	@ 0x90
 8003d96:	1979      	adds	r1, r7, r5
 8003d98:	4b2e      	ldr	r3, [pc, #184]	@ (8003e54 <log_data_to_sd+0xe4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f003 f951 	bl	8007044 <HAL_RTC_GetTime>

    char log_entry[128];
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003da2:	0022      	movs	r2, r4
 8003da4:	18bb      	adds	r3, r7, r2
 8003da6:	78db      	ldrb	r3, [r3, #3]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003da8:	4698      	mov	r8, r3
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003daa:	18bb      	adds	r3, r7, r2
 8003dac:	785b      	ldrb	r3, [r3, #1]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003dae:	0019      	movs	r1, r3
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003db0:	18bb      	adds	r3, r7, r2
 8003db2:	789b      	ldrb	r3, [r3, #2]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003db4:	001c      	movs	r4, r3
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003db6:	002a      	movs	r2, r5
 8003db8:	18bb      	adds	r3, r7, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003dbc:	001d      	movs	r5, r3
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003dbe:	18bb      	adds	r3, r7, r2
 8003dc0:	785b      	ldrb	r3, [r3, #1]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003dc2:	001e      	movs	r6, r3
             sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds, message);
 8003dc4:	18bb      	adds	r3, r7, r2
 8003dc6:	789b      	ldrb	r3, [r3, #2]
    snprintf(log_entry, sizeof(log_entry), "[%02d-%02d-%02d %02d:%02d:%02d] %s",
 8003dc8:	469c      	mov	ip, r3
 8003dca:	4a23      	ldr	r2, [pc, #140]	@ (8003e58 <log_data_to_sd+0xe8>)
 8003dcc:	2310      	movs	r3, #16
 8003dce:	18f8      	adds	r0, r7, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	9305      	str	r3, [sp, #20]
 8003dd4:	4663      	mov	r3, ip
 8003dd6:	9304      	str	r3, [sp, #16]
 8003dd8:	9603      	str	r6, [sp, #12]
 8003dda:	9502      	str	r5, [sp, #8]
 8003ddc:	9401      	str	r4, [sp, #4]
 8003dde:	9100      	str	r1, [sp, #0]
 8003de0:	4643      	mov	r3, r8
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	f008 fd1a 	bl	800c81c <sniprintf>

    // Open log file in append mode to avoid overwriting previous logs
    fres = f_open(&fil, "log.txt", log_file_initialized ? (FA_OPEN_APPEND | FA_WRITE) : (FA_CREATE_ALWAYS | FA_WRITE));
 8003de8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <log_data_to_sd+0xec>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <log_data_to_sd+0x84>
 8003df0:	2332      	movs	r3, #50	@ 0x32
 8003df2:	e000      	b.n	8003df6 <log_data_to_sd+0x86>
 8003df4:	230a      	movs	r3, #10
 8003df6:	491a      	ldr	r1, [pc, #104]	@ (8003e60 <log_data_to_sd+0xf0>)
 8003df8:	481a      	ldr	r0, [pc, #104]	@ (8003e64 <log_data_to_sd+0xf4>)
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	f007 f94a 	bl	800b094 <f_open>
 8003e00:	0003      	movs	r3, r0
 8003e02:	001a      	movs	r2, r3
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <log_data_to_sd+0xf8>)
 8003e06:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 8003e08:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <log_data_to_sd+0xf8>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d113      	bne.n	8003e38 <log_data_to_sd+0xc8>
        UINT bytesWritten;
        f_write(&fil, log_entry, strlen(log_entry), &bytesWritten);
 8003e10:	2410      	movs	r4, #16
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7fc f977 	bl	8000108 <strlen>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	1939      	adds	r1, r7, r4
 8003e22:	4810      	ldr	r0, [pc, #64]	@ (8003e64 <log_data_to_sd+0xf4>)
 8003e24:	f007 fb2a 	bl	800b47c <f_write>
        f_close(&fil);
 8003e28:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <log_data_to_sd+0xf4>)
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f007 fd29 	bl	800b882 <f_close>

        // Set the log file initialized flag to true after the first write
        log_file_initialized = true;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <log_data_to_sd+0xec>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e005      	b.n	8003e44 <log_data_to_sd+0xd4>
    } else {
        send_uart("Failed to write to SD card.\n\r");
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <log_data_to_sd+0xfc>)
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff ff82 	bl	8003d44 <send_uart>
 8003e40:	e000      	b.n	8003e44 <log_data_to_sd+0xd4>
    if (stop_logging_flag) return;  // Stop logging if flag is set
 8003e42:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b02a      	add	sp, #168	@ 0xa8
 8003e48:	bc80      	pop	{r7}
 8003e4a:	46b8      	mov	r8, r7
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	20000865 	.word	0x20000865
 8003e54:	2000034c 	.word	0x2000034c
 8003e58:	080105e8 	.word	0x080105e8
 8003e5c:	200007d1 	.word	0x200007d1
 8003e60:	0801060c 	.word	0x0801060c
 8003e64:	200005a0 	.word	0x200005a0
 8003e68:	200007d0 	.word	0x200007d0
 8003e6c:	08010614 	.word	0x08010614

08003e70 <main>:


// Main Application Loop
int main(void) {
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b09b      	sub	sp, #108	@ 0x6c
 8003e74:	af02      	add	r7, sp, #8
    HAL_Init();
 8003e76:	f000 fef9 	bl	8004c6c <HAL_Init>
    SystemClock_Config();
 8003e7a:	f000 fb0b 	bl	8004494 <SystemClock_Config>
    MX_GPIO_Init();
 8003e7e:	f000 fc5b 	bl	8004738 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003e82:	f000 fb87 	bl	8004594 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8003e86:	f000 fc27 	bl	80046d8 <MX_USART2_UART_Init>
    MX_SPI2_Init();
 8003e8a:	f000 fbed 	bl	8004668 <MX_SPI2_Init>
    MX_RTC_Init();  // Initialize RTC
 8003e8e:	f000 fbc1 	bl	8004614 <MX_RTC_Init>
    MX_FATFS_Init();
 8003e92:	f004 fc87 	bl	80087a4 <MX_FATFS_Init>

    // Mount SD card
    fres = f_mount(&FatFs, "", 1);
 8003e96:	4965      	ldr	r1, [pc, #404]	@ (800402c <main+0x1bc>)
 8003e98:	4b65      	ldr	r3, [pc, #404]	@ (8004030 <main+0x1c0>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f007 f8ad 	bl	800affc <f_mount>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	001a      	movs	r2, r3
 8003ea6:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <main+0x1c4>)
 8003ea8:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8003eaa:	4b62      	ldr	r3, [pc, #392]	@ (8004034 <main+0x1c4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <main+0x4c>
        send_uart("SD card mount error.\n\r");
 8003eb2:	4b61      	ldr	r3, [pc, #388]	@ (8004038 <main+0x1c8>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff ff45 	bl	8003d44 <send_uart>
 8003eba:	e003      	b.n	8003ec4 <main+0x54>
    } else {
        send_uart("SD card mounted successfully.\n\r");
 8003ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800403c <main+0x1cc>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff ff40 	bl	8003d44 <send_uart>
    }

    // Initialize I2C and MAX30102 sensor
    MAX30102_Init(&hi2c1);
 8003ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8004040 <main+0x1d0>)
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff fb78 	bl	80035bc <MAX30102_Init>

    // Initialize filters for processing
    init_filters();
 8003ecc:	f000 f8e4 	bl	8004098 <init_filters>

    // Variables for periodic temperature reading
    uint32_t last_temp_read_time = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const uint32_t temp_read_interval_ms = 5000;
 8003ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8004044 <main+0x1d4>)
 8003ed6:	65bb      	str	r3, [r7, #88]	@ 0x58

    while (1) {
        if (stop_logging_flag) continue;  // Stop all processing if the flag is set
 8003ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8004048 <main+0x1d8>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d000      	beq.n	8003ee4 <main+0x74>
 8003ee2:	e0a1      	b.n	8004028 <main+0x1b8>
//        Set_RTC_Time();
//           Set_RTC_Date();
        if (temp_interrupt_flag) {
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <main+0x1dc>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01d      	beq.n	8003f2a <main+0xba>
            temp_interrupt_flag = false;
 8003eee:	4b57      	ldr	r3, [pc, #348]	@ (800404c <main+0x1dc>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
            float temperature = MAX30102_ReadTemperature(&hi2c1);
 8003ef4:	4b52      	ldr	r3, [pc, #328]	@ (8004040 <main+0x1d0>)
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7ff fc78 	bl	80037ec <MAX30102_ReadTemperature>
 8003efc:	1c03      	adds	r3, r0, #0
 8003efe:	657b      	str	r3, [r7, #84]	@ 0x54
            char temp_message[64];
            snprintf(temp_message, sizeof(temp_message), "Temperature: %.2f°C\r\n", temperature);
 8003f00:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003f02:	f7ff fa65 	bl	80033d0 <__aeabi_f2d>
 8003f06:	0002      	movs	r2, r0
 8003f08:	000b      	movs	r3, r1
 8003f0a:	4951      	ldr	r1, [pc, #324]	@ (8004050 <main+0x1e0>)
 8003f0c:	0038      	movs	r0, r7
 8003f0e:	9200      	str	r2, [sp, #0]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	000a      	movs	r2, r1
 8003f14:	2140      	movs	r1, #64	@ 0x40
 8003f16:	f008 fc81 	bl	800c81c <sniprintf>
            send_uart(temp_message);
 8003f1a:	003b      	movs	r3, r7
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff ff11 	bl	8003d44 <send_uart>
            log_data_to_sd(temp_message);
 8003f22:	003b      	movs	r3, r7
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff ff23 	bl	8003d70 <log_data_to_sd>
        }

        MAX30102_Data sample;
        MAX30102_ReadFifo(&hi2c1, &sample);
 8003f2a:	2440      	movs	r4, #64	@ 0x40
 8003f2c:	193a      	adds	r2, r7, r4
 8003f2e:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <main+0x1d0>)
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff fb72 	bl	800361c <MAX30102_ReadFifo>
        float current_value_red = sample.red;
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fd fb49 	bl	80015d4 <__aeabi_ui2f>
 8003f42:	1c03      	adds	r3, r0, #0
 8003f44:	653b      	str	r3, [r7, #80]	@ 0x50
        float current_value_ir = sample.ir;
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	885b      	ldrh	r3, [r3, #2]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fd fb42 	bl	80015d4 <__aeabi_ui2f>
 8003f50:	1c03      	adds	r3, r0, #0
 8003f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint32_t current_time = HAL_GetTick();
 8003f54:	f000 fef0 	bl	8004d38 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48

        if (current_value_red > kFingerThreshold) {
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <main+0x1e4>)
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7fd fb38 	bl	80015d4 <__aeabi_ui2f>
 8003f64:	1c03      	adds	r3, r0, #0
 8003f66:	1c19      	adds	r1, r3, #0
 8003f68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003f6a:	f7fc fac3 	bl	80004f4 <__aeabi_fcmpgt>
 8003f6e:	1e03      	subs	r3, r0, #0
 8003f70:	d00a      	beq.n	8003f88 <main+0x118>
            if (current_time - finger_timestamp > kFingerCooldownMs) {
 8003f72:	4b39      	ldr	r3, [pc, #228]	@ (8004058 <main+0x1e8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2264      	movs	r2, #100	@ 0x64
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d917      	bls.n	8003fb0 <main+0x140>
                finger_detected = true;
 8003f80:	4b36      	ldr	r3, [pc, #216]	@ (800405c <main+0x1ec>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e013      	b.n	8003fb0 <main+0x140>
            }
        } else {
            if (finger_detected) {
 8003f88:	4b34      	ldr	r3, [pc, #208]	@ (800405c <main+0x1ec>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <main+0x134>
                send_uart("No finger detected, resetting filters\n\r");
 8003f90:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <main+0x1f0>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fed6 	bl	8003d44 <send_uart>
                log_data_to_sd("No finger detected, resetting filters\n\r");
 8003f98:	4b31      	ldr	r3, [pc, #196]	@ (8004060 <main+0x1f0>)
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff fee8 	bl	8003d70 <log_data_to_sd>
                reset_filters();
 8003fa0:	f000 f8c4 	bl	800412c <reset_filters>
            }
            finger_detected = false;
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800405c <main+0x1ec>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
            finger_timestamp = current_time;
 8003faa:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <main+0x1e8>)
 8003fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fae:	601a      	str	r2, [r3, #0]
        }

        if (current_time - last_temp_read_time >= temp_read_interval_ms) {
 8003fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <main+0x154>
            last_temp_read_time = current_time;
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
            initiate_temperature_read();
 8003fc0:	f000 f85c 	bl	800407c <initiate_temperature_read>
        }

        if (finger_detected) {
 8003fc4:	4b25      	ldr	r3, [pc, #148]	@ (800405c <main+0x1ec>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d085      	beq.n	8003ed8 <main+0x68>
            current_value_red = LowPassFilter_Process(&low_pass_filter_red, current_value_red);
 8003fcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fce:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <main+0x1f4>)
 8003fd0:	1c11      	adds	r1, r2, #0
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff fdbc 	bl	8003b50 <LowPassFilter_Process>
 8003fd8:	1c03      	adds	r3, r0, #0
 8003fda:	653b      	str	r3, [r7, #80]	@ 0x50
            current_value_ir = LowPassFilter_Process(&low_pass_filter_ir, current_value_ir);
 8003fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fde:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <main+0x1f8>)
 8003fe0:	1c11      	adds	r1, r2, #0
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7ff fdb4 	bl	8003b50 <LowPassFilter_Process>
 8003fe8:	1c03      	adds	r3, r0, #0
 8003fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
            float current_diff = Differentiator_Process(&differentiator, current_value_red);
 8003fec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fee:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <main+0x1fc>)
 8003ff0:	1c11      	adds	r1, r2, #0
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff fdfc 	bl	8003bf0 <Differentiator_Process>
 8003ff8:	1c03      	adds	r3, r0, #0
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44

            MinMaxAvgStatistic_Process(&stat_red, current_value_red);
 8003ffc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <main+0x200>)
 8004000:	1c11      	adds	r1, r2, #0
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff fc4c 	bl	80038a0 <MinMaxAvgStatistic_Process>
            MinMaxAvgStatistic_Process(&stat_ir, current_value_ir);
 8004008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800400a:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <main+0x204>)
 800400c:	1c11      	adds	r1, r2, #0
 800400e:	0018      	movs	r0, r3
 8004010:	f7ff fc46 	bl	80038a0 <MinMaxAvgStatistic_Process>

            detect_heartbeat(current_time, current_diff, current_value_ir);
 8004014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004016:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f8bc 	bl	8004198 <detect_heartbeat>
            last_diff = current_diff;
 8004020:	4b15      	ldr	r3, [pc, #84]	@ (8004078 <main+0x208>)
 8004022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e757      	b.n	8003ed8 <main+0x68>
        if (stop_logging_flag) continue;  // Stop all processing if the flag is set
 8004028:	46c0      	nop			@ (mov r8, r8)
    while (1) {
 800402a:	e755      	b.n	8003ed8 <main+0x68>
 800402c:	08010634 	.word	0x08010634
 8004030:	20000370 	.word	0x20000370
 8004034:	200007d0 	.word	0x200007d0
 8004038:	08010638 	.word	0x08010638
 800403c:	08010650 	.word	0x08010650
 8004040:	200002a0 	.word	0x200002a0
 8004044:	00001388 	.word	0x00001388
 8004048:	20000865 	.word	0x20000865
 800404c:	20000864 	.word	0x20000864
 8004050:	08010670 	.word	0x08010670
 8004054:	00002710 	.word	0x00002710
 8004058:	20000838 	.word	0x20000838
 800405c:	2000083c 	.word	0x2000083c
 8004060:	08010688 	.word	0x08010688
 8004064:	200007ec 	.word	0x200007ec
 8004068:	200007fc 	.word	0x200007fc
 800406c:	2000080c 	.word	0x2000080c
 8004070:	20000844 	.word	0x20000844
 8004074:	20000854 	.word	0x20000854
 8004078:	2000000c 	.word	0x2000000c

0800407c <initiate_temperature_read>:
}



// Start Temperature Measurement
void initiate_temperature_read(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
    MAX30102_WriteRegister(&hi2c1, MAX30102_REG_TEMP_CONFIG, 0x01);
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <initiate_temperature_read+0x18>)
 8004082:	2201      	movs	r2, #1
 8004084:	2121      	movs	r1, #33	@ 0x21
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff fb6f 	bl	800376a <MAX30102_WriteRegister>
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	200002a0 	.word	0x200002a0

08004098 <init_filters>:

// Filter Initialization
void init_filters(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
    HighPassFilter_InitWithCutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 800409c:	21fc      	movs	r1, #252	@ 0xfc
 800409e:	0589      	lsls	r1, r1, #22
 80040a0:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <init_filters+0x64>)
 80040a2:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <init_filters+0x68>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff fcb5 	bl	8003a14 <HighPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_red, kLowPassCutoff, kSamplingFrequency);
 80040aa:	4916      	ldr	r1, [pc, #88]	@ (8004104 <init_filters+0x6c>)
 80040ac:	4a13      	ldr	r2, [pc, #76]	@ (80040fc <init_filters+0x64>)
 80040ae:	4b16      	ldr	r3, [pc, #88]	@ (8004108 <init_filters+0x70>)
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff fd1b 	bl	8003aec <LowPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_ir, kLowPassCutoff, kSamplingFrequency);
 80040b6:	4913      	ldr	r1, [pc, #76]	@ (8004104 <init_filters+0x6c>)
 80040b8:	4a10      	ldr	r2, [pc, #64]	@ (80040fc <init_filters+0x64>)
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <init_filters+0x74>)
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff fd15 	bl	8003aec <LowPassFilter_InitWithCutoff>
    Differentiator_Init(&differentiator, kSamplingFrequency);
 80040c2:	4a0e      	ldr	r2, [pc, #56]	@ (80040fc <init_filters+0x64>)
 80040c4:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <init_filters+0x78>)
 80040c6:	1c11      	adds	r1, r2, #0
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff fd7f 	bl	8003bcc <Differentiator_Init>

    static float average_buffer_bpm[K_AVERAGING_SAMPLES];
    static float average_buffer_spo2[K_AVERAGING_SAMPLES];
    MovingAverageFilter_Init(&averager_bpm, average_buffer_bpm, K_AVERAGING_SAMPLES);
 80040ce:	4911      	ldr	r1, [pc, #68]	@ (8004114 <init_filters+0x7c>)
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <init_filters+0x80>)
 80040d2:	2232      	movs	r2, #50	@ 0x32
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fdc3 	bl	8003c60 <MovingAverageFilter_Init>
    MovingAverageFilter_Init(&averager_spo2, average_buffer_spo2, K_AVERAGING_SAMPLES);
 80040da:	4910      	ldr	r1, [pc, #64]	@ (800411c <init_filters+0x84>)
 80040dc:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <init_filters+0x88>)
 80040de:	2232      	movs	r2, #50	@ 0x32
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7ff fdbd 	bl	8003c60 <MovingAverageFilter_Init>

    MinMaxAvgStatistic_Init(&stat_red);
 80040e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <init_filters+0x8c>)
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fbc3 	bl	8003874 <MinMaxAvgStatistic_Init>
    MinMaxAvgStatistic_Init(&stat_ir);
 80040ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <init_filters+0x90>)
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fbbf 	bl	8003874 <MinMaxAvgStatistic_Init>
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	43c80000 	.word	0x43c80000
 8004100:	200007d4 	.word	0x200007d4
 8004104:	40400000 	.word	0x40400000
 8004108:	200007ec 	.word	0x200007ec
 800410c:	200007fc 	.word	0x200007fc
 8004110:	2000080c 	.word	0x2000080c
 8004114:	20000868 	.word	0x20000868
 8004118:	20000814 	.word	0x20000814
 800411c:	20000930 	.word	0x20000930
 8004120:	20000824 	.word	0x20000824
 8004124:	20000844 	.word	0x20000844
 8004128:	20000854 	.word	0x20000854

0800412c <reset_filters>:

// Reset Filters When Finger is Removed
void reset_filters(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
    HighPassFilter_Reset(&high_pass_filter);
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <reset_filters+0x4c>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff fca0 	bl	8003a78 <HighPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_red);
 8004138:	4b10      	ldr	r3, [pc, #64]	@ (800417c <reset_filters+0x50>)
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fd38 	bl	8003bb0 <LowPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_ir);
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <reset_filters+0x54>)
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff fd34 	bl	8003bb0 <LowPassFilter_Reset>
    Differentiator_Reset(&differentiator);
 8004148:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <reset_filters+0x58>)
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff fd7a 	bl	8003c44 <Differentiator_Reset>
    MovingAverageFilter_Reset(&averager_bpm);
 8004150:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <reset_filters+0x5c>)
 8004152:	0018      	movs	r0, r3
 8004154:	f7ff fde7 	bl	8003d26 <MovingAverageFilter_Reset>
    MovingAverageFilter_Reset(&averager_spo2);
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <reset_filters+0x60>)
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fde3 	bl	8003d26 <MovingAverageFilter_Reset>
    MinMaxAvgStatistic_Reset(&stat_red);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <reset_filters+0x64>)
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fbdc 	bl	8003920 <MinMaxAvgStatistic_Reset>
    MinMaxAvgStatistic_Reset(&stat_ir);
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <reset_filters+0x68>)
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff fbd8 	bl	8003920 <MinMaxAvgStatistic_Reset>
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	200007d4 	.word	0x200007d4
 800417c:	200007ec 	.word	0x200007ec
 8004180:	200007fc 	.word	0x200007fc
 8004184:	2000080c 	.word	0x2000080c
 8004188:	20000814 	.word	0x20000814
 800418c:	20000824 	.word	0x20000824
 8004190:	20000844 	.word	0x20000844
 8004194:	20000854 	.word	0x20000854

08004198 <detect_heartbeat>:

// Heartbeat Detection and SpO2 Calculation
void detect_heartbeat(uint32_t current_time, float current_diff, float current_value_ir) {
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b09c      	sub	sp, #112	@ 0x70
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
    if (!isnan(current_diff) && !isnan(last_diff)) {
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	f7fd f992 	bl	80014d0 <__aeabi_fcmpun>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d000      	beq.n	80041b2 <detect_heartbeat+0x1a>
 80041b0:	e120      	b.n	80043f4 <detect_heartbeat+0x25c>
 80041b2:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <detect_heartbeat+0x264>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1c19      	adds	r1, r3, #0
 80041b8:	1c18      	adds	r0, r3, #0
 80041ba:	f7fd f989 	bl	80014d0 <__aeabi_fcmpun>
 80041be:	1e03      	subs	r3, r0, #0
 80041c0:	d000      	beq.n	80041c4 <detect_heartbeat+0x2c>
 80041c2:	e117      	b.n	80043f4 <detect_heartbeat+0x25c>
        if (last_diff > 0 && current_diff < 0) {
 80041c4:	4b8d      	ldr	r3, [pc, #564]	@ (80043fc <detect_heartbeat+0x264>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2100      	movs	r1, #0
 80041ca:	1c18      	adds	r0, r3, #0
 80041cc:	f7fc f992 	bl	80004f4 <__aeabi_fcmpgt>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d00b      	beq.n	80041ec <detect_heartbeat+0x54>
 80041d4:	2100      	movs	r1, #0
 80041d6:	68b8      	ldr	r0, [r7, #8]
 80041d8:	f7fc f978 	bl	80004cc <__aeabi_fcmplt>
 80041dc:	1e03      	subs	r3, r0, #0
 80041de:	d005      	beq.n	80041ec <detect_heartbeat+0x54>
            crossed = true;
 80041e0:	4b87      	ldr	r3, [pc, #540]	@ (8004400 <detect_heartbeat+0x268>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
            crossed_time = current_time;
 80041e6:	4b87      	ldr	r3, [pc, #540]	@ (8004404 <detect_heartbeat+0x26c>)
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]
        }

        if (current_diff > 0) {
 80041ec:	2100      	movs	r1, #0
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f7fc f980 	bl	80004f4 <__aeabi_fcmpgt>
 80041f4:	1e03      	subs	r3, r0, #0
 80041f6:	d002      	beq.n	80041fe <detect_heartbeat+0x66>
            crossed = false;
 80041f8:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <detect_heartbeat+0x268>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
        }

        if (crossed && current_diff < kEdgeThreshold) {
 80041fe:	4b80      	ldr	r3, [pc, #512]	@ (8004400 <detect_heartbeat+0x268>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d100      	bne.n	8004208 <detect_heartbeat+0x70>
 8004206:	e0f5      	b.n	80043f4 <detect_heartbeat+0x25c>
 8004208:	4b7f      	ldr	r3, [pc, #508]	@ (8004408 <detect_heartbeat+0x270>)
 800420a:	1c19      	adds	r1, r3, #0
 800420c:	68b8      	ldr	r0, [r7, #8]
 800420e:	f7fc f95d 	bl	80004cc <__aeabi_fcmplt>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d100      	bne.n	8004218 <detect_heartbeat+0x80>
            crossed = false;
            MinMaxAvgStatistic_Reset(&stat_red);
            MinMaxAvgStatistic_Reset(&stat_ir);
        }
    }
}
 8004216:	e0ed      	b.n	80043f4 <detect_heartbeat+0x25c>
            if (last_heartbeat != 0 && (crossed_time - last_heartbeat) > 500) {
 8004218:	4b7c      	ldr	r3, [pc, #496]	@ (800440c <detect_heartbeat+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d100      	bne.n	8004222 <detect_heartbeat+0x8a>
 8004220:	e0d9      	b.n	80043d6 <detect_heartbeat+0x23e>
 8004222:	4b78      	ldr	r3, [pc, #480]	@ (8004404 <detect_heartbeat+0x26c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b79      	ldr	r3, [pc, #484]	@ (800440c <detect_heartbeat+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	23fa      	movs	r3, #250	@ 0xfa
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	429a      	cmp	r2, r3
 8004232:	d800      	bhi.n	8004236 <detect_heartbeat+0x9e>
 8004234:	e0cf      	b.n	80043d6 <detect_heartbeat+0x23e>
                uint32_t bpm = 60000 / (crossed_time - last_heartbeat);
 8004236:	4b73      	ldr	r3, [pc, #460]	@ (8004404 <detect_heartbeat+0x26c>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b74      	ldr	r3, [pc, #464]	@ (800440c <detect_heartbeat+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	0019      	movs	r1, r3
 8004242:	4873      	ldr	r0, [pc, #460]	@ (8004410 <detect_heartbeat+0x278>)
 8004244:	f7fb ff7c 	bl	8000140 <__udivsi3>
 8004248:	0003      	movs	r3, r0
 800424a:	667b      	str	r3, [r7, #100]	@ 0x64
                if (bpm > 50 && bpm < 150) {
 800424c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800424e:	2b32      	cmp	r3, #50	@ 0x32
 8004250:	d800      	bhi.n	8004254 <detect_heartbeat+0xbc>
 8004252:	e0c0      	b.n	80043d6 <detect_heartbeat+0x23e>
 8004254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004256:	2b95      	cmp	r3, #149	@ 0x95
 8004258:	d900      	bls.n	800425c <detect_heartbeat+0xc4>
 800425a:	e0bc      	b.n	80043d6 <detect_heartbeat+0x23e>
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 800425c:	4b6d      	ldr	r3, [pc, #436]	@ (8004414 <detect_heartbeat+0x27c>)
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff fb7e 	bl	8003960 <MinMaxAvgStatistic_Maximum>
 8004264:	1c04      	adds	r4, r0, #0
 8004266:	4b6b      	ldr	r3, [pc, #428]	@ (8004414 <detect_heartbeat+0x27c>)
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff fb6f 	bl	800394c <MinMaxAvgStatistic_Minimum>
 800426e:	1c03      	adds	r3, r0, #0
 8004270:	1c19      	adds	r1, r3, #0
 8004272:	1c20      	adds	r0, r4, #0
 8004274:	f7fc ff88 	bl	8001188 <__aeabi_fsub>
 8004278:	1c03      	adds	r3, r0, #0
 800427a:	1c1c      	adds	r4, r3, #0
                              MinMaxAvgStatistic_Average(&stat_red);
 800427c:	4b65      	ldr	r3, [pc, #404]	@ (8004414 <detect_heartbeat+0x27c>)
 800427e:	0018      	movs	r0, r3
 8004280:	f7ff fb78 	bl	8003974 <MinMaxAvgStatistic_Average>
 8004284:	1c03      	adds	r3, r0, #0
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 8004286:	1c19      	adds	r1, r3, #0
 8004288:	1c20      	adds	r0, r4, #0
 800428a:	f7fc fc59 	bl	8000b40 <__aeabi_fdiv>
 800428e:	1c03      	adds	r3, r0, #0
 8004290:	663b      	str	r3, [r7, #96]	@ 0x60
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 8004292:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <detect_heartbeat+0x280>)
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff fb63 	bl	8003960 <MinMaxAvgStatistic_Maximum>
 800429a:	1c04      	adds	r4, r0, #0
 800429c:	4b5e      	ldr	r3, [pc, #376]	@ (8004418 <detect_heartbeat+0x280>)
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff fb54 	bl	800394c <MinMaxAvgStatistic_Minimum>
 80042a4:	1c03      	adds	r3, r0, #0
 80042a6:	1c19      	adds	r1, r3, #0
 80042a8:	1c20      	adds	r0, r4, #0
 80042aa:	f7fc ff6d 	bl	8001188 <__aeabi_fsub>
 80042ae:	1c03      	adds	r3, r0, #0
 80042b0:	1c1c      	adds	r4, r3, #0
                         MinMaxAvgStatistic_Average(&stat_ir);
 80042b2:	4b59      	ldr	r3, [pc, #356]	@ (8004418 <detect_heartbeat+0x280>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff fb5d 	bl	8003974 <MinMaxAvgStatistic_Average>
 80042ba:	1c03      	adds	r3, r0, #0
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 80042bc:	1c19      	adds	r1, r3, #0
 80042be:	1c20      	adds	r0, r4, #0
 80042c0:	f7fc fc3e 	bl	8000b40 <__aeabi_fdiv>
 80042c4:	1c03      	adds	r3, r0, #0
 80042c6:	1c19      	adds	r1, r3, #0
 80042c8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80042ca:	f7fc fc39 	bl	8000b40 <__aeabi_fdiv>
 80042ce:	1c03      	adds	r3, r0, #0
 80042d0:	663b      	str	r3, [r7, #96]	@ 0x60
                    float spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 80042d2:	4b52      	ldr	r3, [pc, #328]	@ (800441c <detect_heartbeat+0x284>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80042d8:	1c18      	adds	r0, r3, #0
 80042da:	f7fc fe17 	bl	8000f0c <__aeabi_fmul>
 80042de:	1c03      	adds	r3, r0, #0
 80042e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7fc fe12 	bl	8000f0c <__aeabi_fmul>
 80042e8:	1c03      	adds	r3, r0, #0
 80042ea:	1c1c      	adds	r4, r3, #0
 80042ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004420 <detect_heartbeat+0x288>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80042f2:	1c18      	adds	r0, r3, #0
 80042f4:	f7fc fe0a 	bl	8000f0c <__aeabi_fmul>
 80042f8:	1c03      	adds	r3, r0, #0
 80042fa:	1c19      	adds	r1, r3, #0
 80042fc:	1c20      	adds	r0, r4, #0
 80042fe:	f7fc fa95 	bl	800082c <__aeabi_fadd>
 8004302:	1c03      	adds	r3, r0, #0
 8004304:	1c1a      	adds	r2, r3, #0
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <detect_heartbeat+0x28c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1c19      	adds	r1, r3, #0
 800430c:	1c10      	adds	r0, r2, #0
 800430e:	f7fc fa8d 	bl	800082c <__aeabi_fadd>
 8004312:	1c03      	adds	r3, r0, #0
 8004314:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    spo2 = fmaxf(0, fminf(100, spo2));
 8004316:	4a44      	ldr	r2, [pc, #272]	@ (8004428 <detect_heartbeat+0x290>)
 8004318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800431a:	1c11      	adds	r1, r2, #0
 800431c:	1c18      	adds	r0, r3, #0
 800431e:	f00c f812 	bl	8010346 <fminf>
 8004322:	1c03      	adds	r3, r0, #0
 8004324:	2200      	movs	r2, #0
 8004326:	1c11      	adds	r1, r2, #0
 8004328:	1c18      	adds	r0, r3, #0
 800432a:	f00b fff6 	bl	801031a <fmaxf>
 800432e:	1c03      	adds	r3, r0, #0
 8004330:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    if (kEnableAveraging) {
 8004332:	2301      	movs	r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d035      	beq.n	80043a4 <detect_heartbeat+0x20c>
                        int average_bpm = MovingAverageFilter_Process(&averager_bpm, bpm);
 8004338:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800433a:	f7fd f94b 	bl	80015d4 <__aeabi_ui2f>
 800433e:	1c02      	adds	r2, r0, #0
 8004340:	4b3a      	ldr	r3, [pc, #232]	@ (800442c <detect_heartbeat+0x294>)
 8004342:	1c11      	adds	r1, r2, #0
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fca1 	bl	8003c8c <MovingAverageFilter_Process>
 800434a:	1c03      	adds	r3, r0, #0
 800434c:	1c18      	adds	r0, r3, #0
 800434e:	f7fd f8d5 	bl	80014fc <__aeabi_f2iz>
 8004352:	0003      	movs	r3, r0
 8004354:	65bb      	str	r3, [r7, #88]	@ 0x58
                        float average_spo2 = MovingAverageFilter_Process(&averager_spo2, spo2);
 8004356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004358:	4b35      	ldr	r3, [pc, #212]	@ (8004430 <detect_heartbeat+0x298>)
 800435a:	1c11      	adds	r1, r2, #0
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff fc95 	bl	8003c8c <MovingAverageFilter_Process>
 8004362:	1c03      	adds	r3, r0, #0
 8004364:	657b      	str	r3, [r7, #84]	@ 0x54
                        if (averager_bpm.count >= kSampleThreshold) {
 8004366:	4b31      	ldr	r3, [pc, #196]	@ (800442c <detect_heartbeat+0x294>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	220a      	movs	r2, #10
 800436c:	4293      	cmp	r3, r2
 800436e:	db32      	blt.n	80043d6 <detect_heartbeat+0x23e>
                            snprintf(message, sizeof(message), "Heart Rate: %d bpm, SpO2: %.2f%%\n\r", average_bpm, average_spo2);
 8004370:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004372:	f7ff f82d 	bl	80033d0 <__aeabi_f2d>
 8004376:	0002      	movs	r2, r0
 8004378:	000b      	movs	r3, r1
 800437a:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 800437c:	492d      	ldr	r1, [pc, #180]	@ (8004434 <detect_heartbeat+0x29c>)
 800437e:	2514      	movs	r5, #20
 8004380:	1978      	adds	r0, r7, r5
 8004382:	9200      	str	r2, [sp, #0]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	0023      	movs	r3, r4
 8004388:	000a      	movs	r2, r1
 800438a:	2140      	movs	r1, #64	@ 0x40
 800438c:	f008 fa46 	bl	800c81c <sniprintf>
                            send_uart(message);
 8004390:	002c      	movs	r4, r5
 8004392:	193b      	adds	r3, r7, r4
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff fcd5 	bl	8003d44 <send_uart>
                            log_data_to_sd(message);
 800439a:	193b      	adds	r3, r7, r4
 800439c:	0018      	movs	r0, r3
 800439e:	f7ff fce7 	bl	8003d70 <log_data_to_sd>
 80043a2:	e018      	b.n	80043d6 <detect_heartbeat+0x23e>
                        snprintf(message, sizeof(message), "Heart Rate: %lu bpm, SpO2: %.2f%%\n\r", bpm, spo2);
 80043a4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80043a6:	f7ff f813 	bl	80033d0 <__aeabi_f2d>
 80043aa:	0002      	movs	r2, r0
 80043ac:	000b      	movs	r3, r1
 80043ae:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 80043b0:	4921      	ldr	r1, [pc, #132]	@ (8004438 <detect_heartbeat+0x2a0>)
 80043b2:	2514      	movs	r5, #20
 80043b4:	1978      	adds	r0, r7, r5
 80043b6:	9200      	str	r2, [sp, #0]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	0023      	movs	r3, r4
 80043bc:	000a      	movs	r2, r1
 80043be:	2140      	movs	r1, #64	@ 0x40
 80043c0:	f008 fa2c 	bl	800c81c <sniprintf>
                        send_uart(message);
 80043c4:	002c      	movs	r4, r5
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fcbb 	bl	8003d44 <send_uart>
                        log_data_to_sd(message);
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7ff fccd 	bl	8003d70 <log_data_to_sd>
            last_heartbeat = crossed_time;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <detect_heartbeat+0x26c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <detect_heartbeat+0x274>)
 80043dc:	601a      	str	r2, [r3, #0]
            crossed = false;
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <detect_heartbeat+0x268>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
            MinMaxAvgStatistic_Reset(&stat_red);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <detect_heartbeat+0x27c>)
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff fa9a 	bl	8003920 <MinMaxAvgStatistic_Reset>
            MinMaxAvgStatistic_Reset(&stat_ir);
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <detect_heartbeat+0x280>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff fa96 	bl	8003920 <MinMaxAvgStatistic_Reset>
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b01a      	add	sp, #104	@ 0x68
 80043fa:	bdb0      	pop	{r4, r5, r7, pc}
 80043fc:	2000000c 	.word	0x2000000c
 8004400:	2000083d 	.word	0x2000083d
 8004404:	20000840 	.word	0x20000840
 8004408:	c4fa0000 	.word	0xc4fa0000
 800440c:	20000834 	.word	0x20000834
 8004410:	0000ea60 	.word	0x0000ea60
 8004414:	20000844 	.word	0x20000844
 8004418:	20000854 	.word	0x20000854
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004
 8004424:	20000008 	.word	0x20000008
 8004428:	42c80000 	.word	0x42c80000
 800442c:	20000814 	.word	0x20000814
 8004430:	20000824 	.word	0x20000824
 8004434:	080106b0 	.word	0x080106b0
 8004438:	080106d4 	.word	0x080106d4

0800443c <HAL_GPIO_EXTI_Callback>:

// GPIO Interrupt Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	0002      	movs	r2, r0
 8004444:	1dbb      	adds	r3, r7, #6
 8004446:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_13) {
 8004448:	1dbb      	adds	r3, r7, #6
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	019b      	lsls	r3, r3, #6
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <HAL_GPIO_EXTI_Callback+0x28>
        stop_logging_flag = true;  // Set flag to stop logging and calculations
 8004454:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_GPIO_EXTI_Callback+0x44>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
        send_uart("Logging and calculations stopped by button press.\n\r");
 800445a:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <HAL_GPIO_EXTI_Callback+0x48>)
 800445c:	0018      	movs	r0, r3
 800445e:	f7ff fc71 	bl	8003d44 <send_uart>
    } else if (GPIO_Pin == temp_Pin) {
        temp_interrupt_flag = true;
    }
}
 8004462:	e008      	b.n	8004476 <HAL_GPIO_EXTI_Callback+0x3a>
    } else if (GPIO_Pin == temp_Pin) {
 8004464:	1dbb      	adds	r3, r7, #6
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	429a      	cmp	r2, r3
 800446e:	d102      	bne.n	8004476 <HAL_GPIO_EXTI_Callback+0x3a>
        temp_interrupt_flag = true;
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	20000865 	.word	0x20000865
 8004484:	080106f8 	.word	0x080106f8
 8004488:	20000864 	.word	0x20000864

0800448c <Error_Handler>:

void Error_Handler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
    while(1);
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	e7fd      	b.n	8004490 <Error_Handler+0x4>

08004494 <SystemClock_Config>:
//        Error_Handler();
//    }
//}

void SystemClock_Config(void)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b09f      	sub	sp, #124	@ 0x7c
 8004498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800449a:	2440      	movs	r4, #64	@ 0x40
 800449c:	193b      	adds	r3, r7, r4
 800449e:	0018      	movs	r0, r3
 80044a0:	2338      	movs	r3, #56	@ 0x38
 80044a2:	001a      	movs	r2, r3
 80044a4:	2100      	movs	r1, #0
 80044a6:	f008 fa59 	bl	800c95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044aa:	232c      	movs	r3, #44	@ 0x2c
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	0018      	movs	r0, r3
 80044b0:	2314      	movs	r3, #20
 80044b2:	001a      	movs	r2, r3
 80044b4:	2100      	movs	r1, #0
 80044b6:	f008 fa51 	bl	800c95c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	0018      	movs	r0, r3
 80044be:	2328      	movs	r3, #40	@ 0x28
 80044c0:	001a      	movs	r2, r3
 80044c2:	2100      	movs	r1, #0
 80044c4:	f008 fa4a 	bl	800c95c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004588 <SystemClock_Config+0xf4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2f      	ldr	r2, [pc, #188]	@ (800458c <SystemClock_Config+0xf8>)
 80044ce:	401a      	ands	r2, r3
 80044d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004588 <SystemClock_Config+0xf4>)
 80044d2:	2180      	movs	r1, #128	@ 0x80
 80044d4:	0109      	lsls	r1, r1, #4
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80044da:	f001 fd73 	bl	8005fc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80044de:	4b2c      	ldr	r3, [pc, #176]	@ (8004590 <SystemClock_Config+0xfc>)
 80044e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <SystemClock_Config+0xfc>)
 80044e4:	4929      	ldr	r1, [pc, #164]	@ (800458c <SystemClock_Config+0xf8>)
 80044e6:	400a      	ands	r2, r1
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80044ea:	193b      	adds	r3, r7, r4
 80044ec:	2214      	movs	r2, #20
 80044ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	2280      	movs	r2, #128	@ 0x80
 80044f4:	0052      	lsls	r2, r2, #1
 80044f6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80044f8:	0021      	movs	r1, r4
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	2201      	movs	r2, #1
 80044fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004500:	187b      	adds	r3, r7, r1
 8004502:	2200      	movs	r2, #0
 8004504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004506:	187b      	adds	r3, r7, r1
 8004508:	22a0      	movs	r2, #160	@ 0xa0
 800450a:	0212      	lsls	r2, r2, #8
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800450e:	187b      	adds	r3, r7, r1
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004514:	187b      	adds	r3, r7, r1
 8004516:	0018      	movs	r0, r3
 8004518:	f001 fd62 	bl	8005fe0 <HAL_RCC_OscConfig>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d001      	beq.n	8004524 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004520:	f7ff ffb4 	bl	800448c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004524:	212c      	movs	r1, #44	@ 0x2c
 8004526:	187b      	adds	r3, r7, r1
 8004528:	220f      	movs	r2, #15
 800452a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800452c:	187b      	adds	r3, r7, r1
 800452e:	2200      	movs	r2, #0
 8004530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004532:	187b      	adds	r3, r7, r1
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004538:	187b      	adds	r3, r7, r1
 800453a:	2200      	movs	r2, #0
 800453c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800453e:	187b      	adds	r3, r7, r1
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2100      	movs	r1, #0
 8004548:	0018      	movs	r0, r3
 800454a:	f002 f91d 	bl	8006788 <HAL_RCC_ClockConfig>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d001      	beq.n	8004556 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004552:	f7ff ff9b 	bl	800448c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	222a      	movs	r2, #42	@ 0x2a
 800455a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	0252      	lsls	r2, r2, #9
 800456e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	0018      	movs	r0, r3
 8004574:	f002 fb2c 	bl	8006bd0 <HAL_RCCEx_PeriphCLKConfig>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800457c:	f7ff ff86 	bl	800448c <Error_Handler>
  }
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b01f      	add	sp, #124	@ 0x7c
 8004586:	bd90      	pop	{r4, r7, pc}
 8004588:	40007000 	.word	0x40007000
 800458c:	ffffe7ff 	.word	0xffffe7ff
 8004590:	40021000 	.word	0x40021000

08004594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004598:	4b1c      	ldr	r3, [pc, #112]	@ (800460c <MX_I2C1_Init+0x78>)
 800459a:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <MX_I2C1_Init+0x7c>)
 800459c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800459e:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <MX_I2C1_Init+0x78>)
 80045a0:	22c1      	movs	r2, #193	@ 0xc1
 80045a2:	00d2      	lsls	r2, r2, #3
 80045a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045a6:	4b19      	ldr	r3, [pc, #100]	@ (800460c <MX_I2C1_Init+0x78>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045ac:	4b17      	ldr	r3, [pc, #92]	@ (800460c <MX_I2C1_Init+0x78>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045b2:	4b16      	ldr	r3, [pc, #88]	@ (800460c <MX_I2C1_Init+0x78>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045b8:	4b14      	ldr	r3, [pc, #80]	@ (800460c <MX_I2C1_Init+0x78>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045be:	4b13      	ldr	r3, [pc, #76]	@ (800460c <MX_I2C1_Init+0x78>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045c4:	4b11      	ldr	r3, [pc, #68]	@ (800460c <MX_I2C1_Init+0x78>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <MX_I2C1_Init+0x78>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045d0:	4b0e      	ldr	r3, [pc, #56]	@ (800460c <MX_I2C1_Init+0x78>)
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 fe74 	bl	80052c0 <HAL_I2C_Init>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d001      	beq.n	80045e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80045dc:	f7ff ff56 	bl	800448c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045e0:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <MX_I2C1_Init+0x78>)
 80045e2:	2100      	movs	r1, #0
 80045e4:	0018      	movs	r0, r3
 80045e6:	f001 fc55 	bl	8005e94 <HAL_I2CEx_ConfigAnalogFilter>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d001      	beq.n	80045f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80045ee:	f7ff ff4d 	bl	800448c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <MX_I2C1_Init+0x78>)
 80045f4:	2100      	movs	r1, #0
 80045f6:	0018      	movs	r0, r3
 80045f8:	f001 fc98 	bl	8005f2c <HAL_I2CEx_ConfigDigitalFilter>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004600:	f7ff ff44 	bl	800448c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004604:	46c0      	nop			@ (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	200002a0 	.word	0x200002a0
 8004610:	40005400 	.word	0x40005400

08004614 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <MX_RTC_Init+0x4c>)
 800461a:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <MX_RTC_Init+0x50>)
 800461c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <MX_RTC_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004624:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <MX_RTC_Init+0x4c>)
 8004626:	227f      	movs	r2, #127	@ 0x7f
 8004628:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800462a:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <MX_RTC_Init+0x4c>)
 800462c:	22ff      	movs	r2, #255	@ 0xff
 800462e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <MX_RTC_Init+0x4c>)
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <MX_RTC_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <MX_RTC_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <MX_RTC_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <MX_RTC_Init+0x4c>)
 800464a:	0018      	movs	r0, r3
 800464c:	f002 fc5e 	bl	8006f0c <HAL_RTC_Init>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004654:	f7ff ff1a 	bl	800448c <Error_Handler>
  }



}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	2000034c 	.word	0x2000034c
 8004664:	40002800 	.word	0x40002800

08004668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800466c:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <MX_SPI2_Init+0x68>)
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <MX_SPI2_Init+0x6c>)
 8004670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004672:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <MX_SPI2_Init+0x68>)
 8004674:	2282      	movs	r2, #130	@ 0x82
 8004676:	0052      	lsls	r2, r2, #1
 8004678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <MX_SPI2_Init+0x68>)
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004680:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <MX_SPI2_Init+0x68>)
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004686:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <MX_SPI2_Init+0x68>)
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800468c:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <MX_SPI2_Init+0x68>)
 800468e:	2200      	movs	r2, #0
 8004690:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004692:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <MX_SPI2_Init+0x68>)
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	02d2      	lsls	r2, r2, #11
 8004698:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <MX_SPI2_Init+0x68>)
 800469c:	2230      	movs	r2, #48	@ 0x30
 800469e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <MX_SPI2_Init+0x68>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <MX_SPI2_Init+0x68>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <MX_SPI2_Init+0x68>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80046b2:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <MX_SPI2_Init+0x68>)
 80046b4:	2207      	movs	r2, #7
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <MX_SPI2_Init+0x68>)
 80046ba:	0018      	movs	r0, r3
 80046bc:	f002 fe26 	bl	800730c <HAL_SPI_Init>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d001      	beq.n	80046c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80046c4:	f7ff fee2 	bl	800448c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	200002f4 	.word	0x200002f4
 80046d4:	40003800 	.word	0x40003800

080046d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046dc:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <MX_USART2_UART_Init+0x5c>)
 80046e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046e2:	4b13      	ldr	r3, [pc, #76]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046e4:	22e1      	movs	r2, #225	@ 0xe1
 80046e6:	0252      	lsls	r2, r2, #9
 80046e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046ea:	4b11      	ldr	r3, [pc, #68]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 80046fe:	220c      	movs	r2, #12
 8004700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800470e:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 8004710:	2200      	movs	r2, #0
 8004712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 8004716:	2200      	movs	r2, #0
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <MX_USART2_UART_Init+0x58>)
 800471c:	0018      	movs	r0, r3
 800471e:	f003 fa85 	bl	8007c2c <HAL_UART_Init>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d001      	beq.n	800472a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004726:	f7ff feb1 	bl	800448c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000218 	.word	0x20000218
 8004734:	40004400 	.word	0x40004400

08004738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b08b      	sub	sp, #44	@ 0x2c
 800473c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473e:	2414      	movs	r4, #20
 8004740:	193b      	adds	r3, r7, r4
 8004742:	0018      	movs	r0, r3
 8004744:	2314      	movs	r3, #20
 8004746:	001a      	movs	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	f008 f907 	bl	800c95c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800474e:	4b3c      	ldr	r3, [pc, #240]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004752:	4b3b      	ldr	r3, [pc, #236]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004754:	2104      	movs	r1, #4
 8004756:	430a      	orrs	r2, r1
 8004758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800475a:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <MX_GPIO_Init+0x108>)
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	2204      	movs	r2, #4
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004766:	4b36      	ldr	r3, [pc, #216]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4b35      	ldr	r3, [pc, #212]	@ (8004840 <MX_GPIO_Init+0x108>)
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004772:	4b33      	ldr	r3, [pc, #204]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	2280      	movs	r2, #128	@ 0x80
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800477e:	4b30      	ldr	r3, [pc, #192]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	4b2f      	ldr	r3, [pc, #188]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004784:	2101      	movs	r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800478a:	4b2d      	ldr	r3, [pc, #180]	@ (8004840 <MX_GPIO_Init+0x108>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	2201      	movs	r2, #1
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004796:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <MX_GPIO_Init+0x108>)
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	4b29      	ldr	r3, [pc, #164]	@ (8004840 <MX_GPIO_Init+0x108>)
 800479c:	2102      	movs	r1, #2
 800479e:	430a      	orrs	r2, r1
 80047a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80047a2:	4b27      	ldr	r3, [pc, #156]	@ (8004840 <MX_GPIO_Init+0x108>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047ae:	23a0      	movs	r3, #160	@ 0xa0
 80047b0:	05db      	lsls	r3, r3, #23
 80047b2:	2200      	movs	r2, #0
 80047b4:	2120      	movs	r1, #32
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fd48 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	2280      	movs	r2, #128	@ 0x80
 80047c0:	0192      	lsls	r2, r2, #6
 80047c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	2284      	movs	r2, #132	@ 0x84
 80047c8:	0392      	lsls	r2, r2, #14
 80047ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	193b      	adds	r3, r7, r4
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d2:	193b      	adds	r3, r7, r4
 80047d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <MX_GPIO_Init+0x10c>)
 80047d6:	0019      	movs	r1, r3
 80047d8:	0010      	movs	r0, r2
 80047da:	f000 fbb9 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	2220      	movs	r2, #32
 80047e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	2201      	movs	r2, #1
 80047e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f0:	193b      	adds	r3, r7, r4
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80047f6:	193a      	adds	r2, r7, r4
 80047f8:	23a0      	movs	r3, #160	@ 0xa0
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	0011      	movs	r1, r2
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 fba6 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 8004804:	0021      	movs	r1, r4
 8004806:	187b      	adds	r3, r7, r1
 8004808:	2280      	movs	r2, #128	@ 0x80
 800480a:	0052      	lsls	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800480e:	187b      	adds	r3, r7, r1
 8004810:	2284      	movs	r2, #132	@ 0x84
 8004812:	0392      	lsls	r2, r2, #14
 8004814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004816:	187b      	adds	r3, r7, r1
 8004818:	2201      	movs	r2, #1
 800481a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 800481c:	187b      	adds	r3, r7, r1
 800481e:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <MX_GPIO_Init+0x110>)
 8004820:	0019      	movs	r1, r3
 8004822:	0010      	movs	r0, r2
 8004824:	f000 fb94 	bl	8004f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004828:	2200      	movs	r2, #0
 800482a:	2100      	movs	r1, #0
 800482c:	2007      	movs	r0, #7
 800482e:	f000 fb5d 	bl	8004eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004832:	2007      	movs	r0, #7
 8004834:	f000 fb6f 	bl	8004f16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004838:	46c0      	nop			@ (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b00b      	add	sp, #44	@ 0x2c
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	50000800 	.word	0x50000800
 8004848:	50000400 	.word	0x50000400

0800484c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <HAL_MspInit+0x24>)
 8004852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004854:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_MspInit+0x24>)
 8004856:	2101      	movs	r1, #1
 8004858:	430a      	orrs	r2, r1
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <HAL_MspInit+0x24>)
 800485e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <HAL_MspInit+0x24>)
 8004862:	2180      	movs	r1, #128	@ 0x80
 8004864:	0549      	lsls	r1, r1, #21
 8004866:	430a      	orrs	r2, r1
 8004868:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000

08004874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b089      	sub	sp, #36	@ 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487c:	240c      	movs	r4, #12
 800487e:	193b      	adds	r3, r7, r4
 8004880:	0018      	movs	r0, r3
 8004882:	2314      	movs	r3, #20
 8004884:	001a      	movs	r2, r3
 8004886:	2100      	movs	r1, #0
 8004888:	f008 f868 	bl	800c95c <memset>
  if(hi2c->Instance==I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_I2C_MspInit+0x80>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d12a      	bne.n	80048ec <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004896:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <HAL_I2C_MspInit+0x84>)
 8004898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489a:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <HAL_I2C_MspInit+0x84>)
 800489c:	2101      	movs	r1, #1
 800489e:	430a      	orrs	r2, r1
 80048a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048a2:	4b15      	ldr	r3, [pc, #84]	@ (80048f8 <HAL_I2C_MspInit+0x84>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	2201      	movs	r2, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	22c0      	movs	r2, #192	@ 0xc0
 80048b2:	00d2      	lsls	r2, r2, #3
 80048b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048b6:	0021      	movs	r1, r4
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	2212      	movs	r2, #18
 80048bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c4:	187b      	adds	r3, r7, r1
 80048c6:	2203      	movs	r2, #3
 80048c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	2206      	movs	r2, #6
 80048ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d0:	187a      	adds	r2, r7, r1
 80048d2:	23a0      	movs	r3, #160	@ 0xa0
 80048d4:	05db      	lsls	r3, r3, #23
 80048d6:	0011      	movs	r1, r2
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fb39 	bl	8004f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_I2C_MspInit+0x84>)
 80048e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_I2C_MspInit+0x84>)
 80048e4:	2180      	movs	r1, #128	@ 0x80
 80048e6:	0389      	lsls	r1, r1, #14
 80048e8:	430a      	orrs	r2, r1
 80048ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b009      	add	sp, #36	@ 0x24
 80048f2:	bd90      	pop	{r4, r7, pc}
 80048f4:	40005400 	.word	0x40005400
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a06      	ldr	r2, [pc, #24]	@ (8004924 <HAL_RTC_MspInit+0x28>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d106      	bne.n	800491c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RTC_MspInit+0x2c>)
 8004910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RTC_MspInit+0x2c>)
 8004914:	2180      	movs	r1, #128	@ 0x80
 8004916:	02c9      	lsls	r1, r1, #11
 8004918:	430a      	orrs	r2, r1
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40002800 	.word	0x40002800
 8004928:	40021000 	.word	0x40021000

0800492c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	240c      	movs	r4, #12
 8004936:	193b      	adds	r3, r7, r4
 8004938:	0018      	movs	r0, r3
 800493a:	2314      	movs	r3, #20
 800493c:	001a      	movs	r2, r3
 800493e:	2100      	movs	r1, #0
 8004940:	f008 f80c 	bl	800c95c <memset>
  if(hspi->Instance==SPI2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a18      	ldr	r2, [pc, #96]	@ (80049ac <HAL_SPI_MspInit+0x80>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d129      	bne.n	80049a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800494e:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <HAL_SPI_MspInit+0x84>)
 8004950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <HAL_SPI_MspInit+0x84>)
 8004954:	2180      	movs	r1, #128	@ 0x80
 8004956:	01c9      	lsls	r1, r1, #7
 8004958:	430a      	orrs	r2, r1
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <HAL_SPI_MspInit+0x84>)
 800495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <HAL_SPI_MspInit+0x84>)
 8004962:	2102      	movs	r1, #2
 8004964:	430a      	orrs	r2, r1
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004968:	4b11      	ldr	r3, [pc, #68]	@ (80049b0 <HAL_SPI_MspInit+0x84>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	2202      	movs	r2, #2
 800496e:	4013      	ands	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = cs_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004974:	193b      	adds	r3, r7, r4
 8004976:	22f0      	movs	r2, #240	@ 0xf0
 8004978:	0212      	lsls	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	0021      	movs	r1, r4
 800497e:	187b      	adds	r3, r7, r1
 8004980:	2202      	movs	r2, #2
 8004982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	187b      	adds	r3, r7, r1
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2203      	movs	r2, #3
 800498e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004990:	187b      	adds	r3, r7, r1
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004996:	187b      	adds	r3, r7, r1
 8004998:	4a06      	ldr	r2, [pc, #24]	@ (80049b4 <HAL_SPI_MspInit+0x88>)
 800499a:	0019      	movs	r1, r3
 800499c:	0010      	movs	r0, r2
 800499e:	f000 fad7 	bl	8004f50 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b009      	add	sp, #36	@ 0x24
 80049a8:	bd90      	pop	{r4, r7, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	40003800 	.word	0x40003800
 80049b0:	40021000 	.word	0x40021000
 80049b4:	50000400 	.word	0x50000400

080049b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b089      	sub	sp, #36	@ 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c0:	240c      	movs	r4, #12
 80049c2:	193b      	adds	r3, r7, r4
 80049c4:	0018      	movs	r0, r3
 80049c6:	2314      	movs	r3, #20
 80049c8:	001a      	movs	r2, r3
 80049ca:	2100      	movs	r1, #0
 80049cc:	f007 ffc6 	bl	800c95c <memset>
  if(huart->Instance==USART2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <HAL_UART_MspInit+0x80>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d129      	bne.n	8004a2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049da:	4b18      	ldr	r3, [pc, #96]	@ (8004a3c <HAL_UART_MspInit+0x84>)
 80049dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049de:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <HAL_UART_MspInit+0x84>)
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0289      	lsls	r1, r1, #10
 80049e4:	430a      	orrs	r2, r1
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e8:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <HAL_UART_MspInit+0x84>)
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <HAL_UART_MspInit+0x84>)
 80049ee:	2101      	movs	r1, #1
 80049f0:	430a      	orrs	r2, r1
 80049f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049f4:	4b11      	ldr	r3, [pc, #68]	@ (8004a3c <HAL_UART_MspInit+0x84>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	2201      	movs	r2, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a00:	0021      	movs	r1, r4
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	220c      	movs	r2, #12
 8004a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a14:	187b      	adds	r3, r7, r1
 8004a16:	2203      	movs	r2, #3
 8004a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004a1a:	187b      	adds	r3, r7, r1
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a20:	187a      	adds	r2, r7, r1
 8004a22:	23a0      	movs	r3, #160	@ 0xa0
 8004a24:	05db      	lsls	r3, r3, #23
 8004a26:	0011      	movs	r1, r2
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 fa91 	bl	8004f50 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b009      	add	sp, #36	@ 0x24
 8004a34:	bd90      	pop	{r4, r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	40004400 	.word	0x40004400
 8004a3c:	40021000 	.word	0x40021000

08004a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	e7fd      	b.n	8004a44 <NMI_Handler+0x4>

08004a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a4c:	46c0      	nop			@ (mov r8, r8)
 8004a4e:	e7fd      	b.n	8004a4c <HardFault_Handler+0x4>

08004a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a68:	f000 f954 	bl	8004d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(temp_Pin);
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fc04 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	019b      	lsls	r3, r3, #6
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fbff 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  return 1;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_kill>:

int _kill(int pid, int sig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aa6:	f007 ffb3 	bl	800ca10 <__errno>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	2216      	movs	r2, #22
 8004aae:	601a      	str	r2, [r3, #0]
  return -1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	425b      	negs	r3, r3
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_exit>:

void _exit (int status)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	425a      	negs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff ffe5 	bl	8004a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	e7fd      	b.n	8004ad2 <_exit+0x16>

08004ad6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e00a      	b.n	8004afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ae8:	e000      	b.n	8004aec <_read+0x16>
 8004aea:	bf00      	nop
 8004aec:	0001      	movs	r1, r0
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	60ba      	str	r2, [r7, #8]
 8004af4:	b2ca      	uxtb	r2, r1
 8004af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3301      	adds	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	dbf0      	blt.n	8004ae8 <_read+0x12>
  }

  return len;
 8004b06:	687b      	ldr	r3, [r7, #4]
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b006      	add	sp, #24
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e009      	b.n	8004b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	60ba      	str	r2, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	e000      	b.n	8004b30 <_write+0x20>
 8004b2e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	dbf1      	blt.n	8004b22 <_write+0x12>
  }
  return len;
 8004b3e:	687b      	ldr	r3, [r7, #4]
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b006      	add	sp, #24
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_close>:

int _close(int file)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	425b      	negs	r3, r3
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	0192      	lsls	r2, r2, #6
 8004b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_isatty>:

int _isatty(int file)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b80:	2301      	movs	r3, #1
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b004      	add	sp, #16
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ba8:	4a14      	ldr	r2, [pc, #80]	@ (8004bfc <_sbrk+0x5c>)
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <_sbrk+0x60>)
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bb4:	4b13      	ldr	r3, [pc, #76]	@ (8004c04 <_sbrk+0x64>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <_sbrk+0x64>)
 8004bbe:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <_sbrk+0x68>)
 8004bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <_sbrk+0x64>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	18d3      	adds	r3, r2, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d207      	bcs.n	8004be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bd0:	f007 ff1e 	bl	800ca10 <__errno>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	425b      	negs	r3, r3
 8004bde:	e009      	b.n	8004bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004be0:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <_sbrk+0x64>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004be6:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <_sbrk+0x64>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	18d2      	adds	r2, r2, r3
 8004bee:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <_sbrk+0x64>)
 8004bf0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20005000 	.word	0x20005000
 8004c00:	00000400 	.word	0x00000400
 8004c04:	200009f8 	.word	0x200009f8
 8004c08:	20000b98 	.word	0x20000b98

08004c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004c18:	480d      	ldr	r0, [pc, #52]	@ (8004c50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c1c:	f7ff fff6 	bl	8004c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c20:	480c      	ldr	r0, [pc, #48]	@ (8004c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c22:	490d      	ldr	r1, [pc, #52]	@ (8004c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c24:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <LoopForever+0xe>)
  movs r3, #0
 8004c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c28:	e002      	b.n	8004c30 <LoopCopyDataInit>

08004c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c2e:	3304      	adds	r3, #4

08004c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c34:	d3f9      	bcc.n	8004c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c36:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c38:	4c0a      	ldr	r4, [pc, #40]	@ (8004c64 <LoopForever+0x16>)
  movs r3, #0
 8004c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c3c:	e001      	b.n	8004c42 <LoopFillZerobss>

08004c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c40:	3204      	adds	r2, #4

08004c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c44:	d3fb      	bcc.n	8004c3e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004c46:	f007 fee9 	bl	800ca1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c4a:	f7ff f911 	bl	8003e70 <main>

08004c4e <LoopForever>:

LoopForever:
    b LoopForever
 8004c4e:	e7fe      	b.n	8004c4e <LoopForever>
   ldr   r0, =_estack
 8004c50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c58:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004c5c:	08010d70 	.word	0x08010d70
  ldr r2, =_sbss
 8004c60:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004c64:	20000b94 	.word	0x20000b94

08004c68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c68:	e7fe      	b.n	8004c68 <ADC1_COMP_IRQHandler>
	...

08004c6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c72:	1dfb      	adds	r3, r7, #7
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <HAL_Init+0x3c>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <HAL_Init+0x3c>)
 8004c7e:	2140      	movs	r1, #64	@ 0x40
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c84:	2000      	movs	r0, #0
 8004c86:	f000 f811 	bl	8004cac <HAL_InitTick>
 8004c8a:	1e03      	subs	r3, r0, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e001      	b.n	8004c9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c96:	f7ff fdd9 	bl	800484c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c9a:	1dfb      	adds	r3, r7, #7
 8004c9c:	781b      	ldrb	r3, [r3, #0]
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b002      	add	sp, #8
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb4:	4b14      	ldr	r3, [pc, #80]	@ (8004d08 <HAL_InitTick+0x5c>)
 8004cb6:	681c      	ldr	r4, [r3, #0]
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_InitTick+0x60>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	23fa      	movs	r3, #250	@ 0xfa
 8004cc0:	0098      	lsls	r0, r3, #2
 8004cc2:	f7fb fa3d 	bl	8000140 <__udivsi3>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	0019      	movs	r1, r3
 8004cca:	0020      	movs	r0, r4
 8004ccc:	f7fb fa38 	bl	8000140 <__udivsi3>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 f92f 	bl	8004f36 <HAL_SYSTICK_Config>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e00f      	b.n	8004d00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d80b      	bhi.n	8004cfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	425b      	negs	r3, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f8fc 	bl	8004eec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_InitTick+0x64>)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b003      	add	sp, #12
 8004d06:	bd90      	pop	{r4, r7, pc}
 8004d08:	20000010 	.word	0x20000010
 8004d0c:	20000018 	.word	0x20000018
 8004d10:	20000014 	.word	0x20000014

08004d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_IncTick+0x1c>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_IncTick+0x20>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <HAL_IncTick+0x20>)
 8004d26:	601a      	str	r2, [r3, #0]
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	20000018 	.word	0x20000018
 8004d34:	200009fc 	.word	0x200009fc

08004d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d3c:	4b02      	ldr	r3, [pc, #8]	@ (8004d48 <HAL_GetTick+0x10>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	200009fc 	.word	0x200009fc

08004d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	d005      	beq.n	8004d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <HAL_Delay+0x44>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	f7ff ffe0 	bl	8004d38 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d8f7      	bhi.n	8004d74 <HAL_Delay+0x28>
  {
  }
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	20000018 	.word	0x20000018

08004d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004da0:	1dfb      	adds	r3, r7, #7
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da6:	d809      	bhi.n	8004dbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	001a      	movs	r2, r3
 8004dae:	231f      	movs	r3, #31
 8004db0:	401a      	ands	r2, r3
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <__NVIC_EnableIRQ+0x30>)
 8004db4:	2101      	movs	r1, #1
 8004db6:	4091      	lsls	r1, r2
 8004db8:	000a      	movs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
  }
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	0002      	movs	r2, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ddc:	d828      	bhi.n	8004e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dde:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <__NVIC_SetPriority+0xd4>)
 8004de0:	1dfb      	adds	r3, r7, #7
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	33c0      	adds	r3, #192	@ 0xc0
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	589b      	ldr	r3, [r3, r2]
 8004dee:	1dfa      	adds	r2, r7, #7
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	0011      	movs	r1, r2
 8004df4:	2203      	movs	r2, #3
 8004df6:	400a      	ands	r2, r1
 8004df8:	00d2      	lsls	r2, r2, #3
 8004dfa:	21ff      	movs	r1, #255	@ 0xff
 8004dfc:	4091      	lsls	r1, r2
 8004dfe:	000a      	movs	r2, r1
 8004e00:	43d2      	mvns	r2, r2
 8004e02:	401a      	ands	r2, r3
 8004e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	22ff      	movs	r2, #255	@ 0xff
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0018      	movs	r0, r3
 8004e14:	2303      	movs	r3, #3
 8004e16:	4003      	ands	r3, r0
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e1c:	481f      	ldr	r0, [pc, #124]	@ (8004e9c <__NVIC_SetPriority+0xd4>)
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	430a      	orrs	r2, r1
 8004e28:	33c0      	adds	r3, #192	@ 0xc0
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e2e:	e031      	b.n	8004e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <__NVIC_SetPriority+0xd8>)
 8004e32:	1dfb      	adds	r3, r7, #7
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	0019      	movs	r1, r3
 8004e38:	230f      	movs	r3, #15
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	3b08      	subs	r3, #8
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3306      	adds	r3, #6
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	3304      	adds	r3, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1dfa      	adds	r2, r7, #7
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	0011      	movs	r1, r2
 8004e50:	2203      	movs	r2, #3
 8004e52:	400a      	ands	r2, r1
 8004e54:	00d2      	lsls	r2, r2, #3
 8004e56:	21ff      	movs	r1, #255	@ 0xff
 8004e58:	4091      	lsls	r1, r2
 8004e5a:	000a      	movs	r2, r1
 8004e5c:	43d2      	mvns	r2, r2
 8004e5e:	401a      	ands	r2, r3
 8004e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	22ff      	movs	r2, #255	@ 0xff
 8004e68:	401a      	ands	r2, r3
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	2303      	movs	r3, #3
 8004e72:	4003      	ands	r3, r0
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e78:	4809      	ldr	r0, [pc, #36]	@ (8004ea0 <__NVIC_SetPriority+0xd8>)
 8004e7a:	1dfb      	adds	r3, r7, #7
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	001c      	movs	r4, r3
 8004e80:	230f      	movs	r3, #15
 8004e82:	4023      	ands	r3, r4
 8004e84:	3b08      	subs	r3, #8
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	3306      	adds	r3, #6
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	18c3      	adds	r3, r0, r3
 8004e90:	3304      	adds	r3, #4
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b003      	add	sp, #12
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	e000e100 	.word	0xe000e100
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	045b      	lsls	r3, r3, #17
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d301      	bcc.n	8004ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e010      	b.n	8004ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	425b      	negs	r3, r3
 8004ec8:	2103      	movs	r1, #3
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff ff7c 	bl	8004dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed0:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ed8:	2207      	movs	r2, #7
 8004eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	e000e010 	.word	0xe000e010

08004eec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	1c02      	adds	r2, r0, #0
 8004efc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	0011      	movs	r1, r2
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7ff ff5d 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	1dfb      	adds	r3, r7, #7
 8004f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f22:	1dfb      	adds	r3, r7, #7
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7ff ff33 	bl	8004d94 <__NVIC_EnableIRQ>
}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff ffaf 	bl	8004ea4 <SysTick_Config>
 8004f46:	0003      	movs	r3, r0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f66:	e155      	b.n	8005214 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4091      	lsls	r1, r2
 8004f72:	000a      	movs	r2, r1
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d100      	bne.n	8004f80 <HAL_GPIO_Init+0x30>
 8004f7e:	e146      	b.n	800520e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2203      	movs	r2, #3
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d005      	beq.n	8004f98 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d130      	bne.n	8004ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	0013      	movs	r3, r2
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fce:	2201      	movs	r2, #1
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	0013      	movs	r3, r2
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	409a      	lsls	r2, r3
 8004fec:	0013      	movs	r3, r2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2203      	movs	r2, #3
 8005000:	4013      	ands	r3, r2
 8005002:	2b03      	cmp	r3, #3
 8005004:	d017      	beq.n	8005036 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	409a      	lsls	r2, r3
 8005014:	0013      	movs	r3, r2
 8005016:	43da      	mvns	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	0013      	movs	r3, r2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2203      	movs	r2, #3
 800503c:	4013      	ands	r3, r2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d123      	bne.n	800508a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	08da      	lsrs	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3208      	adds	r2, #8
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	58d3      	ldr	r3, [r2, r3]
 800504e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2207      	movs	r2, #7
 8005054:	4013      	ands	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	220f      	movs	r2, #15
 800505a:	409a      	lsls	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	43da      	mvns	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2107      	movs	r1, #7
 800506e:	400b      	ands	r3, r1
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	409a      	lsls	r2, r3
 8005074:	0013      	movs	r3, r2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	08da      	lsrs	r2, r3, #3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3208      	adds	r2, #8
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	6939      	ldr	r1, [r7, #16]
 8005088:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	2203      	movs	r2, #3
 8005096:	409a      	lsls	r2, r3
 8005098:	0013      	movs	r3, r2
 800509a:	43da      	mvns	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4013      	ands	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2203      	movs	r2, #3
 80050a8:	401a      	ands	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	0013      	movs	r3, r2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	23c0      	movs	r3, #192	@ 0xc0
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	4013      	ands	r3, r2
 80050c8:	d100      	bne.n	80050cc <HAL_GPIO_Init+0x17c>
 80050ca:	e0a0      	b.n	800520e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050cc:	4b57      	ldr	r3, [pc, #348]	@ (800522c <HAL_GPIO_Init+0x2dc>)
 80050ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d0:	4b56      	ldr	r3, [pc, #344]	@ (800522c <HAL_GPIO_Init+0x2dc>)
 80050d2:	2101      	movs	r1, #1
 80050d4:	430a      	orrs	r2, r1
 80050d6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d8:	4a55      	ldr	r2, [pc, #340]	@ (8005230 <HAL_GPIO_Init+0x2e0>)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	3302      	adds	r3, #2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	589b      	ldr	r3, [r3, r2]
 80050e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2203      	movs	r2, #3
 80050ea:	4013      	ands	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	220f      	movs	r2, #15
 80050f0:	409a      	lsls	r2, r3
 80050f2:	0013      	movs	r3, r2
 80050f4:	43da      	mvns	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	23a0      	movs	r3, #160	@ 0xa0
 8005100:	05db      	lsls	r3, r3, #23
 8005102:	429a      	cmp	r2, r3
 8005104:	d01f      	beq.n	8005146 <HAL_GPIO_Init+0x1f6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a4a      	ldr	r2, [pc, #296]	@ (8005234 <HAL_GPIO_Init+0x2e4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d019      	beq.n	8005142 <HAL_GPIO_Init+0x1f2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a49      	ldr	r2, [pc, #292]	@ (8005238 <HAL_GPIO_Init+0x2e8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_GPIO_Init+0x1ee>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a48      	ldr	r2, [pc, #288]	@ (800523c <HAL_GPIO_Init+0x2ec>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_GPIO_Init+0x1ea>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a47      	ldr	r2, [pc, #284]	@ (8005240 <HAL_GPIO_Init+0x2f0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <HAL_GPIO_Init+0x1e6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a46      	ldr	r2, [pc, #280]	@ (8005244 <HAL_GPIO_Init+0x2f4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_GPIO_Init+0x1e2>
 800512e:	2305      	movs	r3, #5
 8005130:	e00a      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005132:	2306      	movs	r3, #6
 8005134:	e008      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005136:	2304      	movs	r3, #4
 8005138:	e006      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 800513a:	2303      	movs	r3, #3
 800513c:	e004      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 800513e:	2302      	movs	r3, #2
 8005140:	e002      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005146:	2300      	movs	r3, #0
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	2103      	movs	r1, #3
 800514c:	400a      	ands	r2, r1
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	4093      	lsls	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005158:	4935      	ldr	r1, [pc, #212]	@ (8005230 <HAL_GPIO_Init+0x2e0>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	3302      	adds	r3, #2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005166:	4b38      	ldr	r3, [pc, #224]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	43da      	mvns	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	035b      	lsls	r3, r3, #13
 800517e:	4013      	ands	r3, r2
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800518a:	4b2f      	ldr	r3, [pc, #188]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005190:	4b2d      	ldr	r3, [pc, #180]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	43da      	mvns	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	2380      	movs	r3, #128	@ 0x80
 80051a6:	039b      	lsls	r3, r3, #14
 80051a8:	4013      	ands	r3, r2
 80051aa:	d003      	beq.n	80051b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051b4:	4b24      	ldr	r3, [pc, #144]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80051ba:	4b23      	ldr	r3, [pc, #140]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	43da      	mvns	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4013      	ands	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	2380      	movs	r3, #128	@ 0x80
 80051d0:	029b      	lsls	r3, r3, #10
 80051d2:	4013      	ands	r3, r2
 80051d4:	d003      	beq.n	80051de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051de:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e4:	4b18      	ldr	r3, [pc, #96]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4013      	ands	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	025b      	lsls	r3, r3, #9
 80051fc:	4013      	ands	r3, r2
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005208:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <HAL_GPIO_Init+0x2f8>)
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	40da      	lsrs	r2, r3
 800521c:	1e13      	subs	r3, r2, #0
 800521e:	d000      	beq.n	8005222 <HAL_GPIO_Init+0x2d2>
 8005220:	e6a2      	b.n	8004f68 <HAL_GPIO_Init+0x18>
  }
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	46c0      	nop			@ (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b006      	add	sp, #24
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	40010000 	.word	0x40010000
 8005234:	50000400 	.word	0x50000400
 8005238:	50000800 	.word	0x50000800
 800523c:	50000c00 	.word	0x50000c00
 8005240:	50001000 	.word	0x50001000
 8005244:	50001c00 	.word	0x50001c00
 8005248:	40010400 	.word	0x40010400

0800524c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	0008      	movs	r0, r1
 8005256:	0011      	movs	r1, r2
 8005258:	1cbb      	adds	r3, r7, #2
 800525a:	1c02      	adds	r2, r0, #0
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	1c7b      	adds	r3, r7, #1
 8005260:	1c0a      	adds	r2, r1, #0
 8005262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005264:	1c7b      	adds	r3, r7, #1
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800526c:	1cbb      	adds	r3, r7, #2
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005274:	e003      	b.n	800527e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005276:	1cbb      	adds	r3, r7, #2
 8005278:	881a      	ldrh	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b002      	add	sp, #8
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	0002      	movs	r2, r0
 8005290:	1dbb      	adds	r3, r7, #6
 8005292:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005294:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	1dba      	adds	r2, r7, #6
 800529a:	8812      	ldrh	r2, [r2, #0]
 800529c:	4013      	ands	r3, r2
 800529e:	d008      	beq.n	80052b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80052a2:	1dba      	adds	r2, r7, #6
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052a8:	1dbb      	adds	r3, r7, #6
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff f8c5 	bl	800443c <HAL_GPIO_EXTI_Callback>
  }
}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			@ (mov r8, r8)
 80052bc:	40010400 	.word	0x40010400

080052c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e082      	b.n	80053d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2241      	movs	r2, #65	@ 0x41
 80052d6:	5c9b      	ldrb	r3, [r3, r2]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d107      	bne.n	80052ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2240      	movs	r2, #64	@ 0x40
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff fac3 	bl	8004874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2241      	movs	r2, #65	@ 0x41
 80052f2:	2124      	movs	r1, #36	@ 0x24
 80052f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	438a      	bics	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4934      	ldr	r1, [pc, #208]	@ (80053e0 <HAL_I2C_Init+0x120>)
 8005310:	400a      	ands	r2, r1
 8005312:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4931      	ldr	r1, [pc, #196]	@ (80053e4 <HAL_I2C_Init+0x124>)
 8005320:	400a      	ands	r2, r1
 8005322:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d108      	bne.n	800533e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2180      	movs	r1, #128	@ 0x80
 8005336:	0209      	lsls	r1, r1, #8
 8005338:	430a      	orrs	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e007      	b.n	800534e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2184      	movs	r1, #132	@ 0x84
 8005348:	0209      	lsls	r1, r1, #8
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d104      	bne.n	8005360 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2280      	movs	r2, #128	@ 0x80
 800535c:	0112      	lsls	r2, r2, #4
 800535e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	491f      	ldr	r1, [pc, #124]	@ (80053e8 <HAL_I2C_Init+0x128>)
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	491a      	ldr	r1, [pc, #104]	@ (80053e4 <HAL_I2C_Init+0x124>)
 800537c:	400a      	ands	r2, r1
 800537e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	431a      	orrs	r2, r3
 800538a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69d9      	ldr	r1, [r3, #28]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2101      	movs	r1, #1
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2241      	movs	r2, #65	@ 0x41
 80053c4:	2120      	movs	r1, #32
 80053c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2242      	movs	r2, #66	@ 0x42
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b002      	add	sp, #8
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	f0ffffff 	.word	0xf0ffffff
 80053e4:	ffff7fff 	.word	0xffff7fff
 80053e8:	02008000 	.word	0x02008000

080053ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b089      	sub	sp, #36	@ 0x24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	000c      	movs	r4, r1
 80053f6:	0010      	movs	r0, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	230a      	movs	r3, #10
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	1c22      	adds	r2, r4, #0
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	2308      	movs	r3, #8
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	1c02      	adds	r2, r0, #0
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	1dbb      	adds	r3, r7, #6
 800540c:	1c0a      	adds	r2, r1, #0
 800540e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2241      	movs	r2, #65	@ 0x41
 8005414:	5c9b      	ldrb	r3, [r3, r2]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	d000      	beq.n	800541e <HAL_I2C_Mem_Write+0x32>
 800541c:	e10c      	b.n	8005638 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_I2C_Mem_Write+0x42>
 8005424:	232c      	movs	r3, #44	@ 0x2c
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2280      	movs	r2, #128	@ 0x80
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0ff      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2240      	movs	r2, #64	@ 0x40
 800543e:	5c9b      	ldrb	r3, [r3, r2]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_I2C_Mem_Write+0x5c>
 8005444:	2302      	movs	r3, #2
 8005446:	e0f8      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	2101      	movs	r1, #1
 800544e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005450:	f7ff fc72 	bl	8004d38 <HAL_GetTick>
 8005454:	0003      	movs	r3, r0
 8005456:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	0219      	lsls	r1, r3, #8
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	2319      	movs	r3, #25
 8005464:	2201      	movs	r2, #1
 8005466:	f000 fb0b 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0e3      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2241      	movs	r2, #65	@ 0x41
 8005476:	2121      	movs	r1, #33	@ 0x21
 8005478:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2242      	movs	r2, #66	@ 0x42
 800547e:	2140      	movs	r1, #64	@ 0x40
 8005480:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800548c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	222c      	movs	r2, #44	@ 0x2c
 8005492:	18ba      	adds	r2, r7, r2
 8005494:	8812      	ldrh	r2, [r2, #0]
 8005496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800549e:	1dbb      	adds	r3, r7, #6
 80054a0:	881c      	ldrh	r4, [r3, #0]
 80054a2:	2308      	movs	r3, #8
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	230a      	movs	r3, #10
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	8819      	ldrh	r1, [r3, #0]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	0023      	movs	r3, r4
 80054ba:	f000 f9f9 	bl	80058b0 <I2C_RequestMemoryWrite>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d005      	beq.n	80054ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2240      	movs	r2, #64	@ 0x40
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0b5      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2bff      	cmp	r3, #255	@ 0xff
 80054d6:	d911      	bls.n	80054fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	22ff      	movs	r2, #255	@ 0xff
 80054dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	045c      	lsls	r4, r3, #17
 80054e8:	230a      	movs	r3, #10
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	8819      	ldrh	r1, [r3, #0]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	0023      	movs	r3, r4
 80054f6:	f000 fc93 	bl	8005e20 <I2C_TransferConfig>
 80054fa:	e012      	b.n	8005522 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	b2da      	uxtb	r2, r3
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	049c      	lsls	r4, r3, #18
 8005510:	230a      	movs	r3, #10
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	8819      	ldrh	r1, [r3, #0]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	2300      	movs	r3, #0
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	0023      	movs	r3, r4
 800551e:	f000 fc7f 	bl	8005e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	0018      	movs	r0, r3
 800552a:	f000 faf7 	bl	8005b1c <I2C_WaitOnTXISFlagUntilTimeout>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e081      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03a      	beq.n	80055e6 <HAL_I2C_Mem_Write+0x1fa>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d136      	bne.n	80055e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	0013      	movs	r3, r2
 8005582:	2200      	movs	r2, #0
 8005584:	2180      	movs	r1, #128	@ 0x80
 8005586:	f000 fa7b 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e053      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	2bff      	cmp	r3, #255	@ 0xff
 800559a:	d911      	bls.n	80055c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	22ff      	movs	r2, #255	@ 0xff
 80055a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	045c      	lsls	r4, r3, #17
 80055ac:	230a      	movs	r3, #10
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	8819      	ldrh	r1, [r3, #0]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	0023      	movs	r3, r4
 80055ba:	f000 fc31 	bl	8005e20 <I2C_TransferConfig>
 80055be:	e012      	b.n	80055e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	049c      	lsls	r4, r3, #18
 80055d4:	230a      	movs	r3, #10
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	8819      	ldrh	r1, [r3, #0]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	2300      	movs	r3, #0
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	0023      	movs	r3, r4
 80055e2:	f000 fc1d 	bl	8005e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d198      	bne.n	8005522 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 fad6 	bl	8005ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055fc:	1e03      	subs	r3, r0, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e01a      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2220      	movs	r2, #32
 800560a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	490b      	ldr	r1, [pc, #44]	@ (8005644 <HAL_I2C_Mem_Write+0x258>)
 8005618:	400a      	ands	r2, r1
 800561a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2241      	movs	r2, #65	@ 0x41
 8005620:	2120      	movs	r1, #32
 8005622:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2242      	movs	r2, #66	@ 0x42
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	b007      	add	sp, #28
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	fe00e800 	.word	0xfe00e800

08005648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b089      	sub	sp, #36	@ 0x24
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	000c      	movs	r4, r1
 8005652:	0010      	movs	r0, r2
 8005654:	0019      	movs	r1, r3
 8005656:	230a      	movs	r3, #10
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	1c22      	adds	r2, r4, #0
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	2308      	movs	r3, #8
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	1c02      	adds	r2, r0, #0
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	1dbb      	adds	r3, r7, #6
 8005668:	1c0a      	adds	r2, r1, #0
 800566a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2241      	movs	r2, #65	@ 0x41
 8005670:	5c9b      	ldrb	r3, [r3, r2]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b20      	cmp	r3, #32
 8005676:	d000      	beq.n	800567a <HAL_I2C_Mem_Read+0x32>
 8005678:	e110      	b.n	800589c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_I2C_Mem_Read+0x42>
 8005680:	232c      	movs	r3, #44	@ 0x2c
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2280      	movs	r2, #128	@ 0x80
 800568e:	0092      	lsls	r2, r2, #2
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e103      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2240      	movs	r2, #64	@ 0x40
 800569a:	5c9b      	ldrb	r3, [r3, r2]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_I2C_Mem_Read+0x5c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0fc      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2240      	movs	r2, #64	@ 0x40
 80056a8:	2101      	movs	r1, #1
 80056aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ac:	f7ff fb44 	bl	8004d38 <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	0219      	lsls	r1, r3, #8
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2319      	movs	r3, #25
 80056c0:	2201      	movs	r2, #1
 80056c2:	f000 f9dd 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	1e03      	subs	r3, r0, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0e7      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2241      	movs	r2, #65	@ 0x41
 80056d2:	2122      	movs	r1, #34	@ 0x22
 80056d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2242      	movs	r2, #66	@ 0x42
 80056da:	2140      	movs	r1, #64	@ 0x40
 80056dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	222c      	movs	r2, #44	@ 0x2c
 80056ee:	18ba      	adds	r2, r7, r2
 80056f0:	8812      	ldrh	r2, [r2, #0]
 80056f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056fa:	1dbb      	adds	r3, r7, #6
 80056fc:	881c      	ldrh	r4, [r3, #0]
 80056fe:	2308      	movs	r3, #8
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	230a      	movs	r3, #10
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	8819      	ldrh	r1, [r3, #0]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	0023      	movs	r3, r4
 8005716:	f000 f92f 	bl	8005978 <I2C_RequestMemoryRead>
 800571a:	1e03      	subs	r3, r0, #0
 800571c:	d005      	beq.n	800572a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2240      	movs	r2, #64	@ 0x40
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0b9      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	2bff      	cmp	r3, #255	@ 0xff
 8005732:	d911      	bls.n	8005758 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	22ff      	movs	r2, #255	@ 0xff
 8005738:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	b2da      	uxtb	r2, r3
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	045c      	lsls	r4, r3, #17
 8005744:	230a      	movs	r3, #10
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	8819      	ldrh	r1, [r3, #0]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	4b56      	ldr	r3, [pc, #344]	@ (80058a8 <HAL_I2C_Mem_Read+0x260>)
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	0023      	movs	r3, r4
 8005752:	f000 fb65 	bl	8005e20 <I2C_TransferConfig>
 8005756:	e012      	b.n	800577e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	049c      	lsls	r4, r3, #18
 800576c:	230a      	movs	r3, #10
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	8819      	ldrh	r1, [r3, #0]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	4b4c      	ldr	r3, [pc, #304]	@ (80058a8 <HAL_I2C_Mem_Read+0x260>)
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	0023      	movs	r3, r4
 800577a:	f000 fb51 	bl	8005e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	0013      	movs	r3, r2
 8005788:	2200      	movs	r2, #0
 800578a:	2104      	movs	r1, #4
 800578c:	f000 f978 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e082      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03a      	beq.n	800584a <HAL_I2C_Mem_Read+0x202>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d136      	bne.n	800584a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	0013      	movs	r3, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	f000 f949 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	1e03      	subs	r3, r0, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e053      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2bff      	cmp	r3, #255	@ 0xff
 80057fe:	d911      	bls.n	8005824 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	22ff      	movs	r2, #255	@ 0xff
 8005804:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	b2da      	uxtb	r2, r3
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	045c      	lsls	r4, r3, #17
 8005810:	230a      	movs	r3, #10
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	8819      	ldrh	r1, [r3, #0]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	0023      	movs	r3, r4
 800581e:	f000 faff 	bl	8005e20 <I2C_TransferConfig>
 8005822:	e012      	b.n	800584a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	b2da      	uxtb	r2, r3
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	049c      	lsls	r4, r3, #18
 8005838:	230a      	movs	r3, #10
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	8819      	ldrh	r1, [r3, #0]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	0023      	movs	r3, r4
 8005846:	f000 faeb 	bl	8005e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d194      	bne.n	800577e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	0018      	movs	r0, r3
 800585c:	f000 f9a4 	bl	8005ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005860:	1e03      	subs	r3, r0, #0
 8005862:	d001      	beq.n	8005868 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e01a      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2220      	movs	r2, #32
 800586e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	490c      	ldr	r1, [pc, #48]	@ (80058ac <HAL_I2C_Mem_Read+0x264>)
 800587c:	400a      	ands	r2, r1
 800587e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2241      	movs	r2, #65	@ 0x41
 8005884:	2120      	movs	r1, #32
 8005886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2242      	movs	r2, #66	@ 0x42
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2240      	movs	r2, #64	@ 0x40
 8005894:	2100      	movs	r1, #0
 8005896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b007      	add	sp, #28
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	80002400 	.word	0x80002400
 80058ac:	fe00e800 	.word	0xfe00e800

080058b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	000c      	movs	r4, r1
 80058ba:	0010      	movs	r0, r2
 80058bc:	0019      	movs	r1, r3
 80058be:	250a      	movs	r5, #10
 80058c0:	197b      	adds	r3, r7, r5
 80058c2:	1c22      	adds	r2, r4, #0
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	2308      	movs	r3, #8
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	1c02      	adds	r2, r0, #0
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	1dbb      	adds	r3, r7, #6
 80058d0:	1c0a      	adds	r2, r1, #0
 80058d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058d4:	1dbb      	adds	r3, r7, #6
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	045c      	lsls	r4, r3, #17
 80058de:	197b      	adds	r3, r7, r5
 80058e0:	8819      	ldrh	r1, [r3, #0]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <I2C_RequestMemoryWrite+0xc4>)
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	0023      	movs	r3, r4
 80058ea:	f000 fa99 	bl	8005e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f0:	6a39      	ldr	r1, [r7, #32]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f000 f911 	bl	8005b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80058fa:	1e03      	subs	r3, r0, #0
 80058fc:	d001      	beq.n	8005902 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e033      	b.n	800596a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005902:	1dbb      	adds	r3, r7, #6
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800590a:	2308      	movs	r3, #8
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	629a      	str	r2, [r3, #40]	@ 0x28
 8005918:	e019      	b.n	800594e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800591a:	2308      	movs	r3, #8
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	6a39      	ldr	r1, [r7, #32]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	0018      	movs	r0, r3
 8005934:	f000 f8f2 	bl	8005b1c <I2C_WaitOnTXISFlagUntilTimeout>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d001      	beq.n	8005940 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e014      	b.n	800596a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005940:	2308      	movs	r3, #8
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	0013      	movs	r3, r2
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	f000 f890 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d001      	beq.n	8005968 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	80002000 	.word	0x80002000

08005978 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005978:	b5b0      	push	{r4, r5, r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	000c      	movs	r4, r1
 8005982:	0010      	movs	r0, r2
 8005984:	0019      	movs	r1, r3
 8005986:	250a      	movs	r5, #10
 8005988:	197b      	adds	r3, r7, r5
 800598a:	1c22      	adds	r2, r4, #0
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	2308      	movs	r3, #8
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	1c02      	adds	r2, r0, #0
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	1dbb      	adds	r3, r7, #6
 8005998:	1c0a      	adds	r2, r1, #0
 800599a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800599c:	1dbb      	adds	r3, r7, #6
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	197b      	adds	r3, r7, r5
 80059a4:	8819      	ldrh	r1, [r3, #0]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	4b23      	ldr	r3, [pc, #140]	@ (8005a38 <I2C_RequestMemoryRead+0xc0>)
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	f000 fa37 	bl	8005e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b4:	6a39      	ldr	r1, [r7, #32]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 f8af 	bl	8005b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d001      	beq.n	80059c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e033      	b.n	8005a2e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c6:	1dbb      	adds	r3, r7, #6
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d107      	bne.n	80059de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ce:	2308      	movs	r3, #8
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28
 80059dc:	e019      	b.n	8005a12 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059de:	2308      	movs	r3, #8
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f2:	6a39      	ldr	r1, [r7, #32]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 f890 	bl	8005b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d001      	beq.n	8005a04 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e014      	b.n	8005a2e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a04:	2308      	movs	r3, #8
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	0013      	movs	r3, r2
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2140      	movs	r1, #64	@ 0x40
 8005a20:	f000 f82e 	bl	8005a80 <I2C_WaitOnFlagUntilTimeout>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d001      	beq.n	8005a2c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b004      	add	sp, #16
 8005a34:	bdb0      	pop	{r4, r5, r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	80002000 	.word	0x80002000

08005a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d103      	bne.n	8005a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2201      	movs	r2, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d007      	beq.n	8005a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2101      	movs	r1, #1
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
  }
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b002      	add	sp, #8
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	1dfb      	adds	r3, r7, #7
 8005a8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a90:	e030      	b.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d02d      	beq.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7ff f94e 	bl	8004d38 <HAL_GetTick>
 8005a9c:	0002      	movs	r2, r0
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d122      	bne.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	425a      	negs	r2, r3
 8005abe:	4153      	adcs	r3, r2
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d113      	bne.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2241      	movs	r2, #65	@ 0x41
 8005adc:	2120      	movs	r1, #32
 8005ade:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2242      	movs	r2, #66	@ 0x42
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2240      	movs	r2, #64	@ 0x40
 8005aec:	2100      	movs	r1, #0
 8005aee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e00f      	b.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	425a      	negs	r2, r3
 8005b04:	4153      	adcs	r3, r2
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	001a      	movs	r2, r3
 8005b0a:	1dfb      	adds	r3, r7, #7
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d0bf      	beq.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b28:	e032      	b.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 f87d 	bl	8005c30 <I2C_IsErrorOccurred>
 8005b36:	1e03      	subs	r3, r0, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e030      	b.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3301      	adds	r3, #1
 8005b42:	d025      	beq.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b44:	f7ff f8f8 	bl	8004d38 <HAL_GetTick>
 8005b48:	0002      	movs	r2, r0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d11a      	bne.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2202      	movs	r2, #2
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d013      	beq.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2241      	movs	r2, #65	@ 0x41
 8005b78:	2120      	movs	r1, #32
 8005b7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2242      	movs	r2, #66	@ 0x42
 8005b80:	2100      	movs	r1, #0
 8005b82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2240      	movs	r2, #64	@ 0x40
 8005b88:	2100      	movs	r1, #0
 8005b8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e007      	b.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2202      	movs	r2, #2
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d1c5      	bne.n	8005b2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb4:	e02f      	b.n	8005c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f837 	bl	8005c30 <I2C_IsErrorOccurred>
 8005bc2:	1e03      	subs	r3, r0, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e02d      	b.n	8005c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7ff f8b5 	bl	8004d38 <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11a      	bne.n	8005c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2220      	movs	r2, #32
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d013      	beq.n	8005c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2241      	movs	r2, #65	@ 0x41
 8005bfe:	2120      	movs	r1, #32
 8005c00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2242      	movs	r2, #66	@ 0x42
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2240      	movs	r2, #64	@ 0x40
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e007      	b.n	8005c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d1c8      	bne.n	8005bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b004      	add	sp, #16
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	@ 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2327      	movs	r3, #39	@ 0x27
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2210      	movs	r2, #16
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <I2C_IsErrorOccurred+0x2e>
 8005c5c:	e079      	b.n	8005d52 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2210      	movs	r2, #16
 8005c64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c66:	e057      	b.n	8005d18 <I2C_IsErrorOccurred+0xe8>
 8005c68:	2227      	movs	r2, #39	@ 0x27
 8005c6a:	18bb      	adds	r3, r7, r2
 8005c6c:	18ba      	adds	r2, r7, r2
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	d04f      	beq.n	8005d18 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c78:	f7ff f85e 	bl	8004d38 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <I2C_IsErrorOccurred+0x5e>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d144      	bne.n	8005d18 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	2380      	movs	r3, #128	@ 0x80
 8005c96:	01db      	lsls	r3, r3, #7
 8005c98:	4013      	ands	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c9c:	2013      	movs	r0, #19
 8005c9e:	183b      	adds	r3, r7, r0
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	2142      	movs	r1, #66	@ 0x42
 8005ca4:	5c52      	ldrb	r2, [r2, r1]
 8005ca6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	2380      	movs	r3, #128	@ 0x80
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d126      	bne.n	8005d0a <I2C_IsErrorOccurred+0xda>
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	01db      	lsls	r3, r3, #7
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d021      	beq.n	8005d0a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d01d      	beq.n	8005d0a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2180      	movs	r1, #128	@ 0x80
 8005cda:	01c9      	lsls	r1, r1, #7
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ce0:	f7ff f82a 	bl	8004d38 <HAL_GetTick>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce8:	e00f      	b.n	8005d0a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005cea:	f7ff f825 	bl	8004d38 <HAL_GetTick>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b19      	cmp	r3, #25
 8005cf6:	d908      	bls.n	8005d0a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d00:	2327      	movs	r3, #39	@ 0x27
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]

              break;
 8005d08:	e006      	b.n	8005d18 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2220      	movs	r2, #32
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d1e8      	bne.n	8005cea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d004      	beq.n	8005d30 <I2C_IsErrorOccurred+0x100>
 8005d26:	2327      	movs	r3, #39	@ 0x27
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d09b      	beq.n	8005c68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d30:	2327      	movs	r3, #39	@ 0x27
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2204      	movs	r2, #4
 8005d46:	4313      	orrs	r3, r2
 8005d48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d4a:	2327      	movs	r3, #39	@ 0x27
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4013      	ands	r3, r2
 8005d62:	d00c      	beq.n	8005d7e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2201      	movs	r2, #1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2280      	movs	r2, #128	@ 0x80
 8005d72:	0052      	lsls	r2, r2, #1
 8005d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d76:	2327      	movs	r3, #39	@ 0x27
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	2380      	movs	r3, #128	@ 0x80
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4013      	ands	r3, r2
 8005d86:	d00c      	beq.n	8005da2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	00d2      	lsls	r2, r2, #3
 8005d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d9a:	2327      	movs	r3, #39	@ 0x27
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	2380      	movs	r3, #128	@ 0x80
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4013      	ands	r3, r2
 8005daa:	d00c      	beq.n	8005dc6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2202      	movs	r2, #2
 8005db0:	4313      	orrs	r3, r2
 8005db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2280      	movs	r2, #128	@ 0x80
 8005dba:	0092      	lsls	r2, r2, #2
 8005dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dbe:	2327      	movs	r3, #39	@ 0x27
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005dc6:	2327      	movs	r3, #39	@ 0x27
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01d      	beq.n	8005e0c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff fe32 	bl	8005a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	490e      	ldr	r1, [pc, #56]	@ (8005e1c <I2C_IsErrorOccurred+0x1ec>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2241      	movs	r2, #65	@ 0x41
 8005df8:	2120      	movs	r1, #32
 8005dfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2242      	movs	r2, #66	@ 0x42
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2240      	movs	r2, #64	@ 0x40
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005e0c:	2327      	movs	r3, #39	@ 0x27
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	781b      	ldrb	r3, [r3, #0]
}
 8005e12:	0018      	movs	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b00a      	add	sp, #40	@ 0x28
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	fe00e800 	.word	0xfe00e800

08005e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	0008      	movs	r0, r1
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	240a      	movs	r4, #10
 8005e30:	193b      	adds	r3, r7, r4
 8005e32:	1c02      	adds	r2, r0, #0
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	2009      	movs	r0, #9
 8005e38:	183b      	adds	r3, r7, r0
 8005e3a:	1c0a      	adds	r2, r1, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e3e:	193b      	adds	r3, r7, r4
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	059b      	lsls	r3, r3, #22
 8005e44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e46:	183b      	adds	r3, r7, r0
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	0419      	lsls	r1, r3, #16
 8005e4c:	23ff      	movs	r3, #255	@ 0xff
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6a:	0d51      	lsrs	r1, r2, #21
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	00d2      	lsls	r2, r2, #3
 8005e70:	400a      	ands	r2, r1
 8005e72:	4907      	ldr	r1, [pc, #28]	@ (8005e90 <I2C_TransferConfig+0x70>)
 8005e74:	430a      	orrs	r2, r1
 8005e76:	43d2      	mvns	r2, r2
 8005e78:	401a      	ands	r2, r3
 8005e7a:	0011      	movs	r1, r2
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b007      	add	sp, #28
 8005e8c:	bd90      	pop	{r4, r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	03ff63ff 	.word	0x03ff63ff

08005e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2241      	movs	r2, #65	@ 0x41
 8005ea2:	5c9b      	ldrb	r3, [r3, r2]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d138      	bne.n	8005f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2240      	movs	r2, #64	@ 0x40
 8005eae:	5c9b      	ldrb	r3, [r3, r2]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e032      	b.n	8005f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2240      	movs	r2, #64	@ 0x40
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2241      	movs	r2, #65	@ 0x41
 8005ec4:	2124      	movs	r1, #36	@ 0x24
 8005ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	438a      	bics	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4911      	ldr	r1, [pc, #68]	@ (8005f28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2101      	movs	r1, #1
 8005f04:	430a      	orrs	r2, r1
 8005f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2241      	movs	r2, #65	@ 0x41
 8005f0c:	2120      	movs	r1, #32
 8005f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2240      	movs	r2, #64	@ 0x40
 8005f14:	2100      	movs	r1, #0
 8005f16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b002      	add	sp, #8
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	ffffefff 	.word	0xffffefff

08005f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2241      	movs	r2, #65	@ 0x41
 8005f3a:	5c9b      	ldrb	r3, [r3, r2]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d139      	bne.n	8005fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2240      	movs	r2, #64	@ 0x40
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e033      	b.n	8005fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2240      	movs	r2, #64	@ 0x40
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2241      	movs	r2, #65	@ 0x41
 8005f5c:	2124      	movs	r1, #36	@ 0x24
 8005f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	438a      	bics	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2241      	movs	r2, #65	@ 0x41
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2240      	movs	r2, #64	@ 0x40
 8005fae:	2100      	movs	r1, #0
 8005fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b004      	add	sp, #16
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	fffff0ff 	.word	0xfffff0ff

08005fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc8:	4b04      	ldr	r3, [pc, #16]	@ (8005fdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	0049      	lsls	r1, r1, #1
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40007000 	.word	0x40007000

08005fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe0:	b5b0      	push	{r4, r5, r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f000 fbbf 	bl	8006772 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff4:	4bc9      	ldr	r3, [pc, #804]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	220c      	movs	r2, #12
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ffe:	4bc7      	ldr	r3, [pc, #796]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	025b      	lsls	r3, r3, #9
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	4013      	ands	r3, r2
 8006012:	d100      	bne.n	8006016 <HAL_RCC_OscConfig+0x36>
 8006014:	e07e      	b.n	8006114 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d007      	beq.n	800602c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b0c      	cmp	r3, #12
 8006020:	d112      	bne.n	8006048 <HAL_RCC_OscConfig+0x68>
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	025b      	lsls	r3, r3, #9
 8006028:	429a      	cmp	r2, r3
 800602a:	d10d      	bne.n	8006048 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	4bbb      	ldr	r3, [pc, #748]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	4013      	ands	r3, r2
 8006036:	d100      	bne.n	800603a <HAL_RCC_OscConfig+0x5a>
 8006038:	e06b      	b.n	8006112 <HAL_RCC_OscConfig+0x132>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d167      	bne.n	8006112 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f000 fb95 	bl	8006772 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	025b      	lsls	r3, r3, #9
 8006050:	429a      	cmp	r2, r3
 8006052:	d107      	bne.n	8006064 <HAL_RCC_OscConfig+0x84>
 8006054:	4bb1      	ldr	r3, [pc, #708]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4bb0      	ldr	r3, [pc, #704]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800605a:	2180      	movs	r1, #128	@ 0x80
 800605c:	0249      	lsls	r1, r1, #9
 800605e:	430a      	orrs	r2, r1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e027      	b.n	80060b4 <HAL_RCC_OscConfig+0xd4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	23a0      	movs	r3, #160	@ 0xa0
 800606a:	02db      	lsls	r3, r3, #11
 800606c:	429a      	cmp	r2, r3
 800606e:	d10e      	bne.n	800608e <HAL_RCC_OscConfig+0xae>
 8006070:	4baa      	ldr	r3, [pc, #680]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4ba9      	ldr	r3, [pc, #676]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006076:	2180      	movs	r1, #128	@ 0x80
 8006078:	02c9      	lsls	r1, r1, #11
 800607a:	430a      	orrs	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	4ba7      	ldr	r3, [pc, #668]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4ba6      	ldr	r3, [pc, #664]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006084:	2180      	movs	r1, #128	@ 0x80
 8006086:	0249      	lsls	r1, r1, #9
 8006088:	430a      	orrs	r2, r1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e012      	b.n	80060b4 <HAL_RCC_OscConfig+0xd4>
 800608e:	4ba3      	ldr	r3, [pc, #652]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4ba2      	ldr	r3, [pc, #648]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006094:	49a2      	ldr	r1, [pc, #648]	@ (8006320 <HAL_RCC_OscConfig+0x340>)
 8006096:	400a      	ands	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	4ba0      	ldr	r3, [pc, #640]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	025b      	lsls	r3, r3, #9
 80060a2:	4013      	ands	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4b9c      	ldr	r3, [pc, #624]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b9b      	ldr	r3, [pc, #620]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80060ae:	499d      	ldr	r1, [pc, #628]	@ (8006324 <HAL_RCC_OscConfig+0x344>)
 80060b0:	400a      	ands	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fe fe3c 	bl	8004d38 <HAL_GetTick>
 80060c0:	0003      	movs	r3, r0
 80060c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060c4:	e009      	b.n	80060da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060c6:	f7fe fe37 	bl	8004d38 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b64      	cmp	r3, #100	@ 0x64
 80060d2:	d902      	bls.n	80060da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f000 fb4c 	bl	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060da:	4b90      	ldr	r3, [pc, #576]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	2380      	movs	r3, #128	@ 0x80
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	4013      	ands	r3, r2
 80060e4:	d0ef      	beq.n	80060c6 <HAL_RCC_OscConfig+0xe6>
 80060e6:	e015      	b.n	8006114 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e8:	f7fe fe26 	bl	8004d38 <HAL_GetTick>
 80060ec:	0003      	movs	r3, r0
 80060ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060f2:	f7fe fe21 	bl	8004d38 <HAL_GetTick>
 80060f6:	0002      	movs	r2, r0
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b64      	cmp	r3, #100	@ 0x64
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e336      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006104:	4b85      	ldr	r3, [pc, #532]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	4013      	ands	r3, r2
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x112>
 8006110:	e000      	b.n	8006114 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006112:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2202      	movs	r2, #2
 800611a:	4013      	ands	r3, r2
 800611c:	d100      	bne.n	8006120 <HAL_RCC_OscConfig+0x140>
 800611e:	e099      	b.n	8006254 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	2220      	movs	r2, #32
 800612a:	4013      	ands	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800612e:	4b7b      	ldr	r3, [pc, #492]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b7a      	ldr	r3, [pc, #488]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006134:	2120      	movs	r1, #32
 8006136:	430a      	orrs	r2, r1
 8006138:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	2220      	movs	r2, #32
 800613e:	4393      	bics	r3, r2
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b04      	cmp	r3, #4
 8006146:	d005      	beq.n	8006154 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b0c      	cmp	r3, #12
 800614c:	d13e      	bne.n	80061cc <HAL_RCC_OscConfig+0x1ec>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d13b      	bne.n	80061cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006154:	4b71      	ldr	r3, [pc, #452]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2204      	movs	r2, #4
 800615a:	4013      	ands	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_RCC_OscConfig+0x188>
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e304      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006168:	4b6c      	ldr	r3, [pc, #432]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a6e      	ldr	r2, [pc, #440]	@ (8006328 <HAL_RCC_OscConfig+0x348>)
 800616e:	4013      	ands	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	4b68      	ldr	r3, [pc, #416]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800617e:	4b67      	ldr	r3, [pc, #412]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2209      	movs	r2, #9
 8006184:	4393      	bics	r3, r2
 8006186:	0019      	movs	r1, r3
 8006188:	4b64      	ldr	r3, [pc, #400]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006190:	f000 fc42 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 8006194:	0001      	movs	r1, r0
 8006196:	4b61      	ldr	r3, [pc, #388]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	220f      	movs	r2, #15
 800619e:	4013      	ands	r3, r2
 80061a0:	4a62      	ldr	r2, [pc, #392]	@ (800632c <HAL_RCC_OscConfig+0x34c>)
 80061a2:	5cd3      	ldrb	r3, [r2, r3]
 80061a4:	000a      	movs	r2, r1
 80061a6:	40da      	lsrs	r2, r3
 80061a8:	4b61      	ldr	r3, [pc, #388]	@ (8006330 <HAL_RCC_OscConfig+0x350>)
 80061aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80061ac:	4b61      	ldr	r3, [pc, #388]	@ (8006334 <HAL_RCC_OscConfig+0x354>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2513      	movs	r5, #19
 80061b2:	197c      	adds	r4, r7, r5
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7fe fd79 	bl	8004cac <HAL_InitTick>
 80061ba:	0003      	movs	r3, r0
 80061bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80061be:	197b      	adds	r3, r7, r5
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d046      	beq.n	8006254 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80061c6:	197b      	adds	r3, r7, r5
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	e2d2      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d027      	beq.n	8006222 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80061d2:	4b52      	ldr	r3, [pc, #328]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2209      	movs	r2, #9
 80061d8:	4393      	bics	r3, r2
 80061da:	0019      	movs	r1, r3
 80061dc:	4b4f      	ldr	r3, [pc, #316]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fe fda8 	bl	8004d38 <HAL_GetTick>
 80061e8:	0003      	movs	r3, r0
 80061ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ee:	f7fe fda3 	bl	8004d38 <HAL_GetTick>
 80061f2:	0002      	movs	r2, r0
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e2b8      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006200:	4b46      	ldr	r3, [pc, #280]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2204      	movs	r2, #4
 8006206:	4013      	ands	r3, r2
 8006208:	d0f1      	beq.n	80061ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620a:	4b44      	ldr	r3, [pc, #272]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4a46      	ldr	r2, [pc, #280]	@ (8006328 <HAL_RCC_OscConfig+0x348>)
 8006210:	4013      	ands	r3, r2
 8006212:	0019      	movs	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	4b40      	ldr	r3, [pc, #256]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	e018      	b.n	8006254 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006222:	4b3e      	ldr	r3, [pc, #248]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b3d      	ldr	r3, [pc, #244]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006228:	2101      	movs	r1, #1
 800622a:	438a      	bics	r2, r1
 800622c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622e:	f7fe fd83 	bl	8004d38 <HAL_GetTick>
 8006232:	0003      	movs	r3, r0
 8006234:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006238:	f7fe fd7e 	bl	8004d38 <HAL_GetTick>
 800623c:	0002      	movs	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e293      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800624a:	4b34      	ldr	r3, [pc, #208]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2204      	movs	r2, #4
 8006250:	4013      	ands	r3, r2
 8006252:	d1f1      	bne.n	8006238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2210      	movs	r2, #16
 800625a:	4013      	ands	r3, r2
 800625c:	d100      	bne.n	8006260 <HAL_RCC_OscConfig+0x280>
 800625e:	e0a2      	b.n	80063a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d140      	bne.n	80062e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006266:	4b2d      	ldr	r3, [pc, #180]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	2380      	movs	r3, #128	@ 0x80
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4013      	ands	r3, r2
 8006270:	d005      	beq.n	800627e <HAL_RCC_OscConfig+0x29e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e279      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800627e:	4b27      	ldr	r3, [pc, #156]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <HAL_RCC_OscConfig+0x358>)
 8006284:	4013      	ands	r3, r2
 8006286:	0019      	movs	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800628c:	4b23      	ldr	r3, [pc, #140]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006292:	4b22      	ldr	r3, [pc, #136]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	0a19      	lsrs	r1, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	061a      	lsls	r2, r3, #24
 80062a0:	4b1e      	ldr	r3, [pc, #120]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	0b5b      	lsrs	r3, r3, #13
 80062ac:	3301      	adds	r3, #1
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	0212      	lsls	r2, r2, #8
 80062b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80062b4:	4b19      	ldr	r3, [pc, #100]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	210f      	movs	r1, #15
 80062bc:	400b      	ands	r3, r1
 80062be:	491b      	ldr	r1, [pc, #108]	@ (800632c <HAL_RCC_OscConfig+0x34c>)
 80062c0:	5ccb      	ldrb	r3, [r1, r3]
 80062c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80062c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <HAL_RCC_OscConfig+0x350>)
 80062c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80062c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006334 <HAL_RCC_OscConfig+0x354>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2513      	movs	r5, #19
 80062ce:	197c      	adds	r4, r7, r5
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fe fceb 	bl	8004cac <HAL_InitTick>
 80062d6:	0003      	movs	r3, r0
 80062d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80062da:	197b      	adds	r3, r7, r5
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d061      	beq.n	80063a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80062e2:	197b      	adds	r3, r7, r5
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	e244      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d040      	beq.n	8006372 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062f0:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_RCC_OscConfig+0x33c>)
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	0049      	lsls	r1, r1, #1
 80062fa:	430a      	orrs	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fe fd1b 	bl	8004d38 <HAL_GetTick>
 8006302:	0003      	movs	r3, r0
 8006304:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006306:	e019      	b.n	800633c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006308:	f7fe fd16 	bl	8004d38 <HAL_GetTick>
 800630c:	0002      	movs	r2, r0
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d912      	bls.n	800633c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e22b      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	40021000 	.word	0x40021000
 8006320:	fffeffff 	.word	0xfffeffff
 8006324:	fffbffff 	.word	0xfffbffff
 8006328:	ffffe0ff 	.word	0xffffe0ff
 800632c:	0801082c 	.word	0x0801082c
 8006330:	20000010 	.word	0x20000010
 8006334:	20000014 	.word	0x20000014
 8006338:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800633c:	4bca      	ldr	r3, [pc, #808]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	2380      	movs	r3, #128	@ 0x80
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4013      	ands	r3, r2
 8006346:	d0df      	beq.n	8006308 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006348:	4bc7      	ldr	r3, [pc, #796]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4ac7      	ldr	r2, [pc, #796]	@ (800666c <HAL_RCC_OscConfig+0x68c>)
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006356:	4bc4      	ldr	r3, [pc, #784]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800635c:	4bc2      	ldr	r3, [pc, #776]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	0a19      	lsrs	r1, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	061a      	lsls	r2, r3, #24
 800636a:	4bbf      	ldr	r3, [pc, #764]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	e019      	b.n	80063a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006372:	4bbd      	ldr	r3, [pc, #756]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4bbc      	ldr	r3, [pc, #752]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006378:	49bd      	ldr	r1, [pc, #756]	@ (8006670 <HAL_RCC_OscConfig+0x690>)
 800637a:	400a      	ands	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fe fcdb 	bl	8004d38 <HAL_GetTick>
 8006382:	0003      	movs	r3, r0
 8006384:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006388:	f7fe fcd6 	bl	8004d38 <HAL_GetTick>
 800638c:	0002      	movs	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e1eb      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800639a:	4bb3      	ldr	r3, [pc, #716]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4013      	ands	r3, r2
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2208      	movs	r2, #8
 80063ac:	4013      	ands	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d019      	beq.n	80063ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b8:	4bab      	ldr	r3, [pc, #684]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80063ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063bc:	4baa      	ldr	r3, [pc, #680]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80063be:	2101      	movs	r1, #1
 80063c0:	430a      	orrs	r2, r1
 80063c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c4:	f7fe fcb8 	bl	8004d38 <HAL_GetTick>
 80063c8:	0003      	movs	r3, r0
 80063ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ce:	f7fe fcb3 	bl	8004d38 <HAL_GetTick>
 80063d2:	0002      	movs	r2, r0
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1c8      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80063e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e4:	2202      	movs	r2, #2
 80063e6:	4013      	ands	r3, r2
 80063e8:	d0f1      	beq.n	80063ce <HAL_RCC_OscConfig+0x3ee>
 80063ea:	e018      	b.n	800641e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ec:	4b9e      	ldr	r3, [pc, #632]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80063ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80063f2:	2101      	movs	r1, #1
 80063f4:	438a      	bics	r2, r1
 80063f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f8:	f7fe fc9e 	bl	8004d38 <HAL_GetTick>
 80063fc:	0003      	movs	r3, r0
 80063fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006402:	f7fe fc99 	bl	8004d38 <HAL_GetTick>
 8006406:	0002      	movs	r2, r0
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e1ae      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006414:	4b94      	ldr	r3, [pc, #592]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006418:	2202      	movs	r2, #2
 800641a:	4013      	ands	r3, r2
 800641c:	d1f1      	bne.n	8006402 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2204      	movs	r2, #4
 8006424:	4013      	ands	r3, r2
 8006426:	d100      	bne.n	800642a <HAL_RCC_OscConfig+0x44a>
 8006428:	e0ae      	b.n	8006588 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642a:	2023      	movs	r0, #35	@ 0x23
 800642c:	183b      	adds	r3, r7, r0
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006432:	4b8d      	ldr	r3, [pc, #564]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	055b      	lsls	r3, r3, #21
 800643a:	4013      	ands	r3, r2
 800643c:	d109      	bne.n	8006452 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643e:	4b8a      	ldr	r3, [pc, #552]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006442:	4b89      	ldr	r3, [pc, #548]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006444:	2180      	movs	r1, #128	@ 0x80
 8006446:	0549      	lsls	r1, r1, #21
 8006448:	430a      	orrs	r2, r1
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800644c:	183b      	adds	r3, r7, r0
 800644e:	2201      	movs	r2, #1
 8006450:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006452:	4b88      	ldr	r3, [pc, #544]	@ (8006674 <HAL_RCC_OscConfig+0x694>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	4013      	ands	r3, r2
 800645c:	d11a      	bne.n	8006494 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645e:	4b85      	ldr	r3, [pc, #532]	@ (8006674 <HAL_RCC_OscConfig+0x694>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b84      	ldr	r3, [pc, #528]	@ (8006674 <HAL_RCC_OscConfig+0x694>)
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	0049      	lsls	r1, r1, #1
 8006468:	430a      	orrs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646c:	f7fe fc64 	bl	8004d38 <HAL_GetTick>
 8006470:	0003      	movs	r3, r0
 8006472:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006476:	f7fe fc5f 	bl	8004d38 <HAL_GetTick>
 800647a:	0002      	movs	r2, r0
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b64      	cmp	r3, #100	@ 0x64
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e174      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	4b7a      	ldr	r3, [pc, #488]	@ (8006674 <HAL_RCC_OscConfig+0x694>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	4013      	ands	r3, r2
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	429a      	cmp	r2, r3
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4d0>
 80064a0:	4b71      	ldr	r3, [pc, #452]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064a4:	4b70      	ldr	r3, [pc, #448]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064a6:	2180      	movs	r1, #128	@ 0x80
 80064a8:	0049      	lsls	r1, r1, #1
 80064aa:	430a      	orrs	r2, r1
 80064ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80064ae:	e031      	b.n	8006514 <HAL_RCC_OscConfig+0x534>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10c      	bne.n	80064d2 <HAL_RCC_OscConfig+0x4f2>
 80064b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064be:	496c      	ldr	r1, [pc, #432]	@ (8006670 <HAL_RCC_OscConfig+0x690>)
 80064c0:	400a      	ands	r2, r1
 80064c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80064c4:	4b68      	ldr	r3, [pc, #416]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064c8:	4b67      	ldr	r3, [pc, #412]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064ca:	496b      	ldr	r1, [pc, #428]	@ (8006678 <HAL_RCC_OscConfig+0x698>)
 80064cc:	400a      	ands	r2, r1
 80064ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80064d0:	e020      	b.n	8006514 <HAL_RCC_OscConfig+0x534>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	23a0      	movs	r3, #160	@ 0xa0
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	429a      	cmp	r2, r3
 80064dc:	d10e      	bne.n	80064fc <HAL_RCC_OscConfig+0x51c>
 80064de:	4b62      	ldr	r3, [pc, #392]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e2:	4b61      	ldr	r3, [pc, #388]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064e4:	2180      	movs	r1, #128	@ 0x80
 80064e6:	00c9      	lsls	r1, r1, #3
 80064e8:	430a      	orrs	r2, r1
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80064ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f0:	4b5d      	ldr	r3, [pc, #372]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064f2:	2180      	movs	r1, #128	@ 0x80
 80064f4:	0049      	lsls	r1, r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80064fa:	e00b      	b.n	8006514 <HAL_RCC_OscConfig+0x534>
 80064fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80064fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006500:	4b59      	ldr	r3, [pc, #356]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006502:	495b      	ldr	r1, [pc, #364]	@ (8006670 <HAL_RCC_OscConfig+0x690>)
 8006504:	400a      	ands	r2, r1
 8006506:	651a      	str	r2, [r3, #80]	@ 0x50
 8006508:	4b57      	ldr	r3, [pc, #348]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800650a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800650c:	4b56      	ldr	r3, [pc, #344]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800650e:	495a      	ldr	r1, [pc, #360]	@ (8006678 <HAL_RCC_OscConfig+0x698>)
 8006510:	400a      	ands	r2, r1
 8006512:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651c:	f7fe fc0c 	bl	8004d38 <HAL_GetTick>
 8006520:	0003      	movs	r3, r0
 8006522:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006524:	e009      	b.n	800653a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006526:	f7fe fc07 	bl	8004d38 <HAL_GetTick>
 800652a:	0002      	movs	r2, r0
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	4a52      	ldr	r2, [pc, #328]	@ (800667c <HAL_RCC_OscConfig+0x69c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e11b      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800653a:	4b4b      	ldr	r3, [pc, #300]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800653c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4013      	ands	r3, r2
 8006544:	d0ef      	beq.n	8006526 <HAL_RCC_OscConfig+0x546>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006548:	f7fe fbf6 	bl	8004d38 <HAL_GetTick>
 800654c:	0003      	movs	r3, r0
 800654e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006550:	e009      	b.n	8006566 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fe fbf1 	bl	8004d38 <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	4a47      	ldr	r2, [pc, #284]	@ (800667c <HAL_RCC_OscConfig+0x69c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e105      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006566:	4b40      	ldr	r3, [pc, #256]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800656a:	2380      	movs	r3, #128	@ 0x80
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4013      	ands	r3, r2
 8006570:	d1ef      	bne.n	8006552 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006572:	2323      	movs	r3, #35	@ 0x23
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d105      	bne.n	8006588 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657c:	4b3a      	ldr	r3, [pc, #232]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800657e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006580:	4b39      	ldr	r3, [pc, #228]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006582:	493f      	ldr	r1, [pc, #252]	@ (8006680 <HAL_RCC_OscConfig+0x6a0>)
 8006584:	400a      	ands	r2, r1
 8006586:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2220      	movs	r2, #32
 800658e:	4013      	ands	r3, r2
 8006590:	d049      	beq.n	8006626 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d026      	beq.n	80065e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800659a:	4b33      	ldr	r3, [pc, #204]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	4b32      	ldr	r3, [pc, #200]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065a0:	2101      	movs	r1, #1
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]
 80065a6:	4b30      	ldr	r3, [pc, #192]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065ac:	2101      	movs	r1, #1
 80065ae:	430a      	orrs	r2, r1
 80065b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80065b2:	4b34      	ldr	r3, [pc, #208]	@ (8006684 <HAL_RCC_OscConfig+0x6a4>)
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	4b33      	ldr	r3, [pc, #204]	@ (8006684 <HAL_RCC_OscConfig+0x6a4>)
 80065b8:	2180      	movs	r1, #128	@ 0x80
 80065ba:	0189      	lsls	r1, r1, #6
 80065bc:	430a      	orrs	r2, r1
 80065be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fe fbba 	bl	8004d38 <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ca:	f7fe fbb5 	bl	8004d38 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e0ca      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065dc:	4b22      	ldr	r3, [pc, #136]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2202      	movs	r2, #2
 80065e2:	4013      	ands	r3, r2
 80065e4:	d0f1      	beq.n	80065ca <HAL_RCC_OscConfig+0x5ea>
 80065e6:	e01e      	b.n	8006626 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80065e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 80065ee:	2101      	movs	r1, #1
 80065f0:	438a      	bics	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	4b23      	ldr	r3, [pc, #140]	@ (8006684 <HAL_RCC_OscConfig+0x6a4>)
 80065f6:	6a1a      	ldr	r2, [r3, #32]
 80065f8:	4b22      	ldr	r3, [pc, #136]	@ (8006684 <HAL_RCC_OscConfig+0x6a4>)
 80065fa:	4923      	ldr	r1, [pc, #140]	@ (8006688 <HAL_RCC_OscConfig+0x6a8>)
 80065fc:	400a      	ands	r2, r1
 80065fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fe fb9a 	bl	8004d38 <HAL_GetTick>
 8006604:	0003      	movs	r3, r0
 8006606:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800660a:	f7fe fb95 	bl	8004d38 <HAL_GetTick>
 800660e:	0002      	movs	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e0aa      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800661c:	4b12      	ldr	r3, [pc, #72]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2202      	movs	r2, #2
 8006622:	4013      	ands	r3, r2
 8006624:	d1f1      	bne.n	800660a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d100      	bne.n	8006630 <HAL_RCC_OscConfig+0x650>
 800662e:	e09f      	b.n	8006770 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	2b0c      	cmp	r3, #12
 8006634:	d100      	bne.n	8006638 <HAL_RCC_OscConfig+0x658>
 8006636:	e078      	b.n	800672a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663c:	2b02      	cmp	r3, #2
 800663e:	d159      	bne.n	80066f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006640:	4b09      	ldr	r3, [pc, #36]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <HAL_RCC_OscConfig+0x688>)
 8006646:	4911      	ldr	r1, [pc, #68]	@ (800668c <HAL_RCC_OscConfig+0x6ac>)
 8006648:	400a      	ands	r2, r1
 800664a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fe fb74 	bl	8004d38 <HAL_GetTick>
 8006650:	0003      	movs	r3, r0
 8006652:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006654:	e01c      	b.n	8006690 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fe fb6f 	bl	8004d38 <HAL_GetTick>
 800665a:	0002      	movs	r2, r0
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d915      	bls.n	8006690 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e084      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
 8006668:	40021000 	.word	0x40021000
 800666c:	ffff1fff 	.word	0xffff1fff
 8006670:	fffffeff 	.word	0xfffffeff
 8006674:	40007000 	.word	0x40007000
 8006678:	fffffbff 	.word	0xfffffbff
 800667c:	00001388 	.word	0x00001388
 8006680:	efffffff 	.word	0xefffffff
 8006684:	40010000 	.word	0x40010000
 8006688:	ffffdfff 	.word	0xffffdfff
 800668c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006690:	4b3a      	ldr	r3, [pc, #232]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	049b      	lsls	r3, r3, #18
 8006698:	4013      	ands	r3, r2
 800669a:	d1dc      	bne.n	8006656 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800669c:	4b37      	ldr	r3, [pc, #220]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a37      	ldr	r2, [pc, #220]	@ (8006780 <HAL_RCC_OscConfig+0x7a0>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	0019      	movs	r1, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	431a      	orrs	r2, r3
 80066b6:	4b31      	ldr	r3, [pc, #196]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066b8:	430a      	orrs	r2, r1
 80066ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066bc:	4b2f      	ldr	r3, [pc, #188]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b2e      	ldr	r3, [pc, #184]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066c2:	2180      	movs	r1, #128	@ 0x80
 80066c4:	0449      	lsls	r1, r1, #17
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ca:	f7fe fb35 	bl	8004d38 <HAL_GetTick>
 80066ce:	0003      	movs	r3, r0
 80066d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fe fb30 	bl	8004d38 <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e045      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80066e6:	4b25      	ldr	r3, [pc, #148]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	049b      	lsls	r3, r3, #18
 80066ee:	4013      	ands	r3, r2
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x6f4>
 80066f2:	e03d      	b.n	8006770 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b21      	ldr	r3, [pc, #132]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b20      	ldr	r3, [pc, #128]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 80066fa:	4922      	ldr	r1, [pc, #136]	@ (8006784 <HAL_RCC_OscConfig+0x7a4>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006700:	f7fe fb1a 	bl	8004d38 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670a:	f7fe fb15 	bl	8004d38 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e02a      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	049b      	lsls	r3, r3, #18
 8006724:	4013      	ands	r3, r2
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x72a>
 8006728:	e022      	b.n	8006770 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e01d      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006736:	4b11      	ldr	r3, [pc, #68]	@ (800677c <HAL_RCC_OscConfig+0x79c>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	025b      	lsls	r3, r3, #9
 8006742:	401a      	ands	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	429a      	cmp	r2, r3
 800674a:	d10f      	bne.n	800676c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	23f0      	movs	r3, #240	@ 0xf0
 8006750:	039b      	lsls	r3, r3, #14
 8006752:	401a      	ands	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d107      	bne.n	800676c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	23c0      	movs	r3, #192	@ 0xc0
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	401a      	ands	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006768:	429a      	cmp	r2, r3
 800676a:	d001      	beq.n	8006770 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b00a      	add	sp, #40	@ 0x28
 8006778:	bdb0      	pop	{r4, r5, r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	40021000 	.word	0x40021000
 8006780:	ff02ffff 	.word	0xff02ffff
 8006784:	feffffff 	.word	0xfeffffff

08006788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e128      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800679c:	4b96      	ldr	r3, [pc, #600]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2201      	movs	r2, #1
 80067a2:	4013      	ands	r3, r2
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d91e      	bls.n	80067e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b93      	ldr	r3, [pc, #588]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	4393      	bics	r3, r2
 80067b2:	0019      	movs	r1, r3
 80067b4:	4b90      	ldr	r3, [pc, #576]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067bc:	f7fe fabc 	bl	8004d38 <HAL_GetTick>
 80067c0:	0003      	movs	r3, r0
 80067c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c4:	e009      	b.n	80067da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c6:	f7fe fab7 	bl	8004d38 <HAL_GetTick>
 80067ca:	0002      	movs	r2, r0
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	4a8a      	ldr	r2, [pc, #552]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e109      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b87      	ldr	r3, [pc, #540]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	4013      	ands	r3, r2
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1ee      	bne.n	80067c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2202      	movs	r2, #2
 80067ee:	4013      	ands	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f2:	4b83      	ldr	r3, [pc, #524]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	22f0      	movs	r2, #240	@ 0xf0
 80067f8:	4393      	bics	r3, r2
 80067fa:	0019      	movs	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	4b7f      	ldr	r3, [pc, #508]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 8006802:	430a      	orrs	r2, r1
 8006804:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	4013      	ands	r3, r2
 800680e:	d100      	bne.n	8006812 <HAL_RCC_ClockConfig+0x8a>
 8006810:	e089      	b.n	8006926 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800681a:	4b79      	ldr	r3, [pc, #484]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	4013      	ands	r3, r2
 8006824:	d120      	bne.n	8006868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0e1      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006832:	4b73      	ldr	r3, [pc, #460]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	2380      	movs	r3, #128	@ 0x80
 8006838:	049b      	lsls	r3, r3, #18
 800683a:	4013      	ands	r3, r2
 800683c:	d114      	bne.n	8006868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0d5      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d106      	bne.n	8006858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800684a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2204      	movs	r2, #4
 8006850:	4013      	ands	r3, r2
 8006852:	d109      	bne.n	8006868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0ca      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006858:	4b69      	ldr	r3, [pc, #420]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	2380      	movs	r3, #128	@ 0x80
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4013      	ands	r3, r2
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0c2      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006868:	4b65      	ldr	r3, [pc, #404]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	2203      	movs	r2, #3
 800686e:	4393      	bics	r3, r2
 8006870:	0019      	movs	r1, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b62      	ldr	r3, [pc, #392]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 8006878:	430a      	orrs	r2, r1
 800687a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800687c:	f7fe fa5c 	bl	8004d38 <HAL_GetTick>
 8006880:	0003      	movs	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d111      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800688c:	e009      	b.n	80068a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800688e:	f7fe fa53 	bl	8004d38 <HAL_GetTick>
 8006892:	0002      	movs	r2, r0
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	4a58      	ldr	r2, [pc, #352]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e0a5      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80068a2:	4b57      	ldr	r3, [pc, #348]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	220c      	movs	r2, #12
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d1ef      	bne.n	800688e <HAL_RCC_ClockConfig+0x106>
 80068ae:	e03a      	b.n	8006926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d111      	bne.n	80068dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068b8:	e009      	b.n	80068ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ba:	f7fe fa3d 	bl	8004d38 <HAL_GetTick>
 80068be:	0002      	movs	r2, r0
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	4a4d      	ldr	r2, [pc, #308]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e08f      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	220c      	movs	r2, #12
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d1ef      	bne.n	80068ba <HAL_RCC_ClockConfig+0x132>
 80068da:	e024      	b.n	8006926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d11b      	bne.n	800691c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068e4:	e009      	b.n	80068fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e6:	f7fe fa27 	bl	8004d38 <HAL_GetTick>
 80068ea:	0002      	movs	r2, r0
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	4a42      	ldr	r2, [pc, #264]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e079      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	220c      	movs	r2, #12
 8006900:	4013      	ands	r3, r2
 8006902:	2b04      	cmp	r3, #4
 8006904:	d1ef      	bne.n	80068e6 <HAL_RCC_ClockConfig+0x15e>
 8006906:	e00e      	b.n	8006926 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fe fa16 	bl	8004d38 <HAL_GetTick>
 800690c:	0002      	movs	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a3a      	ldr	r2, [pc, #232]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e068      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800691c:	4b38      	ldr	r3, [pc, #224]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	220c      	movs	r2, #12
 8006922:	4013      	ands	r3, r2
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006926:	4b34      	ldr	r3, [pc, #208]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2201      	movs	r2, #1
 800692c:	4013      	ands	r3, r2
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d21e      	bcs.n	8006972 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006934:	4b30      	ldr	r3, [pc, #192]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	4393      	bics	r3, r2
 800693c:	0019      	movs	r1, r3
 800693e:	4b2e      	ldr	r3, [pc, #184]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006946:	f7fe f9f7 	bl	8004d38 <HAL_GetTick>
 800694a:	0003      	movs	r3, r0
 800694c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694e:	e009      	b.n	8006964 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006950:	f7fe f9f2 	bl	8004d38 <HAL_GetTick>
 8006954:	0002      	movs	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	4a28      	ldr	r2, [pc, #160]	@ (80069fc <HAL_RCC_ClockConfig+0x274>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e044      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006964:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <HAL_RCC_ClockConfig+0x270>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	4013      	ands	r3, r2
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d1ee      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	4013      	ands	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800697c:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a20      	ldr	r2, [pc, #128]	@ (8006a04 <HAL_RCC_ClockConfig+0x27c>)
 8006982:	4013      	ands	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800698c:	430a      	orrs	r2, r1
 800698e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2208      	movs	r2, #8
 8006996:	4013      	ands	r3, r2
 8006998:	d00a      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800699a:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <HAL_RCC_ClockConfig+0x280>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	0019      	movs	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	00da      	lsls	r2, r3, #3
 80069aa:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80069ac:	430a      	orrs	r2, r1
 80069ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069b0:	f000 f832 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 80069b4:	0001      	movs	r1, r0
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <HAL_RCC_ClockConfig+0x278>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	091b      	lsrs	r3, r3, #4
 80069bc:	220f      	movs	r2, #15
 80069be:	4013      	ands	r3, r2
 80069c0:	4a12      	ldr	r2, [pc, #72]	@ (8006a0c <HAL_RCC_ClockConfig+0x284>)
 80069c2:	5cd3      	ldrb	r3, [r2, r3]
 80069c4:	000a      	movs	r2, r1
 80069c6:	40da      	lsrs	r2, r3
 80069c8:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <HAL_RCC_ClockConfig+0x288>)
 80069ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80069cc:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCC_ClockConfig+0x28c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	250b      	movs	r5, #11
 80069d2:	197c      	adds	r4, r7, r5
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fe f969 	bl	8004cac <HAL_InitTick>
 80069da:	0003      	movs	r3, r0
 80069dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80069de:	197b      	adds	r3, r7, r5
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80069e6:	197b      	adds	r3, r7, r5
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	e000      	b.n	80069ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bdb0      	pop	{r4, r5, r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	40022000 	.word	0x40022000
 80069fc:	00001388 	.word	0x00001388
 8006a00:	40021000 	.word	0x40021000
 8006a04:	fffff8ff 	.word	0xfffff8ff
 8006a08:	ffffc7ff 	.word	0xffffc7ff
 8006a0c:	0801082c 	.word	0x0801082c
 8006a10:	20000010 	.word	0x20000010
 8006a14:	20000014 	.word	0x20000014

08006a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a18:	b5b0      	push	{r4, r5, r7, lr}
 8006a1a:	b08e      	sub	sp, #56	@ 0x38
 8006a1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a26:	230c      	movs	r3, #12
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b0c      	cmp	r3, #12
 8006a2c:	d014      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x40>
 8006a2e:	d900      	bls.n	8006a32 <HAL_RCC_GetSysClockFreq+0x1a>
 8006a30:	e07b      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x112>
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d002      	beq.n	8006a3c <HAL_RCC_GetSysClockFreq+0x24>
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d00b      	beq.n	8006a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a3a:	e076      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006a3c:	4b44      	ldr	r3, [pc, #272]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2210      	movs	r2, #16
 8006a42:	4013      	ands	r3, r2
 8006a44:	d002      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006a46:	4b43      	ldr	r3, [pc, #268]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a48:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006a4a:	e07c      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x140>)
 8006a4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006a50:	e079      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a52:	4b42      	ldr	r3, [pc, #264]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0x144>)
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006a56:	e076      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	0c9a      	lsrs	r2, r3, #18
 8006a5c:	230f      	movs	r3, #15
 8006a5e:	401a      	ands	r2, r3
 8006a60:	4b3f      	ldr	r3, [pc, #252]	@ (8006b60 <HAL_RCC_GetSysClockFreq+0x148>)
 8006a62:	5c9b      	ldrb	r3, [r3, r2]
 8006a64:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	0d9a      	lsrs	r2, r3, #22
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	3301      	adds	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a72:	4b37      	ldr	r3, [pc, #220]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	025b      	lsls	r3, r3, #9
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d01a      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	4a35      	ldr	r2, [pc, #212]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0x144>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	69b8      	ldr	r0, [r7, #24]
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	f7f9 fd65 	bl	800055c <__aeabi_lmul>
 8006a92:	0002      	movs	r2, r0
 8006a94:	000b      	movs	r3, r1
 8006a96:	0010      	movs	r0, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f7f9 fd39 	bl	800051c <__aeabi_uldivmod>
 8006aaa:	0002      	movs	r2, r0
 8006aac:	000b      	movs	r3, r1
 8006aae:	0013      	movs	r3, r2
 8006ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab2:	e037      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006ab4:	4b26      	ldr	r3, [pc, #152]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	4013      	ands	r3, r2
 8006abc:	d01a      	beq.n	8006af4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4a23      	ldr	r2, [pc, #140]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	68b8      	ldr	r0, [r7, #8]
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	f7f9 fd45 	bl	800055c <__aeabi_lmul>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	000b      	movs	r3, r1
 8006ad6:	0010      	movs	r0, r2
 8006ad8:	0019      	movs	r1, r3
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	603b      	str	r3, [r7, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f7f9 fd19 	bl	800051c <__aeabi_uldivmod>
 8006aea:	0002      	movs	r2, r0
 8006aec:	000b      	movs	r3, r1
 8006aee:	0013      	movs	r3, r2
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af2:	e017      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	0018      	movs	r0, r3
 8006af8:	2300      	movs	r3, #0
 8006afa:	0019      	movs	r1, r3
 8006afc:	4a16      	ldr	r2, [pc, #88]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x140>)
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7f9 fd2c 	bl	800055c <__aeabi_lmul>
 8006b04:	0002      	movs	r2, r0
 8006b06:	000b      	movs	r3, r1
 8006b08:	0010      	movs	r0, r2
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	001c      	movs	r4, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	001d      	movs	r5, r3
 8006b14:	0022      	movs	r2, r4
 8006b16:	002b      	movs	r3, r5
 8006b18:	f7f9 fd00 	bl	800051c <__aeabi_uldivmod>
 8006b1c:	0002      	movs	r2, r0
 8006b1e:	000b      	movs	r3, r1
 8006b20:	0013      	movs	r3, r2
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8006b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b26:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006b28:	e00d      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006b2a:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	0b5b      	lsrs	r3, r3, #13
 8006b30:	2207      	movs	r2, #7
 8006b32:	4013      	ands	r3, r2
 8006b34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2280      	movs	r2, #128	@ 0x80
 8006b3c:	0212      	lsls	r2, r2, #8
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	0013      	movs	r3, r2
 8006b42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006b44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b00e      	add	sp, #56	@ 0x38
 8006b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b50:	40021000 	.word	0x40021000
 8006b54:	003d0900 	.word	0x003d0900
 8006b58:	00f42400 	.word	0x00f42400
 8006b5c:	007a1200 	.word	0x007a1200
 8006b60:	08010844 	.word	0x08010844

08006b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b68:	4b02      	ldr	r3, [pc, #8]	@ (8006b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			@ (mov r8, r8)
 8006b74:	20000010 	.word	0x20000010

08006b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b7c:	f7ff fff2 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006b80:	0001      	movs	r1, r0
 8006b82:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	2207      	movs	r2, #7
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	40d9      	lsrs	r1, r3
 8006b92:	000b      	movs	r3, r1
}
 8006b94:	0018      	movs	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	0801083c 	.word	0x0801083c

08006ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ba8:	f7ff ffdc 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006bac:	0001      	movs	r1, r0
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	0adb      	lsrs	r3, r3, #11
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	4a04      	ldr	r2, [pc, #16]	@ (8006bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	40d9      	lsrs	r1, r3
 8006bbe:	000b      	movs	r3, r1
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	0801083c 	.word	0x0801083c

08006bd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006bd8:	2317      	movs	r3, #23
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2220      	movs	r2, #32
 8006be6:	4013      	ands	r3, r2
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	2380      	movs	r3, #128	@ 0x80
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d100      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006bf6:	e104      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf8:	4bb9      	ldr	r3, [pc, #740]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	055b      	lsls	r3, r3, #21
 8006c00:	4013      	ands	r3, r2
 8006c02:	d10a      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c04:	4bb6      	ldr	r3, [pc, #728]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c08:	4bb5      	ldr	r3, [pc, #724]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c0a:	2180      	movs	r1, #128	@ 0x80
 8006c0c:	0549      	lsls	r1, r1, #21
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006c12:	2317      	movs	r3, #23
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	4bb2      	ldr	r3, [pc, #712]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	2380      	movs	r3, #128	@ 0x80
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4013      	ands	r3, r2
 8006c24:	d11a      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c26:	4baf      	ldr	r3, [pc, #700]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4bae      	ldr	r3, [pc, #696]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006c2c:	2180      	movs	r1, #128	@ 0x80
 8006c2e:	0049      	lsls	r1, r1, #1
 8006c30:	430a      	orrs	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c34:	f7fe f880 	bl	8004d38 <HAL_GetTick>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7fe f87b 	bl	8004d38 <HAL_GetTick>
 8006c42:	0002      	movs	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b64      	cmp	r3, #100	@ 0x64
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e143      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c50:	4ba4      	ldr	r3, [pc, #656]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	2380      	movs	r3, #128	@ 0x80
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	23c0      	movs	r3, #192	@ 0xc0
 8006c62:	039b      	lsls	r3, r3, #14
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	23c0      	movs	r3, #192	@ 0xc0
 8006c6e:	039b      	lsls	r3, r3, #14
 8006c70:	4013      	ands	r3, r2
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d107      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	23c0      	movs	r3, #192	@ 0xc0
 8006c7e:	039b      	lsls	r3, r3, #14
 8006c80:	4013      	ands	r3, r2
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d013      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	23c0      	movs	r3, #192	@ 0xc0
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	401a      	ands	r2, r3
 8006c92:	23c0      	movs	r3, #192	@ 0xc0
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10a      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c9a:	4b91      	ldr	r3, [pc, #580]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	2380      	movs	r3, #128	@ 0x80
 8006ca0:	029b      	lsls	r3, r3, #10
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	2380      	movs	r3, #128	@ 0x80
 8006ca6:	029b      	lsls	r3, r3, #10
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e113      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006cb0:	4b8b      	ldr	r3, [pc, #556]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cb4:	23c0      	movs	r3, #192	@ 0xc0
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d049      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	23c0      	movs	r3, #192	@ 0xc0
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d10d      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	23c0      	movs	r3, #192	@ 0xc0
 8006ce2:	029b      	lsls	r3, r3, #10
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d034      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	2380      	movs	r3, #128	@ 0x80
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d02e      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006cf8:	4b79      	ldr	r3, [pc, #484]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d02:	4b77      	ldr	r3, [pc, #476]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d06:	4b76      	ldr	r3, [pc, #472]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d08:	2180      	movs	r1, #128	@ 0x80
 8006d0a:	0309      	lsls	r1, r1, #12
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d10:	4b73      	ldr	r3, [pc, #460]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d14:	4b72      	ldr	r3, [pc, #456]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d16:	4975      	ldr	r1, [pc, #468]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006d18:	400a      	ands	r2, r1
 8006d1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006d1c:	4b70      	ldr	r3, [pc, #448]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d014      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2c:	f7fe f804 	bl	8004d38 <HAL_GetTick>
 8006d30:	0003      	movs	r3, r0
 8006d32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d34:	e009      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fd ffff 	bl	8004d38 <HAL_GetTick>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	4a6b      	ldr	r2, [pc, #428]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e0c6      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d4a:	4b65      	ldr	r3, [pc, #404]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4013      	ands	r3, r2
 8006d54:	d0ef      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d01f      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	23c0      	movs	r3, #192	@ 0xc0
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	23c0      	movs	r3, #192	@ 0xc0
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d10c      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006d74:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	0019      	movs	r1, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	23c0      	movs	r3, #192	@ 0xc0
 8006d84:	039b      	lsls	r3, r3, #14
 8006d86:	401a      	ands	r2, r3
 8006d88:	4b55      	ldr	r3, [pc, #340]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	4b54      	ldr	r3, [pc, #336]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	23c0      	movs	r3, #192	@ 0xc0
 8006d98:	029b      	lsls	r3, r3, #10
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	4b50      	ldr	r3, [pc, #320]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2220      	movs	r2, #32
 8006da8:	4013      	ands	r3, r2
 8006daa:	d01f      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	23c0      	movs	r3, #192	@ 0xc0
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	401a      	ands	r2, r3
 8006db6:	23c0      	movs	r3, #192	@ 0xc0
 8006db8:	029b      	lsls	r3, r3, #10
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006dbe:	4b48      	ldr	r3, [pc, #288]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	0019      	movs	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	23c0      	movs	r3, #192	@ 0xc0
 8006dce:	039b      	lsls	r3, r3, #14
 8006dd0:	401a      	ands	r2, r3
 8006dd2:	4b43      	ldr	r3, [pc, #268]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	4b41      	ldr	r3, [pc, #260]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006dda:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	23c0      	movs	r3, #192	@ 0xc0
 8006de2:	029b      	lsls	r3, r3, #10
 8006de4:	401a      	ands	r2, r3
 8006de6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006de8:	430a      	orrs	r2, r1
 8006dea:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006dec:	2317      	movs	r3, #23
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006dfc:	493e      	ldr	r1, [pc, #248]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006dfe:	400a      	ands	r2, r1
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2201      	movs	r2, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e10:	2203      	movs	r2, #3
 8006e12:	4393      	bics	r3, r2
 8006e14:	0019      	movs	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b31      	ldr	r3, [pc, #196]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2202      	movs	r2, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2e:	220c      	movs	r2, #12
 8006e30:	4393      	bics	r3, r2
 8006e32:	0019      	movs	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	4b29      	ldr	r3, [pc, #164]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2204      	movs	r2, #4
 8006e44:	4013      	ands	r3, r2
 8006e46:	d009      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e48:	4b25      	ldr	r3, [pc, #148]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	0019      	movs	r1, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	4b22      	ldr	r3, [pc, #136]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	4013      	ands	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e66:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6a:	4a25      	ldr	r2, [pc, #148]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	0019      	movs	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e76:	430a      	orrs	r2, r1
 8006e78:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	2380      	movs	r3, #128	@ 0x80
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4013      	ands	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e86:	4b16      	ldr	r3, [pc, #88]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	0019      	movs	r1, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e96:	430a      	orrs	r2, r1
 8006e98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2240      	movs	r2, #64	@ 0x40
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea8:	4a16      	ldr	r2, [pc, #88]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	0019      	movs	r1, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2280      	movs	r2, #128	@ 0x80
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec6:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	4b03      	ldr	r3, [pc, #12]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	0018      	movs	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b006      	add	sp, #24
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40007000 	.word	0x40007000
 8006ee8:	fffcffff 	.word	0xfffcffff
 8006eec:	fff7ffff 	.word	0xfff7ffff
 8006ef0:	00001388 	.word	0x00001388
 8006ef4:	ffcfffff 	.word	0xffcfffff
 8006ef8:	efffffff 	.word	0xefffffff
 8006efc:	fffff3ff 	.word	0xfffff3ff
 8006f00:	ffffcfff 	.word	0xffffcfff
 8006f04:	fbffffff 	.word	0xfbffffff
 8006f08:	fff3ffff 	.word	0xfff3ffff

08006f0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f0c:	b5b0      	push	{r4, r5, r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f14:	230f      	movs	r3, #15
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e088      	b.n	8007038 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2221      	movs	r2, #33	@ 0x21
 8006f2a:	5c9b      	ldrb	r3, [r3, r2]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	2100      	movs	r1, #0
 8006f38:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7fd fcdd 	bl	80048fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2221      	movs	r2, #33	@ 0x21
 8006f46:	2102      	movs	r1, #2
 8006f48:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2210      	movs	r2, #16
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d05f      	beq.n	8007018 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	22ca      	movs	r2, #202	@ 0xca
 8006f5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2253      	movs	r2, #83	@ 0x53
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f68:	250f      	movs	r5, #15
 8006f6a:	197c      	adds	r4, r7, r5
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f93e 	bl	80071f0 <RTC_EnterInitMode>
 8006f74:	0003      	movs	r3, r0
 8006f76:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006f78:	0028      	movs	r0, r5
 8006f7a:	183b      	adds	r3, r7, r0
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12c      	bne.n	8006fdc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	492c      	ldr	r1, [pc, #176]	@ (8007040 <HAL_RTC_Init+0x134>)
 8006f8e:	400a      	ands	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68d2      	ldr	r2, [r2, #12]
 8006fb8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6919      	ldr	r1, [r3, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	041a      	lsls	r2, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006fce:	183c      	adds	r4, r7, r0
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 f950 	bl	8007278 <RTC_ExitInitMode>
 8006fd8:	0003      	movs	r3, r0
 8006fda:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006fdc:	230f      	movs	r3, #15
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d113      	bne.n	800700e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2103      	movs	r1, #3
 8006ff2:	438a      	bics	r2, r1
 8006ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	22ff      	movs	r2, #255	@ 0xff
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24
 8007016:	e003      	b.n	8007020 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007018:	230f      	movs	r3, #15
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8007020:	230f      	movs	r3, #15
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2221      	movs	r2, #33	@ 0x21
 800702e:	2101      	movs	r1, #1
 8007030:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007032:	230f      	movs	r3, #15
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	781b      	ldrb	r3, [r3, #0]
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bdb0      	pop	{r4, r5, r7, pc}
 8007040:	ff8fffbf 	.word	0xff8fffbf

08007044 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	045b      	lsls	r3, r3, #17
 8007066:	0c5a      	lsrs	r2, r3, #17
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <HAL_RTC_GetTime+0xb8>)
 8007074:	4013      	ands	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	0c1b      	lsrs	r3, r3, #16
 800707c:	b2db      	uxtb	r3, r3
 800707e:	223f      	movs	r2, #63	@ 0x3f
 8007080:	4013      	ands	r3, r2
 8007082:	b2da      	uxtb	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	b2db      	uxtb	r3, r3
 800708e:	227f      	movs	r2, #127	@ 0x7f
 8007090:	4013      	ands	r3, r2
 8007092:	b2da      	uxtb	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	227f      	movs	r2, #127	@ 0x7f
 800709e:	4013      	ands	r3, r2
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	0d9b      	lsrs	r3, r3, #22
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2201      	movs	r2, #1
 80070ae:	4013      	ands	r3, r2
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d11a      	bne.n	80070f2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 f903 	bl	80072cc <RTC_Bcd2ToByte>
 80070c6:	0003      	movs	r3, r0
 80070c8:	001a      	movs	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	0018      	movs	r0, r3
 80070d4:	f000 f8fa 	bl	80072cc <RTC_Bcd2ToByte>
 80070d8:	0003      	movs	r3, r0
 80070da:	001a      	movs	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	789b      	ldrb	r3, [r3, #2]
 80070e4:	0018      	movs	r0, r3
 80070e6:	f000 f8f1 	bl	80072cc <RTC_Bcd2ToByte>
 80070ea:	0003      	movs	r3, r0
 80070ec:	001a      	movs	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b006      	add	sp, #24
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	007f7f7f 	.word	0x007f7f7f

08007100 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4a21      	ldr	r2, [pc, #132]	@ (800719c <HAL_RTC_GetDate+0x9c>)
 8007118:	4013      	ands	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	0c1b      	lsrs	r3, r3, #16
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	b2db      	uxtb	r3, r3
 800712c:	221f      	movs	r2, #31
 800712e:	4013      	ands	r3, r2
 8007130:	b2da      	uxtb	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	223f      	movs	r2, #63	@ 0x3f
 800713c:	4013      	ands	r3, r2
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	0b5b      	lsrs	r3, r3, #13
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2207      	movs	r2, #7
 800714c:	4013      	ands	r3, r2
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11a      	bne.n	8007190 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	78db      	ldrb	r3, [r3, #3]
 800715e:	0018      	movs	r0, r3
 8007160:	f000 f8b4 	bl	80072cc <RTC_Bcd2ToByte>
 8007164:	0003      	movs	r3, r0
 8007166:	001a      	movs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 f8ab 	bl	80072cc <RTC_Bcd2ToByte>
 8007176:	0003      	movs	r3, r0
 8007178:	001a      	movs	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	789b      	ldrb	r3, [r3, #2]
 8007182:	0018      	movs	r0, r3
 8007184:	f000 f8a2 	bl	80072cc <RTC_Bcd2ToByte>
 8007188:	0003      	movs	r3, r0
 800718a:	001a      	movs	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	0018      	movs	r0, r3
 8007194:	46bd      	mov	sp, r7
 8007196:	b006      	add	sp, #24
 8007198:	bd80      	pop	{r7, pc}
 800719a:	46c0      	nop			@ (mov r8, r8)
 800719c:	00ffff3f 	.word	0x00ffff3f

080071a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0e      	ldr	r2, [pc, #56]	@ (80071ec <HAL_RTC_WaitForSynchro+0x4c>)
 80071b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071b4:	f7fd fdc0 	bl	8004d38 <HAL_GetTick>
 80071b8:	0003      	movs	r3, r0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071bc:	e00a      	b.n	80071d4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071be:	f7fd fdbb 	bl	8004d38 <HAL_GetTick>
 80071c2:	0002      	movs	r2, r0
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	23fa      	movs	r3, #250	@ 0xfa
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d901      	bls.n	80071d4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e006      	b.n	80071e2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	4013      	ands	r3, r2
 80071de:	d0ee      	beq.n	80071be <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	0018      	movs	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b004      	add	sp, #16
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	0001ff5f 	.word	0x0001ff5f

080071f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80071fc:	230f      	movs	r3, #15
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2240      	movs	r2, #64	@ 0x40
 800720c:	4013      	ands	r3, r2
 800720e:	d12c      	bne.n	800726a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2180      	movs	r1, #128	@ 0x80
 800721c:	430a      	orrs	r2, r1
 800721e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007220:	f7fd fd8a 	bl	8004d38 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007228:	e014      	b.n	8007254 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800722a:	f7fd fd85 	bl	8004d38 <HAL_GetTick>
 800722e:	0002      	movs	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	200f      	movs	r0, #15
 8007236:	183b      	adds	r3, r7, r0
 8007238:	1839      	adds	r1, r7, r0
 800723a:	7809      	ldrb	r1, [r1, #0]
 800723c:	7019      	strb	r1, [r3, #0]
 800723e:	23fa      	movs	r3, #250	@ 0xfa
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	429a      	cmp	r2, r3
 8007244:	d906      	bls.n	8007254 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2221      	movs	r2, #33	@ 0x21
 800724a:	2104      	movs	r1, #4
 800724c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800724e:	183b      	adds	r3, r7, r0
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2240      	movs	r2, #64	@ 0x40
 800725c:	4013      	ands	r3, r2
 800725e:	d104      	bne.n	800726a <RTC_EnterInitMode+0x7a>
 8007260:	230f      	movs	r3, #15
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d1df      	bne.n	800722a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800726a:	230f      	movs	r3, #15
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	781b      	ldrb	r3, [r3, #0]
}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b004      	add	sp, #16
 8007276:	bd80      	pop	{r7, pc}

08007278 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007280:	240f      	movs	r4, #15
 8007282:	193b      	adds	r3, r7, r4
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	438a      	bics	r2, r1
 8007296:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2220      	movs	r2, #32
 80072a0:	4013      	ands	r3, r2
 80072a2:	d10c      	bne.n	80072be <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7ff ff7a 	bl	80071a0 <HAL_RTC_WaitForSynchro>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d006      	beq.n	80072be <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2221      	movs	r2, #33	@ 0x21
 80072b4:	2104      	movs	r1, #4
 80072b6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80072b8:	193b      	adds	r3, r7, r4
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80072be:	230f      	movs	r3, #15
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	781b      	ldrb	r3, [r3, #0]
}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b005      	add	sp, #20
 80072ca:	bd90      	pop	{r4, r7, pc}

080072cc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	0002      	movs	r2, r0
 80072d4:	1dfb      	adds	r3, r7, #7
 80072d6:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80072dc:	1dfb      	adds	r3, r7, #7
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	001a      	movs	r2, r3
 80072e6:	0013      	movs	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	189b      	adds	r3, r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	1dfb      	adds	r3, r7, #7
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	210f      	movs	r1, #15
 80072fa:	400b      	ands	r3, r1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	18d3      	adds	r3, r2, r3
 8007300:	b2db      	uxtb	r3, r3
}
 8007302:	0018      	movs	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	b004      	add	sp, #16
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e083      	b.n	8007426 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	2382      	movs	r3, #130	@ 0x82
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	429a      	cmp	r2, r3
 8007330:	d009      	beq.n	8007346 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	61da      	str	r2, [r3, #28]
 8007338:	e005      	b.n	8007346 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2251      	movs	r2, #81	@ 0x51
 8007350:	5c9b      	ldrb	r3, [r3, r2]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2250      	movs	r2, #80	@ 0x50
 800735c:	2100      	movs	r1, #0
 800735e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f7fd fae2 	bl	800492c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2251      	movs	r2, #81	@ 0x51
 800736c:	2102      	movs	r1, #2
 800736e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2140      	movs	r1, #64	@ 0x40
 800737c:	438a      	bics	r2, r1
 800737e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	2382      	movs	r3, #130	@ 0x82
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	401a      	ands	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6899      	ldr	r1, [r3, #8]
 800738e:	2384      	movs	r3, #132	@ 0x84
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	400b      	ands	r3, r1
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68d9      	ldr	r1, [r3, #12]
 800739a:	2380      	movs	r3, #128	@ 0x80
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	400b      	ands	r3, r1
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2102      	movs	r1, #2
 80073a8:	400b      	ands	r3, r1
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2101      	movs	r1, #1
 80073b2:	400b      	ands	r3, r1
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	2380      	movs	r3, #128	@ 0x80
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	400b      	ands	r3, r1
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	2138      	movs	r1, #56	@ 0x38
 80073c8:	400b      	ands	r3, r1
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	2180      	movs	r1, #128	@ 0x80
 80073d2:	400b      	ands	r3, r1
 80073d4:	431a      	orrs	r2, r3
 80073d6:	0011      	movs	r1, r2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073dc:	2380      	movs	r3, #128	@ 0x80
 80073de:	019b      	lsls	r3, r3, #6
 80073e0:	401a      	ands	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	0c1b      	lsrs	r3, r3, #16
 80073f0:	2204      	movs	r2, #4
 80073f2:	4013      	ands	r3, r2
 80073f4:	0019      	movs	r1, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	2210      	movs	r2, #16
 80073fc:	401a      	ands	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4907      	ldr	r1, [pc, #28]	@ (8007430 <HAL_SPI_Init+0x124>)
 8007412:	400a      	ands	r2, r1
 8007414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2251      	movs	r2, #81	@ 0x51
 8007420:	2101      	movs	r1, #1
 8007422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b002      	add	sp, #8
 800742c:	bd80      	pop	{r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	fffff7ff 	.word	0xfffff7ff

08007434 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	1dbb      	adds	r3, r7, #6
 8007442:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007444:	231f      	movs	r3, #31
 8007446:	18fb      	adds	r3, r7, r3
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2250      	movs	r2, #80	@ 0x50
 8007450:	5c9b      	ldrb	r3, [r3, r2]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_SPI_Transmit+0x26>
 8007456:	2302      	movs	r3, #2
 8007458:	e145      	b.n	80076e6 <HAL_SPI_Transmit+0x2b2>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2250      	movs	r2, #80	@ 0x50
 800745e:	2101      	movs	r1, #1
 8007460:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007462:	f7fd fc69 	bl	8004d38 <HAL_GetTick>
 8007466:	0003      	movs	r3, r0
 8007468:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800746a:	2316      	movs	r3, #22
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	1dba      	adds	r2, r7, #6
 8007470:	8812      	ldrh	r2, [r2, #0]
 8007472:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2251      	movs	r2, #81	@ 0x51
 8007478:	5c9b      	ldrb	r3, [r3, r2]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d004      	beq.n	800748a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007480:	231f      	movs	r3, #31
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	2202      	movs	r2, #2
 8007486:	701a      	strb	r2, [r3, #0]
    goto error;
 8007488:	e126      	b.n	80076d8 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_SPI_Transmit+0x64>
 8007490:	1dbb      	adds	r3, r7, #6
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007498:	231f      	movs	r3, #31
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
    goto error;
 80074a0:	e11a      	b.n	80076d8 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2251      	movs	r2, #81	@ 0x51
 80074a6:	2103      	movs	r1, #3
 80074a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1dba      	adds	r2, r7, #6
 80074ba:	8812      	ldrh	r2, [r2, #0]
 80074bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1dba      	adds	r2, r7, #6
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	2380      	movs	r3, #128	@ 0x80
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d110      	bne.n	8007512 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2140      	movs	r1, #64	@ 0x40
 80074fc:	438a      	bics	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2180      	movs	r1, #128	@ 0x80
 800750c:	01c9      	lsls	r1, r1, #7
 800750e:	430a      	orrs	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2240      	movs	r2, #64	@ 0x40
 800751a:	4013      	ands	r3, r2
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d007      	beq.n	8007530 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2140      	movs	r1, #64	@ 0x40
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	2380      	movs	r3, #128	@ 0x80
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	429a      	cmp	r2, r3
 800753a:	d152      	bne.n	80075e2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <HAL_SPI_Transmit+0x11a>
 8007544:	2316      	movs	r3, #22
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d143      	bne.n	80075d6 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	881a      	ldrh	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	1c9a      	adds	r2, r3, #2
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007572:	e030      	b.n	80075d6 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2202      	movs	r2, #2
 800757c:	4013      	ands	r3, r2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d112      	bne.n	80075a8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007586:	881a      	ldrh	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075a6:	e016      	b.n	80075d6 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a8:	f7fd fbc6 	bl	8004d38 <HAL_GetTick>
 80075ac:	0002      	movs	r2, r0
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d802      	bhi.n	80075be <HAL_SPI_Transmit+0x18a>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	d102      	bne.n	80075c4 <HAL_SPI_Transmit+0x190>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80075c4:	231f      	movs	r3, #31
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	2203      	movs	r2, #3
 80075ca:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2251      	movs	r2, #81	@ 0x51
 80075d0:	2101      	movs	r1, #1
 80075d2:	5499      	strb	r1, [r3, r2]
          goto error;
 80075d4:	e080      	b.n	80076d8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1c9      	bne.n	8007574 <HAL_SPI_Transmit+0x140>
 80075e0:	e053      	b.n	800768a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <HAL_SPI_Transmit+0x1c0>
 80075ea:	2316      	movs	r3, #22
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d145      	bne.n	8007680 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	330c      	adds	r3, #12
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800761a:	e031      	b.n	8007680 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2202      	movs	r2, #2
 8007624:	4013      	ands	r3, r2
 8007626:	2b02      	cmp	r3, #2
 8007628:	d113      	bne.n	8007652 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007650:	e016      	b.n	8007680 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007652:	f7fd fb71 	bl	8004d38 <HAL_GetTick>
 8007656:	0002      	movs	r2, r0
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d802      	bhi.n	8007668 <HAL_SPI_Transmit+0x234>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	d102      	bne.n	800766e <HAL_SPI_Transmit+0x23a>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d108      	bne.n	8007680 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800766e:	231f      	movs	r3, #31
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	2203      	movs	r2, #3
 8007674:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2251      	movs	r2, #81	@ 0x51
 800767a:	2101      	movs	r1, #1
 800767c:	5499      	strb	r1, [r3, r2]
          goto error;
 800767e:	e02b      	b.n	80076d8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1c8      	bne.n	800761c <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	0018      	movs	r0, r3
 8007692:	f000 fa85 	bl	8007ba0 <SPI_EndRxTxTransaction>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80076c6:	231f      	movs	r3, #31
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e003      	b.n	80076d8 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2251      	movs	r2, #81	@ 0x51
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2250      	movs	r2, #80	@ 0x50
 80076dc:	2100      	movs	r1, #0
 80076de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80076e0:	231f      	movs	r3, #31
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	781b      	ldrb	r3, [r3, #0]
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b008      	add	sp, #32
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b08c      	sub	sp, #48	@ 0x30
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	001a      	movs	r2, r3
 80076fc:	1cbb      	adds	r3, r7, #2
 80076fe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007700:	2301      	movs	r3, #1
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007704:	232b      	movs	r3, #43	@ 0x2b
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2250      	movs	r2, #80	@ 0x50
 8007710:	5c9b      	ldrb	r3, [r3, r2]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_SPI_TransmitReceive+0x2c>
 8007716:	2302      	movs	r3, #2
 8007718:	e1b0      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x38e>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2250      	movs	r2, #80	@ 0x50
 800771e:	2101      	movs	r1, #1
 8007720:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007722:	f7fd fb09 	bl	8004d38 <HAL_GetTick>
 8007726:	0003      	movs	r3, r0
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800772a:	2023      	movs	r0, #35	@ 0x23
 800772c:	183b      	adds	r3, r7, r0
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	2151      	movs	r1, #81	@ 0x51
 8007732:	5c52      	ldrb	r2, [r2, r1]
 8007734:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800773c:	231a      	movs	r3, #26
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	1cba      	adds	r2, r7, #2
 8007742:	8812      	ldrh	r2, [r2, #0]
 8007744:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007746:	183b      	adds	r3, r7, r0
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d011      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x84>
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	2382      	movs	r3, #130	@ 0x82
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	429a      	cmp	r2, r3
 8007756:	d107      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x7a>
 8007760:	183b      	adds	r3, r7, r0
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b04      	cmp	r3, #4
 8007766:	d004      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007768:	232b      	movs	r3, #43	@ 0x2b
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	2202      	movs	r2, #2
 800776e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007770:	e17d      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d006      	beq.n	8007786 <HAL_SPI_TransmitReceive+0x98>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_SPI_TransmitReceive+0x98>
 800777e:	1cbb      	adds	r3, r7, #2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007786:	232b      	movs	r3, #43	@ 0x2b
 8007788:	18fb      	adds	r3, r7, r3
 800778a:	2201      	movs	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
    goto error;
 800778e:	e16e      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2251      	movs	r2, #81	@ 0x51
 8007794:	5c9b      	ldrb	r3, [r3, r2]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b04      	cmp	r3, #4
 800779a:	d003      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2251      	movs	r2, #81	@ 0x51
 80077a0:	2105      	movs	r1, #5
 80077a2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1cba      	adds	r2, r7, #2
 80077b4:	8812      	ldrh	r2, [r2, #0]
 80077b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	1cba      	adds	r2, r7, #2
 80077bc:	8812      	ldrh	r2, [r2, #0]
 80077be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1cba      	adds	r2, r7, #2
 80077ca:	8812      	ldrh	r2, [r2, #0]
 80077cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1cba      	adds	r2, r7, #2
 80077d2:	8812      	ldrh	r2, [r2, #0]
 80077d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2240      	movs	r2, #64	@ 0x40
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b40      	cmp	r3, #64	@ 0x40
 80077ee:	d007      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2140      	movs	r1, #64	@ 0x40
 80077fc:	430a      	orrs	r2, r1
 80077fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	2380      	movs	r3, #128	@ 0x80
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	429a      	cmp	r2, r3
 800780a:	d000      	beq.n	800780e <HAL_SPI_TransmitReceive+0x120>
 800780c:	e07f      	b.n	800790e <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_SPI_TransmitReceive+0x134>
 8007816:	231a      	movs	r3, #26
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d000      	beq.n	8007822 <HAL_SPI_TransmitReceive+0x134>
 8007820:	e06a      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007846:	e057      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2202      	movs	r2, #2
 8007850:	4013      	ands	r3, r2
 8007852:	2b02      	cmp	r3, #2
 8007854:	d11b      	bne.n	800788e <HAL_SPI_TransmitReceive+0x1a0>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d016      	beq.n	800788e <HAL_SPI_TransmitReceive+0x1a0>
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d113      	bne.n	800788e <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2201      	movs	r2, #1
 8007896:	4013      	ands	r3, r2
 8007898:	2b01      	cmp	r3, #1
 800789a:	d119      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x1e2>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d014      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b0:	b292      	uxth	r2, r2
 80078b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	1c9a      	adds	r2, r3, #2
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078cc:	2301      	movs	r3, #1
 80078ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078d0:	f7fd fa32 	bl	8004d38 <HAL_GetTick>
 80078d4:	0002      	movs	r2, r0
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078dc:	429a      	cmp	r2, r3
 80078de:	d80b      	bhi.n	80078f8 <HAL_SPI_TransmitReceive+0x20a>
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	3301      	adds	r3, #1
 80078e4:	d008      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80078e6:	232b      	movs	r3, #43	@ 0x2b
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	2203      	movs	r2, #3
 80078ec:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2251      	movs	r2, #81	@ 0x51
 80078f2:	2101      	movs	r1, #1
 80078f4:	5499      	strb	r1, [r3, r2]
        goto error;
 80078f6:	e0ba      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1a2      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x15a>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d19d      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x15a>
 800790c:	e083      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x234>
 8007916:	231a      	movs	r3, #26
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d000      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x234>
 8007920:	e06f      	b.n	8007a02 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007948:	e05b      	b.n	8007a02 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2202      	movs	r2, #2
 8007952:	4013      	ands	r3, r2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d11c      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x2a4>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x2a4>
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d114      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2201      	movs	r2, #1
 800799a:	4013      	ands	r3, r2
 800799c:	2b01      	cmp	r3, #1
 800799e:	d119      	bne.n	80079d4 <HAL_SPI_TransmitReceive+0x2e6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d014      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079d0:	2301      	movs	r3, #1
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079d4:	f7fd f9b0 	bl	8004d38 <HAL_GetTick>
 80079d8:	0002      	movs	r2, r0
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d802      	bhi.n	80079ea <HAL_SPI_TransmitReceive+0x2fc>
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	3301      	adds	r3, #1
 80079e8:	d102      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x302>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d108      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80079f0:	232b      	movs	r3, #43	@ 0x2b
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	2203      	movs	r2, #3
 80079f6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2251      	movs	r2, #81	@ 0x51
 80079fc:	2101      	movs	r1, #1
 80079fe:	5499      	strb	r1, [r3, r2]
        goto error;
 8007a00:	e035      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d19e      	bne.n	800794a <HAL_SPI_TransmitReceive+0x25c>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d199      	bne.n	800794a <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 f8bf 	bl	8007ba0 <SPI_EndRxTxTransaction>
 8007a22:	1e03      	subs	r3, r0, #0
 8007a24:	d007      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8007a26:	232b      	movs	r3, #43	@ 0x2b
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007a34:	e01b      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8007a5c:	232b      	movs	r3, #43	@ 0x2b
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	2201      	movs	r2, #1
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e003      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2251      	movs	r2, #81	@ 0x51
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2250      	movs	r2, #80	@ 0x50
 8007a72:	2100      	movs	r1, #0
 8007a74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a76:	232b      	movs	r3, #43	@ 0x2b
 8007a78:	18fb      	adds	r3, r7, r3
 8007a7a:	781b      	ldrb	r3, [r3, #0]
}
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b00c      	add	sp, #48	@ 0x30
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	1dfb      	adds	r3, r7, #7
 8007a92:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a94:	f7fd f950 	bl	8004d38 <HAL_GetTick>
 8007a98:	0002      	movs	r2, r0
 8007a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007aa4:	f7fd f948 	bl	8004d38 <HAL_GetTick>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007aac:	4b3a      	ldr	r3, [pc, #232]	@ (8007b98 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	015b      	lsls	r3, r3, #5
 8007ab2:	0d1b      	lsrs	r3, r3, #20
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	4353      	muls	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aba:	e058      	b.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	d055      	beq.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ac2:	f7fd f939 	bl	8004d38 <HAL_GetTick>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d902      	bls.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d142      	bne.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	21e0      	movs	r1, #224	@ 0xe0
 8007ae4:	438a      	bics	r2, r1
 8007ae6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	2382      	movs	r3, #130	@ 0x82
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d113      	bne.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x98>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d005      	beq.n	8007b0c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	2380      	movs	r3, #128	@ 0x80
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d107      	bne.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2140      	movs	r1, #64	@ 0x40
 8007b18:	438a      	bics	r2, r1
 8007b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b20:	2380      	movs	r3, #128	@ 0x80
 8007b22:	019b      	lsls	r3, r3, #6
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d110      	bne.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	491a      	ldr	r1, [pc, #104]	@ (8007b9c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b34:	400a      	ands	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2180      	movs	r1, #128	@ 0x80
 8007b44:	0189      	lsls	r1, r1, #6
 8007b46:	430a      	orrs	r2, r1
 8007b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2251      	movs	r2, #81	@ 0x51
 8007b4e:	2101      	movs	r1, #1
 8007b50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2250      	movs	r2, #80	@ 0x50
 8007b56:	2100      	movs	r1, #0
 8007b58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e017      	b.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	4013      	ands	r3, r2
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	425a      	negs	r2, r3
 8007b7e:	4153      	adcs	r3, r2
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	001a      	movs	r2, r3
 8007b84:	1dfb      	adds	r3, r7, #7
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d197      	bne.n	8007abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b008      	add	sp, #32
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	20000010 	.word	0x20000010
 8007b9c:	ffffdfff 	.word	0xffffdfff

08007ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bac:	4b1d      	ldr	r3, [pc, #116]	@ (8007c24 <SPI_EndRxTxTransaction+0x84>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	491d      	ldr	r1, [pc, #116]	@ (8007c28 <SPI_EndRxTxTransaction+0x88>)
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f7f8 fac4 	bl	8000140 <__udivsi3>
 8007bb8:	0003      	movs	r3, r0
 8007bba:	001a      	movs	r2, r3
 8007bbc:	0013      	movs	r3, r2
 8007bbe:	015b      	lsls	r3, r3, #5
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	189b      	adds	r3, r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	2382      	movs	r3, #130	@ 0x82
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d112      	bne.n	8007bfc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	0013      	movs	r3, r2
 8007be0:	2200      	movs	r2, #0
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	f7ff ff4e 	bl	8007a84 <SPI_WaitFlagStateUntilTimeout>
 8007be8:	1e03      	subs	r3, r0, #0
 8007bea:	d016      	beq.n	8007c1a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e00f      	b.n	8007c1c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2280      	movs	r2, #128	@ 0x80
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b80      	cmp	r3, #128	@ 0x80
 8007c14:	d0f2      	beq.n	8007bfc <SPI_EndRxTxTransaction+0x5c>
 8007c16:	e000      	b.n	8007c1a <SPI_EndRxTxTransaction+0x7a>
        break;
 8007c18:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b006      	add	sp, #24
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000010 	.word	0x20000010
 8007c28:	016e3600 	.word	0x016e3600

08007c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e044      	b.n	8007cc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d107      	bne.n	8007c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2278      	movs	r2, #120	@ 0x78
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f7fc feb1 	bl	80049b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2224      	movs	r2, #36	@ 0x24
 8007c5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2101      	movs	r1, #1
 8007c68:	438a      	bics	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f000 f8d0 	bl	8007e14 <UART_SetConfig>
 8007c74:	0003      	movs	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e024      	b.n	8007cc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f000 fb61 	bl	8008350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	490d      	ldr	r1, [pc, #52]	@ (8007cd0 <HAL_UART_Init+0xa4>)
 8007c9a:	400a      	ands	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	212a      	movs	r1, #42	@ 0x2a
 8007caa:	438a      	bics	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2101      	movs	r1, #1
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f000 fbf9 	bl	80084b8 <UART_CheckIdleState>
 8007cc6:	0003      	movs	r3, r0
}
 8007cc8:	0018      	movs	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b002      	add	sp, #8
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	ffffb7ff 	.word	0xffffb7ff

08007cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	@ 0x28
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	1dbb      	adds	r3, r7, #6
 8007ce2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d000      	beq.n	8007cee <HAL_UART_Transmit+0x1a>
 8007cec:	e08c      	b.n	8007e08 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_UART_Transmit+0x28>
 8007cf4:	1dbb      	adds	r3, r7, #6
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e084      	b.n	8007e0a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	2380      	movs	r3, #128	@ 0x80
 8007d06:	015b      	lsls	r3, r3, #5
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d109      	bne.n	8007d20 <HAL_UART_Transmit+0x4c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2201      	movs	r2, #1
 8007d18:	4013      	ands	r3, r2
 8007d1a:	d001      	beq.n	8007d20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e074      	b.n	8007e0a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2284      	movs	r2, #132	@ 0x84
 8007d24:	2100      	movs	r1, #0
 8007d26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2221      	movs	r2, #33	@ 0x21
 8007d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2e:	f7fd f803 	bl	8004d38 <HAL_GetTick>
 8007d32:	0003      	movs	r3, r0
 8007d34:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1dba      	adds	r2, r7, #6
 8007d3a:	2150      	movs	r1, #80	@ 0x50
 8007d3c:	8812      	ldrh	r2, [r2, #0]
 8007d3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	1dba      	adds	r2, r7, #6
 8007d44:	2152      	movs	r1, #82	@ 0x52
 8007d46:	8812      	ldrh	r2, [r2, #0]
 8007d48:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	2380      	movs	r3, #128	@ 0x80
 8007d50:	015b      	lsls	r3, r3, #5
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d108      	bne.n	8007d68 <HAL_UART_Transmit+0x94>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	e003      	b.n	8007d70 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d70:	e02f      	b.n	8007dd2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	0013      	movs	r3, r2
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2180      	movs	r1, #128	@ 0x80
 8007d80:	f000 fc42 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 8007d84:	1e03      	subs	r3, r0, #0
 8007d86:	d004      	beq.n	8007d92 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e03b      	b.n	8007e0a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	001a      	movs	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	05d2      	lsls	r2, r2, #23
 8007da4:	0dd2      	lsrs	r2, r2, #23
 8007da6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	3302      	adds	r3, #2
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	e007      	b.n	8007dc0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	781a      	ldrb	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2252      	movs	r2, #82	@ 0x52
 8007dc4:	5a9b      	ldrh	r3, [r3, r2]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b299      	uxth	r1, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2252      	movs	r2, #82	@ 0x52
 8007dd0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2252      	movs	r2, #82	@ 0x52
 8007dd6:	5a9b      	ldrh	r3, [r3, r2]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1c9      	bne.n	8007d72 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	0013      	movs	r3, r2
 8007de8:	2200      	movs	r2, #0
 8007dea:	2140      	movs	r1, #64	@ 0x40
 8007dec:	f000 fc0c 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 8007df0:	1e03      	subs	r3, r0, #0
 8007df2:	d004      	beq.n	8007dfe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e005      	b.n	8007e0a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e000      	b.n	8007e0a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b008      	add	sp, #32
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e14:	b5b0      	push	{r4, r5, r7, lr}
 8007e16:	b08e      	sub	sp, #56	@ 0x38
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e1c:	231a      	movs	r3, #26
 8007e1e:	2218      	movs	r2, #24
 8007e20:	189b      	adds	r3, r3, r2
 8007e22:	19db      	adds	r3, r3, r7
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4ac3      	ldr	r2, [pc, #780]	@ (8008154 <UART_SetConfig+0x340>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	0019      	movs	r1, r3
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e52:	430a      	orrs	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4abe      	ldr	r2, [pc, #760]	@ (8008158 <UART_SetConfig+0x344>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	0019      	movs	r1, r3
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4ab8      	ldr	r2, [pc, #736]	@ (800815c <UART_SetConfig+0x348>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e84:	4313      	orrs	r3, r2
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	4ab4      	ldr	r2, [pc, #720]	@ (8008160 <UART_SetConfig+0x34c>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	0019      	movs	r1, r3
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4ab0      	ldr	r2, [pc, #704]	@ (8008164 <UART_SetConfig+0x350>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d131      	bne.n	8007f0c <UART_SetConfig+0xf8>
 8007ea8:	4baf      	ldr	r3, [pc, #700]	@ (8008168 <UART_SetConfig+0x354>)
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eac:	2203      	movs	r2, #3
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d01d      	beq.n	8007ef0 <UART_SetConfig+0xdc>
 8007eb4:	d823      	bhi.n	8007efe <UART_SetConfig+0xea>
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d00c      	beq.n	8007ed4 <UART_SetConfig+0xc0>
 8007eba:	d820      	bhi.n	8007efe <UART_SetConfig+0xea>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <UART_SetConfig+0xb2>
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d00e      	beq.n	8007ee2 <UART_SetConfig+0xce>
 8007ec4:	e01b      	b.n	8007efe <UART_SetConfig+0xea>
 8007ec6:	231b      	movs	r3, #27
 8007ec8:	2218      	movs	r2, #24
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	19db      	adds	r3, r3, r7
 8007ece:	2201      	movs	r2, #1
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e0b4      	b.n	800803e <UART_SetConfig+0x22a>
 8007ed4:	231b      	movs	r3, #27
 8007ed6:	2218      	movs	r2, #24
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	19db      	adds	r3, r3, r7
 8007edc:	2202      	movs	r2, #2
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	e0ad      	b.n	800803e <UART_SetConfig+0x22a>
 8007ee2:	231b      	movs	r3, #27
 8007ee4:	2218      	movs	r2, #24
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	19db      	adds	r3, r3, r7
 8007eea:	2204      	movs	r2, #4
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e0a6      	b.n	800803e <UART_SetConfig+0x22a>
 8007ef0:	231b      	movs	r3, #27
 8007ef2:	2218      	movs	r2, #24
 8007ef4:	189b      	adds	r3, r3, r2
 8007ef6:	19db      	adds	r3, r3, r7
 8007ef8:	2208      	movs	r2, #8
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e09f      	b.n	800803e <UART_SetConfig+0x22a>
 8007efe:	231b      	movs	r3, #27
 8007f00:	2218      	movs	r2, #24
 8007f02:	189b      	adds	r3, r3, r2
 8007f04:	19db      	adds	r3, r3, r7
 8007f06:	2210      	movs	r2, #16
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	e098      	b.n	800803e <UART_SetConfig+0x22a>
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a96      	ldr	r2, [pc, #600]	@ (800816c <UART_SetConfig+0x358>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d131      	bne.n	8007f7a <UART_SetConfig+0x166>
 8007f16:	4b94      	ldr	r3, [pc, #592]	@ (8008168 <UART_SetConfig+0x354>)
 8007f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1a:	220c      	movs	r2, #12
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d01d      	beq.n	8007f5e <UART_SetConfig+0x14a>
 8007f22:	d823      	bhi.n	8007f6c <UART_SetConfig+0x158>
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d00c      	beq.n	8007f42 <UART_SetConfig+0x12e>
 8007f28:	d820      	bhi.n	8007f6c <UART_SetConfig+0x158>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <UART_SetConfig+0x120>
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d00e      	beq.n	8007f50 <UART_SetConfig+0x13c>
 8007f32:	e01b      	b.n	8007f6c <UART_SetConfig+0x158>
 8007f34:	231b      	movs	r3, #27
 8007f36:	2218      	movs	r2, #24
 8007f38:	189b      	adds	r3, r3, r2
 8007f3a:	19db      	adds	r3, r3, r7
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	e07d      	b.n	800803e <UART_SetConfig+0x22a>
 8007f42:	231b      	movs	r3, #27
 8007f44:	2218      	movs	r2, #24
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e076      	b.n	800803e <UART_SetConfig+0x22a>
 8007f50:	231b      	movs	r3, #27
 8007f52:	2218      	movs	r2, #24
 8007f54:	189b      	adds	r3, r3, r2
 8007f56:	19db      	adds	r3, r3, r7
 8007f58:	2204      	movs	r2, #4
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	e06f      	b.n	800803e <UART_SetConfig+0x22a>
 8007f5e:	231b      	movs	r3, #27
 8007f60:	2218      	movs	r2, #24
 8007f62:	189b      	adds	r3, r3, r2
 8007f64:	19db      	adds	r3, r3, r7
 8007f66:	2208      	movs	r2, #8
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e068      	b.n	800803e <UART_SetConfig+0x22a>
 8007f6c:	231b      	movs	r3, #27
 8007f6e:	2218      	movs	r2, #24
 8007f70:	189b      	adds	r3, r3, r2
 8007f72:	19db      	adds	r3, r3, r7
 8007f74:	2210      	movs	r2, #16
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e061      	b.n	800803e <UART_SetConfig+0x22a>
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8008170 <UART_SetConfig+0x35c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d106      	bne.n	8007f92 <UART_SetConfig+0x17e>
 8007f84:	231b      	movs	r3, #27
 8007f86:	2218      	movs	r2, #24
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	19db      	adds	r3, r3, r7
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e055      	b.n	800803e <UART_SetConfig+0x22a>
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a77      	ldr	r2, [pc, #476]	@ (8008174 <UART_SetConfig+0x360>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d106      	bne.n	8007faa <UART_SetConfig+0x196>
 8007f9c:	231b      	movs	r3, #27
 8007f9e:	2218      	movs	r2, #24
 8007fa0:	189b      	adds	r3, r3, r2
 8007fa2:	19db      	adds	r3, r3, r7
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
 8007fa8:	e049      	b.n	800803e <UART_SetConfig+0x22a>
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a6b      	ldr	r2, [pc, #428]	@ (800815c <UART_SetConfig+0x348>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d13e      	bne.n	8008032 <UART_SetConfig+0x21e>
 8007fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8008168 <UART_SetConfig+0x354>)
 8007fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fb8:	23c0      	movs	r3, #192	@ 0xc0
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	22c0      	movs	r2, #192	@ 0xc0
 8007fc0:	0112      	lsls	r2, r2, #4
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d027      	beq.n	8008016 <UART_SetConfig+0x202>
 8007fc6:	22c0      	movs	r2, #192	@ 0xc0
 8007fc8:	0112      	lsls	r2, r2, #4
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d82a      	bhi.n	8008024 <UART_SetConfig+0x210>
 8007fce:	2280      	movs	r2, #128	@ 0x80
 8007fd0:	0112      	lsls	r2, r2, #4
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d011      	beq.n	8007ffa <UART_SetConfig+0x1e6>
 8007fd6:	2280      	movs	r2, #128	@ 0x80
 8007fd8:	0112      	lsls	r2, r2, #4
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d822      	bhi.n	8008024 <UART_SetConfig+0x210>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <UART_SetConfig+0x1d8>
 8007fe2:	2280      	movs	r2, #128	@ 0x80
 8007fe4:	00d2      	lsls	r2, r2, #3
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <UART_SetConfig+0x1f4>
 8007fea:	e01b      	b.n	8008024 <UART_SetConfig+0x210>
 8007fec:	231b      	movs	r3, #27
 8007fee:	2218      	movs	r2, #24
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	19db      	adds	r3, r3, r7
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e021      	b.n	800803e <UART_SetConfig+0x22a>
 8007ffa:	231b      	movs	r3, #27
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	189b      	adds	r3, r3, r2
 8008000:	19db      	adds	r3, r3, r7
 8008002:	2202      	movs	r2, #2
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	e01a      	b.n	800803e <UART_SetConfig+0x22a>
 8008008:	231b      	movs	r3, #27
 800800a:	2218      	movs	r2, #24
 800800c:	189b      	adds	r3, r3, r2
 800800e:	19db      	adds	r3, r3, r7
 8008010:	2204      	movs	r2, #4
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e013      	b.n	800803e <UART_SetConfig+0x22a>
 8008016:	231b      	movs	r3, #27
 8008018:	2218      	movs	r2, #24
 800801a:	189b      	adds	r3, r3, r2
 800801c:	19db      	adds	r3, r3, r7
 800801e:	2208      	movs	r2, #8
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e00c      	b.n	800803e <UART_SetConfig+0x22a>
 8008024:	231b      	movs	r3, #27
 8008026:	2218      	movs	r2, #24
 8008028:	189b      	adds	r3, r3, r2
 800802a:	19db      	adds	r3, r3, r7
 800802c:	2210      	movs	r2, #16
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	e005      	b.n	800803e <UART_SetConfig+0x22a>
 8008032:	231b      	movs	r3, #27
 8008034:	2218      	movs	r2, #24
 8008036:	189b      	adds	r3, r3, r2
 8008038:	19db      	adds	r3, r3, r7
 800803a:	2210      	movs	r2, #16
 800803c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a46      	ldr	r2, [pc, #280]	@ (800815c <UART_SetConfig+0x348>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d000      	beq.n	800804a <UART_SetConfig+0x236>
 8008048:	e09a      	b.n	8008180 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800804a:	231b      	movs	r3, #27
 800804c:	2218      	movs	r2, #24
 800804e:	189b      	adds	r3, r3, r2
 8008050:	19db      	adds	r3, r3, r7
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d01d      	beq.n	8008094 <UART_SetConfig+0x280>
 8008058:	dc20      	bgt.n	800809c <UART_SetConfig+0x288>
 800805a:	2b04      	cmp	r3, #4
 800805c:	d015      	beq.n	800808a <UART_SetConfig+0x276>
 800805e:	dc1d      	bgt.n	800809c <UART_SetConfig+0x288>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <UART_SetConfig+0x256>
 8008064:	2b02      	cmp	r3, #2
 8008066:	d005      	beq.n	8008074 <UART_SetConfig+0x260>
 8008068:	e018      	b.n	800809c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806a:	f7fe fd85 	bl	8006b78 <HAL_RCC_GetPCLK1Freq>
 800806e:	0003      	movs	r3, r0
 8008070:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008072:	e01c      	b.n	80080ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008074:	4b3c      	ldr	r3, [pc, #240]	@ (8008168 <UART_SetConfig+0x354>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2210      	movs	r2, #16
 800807a:	4013      	ands	r3, r2
 800807c:	d002      	beq.n	8008084 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800807e:	4b3e      	ldr	r3, [pc, #248]	@ (8008178 <UART_SetConfig+0x364>)
 8008080:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008084:	4b3d      	ldr	r3, [pc, #244]	@ (800817c <UART_SetConfig+0x368>)
 8008086:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008088:	e011      	b.n	80080ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800808a:	f7fe fcc5 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 800808e:	0003      	movs	r3, r0
 8008090:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008092:	e00c      	b.n	80080ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008094:	2380      	movs	r3, #128	@ 0x80
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800809a:	e008      	b.n	80080ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80080a0:	231a      	movs	r3, #26
 80080a2:	2218      	movs	r2, #24
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	19db      	adds	r3, r3, r7
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
        break;
 80080ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d100      	bne.n	80080b6 <UART_SetConfig+0x2a2>
 80080b4:	e133      	b.n	800831e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	0013      	movs	r3, r2
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	189b      	adds	r3, r3, r2
 80080c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d305      	bcc.n	80080d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d906      	bls.n	80080e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80080d2:	231a      	movs	r3, #26
 80080d4:	2218      	movs	r2, #24
 80080d6:	189b      	adds	r3, r3, r2
 80080d8:	19db      	adds	r3, r3, r7
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e11e      	b.n	800831e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	6939      	ldr	r1, [r7, #16]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	000b      	movs	r3, r1
 80080ee:	0e1b      	lsrs	r3, r3, #24
 80080f0:	0010      	movs	r0, r2
 80080f2:	0205      	lsls	r5, r0, #8
 80080f4:	431d      	orrs	r5, r3
 80080f6:	000b      	movs	r3, r1
 80080f8:	021c      	lsls	r4, r3, #8
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	68b8      	ldr	r0, [r7, #8]
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	1900      	adds	r0, r0, r4
 800810c:	4169      	adcs	r1, r5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f7f8 f9fe 	bl	800051c <__aeabi_uldivmod>
 8008120:	0002      	movs	r2, r0
 8008122:	000b      	movs	r3, r1
 8008124:	0013      	movs	r3, r2
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800812a:	23c0      	movs	r3, #192	@ 0xc0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	429a      	cmp	r2, r3
 8008130:	d309      	bcc.n	8008146 <UART_SetConfig+0x332>
 8008132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008134:	2380      	movs	r3, #128	@ 0x80
 8008136:	035b      	lsls	r3, r3, #13
 8008138:	429a      	cmp	r2, r3
 800813a:	d204      	bcs.n	8008146 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	e0eb      	b.n	800831e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8008146:	231a      	movs	r3, #26
 8008148:	2218      	movs	r2, #24
 800814a:	189b      	adds	r3, r3, r2
 800814c:	19db      	adds	r3, r3, r7
 800814e:	2201      	movs	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e0e4      	b.n	800831e <UART_SetConfig+0x50a>
 8008154:	efff69f3 	.word	0xefff69f3
 8008158:	ffffcfff 	.word	0xffffcfff
 800815c:	40004800 	.word	0x40004800
 8008160:	fffff4ff 	.word	0xfffff4ff
 8008164:	40013800 	.word	0x40013800
 8008168:	40021000 	.word	0x40021000
 800816c:	40004400 	.word	0x40004400
 8008170:	40004c00 	.word	0x40004c00
 8008174:	40005000 	.word	0x40005000
 8008178:	003d0900 	.word	0x003d0900
 800817c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	2380      	movs	r3, #128	@ 0x80
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	429a      	cmp	r2, r3
 800818a:	d000      	beq.n	800818e <UART_SetConfig+0x37a>
 800818c:	e070      	b.n	8008270 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800818e:	231b      	movs	r3, #27
 8008190:	2218      	movs	r2, #24
 8008192:	189b      	adds	r3, r3, r2
 8008194:	19db      	adds	r3, r3, r7
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d822      	bhi.n	80081e2 <UART_SetConfig+0x3ce>
 800819c:	009a      	lsls	r2, r3, #2
 800819e:	4b67      	ldr	r3, [pc, #412]	@ (800833c <UART_SetConfig+0x528>)
 80081a0:	18d3      	adds	r3, r2, r3
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a6:	f7fe fce7 	bl	8006b78 <HAL_RCC_GetPCLK1Freq>
 80081aa:	0003      	movs	r3, r0
 80081ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081ae:	e021      	b.n	80081f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe fcf8 	bl	8006ba4 <HAL_RCC_GetPCLK2Freq>
 80081b4:	0003      	movs	r3, r0
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081b8:	e01c      	b.n	80081f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081ba:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <UART_SetConfig+0x52c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2210      	movs	r2, #16
 80081c0:	4013      	ands	r3, r2
 80081c2:	d002      	beq.n	80081ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80081c4:	4b5f      	ldr	r3, [pc, #380]	@ (8008344 <UART_SetConfig+0x530>)
 80081c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c8:	e014      	b.n	80081f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80081ca:	4b5f      	ldr	r3, [pc, #380]	@ (8008348 <UART_SetConfig+0x534>)
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081ce:	e011      	b.n	80081f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081d0:	f7fe fc22 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 80081d4:	0003      	movs	r3, r0
 80081d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081da:	2380      	movs	r3, #128	@ 0x80
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80081e6:	231a      	movs	r3, #26
 80081e8:	2218      	movs	r2, #24
 80081ea:	189b      	adds	r3, r3, r2
 80081ec:	19db      	adds	r3, r3, r7
 80081ee:	2201      	movs	r2, #1
 80081f0:	701a      	strb	r2, [r3, #0]
        break;
 80081f2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d100      	bne.n	80081fc <UART_SetConfig+0x3e8>
 80081fa:	e090      	b.n	800831e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	005a      	lsls	r2, r3, #1
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	18d2      	adds	r2, r2, r3
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	0019      	movs	r1, r3
 800820e:	0010      	movs	r0, r2
 8008210:	f7f7 ff96 	bl	8000140 <__udivsi3>
 8008214:	0003      	movs	r3, r0
 8008216:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	2b0f      	cmp	r3, #15
 800821c:	d921      	bls.n	8008262 <UART_SetConfig+0x44e>
 800821e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008220:	2380      	movs	r3, #128	@ 0x80
 8008222:	025b      	lsls	r3, r3, #9
 8008224:	429a      	cmp	r2, r3
 8008226:	d21c      	bcs.n	8008262 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822a:	b29a      	uxth	r2, r3
 800822c:	200e      	movs	r0, #14
 800822e:	2418      	movs	r4, #24
 8008230:	1903      	adds	r3, r0, r4
 8008232:	19db      	adds	r3, r3, r7
 8008234:	210f      	movs	r1, #15
 8008236:	438a      	bics	r2, r1
 8008238:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	b29b      	uxth	r3, r3
 8008240:	2207      	movs	r2, #7
 8008242:	4013      	ands	r3, r2
 8008244:	b299      	uxth	r1, r3
 8008246:	1903      	adds	r3, r0, r4
 8008248:	19db      	adds	r3, r3, r7
 800824a:	1902      	adds	r2, r0, r4
 800824c:	19d2      	adds	r2, r2, r7
 800824e:	8812      	ldrh	r2, [r2, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	1902      	adds	r2, r0, r4
 800825a:	19d2      	adds	r2, r2, r7
 800825c:	8812      	ldrh	r2, [r2, #0]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	e05d      	b.n	800831e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008262:	231a      	movs	r3, #26
 8008264:	2218      	movs	r2, #24
 8008266:	189b      	adds	r3, r3, r2
 8008268:	19db      	adds	r3, r3, r7
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e056      	b.n	800831e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008270:	231b      	movs	r3, #27
 8008272:	2218      	movs	r2, #24
 8008274:	189b      	adds	r3, r3, r2
 8008276:	19db      	adds	r3, r3, r7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b08      	cmp	r3, #8
 800827c:	d822      	bhi.n	80082c4 <UART_SetConfig+0x4b0>
 800827e:	009a      	lsls	r2, r3, #2
 8008280:	4b32      	ldr	r3, [pc, #200]	@ (800834c <UART_SetConfig+0x538>)
 8008282:	18d3      	adds	r3, r2, r3
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008288:	f7fe fc76 	bl	8006b78 <HAL_RCC_GetPCLK1Freq>
 800828c:	0003      	movs	r3, r0
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008290:	e021      	b.n	80082d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008292:	f7fe fc87 	bl	8006ba4 <HAL_RCC_GetPCLK2Freq>
 8008296:	0003      	movs	r3, r0
 8008298:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800829a:	e01c      	b.n	80082d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <UART_SetConfig+0x52c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2210      	movs	r2, #16
 80082a2:	4013      	ands	r3, r2
 80082a4:	d002      	beq.n	80082ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80082a6:	4b27      	ldr	r3, [pc, #156]	@ (8008344 <UART_SetConfig+0x530>)
 80082a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082aa:	e014      	b.n	80082d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80082ac:	4b26      	ldr	r3, [pc, #152]	@ (8008348 <UART_SetConfig+0x534>)
 80082ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80082b0:	e011      	b.n	80082d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b2:	f7fe fbb1 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 80082b6:	0003      	movs	r3, r0
 80082b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80082ba:	e00c      	b.n	80082d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082bc:	2380      	movs	r3, #128	@ 0x80
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80082c2:	e008      	b.n	80082d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80082c8:	231a      	movs	r3, #26
 80082ca:	2218      	movs	r2, #24
 80082cc:	189b      	adds	r3, r3, r2
 80082ce:	19db      	adds	r3, r3, r7
 80082d0:	2201      	movs	r2, #1
 80082d2:	701a      	strb	r2, [r3, #0]
        break;
 80082d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80082d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d020      	beq.n	800831e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	085a      	lsrs	r2, r3, #1
 80082e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e4:	18d2      	adds	r2, r2, r3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	0019      	movs	r1, r3
 80082ec:	0010      	movs	r0, r2
 80082ee:	f7f7 ff27 	bl	8000140 <__udivsi3>
 80082f2:	0003      	movs	r3, r0
 80082f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f8:	2b0f      	cmp	r3, #15
 80082fa:	d90a      	bls.n	8008312 <UART_SetConfig+0x4fe>
 80082fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082fe:	2380      	movs	r3, #128	@ 0x80
 8008300:	025b      	lsls	r3, r3, #9
 8008302:	429a      	cmp	r2, r3
 8008304:	d205      	bcs.n	8008312 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	b29a      	uxth	r2, r3
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60da      	str	r2, [r3, #12]
 8008310:	e005      	b.n	800831e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008312:	231a      	movs	r3, #26
 8008314:	2218      	movs	r2, #24
 8008316:	189b      	adds	r3, r3, r2
 8008318:	19db      	adds	r3, r3, r7
 800831a:	2201      	movs	r2, #1
 800831c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2200      	movs	r2, #0
 8008322:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	2200      	movs	r2, #0
 8008328:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800832a:	231a      	movs	r3, #26
 800832c:	2218      	movs	r2, #24
 800832e:	189b      	adds	r3, r3, r2
 8008330:	19db      	adds	r3, r3, r7
 8008332:	781b      	ldrb	r3, [r3, #0]
}
 8008334:	0018      	movs	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	b00e      	add	sp, #56	@ 0x38
 800833a:	bdb0      	pop	{r4, r5, r7, pc}
 800833c:	08010850 	.word	0x08010850
 8008340:	40021000 	.word	0x40021000
 8008344:	003d0900 	.word	0x003d0900
 8008348:	00f42400 	.word	0x00f42400
 800834c:	08010874 	.word	0x08010874

08008350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	2201      	movs	r2, #1
 800835e:	4013      	ands	r3, r2
 8008360:	d00b      	beq.n	800837a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a4a      	ldr	r2, [pc, #296]	@ (8008494 <UART_AdvFeatureConfig+0x144>)
 800836a:	4013      	ands	r3, r2
 800836c:	0019      	movs	r1, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	2202      	movs	r2, #2
 8008380:	4013      	ands	r3, r2
 8008382:	d00b      	beq.n	800839c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4a43      	ldr	r2, [pc, #268]	@ (8008498 <UART_AdvFeatureConfig+0x148>)
 800838c:	4013      	ands	r3, r2
 800838e:	0019      	movs	r1, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	2204      	movs	r2, #4
 80083a2:	4013      	ands	r3, r2
 80083a4:	d00b      	beq.n	80083be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4a3b      	ldr	r2, [pc, #236]	@ (800849c <UART_AdvFeatureConfig+0x14c>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	0019      	movs	r1, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c2:	2208      	movs	r2, #8
 80083c4:	4013      	ands	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4a34      	ldr	r2, [pc, #208]	@ (80084a0 <UART_AdvFeatureConfig+0x150>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	0019      	movs	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e4:	2210      	movs	r2, #16
 80083e6:	4013      	ands	r3, r2
 80083e8:	d00b      	beq.n	8008402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	@ (80084a4 <UART_AdvFeatureConfig+0x154>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	0019      	movs	r1, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008406:	2220      	movs	r2, #32
 8008408:	4013      	ands	r3, r2
 800840a:	d00b      	beq.n	8008424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	4a25      	ldr	r2, [pc, #148]	@ (80084a8 <UART_AdvFeatureConfig+0x158>)
 8008414:	4013      	ands	r3, r2
 8008416:	0019      	movs	r1, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	2240      	movs	r2, #64	@ 0x40
 800842a:	4013      	ands	r3, r2
 800842c:	d01d      	beq.n	800846a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4a1d      	ldr	r2, [pc, #116]	@ (80084ac <UART_AdvFeatureConfig+0x15c>)
 8008436:	4013      	ands	r3, r2
 8008438:	0019      	movs	r1, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800844a:	2380      	movs	r3, #128	@ 0x80
 800844c:	035b      	lsls	r3, r3, #13
 800844e:	429a      	cmp	r2, r3
 8008450:	d10b      	bne.n	800846a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a15      	ldr	r2, [pc, #84]	@ (80084b0 <UART_AdvFeatureConfig+0x160>)
 800845a:	4013      	ands	r3, r2
 800845c:	0019      	movs	r1, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	2280      	movs	r2, #128	@ 0x80
 8008470:	4013      	ands	r3, r2
 8008472:	d00b      	beq.n	800848c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4a0e      	ldr	r2, [pc, #56]	@ (80084b4 <UART_AdvFeatureConfig+0x164>)
 800847c:	4013      	ands	r3, r2
 800847e:	0019      	movs	r1, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }
}
 800848c:	46c0      	nop			@ (mov r8, r8)
 800848e:	46bd      	mov	sp, r7
 8008490:	b002      	add	sp, #8
 8008492:	bd80      	pop	{r7, pc}
 8008494:	fffdffff 	.word	0xfffdffff
 8008498:	fffeffff 	.word	0xfffeffff
 800849c:	fffbffff 	.word	0xfffbffff
 80084a0:	ffff7fff 	.word	0xffff7fff
 80084a4:	ffffefff 	.word	0xffffefff
 80084a8:	ffffdfff 	.word	0xffffdfff
 80084ac:	ffefffff 	.word	0xffefffff
 80084b0:	ff9fffff 	.word	0xff9fffff
 80084b4:	fff7ffff 	.word	0xfff7ffff

080084b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b092      	sub	sp, #72	@ 0x48
 80084bc:	af02      	add	r7, sp, #8
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2284      	movs	r2, #132	@ 0x84
 80084c4:	2100      	movs	r1, #0
 80084c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084c8:	f7fc fc36 	bl	8004d38 <HAL_GetTick>
 80084cc:	0003      	movs	r3, r0
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2208      	movs	r2, #8
 80084d8:	4013      	ands	r3, r2
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d12c      	bne.n	8008538 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e0:	2280      	movs	r2, #128	@ 0x80
 80084e2:	0391      	lsls	r1, r2, #14
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4a46      	ldr	r2, [pc, #280]	@ (8008600 <UART_CheckIdleState+0x148>)
 80084e8:	9200      	str	r2, [sp, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f000 f88c 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 80084f0:	1e03      	subs	r3, r0, #0
 80084f2:	d021      	beq.n	8008538 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f4:	f3ef 8310 	mrs	r3, PRIMASK
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084fe:	2301      	movs	r3, #1
 8008500:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008504:	f383 8810 	msr	PRIMASK, r3
}
 8008508:	46c0      	nop			@ (mov r8, r8)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2180      	movs	r1, #128	@ 0x80
 8008516:	438a      	bics	r2, r1
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	f383 8810 	msr	PRIMASK, r3
}
 8008524:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2278      	movs	r2, #120	@ 0x78
 8008530:	2100      	movs	r1, #0
 8008532:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e05f      	b.n	80085f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2204      	movs	r2, #4
 8008540:	4013      	ands	r3, r2
 8008542:	2b04      	cmp	r3, #4
 8008544:	d146      	bne.n	80085d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008548:	2280      	movs	r2, #128	@ 0x80
 800854a:	03d1      	lsls	r1, r2, #15
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4a2c      	ldr	r2, [pc, #176]	@ (8008600 <UART_CheckIdleState+0x148>)
 8008550:	9200      	str	r2, [sp, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	f000 f858 	bl	8008608 <UART_WaitOnFlagUntilTimeout>
 8008558:	1e03      	subs	r3, r0, #0
 800855a:	d03b      	beq.n	80085d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800855c:	f3ef 8310 	mrs	r3, PRIMASK
 8008560:	60fb      	str	r3, [r7, #12]
  return(result);
 8008562:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	2301      	movs	r3, #1
 8008568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f383 8810 	msr	PRIMASK, r3
}
 8008570:	46c0      	nop			@ (mov r8, r8)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4921      	ldr	r1, [pc, #132]	@ (8008604 <UART_CheckIdleState+0x14c>)
 800857e:	400a      	ands	r2, r1
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f383 8810 	msr	PRIMASK, r3
}
 800858c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800858e:	f3ef 8310 	mrs	r3, PRIMASK
 8008592:	61bb      	str	r3, [r7, #24]
  return(result);
 8008594:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30
 8008598:	2301      	movs	r3, #1
 800859a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	46c0      	nop			@ (mov r8, r8)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2101      	movs	r1, #1
 80085b0:	438a      	bics	r2, r1
 80085b2:	609a      	str	r2, [r3, #8]
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f383 8810 	msr	PRIMASK, r3
}
 80085be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2280      	movs	r2, #128	@ 0x80
 80085c4:	2120      	movs	r1, #32
 80085c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2278      	movs	r2, #120	@ 0x78
 80085cc:	2100      	movs	r1, #0
 80085ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e011      	b.n	80085f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2280      	movs	r2, #128	@ 0x80
 80085de:	2120      	movs	r1, #32
 80085e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2278      	movs	r2, #120	@ 0x78
 80085f2:	2100      	movs	r1, #0
 80085f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	0018      	movs	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b010      	add	sp, #64	@ 0x40
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	01ffffff 	.word	0x01ffffff
 8008604:	fffffedf 	.word	0xfffffedf

08008608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	1dfb      	adds	r3, r7, #7
 8008616:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008618:	e04b      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	3301      	adds	r3, #1
 800861e:	d048      	beq.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008620:	f7fc fb8a 	bl	8004d38 <HAL_GetTick>
 8008624:	0002      	movs	r2, r0
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e04b      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2204      	movs	r2, #4
 8008642:	4013      	ands	r3, r2
 8008644:	d035      	beq.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	2208      	movs	r2, #8
 800864e:	4013      	ands	r3, r2
 8008650:	2b08      	cmp	r3, #8
 8008652:	d111      	bne.n	8008678 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2208      	movs	r2, #8
 800865a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	0018      	movs	r0, r3
 8008660:	f000 f83c 	bl	80086dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2284      	movs	r2, #132	@ 0x84
 8008668:	2108      	movs	r1, #8
 800866a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2278      	movs	r2, #120	@ 0x78
 8008670:	2100      	movs	r1, #0
 8008672:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e02c      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	69da      	ldr	r2, [r3, #28]
 800867e:	2380      	movs	r3, #128	@ 0x80
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	401a      	ands	r2, r3
 8008684:	2380      	movs	r3, #128	@ 0x80
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	429a      	cmp	r2, r3
 800868a:	d112      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2280      	movs	r2, #128	@ 0x80
 8008692:	0112      	lsls	r2, r2, #4
 8008694:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	0018      	movs	r0, r3
 800869a:	f000 f81f 	bl	80086dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2284      	movs	r2, #132	@ 0x84
 80086a2:	2120      	movs	r1, #32
 80086a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2278      	movs	r2, #120	@ 0x78
 80086aa:	2100      	movs	r1, #0
 80086ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e00f      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	425a      	negs	r2, r3
 80086c2:	4153      	adcs	r3, r2
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	001a      	movs	r2, r3
 80086c8:	1dfb      	adds	r3, r7, #7
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d0a4      	beq.n	800861a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	0018      	movs	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b004      	add	sp, #16
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	@ 0x38
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e4:	f3ef 8310 	mrs	r3, PRIMASK
 80086e8:	617b      	str	r3, [r7, #20]
  return(result);
 80086ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ee:	2301      	movs	r3, #1
 80086f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f383 8810 	msr	PRIMASK, r3
}
 80086f8:	46c0      	nop			@ (mov r8, r8)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4926      	ldr	r1, [pc, #152]	@ (80087a0 <UART_EndRxTransfer+0xc4>)
 8008706:	400a      	ands	r2, r1
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f383 8810 	msr	PRIMASK, r3
}
 8008714:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	623b      	str	r3, [r7, #32]
  return(result);
 800871c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008720:	2301      	movs	r3, #1
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	f383 8810 	msr	PRIMASK, r3
}
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2101      	movs	r1, #1
 8008738:	438a      	bics	r2, r1
 800873a:	609a      	str	r2, [r3, #8]
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	f383 8810 	msr	PRIMASK, r3
}
 8008746:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800874c:	2b01      	cmp	r3, #1
 800874e:	d118      	bne.n	8008782 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008750:	f3ef 8310 	mrs	r3, PRIMASK
 8008754:	60bb      	str	r3, [r7, #8]
  return(result);
 8008756:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800875a:	2301      	movs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f383 8810 	msr	PRIMASK, r3
}
 8008764:	46c0      	nop			@ (mov r8, r8)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2110      	movs	r1, #16
 8008772:	438a      	bics	r2, r1
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f383 8810 	msr	PRIMASK, r3
}
 8008780:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2280      	movs	r2, #128	@ 0x80
 8008786:	2120      	movs	r1, #32
 8008788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b00e      	add	sp, #56	@ 0x38
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	fffffedf 	.word	0xfffffedf

080087a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80087a8:	4a06      	ldr	r2, [pc, #24]	@ (80087c4 <MX_FATFS_Init+0x20>)
 80087aa:	4b07      	ldr	r3, [pc, #28]	@ (80087c8 <MX_FATFS_Init+0x24>)
 80087ac:	0011      	movs	r1, r2
 80087ae:	0018      	movs	r0, r3
 80087b0:	f003 f8f0 	bl	800b994 <FATFS_LinkDriver>
 80087b4:	0003      	movs	r3, r0
 80087b6:	001a      	movs	r2, r3
 80087b8:	4b04      	ldr	r3, [pc, #16]	@ (80087cc <MX_FATFS_Init+0x28>)
 80087ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80087bc:	46c0      	nop			@ (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	46c0      	nop			@ (mov r8, r8)
 80087c4:	20000a04 	.word	0x20000a04
 80087c8:	2000001c 	.word	0x2000001c
 80087cc:	20000a00 	.word	0x20000a00

080087d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80087d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80087d6:	0018      	movs	r0, r3
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	0002      	movs	r2, r0
 80087e4:	1dfb      	adds	r3, r7, #7
 80087e6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80087e8:	1dfb      	adds	r3, r7, #7
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	0018      	movs	r0, r3
 80087ee:	f000 fa1d 	bl	8008c2c <USER_SPI_initialize>
 80087f2:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END INIT */
}
 80087f4:	0018      	movs	r0, r3
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b002      	add	sp, #8
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	0002      	movs	r2, r0
 8008804:	1dfb      	adds	r3, r7, #7
 8008806:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008808:	1dfb      	adds	r3, r7, #7
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	0018      	movs	r0, r3
 800880e:	f000 fb25 	bl	8008e5c <USER_SPI_status>
 8008812:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END STATUS */
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b002      	add	sp, #8
 800881a:	bd80      	pop	{r7, pc}

0800881c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800881c:	b5b0      	push	{r4, r5, r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	250f      	movs	r5, #15
 800882a:	197b      	adds	r3, r7, r5
 800882c:	1c02      	adds	r2, r0, #0
 800882e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008830:	683c      	ldr	r4, [r7, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	197b      	adds	r3, r7, r5
 8008838:	7818      	ldrb	r0, [r3, #0]
 800883a:	0023      	movs	r3, r4
 800883c:	f000 fb24 	bl	8008e88 <USER_SPI_read>
 8008840:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 8008842:	0018      	movs	r0, r3
 8008844:	46bd      	mov	sp, r7
 8008846:	b004      	add	sp, #16
 8008848:	bdb0      	pop	{r4, r5, r7, pc}

0800884a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800884a:	b5b0      	push	{r4, r5, r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	250f      	movs	r5, #15
 8008858:	197b      	adds	r3, r7, r5
 800885a:	1c02      	adds	r2, r0, #0
 800885c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800885e:	683c      	ldr	r4, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	197b      	adds	r3, r7, r5
 8008866:	7818      	ldrb	r0, [r3, #0]
 8008868:	0023      	movs	r3, r4
 800886a:	f000 fb79 	bl	8008f60 <USER_SPI_write>
 800886e:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8008870:	0018      	movs	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	b004      	add	sp, #16
 8008876:	bdb0      	pop	{r4, r5, r7, pc}

08008878 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	603a      	str	r2, [r7, #0]
 8008880:	1dfb      	adds	r3, r7, #7
 8008882:	1c02      	adds	r2, r0, #0
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	1dbb      	adds	r3, r7, #6
 8008888:	1c0a      	adds	r2, r1, #0
 800888a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	1dbb      	adds	r3, r7, #6
 8008890:	7819      	ldrb	r1, [r3, #0]
 8008892:	1dfb      	adds	r3, r7, #7
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	0018      	movs	r0, r3
 8008898:	f000 fbe2 	bl	8009060 <USER_SPI_ioctl>
 800889c:	0003      	movs	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b002      	add	sp, #8
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80088b0:	f7fc fa42 	bl	8004d38 <HAL_GetTick>
 80088b4:	0002      	movs	r2, r0
 80088b6:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <SPI_Timer_On+0x20>)
 80088b8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80088ba:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <SPI_Timer_On+0x24>)
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	601a      	str	r2, [r3, #0]
}
 80088c0:	46c0      	nop			@ (mov r8, r8)
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b002      	add	sp, #8
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000a0c 	.word	0x20000a0c
 80088cc:	20000a10 	.word	0x20000a10

080088d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80088d4:	f7fc fa30 	bl	8004d38 <HAL_GetTick>
 80088d8:	0002      	movs	r2, r0
 80088da:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <SPI_Timer_Status+0x24>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <SPI_Timer_Status+0x28>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	419b      	sbcs	r3, r3
 80088e8:	425b      	negs	r3, r3
 80088ea:	b2db      	uxtb	r3, r3
}
 80088ec:	0018      	movs	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	46c0      	nop			@ (mov r8, r8)
 80088f4:	20000a0c 	.word	0x20000a0c
 80088f8:	20000a10 	.word	0x20000a10

080088fc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	af02      	add	r7, sp, #8
 8008902:	0002      	movs	r2, r0
 8008904:	1dfb      	adds	r3, r7, #7
 8008906:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008908:	240f      	movs	r4, #15
 800890a:	193a      	adds	r2, r7, r4
 800890c:	1df9      	adds	r1, r7, #7
 800890e:	4806      	ldr	r0, [pc, #24]	@ (8008928 <xchg_spi+0x2c>)
 8008910:	2332      	movs	r3, #50	@ 0x32
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2301      	movs	r3, #1
 8008916:	f7fe feea 	bl	80076ee <HAL_SPI_TransmitReceive>
    return rxDat;
 800891a:	193b      	adds	r3, r7, r4
 800891c:	781b      	ldrb	r3, [r3, #0]
}
 800891e:	0018      	movs	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	b005      	add	sp, #20
 8008924:	bd90      	pop	{r4, r7, pc}
 8008926:	46c0      	nop			@ (mov r8, r8)
 8008928:	200002f4 	.word	0x200002f4

0800892c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	e00a      	b.n	8008952 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	18d4      	adds	r4, r2, r3
 8008942:	20ff      	movs	r0, #255	@ 0xff
 8008944:	f7ff ffda 	bl	80088fc <xchg_spi>
 8008948:	0003      	movs	r3, r0
 800894a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d3f0      	bcc.n	800893c <rcvr_spi_multi+0x10>
	}
}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	46c0      	nop			@ (mov r8, r8)
 800895e:	46bd      	mov	sp, r7
 8008960:	b005      	add	sp, #20
 8008962:	bd90      	pop	{r4, r7, pc}

08008964 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
	//HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buff, btx, HAL_MAX_DELAY);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	b29a      	uxth	r2, r3
 8008972:	2301      	movs	r3, #1
 8008974:	425b      	negs	r3, r3
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4803      	ldr	r0, [pc, #12]	@ (8008988 <xmit_spi_multi+0x24>)
 800897a:	f7fe fd5b 	bl	8007434 <HAL_SPI_Transmit>

}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	46bd      	mov	sp, r7
 8008982:	b002      	add	sp, #8
 8008984:	bd80      	pop	{r7, pc}
 8008986:	46c0      	nop			@ (mov r8, r8)
 8008988:	200002f4 	.word	0x200002f4

0800898c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800898c:	b5b0      	push	{r4, r5, r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008994:	f7fc f9d0 	bl	8004d38 <HAL_GetTick>
 8008998:	0003      	movs	r3, r0
 800899a:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80089a0:	250f      	movs	r5, #15
 80089a2:	197c      	adds	r4, r7, r5
 80089a4:	20ff      	movs	r0, #255	@ 0xff
 80089a6:	f7ff ffa9 	bl	80088fc <xchg_spi>
 80089aa:	0003      	movs	r3, r0
 80089ac:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80089ae:	197b      	adds	r3, r7, r5
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2bff      	cmp	r3, #255	@ 0xff
 80089b4:	d007      	beq.n	80089c6 <wait_ready+0x3a>
 80089b6:	f7fc f9bf 	bl	8004d38 <HAL_GetTick>
 80089ba:	0002      	movs	r2, r0
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d8ec      	bhi.n	80089a0 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80089c6:	230f      	movs	r3, #15
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	3bff      	subs	r3, #255	@ 0xff
 80089ce:	425a      	negs	r2, r3
 80089d0:	4153      	adcs	r3, r2
 80089d2:	b2db      	uxtb	r3, r3
}
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b006      	add	sp, #24
 80089da:	bdb0      	pop	{r4, r5, r7, pc}

080089dc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80089e0:	2380      	movs	r3, #128	@ 0x80
 80089e2:	015b      	lsls	r3, r3, #5
 80089e4:	4805      	ldr	r0, [pc, #20]	@ (80089fc <despiselect+0x20>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	0019      	movs	r1, r3
 80089ea:	f7fc fc2f 	bl	800524c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80089ee:	20ff      	movs	r0, #255	@ 0xff
 80089f0:	f7ff ff84 	bl	80088fc <xchg_spi>

}
 80089f4:	46c0      	nop			@ (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	50000400 	.word	0x50000400

08008a00 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008a04:	2380      	movs	r3, #128	@ 0x80
 8008a06:	015b      	lsls	r3, r3, #5
 8008a08:	480b      	ldr	r0, [pc, #44]	@ (8008a38 <spiselect+0x38>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	0019      	movs	r1, r3
 8008a0e:	f7fc fc1d 	bl	800524c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008a12:	20ff      	movs	r0, #255	@ 0xff
 8008a14:	f7ff ff72 	bl	80088fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008a18:	23fa      	movs	r3, #250	@ 0xfa
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7ff ffb5 	bl	800898c <wait_ready>
 8008a22:	1e03      	subs	r3, r0, #0
 8008a24:	d001      	beq.n	8008a2a <spiselect+0x2a>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e002      	b.n	8008a30 <spiselect+0x30>

	despiselect();
 8008a2a:	f7ff ffd7 	bl	80089dc <despiselect>
	return 0;	/* Timeout */
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	0018      	movs	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	50000400 	.word	0x50000400

08008a3c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008a46:	20c8      	movs	r0, #200	@ 0xc8
 8008a48:	f7ff ff2e 	bl	80088a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008a4c:	250f      	movs	r5, #15
 8008a4e:	197c      	adds	r4, r7, r5
 8008a50:	20ff      	movs	r0, #255	@ 0xff
 8008a52:	f7ff ff53 	bl	80088fc <xchg_spi>
 8008a56:	0003      	movs	r3, r0
 8008a58:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008a5a:	197b      	adds	r3, r7, r5
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2bff      	cmp	r3, #255	@ 0xff
 8008a60:	d103      	bne.n	8008a6a <rcvr_datablock+0x2e>
 8008a62:	f7ff ff35 	bl	80088d0 <SPI_Timer_Status>
 8008a66:	1e03      	subs	r3, r0, #0
 8008a68:	d1f0      	bne.n	8008a4c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008a6a:	230f      	movs	r3, #15
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a72:	d001      	beq.n	8008a78 <rcvr_datablock+0x3c>
 8008a74:	2300      	movs	r3, #0
 8008a76:	e00c      	b.n	8008a92 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	0011      	movs	r1, r2
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f7ff ff54 	bl	800892c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008a84:	20ff      	movs	r0, #255	@ 0xff
 8008a86:	f7ff ff39 	bl	80088fc <xchg_spi>
 8008a8a:	20ff      	movs	r0, #255	@ 0xff
 8008a8c:	f7ff ff36 	bl	80088fc <xchg_spi>

	return 1;						/* Function succeeded */
 8008a90:	2301      	movs	r3, #1
}
 8008a92:	0018      	movs	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	b004      	add	sp, #16
 8008a98:	bdb0      	pop	{r4, r5, r7, pc}

08008a9a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008a9a:	b5b0      	push	{r4, r5, r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	000a      	movs	r2, r1
 8008aa4:	1cfb      	adds	r3, r7, #3
 8008aa6:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008aa8:	23fa      	movs	r3, #250	@ 0xfa
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7ff ff6d 	bl	800898c <wait_ready>
 8008ab2:	1e03      	subs	r3, r0, #0
 8008ab4:	d101      	bne.n	8008aba <xmit_datablock+0x20>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e025      	b.n	8008b06 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8008aba:	1cfb      	adds	r3, r7, #3
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7ff ff1c 	bl	80088fc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008ac4:	1cfb      	adds	r3, r7, #3
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2bfd      	cmp	r3, #253	@ 0xfd
 8008aca:	d01b      	beq.n	8008b04 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008acc:	2380      	movs	r3, #128	@ 0x80
 8008ace:	009a      	lsls	r2, r3, #2
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	0011      	movs	r1, r2
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7ff ff45 	bl	8008964 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008ada:	20ff      	movs	r0, #255	@ 0xff
 8008adc:	f7ff ff0e 	bl	80088fc <xchg_spi>
 8008ae0:	20ff      	movs	r0, #255	@ 0xff
 8008ae2:	f7ff ff0b 	bl	80088fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008ae6:	250f      	movs	r5, #15
 8008ae8:	197c      	adds	r4, r7, r5
 8008aea:	20ff      	movs	r0, #255	@ 0xff
 8008aec:	f7ff ff06 	bl	80088fc <xchg_spi>
 8008af0:	0003      	movs	r3, r0
 8008af2:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008af4:	197b      	adds	r3, r7, r5
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	221f      	movs	r2, #31
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b05      	cmp	r3, #5
 8008afe:	d001      	beq.n	8008b04 <xmit_datablock+0x6a>
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <xmit_datablock+0x6c>
	}
	return 1;
 8008b04:	2301      	movs	r3, #1
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bdb0      	pop	{r4, r5, r7, pc}

08008b0e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008b0e:	b5b0      	push	{r4, r5, r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	0002      	movs	r2, r0
 8008b16:	6039      	str	r1, [r7, #0]
 8008b18:	1dfb      	adds	r3, r7, #7
 8008b1a:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008b1c:	1dfb      	adds	r3, r7, #7
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	b25b      	sxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	da15      	bge.n	8008b52 <send_cmd+0x44>
		cmd &= 0x7F;
 8008b26:	1dfb      	adds	r3, r7, #7
 8008b28:	1dfa      	adds	r2, r7, #7
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	217f      	movs	r1, #127	@ 0x7f
 8008b2e:	400a      	ands	r2, r1
 8008b30:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8008b32:	250e      	movs	r5, #14
 8008b34:	197c      	adds	r4, r7, r5
 8008b36:	2100      	movs	r1, #0
 8008b38:	2037      	movs	r0, #55	@ 0x37
 8008b3a:	f7ff ffe8 	bl	8008b0e <send_cmd>
 8008b3e:	0003      	movs	r3, r0
 8008b40:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8008b42:	002a      	movs	r2, r5
 8008b44:	18bb      	adds	r3, r7, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d902      	bls.n	8008b52 <send_cmd+0x44>
 8008b4c:	18bb      	adds	r3, r7, r2
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	e067      	b.n	8008c22 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008b52:	1dfb      	adds	r3, r7, #7
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b0c      	cmp	r3, #12
 8008b58:	d007      	beq.n	8008b6a <send_cmd+0x5c>
		despiselect();
 8008b5a:	f7ff ff3f 	bl	80089dc <despiselect>
		if (!spiselect()) return 0xFF;
 8008b5e:	f7ff ff4f 	bl	8008a00 <spiselect>
 8008b62:	1e03      	subs	r3, r0, #0
 8008b64:	d101      	bne.n	8008b6a <send_cmd+0x5c>
 8008b66:	23ff      	movs	r3, #255	@ 0xff
 8008b68:	e05b      	b.n	8008c22 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008b6a:	1dfb      	adds	r3, r7, #7
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2240      	movs	r2, #64	@ 0x40
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7ff fec1 	bl	80088fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	0e1b      	lsrs	r3, r3, #24
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff febb 	bl	80088fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7ff feb5 	bl	80088fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff feaf 	bl	80088fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7ff feaa 	bl	80088fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008ba8:	210f      	movs	r1, #15
 8008baa:	187b      	adds	r3, r7, r1
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008bb0:	1dfb      	adds	r3, r7, #7
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d102      	bne.n	8008bbe <send_cmd+0xb0>
 8008bb8:	187b      	adds	r3, r7, r1
 8008bba:	2295      	movs	r2, #149	@ 0x95
 8008bbc:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008bbe:	1dfb      	adds	r3, r7, #7
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d103      	bne.n	8008bce <send_cmd+0xc0>
 8008bc6:	230f      	movs	r3, #15
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	2287      	movs	r2, #135	@ 0x87
 8008bcc:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8008bce:	230f      	movs	r3, #15
 8008bd0:	18fb      	adds	r3, r7, r3
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f7ff fe91 	bl	80088fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008bda:	1dfb      	adds	r3, r7, #7
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b0c      	cmp	r3, #12
 8008be0:	d102      	bne.n	8008be8 <send_cmd+0xda>
 8008be2:	20ff      	movs	r0, #255	@ 0xff
 8008be4:	f7ff fe8a 	bl	80088fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008be8:	230f      	movs	r3, #15
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	220a      	movs	r2, #10
 8008bee:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8008bf0:	250e      	movs	r5, #14
 8008bf2:	197c      	adds	r4, r7, r5
 8008bf4:	20ff      	movs	r0, #255	@ 0xff
 8008bf6:	f7ff fe81 	bl	80088fc <xchg_spi>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8008bfe:	197b      	adds	r3, r7, r5
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da09      	bge.n	8008c1c <send_cmd+0x10e>
 8008c08:	210f      	movs	r1, #15
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	187a      	adds	r2, r7, r1
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	3a01      	subs	r2, #1
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e9      	bne.n	8008bf0 <send_cmd+0xe2>

	return res;							/* Return received response */
 8008c1c:	230e      	movs	r3, #14
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	781b      	ldrb	r3, [r3, #0]
}
 8008c22:	0018      	movs	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b004      	add	sp, #16
 8008c28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c2c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008c2c:	b5b0      	push	{r4, r5, r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	0002      	movs	r2, r0
 8008c34:	1dfb      	adds	r3, r7, #7
 8008c36:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008c38:	1dfb      	adds	r3, r7, #7
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USER_SPI_initialize+0x18>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e100      	b.n	8008e46 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008c44:	4b82      	ldr	r3, [pc, #520]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	4013      	ands	r3, r2
 8008c50:	d003      	beq.n	8008c5a <USER_SPI_initialize+0x2e>
 8008c52:	4b7f      	ldr	r3, [pc, #508]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	e0f5      	b.n	8008e46 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8008c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8008e54 <USER_SPI_initialize+0x228>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2238      	movs	r2, #56	@ 0x38
 8008c62:	4393      	bics	r3, r2
 8008c64:	001a      	movs	r2, r3
 8008c66:	4b7b      	ldr	r3, [pc, #492]	@ (8008e54 <USER_SPI_initialize+0x228>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2130      	movs	r1, #48	@ 0x30
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008c70:	230f      	movs	r3, #15
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	220a      	movs	r2, #10
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e008      	b.n	8008c8c <USER_SPI_initialize+0x60>
 8008c7a:	20ff      	movs	r0, #255	@ 0xff
 8008c7c:	f7ff fe3e 	bl	80088fc <xchg_spi>
 8008c80:	210f      	movs	r1, #15
 8008c82:	187b      	adds	r3, r7, r1
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	187b      	adds	r3, r7, r1
 8008c88:	3a01      	subs	r2, #1
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	240f      	movs	r4, #15
 8008c8e:	193b      	adds	r3, r7, r4
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f1      	bne.n	8008c7a <USER_SPI_initialize+0x4e>

	ty = 0;
 8008c96:	230d      	movs	r3, #13
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	f7ff ff34 	bl	8008b0e <send_cmd>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d000      	beq.n	8008cae <USER_SPI_initialize+0x82>
 8008cac:	e0a6      	b.n	8008dfc <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008cae:	23fa      	movs	r3, #250	@ 0xfa
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff fdf8 	bl	80088a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008cb8:	23d5      	movs	r3, #213	@ 0xd5
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	0019      	movs	r1, r3
 8008cbe:	2008      	movs	r0, #8
 8008cc0:	f7ff ff25 	bl	8008b0e <send_cmd>
 8008cc4:	0003      	movs	r3, r0
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d162      	bne.n	8008d90 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008cca:	193b      	adds	r3, r7, r4
 8008ccc:	2200      	movs	r2, #0
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e00f      	b.n	8008cf2 <USER_SPI_initialize+0xc6>
 8008cd2:	250f      	movs	r5, #15
 8008cd4:	197b      	adds	r3, r7, r5
 8008cd6:	781c      	ldrb	r4, [r3, #0]
 8008cd8:	20ff      	movs	r0, #255	@ 0xff
 8008cda:	f7ff fe0f 	bl	80088fc <xchg_spi>
 8008cde:	0003      	movs	r3, r0
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	551a      	strb	r2, [r3, r4]
 8008ce8:	197b      	adds	r3, r7, r5
 8008cea:	781a      	ldrb	r2, [r3, #0]
 8008cec:	197b      	adds	r3, r7, r5
 8008cee:	3201      	adds	r2, #1
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	230f      	movs	r3, #15
 8008cf4:	18fb      	adds	r3, r7, r3
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d9ea      	bls.n	8008cd2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	18bb      	adds	r3, r7, r2
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d000      	beq.n	8008d08 <USER_SPI_initialize+0xdc>
 8008d06:	e079      	b.n	8008dfc <USER_SPI_initialize+0x1d0>
 8008d08:	18bb      	adds	r3, r7, r2
 8008d0a:	78db      	ldrb	r3, [r3, #3]
 8008d0c:	2baa      	cmp	r3, #170	@ 0xaa
 8008d0e:	d000      	beq.n	8008d12 <USER_SPI_initialize+0xe6>
 8008d10:	e074      	b.n	8008dfc <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008d12:	46c0      	nop			@ (mov r8, r8)
 8008d14:	f7ff fddc 	bl	80088d0 <SPI_Timer_Status>
 8008d18:	1e03      	subs	r3, r0, #0
 8008d1a:	d007      	beq.n	8008d2c <USER_SPI_initialize+0x100>
 8008d1c:	2380      	movs	r3, #128	@ 0x80
 8008d1e:	05db      	lsls	r3, r3, #23
 8008d20:	0019      	movs	r1, r3
 8008d22:	20a9      	movs	r0, #169	@ 0xa9
 8008d24:	f7ff fef3 	bl	8008b0e <send_cmd>
 8008d28:	1e03      	subs	r3, r0, #0
 8008d2a:	d1f3      	bne.n	8008d14 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008d2c:	f7ff fdd0 	bl	80088d0 <SPI_Timer_Status>
 8008d30:	1e03      	subs	r3, r0, #0
 8008d32:	d063      	beq.n	8008dfc <USER_SPI_initialize+0x1d0>
 8008d34:	2100      	movs	r1, #0
 8008d36:	203a      	movs	r0, #58	@ 0x3a
 8008d38:	f7ff fee9 	bl	8008b0e <send_cmd>
 8008d3c:	1e03      	subs	r3, r0, #0
 8008d3e:	d15d      	bne.n	8008dfc <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008d40:	230f      	movs	r3, #15
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e00f      	b.n	8008d6a <USER_SPI_initialize+0x13e>
 8008d4a:	250f      	movs	r5, #15
 8008d4c:	197b      	adds	r3, r7, r5
 8008d4e:	781c      	ldrb	r4, [r3, #0]
 8008d50:	20ff      	movs	r0, #255	@ 0xff
 8008d52:	f7ff fdd3 	bl	80088fc <xchg_spi>
 8008d56:	0003      	movs	r3, r0
 8008d58:	001a      	movs	r2, r3
 8008d5a:	2308      	movs	r3, #8
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	551a      	strb	r2, [r3, r4]
 8008d60:	197b      	adds	r3, r7, r5
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	197b      	adds	r3, r7, r5
 8008d66:	3201      	adds	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	230f      	movs	r3, #15
 8008d6c:	18fb      	adds	r3, r7, r3
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d9ea      	bls.n	8008d4a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008d74:	2308      	movs	r3, #8
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	2340      	movs	r3, #64	@ 0x40
 8008d7e:	4013      	ands	r3, r2
 8008d80:	d001      	beq.n	8008d86 <USER_SPI_initialize+0x15a>
 8008d82:	220c      	movs	r2, #12
 8008d84:	e000      	b.n	8008d88 <USER_SPI_initialize+0x15c>
 8008d86:	2204      	movs	r2, #4
 8008d88:	230d      	movs	r3, #13
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e035      	b.n	8008dfc <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008d90:	2100      	movs	r1, #0
 8008d92:	20a9      	movs	r0, #169	@ 0xa9
 8008d94:	f7ff febb 	bl	8008b0e <send_cmd>
 8008d98:	0003      	movs	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d808      	bhi.n	8008db0 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008d9e:	230d      	movs	r3, #13
 8008da0:	18fb      	adds	r3, r7, r3
 8008da2:	2202      	movs	r2, #2
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	230e      	movs	r3, #14
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	22a9      	movs	r2, #169	@ 0xa9
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	e007      	b.n	8008dc0 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008db0:	230d      	movs	r3, #13
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	2201      	movs	r2, #1
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	230e      	movs	r3, #14
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008dc0:	46c0      	nop			@ (mov r8, r8)
 8008dc2:	f7ff fd85 	bl	80088d0 <SPI_Timer_Status>
 8008dc6:	1e03      	subs	r3, r0, #0
 8008dc8:	d008      	beq.n	8008ddc <USER_SPI_initialize+0x1b0>
 8008dca:	230e      	movs	r3, #14
 8008dcc:	18fb      	adds	r3, r7, r3
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7ff fe9b 	bl	8008b0e <send_cmd>
 8008dd8:	1e03      	subs	r3, r0, #0
 8008dda:	d1f2      	bne.n	8008dc2 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008ddc:	f7ff fd78 	bl	80088d0 <SPI_Timer_Status>
 8008de0:	1e03      	subs	r3, r0, #0
 8008de2:	d007      	beq.n	8008df4 <USER_SPI_initialize+0x1c8>
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	0019      	movs	r1, r3
 8008dea:	2010      	movs	r0, #16
 8008dec:	f7ff fe8f 	bl	8008b0e <send_cmd>
 8008df0:	1e03      	subs	r3, r0, #0
 8008df2:	d003      	beq.n	8008dfc <USER_SPI_initialize+0x1d0>
				ty = 0;
 8008df4:	230d      	movs	r3, #13
 8008df6:	18fb      	adds	r3, r7, r3
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8008dfc:	4b16      	ldr	r3, [pc, #88]	@ (8008e58 <USER_SPI_initialize+0x22c>)
 8008dfe:	240d      	movs	r4, #13
 8008e00:	193a      	adds	r2, r7, r4
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	701a      	strb	r2, [r3, #0]
	despiselect();
 8008e06:	f7ff fde9 	bl	80089dc <despiselect>

	if (ty) {			/* OK */
 8008e0a:	193b      	adds	r3, r7, r4
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d013      	beq.n	8008e3a <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <USER_SPI_initialize+0x228>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2238      	movs	r2, #56	@ 0x38
 8008e1a:	4393      	bics	r3, r2
 8008e1c:	001a      	movs	r2, r3
 8008e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e54 <USER_SPI_initialize+0x228>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2110      	movs	r1, #16
 8008e24:	430a      	orrs	r2, r1
 8008e26:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008e28:	4b09      	ldr	r3, [pc, #36]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4393      	bics	r3, r2
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	e002      	b.n	8008e40 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008e3a:	4b05      	ldr	r3, [pc, #20]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008e40:	4b03      	ldr	r3, [pc, #12]	@ (8008e50 <USER_SPI_initialize+0x224>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	b2db      	uxtb	r3, r3
}
 8008e46:	0018      	movs	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b004      	add	sp, #16
 8008e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e4e:	46c0      	nop			@ (mov r8, r8)
 8008e50:	20000030 	.word	0x20000030
 8008e54:	200002f4 	.word	0x200002f4
 8008e58:	20000a08 	.word	0x20000a08

08008e5c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	0002      	movs	r2, r0
 8008e64:	1dfb      	adds	r3, r7, #7
 8008e66:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008e68:	1dfb      	adds	r3, r7, #7
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USER_SPI_status+0x18>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e002      	b.n	8008e7a <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8008e74:	4b03      	ldr	r3, [pc, #12]	@ (8008e84 <USER_SPI_status+0x28>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b2db      	uxtb	r3, r3
}
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	b002      	add	sp, #8
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	46c0      	nop			@ (mov r8, r8)
 8008e84:	20000030 	.word	0x20000030

08008e88 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	210f      	movs	r1, #15
 8008e96:	187b      	adds	r3, r7, r1
 8008e98:	1c02      	adds	r2, r0, #0
 8008e9a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <USER_SPI_read+0x22>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <USER_SPI_read+0x26>
 8008eaa:	2304      	movs	r3, #4
 8008eac:	e04f      	b.n	8008f4e <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008eae:	4b2a      	ldr	r3, [pc, #168]	@ (8008f58 <USER_SPI_read+0xd0>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4013      	ands	r3, r2
 8008eba:	d001      	beq.n	8008ec0 <USER_SPI_read+0x38>
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e046      	b.n	8008f4e <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008ec0:	4b26      	ldr	r3, [pc, #152]	@ (8008f5c <USER_SPI_read+0xd4>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	4013      	ands	r3, r2
 8008eca:	d102      	bne.n	8008ed2 <USER_SPI_read+0x4a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	025b      	lsls	r3, r3, #9
 8008ed0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d112      	bne.n	8008efe <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	0019      	movs	r1, r3
 8008edc:	2011      	movs	r0, #17
 8008ede:	f7ff fe16 	bl	8008b0e <send_cmd>
 8008ee2:	1e03      	subs	r3, r0, #0
 8008ee4:	d12d      	bne.n	8008f42 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8008ee6:	2380      	movs	r3, #128	@ 0x80
 8008ee8:	009a      	lsls	r2, r3, #2
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	0011      	movs	r1, r2
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7ff fda4 	bl	8008a3c <rcvr_datablock>
 8008ef4:	1e03      	subs	r3, r0, #0
 8008ef6:	d024      	beq.n	8008f42 <USER_SPI_read+0xba>
			count = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	e021      	b.n	8008f42 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0019      	movs	r1, r3
 8008f02:	2012      	movs	r0, #18
 8008f04:	f7ff fe03 	bl	8008b0e <send_cmd>
 8008f08:	1e03      	subs	r3, r0, #0
 8008f0a:	d11a      	bne.n	8008f42 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008f0c:	2380      	movs	r3, #128	@ 0x80
 8008f0e:	009a      	lsls	r2, r3, #2
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff fd91 	bl	8008a3c <rcvr_datablock>
 8008f1a:	1e03      	subs	r3, r0, #0
 8008f1c:	d00c      	beq.n	8008f38 <USER_SPI_read+0xb0>
				buff += 512;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2280      	movs	r2, #128	@ 0x80
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	4694      	mov	ip, r2
 8008f26:	4463      	add	r3, ip
 8008f28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1ea      	bne.n	8008f0c <USER_SPI_read+0x84>
 8008f36:	e000      	b.n	8008f3a <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8008f38:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	200c      	movs	r0, #12
 8008f3e:	f7ff fde6 	bl	8008b0e <send_cmd>
		}
	}
	despiselect();
 8008f42:	f7ff fd4b 	bl	80089dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	1e5a      	subs	r2, r3, #1
 8008f4a:	4193      	sbcs	r3, r2
 8008f4c:	b2db      	uxtb	r3, r3
}
 8008f4e:	0018      	movs	r0, r3
 8008f50:	46bd      	mov	sp, r7
 8008f52:	b004      	add	sp, #16
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	46c0      	nop			@ (mov r8, r8)
 8008f58:	20000030 	.word	0x20000030
 8008f5c:	20000a08 	.word	0x20000a08

08008f60 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	210f      	movs	r1, #15
 8008f6e:	187b      	adds	r3, r7, r1
 8008f70:	1c02      	adds	r2, r0, #0
 8008f72:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008f74:	187b      	adds	r3, r7, r1
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <USER_SPI_write+0x22>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <USER_SPI_write+0x26>
 8008f82:	2304      	movs	r3, #4
 8008f84:	e063      	b.n	800904e <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008f86:	4b34      	ldr	r3, [pc, #208]	@ (8009058 <USER_SPI_write+0xf8>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	001a      	movs	r2, r3
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4013      	ands	r3, r2
 8008f92:	d001      	beq.n	8008f98 <USER_SPI_write+0x38>
 8008f94:	2303      	movs	r3, #3
 8008f96:	e05a      	b.n	800904e <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008f98:	4b2f      	ldr	r3, [pc, #188]	@ (8009058 <USER_SPI_write+0xf8>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	001a      	movs	r2, r3
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	d001      	beq.n	8008faa <USER_SPI_write+0x4a>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e051      	b.n	800904e <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008faa:	4b2c      	ldr	r3, [pc, #176]	@ (800905c <USER_SPI_write+0xfc>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	001a      	movs	r2, r3
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d102      	bne.n	8008fbc <USER_SPI_write+0x5c>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	025b      	lsls	r3, r3, #9
 8008fba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d110      	bne.n	8008fe4 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	2018      	movs	r0, #24
 8008fc8:	f7ff fda1 	bl	8008b0e <send_cmd>
 8008fcc:	1e03      	subs	r3, r0, #0
 8008fce:	d138      	bne.n	8009042 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	21fe      	movs	r1, #254	@ 0xfe
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7ff fd60 	bl	8008a9a <xmit_datablock>
 8008fda:	1e03      	subs	r3, r0, #0
 8008fdc:	d031      	beq.n	8009042 <USER_SPI_write+0xe2>
			count = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	e02e      	b.n	8009042 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800905c <USER_SPI_write+0xfc>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	001a      	movs	r2, r3
 8008fea:	2306      	movs	r3, #6
 8008fec:	4013      	ands	r3, r2
 8008fee:	d004      	beq.n	8008ffa <USER_SPI_write+0x9a>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	0019      	movs	r1, r3
 8008ff4:	2097      	movs	r0, #151	@ 0x97
 8008ff6:	f7ff fd8a 	bl	8008b0e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	0019      	movs	r1, r3
 8008ffe:	2019      	movs	r0, #25
 8009000:	f7ff fd85 	bl	8008b0e <send_cmd>
 8009004:	1e03      	subs	r3, r0, #0
 8009006:	d11c      	bne.n	8009042 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	21fc      	movs	r1, #252	@ 0xfc
 800900c:	0018      	movs	r0, r3
 800900e:	f7ff fd44 	bl	8008a9a <xmit_datablock>
 8009012:	1e03      	subs	r3, r0, #0
 8009014:	d00c      	beq.n	8009030 <USER_SPI_write+0xd0>
				buff += 512;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2280      	movs	r2, #128	@ 0x80
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	4694      	mov	ip, r2
 800901e:	4463      	add	r3, ip
 8009020:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	3b01      	subs	r3, #1
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1ec      	bne.n	8009008 <USER_SPI_write+0xa8>
 800902e:	e000      	b.n	8009032 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009030:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009032:	21fd      	movs	r1, #253	@ 0xfd
 8009034:	2000      	movs	r0, #0
 8009036:	f7ff fd30 	bl	8008a9a <xmit_datablock>
 800903a:	1e03      	subs	r3, r0, #0
 800903c:	d101      	bne.n	8009042 <USER_SPI_write+0xe2>
 800903e:	2301      	movs	r3, #1
 8009040:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009042:	f7ff fccb 	bl	80089dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	1e5a      	subs	r2, r3, #1
 800904a:	4193      	sbcs	r3, r2
 800904c:	b2db      	uxtb	r3, r3
}
 800904e:	0018      	movs	r0, r3
 8009050:	46bd      	mov	sp, r7
 8009052:	b004      	add	sp, #16
 8009054:	bd80      	pop	{r7, pc}
 8009056:	46c0      	nop			@ (mov r8, r8)
 8009058:	20000030 	.word	0x20000030
 800905c:	20000a08 	.word	0x20000a08

08009060 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009060:	b590      	push	{r4, r7, lr}
 8009062:	b08d      	sub	sp, #52	@ 0x34
 8009064:	af00      	add	r7, sp, #0
 8009066:	603a      	str	r2, [r7, #0]
 8009068:	1dfb      	adds	r3, r7, #7
 800906a:	1c02      	adds	r2, r0, #0
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	1dbb      	adds	r3, r7, #6
 8009070:	1c0a      	adds	r2, r1, #0
 8009072:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009074:	1dfb      	adds	r3, r7, #7
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USER_SPI_ioctl+0x20>
 800907c:	2304      	movs	r3, #4
 800907e:	e178      	b.n	8009372 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009080:	4bbe      	ldr	r3, [pc, #760]	@ (800937c <USER_SPI_ioctl+0x31c>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	001a      	movs	r2, r3
 8009088:	2301      	movs	r3, #1
 800908a:	4013      	ands	r3, r2
 800908c:	d001      	beq.n	8009092 <USER_SPI_ioctl+0x32>
 800908e:	2303      	movs	r3, #3
 8009090:	e16f      	b.n	8009372 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8009092:	232f      	movs	r3, #47	@ 0x2f
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800909a:	1dbb      	adds	r3, r7, #6
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d100      	bne.n	80090a4 <USER_SPI_ioctl+0x44>
 80090a2:	e100      	b.n	80092a6 <USER_SPI_ioctl+0x246>
 80090a4:	dd00      	ble.n	80090a8 <USER_SPI_ioctl+0x48>
 80090a6:	e14d      	b.n	8009344 <USER_SPI_ioctl+0x2e4>
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d100      	bne.n	80090ae <USER_SPI_ioctl+0x4e>
 80090ac:	e074      	b.n	8009198 <USER_SPI_ioctl+0x138>
 80090ae:	dd00      	ble.n	80090b2 <USER_SPI_ioctl+0x52>
 80090b0:	e148      	b.n	8009344 <USER_SPI_ioctl+0x2e4>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <USER_SPI_ioctl+0x5c>
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d00a      	beq.n	80090d0 <USER_SPI_ioctl+0x70>
 80090ba:	e143      	b.n	8009344 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80090bc:	f7ff fca0 	bl	8008a00 <spiselect>
 80090c0:	1e03      	subs	r3, r0, #0
 80090c2:	d100      	bne.n	80090c6 <USER_SPI_ioctl+0x66>
 80090c4:	e143      	b.n	800934e <USER_SPI_ioctl+0x2ee>
 80090c6:	232f      	movs	r3, #47	@ 0x2f
 80090c8:	18fb      	adds	r3, r7, r3
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
		break;
 80090ce:	e13e      	b.n	800934e <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80090d0:	2100      	movs	r1, #0
 80090d2:	2009      	movs	r0, #9
 80090d4:	f7ff fd1b 	bl	8008b0e <send_cmd>
 80090d8:	1e03      	subs	r3, r0, #0
 80090da:	d000      	beq.n	80090de <USER_SPI_ioctl+0x7e>
 80090dc:	e139      	b.n	8009352 <USER_SPI_ioctl+0x2f2>
 80090de:	240c      	movs	r4, #12
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	2110      	movs	r1, #16
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff fca9 	bl	8008a3c <rcvr_datablock>
 80090ea:	1e03      	subs	r3, r0, #0
 80090ec:	d100      	bne.n	80090f0 <USER_SPI_ioctl+0x90>
 80090ee:	e130      	b.n	8009352 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80090f0:	0020      	movs	r0, r4
 80090f2:	183b      	adds	r3, r7, r0
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	099b      	lsrs	r3, r3, #6
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d115      	bne.n	800912a <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80090fe:	183b      	adds	r3, r7, r0
 8009100:	7a5b      	ldrb	r3, [r3, #9]
 8009102:	001a      	movs	r2, r3
 8009104:	183b      	adds	r3, r7, r0
 8009106:	7a1b      	ldrb	r3, [r3, #8]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	18d3      	adds	r3, r2, r3
 800910c:	0019      	movs	r1, r3
 800910e:	183b      	adds	r3, r7, r0
 8009110:	79db      	ldrb	r3, [r3, #7]
 8009112:	041a      	lsls	r2, r3, #16
 8009114:	23fc      	movs	r3, #252	@ 0xfc
 8009116:	039b      	lsls	r3, r3, #14
 8009118:	4013      	ands	r3, r2
 800911a:	18cb      	adds	r3, r1, r3
 800911c:	3301      	adds	r3, #1
 800911e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	029a      	lsls	r2, r3, #10
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	e031      	b.n	800918e <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800912a:	200c      	movs	r0, #12
 800912c:	183b      	adds	r3, r7, r0
 800912e:	795b      	ldrb	r3, [r3, #5]
 8009130:	220f      	movs	r2, #15
 8009132:	4013      	ands	r3, r2
 8009134:	b2da      	uxtb	r2, r3
 8009136:	183b      	adds	r3, r7, r0
 8009138:	7a9b      	ldrb	r3, [r3, #10]
 800913a:	09db      	lsrs	r3, r3, #7
 800913c:	b2db      	uxtb	r3, r3
 800913e:	18d3      	adds	r3, r2, r3
 8009140:	b2da      	uxtb	r2, r3
 8009142:	183b      	adds	r3, r7, r0
 8009144:	7a5b      	ldrb	r3, [r3, #9]
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2106      	movs	r1, #6
 800914c:	400b      	ands	r3, r1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	18d3      	adds	r3, r2, r3
 8009152:	b2da      	uxtb	r2, r3
 8009154:	242e      	movs	r4, #46	@ 0x2e
 8009156:	193b      	adds	r3, r7, r4
 8009158:	3202      	adds	r2, #2
 800915a:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800915c:	183b      	adds	r3, r7, r0
 800915e:	7a1b      	ldrb	r3, [r3, #8]
 8009160:	099b      	lsrs	r3, r3, #6
 8009162:	b2db      	uxtb	r3, r3
 8009164:	001a      	movs	r2, r3
 8009166:	183b      	adds	r3, r7, r0
 8009168:	79db      	ldrb	r3, [r3, #7]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	18d2      	adds	r2, r2, r3
 800916e:	183b      	adds	r3, r7, r0
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	0299      	lsls	r1, r3, #10
 8009174:	23c0      	movs	r3, #192	@ 0xc0
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	400b      	ands	r3, r1
 800917a:	18d3      	adds	r3, r2, r3
 800917c:	3301      	adds	r3, #1
 800917e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009180:	193b      	adds	r3, r7, r4
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	3b09      	subs	r3, #9
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	409a      	lsls	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800918e:	232f      	movs	r3, #47	@ 0x2f
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	2200      	movs	r2, #0
 8009194:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009196:	e0dc      	b.n	8009352 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009198:	4b79      	ldr	r3, [pc, #484]	@ (8009380 <USER_SPI_ioctl+0x320>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	001a      	movs	r2, r3
 800919e:	2304      	movs	r3, #4
 80091a0:	4013      	ands	r3, r2
 80091a2:	d035      	beq.n	8009210 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80091a4:	2100      	movs	r1, #0
 80091a6:	208d      	movs	r0, #141	@ 0x8d
 80091a8:	f7ff fcb1 	bl	8008b0e <send_cmd>
 80091ac:	1e03      	subs	r3, r0, #0
 80091ae:	d000      	beq.n	80091b2 <USER_SPI_ioctl+0x152>
 80091b0:	e0d1      	b.n	8009356 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80091b2:	20ff      	movs	r0, #255	@ 0xff
 80091b4:	f7ff fba2 	bl	80088fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80091b8:	230c      	movs	r3, #12
 80091ba:	18fb      	adds	r3, r7, r3
 80091bc:	2110      	movs	r1, #16
 80091be:	0018      	movs	r0, r3
 80091c0:	f7ff fc3c 	bl	8008a3c <rcvr_datablock>
 80091c4:	1e03      	subs	r3, r0, #0
 80091c6:	d100      	bne.n	80091ca <USER_SPI_ioctl+0x16a>
 80091c8:	e0c5      	b.n	8009356 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80091ca:	232e      	movs	r3, #46	@ 0x2e
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	2230      	movs	r2, #48	@ 0x30
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	e008      	b.n	80091e6 <USER_SPI_ioctl+0x186>
 80091d4:	20ff      	movs	r0, #255	@ 0xff
 80091d6:	f7ff fb91 	bl	80088fc <xchg_spi>
 80091da:	212e      	movs	r1, #46	@ 0x2e
 80091dc:	187b      	adds	r3, r7, r1
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	3a01      	subs	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	232e      	movs	r3, #46	@ 0x2e
 80091e8:	18fb      	adds	r3, r7, r3
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f1      	bne.n	80091d4 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80091f0:	230c      	movs	r3, #12
 80091f2:	18fb      	adds	r3, r7, r3
 80091f4:	7a9b      	ldrb	r3, [r3, #10]
 80091f6:	091b      	lsrs	r3, r3, #4
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	001a      	movs	r2, r3
 80091fc:	2310      	movs	r3, #16
 80091fe:	4093      	lsls	r3, r2
 8009200:	001a      	movs	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009206:	232f      	movs	r3, #47	@ 0x2f
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800920e:	e0a2      	b.n	8009356 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009210:	2100      	movs	r1, #0
 8009212:	2009      	movs	r0, #9
 8009214:	f7ff fc7b 	bl	8008b0e <send_cmd>
 8009218:	1e03      	subs	r3, r0, #0
 800921a:	d000      	beq.n	800921e <USER_SPI_ioctl+0x1be>
 800921c:	e09b      	b.n	8009356 <USER_SPI_ioctl+0x2f6>
 800921e:	240c      	movs	r4, #12
 8009220:	193b      	adds	r3, r7, r4
 8009222:	2110      	movs	r1, #16
 8009224:	0018      	movs	r0, r3
 8009226:	f7ff fc09 	bl	8008a3c <rcvr_datablock>
 800922a:	1e03      	subs	r3, r0, #0
 800922c:	d100      	bne.n	8009230 <USER_SPI_ioctl+0x1d0>
 800922e:	e092      	b.n	8009356 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009230:	4b53      	ldr	r3, [pc, #332]	@ (8009380 <USER_SPI_ioctl+0x320>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	001a      	movs	r2, r3
 8009236:	2302      	movs	r3, #2
 8009238:	4013      	ands	r3, r2
 800923a:	d016      	beq.n	800926a <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800923c:	0021      	movs	r1, r4
 800923e:	187b      	adds	r3, r7, r1
 8009240:	7a9b      	ldrb	r3, [r3, #10]
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	227e      	movs	r2, #126	@ 0x7e
 8009246:	4013      	ands	r3, r2
 8009248:	187a      	adds	r2, r7, r1
 800924a:	7ad2      	ldrb	r2, [r2, #11]
 800924c:	09d2      	lsrs	r2, r2, #7
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	189b      	adds	r3, r3, r2
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	187b      	adds	r3, r7, r1
 8009256:	7b5b      	ldrb	r3, [r3, #13]
 8009258:	099b      	lsrs	r3, r3, #6
 800925a:	b2db      	uxtb	r3, r3
 800925c:	3b01      	subs	r3, #1
 800925e:	409a      	lsls	r2, r3
 8009260:	0013      	movs	r3, r2
 8009262:	001a      	movs	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e018      	b.n	800929c <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800926a:	210c      	movs	r1, #12
 800926c:	187b      	adds	r3, r7, r1
 800926e:	7a9b      	ldrb	r3, [r3, #10]
 8009270:	109b      	asrs	r3, r3, #2
 8009272:	b29b      	uxth	r3, r3
 8009274:	001a      	movs	r2, r3
 8009276:	231f      	movs	r3, #31
 8009278:	4013      	ands	r3, r2
 800927a:	3301      	adds	r3, #1
 800927c:	0008      	movs	r0, r1
 800927e:	187a      	adds	r2, r7, r1
 8009280:	7ad2      	ldrb	r2, [r2, #11]
 8009282:	00d2      	lsls	r2, r2, #3
 8009284:	2118      	movs	r1, #24
 8009286:	400a      	ands	r2, r1
 8009288:	1839      	adds	r1, r7, r0
 800928a:	7ac9      	ldrb	r1, [r1, #11]
 800928c:	0949      	lsrs	r1, r1, #5
 800928e:	b2c9      	uxtb	r1, r1
 8009290:	1852      	adds	r2, r2, r1
 8009292:	3201      	adds	r2, #1
 8009294:	4353      	muls	r3, r2
 8009296:	001a      	movs	r2, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800929c:	232f      	movs	r3, #47	@ 0x2f
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]
		break;
 80092a4:	e057      	b.n	8009356 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80092a6:	4b36      	ldr	r3, [pc, #216]	@ (8009380 <USER_SPI_ioctl+0x320>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	001a      	movs	r2, r3
 80092ac:	2306      	movs	r3, #6
 80092ae:	4013      	ands	r3, r2
 80092b0:	d053      	beq.n	800935a <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80092b2:	240c      	movs	r4, #12
 80092b4:	193a      	adds	r2, r7, r4
 80092b6:	1dfb      	adds	r3, r7, #7
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	210b      	movs	r1, #11
 80092bc:	0018      	movs	r0, r3
 80092be:	f7ff fecf 	bl	8009060 <USER_SPI_ioctl>
 80092c2:	1e03      	subs	r3, r0, #0
 80092c4:	d14b      	bne.n	800935e <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80092c6:	193b      	adds	r3, r7, r4
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	099b      	lsrs	r3, r3, #6
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <USER_SPI_ioctl+0x27e>
 80092d2:	193b      	adds	r3, r7, r4
 80092d4:	7a9b      	ldrb	r3, [r3, #10]
 80092d6:	001a      	movs	r2, r3
 80092d8:	2340      	movs	r3, #64	@ 0x40
 80092da:	4013      	ands	r3, r2
 80092dc:	d041      	beq.n	8009362 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80092ee:	4b24      	ldr	r3, [pc, #144]	@ (8009380 <USER_SPI_ioctl+0x320>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	001a      	movs	r2, r3
 80092f4:	2308      	movs	r3, #8
 80092f6:	4013      	ands	r3, r2
 80092f8:	d105      	bne.n	8009306 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	025b      	lsls	r3, r3, #9
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	025b      	lsls	r3, r3, #9
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	0019      	movs	r1, r3
 800930a:	2020      	movs	r0, #32
 800930c:	f7ff fbff 	bl	8008b0e <send_cmd>
 8009310:	1e03      	subs	r3, r0, #0
 8009312:	d128      	bne.n	8009366 <USER_SPI_ioctl+0x306>
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	0019      	movs	r1, r3
 8009318:	2021      	movs	r0, #33	@ 0x21
 800931a:	f7ff fbf8 	bl	8008b0e <send_cmd>
 800931e:	1e03      	subs	r3, r0, #0
 8009320:	d121      	bne.n	8009366 <USER_SPI_ioctl+0x306>
 8009322:	2100      	movs	r1, #0
 8009324:	2026      	movs	r0, #38	@ 0x26
 8009326:	f7ff fbf2 	bl	8008b0e <send_cmd>
 800932a:	1e03      	subs	r3, r0, #0
 800932c:	d11b      	bne.n	8009366 <USER_SPI_ioctl+0x306>
 800932e:	4b15      	ldr	r3, [pc, #84]	@ (8009384 <USER_SPI_ioctl+0x324>)
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fb2b 	bl	800898c <wait_ready>
 8009336:	1e03      	subs	r3, r0, #0
 8009338:	d015      	beq.n	8009366 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800933a:	232f      	movs	r3, #47	@ 0x2f
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009342:	e010      	b.n	8009366 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8009344:	232f      	movs	r3, #47	@ 0x2f
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	2204      	movs	r2, #4
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	e00c      	b.n	8009368 <USER_SPI_ioctl+0x308>
		break;
 800934e:	46c0      	nop			@ (mov r8, r8)
 8009350:	e00a      	b.n	8009368 <USER_SPI_ioctl+0x308>
		break;
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	e008      	b.n	8009368 <USER_SPI_ioctl+0x308>
		break;
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	e006      	b.n	8009368 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800935a:	46c0      	nop			@ (mov r8, r8)
 800935c:	e004      	b.n	8009368 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	e002      	b.n	8009368 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009362:	46c0      	nop			@ (mov r8, r8)
 8009364:	e000      	b.n	8009368 <USER_SPI_ioctl+0x308>
		break;
 8009366:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8009368:	f7ff fb38 	bl	80089dc <despiselect>

	return res;
 800936c:	232f      	movs	r3, #47	@ 0x2f
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	781b      	ldrb	r3, [r3, #0]
}
 8009372:	0018      	movs	r0, r3
 8009374:	46bd      	mov	sp, r7
 8009376:	b00d      	add	sp, #52	@ 0x34
 8009378:	bd90      	pop	{r4, r7, pc}
 800937a:	46c0      	nop			@ (mov r8, r8)
 800937c:	20000030 	.word	0x20000030
 8009380:	20000a08 	.word	0x20000a08
 8009384:	00007530 	.word	0x00007530

08009388 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009388:	b5b0      	push	{r4, r5, r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	0002      	movs	r2, r0
 8009390:	1dfb      	adds	r3, r7, #7
 8009392:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009394:	1dfb      	adds	r3, r7, #7
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4a0b      	ldr	r2, [pc, #44]	@ (80093c8 <disk_status+0x40>)
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	18d3      	adds	r3, r2, r3
 800939e:	3304      	adds	r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	1dfa      	adds	r2, r7, #7
 80093a6:	7812      	ldrb	r2, [r2, #0]
 80093a8:	4907      	ldr	r1, [pc, #28]	@ (80093c8 <disk_status+0x40>)
 80093aa:	188a      	adds	r2, r1, r2
 80093ac:	7a12      	ldrb	r2, [r2, #8]
 80093ae:	250f      	movs	r5, #15
 80093b0:	197c      	adds	r4, r7, r5
 80093b2:	0010      	movs	r0, r2
 80093b4:	4798      	blx	r3
 80093b6:	0003      	movs	r3, r0
 80093b8:	7023      	strb	r3, [r4, #0]
  return stat;
 80093ba:	197b      	adds	r3, r7, r5
 80093bc:	781b      	ldrb	r3, [r3, #0]
}
 80093be:	0018      	movs	r0, r3
 80093c0:	46bd      	mov	sp, r7
 80093c2:	b004      	add	sp, #16
 80093c4:	bdb0      	pop	{r4, r5, r7, pc}
 80093c6:	46c0      	nop			@ (mov r8, r8)
 80093c8:	20000a3c 	.word	0x20000a3c

080093cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	0002      	movs	r2, r0
 80093d4:	1dfb      	adds	r3, r7, #7
 80093d6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80093d8:	200f      	movs	r0, #15
 80093da:	183b      	adds	r3, r7, r0
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80093e0:	1dfb      	adds	r3, r7, #7
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4a10      	ldr	r2, [pc, #64]	@ (8009428 <disk_initialize+0x5c>)
 80093e6:	5cd3      	ldrb	r3, [r2, r3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d116      	bne.n	800941a <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80093ec:	1dfb      	adds	r3, r7, #7
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009428 <disk_initialize+0x5c>)
 80093f2:	2101      	movs	r1, #1
 80093f4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80093f6:	1dfb      	adds	r3, r7, #7
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009428 <disk_initialize+0x5c>)
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	18d3      	adds	r3, r2, r3
 8009400:	3304      	adds	r3, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	1dfa      	adds	r2, r7, #7
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	4907      	ldr	r1, [pc, #28]	@ (8009428 <disk_initialize+0x5c>)
 800940c:	188a      	adds	r2, r1, r2
 800940e:	7a12      	ldrb	r2, [r2, #8]
 8009410:	183c      	adds	r4, r7, r0
 8009412:	0010      	movs	r0, r2
 8009414:	4798      	blx	r3
 8009416:	0003      	movs	r3, r0
 8009418:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800941a:	230f      	movs	r3, #15
 800941c:	18fb      	adds	r3, r7, r3
 800941e:	781b      	ldrb	r3, [r3, #0]
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b005      	add	sp, #20
 8009426:	bd90      	pop	{r4, r7, pc}
 8009428:	20000a3c 	.word	0x20000a3c

0800942c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	210f      	movs	r1, #15
 800943a:	187b      	adds	r3, r7, r1
 800943c:	1c02      	adds	r2, r0, #0
 800943e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009440:	187b      	adds	r3, r7, r1
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4a0c      	ldr	r2, [pc, #48]	@ (8009478 <disk_read+0x4c>)
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	18d3      	adds	r3, r2, r3
 800944a:	3304      	adds	r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689d      	ldr	r5, [r3, #8]
 8009450:	187b      	adds	r3, r7, r1
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4a08      	ldr	r2, [pc, #32]	@ (8009478 <disk_read+0x4c>)
 8009456:	18d3      	adds	r3, r2, r3
 8009458:	7a18      	ldrb	r0, [r3, #8]
 800945a:	2617      	movs	r6, #23
 800945c:	19bc      	adds	r4, r7, r6
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	47a8      	blx	r5
 8009466:	0003      	movs	r3, r0
 8009468:	7023      	strb	r3, [r4, #0]
  return res;
 800946a:	19bb      	adds	r3, r7, r6
 800946c:	781b      	ldrb	r3, [r3, #0]
}
 800946e:	0018      	movs	r0, r3
 8009470:	46bd      	mov	sp, r7
 8009472:	b007      	add	sp, #28
 8009474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009476:	46c0      	nop			@ (mov r8, r8)
 8009478:	20000a3c 	.word	0x20000a3c

0800947c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	210f      	movs	r1, #15
 800948a:	187b      	adds	r3, r7, r1
 800948c:	1c02      	adds	r2, r0, #0
 800948e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009490:	187b      	adds	r3, r7, r1
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	4a0c      	ldr	r2, [pc, #48]	@ (80094c8 <disk_write+0x4c>)
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	18d3      	adds	r3, r2, r3
 800949a:	3304      	adds	r3, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68dd      	ldr	r5, [r3, #12]
 80094a0:	187b      	adds	r3, r7, r1
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4a08      	ldr	r2, [pc, #32]	@ (80094c8 <disk_write+0x4c>)
 80094a6:	18d3      	adds	r3, r2, r3
 80094a8:	7a18      	ldrb	r0, [r3, #8]
 80094aa:	2617      	movs	r6, #23
 80094ac:	19bc      	adds	r4, r7, r6
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	47a8      	blx	r5
 80094b6:	0003      	movs	r3, r0
 80094b8:	7023      	strb	r3, [r4, #0]
  return res;
 80094ba:	19bb      	adds	r3, r7, r6
 80094bc:	781b      	ldrb	r3, [r3, #0]
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b007      	add	sp, #28
 80094c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c6:	46c0      	nop			@ (mov r8, r8)
 80094c8:	20000a3c 	.word	0x20000a3c

080094cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80094cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	603a      	str	r2, [r7, #0]
 80094d4:	1dfb      	adds	r3, r7, #7
 80094d6:	1c02      	adds	r2, r0, #0
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	1dbb      	adds	r3, r7, #6
 80094dc:	1c0a      	adds	r2, r1, #0
 80094de:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80094e0:	1dfb      	adds	r3, r7, #7
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009518 <disk_ioctl+0x4c>)
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	18d3      	adds	r3, r2, r3
 80094ea:	3304      	adds	r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	1dfa      	adds	r2, r7, #7
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	4908      	ldr	r1, [pc, #32]	@ (8009518 <disk_ioctl+0x4c>)
 80094f6:	188a      	adds	r2, r1, r2
 80094f8:	7a10      	ldrb	r0, [r2, #8]
 80094fa:	260f      	movs	r6, #15
 80094fc:	19bc      	adds	r4, r7, r6
 80094fe:	683d      	ldr	r5, [r7, #0]
 8009500:	1dba      	adds	r2, r7, #6
 8009502:	7811      	ldrb	r1, [r2, #0]
 8009504:	002a      	movs	r2, r5
 8009506:	4798      	blx	r3
 8009508:	0003      	movs	r3, r0
 800950a:	7023      	strb	r3, [r4, #0]
  return res;
 800950c:	19bb      	adds	r3, r7, r6
 800950e:	781b      	ldrb	r3, [r3, #0]
}
 8009510:	0018      	movs	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	b005      	add	sp, #20
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	20000a3c 	.word	0x20000a3c

0800951c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	210e      	movs	r1, #14
 800952c:	187b      	adds	r3, r7, r1
 800952e:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8009530:	187b      	adds	r3, r7, r1
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	b21a      	sxth	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b21b      	sxth	r3, r3
 800953e:	4313      	orrs	r3, r2
 8009540:	b21a      	sxth	r2, r3
 8009542:	187b      	adds	r3, r7, r1
 8009544:	801a      	strh	r2, [r3, #0]
	return rv;
 8009546:	187b      	adds	r3, r7, r1
 8009548:	881b      	ldrh	r3, [r3, #0]
}
 800954a:	0018      	movs	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	b004      	add	sp, #16
 8009550:	bd80      	pop	{r7, pc}

08009552 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3303      	adds	r3, #3
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	3202      	adds	r2, #2
 800956a:	7812      	ldrb	r2, [r2, #0]
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	3201      	adds	r2, #1
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	7812      	ldrb	r2, [r2, #0]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
	return rv;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b004      	add	sp, #16
 8009592:	bd80      	pop	{r7, pc}

08009594 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	000a      	movs	r2, r1
 800959e:	1cbb      	adds	r3, r7, #2
 80095a0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	1cba      	adds	r2, r7, #2
 80095aa:	8812      	ldrh	r2, [r2, #0]
 80095ac:	b2d2      	uxtb	r2, r2
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	1cbb      	adds	r3, r7, #2
 80095b2:	1cba      	adds	r2, r7, #2
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	0a12      	lsrs	r2, r2, #8
 80095b8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	1cba      	adds	r2, r7, #2
 80095c2:	8812      	ldrh	r2, [r2, #0]
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]
}
 80095c8:	46c0      	nop			@ (mov r8, r8)
 80095ca:	46bd      	mov	sp, r7
 80095cc:	b002      	add	sp, #8
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	0a1b      	lsrs	r3, r3, #8
 80095ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	607a      	str	r2, [r7, #4]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	b2d2      	uxtb	r2, r2
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	701a      	strb	r2, [r3, #0]
}
 800961c:	46c0      	nop			@ (mov r8, r8)
 800961e:	46bd      	mov	sp, r7
 8009620:	b002      	add	sp, #8
 8009622:	bd80      	pop	{r7, pc}

08009624 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	1c53      	adds	r3, r2, #1
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	6179      	str	r1, [r7, #20]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	607b      	str	r3, [r7, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f1      	bne.n	800963e <mem_cpy+0x1a>
	}
}
 800965a:	46c0      	nop			@ (mov r8, r8)
 800965c:	46bd      	mov	sp, r7
 800965e:	b006      	add	sp, #24
 8009660:	bd80      	pop	{r7, pc}

08009662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	617a      	str	r2, [r7, #20]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3b01      	subs	r3, #1
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1f3      	bne.n	8009672 <mem_set+0x10>
}
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	46c0      	nop			@ (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b006      	add	sp, #24
 8009692:	bd80      	pop	{r7, pc}

08009694 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	61fa      	str	r2, [r7, #28]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	0019      	movs	r1, r3
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	61ba      	str	r2, [r7, #24]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	1acb      	subs	r3, r1, r3
 80096c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <mem_cmp+0x40>
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0eb      	beq.n	80096ac <mem_cmp+0x18>

	return r;
 80096d4:	697b      	ldr	r3, [r7, #20]
}
 80096d6:	0018      	movs	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	b008      	add	sp, #32
 80096dc:	bd80      	pop	{r7, pc}

080096de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80096e8:	e002      	b.n	80096f0 <chk_chr+0x12>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3301      	adds	r3, #1
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <chk_chr+0x26>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	001a      	movs	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	4293      	cmp	r3, r2
 8009702:	d1f2      	bne.n	80096ea <chk_chr+0xc>
	return *str;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	781b      	ldrb	r3, [r3, #0]
}
 8009708:	0018      	movs	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	b002      	add	sp, #8
 800970e:	bd80      	pop	{r7, pc}

08009710 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e027      	b.n	8009774 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8009724:	4b25      	ldr	r3, [pc, #148]	@ (80097bc <chk_lock+0xac>)
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	0112      	lsls	r2, r2, #4
 800972a:	58d3      	ldr	r3, [r2, r3]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01c      	beq.n	800976a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009730:	4b22      	ldr	r3, [pc, #136]	@ (80097bc <chk_lock+0xac>)
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	0112      	lsls	r2, r2, #4
 8009736:	58d2      	ldr	r2, [r2, r3]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d116      	bne.n	800976e <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8009740:	4a1e      	ldr	r2, [pc, #120]	@ (80097bc <chk_lock+0xac>)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	18d3      	adds	r3, r2, r3
 8009748:	3304      	adds	r3, #4
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009750:	429a      	cmp	r2, r3
 8009752:	d10c      	bne.n	800976e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8009754:	4a19      	ldr	r2, [pc, #100]	@ (80097bc <chk_lock+0xac>)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	18d3      	adds	r3, r2, r3
 800975c:	3308      	adds	r3, #8
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009764:	429a      	cmp	r2, r3
 8009766:	d102      	bne.n	800976e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8009768:	e007      	b.n	800977a <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800976a:	2301      	movs	r3, #1
 800976c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d9d4      	bls.n	8009724 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d109      	bne.n	8009794 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <chk_lock+0x7c>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d101      	bne.n	8009790 <chk_lock+0x80>
 800978c:	2300      	movs	r3, #0
 800978e:	e011      	b.n	80097b4 <chk_lock+0xa4>
 8009790:	2312      	movs	r3, #18
 8009792:	e00f      	b.n	80097b4 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <chk_lock+0x9e>
 800979a:	4a08      	ldr	r2, [pc, #32]	@ (80097bc <chk_lock+0xac>)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	18d3      	adds	r3, r2, r3
 80097a2:	330c      	adds	r3, #12
 80097a4:	881a      	ldrh	r2, [r3, #0]
 80097a6:	2380      	movs	r3, #128	@ 0x80
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d101      	bne.n	80097b2 <chk_lock+0xa2>
 80097ae:	2310      	movs	r3, #16
 80097b0:	e000      	b.n	80097b4 <chk_lock+0xa4>
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	0018      	movs	r0, r3
 80097b6:	46bd      	mov	sp, r7
 80097b8:	b004      	add	sp, #16
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20000a1c 	.word	0x20000a1c

080097c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097c6:	2300      	movs	r3, #0
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	e002      	b.n	80097d2 <enq_lock+0x12>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3301      	adds	r3, #1
 80097d0:	607b      	str	r3, [r7, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d805      	bhi.n	80097e4 <enq_lock+0x24>
 80097d8:	4b07      	ldr	r3, [pc, #28]	@ (80097f8 <enq_lock+0x38>)
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	0112      	lsls	r2, r2, #4
 80097de:	58d3      	ldr	r3, [r2, r3]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f3      	bne.n	80097cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3b02      	subs	r3, #2
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	4193      	sbcs	r3, r2
 80097ec:	b2db      	uxtb	r3, r3
}
 80097ee:	0018      	movs	r0, r3
 80097f0:	46bd      	mov	sp, r7
 80097f2:	b002      	add	sp, #8
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	46c0      	nop			@ (mov r8, r8)
 80097f8:	20000a1c 	.word	0x20000a1c

080097fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	e01e      	b.n	800984a <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 800980c:	4b3f      	ldr	r3, [pc, #252]	@ (800990c <inc_lock+0x110>)
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	0112      	lsls	r2, r2, #4
 8009812:	58d2      	ldr	r2, [r2, r3]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d113      	bne.n	8009844 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 800981c:	4a3b      	ldr	r2, [pc, #236]	@ (800990c <inc_lock+0x110>)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	18d3      	adds	r3, r2, r3
 8009824:	3304      	adds	r3, #4
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800982c:	429a      	cmp	r2, r3
 800982e:	d109      	bne.n	8009844 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8009830:	4a36      	ldr	r2, [pc, #216]	@ (800990c <inc_lock+0x110>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	18d3      	adds	r3, r2, r3
 8009838:	3308      	adds	r3, #8
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009840:	429a      	cmp	r2, r3
 8009842:	d006      	beq.n	8009852 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d9dd      	bls.n	800980c <inc_lock+0x10>
 8009850:	e000      	b.n	8009854 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8009852:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d130      	bne.n	80098bc <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	e002      	b.n	8009866 <inc_lock+0x6a>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d805      	bhi.n	8009878 <inc_lock+0x7c>
 800986c:	4b27      	ldr	r3, [pc, #156]	@ (800990c <inc_lock+0x110>)
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	0112      	lsls	r2, r2, #4
 8009872:	58d3      	ldr	r3, [r2, r3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1f3      	bne.n	8009860 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d101      	bne.n	8009882 <inc_lock+0x86>
 800987e:	2300      	movs	r3, #0
 8009880:	e03f      	b.n	8009902 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6819      	ldr	r1, [r3, #0]
 8009886:	4b21      	ldr	r3, [pc, #132]	@ (800990c <inc_lock+0x110>)
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	0112      	lsls	r2, r2, #4
 800988c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	491e      	ldr	r1, [pc, #120]	@ (800990c <inc_lock+0x110>)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	18cb      	adds	r3, r1, r3
 800989a:	3304      	adds	r3, #4
 800989c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695a      	ldr	r2, [r3, #20]
 80098a2:	491a      	ldr	r1, [pc, #104]	@ (800990c <inc_lock+0x110>)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	18cb      	adds	r3, r1, r3
 80098aa:	3308      	adds	r3, #8
 80098ac:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80098ae:	4a17      	ldr	r2, [pc, #92]	@ (800990c <inc_lock+0x110>)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	18d3      	adds	r3, r2, r3
 80098b6:	330c      	adds	r3, #12
 80098b8:	2200      	movs	r2, #0
 80098ba:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <inc_lock+0xda>
 80098c2:	4a12      	ldr	r2, [pc, #72]	@ (800990c <inc_lock+0x110>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	18d3      	adds	r3, r2, r3
 80098ca:	330c      	adds	r3, #12
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <inc_lock+0xda>
 80098d2:	2300      	movs	r3, #0
 80098d4:	e015      	b.n	8009902 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <inc_lock+0xf2>
 80098dc:	4a0b      	ldr	r2, [pc, #44]	@ (800990c <inc_lock+0x110>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	18d3      	adds	r3, r2, r3
 80098e4:	330c      	adds	r3, #12
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	e001      	b.n	80098f2 <inc_lock+0xf6>
 80098ee:	2380      	movs	r3, #128	@ 0x80
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4906      	ldr	r1, [pc, #24]	@ (800990c <inc_lock+0x110>)
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	0112      	lsls	r2, r2, #4
 80098f8:	188a      	adds	r2, r1, r2
 80098fa:	320c      	adds	r2, #12
 80098fc:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
}
 8009902:	0018      	movs	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	b004      	add	sp, #16
 8009908:	bd80      	pop	{r7, pc}
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	20000a1c 	.word	0x20000a1c

08009910 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3b01      	subs	r3, #1
 800991c:	607b      	str	r3, [r7, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d832      	bhi.n	800998a <dec_lock+0x7a>
		n = Files[i].ctr;
 8009924:	200e      	movs	r0, #14
 8009926:	183b      	adds	r3, r7, r0
 8009928:	491d      	ldr	r1, [pc, #116]	@ (80099a0 <dec_lock+0x90>)
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	0112      	lsls	r2, r2, #4
 800992e:	188a      	adds	r2, r1, r2
 8009930:	320c      	adds	r2, #12
 8009932:	8812      	ldrh	r2, [r2, #0]
 8009934:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009936:	183b      	adds	r3, r7, r0
 8009938:	881a      	ldrh	r2, [r3, #0]
 800993a:	2380      	movs	r3, #128	@ 0x80
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	429a      	cmp	r2, r3
 8009940:	d102      	bne.n	8009948 <dec_lock+0x38>
 8009942:	183b      	adds	r3, r7, r0
 8009944:	2200      	movs	r2, #0
 8009946:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009948:	210e      	movs	r1, #14
 800994a:	187b      	adds	r3, r7, r1
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <dec_lock+0x4c>
 8009952:	187b      	adds	r3, r7, r1
 8009954:	881a      	ldrh	r2, [r3, #0]
 8009956:	187b      	adds	r3, r7, r1
 8009958:	3a01      	subs	r2, #1
 800995a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800995c:	4a10      	ldr	r2, [pc, #64]	@ (80099a0 <dec_lock+0x90>)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	18d3      	adds	r3, r2, r3
 8009964:	330c      	adds	r3, #12
 8009966:	210e      	movs	r1, #14
 8009968:	187a      	adds	r2, r7, r1
 800996a:	8812      	ldrh	r2, [r2, #0]
 800996c:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800996e:	187b      	adds	r3, r7, r1
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <dec_lock+0x70>
 8009976:	4b0a      	ldr	r3, [pc, #40]	@ (80099a0 <dec_lock+0x90>)
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	0112      	lsls	r2, r2, #4
 800997c:	2100      	movs	r1, #0
 800997e:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8009980:	230d      	movs	r3, #13
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e003      	b.n	8009992 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800998a:	230d      	movs	r3, #13
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	2202      	movs	r2, #2
 8009990:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8009992:	230d      	movs	r3, #13
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	781b      	ldrb	r3, [r3, #0]
}
 8009998:	0018      	movs	r0, r3
 800999a:	46bd      	mov	sp, r7
 800999c:	b004      	add	sp, #16
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000a1c 	.word	0x20000a1c

080099a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e00e      	b.n	80099d0 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099b2:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <clear_lock+0x3c>)
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	0112      	lsls	r2, r2, #4
 80099b8:	58d3      	ldr	r3, [r2, r3]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d104      	bne.n	80099ca <clear_lock+0x26>
 80099c0:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <clear_lock+0x3c>)
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	0112      	lsls	r2, r2, #4
 80099c6:	2100      	movs	r1, #0
 80099c8:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d9ed      	bls.n	80099b2 <clear_lock+0xe>
	}
}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	46c0      	nop			@ (mov r8, r8)
 80099da:	46bd      	mov	sp, r7
 80099dc:	b004      	add	sp, #16
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000a1c 	.word	0x20000a1c

080099e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80099e4:	b590      	push	{r4, r7, lr}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099ec:	240f      	movs	r4, #15
 80099ee:	193b      	adds	r3, r7, r4
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	78db      	ldrb	r3, [r3, #3]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d034      	beq.n	8009a66 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7858      	ldrb	r0, [r3, #1]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3330      	adds	r3, #48	@ 0x30
 8009a0a:	0019      	movs	r1, r3
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f7ff fd34 	bl	800947c <disk_write>
 8009a14:	1e03      	subs	r3, r0, #0
 8009a16:	d003      	beq.n	8009a20 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8009a18:	193b      	adds	r3, r7, r4
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	e022      	b.n	8009a66 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	1ad2      	subs	r2, r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d217      	bcs.n	8009a66 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	789b      	ldrb	r3, [r3, #2]
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	e010      	b.n	8009a60 <sync_window+0x7c>
					wsect += fs->fsize;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	18d3      	adds	r3, r2, r3
 8009a46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7858      	ldrb	r0, [r3, #1]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3330      	adds	r3, #48	@ 0x30
 8009a50:	0019      	movs	r1, r3
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	2301      	movs	r3, #1
 8009a56:	f7ff fd11 	bl	800947c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d8eb      	bhi.n	8009a3e <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8009a66:	230f      	movs	r3, #15
 8009a68:	18fb      	adds	r3, r7, r3
 8009a6a:	781b      	ldrb	r3, [r3, #0]
}
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b007      	add	sp, #28
 8009a72:	bd90      	pop	{r4, r7, pc}

08009a74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009a74:	b5b0      	push	{r4, r5, r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a7e:	250f      	movs	r5, #15
 8009a80:	197b      	adds	r3, r7, r5
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d01f      	beq.n	8009ad0 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a90:	197c      	adds	r4, r7, r5
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f7ff ffa5 	bl	80099e4 <sync_window>
 8009a9a:	0003      	movs	r3, r0
 8009a9c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a9e:	002c      	movs	r4, r5
 8009aa0:	193b      	adds	r3, r7, r4
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d113      	bne.n	8009ad0 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7858      	ldrb	r0, [r3, #1]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3330      	adds	r3, #48	@ 0x30
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f7ff fcb9 	bl	800942c <disk_read>
 8009aba:	1e03      	subs	r3, r0, #0
 8009abc:	d005      	beq.n	8009aca <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009abe:	2301      	movs	r3, #1
 8009ac0:	425b      	negs	r3, r3
 8009ac2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ac4:	193b      	adds	r3, r7, r4
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009ad0:	230f      	movs	r3, #15
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	781b      	ldrb	r3, [r3, #0]
}
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	b004      	add	sp, #16
 8009adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009ae0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ae0:	b5b0      	push	{r4, r5, r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009ae8:	250f      	movs	r5, #15
 8009aea:	197c      	adds	r4, r7, r5
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	0018      	movs	r0, r3
 8009af0:	f7ff ff78 	bl	80099e4 <sync_window>
 8009af4:	0003      	movs	r3, r0
 8009af6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009af8:	197b      	adds	r3, r7, r5
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d15d      	bne.n	8009bbc <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d14c      	bne.n	8009ba2 <sync_fs+0xc2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	791b      	ldrb	r3, [r3, #4]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d148      	bne.n	8009ba2 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3330      	adds	r3, #48	@ 0x30
 8009b14:	2280      	movs	r2, #128	@ 0x80
 8009b16:	0092      	lsls	r2, r2, #2
 8009b18:	2100      	movs	r1, #0
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f7ff fda1 	bl	8009662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3330      	adds	r3, #48	@ 0x30
 8009b24:	33ff      	adds	r3, #255	@ 0xff
 8009b26:	33ff      	adds	r3, #255	@ 0xff
 8009b28:	4a28      	ldr	r2, [pc, #160]	@ (8009bcc <sync_fs+0xec>)
 8009b2a:	0011      	movs	r1, r2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f7ff fd31 	bl	8009594 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3330      	adds	r3, #48	@ 0x30
 8009b36:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <sync_fs+0xf0>)
 8009b38:	0011      	movs	r1, r2
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f7ff fd48 	bl	80095d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3330      	adds	r3, #48	@ 0x30
 8009b44:	33e5      	adds	r3, #229	@ 0xe5
 8009b46:	33ff      	adds	r3, #255	@ 0xff
 8009b48:	4a22      	ldr	r2, [pc, #136]	@ (8009bd4 <sync_fs+0xf4>)
 8009b4a:	0011      	movs	r1, r2
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f7ff fd3f 	bl	80095d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3330      	adds	r3, #48	@ 0x30
 8009b56:	33e9      	adds	r3, #233	@ 0xe9
 8009b58:	33ff      	adds	r3, #255	@ 0xff
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	0019      	movs	r1, r3
 8009b62:	0010      	movs	r0, r2
 8009b64:	f7ff fd34 	bl	80095d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3330      	adds	r3, #48	@ 0x30
 8009b6c:	33ed      	adds	r3, #237	@ 0xed
 8009b6e:	33ff      	adds	r3, #255	@ 0xff
 8009b70:	001a      	movs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	0019      	movs	r1, r3
 8009b78:	0010      	movs	r0, r2
 8009b7a:	f7ff fd29 	bl	80095d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	7858      	ldrb	r0, [r3, #1]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3330      	adds	r3, #48	@ 0x30
 8009b90:	0019      	movs	r1, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b96:	2301      	movs	r3, #1
 8009b98:	f7ff fc70 	bl	800947c <disk_write>
			fs->fsi_flag = 0;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	785b      	ldrb	r3, [r3, #1]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	0018      	movs	r0, r3
 8009bac:	f7ff fc8e 	bl	80094cc <disk_ioctl>
 8009bb0:	1e03      	subs	r3, r0, #0
 8009bb2:	d003      	beq.n	8009bbc <sync_fs+0xdc>
 8009bb4:	230f      	movs	r3, #15
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8009bbc:	230f      	movs	r3, #15
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	781b      	ldrb	r3, [r3, #0]
}
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	b004      	add	sp, #16
 8009bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	0000aa55 	.word	0x0000aa55
 8009bd0:	41615252 	.word	0x41615252
 8009bd4:	61417272 	.word	0x61417272

08009bd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	3b02      	subs	r3, #2
 8009be6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	3b02      	subs	r3, #2
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d301      	bcc.n	8009bf8 <clust2sect+0x20>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e007      	b.n	8009c08 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	895b      	ldrh	r3, [r3, #10]
 8009bfc:	001a      	movs	r2, r3
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	435a      	muls	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c06:	18d3      	adds	r3, r2, r3
}
 8009c08:	0018      	movs	r0, r3
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d904      	bls.n	8009c30 <get_fat+0x20>
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d302      	bcc.n	8009c36 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e091      	b.n	8009d5a <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c36:	2301      	movs	r3, #1
 8009c38:	425b      	negs	r3, r3
 8009c3a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d063      	beq.n	8009d0c <get_fat+0xfc>
 8009c44:	dd00      	ble.n	8009c48 <get_fat+0x38>
 8009c46:	e07e      	b.n	8009d46 <get_fat+0x136>
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d002      	beq.n	8009c52 <get_fat+0x42>
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d042      	beq.n	8009cd6 <get_fat+0xc6>
 8009c50:	e079      	b.n	8009d46 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	085b      	lsrs	r3, r3, #1
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	18d3      	adds	r3, r2, r3
 8009c5e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6a1a      	ldr	r2, [r3, #32]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	0a5b      	lsrs	r3, r3, #9
 8009c68:	18d2      	adds	r2, r2, r3
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	0011      	movs	r1, r2
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f7ff ff00 	bl	8009a74 <move_window>
 8009c74:	1e03      	subs	r3, r0, #0
 8009c76:	d169      	bne.n	8009d4c <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	60fa      	str	r2, [r7, #12]
 8009c7e:	05db      	lsls	r3, r3, #23
 8009c80:	0ddb      	lsrs	r3, r3, #23
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	2130      	movs	r1, #48	@ 0x30
 8009c86:	18d3      	adds	r3, r2, r3
 8009c88:	185b      	adds	r3, r3, r1
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6a1a      	ldr	r2, [r3, #32]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	0a5b      	lsrs	r3, r3, #9
 8009c96:	18d2      	adds	r2, r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	0011      	movs	r1, r2
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff fee9 	bl	8009a74 <move_window>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d154      	bne.n	8009d50 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	05db      	lsls	r3, r3, #23
 8009caa:	0ddb      	lsrs	r3, r3, #23
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	2130      	movs	r1, #48	@ 0x30
 8009cb0:	18d3      	adds	r3, r2, r3
 8009cb2:	185b      	adds	r3, r3, r1
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	d002      	beq.n	8009ccc <get_fat+0xbc>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	091b      	lsrs	r3, r3, #4
 8009cca:	e002      	b.n	8009cd2 <get_fat+0xc2>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	051b      	lsls	r3, r3, #20
 8009cd0:	0d1b      	lsrs	r3, r3, #20
 8009cd2:	617b      	str	r3, [r7, #20]
			break;
 8009cd4:	e041      	b.n	8009d5a <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6a1a      	ldr	r2, [r3, #32]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	0a1b      	lsrs	r3, r3, #8
 8009cde:	18d2      	adds	r2, r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	0011      	movs	r1, r2
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	f7ff fec5 	bl	8009a74 <move_window>
 8009cea:	1e03      	subs	r3, r0, #0
 8009cec:	d132      	bne.n	8009d54 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	3330      	adds	r3, #48	@ 0x30
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	0059      	lsls	r1, r3, #1
 8009cf8:	23ff      	movs	r3, #255	@ 0xff
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	400b      	ands	r3, r1
 8009cfe:	18d3      	adds	r3, r2, r3
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7ff fc0b 	bl	800951c <ld_word>
 8009d06:	0003      	movs	r3, r0
 8009d08:	617b      	str	r3, [r7, #20]
			break;
 8009d0a:	e026      	b.n	8009d5a <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6a1a      	ldr	r2, [r3, #32]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	09db      	lsrs	r3, r3, #7
 8009d14:	18d2      	adds	r2, r2, r3
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	0011      	movs	r1, r2
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f7ff feaa 	bl	8009a74 <move_window>
 8009d20:	1e03      	subs	r3, r0, #0
 8009d22:	d119      	bne.n	8009d58 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3330      	adds	r3, #48	@ 0x30
 8009d28:	001a      	movs	r2, r3
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	0099      	lsls	r1, r3, #2
 8009d2e:	23fe      	movs	r3, #254	@ 0xfe
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	400b      	ands	r3, r1
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	0018      	movs	r0, r3
 8009d38:	f7ff fc0b 	bl	8009552 <ld_dword>
 8009d3c:	0003      	movs	r3, r0
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	091b      	lsrs	r3, r3, #4
 8009d42:	617b      	str	r3, [r7, #20]
			break;
 8009d44:	e009      	b.n	8009d5a <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d46:	2301      	movs	r3, #1
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	e006      	b.n	8009d5a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d4c:	46c0      	nop			@ (mov r8, r8)
 8009d4e:	e004      	b.n	8009d5a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d50:	46c0      	nop			@ (mov r8, r8)
 8009d52:	e002      	b.n	8009d5a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d54:	46c0      	nop			@ (mov r8, r8)
 8009d56:	e000      	b.n	8009d5a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d58:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8009d5a:	697b      	ldr	r3, [r7, #20]
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b006      	add	sp, #24
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d64:	b5b0      	push	{r4, r5, r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009d70:	231f      	movs	r3, #31
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	2202      	movs	r2, #2
 8009d76:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d800      	bhi.n	8009d80 <put_fat+0x1c>
 8009d7e:	e0eb      	b.n	8009f58 <put_fat+0x1f4>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d300      	bcc.n	8009d8c <put_fat+0x28>
 8009d8a:	e0e5      	b.n	8009f58 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d100      	bne.n	8009d96 <put_fat+0x32>
 8009d94:	e0a1      	b.n	8009eda <put_fat+0x176>
 8009d96:	dd00      	ble.n	8009d9a <put_fat+0x36>
 8009d98:	e0de      	b.n	8009f58 <put_fat+0x1f4>
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d003      	beq.n	8009da6 <put_fat+0x42>
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d100      	bne.n	8009da4 <put_fat+0x40>
 8009da2:	e075      	b.n	8009e90 <put_fat+0x12c>
 8009da4:	e0d8      	b.n	8009f58 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	085b      	lsrs	r3, r3, #1
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	18d3      	adds	r3, r2, r3
 8009db2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6a1a      	ldr	r2, [r3, #32]
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	0a5b      	lsrs	r3, r3, #9
 8009dbc:	18d2      	adds	r2, r2, r3
 8009dbe:	251f      	movs	r5, #31
 8009dc0:	197c      	adds	r4, r7, r5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	0011      	movs	r1, r2
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7ff fe54 	bl	8009a74 <move_window>
 8009dcc:	0003      	movs	r3, r0
 8009dce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009dd0:	197b      	adds	r3, r7, r5
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d000      	beq.n	8009dda <put_fat+0x76>
 8009dd8:	e0b7      	b.n	8009f4a <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3330      	adds	r3, #48	@ 0x30
 8009dde:	001a      	movs	r2, r3
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	1c59      	adds	r1, r3, #1
 8009de4:	61b9      	str	r1, [r7, #24]
 8009de6:	05db      	lsls	r3, r3, #23
 8009de8:	0ddb      	lsrs	r3, r3, #23
 8009dea:	18d3      	adds	r3, r2, r3
 8009dec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2201      	movs	r2, #1
 8009df2:	4013      	ands	r3, r2
 8009df4:	d00d      	beq.n	8009e12 <put_fat+0xae>
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	220f      	movs	r2, #15
 8009dfe:	4013      	ands	r3, r2
 8009e00:	b25a      	sxtb	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	b25b      	sxtb	r3, r3
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	b25b      	sxtb	r3, r3
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	e001      	b.n	8009e16 <put_fat+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1a      	ldr	r2, [r3, #32]
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	0a5b      	lsrs	r3, r3, #9
 8009e28:	18d2      	adds	r2, r2, r3
 8009e2a:	251f      	movs	r5, #31
 8009e2c:	197c      	adds	r4, r7, r5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	0011      	movs	r1, r2
 8009e32:	0018      	movs	r0, r3
 8009e34:	f7ff fe1e 	bl	8009a74 <move_window>
 8009e38:	0003      	movs	r3, r0
 8009e3a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009e3c:	197b      	adds	r3, r7, r5
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d000      	beq.n	8009e46 <put_fat+0xe2>
 8009e44:	e083      	b.n	8009f4e <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3330      	adds	r3, #48	@ 0x30
 8009e4a:	001a      	movs	r2, r3
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	05db      	lsls	r3, r3, #23
 8009e50:	0ddb      	lsrs	r3, r3, #23
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	d003      	beq.n	8009e66 <put_fat+0x102>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	091b      	lsrs	r3, r3, #4
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	e00e      	b.n	8009e84 <put_fat+0x120>
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	b25b      	sxtb	r3, r3
 8009e6c:	220f      	movs	r2, #15
 8009e6e:	4393      	bics	r3, r2
 8009e70:	b25a      	sxtb	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	0a1b      	lsrs	r3, r3, #8
 8009e76:	b25b      	sxtb	r3, r3
 8009e78:	210f      	movs	r1, #15
 8009e7a:	400b      	ands	r3, r1
 8009e7c:	b25b      	sxtb	r3, r3
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	b25b      	sxtb	r3, r3
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	70da      	strb	r2, [r3, #3]
			break;
 8009e8e:	e063      	b.n	8009f58 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a1a      	ldr	r2, [r3, #32]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	18d2      	adds	r2, r2, r3
 8009e9a:	251f      	movs	r5, #31
 8009e9c:	197c      	adds	r4, r7, r5
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	0011      	movs	r1, r2
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f7ff fde6 	bl	8009a74 <move_window>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009eac:	197b      	adds	r3, r7, r5
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d14e      	bne.n	8009f52 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3330      	adds	r3, #48	@ 0x30
 8009eb8:	001a      	movs	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	0059      	lsls	r1, r3, #1
 8009ebe:	23ff      	movs	r3, #255	@ 0xff
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	18d3      	adds	r3, r2, r3
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	b292      	uxth	r2, r2
 8009eca:	0011      	movs	r1, r2
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f7ff fb61 	bl	8009594 <st_word>
			fs->wflag = 1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	70da      	strb	r2, [r3, #3]
			break;
 8009ed8:	e03e      	b.n	8009f58 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6a1a      	ldr	r2, [r3, #32]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	09db      	lsrs	r3, r3, #7
 8009ee2:	18d2      	adds	r2, r2, r3
 8009ee4:	251f      	movs	r5, #31
 8009ee6:	197c      	adds	r4, r7, r5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	0011      	movs	r1, r2
 8009eec:	0018      	movs	r0, r3
 8009eee:	f7ff fdc1 	bl	8009a74 <move_window>
 8009ef2:	0003      	movs	r3, r0
 8009ef4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009ef6:	197b      	adds	r3, r7, r5
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12b      	bne.n	8009f56 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	091c      	lsrs	r4, r3, #4
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3330      	adds	r3, #48	@ 0x30
 8009f08:	001a      	movs	r2, r3
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	0099      	lsls	r1, r3, #2
 8009f0e:	23fe      	movs	r3, #254	@ 0xfe
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	400b      	ands	r3, r1
 8009f14:	18d3      	adds	r3, r2, r3
 8009f16:	0018      	movs	r0, r3
 8009f18:	f7ff fb1b 	bl	8009552 <ld_dword>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	0f1b      	lsrs	r3, r3, #28
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	4323      	orrs	r3, r4
 8009f24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3330      	adds	r3, #48	@ 0x30
 8009f2a:	001a      	movs	r2, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	0099      	lsls	r1, r3, #2
 8009f30:	23fe      	movs	r3, #254	@ 0xfe
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	400b      	ands	r3, r1
 8009f36:	18d3      	adds	r3, r2, r3
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	0011      	movs	r1, r2
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f7ff fb47 	bl	80095d0 <st_dword>
			fs->wflag = 1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	70da      	strb	r2, [r3, #3]
			break;
 8009f48:	e006      	b.n	8009f58 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	e004      	b.n	8009f58 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8009f4e:	46c0      	nop			@ (mov r8, r8)
 8009f50:	e002      	b.n	8009f58 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8009f52:	46c0      	nop			@ (mov r8, r8)
 8009f54:	e000      	b.n	8009f58 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8009f56:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8009f58:	231f      	movs	r3, #31
 8009f5a:	18fb      	adds	r3, r7, r3
 8009f5c:	781b      	ldrb	r3, [r3, #0]
}
 8009f5e:	0018      	movs	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b008      	add	sp, #32
 8009f64:	bdb0      	pop	{r4, r5, r7, pc}

08009f66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009f66:	b5b0      	push	{r4, r5, r7, lr}
 8009f68:	b088      	sub	sp, #32
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009f72:	231f      	movs	r3, #31
 8009f74:	18fb      	adds	r3, r7, r3
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d904      	bls.n	8009f90 <remove_chain+0x2a>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d301      	bcc.n	8009f94 <remove_chain+0x2e>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e057      	b.n	800a044 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d011      	beq.n	8009fbe <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009f9a:	251f      	movs	r5, #31
 8009f9c:	197c      	adds	r4, r7, r5
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	425a      	negs	r2, r3
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f7ff fedc 	bl	8009d64 <put_fat>
 8009fac:	0003      	movs	r3, r0
 8009fae:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8009fb0:	197b      	adds	r3, r7, r5
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <remove_chain+0x58>
 8009fb8:	197b      	adds	r3, r7, r5
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	e042      	b.n	800a044 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	0011      	movs	r1, r2
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7ff fe23 	bl	8009c10 <get_fat>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d035      	beq.n	800a040 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <remove_chain+0x78>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e032      	b.n	800a044 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <remove_chain+0x82>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e02d      	b.n	800a044 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009fe8:	251f      	movs	r5, #31
 8009fea:	197c      	adds	r4, r7, r5
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f7ff feb6 	bl	8009d64 <put_fat>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8009ffc:	197b      	adds	r3, r7, r5
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <remove_chain+0xa4>
 800a004:	197b      	adds	r3, r7, r5
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	e01c      	b.n	800a044 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	691a      	ldr	r2, [r3, #16]
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	3b02      	subs	r3, #2
 800a014:	429a      	cmp	r2, r3
 800a016:	d20b      	bcs.n	800a030 <remove_chain+0xca>
			fs->free_clst++;
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	791b      	ldrb	r3, [r3, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	4313      	orrs	r3, r2
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d3bf      	bcc.n	8009fbe <remove_chain+0x58>
 800a03e:	e000      	b.n	800a042 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800a040:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	0018      	movs	r0, r3
 800a046:	46bd      	mov	sp, r7
 800a048:	b008      	add	sp, #32
 800a04a:	bdb0      	pop	{r4, r5, r7, pc}

0800a04c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a04c:	b5b0      	push	{r4, r5, r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10d      	bne.n	800a07e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <create_chain+0x2c>
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	429a      	cmp	r2, r3
 800a076:	d31d      	bcc.n	800a0b4 <create_chain+0x68>
 800a078:	2301      	movs	r3, #1
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	e01a      	b.n	800a0b4 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	0011      	movs	r1, r2
 800a084:	0018      	movs	r0, r3
 800a086:	f7ff fdc3 	bl	8009c10 <get_fat>
 800a08a:	0003      	movs	r3, r0
 800a08c:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d801      	bhi.n	800a098 <create_chain+0x4c>
 800a094:	2301      	movs	r3, #1
 800a096:	e07b      	b.n	800a190 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <create_chain+0x56>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	e076      	b.n	800a190 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d201      	bcs.n	800a0b0 <create_chain+0x64>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e06f      	b.n	800a190 <create_chain+0x144>
		scl = clst;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d307      	bcc.n	800a0d8 <create_chain+0x8c>
				ncl = 2;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d901      	bls.n	800a0d8 <create_chain+0x8c>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e05b      	b.n	800a190 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0011      	movs	r1, r2
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f7ff fd96 	bl	8009c10 <get_fat>
 800a0e4:	0003      	movs	r3, r0
 800a0e6:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d002      	beq.n	800a0fa <create_chain+0xae>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	d101      	bne.n	800a0fe <create_chain+0xb2>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	e048      	b.n	800a190 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	429a      	cmp	r2, r3
 800a104:	d1d8      	bne.n	800a0b8 <create_chain+0x6c>
 800a106:	2300      	movs	r3, #0
 800a108:	e042      	b.n	800a190 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800a10a:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a10c:	2517      	movs	r5, #23
 800a10e:	197c      	adds	r4, r7, r5
 800a110:	2301      	movs	r3, #1
 800a112:	425a      	negs	r2, r3
 800a114:	69f9      	ldr	r1, [r7, #28]
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	0018      	movs	r0, r3
 800a11a:	f7ff fe23 	bl	8009d64 <put_fat>
 800a11e:	0003      	movs	r3, r0
 800a120:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800a122:	197b      	adds	r3, r7, r5
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10b      	bne.n	800a142 <create_chain+0xf6>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a130:	197c      	adds	r4, r7, r5
 800a132:	69fa      	ldr	r2, [r7, #28]
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff fe13 	bl	8009d64 <put_fat>
 800a13e:	0003      	movs	r3, r0
 800a140:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a142:	2317      	movs	r3, #23
 800a144:	18fb      	adds	r3, r7, r3
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d116      	bne.n	800a17a <create_chain+0x12e>
		fs->last_clst = ncl;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	3b02      	subs	r3, #2
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d804      	bhi.n	800a16a <create_chain+0x11e>
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	1e5a      	subs	r2, r3, #1
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	4313      	orrs	r3, r2
 800a172:	b2da      	uxtb	r2, r3
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	711a      	strb	r2, [r3, #4]
 800a178:	e009      	b.n	800a18e <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a17a:	2317      	movs	r3, #23
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d102      	bne.n	800a18a <create_chain+0x13e>
 800a184:	2301      	movs	r3, #1
 800a186:	425b      	negs	r3, r3
 800a188:	e000      	b.n	800a18c <create_chain+0x140>
 800a18a:	2301      	movs	r3, #1
 800a18c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a18e:	69fb      	ldr	r3, [r7, #28]
}
 800a190:	0018      	movs	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	b008      	add	sp, #32
 800a196:	bdb0      	pop	{r4, r5, r7, pc}

0800a198 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	0a5a      	lsrs	r2, r3, #9
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	895b      	ldrh	r3, [r3, #10]
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	0010      	movs	r0, r2
 800a1bc:	f7f5 ffc0 	bl	8000140 <__udivsi3>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	613a      	str	r2, [r7, #16]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <clmt_clust+0x40>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e010      	b.n	800a1fa <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d307      	bcc.n	800a1f0 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1ee:	e7e9      	b.n	800a1c4 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800a1f0:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	18d3      	adds	r3, r2, r3
}
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	b006      	add	sp, #24
 800a200:	bd80      	pop	{r7, pc}

0800a202 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b086      	sub	sp, #24
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	2380      	movs	r3, #128	@ 0x80
 800a216:	039b      	lsls	r3, r3, #14
 800a218:	429a      	cmp	r2, r3
 800a21a:	d203      	bcs.n	800a224 <dir_sdi+0x22>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	221f      	movs	r2, #31
 800a220:	4013      	ands	r3, r2
 800a222:	d001      	beq.n	800a228 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a224:	2302      	movs	r3, #2
 800a226:	e066      	b.n	800a2f6 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <dir_sdi+0x46>
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d902      	bls.n	800a248 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10c      	bne.n	800a268 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	095b      	lsrs	r3, r3, #5
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	8912      	ldrh	r2, [r2, #8]
 800a256:	4293      	cmp	r3, r2
 800a258:	d301      	bcc.n	800a25e <dir_sdi+0x5c>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e04b      	b.n	800a2f6 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	61da      	str	r2, [r3, #28]
 800a266:	e02c      	b.n	800a2c2 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	895b      	ldrh	r3, [r3, #10]
 800a26c:	025b      	lsls	r3, r3, #9
 800a26e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a270:	e01a      	b.n	800a2a8 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	0011      	movs	r1, r2
 800a278:	0018      	movs	r0, r3
 800a27a:	f7ff fcc9 	bl	8009c10 <get_fat>
 800a27e:	0003      	movs	r3, r0
 800a280:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	3301      	adds	r3, #1
 800a286:	d101      	bne.n	800a28c <dir_sdi+0x8a>
 800a288:	2301      	movs	r3, #1
 800a28a:	e034      	b.n	800a2f6 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d904      	bls.n	800a29c <dir_sdi+0x9a>
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d301      	bcc.n	800a2a0 <dir_sdi+0x9e>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e02a      	b.n	800a2f6 <dir_sdi+0xf4>
			ofs -= csz;
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d2e0      	bcs.n	800a272 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	0011      	movs	r1, r2
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f7ff fc8e 	bl	8009bd8 <clust2sect>
 800a2bc:	0002      	movs	r2, r0
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <dir_sdi+0xd2>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e010      	b.n	800a2f6 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	0a5b      	lsrs	r3, r3, #9
 800a2dc:	18d2      	adds	r2, r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3330      	adds	r3, #48	@ 0x30
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	05db      	lsls	r3, r3, #23
 800a2ec:	0ddb      	lsrs	r3, r3, #23
 800a2ee:	18d2      	adds	r2, r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b006      	add	sp, #24
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	3320      	adds	r3, #32
 800a314:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <dir_next+0x2a>
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	2380      	movs	r3, #128	@ 0x80
 800a322:	039b      	lsls	r3, r3, #14
 800a324:	429a      	cmp	r2, r3
 800a326:	d301      	bcc.n	800a32c <dir_next+0x2e>
 800a328:	2304      	movs	r3, #4
 800a32a:	e0ad      	b.n	800a488 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	05db      	lsls	r3, r3, #23
 800a330:	0ddb      	lsrs	r3, r3, #23
 800a332:	d000      	beq.n	800a336 <dir_next+0x38>
 800a334:	e09b      	b.n	800a46e <dir_next+0x170>
		dp->sect++;				/* Next sector */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10b      	bne.n	800a360 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	095b      	lsrs	r3, r3, #5
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	8912      	ldrh	r2, [r2, #8]
 800a350:	4293      	cmp	r3, r2
 800a352:	d200      	bcs.n	800a356 <dir_next+0x58>
 800a354:	e08b      	b.n	800a46e <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	61da      	str	r2, [r3, #28]
 800a35c:	2304      	movs	r3, #4
 800a35e:	e093      	b.n	800a488 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	0a5b      	lsrs	r3, r3, #9
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	8952      	ldrh	r2, [r2, #10]
 800a368:	3a01      	subs	r2, #1
 800a36a:	4013      	ands	r3, r2
 800a36c:	d000      	beq.n	800a370 <dir_next+0x72>
 800a36e:	e07e      	b.n	800a46e <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	0019      	movs	r1, r3
 800a378:	0010      	movs	r0, r2
 800a37a:	f7ff fc49 	bl	8009c10 <get_fat>
 800a37e:	0003      	movs	r3, r0
 800a380:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d801      	bhi.n	800a38c <dir_next+0x8e>
 800a388:	2302      	movs	r3, #2
 800a38a:	e07d      	b.n	800a488 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	3301      	adds	r3, #1
 800a390:	d101      	bne.n	800a396 <dir_next+0x98>
 800a392:	2301      	movs	r3, #1
 800a394:	e078      	b.n	800a488 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d35a      	bcc.n	800a456 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d104      	bne.n	800a3b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	61da      	str	r2, [r3, #28]
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	e06b      	b.n	800a488 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	0010      	movs	r0, r2
 800a3ba:	f7ff fe47 	bl	800a04c <create_chain>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <dir_next+0xce>
 800a3c8:	2307      	movs	r3, #7
 800a3ca:	e05d      	b.n	800a488 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <dir_next+0xd8>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e058      	b.n	800a488 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <dir_next+0xe2>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e053      	b.n	800a488 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f7ff fafe 	bl	80099e4 <sync_window>
 800a3e8:	1e03      	subs	r3, r0, #0
 800a3ea:	d001      	beq.n	800a3f0 <dir_next+0xf2>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e04b      	b.n	800a488 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3330      	adds	r3, #48	@ 0x30
 800a3f4:	2280      	movs	r2, #128	@ 0x80
 800a3f6:	0092      	lsls	r2, r2, #2
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f7ff f931 	bl	8009662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a400:	2300      	movs	r3, #0
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	0011      	movs	r1, r2
 800a40a:	0018      	movs	r0, r3
 800a40c:	f7ff fbe4 	bl	8009bd8 <clust2sect>
 800a410:	0002      	movs	r2, r0
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a416:	e012      	b.n	800a43e <dir_next+0x140>
						fs->wflag = 1;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	0018      	movs	r0, r3
 800a422:	f7ff fadf 	bl	80099e4 <sync_window>
 800a426:	1e03      	subs	r3, r0, #0
 800a428:	d001      	beq.n	800a42e <dir_next+0x130>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e02c      	b.n	800a488 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	3301      	adds	r3, #1
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	895b      	ldrh	r3, [r3, #10]
 800a442:	001a      	movs	r2, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	4293      	cmp	r3, r2
 800a448:	d3e6      	bcc.n	800a418 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	1ad2      	subs	r2, r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	0011      	movs	r1, r2
 800a462:	0018      	movs	r0, r3
 800a464:	f7ff fbb8 	bl	8009bd8 <clust2sect>
 800a468:	0002      	movs	r2, r0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3330      	adds	r3, #48	@ 0x30
 800a478:	001a      	movs	r2, r3
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	05db      	lsls	r3, r3, #23
 800a47e:	0ddb      	lsrs	r3, r3, #23
 800a480:	18d2      	adds	r2, r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b006      	add	sp, #24
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a490:	b5b0      	push	{r4, r5, r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a4a0:	2517      	movs	r5, #23
 800a4a2:	197c      	adds	r4, r7, r5
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	f7ff feaa 	bl	800a202 <dir_sdi>
 800a4ae:	0003      	movs	r3, r0
 800a4b0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a4b2:	197b      	adds	r3, r7, r5
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d133      	bne.n	800a522 <dir_alloc+0x92>
		n = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	2517      	movs	r5, #23
 800a4c4:	197c      	adds	r4, r7, r5
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	0011      	movs	r1, r2
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f7ff fad2 	bl	8009a74 <move_window>
 800a4d0:	0003      	movs	r3, r0
 800a4d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a4d4:	197b      	adds	r3, r7, r5
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d121      	bne.n	800a520 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2be5      	cmp	r3, #229	@ 0xe5
 800a4e4:	d004      	beq.n	800a4f0 <dir_alloc+0x60>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	613b      	str	r3, [r7, #16]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d102      	bne.n	800a504 <dir_alloc+0x74>
 800a4fe:	e010      	b.n	800a522 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a500:	2300      	movs	r3, #0
 800a502:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a504:	2517      	movs	r5, #23
 800a506:	197c      	adds	r4, r7, r5
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2101      	movs	r1, #1
 800a50c:	0018      	movs	r0, r3
 800a50e:	f7ff fef6 	bl	800a2fe <dir_next>
 800a512:	0003      	movs	r3, r0
 800a514:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a516:	197b      	adds	r3, r7, r5
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0cf      	beq.n	800a4be <dir_alloc+0x2e>
 800a51e:	e000      	b.n	800a522 <dir_alloc+0x92>
			if (res != FR_OK) break;
 800a520:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a522:	2217      	movs	r2, #23
 800a524:	18bb      	adds	r3, r7, r2
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d102      	bne.n	800a532 <dir_alloc+0xa2>
 800a52c:	18bb      	adds	r3, r7, r2
 800a52e:	2207      	movs	r2, #7
 800a530:	701a      	strb	r2, [r3, #0]
	return res;
 800a532:	2317      	movs	r3, #23
 800a534:	18fb      	adds	r3, r7, r3
 800a536:	781b      	ldrb	r3, [r3, #0]
}
 800a538:	0018      	movs	r0, r3
 800a53a:	46bd      	mov	sp, r7
 800a53c:	b006      	add	sp, #24
 800a53e:	bdb0      	pop	{r4, r5, r7, pc}

0800a540 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	331a      	adds	r3, #26
 800a54e:	0018      	movs	r0, r3
 800a550:	f7fe ffe4 	bl	800951c <ld_word>
 800a554:	0003      	movs	r3, r0
 800a556:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d109      	bne.n	800a574 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	3314      	adds	r3, #20
 800a564:	0018      	movs	r0, r3
 800a566:	f7fe ffd9 	bl	800951c <ld_word>
 800a56a:	0003      	movs	r3, r0
 800a56c:	041b      	lsls	r3, r3, #16
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a574:	68fb      	ldr	r3, [r7, #12]
}
 800a576:	0018      	movs	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	b004      	add	sp, #16
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	331a      	adds	r3, #26
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	b292      	uxth	r2, r2
 800a592:	0011      	movs	r1, r2
 800a594:	0018      	movs	r0, r3
 800a596:	f7fe fffd 	bl	8009594 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d109      	bne.n	800a5b6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	001a      	movs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	0c1b      	lsrs	r3, r3, #16
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	0010      	movs	r0, r2
 800a5b2:	f7fe ffef 	bl	8009594 <st_word>
	}
}
 800a5b6:	46c0      	nop			@ (mov r8, r8)
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	b004      	add	sp, #16
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a5be:	b5b0      	push	{r4, r5, r7, lr}
 800a5c0:	b086      	sub	sp, #24
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a5cc:	2517      	movs	r5, #23
 800a5ce:	197c      	adds	r4, r7, r5
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f7ff fe14 	bl	800a202 <dir_sdi>
 800a5da:	0003      	movs	r3, r0
 800a5dc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800a5de:	197b      	adds	r3, r7, r5
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <dir_find+0x2e>
 800a5e6:	197b      	adds	r3, r7, r5
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	e04c      	b.n	800a686 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	69da      	ldr	r2, [r3, #28]
 800a5f0:	2517      	movs	r5, #23
 800a5f2:	197c      	adds	r4, r7, r5
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	0011      	movs	r1, r2
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7ff fa3b 	bl	8009a74 <move_window>
 800a5fe:	0003      	movs	r3, r0
 800a600:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800a602:	0029      	movs	r1, r5
 800a604:	187b      	adds	r3, r7, r1
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d136      	bne.n	800a67a <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a1a      	ldr	r2, [r3, #32]
 800a610:	200f      	movs	r0, #15
 800a612:	183b      	adds	r3, r7, r0
 800a614:	7812      	ldrb	r2, [r2, #0]
 800a616:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a618:	183b      	adds	r3, r7, r0
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d103      	bne.n	800a628 <dir_find+0x6a>
 800a620:	187b      	adds	r3, r7, r1
 800a622:	2204      	movs	r2, #4
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e02b      	b.n	800a680 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	330b      	adds	r3, #11
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	223f      	movs	r2, #63	@ 0x3f
 800a632:	4013      	ands	r3, r2
 800a634:	b2da      	uxtb	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	330b      	adds	r3, #11
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	001a      	movs	r2, r3
 800a644:	2308      	movs	r3, #8
 800a646:	4013      	ands	r3, r2
 800a648:	d109      	bne.n	800a65e <dir_find+0xa0>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a18      	ldr	r0, [r3, #32]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3324      	adds	r3, #36	@ 0x24
 800a652:	220b      	movs	r2, #11
 800a654:	0019      	movs	r1, r3
 800a656:	f7ff f81d 	bl	8009694 <mem_cmp>
 800a65a:	1e03      	subs	r3, r0, #0
 800a65c:	d00f      	beq.n	800a67e <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a65e:	2517      	movs	r5, #23
 800a660:	197c      	adds	r4, r7, r5
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2100      	movs	r1, #0
 800a666:	0018      	movs	r0, r3
 800a668:	f7ff fe49 	bl	800a2fe <dir_next>
 800a66c:	0003      	movs	r3, r0
 800a66e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800a670:	197b      	adds	r3, r7, r5
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d0b9      	beq.n	800a5ec <dir_find+0x2e>
 800a678:	e002      	b.n	800a680 <dir_find+0xc2>
		if (res != FR_OK) break;
 800a67a:	46c0      	nop			@ (mov r8, r8)
 800a67c:	e000      	b.n	800a680 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a67e:	46c0      	nop			@ (mov r8, r8)

	return res;
 800a680:	2317      	movs	r3, #23
 800a682:	18fb      	adds	r3, r7, r3
 800a684:	781b      	ldrb	r3, [r3, #0]
}
 800a686:	0018      	movs	r0, r3
 800a688:	46bd      	mov	sp, r7
 800a68a:	b006      	add	sp, #24
 800a68c:	bdb0      	pop	{r4, r5, r7, pc}

0800a68e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a68e:	b5b0      	push	{r4, r5, r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a69c:	250f      	movs	r5, #15
 800a69e:	197c      	adds	r4, r7, r5
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7ff fef3 	bl	800a490 <dir_alloc>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a6ae:	197b      	adds	r3, r7, r5
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d11f      	bne.n	800a6f6 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69da      	ldr	r2, [r3, #28]
 800a6ba:	197c      	adds	r4, r7, r5
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	0011      	movs	r1, r2
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f7ff f9d7 	bl	8009a74 <move_window>
 800a6c6:	0003      	movs	r3, r0
 800a6c8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800a6ca:	197b      	adds	r3, r7, r5
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d111      	bne.n	800a6f6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	2100      	movs	r1, #0
 800a6da:	0018      	movs	r0, r3
 800a6dc:	f7fe ffc1 	bl	8009662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a18      	ldr	r0, [r3, #32]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3324      	adds	r3, #36	@ 0x24
 800a6e8:	220b      	movs	r2, #11
 800a6ea:	0019      	movs	r1, r3
 800a6ec:	f7fe ff9a 	bl	8009624 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a6f6:	230f      	movs	r3, #15
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	781b      	ldrb	r3, [r3, #0]
}
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	b004      	add	sp, #16
 800a702:	bdb0      	pop	{r4, r5, r7, pc}

0800a704 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3324      	adds	r3, #36	@ 0x24
 800a718:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	220b      	movs	r2, #11
 800a71e:	2120      	movs	r1, #32
 800a720:	0018      	movs	r0, r3
 800a722:	f7fe ff9e 	bl	8009662 <mem_set>
	si = i = 0; ni = 8;
 800a726:	2300      	movs	r3, #0
 800a728:	613b      	str	r3, [r7, #16]
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	2308      	movs	r3, #8
 800a730:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	61fa      	str	r2, [r7, #28]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	18d2      	adds	r2, r2, r3
 800a73c:	211b      	movs	r1, #27
 800a73e:	187b      	adds	r3, r7, r1
 800a740:	7812      	ldrb	r2, [r2, #0]
 800a742:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a744:	000a      	movs	r2, r1
 800a746:	18bb      	adds	r3, r7, r2
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d800      	bhi.n	800a750 <create_name+0x4c>
 800a74e:	e062      	b.n	800a816 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a750:	18bb      	adds	r3, r7, r2
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b2f      	cmp	r3, #47	@ 0x2f
 800a756:	d007      	beq.n	800a768 <create_name+0x64>
 800a758:	18bb      	adds	r3, r7, r2
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a75e:	d110      	bne.n	800a782 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a760:	e002      	b.n	800a768 <create_name+0x64>
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	3301      	adds	r3, #1
 800a766:	61fb      	str	r3, [r7, #28]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	18d3      	adds	r3, r2, r3
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b2f      	cmp	r3, #47	@ 0x2f
 800a772:	d0f6      	beq.n	800a762 <create_name+0x5e>
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	18d3      	adds	r3, r2, r3
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a77e:	d0f0      	beq.n	800a762 <create_name+0x5e>
			break;
 800a780:	e04a      	b.n	800a818 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a782:	231b      	movs	r3, #27
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b2e      	cmp	r3, #46	@ 0x2e
 800a78a:	d003      	beq.n	800a794 <create_name+0x90>
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d30e      	bcc.n	800a7b2 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b0b      	cmp	r3, #11
 800a798:	d004      	beq.n	800a7a4 <create_name+0xa0>
 800a79a:	231b      	movs	r3, #27
 800a79c:	18fb      	adds	r3, r7, r3
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7a2:	d001      	beq.n	800a7a8 <create_name+0xa4>
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	e054      	b.n	800a852 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	230b      	movs	r3, #11
 800a7ae:	617b      	str	r3, [r7, #20]
			continue;
 800a7b0:	e030      	b.n	800a814 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a7b2:	211b      	movs	r1, #27
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b25b      	sxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da07      	bge.n	800a7ce <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a7be:	187b      	adds	r3, r7, r1
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	3b80      	subs	r3, #128	@ 0x80
 800a7c4:	001a      	movs	r2, r3
 800a7c6:	187b      	adds	r3, r7, r1
 800a7c8:	4924      	ldr	r1, [pc, #144]	@ (800a85c <create_name+0x158>)
 800a7ca:	5c8a      	ldrb	r2, [r1, r2]
 800a7cc:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a7ce:	231b      	movs	r3, #27
 800a7d0:	18fb      	adds	r3, r7, r3
 800a7d2:	781a      	ldrb	r2, [r3, #0]
 800a7d4:	4b22      	ldr	r3, [pc, #136]	@ (800a860 <create_name+0x15c>)
 800a7d6:	0011      	movs	r1, r2
 800a7d8:	0018      	movs	r0, r3
 800a7da:	f7fe ff80 	bl	80096de <chk_chr>
 800a7de:	1e03      	subs	r3, r0, #0
 800a7e0:	d001      	beq.n	800a7e6 <create_name+0xe2>
 800a7e2:	2306      	movs	r3, #6
 800a7e4:	e035      	b.n	800a852 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a7e6:	221b      	movs	r2, #27
 800a7e8:	18bb      	adds	r3, r7, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	2b60      	cmp	r3, #96	@ 0x60
 800a7ee:	d908      	bls.n	800a802 <create_name+0xfe>
 800a7f0:	18bb      	adds	r3, r7, r2
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b7a      	cmp	r3, #122	@ 0x7a
 800a7f6:	d804      	bhi.n	800a802 <create_name+0xfe>
 800a7f8:	18bb      	adds	r3, r7, r2
 800a7fa:	18ba      	adds	r2, r7, r2
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	3a20      	subs	r2, #32
 800a800:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	613a      	str	r2, [r7, #16]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	18d3      	adds	r3, r2, r3
 800a80c:	221b      	movs	r2, #27
 800a80e:	18ba      	adds	r2, r7, r2
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a814:	e78d      	b.n	800a732 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a816:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	18d2      	adds	r2, r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <create_name+0x128>
 800a828:	2306      	movs	r3, #6
 800a82a:	e012      	b.n	800a852 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2be5      	cmp	r3, #229	@ 0xe5
 800a832:	d102      	bne.n	800a83a <create_name+0x136>
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2205      	movs	r2, #5
 800a838:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a83a:	231b      	movs	r3, #27
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b20      	cmp	r3, #32
 800a842:	d801      	bhi.n	800a848 <create_name+0x144>
 800a844:	2204      	movs	r2, #4
 800a846:	e000      	b.n	800a84a <create_name+0x146>
 800a848:	2200      	movs	r2, #0
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	330b      	adds	r3, #11
 800a84e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a850:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a852:	0018      	movs	r0, r3
 800a854:	46bd      	mov	sp, r7
 800a856:	b008      	add	sp, #32
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	08010898 	.word	0x08010898
 800a860:	0801072c 	.word	0x0801072c

0800a864 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a864:	b5b0      	push	{r4, r5, r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a878:	e002      	b.n	800a880 <follow_path+0x1c>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	3301      	adds	r3, #1
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b2f      	cmp	r3, #47	@ 0x2f
 800a886:	d0f8      	beq.n	800a87a <follow_path+0x16>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a88e:	d0f4      	beq.n	800a87a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2200      	movs	r2, #0
 800a894:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b1f      	cmp	r3, #31
 800a89c:	d80d      	bhi.n	800a8ba <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	222f      	movs	r2, #47	@ 0x2f
 800a8a2:	2180      	movs	r1, #128	@ 0x80
 800a8a4:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800a8a6:	2317      	movs	r3, #23
 800a8a8:	18fc      	adds	r4, r7, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f7ff fca7 	bl	800a202 <dir_sdi>
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	7023      	strb	r3, [r4, #0]
 800a8b8:	e052      	b.n	800a960 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8ba:	2517      	movs	r5, #23
 800a8bc:	197c      	adds	r4, r7, r5
 800a8be:	003a      	movs	r2, r7
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	0011      	movs	r1, r2
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f7ff ff1d 	bl	800a704 <create_name>
 800a8ca:	0003      	movs	r3, r0
 800a8cc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a8ce:	197b      	adds	r3, r7, r5
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d13f      	bne.n	800a956 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a8d6:	197c      	adds	r4, r7, r5
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f7ff fe6f 	bl	800a5be <dir_find>
 800a8e0:	0003      	movs	r3, r0
 800a8e2:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800a8e4:	200b      	movs	r0, #11
 800a8e6:	183b      	adds	r3, r7, r0
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	212f      	movs	r1, #47	@ 0x2f
 800a8ec:	5c52      	ldrb	r2, [r2, r1]
 800a8ee:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800a8f0:	197b      	adds	r3, r7, r5
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00c      	beq.n	800a912 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a8f8:	197b      	adds	r3, r7, r5
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d12c      	bne.n	800a95a <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a900:	183b      	adds	r3, r7, r0
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2204      	movs	r2, #4
 800a906:	4013      	ands	r3, r2
 800a908:	d127      	bne.n	800a95a <follow_path+0xf6>
 800a90a:	197b      	adds	r3, r7, r5
 800a90c:	2205      	movs	r2, #5
 800a90e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800a910:	e023      	b.n	800a95a <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a912:	230b      	movs	r3, #11
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2204      	movs	r2, #4
 800a91a:	4013      	ands	r3, r2
 800a91c:	d11f      	bne.n	800a95e <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	799b      	ldrb	r3, [r3, #6]
 800a922:	001a      	movs	r2, r3
 800a924:	2310      	movs	r3, #16
 800a926:	4013      	ands	r3, r2
 800a928:	d104      	bne.n	800a934 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800a92a:	2317      	movs	r3, #23
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	2205      	movs	r2, #5
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e015      	b.n	800a960 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3330      	adds	r3, #48	@ 0x30
 800a938:	001a      	movs	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	05db      	lsls	r3, r3, #23
 800a940:	0ddb      	lsrs	r3, r3, #23
 800a942:	18d2      	adds	r2, r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	0011      	movs	r1, r2
 800a948:	0018      	movs	r0, r3
 800a94a:	f7ff fdf9 	bl	800a540 <ld_clust>
 800a94e:	0002      	movs	r2, r0
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a954:	e7b1      	b.n	800a8ba <follow_path+0x56>
			if (res != FR_OK) break;
 800a956:	46c0      	nop			@ (mov r8, r8)
 800a958:	e002      	b.n	800a960 <follow_path+0xfc>
				break;
 800a95a:	46c0      	nop			@ (mov r8, r8)
 800a95c:	e000      	b.n	800a960 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a95e:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 800a960:	2317      	movs	r3, #23
 800a962:	18fb      	adds	r3, r7, r3
 800a964:	781b      	ldrb	r3, [r3, #0]
}
 800a966:	0018      	movs	r0, r3
 800a968:	46bd      	mov	sp, r7
 800a96a:	b006      	add	sp, #24
 800a96c:	bdb0      	pop	{r4, r5, r7, pc}

0800a96e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a976:	2301      	movs	r3, #1
 800a978:	425b      	negs	r3, r3
 800a97a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d031      	beq.n	800a9e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e002      	b.n	800a992 <get_ldnumber+0x24>
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	3301      	adds	r3, #1
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b20      	cmp	r3, #32
 800a998:	d903      	bls.n	800a9a2 <get_ldnumber+0x34>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a9a0:	d1f4      	bne.n	800a98c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a9a8:	d11c      	bne.n	800a9e4 <get_ldnumber+0x76>
			tp = *path;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	60fa      	str	r2, [r7, #12]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	3b30      	subs	r3, #48	@ 0x30
 800a9ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d80e      	bhi.n	800a9e0 <get_ldnumber+0x72>
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d10a      	bne.n	800a9e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d107      	bne.n	800a9e0 <get_ldnumber+0x72>
					vol = (int)i;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	e002      	b.n	800a9ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a9e8:	693b      	ldr	r3, [r7, #16]
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b006      	add	sp, #24
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	70da      	strb	r2, [r3, #3]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	4252      	negs	r2, r2
 800aa0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	0011      	movs	r1, r2
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7ff f82e 	bl	8009a74 <move_window>
 800aa18:	1e03      	subs	r3, r0, #0
 800aa1a:	d001      	beq.n	800aa20 <check_fs+0x2c>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	e037      	b.n	800aa90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3330      	adds	r3, #48	@ 0x30
 800aa24:	33ff      	adds	r3, #255	@ 0xff
 800aa26:	33ff      	adds	r3, #255	@ 0xff
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7fe fd77 	bl	800951c <ld_word>
 800aa2e:	0003      	movs	r3, r0
 800aa30:	001a      	movs	r2, r3
 800aa32:	4b19      	ldr	r3, [pc, #100]	@ (800aa98 <check_fs+0xa4>)
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d001      	beq.n	800aa3c <check_fs+0x48>
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e029      	b.n	800aa90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2230      	movs	r2, #48	@ 0x30
 800aa40:	5c9b      	ldrb	r3, [r3, r2]
 800aa42:	2be9      	cmp	r3, #233	@ 0xe9
 800aa44:	d009      	beq.n	800aa5a <check_fs+0x66>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2230      	movs	r2, #48	@ 0x30
 800aa4a:	5c9b      	ldrb	r3, [r3, r2]
 800aa4c:	2beb      	cmp	r3, #235	@ 0xeb
 800aa4e:	d11e      	bne.n	800aa8e <check_fs+0x9a>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2232      	movs	r2, #50	@ 0x32
 800aa54:	5c9b      	ldrb	r3, [r3, r2]
 800aa56:	2b90      	cmp	r3, #144	@ 0x90
 800aa58:	d119      	bne.n	800aa8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3330      	adds	r3, #48	@ 0x30
 800aa5e:	3336      	adds	r3, #54	@ 0x36
 800aa60:	0018      	movs	r0, r3
 800aa62:	f7fe fd76 	bl	8009552 <ld_dword>
 800aa66:	0003      	movs	r3, r0
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	0a1b      	lsrs	r3, r3, #8
 800aa6c:	4a0b      	ldr	r2, [pc, #44]	@ (800aa9c <check_fs+0xa8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d101      	bne.n	800aa76 <check_fs+0x82>
 800aa72:	2300      	movs	r3, #0
 800aa74:	e00c      	b.n	800aa90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3330      	adds	r3, #48	@ 0x30
 800aa7a:	3352      	adds	r3, #82	@ 0x52
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f7fe fd68 	bl	8009552 <ld_dword>
 800aa82:	0003      	movs	r3, r0
 800aa84:	4a06      	ldr	r2, [pc, #24]	@ (800aaa0 <check_fs+0xac>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d101      	bne.n	800aa8e <check_fs+0x9a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e000      	b.n	800aa90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aa8e:	2302      	movs	r3, #2
}
 800aa90:	0018      	movs	r0, r3
 800aa92:	46bd      	mov	sp, r7
 800aa94:	b002      	add	sp, #8
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0000aa55 	.word	0x0000aa55
 800aa9c:	00544146 	.word	0x00544146
 800aaa0:	33544146 	.word	0x33544146

0800aaa4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aaa4:	b5b0      	push	{r4, r5, r7, lr}
 800aaa6:	b096      	sub	sp, #88	@ 0x58
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	1dfb      	adds	r3, r7, #7
 800aab0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	0018      	movs	r0, r3
 800aabc:	f7ff ff57 	bl	800a96e <get_ldnumber>
 800aac0:	0003      	movs	r3, r0
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	da01      	bge.n	800aace <find_volume+0x2a>
 800aaca:	230b      	movs	r3, #11
 800aacc:	e24b      	b.n	800af66 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aace:	4bcc      	ldr	r3, [pc, #816]	@ (800ae00 <find_volume+0x35c>)
 800aad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	58d3      	ldr	r3, [r2, r3]
 800aad6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <find_volume+0x3e>
 800aade:	230c      	movs	r3, #12
 800aae0:	e241      	b.n	800af66 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aae6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aae8:	1dfb      	adds	r3, r7, #7
 800aaea:	1dfa      	adds	r2, r7, #7
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	2101      	movs	r1, #1
 800aaf0:	438a      	bics	r2, r1
 800aaf2:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01b      	beq.n	800ab34 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	2537      	movs	r5, #55	@ 0x37
 800ab02:	197c      	adds	r4, r7, r5
 800ab04:	0018      	movs	r0, r3
 800ab06:	f7fe fc3f 	bl	8009388 <disk_status>
 800ab0a:	0003      	movs	r3, r0
 800ab0c:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab0e:	0029      	movs	r1, r5
 800ab10:	187b      	adds	r3, r7, r1
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2201      	movs	r2, #1
 800ab16:	4013      	ands	r3, r2
 800ab18:	d10c      	bne.n	800ab34 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab1a:	1dfb      	adds	r3, r7, #7
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d006      	beq.n	800ab30 <find_volume+0x8c>
 800ab22:	187b      	adds	r3, r7, r1
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2204      	movs	r2, #4
 800ab28:	4013      	ands	r3, r2
 800ab2a:	d001      	beq.n	800ab30 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800ab2c:	230a      	movs	r3, #10
 800ab2e:	e21a      	b.n	800af66 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 800ab30:	2300      	movs	r3, #0
 800ab32:	e218      	b.n	800af66 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ab42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2537      	movs	r5, #55	@ 0x37
 800ab48:	197c      	adds	r4, r7, r5
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	f7fe fc3e 	bl	80093cc <disk_initialize>
 800ab50:	0003      	movs	r3, r0
 800ab52:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ab54:	197b      	adds	r3, r7, r5
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	d001      	beq.n	800ab62 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e201      	b.n	800af66 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ab62:	1dfb      	adds	r3, r7, #7
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <find_volume+0xd6>
 800ab6a:	2337      	movs	r3, #55	@ 0x37
 800ab6c:	18fb      	adds	r3, r7, r3
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2204      	movs	r2, #4
 800ab72:	4013      	ands	r3, r2
 800ab74:	d001      	beq.n	800ab7a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800ab76:	230a      	movs	r3, #10
 800ab78:	e1f5      	b.n	800af66 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab7e:	2557      	movs	r5, #87	@ 0x57
 800ab80:	197c      	adds	r4, r7, r5
 800ab82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	0011      	movs	r1, r2
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f7ff ff33 	bl	800a9f4 <check_fs>
 800ab8e:	0003      	movs	r3, r0
 800ab90:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab92:	197b      	adds	r3, r7, r5
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d14b      	bne.n	800ac32 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab9e:	e01d      	b.n	800abdc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	3330      	adds	r3, #48	@ 0x30
 800aba4:	001a      	movs	r2, r3
 800aba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aba8:	011b      	lsls	r3, r3, #4
 800abaa:	33bf      	adds	r3, #191	@ 0xbf
 800abac:	33ff      	adds	r3, #255	@ 0xff
 800abae:	18d3      	adds	r3, r2, r3
 800abb0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	3304      	adds	r3, #4
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d006      	beq.n	800abca <find_volume+0x126>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	3308      	adds	r3, #8
 800abc0:	0018      	movs	r0, r3
 800abc2:	f7fe fcc6 	bl	8009552 <ld_dword>
 800abc6:	0003      	movs	r3, r0
 800abc8:	e000      	b.n	800abcc <find_volume+0x128>
 800abca:	2300      	movs	r3, #0
 800abcc:	2214      	movs	r2, #20
 800abce:	18ba      	adds	r2, r7, r2
 800abd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abd2:	0089      	lsls	r1, r1, #2
 800abd4:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800abd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abd8:	3301      	adds	r3, #1
 800abda:	643b      	str	r3, [r7, #64]	@ 0x40
 800abdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d9de      	bls.n	800aba0 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800abe2:	2300      	movs	r3, #0
 800abe4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800abe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <find_volume+0x14e>
 800abec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abee:	3b01      	subs	r3, #1
 800abf0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800abf2:	2314      	movs	r3, #20
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	58d3      	ldr	r3, [r2, r3]
 800abfc:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800abfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d008      	beq.n	800ac16 <find_volume+0x172>
 800ac04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac08:	0011      	movs	r1, r2
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f7ff fef2 	bl	800a9f4 <check_fs>
 800ac10:	0003      	movs	r3, r0
 800ac12:	001a      	movs	r2, r3
 800ac14:	e000      	b.n	800ac18 <find_volume+0x174>
 800ac16:	2203      	movs	r2, #3
 800ac18:	2157      	movs	r1, #87	@ 0x57
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ac1e:	187b      	adds	r3, r7, r1
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d905      	bls.n	800ac32 <find_volume+0x18e>
 800ac26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac28:	3301      	adds	r3, #1
 800ac2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d9df      	bls.n	800abf2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ac32:	2357      	movs	r3, #87	@ 0x57
 800ac34:	18fb      	adds	r3, r7, r3
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d101      	bne.n	800ac40 <find_volume+0x19c>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e192      	b.n	800af66 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ac40:	2357      	movs	r3, #87	@ 0x57
 800ac42:	18fb      	adds	r3, r7, r3
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d901      	bls.n	800ac4e <find_volume+0x1aa>
 800ac4a:	230d      	movs	r3, #13
 800ac4c:	e18b      	b.n	800af66 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac50:	3330      	adds	r3, #48	@ 0x30
 800ac52:	330b      	adds	r3, #11
 800ac54:	0018      	movs	r0, r3
 800ac56:	f7fe fc61 	bl	800951c <ld_word>
 800ac5a:	0003      	movs	r3, r0
 800ac5c:	001a      	movs	r2, r3
 800ac5e:	2380      	movs	r3, #128	@ 0x80
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d001      	beq.n	800ac6a <find_volume+0x1c6>
 800ac66:	230d      	movs	r3, #13
 800ac68:	e17d      	b.n	800af66 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	3330      	adds	r3, #48	@ 0x30
 800ac6e:	3316      	adds	r3, #22
 800ac70:	0018      	movs	r0, r3
 800ac72:	f7fe fc53 	bl	800951c <ld_word>
 800ac76:	0003      	movs	r3, r0
 800ac78:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ac7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d107      	bne.n	800ac90 <find_volume+0x1ec>
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	3330      	adds	r3, #48	@ 0x30
 800ac84:	3324      	adds	r3, #36	@ 0x24
 800ac86:	0018      	movs	r0, r3
 800ac88:	f7fe fc63 	bl	8009552 <ld_dword>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac94:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	2240      	movs	r2, #64	@ 0x40
 800ac9a:	5c9a      	ldrb	r2, [r3, r2]
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	789b      	ldrb	r3, [r3, #2]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d005      	beq.n	800acb4 <find_volume+0x210>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	789b      	ldrb	r3, [r3, #2]
 800acac:	2b02      	cmp	r3, #2
 800acae:	d001      	beq.n	800acb4 <find_volume+0x210>
 800acb0:	230d      	movs	r3, #13
 800acb2:	e158      	b.n	800af66 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	789b      	ldrb	r3, [r3, #2]
 800acb8:	001a      	movs	r2, r3
 800acba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acbc:	4353      	muls	r3, r2
 800acbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc2:	223d      	movs	r2, #61	@ 0x3d
 800acc4:	5c9b      	ldrb	r3, [r3, r2]
 800acc6:	001a      	movs	r2, r3
 800acc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acca:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	895b      	ldrh	r3, [r3, #10]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d007      	beq.n	800ace4 <find_volume+0x240>
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	895b      	ldrh	r3, [r3, #10]
 800acd8:	001a      	movs	r2, r3
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	895b      	ldrh	r3, [r3, #10]
 800acde:	3b01      	subs	r3, #1
 800ace0:	4013      	ands	r3, r2
 800ace2:	d001      	beq.n	800ace8 <find_volume+0x244>
 800ace4:	230d      	movs	r3, #13
 800ace6:	e13e      	b.n	800af66 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	3330      	adds	r3, #48	@ 0x30
 800acec:	3311      	adds	r3, #17
 800acee:	0018      	movs	r0, r3
 800acf0:	f7fe fc14 	bl	800951c <ld_word>
 800acf4:	0003      	movs	r3, r0
 800acf6:	001a      	movs	r2, r3
 800acf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	891b      	ldrh	r3, [r3, #8]
 800ad00:	220f      	movs	r2, #15
 800ad02:	4013      	ands	r3, r2
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <find_volume+0x26a>
 800ad0a:	230d      	movs	r3, #13
 800ad0c:	e12b      	b.n	800af66 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	3330      	adds	r3, #48	@ 0x30
 800ad12:	3313      	adds	r3, #19
 800ad14:	0018      	movs	r0, r3
 800ad16:	f7fe fc01 	bl	800951c <ld_word>
 800ad1a:	0003      	movs	r3, r0
 800ad1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ad1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d107      	bne.n	800ad34 <find_volume+0x290>
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	3330      	adds	r3, #48	@ 0x30
 800ad28:	3320      	adds	r3, #32
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f7fe fc11 	bl	8009552 <ld_dword>
 800ad30:	0003      	movs	r3, r0
 800ad32:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	3330      	adds	r3, #48	@ 0x30
 800ad38:	330e      	adds	r3, #14
 800ad3a:	252e      	movs	r5, #46	@ 0x2e
 800ad3c:	197c      	adds	r4, r7, r5
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f7fe fbec 	bl	800951c <ld_word>
 800ad44:	0003      	movs	r3, r0
 800ad46:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ad48:	197b      	adds	r3, r7, r5
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <find_volume+0x2b0>
 800ad50:	230d      	movs	r3, #13
 800ad52:	e108      	b.n	800af66 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ad54:	232e      	movs	r3, #46	@ 0x2e
 800ad56:	18fb      	adds	r3, r7, r3
 800ad58:	881a      	ldrh	r2, [r3, #0]
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5c:	18d3      	adds	r3, r2, r3
 800ad5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad60:	8912      	ldrh	r2, [r2, #8]
 800ad62:	0912      	lsrs	r2, r2, #4
 800ad64:	b292      	uxth	r2, r2
 800ad66:	189b      	adds	r3, r3, r2
 800ad68:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ad6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d201      	bcs.n	800ad76 <find_volume+0x2d2>
 800ad72:	230d      	movs	r3, #13
 800ad74:	e0f7      	b.n	800af66 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ad76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7a:	1ad2      	subs	r2, r2, r3
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	895b      	ldrh	r3, [r3, #10]
 800ad80:	0019      	movs	r1, r3
 800ad82:	0010      	movs	r0, r2
 800ad84:	f7f5 f9dc 	bl	8000140 <__udivsi3>
 800ad88:	0003      	movs	r3, r0
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <find_volume+0x2f2>
 800ad92:	230d      	movs	r3, #13
 800ad94:	e0e7      	b.n	800af66 <find_volume+0x4c2>
		fmt = FS_FAT32;
 800ad96:	2157      	movs	r1, #87	@ 0x57
 800ad98:	187b      	adds	r3, r7, r1
 800ad9a:	2203      	movs	r2, #3
 800ad9c:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada0:	4a18      	ldr	r2, [pc, #96]	@ (800ae04 <find_volume+0x360>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d802      	bhi.n	800adac <find_volume+0x308>
 800ada6:	187b      	adds	r3, r7, r1
 800ada8:	2202      	movs	r2, #2
 800adaa:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <find_volume+0x364>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d803      	bhi.n	800adbc <find_volume+0x318>
 800adb4:	2357      	movs	r3, #87	@ 0x57
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	1c9a      	adds	r2, r3, #2
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adc8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800adca:	232e      	movs	r3, #46	@ 0x2e
 800adcc:	18fb      	adds	r3, r7, r3
 800adce:	881a      	ldrh	r2, [r3, #0]
 800add0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add2:	18d2      	adds	r2, r2, r3
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800add8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800addc:	18d2      	adds	r2, r2, r3
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ade2:	2357      	movs	r3, #87	@ 0x57
 800ade4:	18fb      	adds	r3, r7, r3
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d123      	bne.n	800ae34 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	3330      	adds	r3, #48	@ 0x30
 800adf0:	332a      	adds	r3, #42	@ 0x2a
 800adf2:	0018      	movs	r0, r3
 800adf4:	f7fe fb92 	bl	800951c <ld_word>
 800adf8:	1e03      	subs	r3, r0, #0
 800adfa:	d007      	beq.n	800ae0c <find_volume+0x368>
 800adfc:	230d      	movs	r3, #13
 800adfe:	e0b2      	b.n	800af66 <find_volume+0x4c2>
 800ae00:	20000a14 	.word	0x20000a14
 800ae04:	0000fff5 	.word	0x0000fff5
 800ae08:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	891b      	ldrh	r3, [r3, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <find_volume+0x374>
 800ae14:	230d      	movs	r3, #13
 800ae16:	e0a6      	b.n	800af66 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	3330      	adds	r3, #48	@ 0x30
 800ae1c:	332c      	adds	r3, #44	@ 0x2c
 800ae1e:	0018      	movs	r0, r3
 800ae20:	f7fe fb97 	bl	8009552 <ld_dword>
 800ae24:	0002      	movs	r2, r0
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae32:	e020      	b.n	800ae76 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	891b      	ldrh	r3, [r3, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <find_volume+0x39c>
 800ae3c:	230d      	movs	r3, #13
 800ae3e:	e092      	b.n	800af66 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae46:	18d2      	adds	r2, r2, r3
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ae4c:	2357      	movs	r3, #87	@ 0x57
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d103      	bne.n	800ae5e <find_volume+0x3ba>
 800ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	e00a      	b.n	800ae74 <find_volume+0x3d0>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	695a      	ldr	r2, [r3, #20]
 800ae62:	0013      	movs	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	085a      	lsrs	r2, r3, #1
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	2101      	movs	r1, #1
 800ae70:	400b      	ands	r3, r1
 800ae72:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ae74:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	699a      	ldr	r2, [r3, #24]
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae7c:	493c      	ldr	r1, [pc, #240]	@ (800af70 <find_volume+0x4cc>)
 800ae7e:	468c      	mov	ip, r1
 800ae80:	4463      	add	r3, ip
 800ae82:	0a5b      	lsrs	r3, r3, #9
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d201      	bcs.n	800ae8c <find_volume+0x3e8>
 800ae88:	230d      	movs	r3, #13
 800ae8a:	e06c      	b.n	800af66 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4252      	negs	r2, r2
 800ae92:	611a      	str	r2, [r3, #16]
 800ae94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae96:	691a      	ldr	r2, [r3, #16]
 800ae98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9e:	2280      	movs	r2, #128	@ 0x80
 800aea0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aea2:	2357      	movs	r3, #87	@ 0x57
 800aea4:	18fb      	adds	r3, r7, r3
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d148      	bne.n	800af3e <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	3330      	adds	r3, #48	@ 0x30
 800aeb0:	3330      	adds	r3, #48	@ 0x30
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f7fe fb32 	bl	800951c <ld_word>
 800aeb8:	0003      	movs	r3, r0
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d13f      	bne.n	800af3e <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec4:	0011      	movs	r1, r2
 800aec6:	0018      	movs	r0, r3
 800aec8:	f7fe fdd4 	bl	8009a74 <move_window>
 800aecc:	1e03      	subs	r3, r0, #0
 800aece:	d136      	bne.n	800af3e <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 800aed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed2:	2200      	movs	r2, #0
 800aed4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed8:	3330      	adds	r3, #48	@ 0x30
 800aeda:	33ff      	adds	r3, #255	@ 0xff
 800aedc:	33ff      	adds	r3, #255	@ 0xff
 800aede:	0018      	movs	r0, r3
 800aee0:	f7fe fb1c 	bl	800951c <ld_word>
 800aee4:	0003      	movs	r3, r0
 800aee6:	001a      	movs	r2, r3
 800aee8:	4b22      	ldr	r3, [pc, #136]	@ (800af74 <find_volume+0x4d0>)
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d127      	bne.n	800af3e <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef0:	3330      	adds	r3, #48	@ 0x30
 800aef2:	0018      	movs	r0, r3
 800aef4:	f7fe fb2d 	bl	8009552 <ld_dword>
 800aef8:	0003      	movs	r3, r0
 800aefa:	4a1f      	ldr	r2, [pc, #124]	@ (800af78 <find_volume+0x4d4>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d11e      	bne.n	800af3e <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	3330      	adds	r3, #48	@ 0x30
 800af04:	33e5      	adds	r3, #229	@ 0xe5
 800af06:	33ff      	adds	r3, #255	@ 0xff
 800af08:	0018      	movs	r0, r3
 800af0a:	f7fe fb22 	bl	8009552 <ld_dword>
 800af0e:	0003      	movs	r3, r0
 800af10:	4a1a      	ldr	r2, [pc, #104]	@ (800af7c <find_volume+0x4d8>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d113      	bne.n	800af3e <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	3330      	adds	r3, #48	@ 0x30
 800af1a:	33e9      	adds	r3, #233	@ 0xe9
 800af1c:	33ff      	adds	r3, #255	@ 0xff
 800af1e:	0018      	movs	r0, r3
 800af20:	f7fe fb17 	bl	8009552 <ld_dword>
 800af24:	0002      	movs	r2, r0
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	3330      	adds	r3, #48	@ 0x30
 800af2e:	33ed      	adds	r3, #237	@ 0xed
 800af30:	33ff      	adds	r3, #255	@ 0xff
 800af32:	0018      	movs	r0, r3
 800af34:	f7fe fb0d 	bl	8009552 <ld_dword>
 800af38:	0002      	movs	r2, r0
 800af3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800af3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af40:	2257      	movs	r2, #87	@ 0x57
 800af42:	18ba      	adds	r2, r7, r2
 800af44:	7812      	ldrb	r2, [r2, #0]
 800af46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800af48:	4b0d      	ldr	r3, [pc, #52]	@ (800af80 <find_volume+0x4dc>)
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	b29a      	uxth	r2, r3
 800af50:	4b0b      	ldr	r3, [pc, #44]	@ (800af80 <find_volume+0x4dc>)
 800af52:	801a      	strh	r2, [r3, #0]
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <find_volume+0x4dc>)
 800af56:	881a      	ldrh	r2, [r3, #0]
 800af58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800af5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5e:	0018      	movs	r0, r3
 800af60:	f7fe fd20 	bl	80099a4 <clear_lock>
#endif
	return FR_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	0018      	movs	r0, r3
 800af68:	46bd      	mov	sp, r7
 800af6a:	b016      	add	sp, #88	@ 0x58
 800af6c:	bdb0      	pop	{r4, r5, r7, pc}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	000001ff 	.word	0x000001ff
 800af74:	0000aa55 	.word	0x0000aa55
 800af78:	41615252 	.word	0x41615252
 800af7c:	61417272 	.word	0x61417272
 800af80:	20000a18 	.word	0x20000a18

0800af84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800af84:	b590      	push	{r4, r7, lr}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800af8e:	240f      	movs	r4, #15
 800af90:	193b      	adds	r3, r7, r4
 800af92:	2209      	movs	r2, #9
 800af94:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01d      	beq.n	800afd8 <validate+0x54>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d019      	beq.n	800afd8 <validate+0x54>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d014      	beq.n	800afd8 <validate+0x54>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	889a      	ldrh	r2, [r3, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	88db      	ldrh	r3, [r3, #6]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d10d      	bne.n	800afd8 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	785b      	ldrb	r3, [r3, #1]
 800afc2:	0018      	movs	r0, r3
 800afc4:	f7fe f9e0 	bl	8009388 <disk_status>
 800afc8:	0003      	movs	r3, r0
 800afca:	001a      	movs	r2, r3
 800afcc:	2301      	movs	r3, #1
 800afce:	4013      	ands	r3, r2
 800afd0:	d102      	bne.n	800afd8 <validate+0x54>
			res = FR_OK;
 800afd2:	193b      	adds	r3, r7, r4
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800afd8:	230f      	movs	r3, #15
 800afda:	18fb      	adds	r3, r7, r3
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <validate+0x64>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	e000      	b.n	800afea <validate+0x66>
 800afe8:	2200      	movs	r2, #0
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	601a      	str	r2, [r3, #0]
	return res;
 800afee:	230f      	movs	r3, #15
 800aff0:	18fb      	adds	r3, r7, r3
 800aff2:	781b      	ldrb	r3, [r3, #0]
}
 800aff4:	0018      	movs	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b005      	add	sp, #20
 800affa:	bd90      	pop	{r4, r7, pc}

0800affc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800affc:	b5b0      	push	{r4, r5, r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	1dfb      	adds	r3, r7, #7
 800b008:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b00e:	2310      	movs	r3, #16
 800b010:	18fb      	adds	r3, r7, r3
 800b012:	0018      	movs	r0, r3
 800b014:	f7ff fcab 	bl	800a96e <get_ldnumber>
 800b018:	0003      	movs	r3, r0
 800b01a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	da01      	bge.n	800b026 <f_mount+0x2a>
 800b022:	230b      	movs	r3, #11
 800b024:	e030      	b.n	800b088 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b026:	4b1a      	ldr	r3, [pc, #104]	@ (800b090 <f_mount+0x94>)
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	0092      	lsls	r2, r2, #2
 800b02c:	58d3      	ldr	r3, [r2, r3]
 800b02e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d006      	beq.n	800b044 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	0018      	movs	r0, r3
 800b03a:	f7fe fcb3 	bl	80099a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	2200      	movs	r2, #0
 800b042:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b050:	68f9      	ldr	r1, [r7, #12]
 800b052:	4b0f      	ldr	r3, [pc, #60]	@ (800b090 <f_mount+0x94>)
 800b054:	69fa      	ldr	r2, [r7, #28]
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <f_mount+0x6c>
 800b060:	1dfb      	adds	r3, r7, #7
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d001      	beq.n	800b06c <f_mount+0x70>
 800b068:	2300      	movs	r3, #0
 800b06a:	e00d      	b.n	800b088 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b06c:	2517      	movs	r5, #23
 800b06e:	197c      	adds	r4, r7, r5
 800b070:	230c      	movs	r3, #12
 800b072:	18f9      	adds	r1, r7, r3
 800b074:	2308      	movs	r3, #8
 800b076:	18fb      	adds	r3, r7, r3
 800b078:	2200      	movs	r2, #0
 800b07a:	0018      	movs	r0, r3
 800b07c:	f7ff fd12 	bl	800aaa4 <find_volume>
 800b080:	0003      	movs	r3, r0
 800b082:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800b084:	197b      	adds	r3, r7, r5
 800b086:	781b      	ldrb	r3, [r3, #0]
}
 800b088:	0018      	movs	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b008      	add	sp, #32
 800b08e:	bdb0      	pop	{r4, r5, r7, pc}
 800b090:	20000a14 	.word	0x20000a14

0800b094 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b096:	b099      	sub	sp, #100	@ 0x64
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	1dfb      	adds	r3, r7, #7
 800b0a0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <f_open+0x18>
 800b0a8:	2309      	movs	r3, #9
 800b0aa:	e1e3      	b.n	800b474 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b0ac:	1dfb      	adds	r3, r7, #7
 800b0ae:	1dfa      	adds	r2, r7, #7
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	213f      	movs	r1, #63	@ 0x3f
 800b0b4:	400a      	ands	r2, r1
 800b0b6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b0b8:	255f      	movs	r5, #95	@ 0x5f
 800b0ba:	197c      	adds	r4, r7, r5
 800b0bc:	1dfb      	adds	r3, r7, #7
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	18f9      	adds	r1, r7, r3
 800b0c4:	2308      	movs	r3, #8
 800b0c6:	18fb      	adds	r3, r7, r3
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	f7ff fceb 	bl	800aaa4 <find_volume>
 800b0ce:	0003      	movs	r3, r0
 800b0d0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b0d2:	197b      	adds	r3, r7, r5
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d000      	beq.n	800b0dc <f_open+0x48>
 800b0da:	e1c0      	b.n	800b45e <f_open+0x3ca>
		dj.obj.fs = fs;
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	2614      	movs	r6, #20
 800b0e0:	19bb      	adds	r3, r7, r6
 800b0e2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	197c      	adds	r4, r7, r5
 800b0e8:	19bb      	adds	r3, r7, r6
 800b0ea:	0011      	movs	r1, r2
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	f7ff fbb9 	bl	800a864 <follow_path>
 800b0f2:	0003      	movs	r3, r0
 800b0f4:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b0f6:	0029      	movs	r1, r5
 800b0f8:	197b      	adds	r3, r7, r5
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11b      	bne.n	800b138 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b100:	19bb      	adds	r3, r7, r6
 800b102:	222f      	movs	r2, #47	@ 0x2f
 800b104:	5c9b      	ldrb	r3, [r3, r2]
 800b106:	b25b      	sxtb	r3, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da03      	bge.n	800b114 <f_open+0x80>
				res = FR_INVALID_NAME;
 800b10c:	187b      	adds	r3, r7, r1
 800b10e:	2206      	movs	r2, #6
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e011      	b.n	800b138 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b114:	1dfb      	adds	r3, r7, #7
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2201      	movs	r2, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	419b      	sbcs	r3, r3
 800b11e:	425b      	negs	r3, r3
 800b120:	b2db      	uxtb	r3, r3
 800b122:	001a      	movs	r2, r3
 800b124:	235f      	movs	r3, #95	@ 0x5f
 800b126:	18fc      	adds	r4, r7, r3
 800b128:	2314      	movs	r3, #20
 800b12a:	18fb      	adds	r3, r7, r3
 800b12c:	0011      	movs	r1, r2
 800b12e:	0018      	movs	r0, r3
 800b130:	f7fe faee 	bl	8009710 <chk_lock>
 800b134:	0003      	movs	r3, r0
 800b136:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b138:	1dfb      	adds	r3, r7, #7
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	221c      	movs	r2, #28
 800b13e:	4013      	ands	r3, r2
 800b140:	d100      	bne.n	800b144 <f_open+0xb0>
 800b142:	e096      	b.n	800b272 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800b144:	225f      	movs	r2, #95	@ 0x5f
 800b146:	18bb      	adds	r3, r7, r2
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01a      	beq.n	800b184 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b14e:	18bb      	adds	r3, r7, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b04      	cmp	r3, #4
 800b154:	d10f      	bne.n	800b176 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b156:	f7fe fb33 	bl	80097c0 <enq_lock>
 800b15a:	1e03      	subs	r3, r0, #0
 800b15c:	d007      	beq.n	800b16e <f_open+0xda>
 800b15e:	2314      	movs	r3, #20
 800b160:	18fb      	adds	r3, r7, r3
 800b162:	0018      	movs	r0, r3
 800b164:	f7ff fa93 	bl	800a68e <dir_register>
 800b168:	0003      	movs	r3, r0
 800b16a:	001a      	movs	r2, r3
 800b16c:	e000      	b.n	800b170 <f_open+0xdc>
 800b16e:	2212      	movs	r2, #18
 800b170:	235f      	movs	r3, #95	@ 0x5f
 800b172:	18fb      	adds	r3, r7, r3
 800b174:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b176:	1dfb      	adds	r3, r7, #7
 800b178:	1dfa      	adds	r2, r7, #7
 800b17a:	7812      	ldrb	r2, [r2, #0]
 800b17c:	2108      	movs	r1, #8
 800b17e:	430a      	orrs	r2, r1
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	e014      	b.n	800b1ae <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b184:	2314      	movs	r3, #20
 800b186:	18fb      	adds	r3, r7, r3
 800b188:	799b      	ldrb	r3, [r3, #6]
 800b18a:	001a      	movs	r2, r3
 800b18c:	2311      	movs	r3, #17
 800b18e:	4013      	ands	r3, r2
 800b190:	d004      	beq.n	800b19c <f_open+0x108>
					res = FR_DENIED;
 800b192:	235f      	movs	r3, #95	@ 0x5f
 800b194:	18fb      	adds	r3, r7, r3
 800b196:	2207      	movs	r2, #7
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	e008      	b.n	800b1ae <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b19c:	1dfb      	adds	r3, r7, #7
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d003      	beq.n	800b1ae <f_open+0x11a>
 800b1a6:	235f      	movs	r3, #95	@ 0x5f
 800b1a8:	18fb      	adds	r3, r7, r3
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b1ae:	245f      	movs	r4, #95	@ 0x5f
 800b1b0:	193b      	adds	r3, r7, r4
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d000      	beq.n	800b1ba <f_open+0x126>
 800b1b8:	e07b      	b.n	800b2b2 <f_open+0x21e>
 800b1ba:	1dfb      	adds	r3, r7, #7
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2208      	movs	r2, #8
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <f_open+0x132>
 800b1c4:	e075      	b.n	800b2b2 <f_open+0x21e>
				dw = GET_FATTIME();
 800b1c6:	f7fd fb03 	bl	80087d0 <get_fattime>
 800b1ca:	0003      	movs	r3, r0
 800b1cc:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b1ce:	2514      	movs	r5, #20
 800b1d0:	197b      	adds	r3, r7, r5
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	330e      	adds	r3, #14
 800b1d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1d8:	0011      	movs	r1, r2
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f7fe f9f8 	bl	80095d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b1e0:	197b      	adds	r3, r7, r5
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	3316      	adds	r3, #22
 800b1e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7fe f9f0 	bl	80095d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b1f0:	197b      	adds	r3, r7, r5
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	330b      	adds	r3, #11
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	197b      	adds	r3, r7, r5
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	0019      	movs	r1, r3
 800b202:	0010      	movs	r0, r2
 800b204:	f7ff f99c 	bl	800a540 <ld_clust>
 800b208:	0003      	movs	r3, r0
 800b20a:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b20c:	6938      	ldr	r0, [r7, #16]
 800b20e:	197b      	adds	r3, r7, r5
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	2200      	movs	r2, #0
 800b214:	0019      	movs	r1, r3
 800b216:	f7ff f9b2 	bl	800a57e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b21a:	197b      	adds	r3, r7, r5
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	331c      	adds	r3, #28
 800b220:	2100      	movs	r1, #0
 800b222:	0018      	movs	r0, r3
 800b224:	f7fe f9d4 	bl	80095d0 <st_dword>
					fs->wflag = 1;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2201      	movs	r2, #1
 800b22c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d03e      	beq.n	800b2b2 <f_open+0x21e>
						dw = fs->winsect;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b23a:	0026      	movs	r6, r4
 800b23c:	193c      	adds	r4, r7, r4
 800b23e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b240:	197b      	adds	r3, r7, r5
 800b242:	2200      	movs	r2, #0
 800b244:	0018      	movs	r0, r3
 800b246:	f7fe fe8e 	bl	8009f66 <remove_chain>
 800b24a:	0003      	movs	r3, r0
 800b24c:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800b24e:	19bb      	adds	r3, r7, r6
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d12d      	bne.n	800b2b2 <f_open+0x21e>
							res = move_window(fs, dw);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	19bc      	adds	r4, r7, r6
 800b25a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b25c:	0011      	movs	r1, r2
 800b25e:	0018      	movs	r0, r3
 800b260:	f7fe fc08 	bl	8009a74 <move_window>
 800b264:	0003      	movs	r3, r0
 800b266:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b26c:	3a01      	subs	r2, #1
 800b26e:	60da      	str	r2, [r3, #12]
 800b270:	e01f      	b.n	800b2b2 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b272:	215f      	movs	r1, #95	@ 0x5f
 800b274:	187b      	adds	r3, r7, r1
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d11a      	bne.n	800b2b2 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b27c:	2314      	movs	r3, #20
 800b27e:	18fb      	adds	r3, r7, r3
 800b280:	799b      	ldrb	r3, [r3, #6]
 800b282:	001a      	movs	r2, r3
 800b284:	2310      	movs	r3, #16
 800b286:	4013      	ands	r3, r2
 800b288:	d003      	beq.n	800b292 <f_open+0x1fe>
					res = FR_NO_FILE;
 800b28a:	187b      	adds	r3, r7, r1
 800b28c:	2204      	movs	r2, #4
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	e00f      	b.n	800b2b2 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b292:	1dfb      	adds	r3, r7, #7
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2202      	movs	r2, #2
 800b298:	4013      	ands	r3, r2
 800b29a:	d00a      	beq.n	800b2b2 <f_open+0x21e>
 800b29c:	2314      	movs	r3, #20
 800b29e:	18fb      	adds	r3, r7, r3
 800b2a0:	799b      	ldrb	r3, [r3, #6]
 800b2a2:	001a      	movs	r2, r3
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	d003      	beq.n	800b2b2 <f_open+0x21e>
						res = FR_DENIED;
 800b2aa:	235f      	movs	r3, #95	@ 0x5f
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	2207      	movs	r2, #7
 800b2b0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800b2b2:	235f      	movs	r3, #95	@ 0x5f
 800b2b4:	18fb      	adds	r3, r7, r3
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d12b      	bne.n	800b314 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b2bc:	1dfb      	adds	r3, r7, #7
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	d005      	beq.n	800b2d2 <f_open+0x23e>
				mode |= FA_MODIFIED;
 800b2c6:	1dfb      	adds	r3, r7, #7
 800b2c8:	1dfa      	adds	r2, r7, #7
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	2140      	movs	r1, #64	@ 0x40
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b2da:	2114      	movs	r1, #20
 800b2dc:	187b      	adds	r3, r7, r1
 800b2de:	6a1a      	ldr	r2, [r3, #32]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2e4:	1dfb      	adds	r3, r7, #7
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	419b      	sbcs	r3, r3
 800b2ee:	425b      	negs	r3, r3
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	001a      	movs	r2, r3
 800b2f4:	187b      	adds	r3, r7, r1
 800b2f6:	0011      	movs	r1, r2
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f7fe fa7f 	bl	80097fc <inc_lock>
 800b2fe:	0002      	movs	r2, r0
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d103      	bne.n	800b314 <f_open+0x280>
 800b30c:	235f      	movs	r3, #95	@ 0x5f
 800b30e:	18fb      	adds	r3, r7, r3
 800b310:	2202      	movs	r2, #2
 800b312:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b314:	235f      	movs	r3, #95	@ 0x5f
 800b316:	18fb      	adds	r3, r7, r3
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d000      	beq.n	800b320 <f_open+0x28c>
 800b31e:	e09e      	b.n	800b45e <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	2414      	movs	r4, #20
 800b324:	193b      	adds	r3, r7, r4
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	0019      	movs	r1, r3
 800b32a:	0010      	movs	r0, r2
 800b32c:	f7ff f908 	bl	800a540 <ld_clust>
 800b330:	0002      	movs	r2, r0
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b336:	193b      	adds	r3, r7, r4
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	331c      	adds	r3, #28
 800b33c:	0018      	movs	r0, r3
 800b33e:	f7fe f908 	bl	8009552 <ld_dword>
 800b342:	0002      	movs	r2, r0
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	88da      	ldrh	r2, [r3, #6]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	1dfa      	adds	r2, r7, #7
 800b360:	7812      	ldrb	r2, [r2, #0]
 800b362:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3330      	adds	r3, #48	@ 0x30
 800b37a:	2280      	movs	r2, #128	@ 0x80
 800b37c:	0092      	lsls	r2, r2, #2
 800b37e:	2100      	movs	r1, #0
 800b380:	0018      	movs	r0, r3
 800b382:	f7fe f96e 	bl	8009662 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b386:	1dfb      	adds	r3, r7, #7
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2220      	movs	r2, #32
 800b38c:	4013      	ands	r3, r2
 800b38e:	d066      	beq.n	800b45e <f_open+0x3ca>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d062      	beq.n	800b45e <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	895b      	ldrh	r3, [r3, #10]
 800b3a4:	025b      	lsls	r3, r3, #9
 800b3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3b4:	e019      	b.n	800b3ea <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3ba:	0011      	movs	r1, r2
 800b3bc:	0018      	movs	r0, r3
 800b3be:	f7fe fc27 	bl	8009c10 <get_fat>
 800b3c2:	0003      	movs	r3, r0
 800b3c4:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b3c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d803      	bhi.n	800b3d4 <f_open+0x340>
 800b3cc:	235f      	movs	r3, #95	@ 0x5f
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	d103      	bne.n	800b3e2 <f_open+0x34e>
 800b3da:	235f      	movs	r3, #95	@ 0x5f
 800b3dc:	18fb      	adds	r3, r7, r3
 800b3de:	2201      	movs	r2, #1
 800b3e0:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3ea:	235f      	movs	r3, #95	@ 0x5f
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d103      	bne.n	800b3fc <f_open+0x368>
 800b3f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d8dc      	bhi.n	800b3b6 <f_open+0x322>
				}
				fp->clust = clst;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b400:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b402:	245f      	movs	r4, #95	@ 0x5f
 800b404:	193b      	adds	r3, r7, r4
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d128      	bne.n	800b45e <f_open+0x3ca>
 800b40c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b40e:	05db      	lsls	r3, r3, #23
 800b410:	0ddb      	lsrs	r3, r3, #23
 800b412:	d024      	beq.n	800b45e <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b418:	0011      	movs	r1, r2
 800b41a:	0018      	movs	r0, r3
 800b41c:	f7fe fbdc 	bl	8009bd8 <clust2sect>
 800b420:	0003      	movs	r3, r0
 800b422:	647b      	str	r3, [r7, #68]	@ 0x44
 800b424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b426:	2b00      	cmp	r3, #0
 800b428:	d103      	bne.n	800b432 <f_open+0x39e>
						res = FR_INT_ERR;
 800b42a:	193b      	adds	r3, r7, r4
 800b42c:	2202      	movs	r2, #2
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	e015      	b.n	800b45e <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b434:	0a5a      	lsrs	r2, r3, #9
 800b436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b438:	18d2      	adds	r2, r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	7858      	ldrb	r0, [r3, #1]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3330      	adds	r3, #48	@ 0x30
 800b446:	0019      	movs	r1, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6a1a      	ldr	r2, [r3, #32]
 800b44c:	2301      	movs	r3, #1
 800b44e:	f7fd ffed 	bl	800942c <disk_read>
 800b452:	1e03      	subs	r3, r0, #0
 800b454:	d003      	beq.n	800b45e <f_open+0x3ca>
 800b456:	235f      	movs	r3, #95	@ 0x5f
 800b458:	18fb      	adds	r3, r7, r3
 800b45a:	2201      	movs	r2, #1
 800b45c:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b45e:	235f      	movs	r3, #95	@ 0x5f
 800b460:	18fb      	adds	r3, r7, r3
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <f_open+0x3da>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b46e:	235f      	movs	r3, #95	@ 0x5f
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	781b      	ldrb	r3, [r3, #0]
}
 800b474:	0018      	movs	r0, r3
 800b476:	46bd      	mov	sp, r7
 800b478:	b019      	add	sp, #100	@ 0x64
 800b47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b47c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b47c:	b5b0      	push	{r4, r5, r7, lr}
 800b47e:	b08c      	sub	sp, #48	@ 0x30
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	252f      	movs	r5, #47	@ 0x2f
 800b498:	197c      	adds	r4, r7, r5
 800b49a:	2210      	movs	r2, #16
 800b49c:	18ba      	adds	r2, r7, r2
 800b49e:	0011      	movs	r1, r2
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f7ff fd6f 	bl	800af84 <validate>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b4aa:	197b      	adds	r3, r7, r5
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d107      	bne.n	800b4c2 <f_write+0x46>
 800b4b2:	197b      	adds	r3, r7, r5
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	7d52      	ldrb	r2, [r2, #21]
 800b4b8:	701a      	strb	r2, [r3, #0]
 800b4ba:	197b      	adds	r3, r7, r5
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <f_write+0x4e>
 800b4c2:	232f      	movs	r3, #47	@ 0x2f
 800b4c4:	18fb      	adds	r3, r7, r3
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	e14e      	b.n	800b768 <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	7d1b      	ldrb	r3, [r3, #20]
 800b4ce:	001a      	movs	r2, r3
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	d101      	bne.n	800b4da <f_write+0x5e>
 800b4d6:	2307      	movs	r3, #7
 800b4d8:	e146      	b.n	800b768 <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	699a      	ldr	r2, [r3, #24]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	18d2      	adds	r2, r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d300      	bcc.n	800b4ec <f_write+0x70>
 800b4ea:	e12f      	b.n	800b74c <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	43db      	mvns	r3, r3
 800b4f2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b4f4:	e12a      	b.n	800b74c <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	05db      	lsls	r3, r3, #23
 800b4fc:	0ddb      	lsrs	r3, r3, #23
 800b4fe:	d000      	beq.n	800b502 <f_write+0x86>
 800b500:	e0e3      	b.n	800b6ca <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	0a5b      	lsrs	r3, r3, #9
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	8952      	ldrh	r2, [r2, #10]
 800b50c:	3a01      	subs	r2, #1
 800b50e:	4013      	ands	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d146      	bne.n	800b5a6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10d      	bne.n	800b53c <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d11e      	bne.n	800b56a <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2100      	movs	r1, #0
 800b530:	0018      	movs	r0, r3
 800b532:	f7fe fd8b 	bl	800a04c <create_chain>
 800b536:	0003      	movs	r3, r0
 800b538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b53a:	e016      	b.n	800b56a <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d009      	beq.n	800b558 <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	699a      	ldr	r2, [r3, #24]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	0011      	movs	r1, r2
 800b54c:	0018      	movs	r0, r3
 800b54e:	f7fe fe23 	bl	800a198 <clmt_clust>
 800b552:	0003      	movs	r3, r0
 800b554:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b556:	e008      	b.n	800b56a <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	0019      	movs	r1, r3
 800b560:	0010      	movs	r0, r2
 800b562:	f7fe fd73 	bl	800a04c <create_chain>
 800b566:	0003      	movs	r3, r0
 800b568:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d100      	bne.n	800b572 <f_write+0xf6>
 800b570:	e0f1      	b.n	800b756 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b574:	2b01      	cmp	r3, #1
 800b576:	d104      	bne.n	800b582 <f_write+0x106>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2202      	movs	r2, #2
 800b57c:	755a      	strb	r2, [r3, #21]
 800b57e:	2302      	movs	r3, #2
 800b580:	e0f2      	b.n	800b768 <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	3301      	adds	r3, #1
 800b586:	d104      	bne.n	800b592 <f_write+0x116>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	755a      	strb	r2, [r3, #21]
 800b58e:	2301      	movs	r3, #1
 800b590:	e0ea      	b.n	800b768 <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b596:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <f_write+0x12a>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	7d1b      	ldrb	r3, [r3, #20]
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da17      	bge.n	800b5e0 <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	7858      	ldrb	r0, [r3, #1]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3330      	adds	r3, #48	@ 0x30
 800b5b8:	0019      	movs	r1, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6a1a      	ldr	r2, [r3, #32]
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f7fd ff5c 	bl	800947c <disk_write>
 800b5c4:	1e03      	subs	r3, r0, #0
 800b5c6:	d004      	beq.n	800b5d2 <f_write+0x156>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	755a      	strb	r2, [r3, #21]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e0ca      	b.n	800b768 <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	7d1b      	ldrb	r3, [r3, #20]
 800b5d6:	227f      	movs	r2, #127	@ 0x7f
 800b5d8:	4013      	ands	r3, r2
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	0019      	movs	r1, r3
 800b5e8:	0010      	movs	r0, r2
 800b5ea:	f7fe faf5 	bl	8009bd8 <clust2sect>
 800b5ee:	0003      	movs	r3, r0
 800b5f0:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <f_write+0x186>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	755a      	strb	r2, [r3, #21]
 800b5fe:	2302      	movs	r3, #2
 800b600:	e0b2      	b.n	800b768 <f_write+0x2ec>
			sect += csect;
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	18d3      	adds	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	0a5b      	lsrs	r3, r3, #9
 800b60e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d03b      	beq.n	800b68e <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	18d3      	adds	r3, r2, r3
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	8952      	ldrh	r2, [r2, #10]
 800b620:	4293      	cmp	r3, r2
 800b622:	d905      	bls.n	800b630 <f_write+0x1b4>
					cc = fs->csize - csect;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	895b      	ldrh	r3, [r3, #10]
 800b628:	001a      	movs	r2, r3
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	7858      	ldrb	r0, [r3, #1]
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	69f9      	ldr	r1, [r7, #28]
 800b63a:	f7fd ff1f 	bl	800947c <disk_write>
 800b63e:	1e03      	subs	r3, r0, #0
 800b640:	d004      	beq.n	800b64c <f_write+0x1d0>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2201      	movs	r2, #1
 800b646:	755a      	strb	r2, [r3, #21]
 800b648:	2301      	movs	r3, #1
 800b64a:	e08d      	b.n	800b768 <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a1a      	ldr	r2, [r3, #32]
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	6a3a      	ldr	r2, [r7, #32]
 800b656:	429a      	cmp	r2, r3
 800b658:	d915      	bls.n	800b686 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3330      	adds	r3, #48	@ 0x30
 800b65e:	0018      	movs	r0, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a1a      	ldr	r2, [r3, #32]
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	025b      	lsls	r3, r3, #9
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	18d3      	adds	r3, r2, r3
 800b66e:	2280      	movs	r2, #128	@ 0x80
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	0019      	movs	r1, r3
 800b674:	f7fd ffd6 	bl	8009624 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	227f      	movs	r2, #127	@ 0x7f
 800b67e:	4013      	ands	r3, r2
 800b680:	b2da      	uxtb	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	025b      	lsls	r3, r3, #9
 800b68a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b68c:	e040      	b.n	800b710 <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	429a      	cmp	r2, r3
 800b696:	d015      	beq.n	800b6c4 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	699a      	ldr	r2, [r3, #24]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d20f      	bcs.n	800b6c4 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	7858      	ldrb	r0, [r3, #1]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3330      	adds	r3, #48	@ 0x30
 800b6ac:	0019      	movs	r1, r3
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f7fd febb 	bl	800942c <disk_read>
 800b6b6:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800b6b8:	d004      	beq.n	800b6c4 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	755a      	strb	r2, [r3, #21]
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e051      	b.n	800b768 <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	05db      	lsls	r3, r3, #23
 800b6d0:	0ddb      	lsrs	r3, r3, #23
 800b6d2:	2280      	movs	r2, #128	@ 0x80
 800b6d4:	0092      	lsls	r2, r2, #2
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d901      	bls.n	800b6e6 <f_write+0x26a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3330      	adds	r3, #48	@ 0x30
 800b6ea:	001a      	movs	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	05db      	lsls	r3, r3, #23
 800b6f2:	0ddb      	lsrs	r3, r3, #23
 800b6f4:	18d3      	adds	r3, r2, r3
 800b6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f8:	69f9      	ldr	r1, [r7, #28]
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	f7fd ff92 	bl	8009624 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	7d1b      	ldrb	r3, [r3, #20]
 800b704:	2280      	movs	r2, #128	@ 0x80
 800b706:	4252      	negs	r2, r2
 800b708:	4313      	orrs	r3, r2
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b710:	69fa      	ldr	r2, [r7, #28]
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	18d2      	adds	r2, r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	619a      	str	r2, [r3, #24]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68d9      	ldr	r1, [r3, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	699a      	ldr	r2, [r3, #24]
 800b72c:	000b      	movs	r3, r1
 800b72e:	4293      	cmp	r3, r2
 800b730:	d200      	bcs.n	800b734 <f_write+0x2b8>
 800b732:	0013      	movs	r3, r2
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	60d3      	str	r3, [r2, #12]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	18d2      	adds	r2, r2, r3
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d000      	beq.n	800b754 <f_write+0x2d8>
 800b752:	e6d0      	b.n	800b4f6 <f_write+0x7a>
 800b754:	e000      	b.n	800b758 <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b756:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	7d1b      	ldrb	r3, [r3, #20]
 800b75c:	2240      	movs	r2, #64	@ 0x40
 800b75e:	4313      	orrs	r3, r2
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b766:	2300      	movs	r3, #0
}
 800b768:	0018      	movs	r0, r3
 800b76a:	46bd      	mov	sp, r7
 800b76c:	b00c      	add	sp, #48	@ 0x30
 800b76e:	bdb0      	pop	{r4, r5, r7, pc}

0800b770 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b770:	b5b0      	push	{r4, r5, r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2517      	movs	r5, #23
 800b77c:	197c      	adds	r4, r7, r5
 800b77e:	2208      	movs	r2, #8
 800b780:	18ba      	adds	r2, r7, r2
 800b782:	0011      	movs	r1, r2
 800b784:	0018      	movs	r0, r3
 800b786:	f7ff fbfd 	bl	800af84 <validate>
 800b78a:	0003      	movs	r3, r0
 800b78c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b78e:	197b      	adds	r3, r7, r5
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d16e      	bne.n	800b874 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	7d1b      	ldrb	r3, [r3, #20]
 800b79a:	001a      	movs	r2, r3
 800b79c:	2340      	movs	r3, #64	@ 0x40
 800b79e:	4013      	ands	r3, r2
 800b7a0:	d068      	beq.n	800b874 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7d1b      	ldrb	r3, [r3, #20]
 800b7a6:	b25b      	sxtb	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da14      	bge.n	800b7d6 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	7858      	ldrb	r0, [r3, #1]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3330      	adds	r3, #48	@ 0x30
 800b7b4:	0019      	movs	r1, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a1a      	ldr	r2, [r3, #32]
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f7fd fe5e 	bl	800947c <disk_write>
 800b7c0:	1e03      	subs	r3, r0, #0
 800b7c2:	d001      	beq.n	800b7c8 <f_sync+0x58>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e058      	b.n	800b87a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7d1b      	ldrb	r3, [r3, #20]
 800b7cc:	227f      	movs	r2, #127	@ 0x7f
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b7d6:	f7fc fffb 	bl	80087d0 <get_fattime>
 800b7da:	0003      	movs	r3, r0
 800b7dc:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	2517      	movs	r5, #23
 800b7e6:	197c      	adds	r4, r7, r5
 800b7e8:	0019      	movs	r1, r3
 800b7ea:	0010      	movs	r0, r2
 800b7ec:	f7fe f942 	bl	8009a74 <move_window>
 800b7f0:	0003      	movs	r3, r0
 800b7f2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800b7f4:	002c      	movs	r4, r5
 800b7f6:	193b      	adds	r3, r7, r4
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d13a      	bne.n	800b874 <f_sync+0x104>
					dir = fp->dir_ptr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b802:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	330b      	adds	r3, #11
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	330b      	adds	r3, #11
 800b80e:	2120      	movs	r1, #32
 800b810:	430a      	orrs	r2, r1
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	0019      	movs	r1, r3
 800b822:	f7fe feac 	bl	800a57e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	331c      	adds	r3, #28
 800b82a:	001a      	movs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	0019      	movs	r1, r3
 800b832:	0010      	movs	r0, r2
 800b834:	f7fd fecc 	bl	80095d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3316      	adds	r3, #22
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	0011      	movs	r1, r2
 800b840:	0018      	movs	r0, r3
 800b842:	f7fd fec5 	bl	80095d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3312      	adds	r3, #18
 800b84a:	2100      	movs	r1, #0
 800b84c:	0018      	movs	r0, r3
 800b84e:	f7fd fea1 	bl	8009594 <st_word>
					fs->wflag = 1;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2201      	movs	r2, #1
 800b856:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	193c      	adds	r4, r7, r4
 800b85c:	0018      	movs	r0, r3
 800b85e:	f7fe f93f 	bl	8009ae0 <sync_fs>
 800b862:	0003      	movs	r3, r0
 800b864:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7d1b      	ldrb	r3, [r3, #20]
 800b86a:	2240      	movs	r2, #64	@ 0x40
 800b86c:	4393      	bics	r3, r2
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b874:	2317      	movs	r3, #23
 800b876:	18fb      	adds	r3, r7, r3
 800b878:	781b      	ldrb	r3, [r3, #0]
}
 800b87a:	0018      	movs	r0, r3
 800b87c:	46bd      	mov	sp, r7
 800b87e:	b006      	add	sp, #24
 800b880:	bdb0      	pop	{r4, r5, r7, pc}

0800b882 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b882:	b5b0      	push	{r4, r5, r7, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b88a:	250f      	movs	r5, #15
 800b88c:	197c      	adds	r4, r7, r5
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	0018      	movs	r0, r3
 800b892:	f7ff ff6d 	bl	800b770 <f_sync>
 800b896:	0003      	movs	r3, r0
 800b898:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800b89a:	197b      	adds	r3, r7, r5
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d11c      	bne.n	800b8dc <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	197c      	adds	r4, r7, r5
 800b8a6:	2208      	movs	r2, #8
 800b8a8:	18ba      	adds	r2, r7, r2
 800b8aa:	0011      	movs	r1, r2
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	f7ff fb69 	bl	800af84 <validate>
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800b8b6:	197b      	adds	r3, r7, r5
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10e      	bne.n	800b8dc <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	197c      	adds	r4, r7, r5
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f7fe f823 	bl	8009910 <dec_lock>
 800b8ca:	0003      	movs	r3, r0
 800b8cc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800b8ce:	197b      	adds	r3, r7, r5
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b8dc:	230f      	movs	r3, #15
 800b8de:	18fb      	adds	r3, r7, r3
 800b8e0:	781b      	ldrb	r3, [r3, #0]
}
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	b004      	add	sp, #16
 800b8e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b8ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	1dfb      	adds	r3, r7, #7
 800b8f8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800b8fa:	2417      	movs	r4, #23
 800b8fc:	193b      	adds	r3, r7, r4
 800b8fe:	2201      	movs	r2, #1
 800b900:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800b902:	2016      	movs	r0, #22
 800b904:	183b      	adds	r3, r7, r0
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800b90a:	4b21      	ldr	r3, [pc, #132]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b90c:	7a5b      	ldrb	r3, [r3, #9]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d136      	bne.n	800b982 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b914:	4b1e      	ldr	r3, [pc, #120]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b916:	7a5b      	ldrb	r3, [r3, #9]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	001a      	movs	r2, r3
 800b91c:	4b1c      	ldr	r3, [pc, #112]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b91e:	2100      	movs	r1, #0
 800b920:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b922:	4b1b      	ldr	r3, [pc, #108]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b924:	7a5b      	ldrb	r3, [r3, #9]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	4a19      	ldr	r2, [pc, #100]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	18d3      	adds	r3, r2, r3
 800b92e:	3304      	adds	r3, #4
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800b934:	4b16      	ldr	r3, [pc, #88]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b936:	7a5b      	ldrb	r3, [r3, #9]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	001a      	movs	r2, r3
 800b93c:	4b14      	ldr	r3, [pc, #80]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b93e:	189b      	adds	r3, r3, r2
 800b940:	1dfa      	adds	r2, r7, #7
 800b942:	7812      	ldrb	r2, [r2, #0]
 800b944:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b946:	4b12      	ldr	r3, [pc, #72]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b948:	7a5b      	ldrb	r3, [r3, #9]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	b2d1      	uxtb	r1, r2
 800b950:	4a0f      	ldr	r2, [pc, #60]	@ (800b990 <FATFS_LinkDriverEx+0xa4>)
 800b952:	7251      	strb	r1, [r2, #9]
 800b954:	183a      	adds	r2, r7, r0
 800b956:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800b958:	183b      	adds	r3, r7, r0
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	3330      	adds	r3, #48	@ 0x30
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	3301      	adds	r3, #1
 800b968:	223a      	movs	r2, #58	@ 0x3a
 800b96a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	3302      	adds	r3, #2
 800b970:	222f      	movs	r2, #47	@ 0x2f
 800b972:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	3303      	adds	r3, #3
 800b978:	2200      	movs	r2, #0
 800b97a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b97c:	193b      	adds	r3, r7, r4
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b982:	2317      	movs	r3, #23
 800b984:	18fb      	adds	r3, r7, r3
 800b986:	781b      	ldrb	r3, [r3, #0]
}
 800b988:	0018      	movs	r0, r3
 800b98a:	46bd      	mov	sp, r7
 800b98c:	b007      	add	sp, #28
 800b98e:	bd90      	pop	{r4, r7, pc}
 800b990:	20000a3c 	.word	0x20000a3c

0800b994 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f7ff ffa1 	bl	800b8ec <FATFS_LinkDriverEx>
 800b9aa:	0003      	movs	r3, r0
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b002      	add	sp, #8
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <__cvt>:
 800b9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b6:	001f      	movs	r7, r3
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	0016      	movs	r6, r2
 800b9bc:	b08b      	sub	sp, #44	@ 0x2c
 800b9be:	429f      	cmp	r7, r3
 800b9c0:	da04      	bge.n	800b9cc <__cvt+0x18>
 800b9c2:	2180      	movs	r1, #128	@ 0x80
 800b9c4:	0609      	lsls	r1, r1, #24
 800b9c6:	187b      	adds	r3, r7, r1
 800b9c8:	001f      	movs	r7, r3
 800b9ca:	232d      	movs	r3, #45	@ 0x2d
 800b9cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9ce:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b9d0:	7013      	strb	r3, [r2, #0]
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	439d      	bics	r5, r3
 800b9d8:	2d46      	cmp	r5, #70	@ 0x46
 800b9da:	d007      	beq.n	800b9ec <__cvt+0x38>
 800b9dc:	002b      	movs	r3, r5
 800b9de:	3b45      	subs	r3, #69	@ 0x45
 800b9e0:	4259      	negs	r1, r3
 800b9e2:	414b      	adcs	r3, r1
 800b9e4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b9e6:	3a01      	subs	r2, #1
 800b9e8:	18cb      	adds	r3, r1, r3
 800b9ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9ec:	ab09      	add	r3, sp, #36	@ 0x24
 800b9ee:	9304      	str	r3, [sp, #16]
 800b9f0:	ab08      	add	r3, sp, #32
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9f6:	9200      	str	r2, [sp, #0]
 800b9f8:	9302      	str	r3, [sp, #8]
 800b9fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9fc:	0032      	movs	r2, r6
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	003b      	movs	r3, r7
 800ba02:	f001 f8cf 	bl	800cba4 <_dtoa_r>
 800ba06:	0004      	movs	r4, r0
 800ba08:	2d47      	cmp	r5, #71	@ 0x47
 800ba0a:	d11b      	bne.n	800ba44 <__cvt+0x90>
 800ba0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba0e:	07db      	lsls	r3, r3, #31
 800ba10:	d511      	bpl.n	800ba36 <__cvt+0x82>
 800ba12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba14:	18c3      	adds	r3, r0, r3
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	0030      	movs	r0, r6
 800ba1e:	0039      	movs	r1, r7
 800ba20:	f7f4 fd14 	bl	800044c <__aeabi_dcmpeq>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d001      	beq.n	800ba2c <__cvt+0x78>
 800ba28:	9b07      	ldr	r3, [sp, #28]
 800ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2c:	2230      	movs	r2, #48	@ 0x30
 800ba2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba30:	9907      	ldr	r1, [sp, #28]
 800ba32:	428b      	cmp	r3, r1
 800ba34:	d320      	bcc.n	800ba78 <__cvt+0xc4>
 800ba36:	0020      	movs	r0, r4
 800ba38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ba3c:	1b1b      	subs	r3, r3, r4
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	b00b      	add	sp, #44	@ 0x2c
 800ba42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba46:	18c3      	adds	r3, r0, r3
 800ba48:	9307      	str	r3, [sp, #28]
 800ba4a:	2d46      	cmp	r5, #70	@ 0x46
 800ba4c:	d1e4      	bne.n	800ba18 <__cvt+0x64>
 800ba4e:	7803      	ldrb	r3, [r0, #0]
 800ba50:	2b30      	cmp	r3, #48	@ 0x30
 800ba52:	d10c      	bne.n	800ba6e <__cvt+0xba>
 800ba54:	2200      	movs	r2, #0
 800ba56:	2300      	movs	r3, #0
 800ba58:	0030      	movs	r0, r6
 800ba5a:	0039      	movs	r1, r7
 800ba5c:	f7f4 fcf6 	bl	800044c <__aeabi_dcmpeq>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d104      	bne.n	800ba6e <__cvt+0xba>
 800ba64:	2301      	movs	r3, #1
 800ba66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba70:	9a07      	ldr	r2, [sp, #28]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	18d3      	adds	r3, r2, r3
 800ba76:	e7ce      	b.n	800ba16 <__cvt+0x62>
 800ba78:	1c59      	adds	r1, r3, #1
 800ba7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	e7d6      	b.n	800ba2e <__cvt+0x7a>

0800ba80 <__exponent>:
 800ba80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba82:	232b      	movs	r3, #43	@ 0x2b
 800ba84:	0005      	movs	r5, r0
 800ba86:	000c      	movs	r4, r1
 800ba88:	b085      	sub	sp, #20
 800ba8a:	7002      	strb	r2, [r0, #0]
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	da01      	bge.n	800ba94 <__exponent+0x14>
 800ba90:	424c      	negs	r4, r1
 800ba92:	3302      	adds	r3, #2
 800ba94:	706b      	strb	r3, [r5, #1]
 800ba96:	2c09      	cmp	r4, #9
 800ba98:	dd2c      	ble.n	800baf4 <__exponent+0x74>
 800ba9a:	ab02      	add	r3, sp, #8
 800ba9c:	1dde      	adds	r6, r3, #7
 800ba9e:	0020      	movs	r0, r4
 800baa0:	210a      	movs	r1, #10
 800baa2:	f7f4 fcbd 	bl	8000420 <__aeabi_idivmod>
 800baa6:	0037      	movs	r7, r6
 800baa8:	3130      	adds	r1, #48	@ 0x30
 800baaa:	3e01      	subs	r6, #1
 800baac:	0020      	movs	r0, r4
 800baae:	7031      	strb	r1, [r6, #0]
 800bab0:	210a      	movs	r1, #10
 800bab2:	9401      	str	r4, [sp, #4]
 800bab4:	f7f4 fbce 	bl	8000254 <__divsi3>
 800bab8:	9b01      	ldr	r3, [sp, #4]
 800baba:	0004      	movs	r4, r0
 800babc:	2b63      	cmp	r3, #99	@ 0x63
 800babe:	dcee      	bgt.n	800ba9e <__exponent+0x1e>
 800bac0:	1eba      	subs	r2, r7, #2
 800bac2:	1ca8      	adds	r0, r5, #2
 800bac4:	0001      	movs	r1, r0
 800bac6:	0013      	movs	r3, r2
 800bac8:	3430      	adds	r4, #48	@ 0x30
 800baca:	7014      	strb	r4, [r2, #0]
 800bacc:	ac02      	add	r4, sp, #8
 800bace:	3407      	adds	r4, #7
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d80a      	bhi.n	800baea <__exponent+0x6a>
 800bad4:	2300      	movs	r3, #0
 800bad6:	42a2      	cmp	r2, r4
 800bad8:	d803      	bhi.n	800bae2 <__exponent+0x62>
 800bada:	3309      	adds	r3, #9
 800badc:	aa02      	add	r2, sp, #8
 800bade:	189b      	adds	r3, r3, r2
 800bae0:	1bdb      	subs	r3, r3, r7
 800bae2:	18c0      	adds	r0, r0, r3
 800bae4:	1b40      	subs	r0, r0, r5
 800bae6:	b005      	add	sp, #20
 800bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baea:	781c      	ldrb	r4, [r3, #0]
 800baec:	3301      	adds	r3, #1
 800baee:	700c      	strb	r4, [r1, #0]
 800baf0:	3101      	adds	r1, #1
 800baf2:	e7eb      	b.n	800bacc <__exponent+0x4c>
 800baf4:	2330      	movs	r3, #48	@ 0x30
 800baf6:	18e4      	adds	r4, r4, r3
 800baf8:	70ab      	strb	r3, [r5, #2]
 800bafa:	1d28      	adds	r0, r5, #4
 800bafc:	70ec      	strb	r4, [r5, #3]
 800bafe:	e7f1      	b.n	800bae4 <__exponent+0x64>

0800bb00 <_printf_float>:
 800bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb02:	b097      	sub	sp, #92	@ 0x5c
 800bb04:	000d      	movs	r5, r1
 800bb06:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb08:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800bb0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb0c:	9009      	str	r0, [sp, #36]	@ 0x24
 800bb0e:	f000 ff2d 	bl	800c96c <_localeconv_r>
 800bb12:	6803      	ldr	r3, [r0, #0]
 800bb14:	0018      	movs	r0, r3
 800bb16:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb18:	f7f4 faf6 	bl	8000108 <strlen>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bb20:	9314      	str	r3, [sp, #80]	@ 0x50
 800bb22:	7e2b      	ldrb	r3, [r5, #24]
 800bb24:	2207      	movs	r2, #7
 800bb26:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	05c9      	lsls	r1, r1, #23
 800bb32:	d545      	bpl.n	800bbc0 <_printf_float+0xc0>
 800bb34:	189b      	adds	r3, r3, r2
 800bb36:	4393      	bics	r3, r2
 800bb38:	001a      	movs	r2, r3
 800bb3a:	3208      	adds	r2, #8
 800bb3c:	6022      	str	r2, [r4, #0]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	681e      	ldr	r6, [r3, #0]
 800bb42:	685f      	ldr	r7, [r3, #4]
 800bb44:	007b      	lsls	r3, r7, #1
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb4a:	9610      	str	r6, [sp, #64]	@ 0x40
 800bb4c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800bb4e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800bb50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bb52:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bb54:	4ba7      	ldr	r3, [pc, #668]	@ (800bdf4 <_printf_float+0x2f4>)
 800bb56:	4252      	negs	r2, r2
 800bb58:	f7f7 fb8a 	bl	8003270 <__aeabi_dcmpun>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d131      	bne.n	800bbc4 <_printf_float+0xc4>
 800bb60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bb62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bb64:	2201      	movs	r2, #1
 800bb66:	4ba3      	ldr	r3, [pc, #652]	@ (800bdf4 <_printf_float+0x2f4>)
 800bb68:	4252      	negs	r2, r2
 800bb6a:	f7f4 fc7f 	bl	800046c <__aeabi_dcmple>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d128      	bne.n	800bbc4 <_printf_float+0xc4>
 800bb72:	2200      	movs	r2, #0
 800bb74:	2300      	movs	r3, #0
 800bb76:	0030      	movs	r0, r6
 800bb78:	0039      	movs	r1, r7
 800bb7a:	f7f4 fc6d 	bl	8000458 <__aeabi_dcmplt>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d003      	beq.n	800bb8a <_printf_float+0x8a>
 800bb82:	002b      	movs	r3, r5
 800bb84:	222d      	movs	r2, #45	@ 0x2d
 800bb86:	3343      	adds	r3, #67	@ 0x43
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb8c:	4f9a      	ldr	r7, [pc, #616]	@ (800bdf8 <_printf_float+0x2f8>)
 800bb8e:	2b47      	cmp	r3, #71	@ 0x47
 800bb90:	d900      	bls.n	800bb94 <_printf_float+0x94>
 800bb92:	4f9a      	ldr	r7, [pc, #616]	@ (800bdfc <_printf_float+0x2fc>)
 800bb94:	2303      	movs	r3, #3
 800bb96:	2400      	movs	r4, #0
 800bb98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb9a:	612b      	str	r3, [r5, #16]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	439a      	bics	r2, r3
 800bba0:	602a      	str	r2, [r5, #0]
 800bba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba4:	0029      	movs	r1, r5
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbac:	aa15      	add	r2, sp, #84	@ 0x54
 800bbae:	f000 f9e5 	bl	800bf7c <_printf_common>
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	d000      	beq.n	800bbb8 <_printf_float+0xb8>
 800bbb6:	e09f      	b.n	800bcf8 <_printf_float+0x1f8>
 800bbb8:	2001      	movs	r0, #1
 800bbba:	4240      	negs	r0, r0
 800bbbc:	b017      	add	sp, #92	@ 0x5c
 800bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	e7b8      	b.n	800bb36 <_printf_float+0x36>
 800bbc4:	0032      	movs	r2, r6
 800bbc6:	003b      	movs	r3, r7
 800bbc8:	0030      	movs	r0, r6
 800bbca:	0039      	movs	r1, r7
 800bbcc:	f7f7 fb50 	bl	8003270 <__aeabi_dcmpun>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d00b      	beq.n	800bbec <_printf_float+0xec>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	da03      	bge.n	800bbe0 <_printf_float+0xe0>
 800bbd8:	002b      	movs	r3, r5
 800bbda:	222d      	movs	r2, #45	@ 0x2d
 800bbdc:	3343      	adds	r3, #67	@ 0x43
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbe2:	4f87      	ldr	r7, [pc, #540]	@ (800be00 <_printf_float+0x300>)
 800bbe4:	2b47      	cmp	r3, #71	@ 0x47
 800bbe6:	d9d5      	bls.n	800bb94 <_printf_float+0x94>
 800bbe8:	4f86      	ldr	r7, [pc, #536]	@ (800be04 <_printf_float+0x304>)
 800bbea:	e7d3      	b.n	800bb94 <_printf_float+0x94>
 800bbec:	2220      	movs	r2, #32
 800bbee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bbf0:	686b      	ldr	r3, [r5, #4]
 800bbf2:	4394      	bics	r4, r2
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	d146      	bne.n	800bc86 <_printf_float+0x186>
 800bbf8:	3307      	adds	r3, #7
 800bbfa:	606b      	str	r3, [r5, #4]
 800bbfc:	2380      	movs	r3, #128	@ 0x80
 800bbfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	4313      	orrs	r3, r2
 800bc04:	2200      	movs	r2, #0
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	9206      	str	r2, [sp, #24]
 800bc0a:	aa14      	add	r2, sp, #80	@ 0x50
 800bc0c:	9205      	str	r2, [sp, #20]
 800bc0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc10:	a90a      	add	r1, sp, #40	@ 0x28
 800bc12:	9204      	str	r2, [sp, #16]
 800bc14:	aa13      	add	r2, sp, #76	@ 0x4c
 800bc16:	9203      	str	r2, [sp, #12]
 800bc18:	2223      	movs	r2, #35	@ 0x23
 800bc1a:	1852      	adds	r2, r2, r1
 800bc1c:	9202      	str	r2, [sp, #8]
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	686b      	ldr	r3, [r5, #4]
 800bc22:	0032      	movs	r2, r6
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc28:	003b      	movs	r3, r7
 800bc2a:	f7ff fec3 	bl	800b9b4 <__cvt>
 800bc2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc30:	0007      	movs	r7, r0
 800bc32:	2c47      	cmp	r4, #71	@ 0x47
 800bc34:	d12d      	bne.n	800bc92 <_printf_float+0x192>
 800bc36:	1cd3      	adds	r3, r2, #3
 800bc38:	db02      	blt.n	800bc40 <_printf_float+0x140>
 800bc3a:	686b      	ldr	r3, [r5, #4]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	dd48      	ble.n	800bcd2 <_printf_float+0x1d2>
 800bc40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bc44:	3b02      	subs	r3, #2
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc4a:	0028      	movs	r0, r5
 800bc4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc4e:	3901      	subs	r1, #1
 800bc50:	3050      	adds	r0, #80	@ 0x50
 800bc52:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc54:	f7ff ff14 	bl	800ba80 <__exponent>
 800bc58:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bc5a:	0004      	movs	r4, r0
 800bc5c:	1813      	adds	r3, r2, r0
 800bc5e:	612b      	str	r3, [r5, #16]
 800bc60:	2a01      	cmp	r2, #1
 800bc62:	dc02      	bgt.n	800bc6a <_printf_float+0x16a>
 800bc64:	682a      	ldr	r2, [r5, #0]
 800bc66:	07d2      	lsls	r2, r2, #31
 800bc68:	d501      	bpl.n	800bc6e <_printf_float+0x16e>
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	612b      	str	r3, [r5, #16]
 800bc6e:	2323      	movs	r3, #35	@ 0x23
 800bc70:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc72:	189b      	adds	r3, r3, r2
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d100      	bne.n	800bc7c <_printf_float+0x17c>
 800bc7a:	e792      	b.n	800bba2 <_printf_float+0xa2>
 800bc7c:	002b      	movs	r3, r5
 800bc7e:	222d      	movs	r2, #45	@ 0x2d
 800bc80:	3343      	adds	r3, #67	@ 0x43
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	e78d      	b.n	800bba2 <_printf_float+0xa2>
 800bc86:	2c47      	cmp	r4, #71	@ 0x47
 800bc88:	d1b8      	bne.n	800bbfc <_printf_float+0xfc>
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1b6      	bne.n	800bbfc <_printf_float+0xfc>
 800bc8e:	3301      	adds	r3, #1
 800bc90:	e7b3      	b.n	800bbfa <_printf_float+0xfa>
 800bc92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc94:	0011      	movs	r1, r2
 800bc96:	2b65      	cmp	r3, #101	@ 0x65
 800bc98:	d9d7      	bls.n	800bc4a <_printf_float+0x14a>
 800bc9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc9c:	2b66      	cmp	r3, #102	@ 0x66
 800bc9e:	d11a      	bne.n	800bcd6 <_printf_float+0x1d6>
 800bca0:	686b      	ldr	r3, [r5, #4]
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	dd09      	ble.n	800bcba <_printf_float+0x1ba>
 800bca6:	612a      	str	r2, [r5, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <_printf_float+0x1b2>
 800bcac:	6829      	ldr	r1, [r5, #0]
 800bcae:	07c9      	lsls	r1, r1, #31
 800bcb0:	d50b      	bpl.n	800bcca <_printf_float+0x1ca>
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	189b      	adds	r3, r3, r2
 800bcb6:	612b      	str	r3, [r5, #16]
 800bcb8:	e007      	b.n	800bcca <_printf_float+0x1ca>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <_printf_float+0x1c6>
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	6829      	ldr	r1, [r5, #0]
 800bcc2:	4211      	tst	r1, r2
 800bcc4:	d000      	beq.n	800bcc8 <_printf_float+0x1c8>
 800bcc6:	1c9a      	adds	r2, r3, #2
 800bcc8:	612a      	str	r2, [r5, #16]
 800bcca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bccc:	2400      	movs	r4, #0
 800bcce:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bcd0:	e7cd      	b.n	800bc6e <_printf_float+0x16e>
 800bcd2:	2367      	movs	r3, #103	@ 0x67
 800bcd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bcd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bcda:	4299      	cmp	r1, r3
 800bcdc:	db06      	blt.n	800bcec <_printf_float+0x1ec>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	6129      	str	r1, [r5, #16]
 800bce2:	07db      	lsls	r3, r3, #31
 800bce4:	d5f1      	bpl.n	800bcca <_printf_float+0x1ca>
 800bce6:	3101      	adds	r1, #1
 800bce8:	6129      	str	r1, [r5, #16]
 800bcea:	e7ee      	b.n	800bcca <_printf_float+0x1ca>
 800bcec:	2201      	movs	r2, #1
 800bcee:	2900      	cmp	r1, #0
 800bcf0:	dce0      	bgt.n	800bcb4 <_printf_float+0x1b4>
 800bcf2:	1892      	adds	r2, r2, r2
 800bcf4:	1a52      	subs	r2, r2, r1
 800bcf6:	e7dd      	b.n	800bcb4 <_printf_float+0x1b4>
 800bcf8:	682a      	ldr	r2, [r5, #0]
 800bcfa:	0553      	lsls	r3, r2, #21
 800bcfc:	d408      	bmi.n	800bd10 <_printf_float+0x210>
 800bcfe:	692b      	ldr	r3, [r5, #16]
 800bd00:	003a      	movs	r2, r7
 800bd02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd08:	47a0      	blx	r4
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d129      	bne.n	800bd62 <_printf_float+0x262>
 800bd0e:	e753      	b.n	800bbb8 <_printf_float+0xb8>
 800bd10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd12:	2b65      	cmp	r3, #101	@ 0x65
 800bd14:	d800      	bhi.n	800bd18 <_printf_float+0x218>
 800bd16:	e0da      	b.n	800bece <_printf_float+0x3ce>
 800bd18:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bd1a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f7f4 fb94 	bl	800044c <__aeabi_dcmpeq>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d033      	beq.n	800bd90 <_printf_float+0x290>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4a37      	ldr	r2, [pc, #220]	@ (800be08 <_printf_float+0x308>)
 800bd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd32:	47a0      	blx	r4
 800bd34:	3001      	adds	r0, #1
 800bd36:	d100      	bne.n	800bd3a <_printf_float+0x23a>
 800bd38:	e73e      	b.n	800bbb8 <_printf_float+0xb8>
 800bd3a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bd3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd3e:	42b3      	cmp	r3, r6
 800bd40:	db02      	blt.n	800bd48 <_printf_float+0x248>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	07db      	lsls	r3, r3, #31
 800bd46:	d50c      	bpl.n	800bd62 <_printf_float+0x262>
 800bd48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd52:	47a0      	blx	r4
 800bd54:	2400      	movs	r4, #0
 800bd56:	3001      	adds	r0, #1
 800bd58:	d100      	bne.n	800bd5c <_printf_float+0x25c>
 800bd5a:	e72d      	b.n	800bbb8 <_printf_float+0xb8>
 800bd5c:	1e73      	subs	r3, r6, #1
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	dc0a      	bgt.n	800bd78 <_printf_float+0x278>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	079b      	lsls	r3, r3, #30
 800bd66:	d500      	bpl.n	800bd6a <_printf_float+0x26a>
 800bd68:	e105      	b.n	800bf76 <_printf_float+0x476>
 800bd6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd6c:	68e8      	ldr	r0, [r5, #12]
 800bd6e:	4298      	cmp	r0, r3
 800bd70:	db00      	blt.n	800bd74 <_printf_float+0x274>
 800bd72:	e723      	b.n	800bbbc <_printf_float+0xbc>
 800bd74:	0018      	movs	r0, r3
 800bd76:	e721      	b.n	800bbbc <_printf_float+0xbc>
 800bd78:	002a      	movs	r2, r5
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bd82:	321a      	adds	r2, #26
 800bd84:	47b8      	blx	r7
 800bd86:	3001      	adds	r0, #1
 800bd88:	d100      	bne.n	800bd8c <_printf_float+0x28c>
 800bd8a:	e715      	b.n	800bbb8 <_printf_float+0xb8>
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	e7e5      	b.n	800bd5c <_printf_float+0x25c>
 800bd90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dc3a      	bgt.n	800be0c <_printf_float+0x30c>
 800bd96:	2301      	movs	r3, #1
 800bd98:	4a1b      	ldr	r2, [pc, #108]	@ (800be08 <_printf_float+0x308>)
 800bd9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bda0:	47a0      	blx	r4
 800bda2:	3001      	adds	r0, #1
 800bda4:	d100      	bne.n	800bda8 <_printf_float+0x2a8>
 800bda6:	e707      	b.n	800bbb8 <_printf_float+0xb8>
 800bda8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bdaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdac:	4333      	orrs	r3, r6
 800bdae:	d102      	bne.n	800bdb6 <_printf_float+0x2b6>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	07db      	lsls	r3, r3, #31
 800bdb4:	d5d5      	bpl.n	800bd62 <_printf_float+0x262>
 800bdb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdbe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bdc0:	47a0      	blx	r4
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d100      	bne.n	800bdca <_printf_float+0x2ca>
 800bdc8:	e6f6      	b.n	800bbb8 <_printf_float+0xb8>
 800bdca:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bdd0:	425b      	negs	r3, r3
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	dc01      	bgt.n	800bdda <_printf_float+0x2da>
 800bdd6:	0033      	movs	r3, r6
 800bdd8:	e792      	b.n	800bd00 <_printf_float+0x200>
 800bdda:	002a      	movs	r2, r5
 800bddc:	2301      	movs	r3, #1
 800bdde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bde0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bde2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bde4:	321a      	adds	r2, #26
 800bde6:	47a0      	blx	r4
 800bde8:	3001      	adds	r0, #1
 800bdea:	d100      	bne.n	800bdee <_printf_float+0x2ee>
 800bdec:	e6e4      	b.n	800bbb8 <_printf_float+0xb8>
 800bdee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	e7ea      	b.n	800bdca <_printf_float+0x2ca>
 800bdf4:	7fefffff 	.word	0x7fefffff
 800bdf8:	08010918 	.word	0x08010918
 800bdfc:	0801091c 	.word	0x0801091c
 800be00:	08010920 	.word	0x08010920
 800be04:	08010924 	.word	0x08010924
 800be08:	08010928 	.word	0x08010928
 800be0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be0e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800be10:	930c      	str	r3, [sp, #48]	@ 0x30
 800be12:	429e      	cmp	r6, r3
 800be14:	dd00      	ble.n	800be18 <_printf_float+0x318>
 800be16:	001e      	movs	r6, r3
 800be18:	2e00      	cmp	r6, #0
 800be1a:	dc31      	bgt.n	800be80 <_printf_float+0x380>
 800be1c:	43f3      	mvns	r3, r6
 800be1e:	2400      	movs	r4, #0
 800be20:	17db      	asrs	r3, r3, #31
 800be22:	4033      	ands	r3, r6
 800be24:	930e      	str	r3, [sp, #56]	@ 0x38
 800be26:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800be28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2a:	1af3      	subs	r3, r6, r3
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	dc30      	bgt.n	800be92 <_printf_float+0x392>
 800be30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be34:	429a      	cmp	r2, r3
 800be36:	dc38      	bgt.n	800beaa <_printf_float+0x3aa>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	07db      	lsls	r3, r3, #31
 800be3c:	d435      	bmi.n	800beaa <_printf_float+0x3aa>
 800be3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800be40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be44:	1b9b      	subs	r3, r3, r6
 800be46:	1b14      	subs	r4, r2, r4
 800be48:	429c      	cmp	r4, r3
 800be4a:	dd00      	ble.n	800be4e <_printf_float+0x34e>
 800be4c:	001c      	movs	r4, r3
 800be4e:	2c00      	cmp	r4, #0
 800be50:	dc34      	bgt.n	800bebc <_printf_float+0x3bc>
 800be52:	43e3      	mvns	r3, r4
 800be54:	2600      	movs	r6, #0
 800be56:	17db      	asrs	r3, r3, #31
 800be58:	401c      	ands	r4, r3
 800be5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	1b1b      	subs	r3, r3, r4
 800be62:	42b3      	cmp	r3, r6
 800be64:	dc00      	bgt.n	800be68 <_printf_float+0x368>
 800be66:	e77c      	b.n	800bd62 <_printf_float+0x262>
 800be68:	002a      	movs	r2, r5
 800be6a:	2301      	movs	r3, #1
 800be6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800be72:	321a      	adds	r2, #26
 800be74:	47b8      	blx	r7
 800be76:	3001      	adds	r0, #1
 800be78:	d100      	bne.n	800be7c <_printf_float+0x37c>
 800be7a:	e69d      	b.n	800bbb8 <_printf_float+0xb8>
 800be7c:	3601      	adds	r6, #1
 800be7e:	e7ec      	b.n	800be5a <_printf_float+0x35a>
 800be80:	0033      	movs	r3, r6
 800be82:	003a      	movs	r2, r7
 800be84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800be8a:	47a0      	blx	r4
 800be8c:	3001      	adds	r0, #1
 800be8e:	d1c5      	bne.n	800be1c <_printf_float+0x31c>
 800be90:	e692      	b.n	800bbb8 <_printf_float+0xb8>
 800be92:	002a      	movs	r2, r5
 800be94:	2301      	movs	r3, #1
 800be96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be9c:	321a      	adds	r2, #26
 800be9e:	47b0      	blx	r6
 800bea0:	3001      	adds	r0, #1
 800bea2:	d100      	bne.n	800bea6 <_printf_float+0x3a6>
 800bea4:	e688      	b.n	800bbb8 <_printf_float+0xb8>
 800bea6:	3401      	adds	r4, #1
 800bea8:	e7bd      	b.n	800be26 <_printf_float+0x326>
 800beaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800beae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800beb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800beb4:	47a0      	blx	r4
 800beb6:	3001      	adds	r0, #1
 800beb8:	d1c1      	bne.n	800be3e <_printf_float+0x33e>
 800beba:	e67d      	b.n	800bbb8 <_printf_float+0xb8>
 800bebc:	19ba      	adds	r2, r7, r6
 800bebe:	0023      	movs	r3, r4
 800bec0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bec4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bec6:	47b0      	blx	r6
 800bec8:	3001      	adds	r0, #1
 800beca:	d1c2      	bne.n	800be52 <_printf_float+0x352>
 800becc:	e674      	b.n	800bbb8 <_printf_float+0xb8>
 800bece:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bed0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	dc02      	bgt.n	800bedc <_printf_float+0x3dc>
 800bed6:	2301      	movs	r3, #1
 800bed8:	421a      	tst	r2, r3
 800beda:	d039      	beq.n	800bf50 <_printf_float+0x450>
 800bedc:	2301      	movs	r3, #1
 800bede:	003a      	movs	r2, r7
 800bee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bee4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bee6:	47b0      	blx	r6
 800bee8:	3001      	adds	r0, #1
 800beea:	d100      	bne.n	800beee <_printf_float+0x3ee>
 800beec:	e664      	b.n	800bbb8 <_printf_float+0xb8>
 800beee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bef4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bef8:	47b0      	blx	r6
 800befa:	3001      	adds	r0, #1
 800befc:	d100      	bne.n	800bf00 <_printf_float+0x400>
 800befe:	e65b      	b.n	800bbb8 <_printf_float+0xb8>
 800bf00:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bf02:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bf04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf06:	2200      	movs	r2, #0
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f7f4 fa9d 	bl	800044c <__aeabi_dcmpeq>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d11a      	bne.n	800bf4c <_printf_float+0x44c>
 800bf16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf18:	1c7a      	adds	r2, r7, #1
 800bf1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf1e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bf20:	47b0      	blx	r6
 800bf22:	3001      	adds	r0, #1
 800bf24:	d10e      	bne.n	800bf44 <_printf_float+0x444>
 800bf26:	e647      	b.n	800bbb8 <_printf_float+0xb8>
 800bf28:	002a      	movs	r2, r5
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bf32:	321a      	adds	r2, #26
 800bf34:	47b8      	blx	r7
 800bf36:	3001      	adds	r0, #1
 800bf38:	d100      	bne.n	800bf3c <_printf_float+0x43c>
 800bf3a:	e63d      	b.n	800bbb8 <_printf_float+0xb8>
 800bf3c:	3601      	adds	r6, #1
 800bf3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf40:	429e      	cmp	r6, r3
 800bf42:	dbf1      	blt.n	800bf28 <_printf_float+0x428>
 800bf44:	002a      	movs	r2, r5
 800bf46:	0023      	movs	r3, r4
 800bf48:	3250      	adds	r2, #80	@ 0x50
 800bf4a:	e6da      	b.n	800bd02 <_printf_float+0x202>
 800bf4c:	2600      	movs	r6, #0
 800bf4e:	e7f6      	b.n	800bf3e <_printf_float+0x43e>
 800bf50:	003a      	movs	r2, r7
 800bf52:	e7e2      	b.n	800bf1a <_printf_float+0x41a>
 800bf54:	002a      	movs	r2, r5
 800bf56:	2301      	movs	r3, #1
 800bf58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bf5e:	3219      	adds	r2, #25
 800bf60:	47b0      	blx	r6
 800bf62:	3001      	adds	r0, #1
 800bf64:	d100      	bne.n	800bf68 <_printf_float+0x468>
 800bf66:	e627      	b.n	800bbb8 <_printf_float+0xb8>
 800bf68:	3401      	adds	r4, #1
 800bf6a:	68eb      	ldr	r3, [r5, #12]
 800bf6c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bf6e:	1a9b      	subs	r3, r3, r2
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	dcef      	bgt.n	800bf54 <_printf_float+0x454>
 800bf74:	e6f9      	b.n	800bd6a <_printf_float+0x26a>
 800bf76:	2400      	movs	r4, #0
 800bf78:	e7f7      	b.n	800bf6a <_printf_float+0x46a>
 800bf7a:	46c0      	nop			@ (mov r8, r8)

0800bf7c <_printf_common>:
 800bf7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf7e:	0016      	movs	r6, r2
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	688a      	ldr	r2, [r1, #8]
 800bf84:	690b      	ldr	r3, [r1, #16]
 800bf86:	000c      	movs	r4, r1
 800bf88:	9000      	str	r0, [sp, #0]
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	da00      	bge.n	800bf90 <_printf_common+0x14>
 800bf8e:	0013      	movs	r3, r2
 800bf90:	0022      	movs	r2, r4
 800bf92:	6033      	str	r3, [r6, #0]
 800bf94:	3243      	adds	r2, #67	@ 0x43
 800bf96:	7812      	ldrb	r2, [r2, #0]
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	d001      	beq.n	800bfa0 <_printf_common+0x24>
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	6033      	str	r3, [r6, #0]
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	069b      	lsls	r3, r3, #26
 800bfa4:	d502      	bpl.n	800bfac <_printf_common+0x30>
 800bfa6:	6833      	ldr	r3, [r6, #0]
 800bfa8:	3302      	adds	r3, #2
 800bfaa:	6033      	str	r3, [r6, #0]
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	2306      	movs	r3, #6
 800bfb0:	0015      	movs	r5, r2
 800bfb2:	401d      	ands	r5, r3
 800bfb4:	421a      	tst	r2, r3
 800bfb6:	d027      	beq.n	800c008 <_printf_common+0x8c>
 800bfb8:	0023      	movs	r3, r4
 800bfba:	3343      	adds	r3, #67	@ 0x43
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	1e5a      	subs	r2, r3, #1
 800bfc0:	4193      	sbcs	r3, r2
 800bfc2:	6822      	ldr	r2, [r4, #0]
 800bfc4:	0692      	lsls	r2, r2, #26
 800bfc6:	d430      	bmi.n	800c02a <_printf_common+0xae>
 800bfc8:	0022      	movs	r2, r4
 800bfca:	9901      	ldr	r1, [sp, #4]
 800bfcc:	9800      	ldr	r0, [sp, #0]
 800bfce:	9d08      	ldr	r5, [sp, #32]
 800bfd0:	3243      	adds	r2, #67	@ 0x43
 800bfd2:	47a8      	blx	r5
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d025      	beq.n	800c024 <_printf_common+0xa8>
 800bfd8:	2206      	movs	r2, #6
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	2500      	movs	r5, #0
 800bfde:	4013      	ands	r3, r2
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d105      	bne.n	800bff0 <_printf_common+0x74>
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	68e5      	ldr	r5, [r4, #12]
 800bfe8:	1aed      	subs	r5, r5, r3
 800bfea:	43eb      	mvns	r3, r5
 800bfec:	17db      	asrs	r3, r3, #31
 800bfee:	401d      	ands	r5, r3
 800bff0:	68a3      	ldr	r3, [r4, #8]
 800bff2:	6922      	ldr	r2, [r4, #16]
 800bff4:	4293      	cmp	r3, r2
 800bff6:	dd01      	ble.n	800bffc <_printf_common+0x80>
 800bff8:	1a9b      	subs	r3, r3, r2
 800bffa:	18ed      	adds	r5, r5, r3
 800bffc:	2600      	movs	r6, #0
 800bffe:	42b5      	cmp	r5, r6
 800c000:	d120      	bne.n	800c044 <_printf_common+0xc8>
 800c002:	2000      	movs	r0, #0
 800c004:	e010      	b.n	800c028 <_printf_common+0xac>
 800c006:	3501      	adds	r5, #1
 800c008:	68e3      	ldr	r3, [r4, #12]
 800c00a:	6832      	ldr	r2, [r6, #0]
 800c00c:	1a9b      	subs	r3, r3, r2
 800c00e:	42ab      	cmp	r3, r5
 800c010:	ddd2      	ble.n	800bfb8 <_printf_common+0x3c>
 800c012:	0022      	movs	r2, r4
 800c014:	2301      	movs	r3, #1
 800c016:	9901      	ldr	r1, [sp, #4]
 800c018:	9800      	ldr	r0, [sp, #0]
 800c01a:	9f08      	ldr	r7, [sp, #32]
 800c01c:	3219      	adds	r2, #25
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	d1f0      	bne.n	800c006 <_printf_common+0x8a>
 800c024:	2001      	movs	r0, #1
 800c026:	4240      	negs	r0, r0
 800c028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c02a:	2030      	movs	r0, #48	@ 0x30
 800c02c:	18e1      	adds	r1, r4, r3
 800c02e:	3143      	adds	r1, #67	@ 0x43
 800c030:	7008      	strb	r0, [r1, #0]
 800c032:	0021      	movs	r1, r4
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	3145      	adds	r1, #69	@ 0x45
 800c038:	7809      	ldrb	r1, [r1, #0]
 800c03a:	18a2      	adds	r2, r4, r2
 800c03c:	3243      	adds	r2, #67	@ 0x43
 800c03e:	3302      	adds	r3, #2
 800c040:	7011      	strb	r1, [r2, #0]
 800c042:	e7c1      	b.n	800bfc8 <_printf_common+0x4c>
 800c044:	0022      	movs	r2, r4
 800c046:	2301      	movs	r3, #1
 800c048:	9901      	ldr	r1, [sp, #4]
 800c04a:	9800      	ldr	r0, [sp, #0]
 800c04c:	9f08      	ldr	r7, [sp, #32]
 800c04e:	321a      	adds	r2, #26
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	d0e6      	beq.n	800c024 <_printf_common+0xa8>
 800c056:	3601      	adds	r6, #1
 800c058:	e7d1      	b.n	800bffe <_printf_common+0x82>
	...

0800c05c <_printf_i>:
 800c05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c05e:	b08b      	sub	sp, #44	@ 0x2c
 800c060:	9206      	str	r2, [sp, #24]
 800c062:	000a      	movs	r2, r1
 800c064:	3243      	adds	r2, #67	@ 0x43
 800c066:	9307      	str	r3, [sp, #28]
 800c068:	9005      	str	r0, [sp, #20]
 800c06a:	9203      	str	r2, [sp, #12]
 800c06c:	7e0a      	ldrb	r2, [r1, #24]
 800c06e:	000c      	movs	r4, r1
 800c070:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c072:	2a78      	cmp	r2, #120	@ 0x78
 800c074:	d809      	bhi.n	800c08a <_printf_i+0x2e>
 800c076:	2a62      	cmp	r2, #98	@ 0x62
 800c078:	d80b      	bhi.n	800c092 <_printf_i+0x36>
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	d100      	bne.n	800c080 <_printf_i+0x24>
 800c07e:	e0bc      	b.n	800c1fa <_printf_i+0x19e>
 800c080:	497b      	ldr	r1, [pc, #492]	@ (800c270 <_printf_i+0x214>)
 800c082:	9104      	str	r1, [sp, #16]
 800c084:	2a58      	cmp	r2, #88	@ 0x58
 800c086:	d100      	bne.n	800c08a <_printf_i+0x2e>
 800c088:	e090      	b.n	800c1ac <_printf_i+0x150>
 800c08a:	0025      	movs	r5, r4
 800c08c:	3542      	adds	r5, #66	@ 0x42
 800c08e:	702a      	strb	r2, [r5, #0]
 800c090:	e022      	b.n	800c0d8 <_printf_i+0x7c>
 800c092:	0010      	movs	r0, r2
 800c094:	3863      	subs	r0, #99	@ 0x63
 800c096:	2815      	cmp	r0, #21
 800c098:	d8f7      	bhi.n	800c08a <_printf_i+0x2e>
 800c09a:	f7f4 f847 	bl	800012c <__gnu_thumb1_case_shi>
 800c09e:	0016      	.short	0x0016
 800c0a0:	fff6001f 	.word	0xfff6001f
 800c0a4:	fff6fff6 	.word	0xfff6fff6
 800c0a8:	001ffff6 	.word	0x001ffff6
 800c0ac:	fff6fff6 	.word	0xfff6fff6
 800c0b0:	fff6fff6 	.word	0xfff6fff6
 800c0b4:	003600a1 	.word	0x003600a1
 800c0b8:	fff60080 	.word	0xfff60080
 800c0bc:	00b2fff6 	.word	0x00b2fff6
 800c0c0:	0036fff6 	.word	0x0036fff6
 800c0c4:	fff6fff6 	.word	0xfff6fff6
 800c0c8:	0084      	.short	0x0084
 800c0ca:	0025      	movs	r5, r4
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	3542      	adds	r5, #66	@ 0x42
 800c0d0:	1d11      	adds	r1, r2, #4
 800c0d2:	6019      	str	r1, [r3, #0]
 800c0d4:	6813      	ldr	r3, [r2, #0]
 800c0d6:	702b      	strb	r3, [r5, #0]
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e0a0      	b.n	800c21e <_printf_i+0x1c2>
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	6809      	ldr	r1, [r1, #0]
 800c0e0:	1d02      	adds	r2, r0, #4
 800c0e2:	060d      	lsls	r5, r1, #24
 800c0e4:	d50b      	bpl.n	800c0fe <_printf_i+0xa2>
 800c0e6:	6806      	ldr	r6, [r0, #0]
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	da03      	bge.n	800c0f6 <_printf_i+0x9a>
 800c0ee:	232d      	movs	r3, #45	@ 0x2d
 800c0f0:	9a03      	ldr	r2, [sp, #12]
 800c0f2:	4276      	negs	r6, r6
 800c0f4:	7013      	strb	r3, [r2, #0]
 800c0f6:	4b5e      	ldr	r3, [pc, #376]	@ (800c270 <_printf_i+0x214>)
 800c0f8:	270a      	movs	r7, #10
 800c0fa:	9304      	str	r3, [sp, #16]
 800c0fc:	e018      	b.n	800c130 <_printf_i+0xd4>
 800c0fe:	6806      	ldr	r6, [r0, #0]
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	0649      	lsls	r1, r1, #25
 800c104:	d5f1      	bpl.n	800c0ea <_printf_i+0x8e>
 800c106:	b236      	sxth	r6, r6
 800c108:	e7ef      	b.n	800c0ea <_printf_i+0x8e>
 800c10a:	6808      	ldr	r0, [r1, #0]
 800c10c:	6819      	ldr	r1, [r3, #0]
 800c10e:	c940      	ldmia	r1!, {r6}
 800c110:	0605      	lsls	r5, r0, #24
 800c112:	d402      	bmi.n	800c11a <_printf_i+0xbe>
 800c114:	0640      	lsls	r0, r0, #25
 800c116:	d500      	bpl.n	800c11a <_printf_i+0xbe>
 800c118:	b2b6      	uxth	r6, r6
 800c11a:	6019      	str	r1, [r3, #0]
 800c11c:	4b54      	ldr	r3, [pc, #336]	@ (800c270 <_printf_i+0x214>)
 800c11e:	270a      	movs	r7, #10
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	2a6f      	cmp	r2, #111	@ 0x6f
 800c124:	d100      	bne.n	800c128 <_printf_i+0xcc>
 800c126:	3f02      	subs	r7, #2
 800c128:	0023      	movs	r3, r4
 800c12a:	2200      	movs	r2, #0
 800c12c:	3343      	adds	r3, #67	@ 0x43
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	6863      	ldr	r3, [r4, #4]
 800c132:	60a3      	str	r3, [r4, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	db03      	blt.n	800c140 <_printf_i+0xe4>
 800c138:	2104      	movs	r1, #4
 800c13a:	6822      	ldr	r2, [r4, #0]
 800c13c:	438a      	bics	r2, r1
 800c13e:	6022      	str	r2, [r4, #0]
 800c140:	2e00      	cmp	r6, #0
 800c142:	d102      	bne.n	800c14a <_printf_i+0xee>
 800c144:	9d03      	ldr	r5, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00c      	beq.n	800c164 <_printf_i+0x108>
 800c14a:	9d03      	ldr	r5, [sp, #12]
 800c14c:	0030      	movs	r0, r6
 800c14e:	0039      	movs	r1, r7
 800c150:	f7f4 f87c 	bl	800024c <__aeabi_uidivmod>
 800c154:	9b04      	ldr	r3, [sp, #16]
 800c156:	3d01      	subs	r5, #1
 800c158:	5c5b      	ldrb	r3, [r3, r1]
 800c15a:	702b      	strb	r3, [r5, #0]
 800c15c:	0033      	movs	r3, r6
 800c15e:	0006      	movs	r6, r0
 800c160:	429f      	cmp	r7, r3
 800c162:	d9f3      	bls.n	800c14c <_printf_i+0xf0>
 800c164:	2f08      	cmp	r7, #8
 800c166:	d109      	bne.n	800c17c <_printf_i+0x120>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07db      	lsls	r3, r3, #31
 800c16c:	d506      	bpl.n	800c17c <_printf_i+0x120>
 800c16e:	6862      	ldr	r2, [r4, #4]
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	429a      	cmp	r2, r3
 800c174:	dc02      	bgt.n	800c17c <_printf_i+0x120>
 800c176:	2330      	movs	r3, #48	@ 0x30
 800c178:	3d01      	subs	r5, #1
 800c17a:	702b      	strb	r3, [r5, #0]
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	1b5b      	subs	r3, r3, r5
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	9b07      	ldr	r3, [sp, #28]
 800c184:	0021      	movs	r1, r4
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	9805      	ldr	r0, [sp, #20]
 800c18a:	9b06      	ldr	r3, [sp, #24]
 800c18c:	aa09      	add	r2, sp, #36	@ 0x24
 800c18e:	f7ff fef5 	bl	800bf7c <_printf_common>
 800c192:	3001      	adds	r0, #1
 800c194:	d148      	bne.n	800c228 <_printf_i+0x1cc>
 800c196:	2001      	movs	r0, #1
 800c198:	4240      	negs	r0, r0
 800c19a:	b00b      	add	sp, #44	@ 0x2c
 800c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19e:	2220      	movs	r2, #32
 800c1a0:	6809      	ldr	r1, [r1, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	6022      	str	r2, [r4, #0]
 800c1a6:	2278      	movs	r2, #120	@ 0x78
 800c1a8:	4932      	ldr	r1, [pc, #200]	@ (800c274 <_printf_i+0x218>)
 800c1aa:	9104      	str	r1, [sp, #16]
 800c1ac:	0021      	movs	r1, r4
 800c1ae:	3145      	adds	r1, #69	@ 0x45
 800c1b0:	700a      	strb	r2, [r1, #0]
 800c1b2:	6819      	ldr	r1, [r3, #0]
 800c1b4:	6822      	ldr	r2, [r4, #0]
 800c1b6:	c940      	ldmia	r1!, {r6}
 800c1b8:	0610      	lsls	r0, r2, #24
 800c1ba:	d402      	bmi.n	800c1c2 <_printf_i+0x166>
 800c1bc:	0650      	lsls	r0, r2, #25
 800c1be:	d500      	bpl.n	800c1c2 <_printf_i+0x166>
 800c1c0:	b2b6      	uxth	r6, r6
 800c1c2:	6019      	str	r1, [r3, #0]
 800c1c4:	07d3      	lsls	r3, r2, #31
 800c1c6:	d502      	bpl.n	800c1ce <_printf_i+0x172>
 800c1c8:	2320      	movs	r3, #32
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	d001      	beq.n	800c1d6 <_printf_i+0x17a>
 800c1d2:	2710      	movs	r7, #16
 800c1d4:	e7a8      	b.n	800c128 <_printf_i+0xcc>
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	4393      	bics	r3, r2
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	e7f8      	b.n	800c1d2 <_printf_i+0x176>
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	680d      	ldr	r5, [r1, #0]
 800c1e4:	1d10      	adds	r0, r2, #4
 800c1e6:	6949      	ldr	r1, [r1, #20]
 800c1e8:	6018      	str	r0, [r3, #0]
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	062e      	lsls	r6, r5, #24
 800c1ee:	d501      	bpl.n	800c1f4 <_printf_i+0x198>
 800c1f0:	6019      	str	r1, [r3, #0]
 800c1f2:	e002      	b.n	800c1fa <_printf_i+0x19e>
 800c1f4:	066d      	lsls	r5, r5, #25
 800c1f6:	d5fb      	bpl.n	800c1f0 <_printf_i+0x194>
 800c1f8:	8019      	strh	r1, [r3, #0]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9d03      	ldr	r5, [sp, #12]
 800c1fe:	6123      	str	r3, [r4, #16]
 800c200:	e7bf      	b.n	800c182 <_printf_i+0x126>
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	1d11      	adds	r1, r2, #4
 800c206:	6019      	str	r1, [r3, #0]
 800c208:	6815      	ldr	r5, [r2, #0]
 800c20a:	2100      	movs	r1, #0
 800c20c:	0028      	movs	r0, r5
 800c20e:	6862      	ldr	r2, [r4, #4]
 800c210:	f000 fc2b 	bl	800ca6a <memchr>
 800c214:	2800      	cmp	r0, #0
 800c216:	d001      	beq.n	800c21c <_printf_i+0x1c0>
 800c218:	1b40      	subs	r0, r0, r5
 800c21a:	6060      	str	r0, [r4, #4]
 800c21c:	6863      	ldr	r3, [r4, #4]
 800c21e:	6123      	str	r3, [r4, #16]
 800c220:	2300      	movs	r3, #0
 800c222:	9a03      	ldr	r2, [sp, #12]
 800c224:	7013      	strb	r3, [r2, #0]
 800c226:	e7ac      	b.n	800c182 <_printf_i+0x126>
 800c228:	002a      	movs	r2, r5
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	9906      	ldr	r1, [sp, #24]
 800c22e:	9805      	ldr	r0, [sp, #20]
 800c230:	9d07      	ldr	r5, [sp, #28]
 800c232:	47a8      	blx	r5
 800c234:	3001      	adds	r0, #1
 800c236:	d0ae      	beq.n	800c196 <_printf_i+0x13a>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	079b      	lsls	r3, r3, #30
 800c23c:	d415      	bmi.n	800c26a <_printf_i+0x20e>
 800c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c240:	68e0      	ldr	r0, [r4, #12]
 800c242:	4298      	cmp	r0, r3
 800c244:	daa9      	bge.n	800c19a <_printf_i+0x13e>
 800c246:	0018      	movs	r0, r3
 800c248:	e7a7      	b.n	800c19a <_printf_i+0x13e>
 800c24a:	0022      	movs	r2, r4
 800c24c:	2301      	movs	r3, #1
 800c24e:	9906      	ldr	r1, [sp, #24]
 800c250:	9805      	ldr	r0, [sp, #20]
 800c252:	9e07      	ldr	r6, [sp, #28]
 800c254:	3219      	adds	r2, #25
 800c256:	47b0      	blx	r6
 800c258:	3001      	adds	r0, #1
 800c25a:	d09c      	beq.n	800c196 <_printf_i+0x13a>
 800c25c:	3501      	adds	r5, #1
 800c25e:	68e3      	ldr	r3, [r4, #12]
 800c260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c262:	1a9b      	subs	r3, r3, r2
 800c264:	42ab      	cmp	r3, r5
 800c266:	dcf0      	bgt.n	800c24a <_printf_i+0x1ee>
 800c268:	e7e9      	b.n	800c23e <_printf_i+0x1e2>
 800c26a:	2500      	movs	r5, #0
 800c26c:	e7f7      	b.n	800c25e <_printf_i+0x202>
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	0801092a 	.word	0x0801092a
 800c274:	0801093b 	.word	0x0801093b

0800c278 <_scanf_float>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	b08b      	sub	sp, #44	@ 0x2c
 800c27c:	0016      	movs	r6, r2
 800c27e:	9003      	str	r0, [sp, #12]
 800c280:	22ae      	movs	r2, #174	@ 0xae
 800c282:	2000      	movs	r0, #0
 800c284:	9307      	str	r3, [sp, #28]
 800c286:	688b      	ldr	r3, [r1, #8]
 800c288:	000c      	movs	r4, r1
 800c28a:	1e59      	subs	r1, r3, #1
 800c28c:	0052      	lsls	r2, r2, #1
 800c28e:	9006      	str	r0, [sp, #24]
 800c290:	4291      	cmp	r1, r2
 800c292:	d905      	bls.n	800c2a0 <_scanf_float+0x28>
 800c294:	3b5e      	subs	r3, #94	@ 0x5e
 800c296:	3bff      	subs	r3, #255	@ 0xff
 800c298:	9306      	str	r3, [sp, #24]
 800c29a:	235e      	movs	r3, #94	@ 0x5e
 800c29c:	33ff      	adds	r3, #255	@ 0xff
 800c29e:	60a3      	str	r3, [r4, #8]
 800c2a0:	23f0      	movs	r3, #240	@ 0xf0
 800c2a2:	6822      	ldr	r2, [r4, #0]
 800c2a4:	00db      	lsls	r3, r3, #3
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	0023      	movs	r3, r4
 800c2ac:	2500      	movs	r5, #0
 800c2ae:	331c      	adds	r3, #28
 800c2b0:	001f      	movs	r7, r3
 800c2b2:	9304      	str	r3, [sp, #16]
 800c2b4:	9502      	str	r5, [sp, #8]
 800c2b6:	9509      	str	r5, [sp, #36]	@ 0x24
 800c2b8:	9508      	str	r5, [sp, #32]
 800c2ba:	9501      	str	r5, [sp, #4]
 800c2bc:	9505      	str	r5, [sp, #20]
 800c2be:	68a2      	ldr	r2, [r4, #8]
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	d00a      	beq.n	800c2da <_scanf_float+0x62>
 800c2c4:	6833      	ldr	r3, [r6, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b4e      	cmp	r3, #78	@ 0x4e
 800c2ca:	d844      	bhi.n	800c356 <_scanf_float+0xde>
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	2b40      	cmp	r3, #64	@ 0x40
 800c2d0:	d82c      	bhi.n	800c32c <_scanf_float+0xb4>
 800c2d2:	382b      	subs	r0, #43	@ 0x2b
 800c2d4:	b2c1      	uxtb	r1, r0
 800c2d6:	290e      	cmp	r1, #14
 800c2d8:	d92a      	bls.n	800c330 <_scanf_float+0xb8>
 800c2da:	9b01      	ldr	r3, [sp, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <_scanf_float+0x70>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	4aa6      	ldr	r2, [pc, #664]	@ (800c57c <_scanf_float+0x304>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	9b02      	ldr	r3, [sp, #8]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d900      	bls.n	800c2f2 <_scanf_float+0x7a>
 800c2f0:	e0fe      	b.n	800c4f0 <_scanf_float+0x278>
 800c2f2:	25be      	movs	r5, #190	@ 0xbe
 800c2f4:	006d      	lsls	r5, r5, #1
 800c2f6:	9b04      	ldr	r3, [sp, #16]
 800c2f8:	429f      	cmp	r7, r3
 800c2fa:	d900      	bls.n	800c2fe <_scanf_float+0x86>
 800c2fc:	e0ee      	b.n	800c4dc <_scanf_float+0x264>
 800c2fe:	2001      	movs	r0, #1
 800c300:	b00b      	add	sp, #44	@ 0x2c
 800c302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c304:	0018      	movs	r0, r3
 800c306:	3861      	subs	r0, #97	@ 0x61
 800c308:	280d      	cmp	r0, #13
 800c30a:	d8e6      	bhi.n	800c2da <_scanf_float+0x62>
 800c30c:	f7f3 ff0e 	bl	800012c <__gnu_thumb1_case_shi>
 800c310:	ffe50089 	.word	0xffe50089
 800c314:	ffe5ffe5 	.word	0xffe5ffe5
 800c318:	00a700bb 	.word	0x00a700bb
 800c31c:	ffe5ffe5 	.word	0xffe5ffe5
 800c320:	ffe5008f 	.word	0xffe5008f
 800c324:	ffe5ffe5 	.word	0xffe5ffe5
 800c328:	006bffe5 	.word	0x006bffe5
 800c32c:	3841      	subs	r0, #65	@ 0x41
 800c32e:	e7eb      	b.n	800c308 <_scanf_float+0x90>
 800c330:	280e      	cmp	r0, #14
 800c332:	d8d2      	bhi.n	800c2da <_scanf_float+0x62>
 800c334:	f7f3 fefa 	bl	800012c <__gnu_thumb1_case_shi>
 800c338:	ffd1004f 	.word	0xffd1004f
 800c33c:	009d004f 	.word	0x009d004f
 800c340:	0021ffd1 	.word	0x0021ffd1
 800c344:	00410041 	.word	0x00410041
 800c348:	00410041 	.word	0x00410041
 800c34c:	00410041 	.word	0x00410041
 800c350:	00410041 	.word	0x00410041
 800c354:	0041      	.short	0x0041
 800c356:	2b6e      	cmp	r3, #110	@ 0x6e
 800c358:	d80a      	bhi.n	800c370 <_scanf_float+0xf8>
 800c35a:	2b60      	cmp	r3, #96	@ 0x60
 800c35c:	d8d2      	bhi.n	800c304 <_scanf_float+0x8c>
 800c35e:	2b54      	cmp	r3, #84	@ 0x54
 800c360:	d100      	bne.n	800c364 <_scanf_float+0xec>
 800c362:	e081      	b.n	800c468 <_scanf_float+0x1f0>
 800c364:	2b59      	cmp	r3, #89	@ 0x59
 800c366:	d1b8      	bne.n	800c2da <_scanf_float+0x62>
 800c368:	2d07      	cmp	r5, #7
 800c36a:	d1b6      	bne.n	800c2da <_scanf_float+0x62>
 800c36c:	2508      	movs	r5, #8
 800c36e:	e02f      	b.n	800c3d0 <_scanf_float+0x158>
 800c370:	2b74      	cmp	r3, #116	@ 0x74
 800c372:	d079      	beq.n	800c468 <_scanf_float+0x1f0>
 800c374:	2b79      	cmp	r3, #121	@ 0x79
 800c376:	d0f7      	beq.n	800c368 <_scanf_float+0xf0>
 800c378:	e7af      	b.n	800c2da <_scanf_float+0x62>
 800c37a:	6821      	ldr	r1, [r4, #0]
 800c37c:	05c8      	lsls	r0, r1, #23
 800c37e:	d51c      	bpl.n	800c3ba <_scanf_float+0x142>
 800c380:	2380      	movs	r3, #128	@ 0x80
 800c382:	4399      	bics	r1, r3
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	6021      	str	r1, [r4, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	9b06      	ldr	r3, [sp, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <_scanf_float+0x122>
 800c392:	3b01      	subs	r3, #1
 800c394:	3201      	adds	r2, #1
 800c396:	9306      	str	r3, [sp, #24]
 800c398:	60a2      	str	r2, [r4, #8]
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	60a3      	str	r3, [r4, #8]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	6123      	str	r3, [r4, #16]
 800c3a6:	6873      	ldr	r3, [r6, #4]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	6073      	str	r3, [r6, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dc00      	bgt.n	800c3b2 <_scanf_float+0x13a>
 800c3b0:	e08a      	b.n	800c4c8 <_scanf_float+0x250>
 800c3b2:	6833      	ldr	r3, [r6, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	6033      	str	r3, [r6, #0]
 800c3b8:	e781      	b.n	800c2be <_scanf_float+0x46>
 800c3ba:	9a02      	ldr	r2, [sp, #8]
 800c3bc:	1951      	adds	r1, r2, r5
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d000      	beq.n	800c3c4 <_scanf_float+0x14c>
 800c3c2:	e78a      	b.n	800c2da <_scanf_float+0x62>
 800c3c4:	000d      	movs	r5, r1
 800c3c6:	6822      	ldr	r2, [r4, #0]
 800c3c8:	486d      	ldr	r0, [pc, #436]	@ (800c580 <_scanf_float+0x308>)
 800c3ca:	9102      	str	r1, [sp, #8]
 800c3cc:	4002      	ands	r2, r0
 800c3ce:	6022      	str	r2, [r4, #0]
 800c3d0:	703b      	strb	r3, [r7, #0]
 800c3d2:	3701      	adds	r7, #1
 800c3d4:	e7e1      	b.n	800c39a <_scanf_float+0x122>
 800c3d6:	2180      	movs	r1, #128	@ 0x80
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	420a      	tst	r2, r1
 800c3dc:	d100      	bne.n	800c3e0 <_scanf_float+0x168>
 800c3de:	e77c      	b.n	800c2da <_scanf_float+0x62>
 800c3e0:	438a      	bics	r2, r1
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	e7f4      	b.n	800c3d0 <_scanf_float+0x158>
 800c3e6:	9a02      	ldr	r2, [sp, #8]
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	d10f      	bne.n	800c40c <_scanf_float+0x194>
 800c3ec:	9a01      	ldr	r2, [sp, #4]
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	d10f      	bne.n	800c412 <_scanf_float+0x19a>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	21e0      	movs	r1, #224	@ 0xe0
 800c3f6:	0010      	movs	r0, r2
 800c3f8:	00c9      	lsls	r1, r1, #3
 800c3fa:	4008      	ands	r0, r1
 800c3fc:	4288      	cmp	r0, r1
 800c3fe:	d108      	bne.n	800c412 <_scanf_float+0x19a>
 800c400:	4960      	ldr	r1, [pc, #384]	@ (800c584 <_scanf_float+0x30c>)
 800c402:	400a      	ands	r2, r1
 800c404:	6022      	str	r2, [r4, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	9202      	str	r2, [sp, #8]
 800c40a:	e7e1      	b.n	800c3d0 <_scanf_float+0x158>
 800c40c:	9a02      	ldr	r2, [sp, #8]
 800c40e:	2a02      	cmp	r2, #2
 800c410:	d058      	beq.n	800c4c4 <_scanf_float+0x24c>
 800c412:	2d01      	cmp	r5, #1
 800c414:	d002      	beq.n	800c41c <_scanf_float+0x1a4>
 800c416:	2d04      	cmp	r5, #4
 800c418:	d000      	beq.n	800c41c <_scanf_float+0x1a4>
 800c41a:	e75e      	b.n	800c2da <_scanf_float+0x62>
 800c41c:	3501      	adds	r5, #1
 800c41e:	b2ed      	uxtb	r5, r5
 800c420:	e7d6      	b.n	800c3d0 <_scanf_float+0x158>
 800c422:	9a02      	ldr	r2, [sp, #8]
 800c424:	2a01      	cmp	r2, #1
 800c426:	d000      	beq.n	800c42a <_scanf_float+0x1b2>
 800c428:	e757      	b.n	800c2da <_scanf_float+0x62>
 800c42a:	2202      	movs	r2, #2
 800c42c:	e7ec      	b.n	800c408 <_scanf_float+0x190>
 800c42e:	2d00      	cmp	r5, #0
 800c430:	d110      	bne.n	800c454 <_scanf_float+0x1dc>
 800c432:	9a01      	ldr	r2, [sp, #4]
 800c434:	2a00      	cmp	r2, #0
 800c436:	d000      	beq.n	800c43a <_scanf_float+0x1c2>
 800c438:	e752      	b.n	800c2e0 <_scanf_float+0x68>
 800c43a:	6822      	ldr	r2, [r4, #0]
 800c43c:	21e0      	movs	r1, #224	@ 0xe0
 800c43e:	0010      	movs	r0, r2
 800c440:	00c9      	lsls	r1, r1, #3
 800c442:	4008      	ands	r0, r1
 800c444:	4288      	cmp	r0, r1
 800c446:	d000      	beq.n	800c44a <_scanf_float+0x1d2>
 800c448:	e11d      	b.n	800c686 <_scanf_float+0x40e>
 800c44a:	494e      	ldr	r1, [pc, #312]	@ (800c584 <_scanf_float+0x30c>)
 800c44c:	3501      	adds	r5, #1
 800c44e:	400a      	ands	r2, r1
 800c450:	6022      	str	r2, [r4, #0]
 800c452:	e7bd      	b.n	800c3d0 <_scanf_float+0x158>
 800c454:	21fd      	movs	r1, #253	@ 0xfd
 800c456:	1eea      	subs	r2, r5, #3
 800c458:	420a      	tst	r2, r1
 800c45a:	d0df      	beq.n	800c41c <_scanf_float+0x1a4>
 800c45c:	e73d      	b.n	800c2da <_scanf_float+0x62>
 800c45e:	2d02      	cmp	r5, #2
 800c460:	d000      	beq.n	800c464 <_scanf_float+0x1ec>
 800c462:	e73a      	b.n	800c2da <_scanf_float+0x62>
 800c464:	2503      	movs	r5, #3
 800c466:	e7b3      	b.n	800c3d0 <_scanf_float+0x158>
 800c468:	2d06      	cmp	r5, #6
 800c46a:	d000      	beq.n	800c46e <_scanf_float+0x1f6>
 800c46c:	e735      	b.n	800c2da <_scanf_float+0x62>
 800c46e:	2507      	movs	r5, #7
 800c470:	e7ae      	b.n	800c3d0 <_scanf_float+0x158>
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	0591      	lsls	r1, r2, #22
 800c476:	d400      	bmi.n	800c47a <_scanf_float+0x202>
 800c478:	e72f      	b.n	800c2da <_scanf_float+0x62>
 800c47a:	4943      	ldr	r1, [pc, #268]	@ (800c588 <_scanf_float+0x310>)
 800c47c:	400a      	ands	r2, r1
 800c47e:	6022      	str	r2, [r4, #0]
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	9205      	str	r2, [sp, #20]
 800c484:	e7a4      	b.n	800c3d0 <_scanf_float+0x158>
 800c486:	21a0      	movs	r1, #160	@ 0xa0
 800c488:	2080      	movs	r0, #128	@ 0x80
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	00c9      	lsls	r1, r1, #3
 800c48e:	4011      	ands	r1, r2
 800c490:	00c0      	lsls	r0, r0, #3
 800c492:	4281      	cmp	r1, r0
 800c494:	d006      	beq.n	800c4a4 <_scanf_float+0x22c>
 800c496:	4202      	tst	r2, r0
 800c498:	d100      	bne.n	800c49c <_scanf_float+0x224>
 800c49a:	e71e      	b.n	800c2da <_scanf_float+0x62>
 800c49c:	9901      	ldr	r1, [sp, #4]
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	d100      	bne.n	800c4a4 <_scanf_float+0x22c>
 800c4a2:	e0f0      	b.n	800c686 <_scanf_float+0x40e>
 800c4a4:	0591      	lsls	r1, r2, #22
 800c4a6:	d404      	bmi.n	800c4b2 <_scanf_float+0x23a>
 800c4a8:	9901      	ldr	r1, [sp, #4]
 800c4aa:	9805      	ldr	r0, [sp, #20]
 800c4ac:	9709      	str	r7, [sp, #36]	@ 0x24
 800c4ae:	1a09      	subs	r1, r1, r0
 800c4b0:	9108      	str	r1, [sp, #32]
 800c4b2:	4934      	ldr	r1, [pc, #208]	@ (800c584 <_scanf_float+0x30c>)
 800c4b4:	400a      	ands	r2, r1
 800c4b6:	21c0      	movs	r1, #192	@ 0xc0
 800c4b8:	0049      	lsls	r1, r1, #1
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	9201      	str	r2, [sp, #4]
 800c4c2:	e785      	b.n	800c3d0 <_scanf_float+0x158>
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	e79f      	b.n	800c408 <_scanf_float+0x190>
 800c4c8:	23c0      	movs	r3, #192	@ 0xc0
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	0031      	movs	r1, r6
 800c4ce:	58e3      	ldr	r3, [r4, r3]
 800c4d0:	9803      	ldr	r0, [sp, #12]
 800c4d2:	4798      	blx	r3
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d100      	bne.n	800c4da <_scanf_float+0x262>
 800c4d8:	e6f1      	b.n	800c2be <_scanf_float+0x46>
 800c4da:	e6fe      	b.n	800c2da <_scanf_float+0x62>
 800c4dc:	3f01      	subs	r7, #1
 800c4de:	5963      	ldr	r3, [r4, r5]
 800c4e0:	0032      	movs	r2, r6
 800c4e2:	7839      	ldrb	r1, [r7, #0]
 800c4e4:	9803      	ldr	r0, [sp, #12]
 800c4e6:	4798      	blx	r3
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	6123      	str	r3, [r4, #16]
 800c4ee:	e702      	b.n	800c2f6 <_scanf_float+0x7e>
 800c4f0:	1e6b      	subs	r3, r5, #1
 800c4f2:	2b06      	cmp	r3, #6
 800c4f4:	d80e      	bhi.n	800c514 <_scanf_float+0x29c>
 800c4f6:	9702      	str	r7, [sp, #8]
 800c4f8:	2d02      	cmp	r5, #2
 800c4fa:	d920      	bls.n	800c53e <_scanf_float+0x2c6>
 800c4fc:	1beb      	subs	r3, r5, r7
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	9306      	str	r3, [sp, #24]
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	9a06      	ldr	r2, [sp, #24]
 800c506:	189b      	adds	r3, r3, r2
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d127      	bne.n	800c55e <_scanf_float+0x2e6>
 800c50e:	3d03      	subs	r5, #3
 800c510:	b2ed      	uxtb	r5, r5
 800c512:	1b7f      	subs	r7, r7, r5
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	05da      	lsls	r2, r3, #23
 800c518:	d553      	bpl.n	800c5c2 <_scanf_float+0x34a>
 800c51a:	055b      	lsls	r3, r3, #21
 800c51c:	d536      	bpl.n	800c58c <_scanf_float+0x314>
 800c51e:	25be      	movs	r5, #190	@ 0xbe
 800c520:	006d      	lsls	r5, r5, #1
 800c522:	9b04      	ldr	r3, [sp, #16]
 800c524:	429f      	cmp	r7, r3
 800c526:	d800      	bhi.n	800c52a <_scanf_float+0x2b2>
 800c528:	e6e9      	b.n	800c2fe <_scanf_float+0x86>
 800c52a:	3f01      	subs	r7, #1
 800c52c:	5963      	ldr	r3, [r4, r5]
 800c52e:	0032      	movs	r2, r6
 800c530:	7839      	ldrb	r1, [r7, #0]
 800c532:	9803      	ldr	r0, [sp, #12]
 800c534:	4798      	blx	r3
 800c536:	6923      	ldr	r3, [r4, #16]
 800c538:	3b01      	subs	r3, #1
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	e7f1      	b.n	800c522 <_scanf_float+0x2aa>
 800c53e:	25be      	movs	r5, #190	@ 0xbe
 800c540:	006d      	lsls	r5, r5, #1
 800c542:	9b04      	ldr	r3, [sp, #16]
 800c544:	429f      	cmp	r7, r3
 800c546:	d800      	bhi.n	800c54a <_scanf_float+0x2d2>
 800c548:	e6d9      	b.n	800c2fe <_scanf_float+0x86>
 800c54a:	3f01      	subs	r7, #1
 800c54c:	5963      	ldr	r3, [r4, r5]
 800c54e:	0032      	movs	r2, r6
 800c550:	7839      	ldrb	r1, [r7, #0]
 800c552:	9803      	ldr	r0, [sp, #12]
 800c554:	4798      	blx	r3
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	3b01      	subs	r3, #1
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	e7f1      	b.n	800c542 <_scanf_float+0x2ca>
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	0032      	movs	r2, r6
 800c562:	3b01      	subs	r3, #1
 800c564:	7819      	ldrb	r1, [r3, #0]
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	23be      	movs	r3, #190	@ 0xbe
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	58e3      	ldr	r3, [r4, r3]
 800c56e:	9803      	ldr	r0, [sp, #12]
 800c570:	4798      	blx	r3
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	3b01      	subs	r3, #1
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	e7c3      	b.n	800c502 <_scanf_float+0x28a>
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	fffffeff 	.word	0xfffffeff
 800c580:	fffffe7f 	.word	0xfffffe7f
 800c584:	fffff87f 	.word	0xfffff87f
 800c588:	fffffd7f 	.word	0xfffffd7f
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	1e7d      	subs	r5, r7, #1
 800c590:	7829      	ldrb	r1, [r5, #0]
 800c592:	3b01      	subs	r3, #1
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	2965      	cmp	r1, #101	@ 0x65
 800c598:	d00c      	beq.n	800c5b4 <_scanf_float+0x33c>
 800c59a:	2945      	cmp	r1, #69	@ 0x45
 800c59c:	d00a      	beq.n	800c5b4 <_scanf_float+0x33c>
 800c59e:	23be      	movs	r3, #190	@ 0xbe
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	58e3      	ldr	r3, [r4, r3]
 800c5a4:	0032      	movs	r2, r6
 800c5a6:	9803      	ldr	r0, [sp, #12]
 800c5a8:	4798      	blx	r3
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	1ebd      	subs	r5, r7, #2
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	7829      	ldrb	r1, [r5, #0]
 800c5b2:	6123      	str	r3, [r4, #16]
 800c5b4:	23be      	movs	r3, #190	@ 0xbe
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	0032      	movs	r2, r6
 800c5ba:	58e3      	ldr	r3, [r4, r3]
 800c5bc:	9803      	ldr	r0, [sp, #12]
 800c5be:	4798      	blx	r3
 800c5c0:	002f      	movs	r7, r5
 800c5c2:	6821      	ldr	r1, [r4, #0]
 800c5c4:	2310      	movs	r3, #16
 800c5c6:	000a      	movs	r2, r1
 800c5c8:	401a      	ands	r2, r3
 800c5ca:	4219      	tst	r1, r3
 800c5cc:	d001      	beq.n	800c5d2 <_scanf_float+0x35a>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e696      	b.n	800c300 <_scanf_float+0x88>
 800c5d2:	21c0      	movs	r1, #192	@ 0xc0
 800c5d4:	703a      	strb	r2, [r7, #0]
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	00c9      	lsls	r1, r1, #3
 800c5da:	400b      	ands	r3, r1
 800c5dc:	2180      	movs	r1, #128	@ 0x80
 800c5de:	00c9      	lsls	r1, r1, #3
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	d11c      	bne.n	800c61e <_scanf_float+0x3a6>
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	9a01      	ldr	r2, [sp, #4]
 800c5e8:	9905      	ldr	r1, [sp, #20]
 800c5ea:	1a9a      	subs	r2, r3, r2
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	428b      	cmp	r3, r1
 800c5f0:	d121      	bne.n	800c636 <_scanf_float+0x3be>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	9904      	ldr	r1, [sp, #16]
 800c5f6:	9803      	ldr	r0, [sp, #12]
 800c5f8:	f002 fca2 	bl	800ef40 <_strtod_r>
 800c5fc:	9b07      	ldr	r3, [sp, #28]
 800c5fe:	6822      	ldr	r2, [r4, #0]
 800c600:	0006      	movs	r6, r0
 800c602:	000f      	movs	r7, r1
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	0791      	lsls	r1, r2, #30
 800c608:	d522      	bpl.n	800c650 <_scanf_float+0x3d8>
 800c60a:	9907      	ldr	r1, [sp, #28]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	600a      	str	r2, [r1, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	601e      	str	r6, [r3, #0]
 800c614:	605f      	str	r7, [r3, #4]
 800c616:	68e3      	ldr	r3, [r4, #12]
 800c618:	3301      	adds	r3, #1
 800c61a:	60e3      	str	r3, [r4, #12]
 800c61c:	e7d7      	b.n	800c5ce <_scanf_float+0x356>
 800c61e:	9b08      	ldr	r3, [sp, #32]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0e6      	beq.n	800c5f2 <_scanf_float+0x37a>
 800c624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c626:	9803      	ldr	r0, [sp, #12]
 800c628:	1c59      	adds	r1, r3, #1
 800c62a:	230a      	movs	r3, #10
 800c62c:	f002 fd1a 	bl	800f064 <_strtol_r>
 800c630:	9b08      	ldr	r3, [sp, #32]
 800c632:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800c634:	1ac2      	subs	r2, r0, r3
 800c636:	0023      	movs	r3, r4
 800c638:	3370      	adds	r3, #112	@ 0x70
 800c63a:	33ff      	adds	r3, #255	@ 0xff
 800c63c:	429f      	cmp	r7, r3
 800c63e:	d302      	bcc.n	800c646 <_scanf_float+0x3ce>
 800c640:	0027      	movs	r7, r4
 800c642:	376f      	adds	r7, #111	@ 0x6f
 800c644:	37ff      	adds	r7, #255	@ 0xff
 800c646:	0038      	movs	r0, r7
 800c648:	4910      	ldr	r1, [pc, #64]	@ (800c68c <_scanf_float+0x414>)
 800c64a:	f000 f91b 	bl	800c884 <siprintf>
 800c64e:	e7d0      	b.n	800c5f2 <_scanf_float+0x37a>
 800c650:	1d19      	adds	r1, r3, #4
 800c652:	0752      	lsls	r2, r2, #29
 800c654:	d502      	bpl.n	800c65c <_scanf_float+0x3e4>
 800c656:	9a07      	ldr	r2, [sp, #28]
 800c658:	6011      	str	r1, [r2, #0]
 800c65a:	e7d9      	b.n	800c610 <_scanf_float+0x398>
 800c65c:	9a07      	ldr	r2, [sp, #28]
 800c65e:	0030      	movs	r0, r6
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	681d      	ldr	r5, [r3, #0]
 800c664:	0032      	movs	r2, r6
 800c666:	003b      	movs	r3, r7
 800c668:	0039      	movs	r1, r7
 800c66a:	f7f6 fe01 	bl	8003270 <__aeabi_dcmpun>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d004      	beq.n	800c67c <_scanf_float+0x404>
 800c672:	4807      	ldr	r0, [pc, #28]	@ (800c690 <_scanf_float+0x418>)
 800c674:	f000 fa04 	bl	800ca80 <nanf>
 800c678:	6028      	str	r0, [r5, #0]
 800c67a:	e7cc      	b.n	800c616 <_scanf_float+0x39e>
 800c67c:	0030      	movs	r0, r6
 800c67e:	0039      	movs	r1, r7
 800c680:	f7f6 feee 	bl	8003460 <__aeabi_d2f>
 800c684:	e7f8      	b.n	800c678 <_scanf_float+0x400>
 800c686:	2300      	movs	r3, #0
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	e62d      	b.n	800c2e8 <_scanf_float+0x70>
 800c68c:	0801094c 	.word	0x0801094c
 800c690:	08010ce5 	.word	0x08010ce5

0800c694 <std>:
 800c694:	2300      	movs	r3, #0
 800c696:	b510      	push	{r4, lr}
 800c698:	0004      	movs	r4, r0
 800c69a:	6003      	str	r3, [r0, #0]
 800c69c:	6043      	str	r3, [r0, #4]
 800c69e:	6083      	str	r3, [r0, #8]
 800c6a0:	8181      	strh	r1, [r0, #12]
 800c6a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6a4:	81c2      	strh	r2, [r0, #14]
 800c6a6:	6103      	str	r3, [r0, #16]
 800c6a8:	6143      	str	r3, [r0, #20]
 800c6aa:	6183      	str	r3, [r0, #24]
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	305c      	adds	r0, #92	@ 0x5c
 800c6b2:	f000 f953 	bl	800c95c <memset>
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e4 <std+0x50>)
 800c6b8:	6224      	str	r4, [r4, #32]
 800c6ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <std+0x54>)
 800c6be:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c6ec <std+0x58>)
 800c6c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f0 <std+0x5c>)
 800c6c6:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f4 <std+0x60>)
 800c6ca:	429c      	cmp	r4, r3
 800c6cc:	d005      	beq.n	800c6da <std+0x46>
 800c6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f8 <std+0x64>)
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d002      	beq.n	800c6da <std+0x46>
 800c6d4:	4b09      	ldr	r3, [pc, #36]	@ (800c6fc <std+0x68>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d103      	bne.n	800c6e2 <std+0x4e>
 800c6da:	0020      	movs	r0, r4
 800c6dc:	3058      	adds	r0, #88	@ 0x58
 800c6de:	f000 f9c1 	bl	800ca64 <__retarget_lock_init_recursive>
 800c6e2:	bd10      	pop	{r4, pc}
 800c6e4:	0800c8c5 	.word	0x0800c8c5
 800c6e8:	0800c8ed 	.word	0x0800c8ed
 800c6ec:	0800c925 	.word	0x0800c925
 800c6f0:	0800c951 	.word	0x0800c951
 800c6f4:	20000a48 	.word	0x20000a48
 800c6f8:	20000ab0 	.word	0x20000ab0
 800c6fc:	20000b18 	.word	0x20000b18

0800c700 <stdio_exit_handler>:
 800c700:	b510      	push	{r4, lr}
 800c702:	4a03      	ldr	r2, [pc, #12]	@ (800c710 <stdio_exit_handler+0x10>)
 800c704:	4903      	ldr	r1, [pc, #12]	@ (800c714 <stdio_exit_handler+0x14>)
 800c706:	4804      	ldr	r0, [pc, #16]	@ (800c718 <stdio_exit_handler+0x18>)
 800c708:	f000 f86c 	bl	800c7e4 <_fwalk_sglue>
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	46c0      	nop			@ (mov r8, r8)
 800c710:	20000034 	.word	0x20000034
 800c714:	0800f435 	.word	0x0800f435
 800c718:	20000044 	.word	0x20000044

0800c71c <cleanup_stdio>:
 800c71c:	6841      	ldr	r1, [r0, #4]
 800c71e:	4b0b      	ldr	r3, [pc, #44]	@ (800c74c <cleanup_stdio+0x30>)
 800c720:	b510      	push	{r4, lr}
 800c722:	0004      	movs	r4, r0
 800c724:	4299      	cmp	r1, r3
 800c726:	d001      	beq.n	800c72c <cleanup_stdio+0x10>
 800c728:	f002 fe84 	bl	800f434 <_fflush_r>
 800c72c:	68a1      	ldr	r1, [r4, #8]
 800c72e:	4b08      	ldr	r3, [pc, #32]	@ (800c750 <cleanup_stdio+0x34>)
 800c730:	4299      	cmp	r1, r3
 800c732:	d002      	beq.n	800c73a <cleanup_stdio+0x1e>
 800c734:	0020      	movs	r0, r4
 800c736:	f002 fe7d 	bl	800f434 <_fflush_r>
 800c73a:	68e1      	ldr	r1, [r4, #12]
 800c73c:	4b05      	ldr	r3, [pc, #20]	@ (800c754 <cleanup_stdio+0x38>)
 800c73e:	4299      	cmp	r1, r3
 800c740:	d002      	beq.n	800c748 <cleanup_stdio+0x2c>
 800c742:	0020      	movs	r0, r4
 800c744:	f002 fe76 	bl	800f434 <_fflush_r>
 800c748:	bd10      	pop	{r4, pc}
 800c74a:	46c0      	nop			@ (mov r8, r8)
 800c74c:	20000a48 	.word	0x20000a48
 800c750:	20000ab0 	.word	0x20000ab0
 800c754:	20000b18 	.word	0x20000b18

0800c758 <global_stdio_init.part.0>:
 800c758:	b510      	push	{r4, lr}
 800c75a:	4b09      	ldr	r3, [pc, #36]	@ (800c780 <global_stdio_init.part.0+0x28>)
 800c75c:	4a09      	ldr	r2, [pc, #36]	@ (800c784 <global_stdio_init.part.0+0x2c>)
 800c75e:	2104      	movs	r1, #4
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	4809      	ldr	r0, [pc, #36]	@ (800c788 <global_stdio_init.part.0+0x30>)
 800c764:	2200      	movs	r2, #0
 800c766:	f7ff ff95 	bl	800c694 <std>
 800c76a:	2201      	movs	r2, #1
 800c76c:	2109      	movs	r1, #9
 800c76e:	4807      	ldr	r0, [pc, #28]	@ (800c78c <global_stdio_init.part.0+0x34>)
 800c770:	f7ff ff90 	bl	800c694 <std>
 800c774:	2202      	movs	r2, #2
 800c776:	2112      	movs	r1, #18
 800c778:	4805      	ldr	r0, [pc, #20]	@ (800c790 <global_stdio_init.part.0+0x38>)
 800c77a:	f7ff ff8b 	bl	800c694 <std>
 800c77e:	bd10      	pop	{r4, pc}
 800c780:	20000b80 	.word	0x20000b80
 800c784:	0800c701 	.word	0x0800c701
 800c788:	20000a48 	.word	0x20000a48
 800c78c:	20000ab0 	.word	0x20000ab0
 800c790:	20000b18 	.word	0x20000b18

0800c794 <__sfp_lock_acquire>:
 800c794:	b510      	push	{r4, lr}
 800c796:	4802      	ldr	r0, [pc, #8]	@ (800c7a0 <__sfp_lock_acquire+0xc>)
 800c798:	f000 f965 	bl	800ca66 <__retarget_lock_acquire_recursive>
 800c79c:	bd10      	pop	{r4, pc}
 800c79e:	46c0      	nop			@ (mov r8, r8)
 800c7a0:	20000b89 	.word	0x20000b89

0800c7a4 <__sfp_lock_release>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4802      	ldr	r0, [pc, #8]	@ (800c7b0 <__sfp_lock_release+0xc>)
 800c7a8:	f000 f95e 	bl	800ca68 <__retarget_lock_release_recursive>
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	46c0      	nop			@ (mov r8, r8)
 800c7b0:	20000b89 	.word	0x20000b89

0800c7b4 <__sinit>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	0004      	movs	r4, r0
 800c7b8:	f7ff ffec 	bl	800c794 <__sfp_lock_acquire>
 800c7bc:	6a23      	ldr	r3, [r4, #32]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d002      	beq.n	800c7c8 <__sinit+0x14>
 800c7c2:	f7ff ffef 	bl	800c7a4 <__sfp_lock_release>
 800c7c6:	bd10      	pop	{r4, pc}
 800c7c8:	4b04      	ldr	r3, [pc, #16]	@ (800c7dc <__sinit+0x28>)
 800c7ca:	6223      	str	r3, [r4, #32]
 800c7cc:	4b04      	ldr	r3, [pc, #16]	@ (800c7e0 <__sinit+0x2c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1f6      	bne.n	800c7c2 <__sinit+0xe>
 800c7d4:	f7ff ffc0 	bl	800c758 <global_stdio_init.part.0>
 800c7d8:	e7f3      	b.n	800c7c2 <__sinit+0xe>
 800c7da:	46c0      	nop			@ (mov r8, r8)
 800c7dc:	0800c71d 	.word	0x0800c71d
 800c7e0:	20000b80 	.word	0x20000b80

0800c7e4 <_fwalk_sglue>:
 800c7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7e6:	0014      	movs	r4, r2
 800c7e8:	2600      	movs	r6, #0
 800c7ea:	9000      	str	r0, [sp, #0]
 800c7ec:	9101      	str	r1, [sp, #4]
 800c7ee:	68a5      	ldr	r5, [r4, #8]
 800c7f0:	6867      	ldr	r7, [r4, #4]
 800c7f2:	3f01      	subs	r7, #1
 800c7f4:	d504      	bpl.n	800c800 <_fwalk_sglue+0x1c>
 800c7f6:	6824      	ldr	r4, [r4, #0]
 800c7f8:	2c00      	cmp	r4, #0
 800c7fa:	d1f8      	bne.n	800c7ee <_fwalk_sglue+0xa>
 800c7fc:	0030      	movs	r0, r6
 800c7fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c800:	89ab      	ldrh	r3, [r5, #12]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d908      	bls.n	800c818 <_fwalk_sglue+0x34>
 800c806:	220e      	movs	r2, #14
 800c808:	5eab      	ldrsh	r3, [r5, r2]
 800c80a:	3301      	adds	r3, #1
 800c80c:	d004      	beq.n	800c818 <_fwalk_sglue+0x34>
 800c80e:	0029      	movs	r1, r5
 800c810:	9800      	ldr	r0, [sp, #0]
 800c812:	9b01      	ldr	r3, [sp, #4]
 800c814:	4798      	blx	r3
 800c816:	4306      	orrs	r6, r0
 800c818:	3568      	adds	r5, #104	@ 0x68
 800c81a:	e7ea      	b.n	800c7f2 <_fwalk_sglue+0xe>

0800c81c <sniprintf>:
 800c81c:	b40c      	push	{r2, r3}
 800c81e:	b530      	push	{r4, r5, lr}
 800c820:	4b17      	ldr	r3, [pc, #92]	@ (800c880 <sniprintf+0x64>)
 800c822:	000c      	movs	r4, r1
 800c824:	681d      	ldr	r5, [r3, #0]
 800c826:	b09d      	sub	sp, #116	@ 0x74
 800c828:	2900      	cmp	r1, #0
 800c82a:	da08      	bge.n	800c83e <sniprintf+0x22>
 800c82c:	238b      	movs	r3, #139	@ 0x8b
 800c82e:	2001      	movs	r0, #1
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	4240      	negs	r0, r0
 800c834:	b01d      	add	sp, #116	@ 0x74
 800c836:	bc30      	pop	{r4, r5}
 800c838:	bc08      	pop	{r3}
 800c83a:	b002      	add	sp, #8
 800c83c:	4718      	bx	r3
 800c83e:	2382      	movs	r3, #130	@ 0x82
 800c840:	466a      	mov	r2, sp
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	8293      	strh	r3, [r2, #20]
 800c846:	2300      	movs	r3, #0
 800c848:	9002      	str	r0, [sp, #8]
 800c84a:	9006      	str	r0, [sp, #24]
 800c84c:	4299      	cmp	r1, r3
 800c84e:	d000      	beq.n	800c852 <sniprintf+0x36>
 800c850:	1e4b      	subs	r3, r1, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	9307      	str	r3, [sp, #28]
 800c856:	2301      	movs	r3, #1
 800c858:	466a      	mov	r2, sp
 800c85a:	425b      	negs	r3, r3
 800c85c:	82d3      	strh	r3, [r2, #22]
 800c85e:	0028      	movs	r0, r5
 800c860:	ab21      	add	r3, sp, #132	@ 0x84
 800c862:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c864:	a902      	add	r1, sp, #8
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	f002 fc60 	bl	800f12c <_svfiprintf_r>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	da01      	bge.n	800c874 <sniprintf+0x58>
 800c870:	238b      	movs	r3, #139	@ 0x8b
 800c872:	602b      	str	r3, [r5, #0]
 800c874:	2c00      	cmp	r4, #0
 800c876:	d0dd      	beq.n	800c834 <sniprintf+0x18>
 800c878:	2200      	movs	r2, #0
 800c87a:	9b02      	ldr	r3, [sp, #8]
 800c87c:	701a      	strb	r2, [r3, #0]
 800c87e:	e7d9      	b.n	800c834 <sniprintf+0x18>
 800c880:	20000040 	.word	0x20000040

0800c884 <siprintf>:
 800c884:	b40e      	push	{r1, r2, r3}
 800c886:	b500      	push	{lr}
 800c888:	490b      	ldr	r1, [pc, #44]	@ (800c8b8 <siprintf+0x34>)
 800c88a:	b09c      	sub	sp, #112	@ 0x70
 800c88c:	ab1d      	add	r3, sp, #116	@ 0x74
 800c88e:	9002      	str	r0, [sp, #8]
 800c890:	9006      	str	r0, [sp, #24]
 800c892:	9107      	str	r1, [sp, #28]
 800c894:	9104      	str	r1, [sp, #16]
 800c896:	4809      	ldr	r0, [pc, #36]	@ (800c8bc <siprintf+0x38>)
 800c898:	4909      	ldr	r1, [pc, #36]	@ (800c8c0 <siprintf+0x3c>)
 800c89a:	cb04      	ldmia	r3!, {r2}
 800c89c:	9105      	str	r1, [sp, #20]
 800c89e:	6800      	ldr	r0, [r0, #0]
 800c8a0:	a902      	add	r1, sp, #8
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	f002 fc42 	bl	800f12c <_svfiprintf_r>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	9b02      	ldr	r3, [sp, #8]
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	b01c      	add	sp, #112	@ 0x70
 800c8b0:	bc08      	pop	{r3}
 800c8b2:	b003      	add	sp, #12
 800c8b4:	4718      	bx	r3
 800c8b6:	46c0      	nop			@ (mov r8, r8)
 800c8b8:	7fffffff 	.word	0x7fffffff
 800c8bc:	20000040 	.word	0x20000040
 800c8c0:	ffff0208 	.word	0xffff0208

0800c8c4 <__sread>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	000c      	movs	r4, r1
 800c8c8:	250e      	movs	r5, #14
 800c8ca:	5f49      	ldrsh	r1, [r1, r5]
 800c8cc:	f000 f878 	bl	800c9c0 <_read_r>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	db03      	blt.n	800c8dc <__sread+0x18>
 800c8d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c8d6:	181b      	adds	r3, r3, r0
 800c8d8:	6563      	str	r3, [r4, #84]	@ 0x54
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	4a02      	ldr	r2, [pc, #8]	@ (800c8e8 <__sread+0x24>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	e7f9      	b.n	800c8da <__sread+0x16>
 800c8e6:	46c0      	nop			@ (mov r8, r8)
 800c8e8:	ffffefff 	.word	0xffffefff

0800c8ec <__swrite>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	001f      	movs	r7, r3
 800c8f0:	898b      	ldrh	r3, [r1, #12]
 800c8f2:	0005      	movs	r5, r0
 800c8f4:	000c      	movs	r4, r1
 800c8f6:	0016      	movs	r6, r2
 800c8f8:	05db      	lsls	r3, r3, #23
 800c8fa:	d505      	bpl.n	800c908 <__swrite+0x1c>
 800c8fc:	230e      	movs	r3, #14
 800c8fe:	5ec9      	ldrsh	r1, [r1, r3]
 800c900:	2200      	movs	r2, #0
 800c902:	2302      	movs	r3, #2
 800c904:	f000 f848 	bl	800c998 <_lseek_r>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	4a05      	ldr	r2, [pc, #20]	@ (800c920 <__swrite+0x34>)
 800c90c:	0028      	movs	r0, r5
 800c90e:	4013      	ands	r3, r2
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	0032      	movs	r2, r6
 800c914:	230e      	movs	r3, #14
 800c916:	5ee1      	ldrsh	r1, [r4, r3]
 800c918:	003b      	movs	r3, r7
 800c91a:	f000 f865 	bl	800c9e8 <_write_r>
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c920:	ffffefff 	.word	0xffffefff

0800c924 <__sseek>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	000c      	movs	r4, r1
 800c928:	250e      	movs	r5, #14
 800c92a:	5f49      	ldrsh	r1, [r1, r5]
 800c92c:	f000 f834 	bl	800c998 <_lseek_r>
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	1c42      	adds	r2, r0, #1
 800c934:	d103      	bne.n	800c93e <__sseek+0x1a>
 800c936:	4a05      	ldr	r2, [pc, #20]	@ (800c94c <__sseek+0x28>)
 800c938:	4013      	ands	r3, r2
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	bd70      	pop	{r4, r5, r6, pc}
 800c93e:	2280      	movs	r2, #128	@ 0x80
 800c940:	0152      	lsls	r2, r2, #5
 800c942:	4313      	orrs	r3, r2
 800c944:	81a3      	strh	r3, [r4, #12]
 800c946:	6560      	str	r0, [r4, #84]	@ 0x54
 800c948:	e7f8      	b.n	800c93c <__sseek+0x18>
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	ffffefff 	.word	0xffffefff

0800c950 <__sclose>:
 800c950:	b510      	push	{r4, lr}
 800c952:	230e      	movs	r3, #14
 800c954:	5ec9      	ldrsh	r1, [r1, r3]
 800c956:	f000 f80d 	bl	800c974 <_close_r>
 800c95a:	bd10      	pop	{r4, pc}

0800c95c <memset>:
 800c95c:	0003      	movs	r3, r0
 800c95e:	1882      	adds	r2, r0, r2
 800c960:	4293      	cmp	r3, r2
 800c962:	d100      	bne.n	800c966 <memset+0xa>
 800c964:	4770      	bx	lr
 800c966:	7019      	strb	r1, [r3, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	e7f9      	b.n	800c960 <memset+0x4>

0800c96c <_localeconv_r>:
 800c96c:	4800      	ldr	r0, [pc, #0]	@ (800c970 <_localeconv_r+0x4>)
 800c96e:	4770      	bx	lr
 800c970:	20000180 	.word	0x20000180

0800c974 <_close_r>:
 800c974:	2300      	movs	r3, #0
 800c976:	b570      	push	{r4, r5, r6, lr}
 800c978:	4d06      	ldr	r5, [pc, #24]	@ (800c994 <_close_r+0x20>)
 800c97a:	0004      	movs	r4, r0
 800c97c:	0008      	movs	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7f8 f8e2 	bl	8004b48 <_close>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d103      	bne.n	800c990 <_close_r+0x1c>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d000      	beq.n	800c990 <_close_r+0x1c>
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	46c0      	nop			@ (mov r8, r8)
 800c994:	20000b84 	.word	0x20000b84

0800c998 <_lseek_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	0004      	movs	r4, r0
 800c99c:	0008      	movs	r0, r1
 800c99e:	0011      	movs	r1, r2
 800c9a0:	001a      	movs	r2, r3
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4d05      	ldr	r5, [pc, #20]	@ (800c9bc <_lseek_r+0x24>)
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	f7f8 f8ef 	bl	8004b8a <_lseek>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_lseek_r+0x20>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d000      	beq.n	800c9b8 <_lseek_r+0x20>
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	46c0      	nop			@ (mov r8, r8)
 800c9bc:	20000b84 	.word	0x20000b84

0800c9c0 <_read_r>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	0004      	movs	r4, r0
 800c9c4:	0008      	movs	r0, r1
 800c9c6:	0011      	movs	r1, r2
 800c9c8:	001a      	movs	r2, r3
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4d05      	ldr	r5, [pc, #20]	@ (800c9e4 <_read_r+0x24>)
 800c9ce:	602b      	str	r3, [r5, #0]
 800c9d0:	f7f8 f881 	bl	8004ad6 <_read>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d103      	bne.n	800c9e0 <_read_r+0x20>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d000      	beq.n	800c9e0 <_read_r+0x20>
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	46c0      	nop			@ (mov r8, r8)
 800c9e4:	20000b84 	.word	0x20000b84

0800c9e8 <_write_r>:
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	0004      	movs	r4, r0
 800c9ec:	0008      	movs	r0, r1
 800c9ee:	0011      	movs	r1, r2
 800c9f0:	001a      	movs	r2, r3
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4d05      	ldr	r5, [pc, #20]	@ (800ca0c <_write_r+0x24>)
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	f7f8 f88a 	bl	8004b10 <_write>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d103      	bne.n	800ca08 <_write_r+0x20>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d000      	beq.n	800ca08 <_write_r+0x20>
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	20000b84 	.word	0x20000b84

0800ca10 <__errno>:
 800ca10:	4b01      	ldr	r3, [pc, #4]	@ (800ca18 <__errno+0x8>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	4770      	bx	lr
 800ca16:	46c0      	nop			@ (mov r8, r8)
 800ca18:	20000040 	.word	0x20000040

0800ca1c <__libc_init_array>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	2600      	movs	r6, #0
 800ca20:	4c0c      	ldr	r4, [pc, #48]	@ (800ca54 <__libc_init_array+0x38>)
 800ca22:	4d0d      	ldr	r5, [pc, #52]	@ (800ca58 <__libc_init_array+0x3c>)
 800ca24:	1b64      	subs	r4, r4, r5
 800ca26:	10a4      	asrs	r4, r4, #2
 800ca28:	42a6      	cmp	r6, r4
 800ca2a:	d109      	bne.n	800ca40 <__libc_init_array+0x24>
 800ca2c:	2600      	movs	r6, #0
 800ca2e:	f003 fdcf 	bl	80105d0 <_init>
 800ca32:	4c0a      	ldr	r4, [pc, #40]	@ (800ca5c <__libc_init_array+0x40>)
 800ca34:	4d0a      	ldr	r5, [pc, #40]	@ (800ca60 <__libc_init_array+0x44>)
 800ca36:	1b64      	subs	r4, r4, r5
 800ca38:	10a4      	asrs	r4, r4, #2
 800ca3a:	42a6      	cmp	r6, r4
 800ca3c:	d105      	bne.n	800ca4a <__libc_init_array+0x2e>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	00b3      	lsls	r3, r6, #2
 800ca42:	58eb      	ldr	r3, [r5, r3]
 800ca44:	4798      	blx	r3
 800ca46:	3601      	adds	r6, #1
 800ca48:	e7ee      	b.n	800ca28 <__libc_init_array+0xc>
 800ca4a:	00b3      	lsls	r3, r6, #2
 800ca4c:	58eb      	ldr	r3, [r5, r3]
 800ca4e:	4798      	blx	r3
 800ca50:	3601      	adds	r6, #1
 800ca52:	e7f2      	b.n	800ca3a <__libc_init_array+0x1e>
 800ca54:	08010d68 	.word	0x08010d68
 800ca58:	08010d68 	.word	0x08010d68
 800ca5c:	08010d6c 	.word	0x08010d6c
 800ca60:	08010d68 	.word	0x08010d68

0800ca64 <__retarget_lock_init_recursive>:
 800ca64:	4770      	bx	lr

0800ca66 <__retarget_lock_acquire_recursive>:
 800ca66:	4770      	bx	lr

0800ca68 <__retarget_lock_release_recursive>:
 800ca68:	4770      	bx	lr

0800ca6a <memchr>:
 800ca6a:	b2c9      	uxtb	r1, r1
 800ca6c:	1882      	adds	r2, r0, r2
 800ca6e:	4290      	cmp	r0, r2
 800ca70:	d101      	bne.n	800ca76 <memchr+0xc>
 800ca72:	2000      	movs	r0, #0
 800ca74:	4770      	bx	lr
 800ca76:	7803      	ldrb	r3, [r0, #0]
 800ca78:	428b      	cmp	r3, r1
 800ca7a:	d0fb      	beq.n	800ca74 <memchr+0xa>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	e7f6      	b.n	800ca6e <memchr+0x4>

0800ca80 <nanf>:
 800ca80:	4800      	ldr	r0, [pc, #0]	@ (800ca84 <nanf+0x4>)
 800ca82:	4770      	bx	lr
 800ca84:	7fc00000 	.word	0x7fc00000

0800ca88 <quorem>:
 800ca88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca8a:	6902      	ldr	r2, [r0, #16]
 800ca8c:	690f      	ldr	r7, [r1, #16]
 800ca8e:	b087      	sub	sp, #28
 800ca90:	0006      	movs	r6, r0
 800ca92:	000b      	movs	r3, r1
 800ca94:	2000      	movs	r0, #0
 800ca96:	9102      	str	r1, [sp, #8]
 800ca98:	42ba      	cmp	r2, r7
 800ca9a:	db6d      	blt.n	800cb78 <quorem+0xf0>
 800ca9c:	3f01      	subs	r7, #1
 800ca9e:	00bc      	lsls	r4, r7, #2
 800caa0:	3314      	adds	r3, #20
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	191b      	adds	r3, r3, r4
 800caa6:	9303      	str	r3, [sp, #12]
 800caa8:	0033      	movs	r3, r6
 800caaa:	3314      	adds	r3, #20
 800caac:	191c      	adds	r4, r3, r4
 800caae:	9301      	str	r3, [sp, #4]
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	9804      	ldr	r0, [sp, #16]
 800cab8:	681d      	ldr	r5, [r3, #0]
 800caba:	3501      	adds	r5, #1
 800cabc:	0029      	movs	r1, r5
 800cabe:	f7f3 fb3f 	bl	8000140 <__udivsi3>
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	9000      	str	r0, [sp, #0]
 800cac6:	42ab      	cmp	r3, r5
 800cac8:	d32b      	bcc.n	800cb22 <quorem+0x9a>
 800caca:	9b05      	ldr	r3, [sp, #20]
 800cacc:	9d01      	ldr	r5, [sp, #4]
 800cace:	469c      	mov	ip, r3
 800cad0:	2300      	movs	r3, #0
 800cad2:	9305      	str	r3, [sp, #20]
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	4662      	mov	r2, ip
 800cad8:	ca08      	ldmia	r2!, {r3}
 800cada:	6828      	ldr	r0, [r5, #0]
 800cadc:	4694      	mov	ip, r2
 800cade:	9a00      	ldr	r2, [sp, #0]
 800cae0:	b299      	uxth	r1, r3
 800cae2:	4351      	muls	r1, r2
 800cae4:	9a05      	ldr	r2, [sp, #20]
 800cae6:	0c1b      	lsrs	r3, r3, #16
 800cae8:	1889      	adds	r1, r1, r2
 800caea:	9a00      	ldr	r2, [sp, #0]
 800caec:	4353      	muls	r3, r2
 800caee:	0c0a      	lsrs	r2, r1, #16
 800caf0:	189b      	adds	r3, r3, r2
 800caf2:	0c1a      	lsrs	r2, r3, #16
 800caf4:	b289      	uxth	r1, r1
 800caf6:	9205      	str	r2, [sp, #20]
 800caf8:	b282      	uxth	r2, r0
 800cafa:	1a52      	subs	r2, r2, r1
 800cafc:	9904      	ldr	r1, [sp, #16]
 800cafe:	0c00      	lsrs	r0, r0, #16
 800cb00:	1852      	adds	r2, r2, r1
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	1411      	asrs	r1, r2, #16
 800cb06:	1ac3      	subs	r3, r0, r3
 800cb08:	185b      	adds	r3, r3, r1
 800cb0a:	1419      	asrs	r1, r3, #16
 800cb0c:	b292      	uxth	r2, r2
 800cb0e:	041b      	lsls	r3, r3, #16
 800cb10:	431a      	orrs	r2, r3
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	9104      	str	r1, [sp, #16]
 800cb16:	c504      	stmia	r5!, {r2}
 800cb18:	4563      	cmp	r3, ip
 800cb1a:	d2dc      	bcs.n	800cad6 <quorem+0x4e>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d030      	beq.n	800cb84 <quorem+0xfc>
 800cb22:	0030      	movs	r0, r6
 800cb24:	9902      	ldr	r1, [sp, #8]
 800cb26:	f001 fa11 	bl	800df4c <__mcmp>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	db23      	blt.n	800cb76 <quorem+0xee>
 800cb2e:	0034      	movs	r4, r6
 800cb30:	2500      	movs	r5, #0
 800cb32:	9902      	ldr	r1, [sp, #8]
 800cb34:	3414      	adds	r4, #20
 800cb36:	3114      	adds	r1, #20
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	c901      	ldmia	r1!, {r0}
 800cb3c:	9302      	str	r3, [sp, #8]
 800cb3e:	466b      	mov	r3, sp
 800cb40:	891b      	ldrh	r3, [r3, #8]
 800cb42:	b282      	uxth	r2, r0
 800cb44:	1a9a      	subs	r2, r3, r2
 800cb46:	9b02      	ldr	r3, [sp, #8]
 800cb48:	1952      	adds	r2, r2, r5
 800cb4a:	0c00      	lsrs	r0, r0, #16
 800cb4c:	0c1b      	lsrs	r3, r3, #16
 800cb4e:	1a1b      	subs	r3, r3, r0
 800cb50:	1410      	asrs	r0, r2, #16
 800cb52:	181b      	adds	r3, r3, r0
 800cb54:	141d      	asrs	r5, r3, #16
 800cb56:	b292      	uxth	r2, r2
 800cb58:	041b      	lsls	r3, r3, #16
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	c404      	stmia	r4!, {r2}
 800cb60:	428b      	cmp	r3, r1
 800cb62:	d2e9      	bcs.n	800cb38 <quorem+0xb0>
 800cb64:	9a01      	ldr	r2, [sp, #4]
 800cb66:	00bb      	lsls	r3, r7, #2
 800cb68:	18d3      	adds	r3, r2, r3
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d013      	beq.n	800cb98 <quorem+0x110>
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	3301      	adds	r3, #1
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	9800      	ldr	r0, [sp, #0]
 800cb78:	b007      	add	sp, #28
 800cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d104      	bne.n	800cb8c <quorem+0x104>
 800cb82:	3f01      	subs	r7, #1
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	3c04      	subs	r4, #4
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d3f7      	bcc.n	800cb7c <quorem+0xf4>
 800cb8c:	6137      	str	r7, [r6, #16]
 800cb8e:	e7c8      	b.n	800cb22 <quorem+0x9a>
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	d104      	bne.n	800cba0 <quorem+0x118>
 800cb96:	3f01      	subs	r7, #1
 800cb98:	9a01      	ldr	r2, [sp, #4]
 800cb9a:	3b04      	subs	r3, #4
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d3f7      	bcc.n	800cb90 <quorem+0x108>
 800cba0:	6137      	str	r7, [r6, #16]
 800cba2:	e7e5      	b.n	800cb70 <quorem+0xe8>

0800cba4 <_dtoa_r>:
 800cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba6:	0014      	movs	r4, r2
 800cba8:	001d      	movs	r5, r3
 800cbaa:	69c6      	ldr	r6, [r0, #28]
 800cbac:	b09d      	sub	sp, #116	@ 0x74
 800cbae:	940a      	str	r4, [sp, #40]	@ 0x28
 800cbb0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cbb2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800cbb4:	9003      	str	r0, [sp, #12]
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	d10f      	bne.n	800cbda <_dtoa_r+0x36>
 800cbba:	2010      	movs	r0, #16
 800cbbc:	f000 fe30 	bl	800d820 <malloc>
 800cbc0:	9b03      	ldr	r3, [sp, #12]
 800cbc2:	1e02      	subs	r2, r0, #0
 800cbc4:	61d8      	str	r0, [r3, #28]
 800cbc6:	d104      	bne.n	800cbd2 <_dtoa_r+0x2e>
 800cbc8:	21ef      	movs	r1, #239	@ 0xef
 800cbca:	4bc7      	ldr	r3, [pc, #796]	@ (800cee8 <_dtoa_r+0x344>)
 800cbcc:	48c7      	ldr	r0, [pc, #796]	@ (800ceec <_dtoa_r+0x348>)
 800cbce:	f002 fca3 	bl	800f518 <__assert_func>
 800cbd2:	6046      	str	r6, [r0, #4]
 800cbd4:	6086      	str	r6, [r0, #8]
 800cbd6:	6006      	str	r6, [r0, #0]
 800cbd8:	60c6      	str	r6, [r0, #12]
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	69db      	ldr	r3, [r3, #28]
 800cbde:	6819      	ldr	r1, [r3, #0]
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d00b      	beq.n	800cbfc <_dtoa_r+0x58>
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4093      	lsls	r3, r2
 800cbea:	604a      	str	r2, [r1, #4]
 800cbec:	608b      	str	r3, [r1, #8]
 800cbee:	9803      	ldr	r0, [sp, #12]
 800cbf0:	f000 ff16 	bl	800da20 <_Bfree>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	2d00      	cmp	r5, #0
 800cbfe:	da1e      	bge.n	800cc3e <_dtoa_r+0x9a>
 800cc00:	2301      	movs	r3, #1
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	006b      	lsls	r3, r5, #1
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cc0c:	4bb8      	ldr	r3, [pc, #736]	@ (800cef0 <_dtoa_r+0x34c>)
 800cc0e:	4ab8      	ldr	r2, [pc, #736]	@ (800cef0 <_dtoa_r+0x34c>)
 800cc10:	403b      	ands	r3, r7
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d116      	bne.n	800cc44 <_dtoa_r+0xa0>
 800cc16:	4bb7      	ldr	r3, [pc, #732]	@ (800cef4 <_dtoa_r+0x350>)
 800cc18:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	033b      	lsls	r3, r7, #12
 800cc1e:	0b1b      	lsrs	r3, r3, #12
 800cc20:	4323      	orrs	r3, r4
 800cc22:	d101      	bne.n	800cc28 <_dtoa_r+0x84>
 800cc24:	f000 fd83 	bl	800d72e <_dtoa_r+0xb8a>
 800cc28:	4bb3      	ldr	r3, [pc, #716]	@ (800cef8 <_dtoa_r+0x354>)
 800cc2a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cc2c:	9308      	str	r3, [sp, #32]
 800cc2e:	2a00      	cmp	r2, #0
 800cc30:	d002      	beq.n	800cc38 <_dtoa_r+0x94>
 800cc32:	4bb2      	ldr	r3, [pc, #712]	@ (800cefc <_dtoa_r+0x358>)
 800cc34:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	9808      	ldr	r0, [sp, #32]
 800cc3a:	b01d      	add	sp, #116	@ 0x74
 800cc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc3e:	2300      	movs	r3, #0
 800cc40:	603b      	str	r3, [r7, #0]
 800cc42:	e7e2      	b.n	800cc0a <_dtoa_r+0x66>
 800cc44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc48:	9212      	str	r2, [sp, #72]	@ 0x48
 800cc4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cc4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	f7f3 fbfa 	bl	800044c <__aeabi_dcmpeq>
 800cc58:	1e06      	subs	r6, r0, #0
 800cc5a:	d00b      	beq.n	800cc74 <_dtoa_r+0xd0>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <_dtoa_r+0xca>
 800cc68:	4ba5      	ldr	r3, [pc, #660]	@ (800cf00 <_dtoa_r+0x35c>)
 800cc6a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	4ba5      	ldr	r3, [pc, #660]	@ (800cf04 <_dtoa_r+0x360>)
 800cc70:	9308      	str	r3, [sp, #32]
 800cc72:	e7e1      	b.n	800cc38 <_dtoa_r+0x94>
 800cc74:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	9803      	ldr	r0, [sp, #12]
 800cc7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cc80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc82:	f001 fa85 	bl	800e190 <__d2b>
 800cc86:	007a      	lsls	r2, r7, #1
 800cc88:	9005      	str	r0, [sp, #20]
 800cc8a:	0d52      	lsrs	r2, r2, #21
 800cc8c:	d100      	bne.n	800cc90 <_dtoa_r+0xec>
 800cc8e:	e07b      	b.n	800cd88 <_dtoa_r+0x1e4>
 800cc90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc92:	9618      	str	r6, [sp, #96]	@ 0x60
 800cc94:	0319      	lsls	r1, r3, #12
 800cc96:	4b9c      	ldr	r3, [pc, #624]	@ (800cf08 <_dtoa_r+0x364>)
 800cc98:	0b09      	lsrs	r1, r1, #12
 800cc9a:	430b      	orrs	r3, r1
 800cc9c:	499b      	ldr	r1, [pc, #620]	@ (800cf0c <_dtoa_r+0x368>)
 800cc9e:	1857      	adds	r7, r2, r1
 800cca0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cca2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cca4:	0019      	movs	r1, r3
 800cca6:	2200      	movs	r2, #0
 800cca8:	4b99      	ldr	r3, [pc, #612]	@ (800cf10 <_dtoa_r+0x36c>)
 800ccaa:	f7f5 ff45 	bl	8002b38 <__aeabi_dsub>
 800ccae:	4a99      	ldr	r2, [pc, #612]	@ (800cf14 <_dtoa_r+0x370>)
 800ccb0:	4b99      	ldr	r3, [pc, #612]	@ (800cf18 <_dtoa_r+0x374>)
 800ccb2:	f7f5 fc79 	bl	80025a8 <__aeabi_dmul>
 800ccb6:	4a99      	ldr	r2, [pc, #612]	@ (800cf1c <_dtoa_r+0x378>)
 800ccb8:	4b99      	ldr	r3, [pc, #612]	@ (800cf20 <_dtoa_r+0x37c>)
 800ccba:	f7f4 fccd 	bl	8001658 <__aeabi_dadd>
 800ccbe:	0004      	movs	r4, r0
 800ccc0:	0038      	movs	r0, r7
 800ccc2:	000d      	movs	r5, r1
 800ccc4:	f7f6 fb32 	bl	800332c <__aeabi_i2d>
 800ccc8:	4a96      	ldr	r2, [pc, #600]	@ (800cf24 <_dtoa_r+0x380>)
 800ccca:	4b97      	ldr	r3, [pc, #604]	@ (800cf28 <_dtoa_r+0x384>)
 800cccc:	f7f5 fc6c 	bl	80025a8 <__aeabi_dmul>
 800ccd0:	0002      	movs	r2, r0
 800ccd2:	000b      	movs	r3, r1
 800ccd4:	0020      	movs	r0, r4
 800ccd6:	0029      	movs	r1, r5
 800ccd8:	f7f4 fcbe 	bl	8001658 <__aeabi_dadd>
 800ccdc:	0004      	movs	r4, r0
 800ccde:	000d      	movs	r5, r1
 800cce0:	f7f6 fae8 	bl	80032b4 <__aeabi_d2iz>
 800cce4:	2200      	movs	r2, #0
 800cce6:	9004      	str	r0, [sp, #16]
 800cce8:	2300      	movs	r3, #0
 800ccea:	0020      	movs	r0, r4
 800ccec:	0029      	movs	r1, r5
 800ccee:	f7f3 fbb3 	bl	8000458 <__aeabi_dcmplt>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d00b      	beq.n	800cd0e <_dtoa_r+0x16a>
 800ccf6:	9804      	ldr	r0, [sp, #16]
 800ccf8:	f7f6 fb18 	bl	800332c <__aeabi_i2d>
 800ccfc:	002b      	movs	r3, r5
 800ccfe:	0022      	movs	r2, r4
 800cd00:	f7f3 fba4 	bl	800044c <__aeabi_dcmpeq>
 800cd04:	4243      	negs	r3, r0
 800cd06:	4158      	adcs	r0, r3
 800cd08:	9b04      	ldr	r3, [sp, #16]
 800cd0a:	1a1b      	subs	r3, r3, r0
 800cd0c:	9304      	str	r3, [sp, #16]
 800cd0e:	2301      	movs	r3, #1
 800cd10:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd12:	9b04      	ldr	r3, [sp, #16]
 800cd14:	2b16      	cmp	r3, #22
 800cd16:	d810      	bhi.n	800cd3a <_dtoa_r+0x196>
 800cd18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cd1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cd1c:	9a04      	ldr	r2, [sp, #16]
 800cd1e:	4b83      	ldr	r3, [pc, #524]	@ (800cf2c <_dtoa_r+0x388>)
 800cd20:	00d2      	lsls	r2, r2, #3
 800cd22:	189b      	adds	r3, r3, r2
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f7f3 fb96 	bl	8000458 <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d047      	beq.n	800cdc0 <_dtoa_r+0x21c>
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	2300      	movs	r3, #0
 800cd38:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cd3e:	9206      	str	r2, [sp, #24]
 800cd40:	1bdb      	subs	r3, r3, r7
 800cd42:	1e5a      	subs	r2, r3, #1
 800cd44:	d53e      	bpl.n	800cdc4 <_dtoa_r+0x220>
 800cd46:	2201      	movs	r2, #1
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	9306      	str	r3, [sp, #24]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	db38      	blt.n	800cdc8 <_dtoa_r+0x224>
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd5a:	4694      	mov	ip, r2
 800cd5c:	4463      	add	r3, ip
 800cd5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd60:	2300      	movs	r3, #0
 800cd62:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd64:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd68:	2401      	movs	r4, #1
 800cd6a:	2b09      	cmp	r3, #9
 800cd6c:	d867      	bhi.n	800ce3e <_dtoa_r+0x29a>
 800cd6e:	2b05      	cmp	r3, #5
 800cd70:	dd02      	ble.n	800cd78 <_dtoa_r+0x1d4>
 800cd72:	2400      	movs	r4, #0
 800cd74:	3b04      	subs	r3, #4
 800cd76:	9322      	str	r3, [sp, #136]	@ 0x88
 800cd78:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd7a:	1e98      	subs	r0, r3, #2
 800cd7c:	2803      	cmp	r0, #3
 800cd7e:	d867      	bhi.n	800ce50 <_dtoa_r+0x2ac>
 800cd80:	f7f3 f9ca 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cd84:	5b383a2b 	.word	0x5b383a2b
 800cd88:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cd8a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800cd8c:	18f6      	adds	r6, r6, r3
 800cd8e:	4b68      	ldr	r3, [pc, #416]	@ (800cf30 <_dtoa_r+0x38c>)
 800cd90:	18f2      	adds	r2, r6, r3
 800cd92:	2a20      	cmp	r2, #32
 800cd94:	dd0f      	ble.n	800cdb6 <_dtoa_r+0x212>
 800cd96:	2340      	movs	r3, #64	@ 0x40
 800cd98:	1a9b      	subs	r3, r3, r2
 800cd9a:	409f      	lsls	r7, r3
 800cd9c:	4b65      	ldr	r3, [pc, #404]	@ (800cf34 <_dtoa_r+0x390>)
 800cd9e:	0038      	movs	r0, r7
 800cda0:	18f3      	adds	r3, r6, r3
 800cda2:	40dc      	lsrs	r4, r3
 800cda4:	4320      	orrs	r0, r4
 800cda6:	f7f6 faef 	bl	8003388 <__aeabi_ui2d>
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4b62      	ldr	r3, [pc, #392]	@ (800cf38 <_dtoa_r+0x394>)
 800cdae:	1e77      	subs	r7, r6, #1
 800cdb0:	18cb      	adds	r3, r1, r3
 800cdb2:	9218      	str	r2, [sp, #96]	@ 0x60
 800cdb4:	e776      	b.n	800cca4 <_dtoa_r+0x100>
 800cdb6:	2320      	movs	r3, #32
 800cdb8:	0020      	movs	r0, r4
 800cdba:	1a9b      	subs	r3, r3, r2
 800cdbc:	4098      	lsls	r0, r3
 800cdbe:	e7f2      	b.n	800cda6 <_dtoa_r+0x202>
 800cdc0:	9015      	str	r0, [sp, #84]	@ 0x54
 800cdc2:	e7ba      	b.n	800cd3a <_dtoa_r+0x196>
 800cdc4:	920d      	str	r2, [sp, #52]	@ 0x34
 800cdc6:	e7c3      	b.n	800cd50 <_dtoa_r+0x1ac>
 800cdc8:	9b06      	ldr	r3, [sp, #24]
 800cdca:	9a04      	ldr	r2, [sp, #16]
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	9306      	str	r3, [sp, #24]
 800cdd0:	4253      	negs	r3, r2
 800cdd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9314      	str	r3, [sp, #80]	@ 0x50
 800cdd8:	e7c5      	b.n	800cd66 <_dtoa_r+0x1c2>
 800cdda:	2300      	movs	r3, #0
 800cddc:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cde0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	dc13      	bgt.n	800ce10 <_dtoa_r+0x26c>
 800cde8:	2301      	movs	r3, #1
 800cdea:	001a      	movs	r2, r3
 800cdec:	930e      	str	r3, [sp, #56]	@ 0x38
 800cdee:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800cdf2:	e00d      	b.n	800ce10 <_dtoa_r+0x26c>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e7f1      	b.n	800cddc <_dtoa_r+0x238>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cdfc:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdfe:	4694      	mov	ip, r2
 800ce00:	9b04      	ldr	r3, [sp, #16]
 800ce02:	4463      	add	r3, ip
 800ce04:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce06:	3301      	adds	r3, #1
 800ce08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dc00      	bgt.n	800ce10 <_dtoa_r+0x26c>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	9a03      	ldr	r2, [sp, #12]
 800ce12:	2100      	movs	r1, #0
 800ce14:	69d0      	ldr	r0, [r2, #28]
 800ce16:	2204      	movs	r2, #4
 800ce18:	0015      	movs	r5, r2
 800ce1a:	3514      	adds	r5, #20
 800ce1c:	429d      	cmp	r5, r3
 800ce1e:	d91b      	bls.n	800ce58 <_dtoa_r+0x2b4>
 800ce20:	6041      	str	r1, [r0, #4]
 800ce22:	9803      	ldr	r0, [sp, #12]
 800ce24:	f000 fdb8 	bl	800d998 <_Balloc>
 800ce28:	9008      	str	r0, [sp, #32]
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d117      	bne.n	800ce5e <_dtoa_r+0x2ba>
 800ce2e:	21b0      	movs	r1, #176	@ 0xb0
 800ce30:	4b42      	ldr	r3, [pc, #264]	@ (800cf3c <_dtoa_r+0x398>)
 800ce32:	482e      	ldr	r0, [pc, #184]	@ (800ceec <_dtoa_r+0x348>)
 800ce34:	9a08      	ldr	r2, [sp, #32]
 800ce36:	31ff      	adds	r1, #255	@ 0xff
 800ce38:	e6c9      	b.n	800cbce <_dtoa_r+0x2a>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e7dd      	b.n	800cdfa <_dtoa_r+0x256>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9410      	str	r4, [sp, #64]	@ 0x40
 800ce42:	9322      	str	r3, [sp, #136]	@ 0x88
 800ce44:	3b01      	subs	r3, #1
 800ce46:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	3313      	adds	r3, #19
 800ce4e:	e7cf      	b.n	800cdf0 <_dtoa_r+0x24c>
 800ce50:	2301      	movs	r3, #1
 800ce52:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce54:	3b02      	subs	r3, #2
 800ce56:	e7f6      	b.n	800ce46 <_dtoa_r+0x2a2>
 800ce58:	3101      	adds	r1, #1
 800ce5a:	0052      	lsls	r2, r2, #1
 800ce5c:	e7dc      	b.n	800ce18 <_dtoa_r+0x274>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	9a08      	ldr	r2, [sp, #32]
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce68:	2b0e      	cmp	r3, #14
 800ce6a:	d900      	bls.n	800ce6e <_dtoa_r+0x2ca>
 800ce6c:	e0d9      	b.n	800d022 <_dtoa_r+0x47e>
 800ce6e:	2c00      	cmp	r4, #0
 800ce70:	d100      	bne.n	800ce74 <_dtoa_r+0x2d0>
 800ce72:	e0d6      	b.n	800d022 <_dtoa_r+0x47e>
 800ce74:	9b04      	ldr	r3, [sp, #16]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	dd64      	ble.n	800cf44 <_dtoa_r+0x3a0>
 800ce7a:	210f      	movs	r1, #15
 800ce7c:	9a04      	ldr	r2, [sp, #16]
 800ce7e:	4b2b      	ldr	r3, [pc, #172]	@ (800cf2c <_dtoa_r+0x388>)
 800ce80:	400a      	ands	r2, r1
 800ce82:	00d2      	lsls	r2, r2, #3
 800ce84:	189b      	adds	r3, r3, r2
 800ce86:	681e      	ldr	r6, [r3, #0]
 800ce88:	685f      	ldr	r7, [r3, #4]
 800ce8a:	9b04      	ldr	r3, [sp, #16]
 800ce8c:	2402      	movs	r4, #2
 800ce8e:	111d      	asrs	r5, r3, #4
 800ce90:	05db      	lsls	r3, r3, #23
 800ce92:	d50a      	bpl.n	800ceaa <_dtoa_r+0x306>
 800ce94:	4b2a      	ldr	r3, [pc, #168]	@ (800cf40 <_dtoa_r+0x39c>)
 800ce96:	400d      	ands	r5, r1
 800ce98:	6a1a      	ldr	r2, [r3, #32]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ce9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cea0:	f7f4 ff3e 	bl	8001d20 <__aeabi_ddiv>
 800cea4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cea6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cea8:	3401      	adds	r4, #1
 800ceaa:	4b25      	ldr	r3, [pc, #148]	@ (800cf40 <_dtoa_r+0x39c>)
 800ceac:	930c      	str	r3, [sp, #48]	@ 0x30
 800ceae:	2d00      	cmp	r5, #0
 800ceb0:	d108      	bne.n	800cec4 <_dtoa_r+0x320>
 800ceb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ceb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ceb6:	0032      	movs	r2, r6
 800ceb8:	003b      	movs	r3, r7
 800ceba:	f7f4 ff31 	bl	8001d20 <__aeabi_ddiv>
 800cebe:	900a      	str	r0, [sp, #40]	@ 0x28
 800cec0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cec2:	e05a      	b.n	800cf7a <_dtoa_r+0x3d6>
 800cec4:	2301      	movs	r3, #1
 800cec6:	421d      	tst	r5, r3
 800cec8:	d009      	beq.n	800cede <_dtoa_r+0x33a>
 800ceca:	18e4      	adds	r4, r4, r3
 800cecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cece:	0030      	movs	r0, r6
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	0039      	movs	r1, r7
 800ced6:	f7f5 fb67 	bl	80025a8 <__aeabi_dmul>
 800ceda:	0006      	movs	r6, r0
 800cedc:	000f      	movs	r7, r1
 800cede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cee0:	106d      	asrs	r5, r5, #1
 800cee2:	3308      	adds	r3, #8
 800cee4:	e7e2      	b.n	800ceac <_dtoa_r+0x308>
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	0801095e 	.word	0x0801095e
 800ceec:	08010975 	.word	0x08010975
 800cef0:	7ff00000 	.word	0x7ff00000
 800cef4:	0000270f 	.word	0x0000270f
 800cef8:	0801095a 	.word	0x0801095a
 800cefc:	0801095d 	.word	0x0801095d
 800cf00:	08010929 	.word	0x08010929
 800cf04:	08010928 	.word	0x08010928
 800cf08:	3ff00000 	.word	0x3ff00000
 800cf0c:	fffffc01 	.word	0xfffffc01
 800cf10:	3ff80000 	.word	0x3ff80000
 800cf14:	636f4361 	.word	0x636f4361
 800cf18:	3fd287a7 	.word	0x3fd287a7
 800cf1c:	8b60c8b3 	.word	0x8b60c8b3
 800cf20:	3fc68a28 	.word	0x3fc68a28
 800cf24:	509f79fb 	.word	0x509f79fb
 800cf28:	3fd34413 	.word	0x3fd34413
 800cf2c:	08010a70 	.word	0x08010a70
 800cf30:	00000432 	.word	0x00000432
 800cf34:	00000412 	.word	0x00000412
 800cf38:	fe100000 	.word	0xfe100000
 800cf3c:	080109cd 	.word	0x080109cd
 800cf40:	08010a48 	.word	0x08010a48
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	2402      	movs	r4, #2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d016      	beq.n	800cf7a <_dtoa_r+0x3d6>
 800cf4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cf4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cf50:	220f      	movs	r2, #15
 800cf52:	425d      	negs	r5, r3
 800cf54:	402a      	ands	r2, r5
 800cf56:	4bd7      	ldr	r3, [pc, #860]	@ (800d2b4 <_dtoa_r+0x710>)
 800cf58:	00d2      	lsls	r2, r2, #3
 800cf5a:	189b      	adds	r3, r3, r2
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	f7f5 fb22 	bl	80025a8 <__aeabi_dmul>
 800cf64:	2701      	movs	r7, #1
 800cf66:	2300      	movs	r3, #0
 800cf68:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf6c:	4ed2      	ldr	r6, [pc, #840]	@ (800d2b8 <_dtoa_r+0x714>)
 800cf6e:	112d      	asrs	r5, r5, #4
 800cf70:	2d00      	cmp	r5, #0
 800cf72:	d000      	beq.n	800cf76 <_dtoa_r+0x3d2>
 800cf74:	e0ba      	b.n	800d0ec <_dtoa_r+0x548>
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1a1      	bne.n	800cebe <_dtoa_r+0x31a>
 800cf7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cf7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cf7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d100      	bne.n	800cf86 <_dtoa_r+0x3e2>
 800cf84:	e0bd      	b.n	800d102 <_dtoa_r+0x55e>
 800cf86:	2200      	movs	r2, #0
 800cf88:	0030      	movs	r0, r6
 800cf8a:	0039      	movs	r1, r7
 800cf8c:	4bcb      	ldr	r3, [pc, #812]	@ (800d2bc <_dtoa_r+0x718>)
 800cf8e:	f7f3 fa63 	bl	8000458 <__aeabi_dcmplt>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d100      	bne.n	800cf98 <_dtoa_r+0x3f4>
 800cf96:	e0b4      	b.n	800d102 <_dtoa_r+0x55e>
 800cf98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d100      	bne.n	800cfa0 <_dtoa_r+0x3fc>
 800cf9e:	e0b0      	b.n	800d102 <_dtoa_r+0x55e>
 800cfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd39      	ble.n	800d01a <_dtoa_r+0x476>
 800cfa6:	9b04      	ldr	r3, [sp, #16]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfae:	0030      	movs	r0, r6
 800cfb0:	4bc3      	ldr	r3, [pc, #780]	@ (800d2c0 <_dtoa_r+0x71c>)
 800cfb2:	0039      	movs	r1, r7
 800cfb4:	f7f5 faf8 	bl	80025a8 <__aeabi_dmul>
 800cfb8:	900a      	str	r0, [sp, #40]	@ 0x28
 800cfba:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cfbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfbe:	3401      	adds	r4, #1
 800cfc0:	0020      	movs	r0, r4
 800cfc2:	9311      	str	r3, [sp, #68]	@ 0x44
 800cfc4:	f7f6 f9b2 	bl	800332c <__aeabi_i2d>
 800cfc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfcc:	f7f5 faec 	bl	80025a8 <__aeabi_dmul>
 800cfd0:	4bbc      	ldr	r3, [pc, #752]	@ (800d2c4 <_dtoa_r+0x720>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f7f4 fb40 	bl	8001658 <__aeabi_dadd>
 800cfd8:	4bbb      	ldr	r3, [pc, #748]	@ (800d2c8 <_dtoa_r+0x724>)
 800cfda:	0006      	movs	r6, r0
 800cfdc:	18cf      	adds	r7, r1, r3
 800cfde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d000      	beq.n	800cfe6 <_dtoa_r+0x442>
 800cfe4:	e091      	b.n	800d10a <_dtoa_r+0x566>
 800cfe6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cfe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfea:	2200      	movs	r2, #0
 800cfec:	4bb7      	ldr	r3, [pc, #732]	@ (800d2cc <_dtoa_r+0x728>)
 800cfee:	f7f5 fda3 	bl	8002b38 <__aeabi_dsub>
 800cff2:	0032      	movs	r2, r6
 800cff4:	003b      	movs	r3, r7
 800cff6:	0004      	movs	r4, r0
 800cff8:	000d      	movs	r5, r1
 800cffa:	f7f3 fa41 	bl	8000480 <__aeabi_dcmpgt>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d000      	beq.n	800d004 <_dtoa_r+0x460>
 800d002:	e29d      	b.n	800d540 <_dtoa_r+0x99c>
 800d004:	2180      	movs	r1, #128	@ 0x80
 800d006:	0609      	lsls	r1, r1, #24
 800d008:	187b      	adds	r3, r7, r1
 800d00a:	0032      	movs	r2, r6
 800d00c:	0020      	movs	r0, r4
 800d00e:	0029      	movs	r1, r5
 800d010:	f7f3 fa22 	bl	8000458 <__aeabi_dcmplt>
 800d014:	2800      	cmp	r0, #0
 800d016:	d000      	beq.n	800d01a <_dtoa_r+0x476>
 800d018:	e130      	b.n	800d27c <_dtoa_r+0x6d8>
 800d01a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d01c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d020:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d022:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d024:	2b00      	cmp	r3, #0
 800d026:	da00      	bge.n	800d02a <_dtoa_r+0x486>
 800d028:	e177      	b.n	800d31a <_dtoa_r+0x776>
 800d02a:	9a04      	ldr	r2, [sp, #16]
 800d02c:	2a0e      	cmp	r2, #14
 800d02e:	dd00      	ble.n	800d032 <_dtoa_r+0x48e>
 800d030:	e173      	b.n	800d31a <_dtoa_r+0x776>
 800d032:	4ba0      	ldr	r3, [pc, #640]	@ (800d2b4 <_dtoa_r+0x710>)
 800d034:	00d2      	lsls	r2, r2, #3
 800d036:	189b      	adds	r3, r3, r2
 800d038:	685c      	ldr	r4, [r3, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	9306      	str	r3, [sp, #24]
 800d03e:	9407      	str	r4, [sp, #28]
 800d040:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d042:	2b00      	cmp	r3, #0
 800d044:	da03      	bge.n	800d04e <_dtoa_r+0x4aa>
 800d046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dc00      	bgt.n	800d04e <_dtoa_r+0x4aa>
 800d04c:	e106      	b.n	800d25c <_dtoa_r+0x6b8>
 800d04e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d050:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d054:	9d08      	ldr	r5, [sp, #32]
 800d056:	3b01      	subs	r3, #1
 800d058:	195b      	adds	r3, r3, r5
 800d05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d05c:	9a06      	ldr	r2, [sp, #24]
 800d05e:	9b07      	ldr	r3, [sp, #28]
 800d060:	0030      	movs	r0, r6
 800d062:	0039      	movs	r1, r7
 800d064:	f7f4 fe5c 	bl	8001d20 <__aeabi_ddiv>
 800d068:	f7f6 f924 	bl	80032b4 <__aeabi_d2iz>
 800d06c:	9009      	str	r0, [sp, #36]	@ 0x24
 800d06e:	f7f6 f95d 	bl	800332c <__aeabi_i2d>
 800d072:	9a06      	ldr	r2, [sp, #24]
 800d074:	9b07      	ldr	r3, [sp, #28]
 800d076:	f7f5 fa97 	bl	80025a8 <__aeabi_dmul>
 800d07a:	0002      	movs	r2, r0
 800d07c:	000b      	movs	r3, r1
 800d07e:	0030      	movs	r0, r6
 800d080:	0039      	movs	r1, r7
 800d082:	f7f5 fd59 	bl	8002b38 <__aeabi_dsub>
 800d086:	002b      	movs	r3, r5
 800d088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d08a:	3501      	adds	r5, #1
 800d08c:	3230      	adds	r2, #48	@ 0x30
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d092:	002c      	movs	r4, r5
 800d094:	429a      	cmp	r2, r3
 800d096:	d000      	beq.n	800d09a <_dtoa_r+0x4f6>
 800d098:	e131      	b.n	800d2fe <_dtoa_r+0x75a>
 800d09a:	0002      	movs	r2, r0
 800d09c:	000b      	movs	r3, r1
 800d09e:	f7f4 fadb 	bl	8001658 <__aeabi_dadd>
 800d0a2:	9a06      	ldr	r2, [sp, #24]
 800d0a4:	9b07      	ldr	r3, [sp, #28]
 800d0a6:	0006      	movs	r6, r0
 800d0a8:	000f      	movs	r7, r1
 800d0aa:	f7f3 f9e9 	bl	8000480 <__aeabi_dcmpgt>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d000      	beq.n	800d0b4 <_dtoa_r+0x510>
 800d0b2:	e10f      	b.n	800d2d4 <_dtoa_r+0x730>
 800d0b4:	9a06      	ldr	r2, [sp, #24]
 800d0b6:	9b07      	ldr	r3, [sp, #28]
 800d0b8:	0030      	movs	r0, r6
 800d0ba:	0039      	movs	r1, r7
 800d0bc:	f7f3 f9c6 	bl	800044c <__aeabi_dcmpeq>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d003      	beq.n	800d0cc <_dtoa_r+0x528>
 800d0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c6:	07dd      	lsls	r5, r3, #31
 800d0c8:	d500      	bpl.n	800d0cc <_dtoa_r+0x528>
 800d0ca:	e103      	b.n	800d2d4 <_dtoa_r+0x730>
 800d0cc:	9905      	ldr	r1, [sp, #20]
 800d0ce:	9803      	ldr	r0, [sp, #12]
 800d0d0:	f000 fca6 	bl	800da20 <_Bfree>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	7023      	strb	r3, [r4, #0]
 800d0d8:	9b04      	ldr	r3, [sp, #16]
 800d0da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d0dc:	3301      	adds	r3, #1
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d100      	bne.n	800d0e8 <_dtoa_r+0x544>
 800d0e6:	e5a7      	b.n	800cc38 <_dtoa_r+0x94>
 800d0e8:	601c      	str	r4, [r3, #0]
 800d0ea:	e5a5      	b.n	800cc38 <_dtoa_r+0x94>
 800d0ec:	423d      	tst	r5, r7
 800d0ee:	d005      	beq.n	800d0fc <_dtoa_r+0x558>
 800d0f0:	6832      	ldr	r2, [r6, #0]
 800d0f2:	6873      	ldr	r3, [r6, #4]
 800d0f4:	f7f5 fa58 	bl	80025a8 <__aeabi_dmul>
 800d0f8:	003b      	movs	r3, r7
 800d0fa:	3401      	adds	r4, #1
 800d0fc:	106d      	asrs	r5, r5, #1
 800d0fe:	3608      	adds	r6, #8
 800d100:	e736      	b.n	800cf70 <_dtoa_r+0x3cc>
 800d102:	9b04      	ldr	r3, [sp, #16]
 800d104:	930c      	str	r3, [sp, #48]	@ 0x30
 800d106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d108:	e75a      	b.n	800cfc0 <_dtoa_r+0x41c>
 800d10a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d10c:	4b69      	ldr	r3, [pc, #420]	@ (800d2b4 <_dtoa_r+0x710>)
 800d10e:	3a01      	subs	r2, #1
 800d110:	00d2      	lsls	r2, r2, #3
 800d112:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d114:	189b      	adds	r3, r3, r2
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2900      	cmp	r1, #0
 800d11c:	d04c      	beq.n	800d1b8 <_dtoa_r+0x614>
 800d11e:	2000      	movs	r0, #0
 800d120:	496b      	ldr	r1, [pc, #428]	@ (800d2d0 <_dtoa_r+0x72c>)
 800d122:	f7f4 fdfd 	bl	8001d20 <__aeabi_ddiv>
 800d126:	0032      	movs	r2, r6
 800d128:	003b      	movs	r3, r7
 800d12a:	f7f5 fd05 	bl	8002b38 <__aeabi_dsub>
 800d12e:	9a08      	ldr	r2, [sp, #32]
 800d130:	0006      	movs	r6, r0
 800d132:	4694      	mov	ip, r2
 800d134:	000f      	movs	r7, r1
 800d136:	9b08      	ldr	r3, [sp, #32]
 800d138:	9316      	str	r3, [sp, #88]	@ 0x58
 800d13a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d13c:	4463      	add	r3, ip
 800d13e:	9311      	str	r3, [sp, #68]	@ 0x44
 800d140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d142:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d144:	f7f6 f8b6 	bl	80032b4 <__aeabi_d2iz>
 800d148:	0005      	movs	r5, r0
 800d14a:	f7f6 f8ef 	bl	800332c <__aeabi_i2d>
 800d14e:	0002      	movs	r2, r0
 800d150:	000b      	movs	r3, r1
 800d152:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d156:	f7f5 fcef 	bl	8002b38 <__aeabi_dsub>
 800d15a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d15c:	3530      	adds	r5, #48	@ 0x30
 800d15e:	1c5c      	adds	r4, r3, #1
 800d160:	701d      	strb	r5, [r3, #0]
 800d162:	0032      	movs	r2, r6
 800d164:	003b      	movs	r3, r7
 800d166:	900a      	str	r0, [sp, #40]	@ 0x28
 800d168:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d16a:	f7f3 f975 	bl	8000458 <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d16a      	bne.n	800d248 <_dtoa_r+0x6a4>
 800d172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d176:	2000      	movs	r0, #0
 800d178:	4950      	ldr	r1, [pc, #320]	@ (800d2bc <_dtoa_r+0x718>)
 800d17a:	f7f5 fcdd 	bl	8002b38 <__aeabi_dsub>
 800d17e:	0032      	movs	r2, r6
 800d180:	003b      	movs	r3, r7
 800d182:	f7f3 f969 	bl	8000458 <__aeabi_dcmplt>
 800d186:	2800      	cmp	r0, #0
 800d188:	d000      	beq.n	800d18c <_dtoa_r+0x5e8>
 800d18a:	e0a5      	b.n	800d2d8 <_dtoa_r+0x734>
 800d18c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d18e:	42a3      	cmp	r3, r4
 800d190:	d100      	bne.n	800d194 <_dtoa_r+0x5f0>
 800d192:	e742      	b.n	800d01a <_dtoa_r+0x476>
 800d194:	2200      	movs	r2, #0
 800d196:	0030      	movs	r0, r6
 800d198:	0039      	movs	r1, r7
 800d19a:	4b49      	ldr	r3, [pc, #292]	@ (800d2c0 <_dtoa_r+0x71c>)
 800d19c:	f7f5 fa04 	bl	80025a8 <__aeabi_dmul>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	0006      	movs	r6, r0
 800d1a4:	000f      	movs	r7, r1
 800d1a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1aa:	4b45      	ldr	r3, [pc, #276]	@ (800d2c0 <_dtoa_r+0x71c>)
 800d1ac:	f7f5 f9fc 	bl	80025a8 <__aeabi_dmul>
 800d1b0:	9416      	str	r4, [sp, #88]	@ 0x58
 800d1b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1b6:	e7c3      	b.n	800d140 <_dtoa_r+0x59c>
 800d1b8:	0030      	movs	r0, r6
 800d1ba:	0039      	movs	r1, r7
 800d1bc:	f7f5 f9f4 	bl	80025a8 <__aeabi_dmul>
 800d1c0:	9d08      	ldr	r5, [sp, #32]
 800d1c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d1c4:	002b      	movs	r3, r5
 800d1c6:	4694      	mov	ip, r2
 800d1c8:	9016      	str	r0, [sp, #88]	@ 0x58
 800d1ca:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d1cc:	4463      	add	r3, ip
 800d1ce:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1d4:	f7f6 f86e 	bl	80032b4 <__aeabi_d2iz>
 800d1d8:	0004      	movs	r4, r0
 800d1da:	f7f6 f8a7 	bl	800332c <__aeabi_i2d>
 800d1de:	000b      	movs	r3, r1
 800d1e0:	0002      	movs	r2, r0
 800d1e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1e6:	f7f5 fca7 	bl	8002b38 <__aeabi_dsub>
 800d1ea:	3430      	adds	r4, #48	@ 0x30
 800d1ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1ee:	702c      	strb	r4, [r5, #0]
 800d1f0:	3501      	adds	r5, #1
 800d1f2:	0006      	movs	r6, r0
 800d1f4:	000f      	movs	r7, r1
 800d1f6:	42ab      	cmp	r3, r5
 800d1f8:	d129      	bne.n	800d24e <_dtoa_r+0x6aa>
 800d1fa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d1fc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d1fe:	9b08      	ldr	r3, [sp, #32]
 800d200:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d202:	469c      	mov	ip, r3
 800d204:	2200      	movs	r2, #0
 800d206:	4b32      	ldr	r3, [pc, #200]	@ (800d2d0 <_dtoa_r+0x72c>)
 800d208:	4464      	add	r4, ip
 800d20a:	f7f4 fa25 	bl	8001658 <__aeabi_dadd>
 800d20e:	0002      	movs	r2, r0
 800d210:	000b      	movs	r3, r1
 800d212:	0030      	movs	r0, r6
 800d214:	0039      	movs	r1, r7
 800d216:	f7f3 f933 	bl	8000480 <__aeabi_dcmpgt>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d15c      	bne.n	800d2d8 <_dtoa_r+0x734>
 800d21e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d220:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d222:	2000      	movs	r0, #0
 800d224:	492a      	ldr	r1, [pc, #168]	@ (800d2d0 <_dtoa_r+0x72c>)
 800d226:	f7f5 fc87 	bl	8002b38 <__aeabi_dsub>
 800d22a:	0002      	movs	r2, r0
 800d22c:	000b      	movs	r3, r1
 800d22e:	0030      	movs	r0, r6
 800d230:	0039      	movs	r1, r7
 800d232:	f7f3 f911 	bl	8000458 <__aeabi_dcmplt>
 800d236:	2800      	cmp	r0, #0
 800d238:	d100      	bne.n	800d23c <_dtoa_r+0x698>
 800d23a:	e6ee      	b.n	800d01a <_dtoa_r+0x476>
 800d23c:	0023      	movs	r3, r4
 800d23e:	3c01      	subs	r4, #1
 800d240:	7822      	ldrb	r2, [r4, #0]
 800d242:	2a30      	cmp	r2, #48	@ 0x30
 800d244:	d0fa      	beq.n	800d23c <_dtoa_r+0x698>
 800d246:	001c      	movs	r4, r3
 800d248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	e73e      	b.n	800d0cc <_dtoa_r+0x528>
 800d24e:	2200      	movs	r2, #0
 800d250:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c0 <_dtoa_r+0x71c>)
 800d252:	f7f5 f9a9 	bl	80025a8 <__aeabi_dmul>
 800d256:	900a      	str	r0, [sp, #40]	@ 0x28
 800d258:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d25a:	e7b9      	b.n	800d1d0 <_dtoa_r+0x62c>
 800d25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10c      	bne.n	800d27c <_dtoa_r+0x6d8>
 800d262:	9806      	ldr	r0, [sp, #24]
 800d264:	9907      	ldr	r1, [sp, #28]
 800d266:	2200      	movs	r2, #0
 800d268:	4b18      	ldr	r3, [pc, #96]	@ (800d2cc <_dtoa_r+0x728>)
 800d26a:	f7f5 f99d 	bl	80025a8 <__aeabi_dmul>
 800d26e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d270:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d272:	f7f3 f90f 	bl	8000494 <__aeabi_dcmpge>
 800d276:	2800      	cmp	r0, #0
 800d278:	d100      	bne.n	800d27c <_dtoa_r+0x6d8>
 800d27a:	e164      	b.n	800d546 <_dtoa_r+0x9a2>
 800d27c:	2600      	movs	r6, #0
 800d27e:	0037      	movs	r7, r6
 800d280:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d282:	9c08      	ldr	r4, [sp, #32]
 800d284:	43db      	mvns	r3, r3
 800d286:	930c      	str	r3, [sp, #48]	@ 0x30
 800d288:	2300      	movs	r3, #0
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	0031      	movs	r1, r6
 800d28e:	9803      	ldr	r0, [sp, #12]
 800d290:	f000 fbc6 	bl	800da20 <_Bfree>
 800d294:	2f00      	cmp	r7, #0
 800d296:	d0d7      	beq.n	800d248 <_dtoa_r+0x6a4>
 800d298:	9b04      	ldr	r3, [sp, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d005      	beq.n	800d2aa <_dtoa_r+0x706>
 800d29e:	42bb      	cmp	r3, r7
 800d2a0:	d003      	beq.n	800d2aa <_dtoa_r+0x706>
 800d2a2:	0019      	movs	r1, r3
 800d2a4:	9803      	ldr	r0, [sp, #12]
 800d2a6:	f000 fbbb 	bl	800da20 <_Bfree>
 800d2aa:	0039      	movs	r1, r7
 800d2ac:	9803      	ldr	r0, [sp, #12]
 800d2ae:	f000 fbb7 	bl	800da20 <_Bfree>
 800d2b2:	e7c9      	b.n	800d248 <_dtoa_r+0x6a4>
 800d2b4:	08010a70 	.word	0x08010a70
 800d2b8:	08010a48 	.word	0x08010a48
 800d2bc:	3ff00000 	.word	0x3ff00000
 800d2c0:	40240000 	.word	0x40240000
 800d2c4:	401c0000 	.word	0x401c0000
 800d2c8:	fcc00000 	.word	0xfcc00000
 800d2cc:	40140000 	.word	0x40140000
 800d2d0:	3fe00000 	.word	0x3fe00000
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2d8:	0023      	movs	r3, r4
 800d2da:	001c      	movs	r4, r3
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	781a      	ldrb	r2, [r3, #0]
 800d2e0:	2a39      	cmp	r2, #57	@ 0x39
 800d2e2:	d108      	bne.n	800d2f6 <_dtoa_r+0x752>
 800d2e4:	9a08      	ldr	r2, [sp, #32]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d1f7      	bne.n	800d2da <_dtoa_r+0x736>
 800d2ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2ec:	9908      	ldr	r1, [sp, #32]
 800d2ee:	3201      	adds	r2, #1
 800d2f0:	920c      	str	r2, [sp, #48]	@ 0x30
 800d2f2:	2230      	movs	r2, #48	@ 0x30
 800d2f4:	700a      	strb	r2, [r1, #0]
 800d2f6:	781a      	ldrb	r2, [r3, #0]
 800d2f8:	3201      	adds	r2, #1
 800d2fa:	701a      	strb	r2, [r3, #0]
 800d2fc:	e7a4      	b.n	800d248 <_dtoa_r+0x6a4>
 800d2fe:	2200      	movs	r2, #0
 800d300:	4bc6      	ldr	r3, [pc, #792]	@ (800d61c <_dtoa_r+0xa78>)
 800d302:	f7f5 f951 	bl	80025a8 <__aeabi_dmul>
 800d306:	2200      	movs	r2, #0
 800d308:	2300      	movs	r3, #0
 800d30a:	0006      	movs	r6, r0
 800d30c:	000f      	movs	r7, r1
 800d30e:	f7f3 f89d 	bl	800044c <__aeabi_dcmpeq>
 800d312:	2800      	cmp	r0, #0
 800d314:	d100      	bne.n	800d318 <_dtoa_r+0x774>
 800d316:	e6a1      	b.n	800d05c <_dtoa_r+0x4b8>
 800d318:	e6d8      	b.n	800d0cc <_dtoa_r+0x528>
 800d31a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d31c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d31e:	9c06      	ldr	r4, [sp, #24]
 800d320:	2f00      	cmp	r7, #0
 800d322:	d014      	beq.n	800d34e <_dtoa_r+0x7aa>
 800d324:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d326:	2a01      	cmp	r2, #1
 800d328:	dd00      	ble.n	800d32c <_dtoa_r+0x788>
 800d32a:	e0c8      	b.n	800d4be <_dtoa_r+0x91a>
 800d32c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d32e:	2a00      	cmp	r2, #0
 800d330:	d100      	bne.n	800d334 <_dtoa_r+0x790>
 800d332:	e0be      	b.n	800d4b2 <_dtoa_r+0x90e>
 800d334:	4aba      	ldr	r2, [pc, #744]	@ (800d620 <_dtoa_r+0xa7c>)
 800d336:	189b      	adds	r3, r3, r2
 800d338:	9a06      	ldr	r2, [sp, #24]
 800d33a:	2101      	movs	r1, #1
 800d33c:	18d2      	adds	r2, r2, r3
 800d33e:	9206      	str	r2, [sp, #24]
 800d340:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d342:	9803      	ldr	r0, [sp, #12]
 800d344:	18d3      	adds	r3, r2, r3
 800d346:	930d      	str	r3, [sp, #52]	@ 0x34
 800d348:	f000 fc6e 	bl	800dc28 <__i2b>
 800d34c:	0007      	movs	r7, r0
 800d34e:	2c00      	cmp	r4, #0
 800d350:	d00e      	beq.n	800d370 <_dtoa_r+0x7cc>
 800d352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d354:	2b00      	cmp	r3, #0
 800d356:	dd0b      	ble.n	800d370 <_dtoa_r+0x7cc>
 800d358:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d35a:	0023      	movs	r3, r4
 800d35c:	4294      	cmp	r4, r2
 800d35e:	dd00      	ble.n	800d362 <_dtoa_r+0x7be>
 800d360:	0013      	movs	r3, r2
 800d362:	9a06      	ldr	r2, [sp, #24]
 800d364:	1ae4      	subs	r4, r4, r3
 800d366:	1ad2      	subs	r2, r2, r3
 800d368:	9206      	str	r2, [sp, #24]
 800d36a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d01f      	beq.n	800d3b6 <_dtoa_r+0x812>
 800d376:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d100      	bne.n	800d37e <_dtoa_r+0x7da>
 800d37c:	e0b5      	b.n	800d4ea <_dtoa_r+0x946>
 800d37e:	2d00      	cmp	r5, #0
 800d380:	d010      	beq.n	800d3a4 <_dtoa_r+0x800>
 800d382:	0039      	movs	r1, r7
 800d384:	002a      	movs	r2, r5
 800d386:	9803      	ldr	r0, [sp, #12]
 800d388:	f000 fd18 	bl	800ddbc <__pow5mult>
 800d38c:	9a05      	ldr	r2, [sp, #20]
 800d38e:	0001      	movs	r1, r0
 800d390:	0007      	movs	r7, r0
 800d392:	9803      	ldr	r0, [sp, #12]
 800d394:	f000 fc60 	bl	800dc58 <__multiply>
 800d398:	0006      	movs	r6, r0
 800d39a:	9905      	ldr	r1, [sp, #20]
 800d39c:	9803      	ldr	r0, [sp, #12]
 800d39e:	f000 fb3f 	bl	800da20 <_Bfree>
 800d3a2:	9605      	str	r6, [sp, #20]
 800d3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3a6:	1b5a      	subs	r2, r3, r5
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	d004      	beq.n	800d3b6 <_dtoa_r+0x812>
 800d3ac:	9905      	ldr	r1, [sp, #20]
 800d3ae:	9803      	ldr	r0, [sp, #12]
 800d3b0:	f000 fd04 	bl	800ddbc <__pow5mult>
 800d3b4:	9005      	str	r0, [sp, #20]
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	9803      	ldr	r0, [sp, #12]
 800d3ba:	f000 fc35 	bl	800dc28 <__i2b>
 800d3be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3c0:	0006      	movs	r6, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d100      	bne.n	800d3c8 <_dtoa_r+0x824>
 800d3c6:	e1bc      	b.n	800d742 <_dtoa_r+0xb9e>
 800d3c8:	001a      	movs	r2, r3
 800d3ca:	0001      	movs	r1, r0
 800d3cc:	9803      	ldr	r0, [sp, #12]
 800d3ce:	f000 fcf5 	bl	800ddbc <__pow5mult>
 800d3d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d3d4:	0006      	movs	r6, r0
 800d3d6:	2500      	movs	r5, #0
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	dc16      	bgt.n	800d40a <_dtoa_r+0x866>
 800d3dc:	2500      	movs	r5, #0
 800d3de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3e0:	42ab      	cmp	r3, r5
 800d3e2:	d10e      	bne.n	800d402 <_dtoa_r+0x85e>
 800d3e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3e6:	031b      	lsls	r3, r3, #12
 800d3e8:	42ab      	cmp	r3, r5
 800d3ea:	d10a      	bne.n	800d402 <_dtoa_r+0x85e>
 800d3ec:	4b8d      	ldr	r3, [pc, #564]	@ (800d624 <_dtoa_r+0xa80>)
 800d3ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d3f0:	4213      	tst	r3, r2
 800d3f2:	d006      	beq.n	800d402 <_dtoa_r+0x85e>
 800d3f4:	9b06      	ldr	r3, [sp, #24]
 800d3f6:	3501      	adds	r5, #1
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	9306      	str	r3, [sp, #24]
 800d3fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3fe:	3301      	adds	r3, #1
 800d400:	930d      	str	r3, [sp, #52]	@ 0x34
 800d402:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d404:	2001      	movs	r0, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	d008      	beq.n	800d41c <_dtoa_r+0x878>
 800d40a:	6933      	ldr	r3, [r6, #16]
 800d40c:	3303      	adds	r3, #3
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	18f3      	adds	r3, r6, r3
 800d412:	6858      	ldr	r0, [r3, #4]
 800d414:	f000 fbb8 	bl	800db88 <__hi0bits>
 800d418:	2320      	movs	r3, #32
 800d41a:	1a18      	subs	r0, r3, r0
 800d41c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d41e:	1818      	adds	r0, r3, r0
 800d420:	0002      	movs	r2, r0
 800d422:	231f      	movs	r3, #31
 800d424:	401a      	ands	r2, r3
 800d426:	4218      	tst	r0, r3
 800d428:	d065      	beq.n	800d4f6 <_dtoa_r+0x952>
 800d42a:	3301      	adds	r3, #1
 800d42c:	1a9b      	subs	r3, r3, r2
 800d42e:	2b04      	cmp	r3, #4
 800d430:	dd5d      	ble.n	800d4ee <_dtoa_r+0x94a>
 800d432:	231c      	movs	r3, #28
 800d434:	1a9b      	subs	r3, r3, r2
 800d436:	9a06      	ldr	r2, [sp, #24]
 800d438:	18e4      	adds	r4, r4, r3
 800d43a:	18d2      	adds	r2, r2, r3
 800d43c:	9206      	str	r2, [sp, #24]
 800d43e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d440:	18d3      	adds	r3, r2, r3
 800d442:	930d      	str	r3, [sp, #52]	@ 0x34
 800d444:	9b06      	ldr	r3, [sp, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	dd05      	ble.n	800d456 <_dtoa_r+0x8b2>
 800d44a:	001a      	movs	r2, r3
 800d44c:	9905      	ldr	r1, [sp, #20]
 800d44e:	9803      	ldr	r0, [sp, #12]
 800d450:	f000 fd10 	bl	800de74 <__lshift>
 800d454:	9005      	str	r0, [sp, #20]
 800d456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dd05      	ble.n	800d468 <_dtoa_r+0x8c4>
 800d45c:	0031      	movs	r1, r6
 800d45e:	001a      	movs	r2, r3
 800d460:	9803      	ldr	r0, [sp, #12]
 800d462:	f000 fd07 	bl	800de74 <__lshift>
 800d466:	0006      	movs	r6, r0
 800d468:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d045      	beq.n	800d4fa <_dtoa_r+0x956>
 800d46e:	0031      	movs	r1, r6
 800d470:	9805      	ldr	r0, [sp, #20]
 800d472:	f000 fd6b 	bl	800df4c <__mcmp>
 800d476:	2800      	cmp	r0, #0
 800d478:	da3f      	bge.n	800d4fa <_dtoa_r+0x956>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	220a      	movs	r2, #10
 800d47e:	3b01      	subs	r3, #1
 800d480:	930c      	str	r3, [sp, #48]	@ 0x30
 800d482:	9905      	ldr	r1, [sp, #20]
 800d484:	2300      	movs	r3, #0
 800d486:	9803      	ldr	r0, [sp, #12]
 800d488:	f000 faee 	bl	800da68 <__multadd>
 800d48c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d48e:	9005      	str	r0, [sp, #20]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d100      	bne.n	800d496 <_dtoa_r+0x8f2>
 800d494:	e15c      	b.n	800d750 <_dtoa_r+0xbac>
 800d496:	2300      	movs	r3, #0
 800d498:	0039      	movs	r1, r7
 800d49a:	220a      	movs	r2, #10
 800d49c:	9803      	ldr	r0, [sp, #12]
 800d49e:	f000 fae3 	bl	800da68 <__multadd>
 800d4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4a4:	0007      	movs	r7, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dc55      	bgt.n	800d556 <_dtoa_r+0x9b2>
 800d4aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	dc2d      	bgt.n	800d50c <_dtoa_r+0x968>
 800d4b0:	e051      	b.n	800d556 <_dtoa_r+0x9b2>
 800d4b2:	2336      	movs	r3, #54	@ 0x36
 800d4b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d4b6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d4b8:	9c06      	ldr	r4, [sp, #24]
 800d4ba:	1a9b      	subs	r3, r3, r2
 800d4bc:	e73c      	b.n	800d338 <_dtoa_r+0x794>
 800d4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c0:	1e5d      	subs	r5, r3, #1
 800d4c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4c4:	42ab      	cmp	r3, r5
 800d4c6:	db08      	blt.n	800d4da <_dtoa_r+0x936>
 800d4c8:	1b5d      	subs	r5, r3, r5
 800d4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4cc:	9c06      	ldr	r4, [sp, #24]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	db00      	blt.n	800d4d4 <_dtoa_r+0x930>
 800d4d2:	e731      	b.n	800d338 <_dtoa_r+0x794>
 800d4d4:	1ae4      	subs	r4, r4, r3
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e72e      	b.n	800d338 <_dtoa_r+0x794>
 800d4da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d4de:	1aeb      	subs	r3, r5, r3
 800d4e0:	18d3      	adds	r3, r2, r3
 800d4e2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d4e4:	9314      	str	r3, [sp, #80]	@ 0x50
 800d4e6:	2500      	movs	r5, #0
 800d4e8:	e7ef      	b.n	800d4ca <_dtoa_r+0x926>
 800d4ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d4ec:	e75e      	b.n	800d3ac <_dtoa_r+0x808>
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	d0a8      	beq.n	800d444 <_dtoa_r+0x8a0>
 800d4f2:	331c      	adds	r3, #28
 800d4f4:	e79f      	b.n	800d436 <_dtoa_r+0x892>
 800d4f6:	0013      	movs	r3, r2
 800d4f8:	e7fb      	b.n	800d4f2 <_dtoa_r+0x94e>
 800d4fa:	9b04      	ldr	r3, [sp, #16]
 800d4fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d500:	930e      	str	r3, [sp, #56]	@ 0x38
 800d502:	2b00      	cmp	r3, #0
 800d504:	dc23      	bgt.n	800d54e <_dtoa_r+0x9aa>
 800d506:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d508:	2b02      	cmp	r3, #2
 800d50a:	dd20      	ble.n	800d54e <_dtoa_r+0x9aa>
 800d50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d000      	beq.n	800d514 <_dtoa_r+0x970>
 800d512:	e6b5      	b.n	800d280 <_dtoa_r+0x6dc>
 800d514:	0031      	movs	r1, r6
 800d516:	2205      	movs	r2, #5
 800d518:	9803      	ldr	r0, [sp, #12]
 800d51a:	f000 faa5 	bl	800da68 <__multadd>
 800d51e:	0006      	movs	r6, r0
 800d520:	0001      	movs	r1, r0
 800d522:	9805      	ldr	r0, [sp, #20]
 800d524:	f000 fd12 	bl	800df4c <__mcmp>
 800d528:	2800      	cmp	r0, #0
 800d52a:	dc00      	bgt.n	800d52e <_dtoa_r+0x98a>
 800d52c:	e6a8      	b.n	800d280 <_dtoa_r+0x6dc>
 800d52e:	9b08      	ldr	r3, [sp, #32]
 800d530:	9a08      	ldr	r2, [sp, #32]
 800d532:	1c5c      	adds	r4, r3, #1
 800d534:	2331      	movs	r3, #49	@ 0x31
 800d536:	7013      	strb	r3, [r2, #0]
 800d538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d53a:	3301      	adds	r3, #1
 800d53c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d53e:	e6a3      	b.n	800d288 <_dtoa_r+0x6e4>
 800d540:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d542:	0037      	movs	r7, r6
 800d544:	e7f3      	b.n	800d52e <_dtoa_r+0x98a>
 800d546:	9b04      	ldr	r3, [sp, #16]
 800d548:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d54a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d54c:	e7f9      	b.n	800d542 <_dtoa_r+0x99e>
 800d54e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d550:	2b00      	cmp	r3, #0
 800d552:	d100      	bne.n	800d556 <_dtoa_r+0x9b2>
 800d554:	e100      	b.n	800d758 <_dtoa_r+0xbb4>
 800d556:	2c00      	cmp	r4, #0
 800d558:	dd05      	ble.n	800d566 <_dtoa_r+0x9c2>
 800d55a:	0039      	movs	r1, r7
 800d55c:	0022      	movs	r2, r4
 800d55e:	9803      	ldr	r0, [sp, #12]
 800d560:	f000 fc88 	bl	800de74 <__lshift>
 800d564:	0007      	movs	r7, r0
 800d566:	0038      	movs	r0, r7
 800d568:	2d00      	cmp	r5, #0
 800d56a:	d018      	beq.n	800d59e <_dtoa_r+0x9fa>
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	9803      	ldr	r0, [sp, #12]
 800d570:	f000 fa12 	bl	800d998 <_Balloc>
 800d574:	1e04      	subs	r4, r0, #0
 800d576:	d105      	bne.n	800d584 <_dtoa_r+0x9e0>
 800d578:	0022      	movs	r2, r4
 800d57a:	4b2b      	ldr	r3, [pc, #172]	@ (800d628 <_dtoa_r+0xa84>)
 800d57c:	482b      	ldr	r0, [pc, #172]	@ (800d62c <_dtoa_r+0xa88>)
 800d57e:	492c      	ldr	r1, [pc, #176]	@ (800d630 <_dtoa_r+0xa8c>)
 800d580:	f7ff fb25 	bl	800cbce <_dtoa_r+0x2a>
 800d584:	0039      	movs	r1, r7
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	310c      	adds	r1, #12
 800d58a:	3202      	adds	r2, #2
 800d58c:	0092      	lsls	r2, r2, #2
 800d58e:	300c      	adds	r0, #12
 800d590:	f001 ffb2 	bl	800f4f8 <memcpy>
 800d594:	2201      	movs	r2, #1
 800d596:	0021      	movs	r1, r4
 800d598:	9803      	ldr	r0, [sp, #12]
 800d59a:	f000 fc6b 	bl	800de74 <__lshift>
 800d59e:	9b08      	ldr	r3, [sp, #32]
 800d5a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5a2:	9306      	str	r3, [sp, #24]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	189b      	adds	r3, r3, r2
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	9704      	str	r7, [sp, #16]
 800d5ac:	0007      	movs	r7, r0
 800d5ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5b6:	0031      	movs	r1, r6
 800d5b8:	9805      	ldr	r0, [sp, #20]
 800d5ba:	f7ff fa65 	bl	800ca88 <quorem>
 800d5be:	9904      	ldr	r1, [sp, #16]
 800d5c0:	0005      	movs	r5, r0
 800d5c2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5c4:	9805      	ldr	r0, [sp, #20]
 800d5c6:	f000 fcc1 	bl	800df4c <__mcmp>
 800d5ca:	003a      	movs	r2, r7
 800d5cc:	900d      	str	r0, [sp, #52]	@ 0x34
 800d5ce:	0031      	movs	r1, r6
 800d5d0:	9803      	ldr	r0, [sp, #12]
 800d5d2:	f000 fcd7 	bl	800df84 <__mdiff>
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	68c3      	ldr	r3, [r0, #12]
 800d5da:	0004      	movs	r4, r0
 800d5dc:	3530      	adds	r5, #48	@ 0x30
 800d5de:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d104      	bne.n	800d5ee <_dtoa_r+0xa4a>
 800d5e4:	0001      	movs	r1, r0
 800d5e6:	9805      	ldr	r0, [sp, #20]
 800d5e8:	f000 fcb0 	bl	800df4c <__mcmp>
 800d5ec:	9009      	str	r0, [sp, #36]	@ 0x24
 800d5ee:	0021      	movs	r1, r4
 800d5f0:	9803      	ldr	r0, [sp, #12]
 800d5f2:	f000 fa15 	bl	800da20 <_Bfree>
 800d5f6:	9b06      	ldr	r3, [sp, #24]
 800d5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5fa:	1c5c      	adds	r4, r3, #1
 800d5fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d5fe:	4313      	orrs	r3, r2
 800d600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d602:	4313      	orrs	r3, r2
 800d604:	d116      	bne.n	800d634 <_dtoa_r+0xa90>
 800d606:	2d39      	cmp	r5, #57	@ 0x39
 800d608:	d02f      	beq.n	800d66a <_dtoa_r+0xac6>
 800d60a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd01      	ble.n	800d614 <_dtoa_r+0xa70>
 800d610:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d612:	3531      	adds	r5, #49	@ 0x31
 800d614:	9b06      	ldr	r3, [sp, #24]
 800d616:	701d      	strb	r5, [r3, #0]
 800d618:	e638      	b.n	800d28c <_dtoa_r+0x6e8>
 800d61a:	46c0      	nop			@ (mov r8, r8)
 800d61c:	40240000 	.word	0x40240000
 800d620:	00000433 	.word	0x00000433
 800d624:	7ff00000 	.word	0x7ff00000
 800d628:	080109cd 	.word	0x080109cd
 800d62c:	08010975 	.word	0x08010975
 800d630:	000002ef 	.word	0x000002ef
 800d634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d636:	2b00      	cmp	r3, #0
 800d638:	db04      	blt.n	800d644 <_dtoa_r+0xaa0>
 800d63a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d63c:	4313      	orrs	r3, r2
 800d63e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d640:	4313      	orrs	r3, r2
 800d642:	d11e      	bne.n	800d682 <_dtoa_r+0xade>
 800d644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d646:	2b00      	cmp	r3, #0
 800d648:	dde4      	ble.n	800d614 <_dtoa_r+0xa70>
 800d64a:	9905      	ldr	r1, [sp, #20]
 800d64c:	2201      	movs	r2, #1
 800d64e:	9803      	ldr	r0, [sp, #12]
 800d650:	f000 fc10 	bl	800de74 <__lshift>
 800d654:	0031      	movs	r1, r6
 800d656:	9005      	str	r0, [sp, #20]
 800d658:	f000 fc78 	bl	800df4c <__mcmp>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	dc02      	bgt.n	800d666 <_dtoa_r+0xac2>
 800d660:	d1d8      	bne.n	800d614 <_dtoa_r+0xa70>
 800d662:	07eb      	lsls	r3, r5, #31
 800d664:	d5d6      	bpl.n	800d614 <_dtoa_r+0xa70>
 800d666:	2d39      	cmp	r5, #57	@ 0x39
 800d668:	d1d2      	bne.n	800d610 <_dtoa_r+0xa6c>
 800d66a:	2339      	movs	r3, #57	@ 0x39
 800d66c:	9a06      	ldr	r2, [sp, #24]
 800d66e:	7013      	strb	r3, [r2, #0]
 800d670:	0023      	movs	r3, r4
 800d672:	001c      	movs	r4, r3
 800d674:	3b01      	subs	r3, #1
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	2a39      	cmp	r2, #57	@ 0x39
 800d67a:	d04f      	beq.n	800d71c <_dtoa_r+0xb78>
 800d67c:	3201      	adds	r2, #1
 800d67e:	701a      	strb	r2, [r3, #0]
 800d680:	e604      	b.n	800d28c <_dtoa_r+0x6e8>
 800d682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d684:	2b00      	cmp	r3, #0
 800d686:	dd03      	ble.n	800d690 <_dtoa_r+0xaec>
 800d688:	2d39      	cmp	r5, #57	@ 0x39
 800d68a:	d0ee      	beq.n	800d66a <_dtoa_r+0xac6>
 800d68c:	3501      	adds	r5, #1
 800d68e:	e7c1      	b.n	800d614 <_dtoa_r+0xa70>
 800d690:	9b06      	ldr	r3, [sp, #24]
 800d692:	9a06      	ldr	r2, [sp, #24]
 800d694:	701d      	strb	r5, [r3, #0]
 800d696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d698:	4293      	cmp	r3, r2
 800d69a:	d02a      	beq.n	800d6f2 <_dtoa_r+0xb4e>
 800d69c:	2300      	movs	r3, #0
 800d69e:	220a      	movs	r2, #10
 800d6a0:	9905      	ldr	r1, [sp, #20]
 800d6a2:	9803      	ldr	r0, [sp, #12]
 800d6a4:	f000 f9e0 	bl	800da68 <__multadd>
 800d6a8:	9b04      	ldr	r3, [sp, #16]
 800d6aa:	9005      	str	r0, [sp, #20]
 800d6ac:	42bb      	cmp	r3, r7
 800d6ae:	d109      	bne.n	800d6c4 <_dtoa_r+0xb20>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	220a      	movs	r2, #10
 800d6b4:	9904      	ldr	r1, [sp, #16]
 800d6b6:	9803      	ldr	r0, [sp, #12]
 800d6b8:	f000 f9d6 	bl	800da68 <__multadd>
 800d6bc:	9004      	str	r0, [sp, #16]
 800d6be:	0007      	movs	r7, r0
 800d6c0:	9406      	str	r4, [sp, #24]
 800d6c2:	e778      	b.n	800d5b6 <_dtoa_r+0xa12>
 800d6c4:	9904      	ldr	r1, [sp, #16]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	220a      	movs	r2, #10
 800d6ca:	9803      	ldr	r0, [sp, #12]
 800d6cc:	f000 f9cc 	bl	800da68 <__multadd>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9004      	str	r0, [sp, #16]
 800d6d4:	220a      	movs	r2, #10
 800d6d6:	0039      	movs	r1, r7
 800d6d8:	9803      	ldr	r0, [sp, #12]
 800d6da:	f000 f9c5 	bl	800da68 <__multadd>
 800d6de:	e7ee      	b.n	800d6be <_dtoa_r+0xb1a>
 800d6e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6e2:	2401      	movs	r4, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	dd00      	ble.n	800d6ea <_dtoa_r+0xb46>
 800d6e8:	001c      	movs	r4, r3
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	191c      	adds	r4, r3, r4
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9304      	str	r3, [sp, #16]
 800d6f2:	9905      	ldr	r1, [sp, #20]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	9803      	ldr	r0, [sp, #12]
 800d6f8:	f000 fbbc 	bl	800de74 <__lshift>
 800d6fc:	0031      	movs	r1, r6
 800d6fe:	9005      	str	r0, [sp, #20]
 800d700:	f000 fc24 	bl	800df4c <__mcmp>
 800d704:	2800      	cmp	r0, #0
 800d706:	dcb3      	bgt.n	800d670 <_dtoa_r+0xacc>
 800d708:	d101      	bne.n	800d70e <_dtoa_r+0xb6a>
 800d70a:	07ed      	lsls	r5, r5, #31
 800d70c:	d4b0      	bmi.n	800d670 <_dtoa_r+0xacc>
 800d70e:	0023      	movs	r3, r4
 800d710:	001c      	movs	r4, r3
 800d712:	3b01      	subs	r3, #1
 800d714:	781a      	ldrb	r2, [r3, #0]
 800d716:	2a30      	cmp	r2, #48	@ 0x30
 800d718:	d0fa      	beq.n	800d710 <_dtoa_r+0xb6c>
 800d71a:	e5b7      	b.n	800d28c <_dtoa_r+0x6e8>
 800d71c:	9a08      	ldr	r2, [sp, #32]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d1a7      	bne.n	800d672 <_dtoa_r+0xace>
 800d722:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d724:	3301      	adds	r3, #1
 800d726:	930c      	str	r3, [sp, #48]	@ 0x30
 800d728:	2331      	movs	r3, #49	@ 0x31
 800d72a:	7013      	strb	r3, [r2, #0]
 800d72c:	e5ae      	b.n	800d28c <_dtoa_r+0x6e8>
 800d72e:	4b15      	ldr	r3, [pc, #84]	@ (800d784 <_dtoa_r+0xbe0>)
 800d730:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d732:	9308      	str	r3, [sp, #32]
 800d734:	4b14      	ldr	r3, [pc, #80]	@ (800d788 <_dtoa_r+0xbe4>)
 800d736:	2a00      	cmp	r2, #0
 800d738:	d001      	beq.n	800d73e <_dtoa_r+0xb9a>
 800d73a:	f7ff fa7b 	bl	800cc34 <_dtoa_r+0x90>
 800d73e:	f7ff fa7b 	bl	800cc38 <_dtoa_r+0x94>
 800d742:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d744:	2b01      	cmp	r3, #1
 800d746:	dc00      	bgt.n	800d74a <_dtoa_r+0xba6>
 800d748:	e648      	b.n	800d3dc <_dtoa_r+0x838>
 800d74a:	2001      	movs	r0, #1
 800d74c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d74e:	e665      	b.n	800d41c <_dtoa_r+0x878>
 800d750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d752:	2b00      	cmp	r3, #0
 800d754:	dc00      	bgt.n	800d758 <_dtoa_r+0xbb4>
 800d756:	e6d6      	b.n	800d506 <_dtoa_r+0x962>
 800d758:	2400      	movs	r4, #0
 800d75a:	0031      	movs	r1, r6
 800d75c:	9805      	ldr	r0, [sp, #20]
 800d75e:	f7ff f993 	bl	800ca88 <quorem>
 800d762:	9b08      	ldr	r3, [sp, #32]
 800d764:	3030      	adds	r0, #48	@ 0x30
 800d766:	5518      	strb	r0, [r3, r4]
 800d768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d76a:	3401      	adds	r4, #1
 800d76c:	0005      	movs	r5, r0
 800d76e:	429c      	cmp	r4, r3
 800d770:	dab6      	bge.n	800d6e0 <_dtoa_r+0xb3c>
 800d772:	2300      	movs	r3, #0
 800d774:	220a      	movs	r2, #10
 800d776:	9905      	ldr	r1, [sp, #20]
 800d778:	9803      	ldr	r0, [sp, #12]
 800d77a:	f000 f975 	bl	800da68 <__multadd>
 800d77e:	9005      	str	r0, [sp, #20]
 800d780:	e7eb      	b.n	800d75a <_dtoa_r+0xbb6>
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	08010951 	.word	0x08010951
 800d788:	08010959 	.word	0x08010959

0800d78c <_free_r>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	0005      	movs	r5, r0
 800d790:	1e0c      	subs	r4, r1, #0
 800d792:	d010      	beq.n	800d7b6 <_free_r+0x2a>
 800d794:	3c04      	subs	r4, #4
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da00      	bge.n	800d79e <_free_r+0x12>
 800d79c:	18e4      	adds	r4, r4, r3
 800d79e:	0028      	movs	r0, r5
 800d7a0:	f000 f8ea 	bl	800d978 <__malloc_lock>
 800d7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d81c <_free_r+0x90>)
 800d7a6:	6813      	ldr	r3, [r2, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <_free_r+0x2c>
 800d7ac:	6063      	str	r3, [r4, #4]
 800d7ae:	6014      	str	r4, [r2, #0]
 800d7b0:	0028      	movs	r0, r5
 800d7b2:	f000 f8e9 	bl	800d988 <__malloc_unlock>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	42a3      	cmp	r3, r4
 800d7ba:	d908      	bls.n	800d7ce <_free_r+0x42>
 800d7bc:	6820      	ldr	r0, [r4, #0]
 800d7be:	1821      	adds	r1, r4, r0
 800d7c0:	428b      	cmp	r3, r1
 800d7c2:	d1f3      	bne.n	800d7ac <_free_r+0x20>
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	1809      	adds	r1, r1, r0
 800d7ca:	6021      	str	r1, [r4, #0]
 800d7cc:	e7ee      	b.n	800d7ac <_free_r+0x20>
 800d7ce:	001a      	movs	r2, r3
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <_free_r+0x4e>
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	d9f9      	bls.n	800d7ce <_free_r+0x42>
 800d7da:	6811      	ldr	r1, [r2, #0]
 800d7dc:	1850      	adds	r0, r2, r1
 800d7de:	42a0      	cmp	r0, r4
 800d7e0:	d10b      	bne.n	800d7fa <_free_r+0x6e>
 800d7e2:	6820      	ldr	r0, [r4, #0]
 800d7e4:	1809      	adds	r1, r1, r0
 800d7e6:	1850      	adds	r0, r2, r1
 800d7e8:	6011      	str	r1, [r2, #0]
 800d7ea:	4283      	cmp	r3, r0
 800d7ec:	d1e0      	bne.n	800d7b0 <_free_r+0x24>
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	1841      	adds	r1, r0, r1
 800d7f4:	6011      	str	r1, [r2, #0]
 800d7f6:	6053      	str	r3, [r2, #4]
 800d7f8:	e7da      	b.n	800d7b0 <_free_r+0x24>
 800d7fa:	42a0      	cmp	r0, r4
 800d7fc:	d902      	bls.n	800d804 <_free_r+0x78>
 800d7fe:	230c      	movs	r3, #12
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	e7d5      	b.n	800d7b0 <_free_r+0x24>
 800d804:	6820      	ldr	r0, [r4, #0]
 800d806:	1821      	adds	r1, r4, r0
 800d808:	428b      	cmp	r3, r1
 800d80a:	d103      	bne.n	800d814 <_free_r+0x88>
 800d80c:	6819      	ldr	r1, [r3, #0]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	1809      	adds	r1, r1, r0
 800d812:	6021      	str	r1, [r4, #0]
 800d814:	6063      	str	r3, [r4, #4]
 800d816:	6054      	str	r4, [r2, #4]
 800d818:	e7ca      	b.n	800d7b0 <_free_r+0x24>
 800d81a:	46c0      	nop			@ (mov r8, r8)
 800d81c:	20000b90 	.word	0x20000b90

0800d820 <malloc>:
 800d820:	b510      	push	{r4, lr}
 800d822:	4b03      	ldr	r3, [pc, #12]	@ (800d830 <malloc+0x10>)
 800d824:	0001      	movs	r1, r0
 800d826:	6818      	ldr	r0, [r3, #0]
 800d828:	f000 f826 	bl	800d878 <_malloc_r>
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	20000040 	.word	0x20000040

0800d834 <sbrk_aligned>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	4e0f      	ldr	r6, [pc, #60]	@ (800d874 <sbrk_aligned+0x40>)
 800d838:	000d      	movs	r5, r1
 800d83a:	6831      	ldr	r1, [r6, #0]
 800d83c:	0004      	movs	r4, r0
 800d83e:	2900      	cmp	r1, #0
 800d840:	d102      	bne.n	800d848 <sbrk_aligned+0x14>
 800d842:	f001 fe47 	bl	800f4d4 <_sbrk_r>
 800d846:	6030      	str	r0, [r6, #0]
 800d848:	0029      	movs	r1, r5
 800d84a:	0020      	movs	r0, r4
 800d84c:	f001 fe42 	bl	800f4d4 <_sbrk_r>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d103      	bne.n	800d85c <sbrk_aligned+0x28>
 800d854:	2501      	movs	r5, #1
 800d856:	426d      	negs	r5, r5
 800d858:	0028      	movs	r0, r5
 800d85a:	bd70      	pop	{r4, r5, r6, pc}
 800d85c:	2303      	movs	r3, #3
 800d85e:	1cc5      	adds	r5, r0, #3
 800d860:	439d      	bics	r5, r3
 800d862:	42a8      	cmp	r0, r5
 800d864:	d0f8      	beq.n	800d858 <sbrk_aligned+0x24>
 800d866:	1a29      	subs	r1, r5, r0
 800d868:	0020      	movs	r0, r4
 800d86a:	f001 fe33 	bl	800f4d4 <_sbrk_r>
 800d86e:	3001      	adds	r0, #1
 800d870:	d1f2      	bne.n	800d858 <sbrk_aligned+0x24>
 800d872:	e7ef      	b.n	800d854 <sbrk_aligned+0x20>
 800d874:	20000b8c 	.word	0x20000b8c

0800d878 <_malloc_r>:
 800d878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d87a:	2203      	movs	r2, #3
 800d87c:	1ccb      	adds	r3, r1, #3
 800d87e:	4393      	bics	r3, r2
 800d880:	3308      	adds	r3, #8
 800d882:	0005      	movs	r5, r0
 800d884:	001f      	movs	r7, r3
 800d886:	2b0c      	cmp	r3, #12
 800d888:	d234      	bcs.n	800d8f4 <_malloc_r+0x7c>
 800d88a:	270c      	movs	r7, #12
 800d88c:	42b9      	cmp	r1, r7
 800d88e:	d833      	bhi.n	800d8f8 <_malloc_r+0x80>
 800d890:	0028      	movs	r0, r5
 800d892:	f000 f871 	bl	800d978 <__malloc_lock>
 800d896:	4e37      	ldr	r6, [pc, #220]	@ (800d974 <_malloc_r+0xfc>)
 800d898:	6833      	ldr	r3, [r6, #0]
 800d89a:	001c      	movs	r4, r3
 800d89c:	2c00      	cmp	r4, #0
 800d89e:	d12f      	bne.n	800d900 <_malloc_r+0x88>
 800d8a0:	0039      	movs	r1, r7
 800d8a2:	0028      	movs	r0, r5
 800d8a4:	f7ff ffc6 	bl	800d834 <sbrk_aligned>
 800d8a8:	0004      	movs	r4, r0
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	d15f      	bne.n	800d96e <_malloc_r+0xf6>
 800d8ae:	6834      	ldr	r4, [r6, #0]
 800d8b0:	9400      	str	r4, [sp, #0]
 800d8b2:	9b00      	ldr	r3, [sp, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d14a      	bne.n	800d94e <_malloc_r+0xd6>
 800d8b8:	2c00      	cmp	r4, #0
 800d8ba:	d052      	beq.n	800d962 <_malloc_r+0xea>
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	0028      	movs	r0, r5
 800d8c0:	18e3      	adds	r3, r4, r3
 800d8c2:	9900      	ldr	r1, [sp, #0]
 800d8c4:	9301      	str	r3, [sp, #4]
 800d8c6:	f001 fe05 	bl	800f4d4 <_sbrk_r>
 800d8ca:	9b01      	ldr	r3, [sp, #4]
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	d148      	bne.n	800d962 <_malloc_r+0xea>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	0028      	movs	r0, r5
 800d8d4:	1aff      	subs	r7, r7, r3
 800d8d6:	0039      	movs	r1, r7
 800d8d8:	f7ff ffac 	bl	800d834 <sbrk_aligned>
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d040      	beq.n	800d962 <_malloc_r+0xea>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	19db      	adds	r3, r3, r7
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	6833      	ldr	r3, [r6, #0]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	2a00      	cmp	r2, #0
 800d8ec:	d133      	bne.n	800d956 <_malloc_r+0xde>
 800d8ee:	9b00      	ldr	r3, [sp, #0]
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	e019      	b.n	800d928 <_malloc_r+0xb0>
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dac9      	bge.n	800d88c <_malloc_r+0x14>
 800d8f8:	230c      	movs	r3, #12
 800d8fa:	602b      	str	r3, [r5, #0]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d900:	6821      	ldr	r1, [r4, #0]
 800d902:	1bc9      	subs	r1, r1, r7
 800d904:	d420      	bmi.n	800d948 <_malloc_r+0xd0>
 800d906:	290b      	cmp	r1, #11
 800d908:	d90a      	bls.n	800d920 <_malloc_r+0xa8>
 800d90a:	19e2      	adds	r2, r4, r7
 800d90c:	6027      	str	r7, [r4, #0]
 800d90e:	42a3      	cmp	r3, r4
 800d910:	d104      	bne.n	800d91c <_malloc_r+0xa4>
 800d912:	6032      	str	r2, [r6, #0]
 800d914:	6863      	ldr	r3, [r4, #4]
 800d916:	6011      	str	r1, [r2, #0]
 800d918:	6053      	str	r3, [r2, #4]
 800d91a:	e005      	b.n	800d928 <_malloc_r+0xb0>
 800d91c:	605a      	str	r2, [r3, #4]
 800d91e:	e7f9      	b.n	800d914 <_malloc_r+0x9c>
 800d920:	6862      	ldr	r2, [r4, #4]
 800d922:	42a3      	cmp	r3, r4
 800d924:	d10e      	bne.n	800d944 <_malloc_r+0xcc>
 800d926:	6032      	str	r2, [r6, #0]
 800d928:	0028      	movs	r0, r5
 800d92a:	f000 f82d 	bl	800d988 <__malloc_unlock>
 800d92e:	0020      	movs	r0, r4
 800d930:	2207      	movs	r2, #7
 800d932:	300b      	adds	r0, #11
 800d934:	1d23      	adds	r3, r4, #4
 800d936:	4390      	bics	r0, r2
 800d938:	1ac2      	subs	r2, r0, r3
 800d93a:	4298      	cmp	r0, r3
 800d93c:	d0df      	beq.n	800d8fe <_malloc_r+0x86>
 800d93e:	1a1b      	subs	r3, r3, r0
 800d940:	50a3      	str	r3, [r4, r2]
 800d942:	e7dc      	b.n	800d8fe <_malloc_r+0x86>
 800d944:	605a      	str	r2, [r3, #4]
 800d946:	e7ef      	b.n	800d928 <_malloc_r+0xb0>
 800d948:	0023      	movs	r3, r4
 800d94a:	6864      	ldr	r4, [r4, #4]
 800d94c:	e7a6      	b.n	800d89c <_malloc_r+0x24>
 800d94e:	9c00      	ldr	r4, [sp, #0]
 800d950:	6863      	ldr	r3, [r4, #4]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	e7ad      	b.n	800d8b2 <_malloc_r+0x3a>
 800d956:	001a      	movs	r2, r3
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	42a3      	cmp	r3, r4
 800d95c:	d1fb      	bne.n	800d956 <_malloc_r+0xde>
 800d95e:	2300      	movs	r3, #0
 800d960:	e7da      	b.n	800d918 <_malloc_r+0xa0>
 800d962:	230c      	movs	r3, #12
 800d964:	0028      	movs	r0, r5
 800d966:	602b      	str	r3, [r5, #0]
 800d968:	f000 f80e 	bl	800d988 <__malloc_unlock>
 800d96c:	e7c6      	b.n	800d8fc <_malloc_r+0x84>
 800d96e:	6007      	str	r7, [r0, #0]
 800d970:	e7da      	b.n	800d928 <_malloc_r+0xb0>
 800d972:	46c0      	nop			@ (mov r8, r8)
 800d974:	20000b90 	.word	0x20000b90

0800d978 <__malloc_lock>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4802      	ldr	r0, [pc, #8]	@ (800d984 <__malloc_lock+0xc>)
 800d97c:	f7ff f873 	bl	800ca66 <__retarget_lock_acquire_recursive>
 800d980:	bd10      	pop	{r4, pc}
 800d982:	46c0      	nop			@ (mov r8, r8)
 800d984:	20000b88 	.word	0x20000b88

0800d988 <__malloc_unlock>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4802      	ldr	r0, [pc, #8]	@ (800d994 <__malloc_unlock+0xc>)
 800d98c:	f7ff f86c 	bl	800ca68 <__retarget_lock_release_recursive>
 800d990:	bd10      	pop	{r4, pc}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	20000b88 	.word	0x20000b88

0800d998 <_Balloc>:
 800d998:	b570      	push	{r4, r5, r6, lr}
 800d99a:	69c5      	ldr	r5, [r0, #28]
 800d99c:	0006      	movs	r6, r0
 800d99e:	000c      	movs	r4, r1
 800d9a0:	2d00      	cmp	r5, #0
 800d9a2:	d10e      	bne.n	800d9c2 <_Balloc+0x2a>
 800d9a4:	2010      	movs	r0, #16
 800d9a6:	f7ff ff3b 	bl	800d820 <malloc>
 800d9aa:	1e02      	subs	r2, r0, #0
 800d9ac:	61f0      	str	r0, [r6, #28]
 800d9ae:	d104      	bne.n	800d9ba <_Balloc+0x22>
 800d9b0:	216b      	movs	r1, #107	@ 0x6b
 800d9b2:	4b19      	ldr	r3, [pc, #100]	@ (800da18 <_Balloc+0x80>)
 800d9b4:	4819      	ldr	r0, [pc, #100]	@ (800da1c <_Balloc+0x84>)
 800d9b6:	f001 fdaf 	bl	800f518 <__assert_func>
 800d9ba:	6045      	str	r5, [r0, #4]
 800d9bc:	6085      	str	r5, [r0, #8]
 800d9be:	6005      	str	r5, [r0, #0]
 800d9c0:	60c5      	str	r5, [r0, #12]
 800d9c2:	69f5      	ldr	r5, [r6, #28]
 800d9c4:	68eb      	ldr	r3, [r5, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d013      	beq.n	800d9f2 <_Balloc+0x5a>
 800d9ca:	69f3      	ldr	r3, [r6, #28]
 800d9cc:	00a2      	lsls	r2, r4, #2
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	189b      	adds	r3, r3, r2
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d118      	bne.n	800da0a <_Balloc+0x72>
 800d9d8:	2101      	movs	r1, #1
 800d9da:	000d      	movs	r5, r1
 800d9dc:	40a5      	lsls	r5, r4
 800d9de:	1d6a      	adds	r2, r5, #5
 800d9e0:	0030      	movs	r0, r6
 800d9e2:	0092      	lsls	r2, r2, #2
 800d9e4:	f001 fdb6 	bl	800f554 <_calloc_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d00c      	beq.n	800da06 <_Balloc+0x6e>
 800d9ec:	6044      	str	r4, [r0, #4]
 800d9ee:	6085      	str	r5, [r0, #8]
 800d9f0:	e00d      	b.n	800da0e <_Balloc+0x76>
 800d9f2:	2221      	movs	r2, #33	@ 0x21
 800d9f4:	2104      	movs	r1, #4
 800d9f6:	0030      	movs	r0, r6
 800d9f8:	f001 fdac 	bl	800f554 <_calloc_r>
 800d9fc:	69f3      	ldr	r3, [r6, #28]
 800d9fe:	60e8      	str	r0, [r5, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e1      	bne.n	800d9ca <_Balloc+0x32>
 800da06:	2000      	movs	r0, #0
 800da08:	bd70      	pop	{r4, r5, r6, pc}
 800da0a:	6802      	ldr	r2, [r0, #0]
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	2300      	movs	r3, #0
 800da10:	6103      	str	r3, [r0, #16]
 800da12:	60c3      	str	r3, [r0, #12]
 800da14:	e7f8      	b.n	800da08 <_Balloc+0x70>
 800da16:	46c0      	nop			@ (mov r8, r8)
 800da18:	0801095e 	.word	0x0801095e
 800da1c:	080109de 	.word	0x080109de

0800da20 <_Bfree>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	69c6      	ldr	r6, [r0, #28]
 800da24:	0005      	movs	r5, r0
 800da26:	000c      	movs	r4, r1
 800da28:	2e00      	cmp	r6, #0
 800da2a:	d10e      	bne.n	800da4a <_Bfree+0x2a>
 800da2c:	2010      	movs	r0, #16
 800da2e:	f7ff fef7 	bl	800d820 <malloc>
 800da32:	1e02      	subs	r2, r0, #0
 800da34:	61e8      	str	r0, [r5, #28]
 800da36:	d104      	bne.n	800da42 <_Bfree+0x22>
 800da38:	218f      	movs	r1, #143	@ 0x8f
 800da3a:	4b09      	ldr	r3, [pc, #36]	@ (800da60 <_Bfree+0x40>)
 800da3c:	4809      	ldr	r0, [pc, #36]	@ (800da64 <_Bfree+0x44>)
 800da3e:	f001 fd6b 	bl	800f518 <__assert_func>
 800da42:	6046      	str	r6, [r0, #4]
 800da44:	6086      	str	r6, [r0, #8]
 800da46:	6006      	str	r6, [r0, #0]
 800da48:	60c6      	str	r6, [r0, #12]
 800da4a:	2c00      	cmp	r4, #0
 800da4c:	d007      	beq.n	800da5e <_Bfree+0x3e>
 800da4e:	69eb      	ldr	r3, [r5, #28]
 800da50:	6862      	ldr	r2, [r4, #4]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	0092      	lsls	r2, r2, #2
 800da56:	189b      	adds	r3, r3, r2
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	6022      	str	r2, [r4, #0]
 800da5c:	601c      	str	r4, [r3, #0]
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	0801095e 	.word	0x0801095e
 800da64:	080109de 	.word	0x080109de

0800da68 <__multadd>:
 800da68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da6a:	000f      	movs	r7, r1
 800da6c:	9001      	str	r0, [sp, #4]
 800da6e:	000c      	movs	r4, r1
 800da70:	001e      	movs	r6, r3
 800da72:	2000      	movs	r0, #0
 800da74:	690d      	ldr	r5, [r1, #16]
 800da76:	3714      	adds	r7, #20
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	3001      	adds	r0, #1
 800da7c:	b299      	uxth	r1, r3
 800da7e:	4351      	muls	r1, r2
 800da80:	0c1b      	lsrs	r3, r3, #16
 800da82:	4353      	muls	r3, r2
 800da84:	1989      	adds	r1, r1, r6
 800da86:	0c0e      	lsrs	r6, r1, #16
 800da88:	199b      	adds	r3, r3, r6
 800da8a:	0c1e      	lsrs	r6, r3, #16
 800da8c:	b289      	uxth	r1, r1
 800da8e:	041b      	lsls	r3, r3, #16
 800da90:	185b      	adds	r3, r3, r1
 800da92:	c708      	stmia	r7!, {r3}
 800da94:	4285      	cmp	r5, r0
 800da96:	dcef      	bgt.n	800da78 <__multadd+0x10>
 800da98:	2e00      	cmp	r6, #0
 800da9a:	d022      	beq.n	800dae2 <__multadd+0x7a>
 800da9c:	68a3      	ldr	r3, [r4, #8]
 800da9e:	42ab      	cmp	r3, r5
 800daa0:	dc19      	bgt.n	800dad6 <__multadd+0x6e>
 800daa2:	6861      	ldr	r1, [r4, #4]
 800daa4:	9801      	ldr	r0, [sp, #4]
 800daa6:	3101      	adds	r1, #1
 800daa8:	f7ff ff76 	bl	800d998 <_Balloc>
 800daac:	1e07      	subs	r7, r0, #0
 800daae:	d105      	bne.n	800dabc <__multadd+0x54>
 800dab0:	003a      	movs	r2, r7
 800dab2:	21ba      	movs	r1, #186	@ 0xba
 800dab4:	4b0c      	ldr	r3, [pc, #48]	@ (800dae8 <__multadd+0x80>)
 800dab6:	480d      	ldr	r0, [pc, #52]	@ (800daec <__multadd+0x84>)
 800dab8:	f001 fd2e 	bl	800f518 <__assert_func>
 800dabc:	0021      	movs	r1, r4
 800dabe:	6922      	ldr	r2, [r4, #16]
 800dac0:	310c      	adds	r1, #12
 800dac2:	3202      	adds	r2, #2
 800dac4:	0092      	lsls	r2, r2, #2
 800dac6:	300c      	adds	r0, #12
 800dac8:	f001 fd16 	bl	800f4f8 <memcpy>
 800dacc:	0021      	movs	r1, r4
 800dace:	9801      	ldr	r0, [sp, #4]
 800dad0:	f7ff ffa6 	bl	800da20 <_Bfree>
 800dad4:	003c      	movs	r4, r7
 800dad6:	1d2b      	adds	r3, r5, #4
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	18e3      	adds	r3, r4, r3
 800dadc:	3501      	adds	r5, #1
 800dade:	605e      	str	r6, [r3, #4]
 800dae0:	6125      	str	r5, [r4, #16]
 800dae2:	0020      	movs	r0, r4
 800dae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dae6:	46c0      	nop			@ (mov r8, r8)
 800dae8:	080109cd 	.word	0x080109cd
 800daec:	080109de 	.word	0x080109de

0800daf0 <__s2b>:
 800daf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daf2:	0007      	movs	r7, r0
 800daf4:	0018      	movs	r0, r3
 800daf6:	000c      	movs	r4, r1
 800daf8:	3008      	adds	r0, #8
 800dafa:	2109      	movs	r1, #9
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	0015      	movs	r5, r2
 800db00:	f7f2 fba8 	bl	8000254 <__divsi3>
 800db04:	2301      	movs	r3, #1
 800db06:	2100      	movs	r1, #0
 800db08:	4283      	cmp	r3, r0
 800db0a:	db0a      	blt.n	800db22 <__s2b+0x32>
 800db0c:	0038      	movs	r0, r7
 800db0e:	f7ff ff43 	bl	800d998 <_Balloc>
 800db12:	1e01      	subs	r1, r0, #0
 800db14:	d108      	bne.n	800db28 <__s2b+0x38>
 800db16:	000a      	movs	r2, r1
 800db18:	4b19      	ldr	r3, [pc, #100]	@ (800db80 <__s2b+0x90>)
 800db1a:	481a      	ldr	r0, [pc, #104]	@ (800db84 <__s2b+0x94>)
 800db1c:	31d3      	adds	r1, #211	@ 0xd3
 800db1e:	f001 fcfb 	bl	800f518 <__assert_func>
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	3101      	adds	r1, #1
 800db26:	e7ef      	b.n	800db08 <__s2b+0x18>
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	6143      	str	r3, [r0, #20]
 800db2c:	2301      	movs	r3, #1
 800db2e:	6103      	str	r3, [r0, #16]
 800db30:	2d09      	cmp	r5, #9
 800db32:	dd18      	ble.n	800db66 <__s2b+0x76>
 800db34:	0023      	movs	r3, r4
 800db36:	3309      	adds	r3, #9
 800db38:	001e      	movs	r6, r3
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	1964      	adds	r4, r4, r5
 800db3e:	7833      	ldrb	r3, [r6, #0]
 800db40:	220a      	movs	r2, #10
 800db42:	0038      	movs	r0, r7
 800db44:	3b30      	subs	r3, #48	@ 0x30
 800db46:	f7ff ff8f 	bl	800da68 <__multadd>
 800db4a:	3601      	adds	r6, #1
 800db4c:	0001      	movs	r1, r0
 800db4e:	42a6      	cmp	r6, r4
 800db50:	d1f5      	bne.n	800db3e <__s2b+0x4e>
 800db52:	002c      	movs	r4, r5
 800db54:	9b00      	ldr	r3, [sp, #0]
 800db56:	3c08      	subs	r4, #8
 800db58:	191c      	adds	r4, r3, r4
 800db5a:	002e      	movs	r6, r5
 800db5c:	9b01      	ldr	r3, [sp, #4]
 800db5e:	429e      	cmp	r6, r3
 800db60:	db04      	blt.n	800db6c <__s2b+0x7c>
 800db62:	0008      	movs	r0, r1
 800db64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db66:	2509      	movs	r5, #9
 800db68:	340a      	adds	r4, #10
 800db6a:	e7f6      	b.n	800db5a <__s2b+0x6a>
 800db6c:	1b63      	subs	r3, r4, r5
 800db6e:	5d9b      	ldrb	r3, [r3, r6]
 800db70:	220a      	movs	r2, #10
 800db72:	0038      	movs	r0, r7
 800db74:	3b30      	subs	r3, #48	@ 0x30
 800db76:	f7ff ff77 	bl	800da68 <__multadd>
 800db7a:	3601      	adds	r6, #1
 800db7c:	0001      	movs	r1, r0
 800db7e:	e7ed      	b.n	800db5c <__s2b+0x6c>
 800db80:	080109cd 	.word	0x080109cd
 800db84:	080109de 	.word	0x080109de

0800db88 <__hi0bits>:
 800db88:	2280      	movs	r2, #128	@ 0x80
 800db8a:	0003      	movs	r3, r0
 800db8c:	0252      	lsls	r2, r2, #9
 800db8e:	2000      	movs	r0, #0
 800db90:	4293      	cmp	r3, r2
 800db92:	d201      	bcs.n	800db98 <__hi0bits+0x10>
 800db94:	041b      	lsls	r3, r3, #16
 800db96:	3010      	adds	r0, #16
 800db98:	2280      	movs	r2, #128	@ 0x80
 800db9a:	0452      	lsls	r2, r2, #17
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d201      	bcs.n	800dba4 <__hi0bits+0x1c>
 800dba0:	3008      	adds	r0, #8
 800dba2:	021b      	lsls	r3, r3, #8
 800dba4:	2280      	movs	r2, #128	@ 0x80
 800dba6:	0552      	lsls	r2, r2, #21
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d201      	bcs.n	800dbb0 <__hi0bits+0x28>
 800dbac:	3004      	adds	r0, #4
 800dbae:	011b      	lsls	r3, r3, #4
 800dbb0:	2280      	movs	r2, #128	@ 0x80
 800dbb2:	05d2      	lsls	r2, r2, #23
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d201      	bcs.n	800dbbc <__hi0bits+0x34>
 800dbb8:	3002      	adds	r0, #2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	db03      	blt.n	800dbc8 <__hi0bits+0x40>
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	4213      	tst	r3, r2
 800dbc4:	d100      	bne.n	800dbc8 <__hi0bits+0x40>
 800dbc6:	2020      	movs	r0, #32
 800dbc8:	4770      	bx	lr

0800dbca <__lo0bits>:
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	0001      	movs	r1, r0
 800dbce:	2207      	movs	r2, #7
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	4010      	ands	r0, r2
 800dbd4:	4213      	tst	r3, r2
 800dbd6:	d00d      	beq.n	800dbf4 <__lo0bits+0x2a>
 800dbd8:	3a06      	subs	r2, #6
 800dbda:	2000      	movs	r0, #0
 800dbdc:	4213      	tst	r3, r2
 800dbde:	d105      	bne.n	800dbec <__lo0bits+0x22>
 800dbe0:	3002      	adds	r0, #2
 800dbe2:	4203      	tst	r3, r0
 800dbe4:	d003      	beq.n	800dbee <__lo0bits+0x24>
 800dbe6:	40d3      	lsrs	r3, r2
 800dbe8:	0010      	movs	r0, r2
 800dbea:	600b      	str	r3, [r1, #0]
 800dbec:	4770      	bx	lr
 800dbee:	089b      	lsrs	r3, r3, #2
 800dbf0:	600b      	str	r3, [r1, #0]
 800dbf2:	e7fb      	b.n	800dbec <__lo0bits+0x22>
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	2a00      	cmp	r2, #0
 800dbf8:	d101      	bne.n	800dbfe <__lo0bits+0x34>
 800dbfa:	2010      	movs	r0, #16
 800dbfc:	0c1b      	lsrs	r3, r3, #16
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	d101      	bne.n	800dc08 <__lo0bits+0x3e>
 800dc04:	3008      	adds	r0, #8
 800dc06:	0a1b      	lsrs	r3, r3, #8
 800dc08:	071a      	lsls	r2, r3, #28
 800dc0a:	d101      	bne.n	800dc10 <__lo0bits+0x46>
 800dc0c:	3004      	adds	r0, #4
 800dc0e:	091b      	lsrs	r3, r3, #4
 800dc10:	079a      	lsls	r2, r3, #30
 800dc12:	d101      	bne.n	800dc18 <__lo0bits+0x4e>
 800dc14:	3002      	adds	r0, #2
 800dc16:	089b      	lsrs	r3, r3, #2
 800dc18:	07da      	lsls	r2, r3, #31
 800dc1a:	d4e9      	bmi.n	800dbf0 <__lo0bits+0x26>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	085b      	lsrs	r3, r3, #1
 800dc20:	d1e6      	bne.n	800dbf0 <__lo0bits+0x26>
 800dc22:	2020      	movs	r0, #32
 800dc24:	e7e2      	b.n	800dbec <__lo0bits+0x22>
	...

0800dc28 <__i2b>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	000c      	movs	r4, r1
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	f7ff feb3 	bl	800d998 <_Balloc>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d107      	bne.n	800dc46 <__i2b+0x1e>
 800dc36:	2146      	movs	r1, #70	@ 0x46
 800dc38:	4c05      	ldr	r4, [pc, #20]	@ (800dc50 <__i2b+0x28>)
 800dc3a:	0002      	movs	r2, r0
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <__i2b+0x2c>)
 800dc3e:	0020      	movs	r0, r4
 800dc40:	31ff      	adds	r1, #255	@ 0xff
 800dc42:	f001 fc69 	bl	800f518 <__assert_func>
 800dc46:	2301      	movs	r3, #1
 800dc48:	6144      	str	r4, [r0, #20]
 800dc4a:	6103      	str	r3, [r0, #16]
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	46c0      	nop			@ (mov r8, r8)
 800dc50:	080109de 	.word	0x080109de
 800dc54:	080109cd 	.word	0x080109cd

0800dc58 <__multiply>:
 800dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc5a:	0014      	movs	r4, r2
 800dc5c:	690a      	ldr	r2, [r1, #16]
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	000d      	movs	r5, r1
 800dc62:	b08b      	sub	sp, #44	@ 0x2c
 800dc64:	429a      	cmp	r2, r3
 800dc66:	db02      	blt.n	800dc6e <__multiply+0x16>
 800dc68:	0023      	movs	r3, r4
 800dc6a:	000c      	movs	r4, r1
 800dc6c:	001d      	movs	r5, r3
 800dc6e:	6927      	ldr	r7, [r4, #16]
 800dc70:	692e      	ldr	r6, [r5, #16]
 800dc72:	6861      	ldr	r1, [r4, #4]
 800dc74:	19bb      	adds	r3, r7, r6
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	19ba      	adds	r2, r7, r6
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	da00      	bge.n	800dc82 <__multiply+0x2a>
 800dc80:	3101      	adds	r1, #1
 800dc82:	f7ff fe89 	bl	800d998 <_Balloc>
 800dc86:	9002      	str	r0, [sp, #8]
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d106      	bne.n	800dc9a <__multiply+0x42>
 800dc8c:	21b1      	movs	r1, #177	@ 0xb1
 800dc8e:	4b49      	ldr	r3, [pc, #292]	@ (800ddb4 <__multiply+0x15c>)
 800dc90:	4849      	ldr	r0, [pc, #292]	@ (800ddb8 <__multiply+0x160>)
 800dc92:	9a02      	ldr	r2, [sp, #8]
 800dc94:	0049      	lsls	r1, r1, #1
 800dc96:	f001 fc3f 	bl	800f518 <__assert_func>
 800dc9a:	9b02      	ldr	r3, [sp, #8]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	3314      	adds	r3, #20
 800dca0:	469c      	mov	ip, r3
 800dca2:	19bb      	adds	r3, r7, r6
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4463      	add	r3, ip
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	4663      	mov	r3, ip
 800dcac:	9904      	ldr	r1, [sp, #16]
 800dcae:	428b      	cmp	r3, r1
 800dcb0:	d32a      	bcc.n	800dd08 <__multiply+0xb0>
 800dcb2:	0023      	movs	r3, r4
 800dcb4:	00bf      	lsls	r7, r7, #2
 800dcb6:	3314      	adds	r3, #20
 800dcb8:	3514      	adds	r5, #20
 800dcba:	9308      	str	r3, [sp, #32]
 800dcbc:	00b6      	lsls	r6, r6, #2
 800dcbe:	19db      	adds	r3, r3, r7
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	19ab      	adds	r3, r5, r6
 800dcc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcc6:	2304      	movs	r3, #4
 800dcc8:	9306      	str	r3, [sp, #24]
 800dcca:	0023      	movs	r3, r4
 800dccc:	9a05      	ldr	r2, [sp, #20]
 800dcce:	3315      	adds	r3, #21
 800dcd0:	9501      	str	r5, [sp, #4]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d305      	bcc.n	800dce2 <__multiply+0x8a>
 800dcd6:	1b13      	subs	r3, r2, r4
 800dcd8:	3b15      	subs	r3, #21
 800dcda:	089b      	lsrs	r3, r3, #2
 800dcdc:	3301      	adds	r3, #1
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	9306      	str	r3, [sp, #24]
 800dce2:	9b01      	ldr	r3, [sp, #4]
 800dce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d310      	bcc.n	800dd0c <__multiply+0xb4>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd05      	ble.n	800dcfc <__multiply+0xa4>
 800dcf0:	9b04      	ldr	r3, [sp, #16]
 800dcf2:	3b04      	subs	r3, #4
 800dcf4:	9304      	str	r3, [sp, #16]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d056      	beq.n	800ddaa <__multiply+0x152>
 800dcfc:	9b02      	ldr	r3, [sp, #8]
 800dcfe:	9a03      	ldr	r2, [sp, #12]
 800dd00:	0018      	movs	r0, r3
 800dd02:	611a      	str	r2, [r3, #16]
 800dd04:	b00b      	add	sp, #44	@ 0x2c
 800dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd08:	c304      	stmia	r3!, {r2}
 800dd0a:	e7cf      	b.n	800dcac <__multiply+0x54>
 800dd0c:	9b01      	ldr	r3, [sp, #4]
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	b280      	uxth	r0, r0
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d01e      	beq.n	800dd54 <__multiply+0xfc>
 800dd16:	4667      	mov	r7, ip
 800dd18:	2500      	movs	r5, #0
 800dd1a:	9e08      	ldr	r6, [sp, #32]
 800dd1c:	ce02      	ldmia	r6!, {r1}
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	9307      	str	r3, [sp, #28]
 800dd22:	b28b      	uxth	r3, r1
 800dd24:	4343      	muls	r3, r0
 800dd26:	001a      	movs	r2, r3
 800dd28:	466b      	mov	r3, sp
 800dd2a:	0c09      	lsrs	r1, r1, #16
 800dd2c:	8b9b      	ldrh	r3, [r3, #28]
 800dd2e:	4341      	muls	r1, r0
 800dd30:	18d3      	adds	r3, r2, r3
 800dd32:	9a07      	ldr	r2, [sp, #28]
 800dd34:	195b      	adds	r3, r3, r5
 800dd36:	0c12      	lsrs	r2, r2, #16
 800dd38:	1889      	adds	r1, r1, r2
 800dd3a:	0c1a      	lsrs	r2, r3, #16
 800dd3c:	188a      	adds	r2, r1, r2
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	0c15      	lsrs	r5, r2, #16
 800dd42:	0412      	lsls	r2, r2, #16
 800dd44:	431a      	orrs	r2, r3
 800dd46:	9b05      	ldr	r3, [sp, #20]
 800dd48:	c704      	stmia	r7!, {r2}
 800dd4a:	42b3      	cmp	r3, r6
 800dd4c:	d8e6      	bhi.n	800dd1c <__multiply+0xc4>
 800dd4e:	4663      	mov	r3, ip
 800dd50:	9a06      	ldr	r2, [sp, #24]
 800dd52:	509d      	str	r5, [r3, r2]
 800dd54:	9b01      	ldr	r3, [sp, #4]
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	0c00      	lsrs	r0, r0, #16
 800dd5a:	d020      	beq.n	800dd9e <__multiply+0x146>
 800dd5c:	4663      	mov	r3, ip
 800dd5e:	0025      	movs	r5, r4
 800dd60:	4661      	mov	r1, ip
 800dd62:	2700      	movs	r7, #0
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3514      	adds	r5, #20
 800dd68:	682a      	ldr	r2, [r5, #0]
 800dd6a:	680e      	ldr	r6, [r1, #0]
 800dd6c:	b292      	uxth	r2, r2
 800dd6e:	4342      	muls	r2, r0
 800dd70:	0c36      	lsrs	r6, r6, #16
 800dd72:	1992      	adds	r2, r2, r6
 800dd74:	19d2      	adds	r2, r2, r7
 800dd76:	0416      	lsls	r6, r2, #16
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	431e      	orrs	r6, r3
 800dd7c:	600e      	str	r6, [r1, #0]
 800dd7e:	cd40      	ldmia	r5!, {r6}
 800dd80:	684b      	ldr	r3, [r1, #4]
 800dd82:	0c36      	lsrs	r6, r6, #16
 800dd84:	4346      	muls	r6, r0
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	0c12      	lsrs	r2, r2, #16
 800dd8a:	18f3      	adds	r3, r6, r3
 800dd8c:	189b      	adds	r3, r3, r2
 800dd8e:	9a05      	ldr	r2, [sp, #20]
 800dd90:	0c1f      	lsrs	r7, r3, #16
 800dd92:	3104      	adds	r1, #4
 800dd94:	42aa      	cmp	r2, r5
 800dd96:	d8e7      	bhi.n	800dd68 <__multiply+0x110>
 800dd98:	4662      	mov	r2, ip
 800dd9a:	9906      	ldr	r1, [sp, #24]
 800dd9c:	5053      	str	r3, [r2, r1]
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	3304      	adds	r3, #4
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	2304      	movs	r3, #4
 800dda6:	449c      	add	ip, r3
 800dda8:	e79b      	b.n	800dce2 <__multiply+0x8a>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	3b01      	subs	r3, #1
 800ddae:	9303      	str	r3, [sp, #12]
 800ddb0:	e79b      	b.n	800dcea <__multiply+0x92>
 800ddb2:	46c0      	nop			@ (mov r8, r8)
 800ddb4:	080109cd 	.word	0x080109cd
 800ddb8:	080109de 	.word	0x080109de

0800ddbc <__pow5mult>:
 800ddbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	0015      	movs	r5, r2
 800ddc2:	0007      	movs	r7, r0
 800ddc4:	000e      	movs	r6, r1
 800ddc6:	401a      	ands	r2, r3
 800ddc8:	421d      	tst	r5, r3
 800ddca:	d008      	beq.n	800ddde <__pow5mult+0x22>
 800ddcc:	4925      	ldr	r1, [pc, #148]	@ (800de64 <__pow5mult+0xa8>)
 800ddce:	3a01      	subs	r2, #1
 800ddd0:	0092      	lsls	r2, r2, #2
 800ddd2:	5852      	ldr	r2, [r2, r1]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	0031      	movs	r1, r6
 800ddd8:	f7ff fe46 	bl	800da68 <__multadd>
 800dddc:	0006      	movs	r6, r0
 800ddde:	10ad      	asrs	r5, r5, #2
 800dde0:	d03d      	beq.n	800de5e <__pow5mult+0xa2>
 800dde2:	69fc      	ldr	r4, [r7, #28]
 800dde4:	2c00      	cmp	r4, #0
 800dde6:	d10f      	bne.n	800de08 <__pow5mult+0x4c>
 800dde8:	2010      	movs	r0, #16
 800ddea:	f7ff fd19 	bl	800d820 <malloc>
 800ddee:	1e02      	subs	r2, r0, #0
 800ddf0:	61f8      	str	r0, [r7, #28]
 800ddf2:	d105      	bne.n	800de00 <__pow5mult+0x44>
 800ddf4:	21b4      	movs	r1, #180	@ 0xb4
 800ddf6:	4b1c      	ldr	r3, [pc, #112]	@ (800de68 <__pow5mult+0xac>)
 800ddf8:	481c      	ldr	r0, [pc, #112]	@ (800de6c <__pow5mult+0xb0>)
 800ddfa:	31ff      	adds	r1, #255	@ 0xff
 800ddfc:	f001 fb8c 	bl	800f518 <__assert_func>
 800de00:	6044      	str	r4, [r0, #4]
 800de02:	6084      	str	r4, [r0, #8]
 800de04:	6004      	str	r4, [r0, #0]
 800de06:	60c4      	str	r4, [r0, #12]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	689c      	ldr	r4, [r3, #8]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	2c00      	cmp	r4, #0
 800de10:	d108      	bne.n	800de24 <__pow5mult+0x68>
 800de12:	0038      	movs	r0, r7
 800de14:	4916      	ldr	r1, [pc, #88]	@ (800de70 <__pow5mult+0xb4>)
 800de16:	f7ff ff07 	bl	800dc28 <__i2b>
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	0004      	movs	r4, r0
 800de1e:	6098      	str	r0, [r3, #8]
 800de20:	2300      	movs	r3, #0
 800de22:	6003      	str	r3, [r0, #0]
 800de24:	2301      	movs	r3, #1
 800de26:	421d      	tst	r5, r3
 800de28:	d00a      	beq.n	800de40 <__pow5mult+0x84>
 800de2a:	0031      	movs	r1, r6
 800de2c:	0022      	movs	r2, r4
 800de2e:	0038      	movs	r0, r7
 800de30:	f7ff ff12 	bl	800dc58 <__multiply>
 800de34:	0031      	movs	r1, r6
 800de36:	9001      	str	r0, [sp, #4]
 800de38:	0038      	movs	r0, r7
 800de3a:	f7ff fdf1 	bl	800da20 <_Bfree>
 800de3e:	9e01      	ldr	r6, [sp, #4]
 800de40:	106d      	asrs	r5, r5, #1
 800de42:	d00c      	beq.n	800de5e <__pow5mult+0xa2>
 800de44:	6820      	ldr	r0, [r4, #0]
 800de46:	2800      	cmp	r0, #0
 800de48:	d107      	bne.n	800de5a <__pow5mult+0x9e>
 800de4a:	0022      	movs	r2, r4
 800de4c:	0021      	movs	r1, r4
 800de4e:	0038      	movs	r0, r7
 800de50:	f7ff ff02 	bl	800dc58 <__multiply>
 800de54:	2300      	movs	r3, #0
 800de56:	6020      	str	r0, [r4, #0]
 800de58:	6003      	str	r3, [r0, #0]
 800de5a:	0004      	movs	r4, r0
 800de5c:	e7e2      	b.n	800de24 <__pow5mult+0x68>
 800de5e:	0030      	movs	r0, r6
 800de60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de62:	46c0      	nop			@ (mov r8, r8)
 800de64:	08010a38 	.word	0x08010a38
 800de68:	0801095e 	.word	0x0801095e
 800de6c:	080109de 	.word	0x080109de
 800de70:	00000271 	.word	0x00000271

0800de74 <__lshift>:
 800de74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de76:	000c      	movs	r4, r1
 800de78:	0016      	movs	r6, r2
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	1157      	asrs	r7, r2, #5
 800de7e:	b085      	sub	sp, #20
 800de80:	18fb      	adds	r3, r7, r3
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	3301      	adds	r3, #1
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	6849      	ldr	r1, [r1, #4]
 800de8a:	68a3      	ldr	r3, [r4, #8]
 800de8c:	9002      	str	r0, [sp, #8]
 800de8e:	9a00      	ldr	r2, [sp, #0]
 800de90:	4293      	cmp	r3, r2
 800de92:	db10      	blt.n	800deb6 <__lshift+0x42>
 800de94:	9802      	ldr	r0, [sp, #8]
 800de96:	f7ff fd7f 	bl	800d998 <_Balloc>
 800de9a:	2300      	movs	r3, #0
 800de9c:	0001      	movs	r1, r0
 800de9e:	0005      	movs	r5, r0
 800dea0:	001a      	movs	r2, r3
 800dea2:	3114      	adds	r1, #20
 800dea4:	4298      	cmp	r0, r3
 800dea6:	d10c      	bne.n	800dec2 <__lshift+0x4e>
 800dea8:	21ef      	movs	r1, #239	@ 0xef
 800deaa:	002a      	movs	r2, r5
 800deac:	4b25      	ldr	r3, [pc, #148]	@ (800df44 <__lshift+0xd0>)
 800deae:	4826      	ldr	r0, [pc, #152]	@ (800df48 <__lshift+0xd4>)
 800deb0:	0049      	lsls	r1, r1, #1
 800deb2:	f001 fb31 	bl	800f518 <__assert_func>
 800deb6:	3101      	adds	r1, #1
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	e7e8      	b.n	800de8e <__lshift+0x1a>
 800debc:	0098      	lsls	r0, r3, #2
 800debe:	500a      	str	r2, [r1, r0]
 800dec0:	3301      	adds	r3, #1
 800dec2:	42bb      	cmp	r3, r7
 800dec4:	dbfa      	blt.n	800debc <__lshift+0x48>
 800dec6:	43fb      	mvns	r3, r7
 800dec8:	17db      	asrs	r3, r3, #31
 800deca:	401f      	ands	r7, r3
 800decc:	00bf      	lsls	r7, r7, #2
 800dece:	0023      	movs	r3, r4
 800ded0:	201f      	movs	r0, #31
 800ded2:	19c9      	adds	r1, r1, r7
 800ded4:	0037      	movs	r7, r6
 800ded6:	6922      	ldr	r2, [r4, #16]
 800ded8:	3314      	adds	r3, #20
 800deda:	0092      	lsls	r2, r2, #2
 800dedc:	189a      	adds	r2, r3, r2
 800dede:	4007      	ands	r7, r0
 800dee0:	4206      	tst	r6, r0
 800dee2:	d029      	beq.n	800df38 <__lshift+0xc4>
 800dee4:	3001      	adds	r0, #1
 800dee6:	1bc0      	subs	r0, r0, r7
 800dee8:	9003      	str	r0, [sp, #12]
 800deea:	468c      	mov	ip, r1
 800deec:	2000      	movs	r0, #0
 800deee:	681e      	ldr	r6, [r3, #0]
 800def0:	40be      	lsls	r6, r7
 800def2:	4306      	orrs	r6, r0
 800def4:	4660      	mov	r0, ip
 800def6:	c040      	stmia	r0!, {r6}
 800def8:	4684      	mov	ip, r0
 800defa:	9e03      	ldr	r6, [sp, #12]
 800defc:	cb01      	ldmia	r3!, {r0}
 800defe:	40f0      	lsrs	r0, r6
 800df00:	429a      	cmp	r2, r3
 800df02:	d8f4      	bhi.n	800deee <__lshift+0x7a>
 800df04:	0026      	movs	r6, r4
 800df06:	3615      	adds	r6, #21
 800df08:	2304      	movs	r3, #4
 800df0a:	42b2      	cmp	r2, r6
 800df0c:	d304      	bcc.n	800df18 <__lshift+0xa4>
 800df0e:	1b13      	subs	r3, r2, r4
 800df10:	3b15      	subs	r3, #21
 800df12:	089b      	lsrs	r3, r3, #2
 800df14:	3301      	adds	r3, #1
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	50c8      	str	r0, [r1, r3]
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d002      	beq.n	800df24 <__lshift+0xb0>
 800df1e:	9b01      	ldr	r3, [sp, #4]
 800df20:	3302      	adds	r3, #2
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	9802      	ldr	r0, [sp, #8]
 800df28:	3b01      	subs	r3, #1
 800df2a:	0021      	movs	r1, r4
 800df2c:	612b      	str	r3, [r5, #16]
 800df2e:	f7ff fd77 	bl	800da20 <_Bfree>
 800df32:	0028      	movs	r0, r5
 800df34:	b005      	add	sp, #20
 800df36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df38:	cb01      	ldmia	r3!, {r0}
 800df3a:	c101      	stmia	r1!, {r0}
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d8fb      	bhi.n	800df38 <__lshift+0xc4>
 800df40:	e7f0      	b.n	800df24 <__lshift+0xb0>
 800df42:	46c0      	nop			@ (mov r8, r8)
 800df44:	080109cd 	.word	0x080109cd
 800df48:	080109de 	.word	0x080109de

0800df4c <__mcmp>:
 800df4c:	b530      	push	{r4, r5, lr}
 800df4e:	690b      	ldr	r3, [r1, #16]
 800df50:	6904      	ldr	r4, [r0, #16]
 800df52:	0002      	movs	r2, r0
 800df54:	1ae0      	subs	r0, r4, r3
 800df56:	429c      	cmp	r4, r3
 800df58:	d10f      	bne.n	800df7a <__mcmp+0x2e>
 800df5a:	3214      	adds	r2, #20
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	3114      	adds	r1, #20
 800df60:	0014      	movs	r4, r2
 800df62:	18c9      	adds	r1, r1, r3
 800df64:	18d2      	adds	r2, r2, r3
 800df66:	3a04      	subs	r2, #4
 800df68:	3904      	subs	r1, #4
 800df6a:	6815      	ldr	r5, [r2, #0]
 800df6c:	680b      	ldr	r3, [r1, #0]
 800df6e:	429d      	cmp	r5, r3
 800df70:	d004      	beq.n	800df7c <__mcmp+0x30>
 800df72:	2001      	movs	r0, #1
 800df74:	429d      	cmp	r5, r3
 800df76:	d200      	bcs.n	800df7a <__mcmp+0x2e>
 800df78:	3802      	subs	r0, #2
 800df7a:	bd30      	pop	{r4, r5, pc}
 800df7c:	4294      	cmp	r4, r2
 800df7e:	d3f2      	bcc.n	800df66 <__mcmp+0x1a>
 800df80:	e7fb      	b.n	800df7a <__mcmp+0x2e>
	...

0800df84 <__mdiff>:
 800df84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df86:	000c      	movs	r4, r1
 800df88:	b087      	sub	sp, #28
 800df8a:	9000      	str	r0, [sp, #0]
 800df8c:	0011      	movs	r1, r2
 800df8e:	0020      	movs	r0, r4
 800df90:	0017      	movs	r7, r2
 800df92:	f7ff ffdb 	bl	800df4c <__mcmp>
 800df96:	1e05      	subs	r5, r0, #0
 800df98:	d110      	bne.n	800dfbc <__mdiff+0x38>
 800df9a:	0001      	movs	r1, r0
 800df9c:	9800      	ldr	r0, [sp, #0]
 800df9e:	f7ff fcfb 	bl	800d998 <_Balloc>
 800dfa2:	1e02      	subs	r2, r0, #0
 800dfa4:	d104      	bne.n	800dfb0 <__mdiff+0x2c>
 800dfa6:	4b40      	ldr	r3, [pc, #256]	@ (800e0a8 <__mdiff+0x124>)
 800dfa8:	4840      	ldr	r0, [pc, #256]	@ (800e0ac <__mdiff+0x128>)
 800dfaa:	4941      	ldr	r1, [pc, #260]	@ (800e0b0 <__mdiff+0x12c>)
 800dfac:	f001 fab4 	bl	800f518 <__assert_func>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	6145      	str	r5, [r0, #20]
 800dfb4:	6103      	str	r3, [r0, #16]
 800dfb6:	0010      	movs	r0, r2
 800dfb8:	b007      	add	sp, #28
 800dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbc:	2600      	movs	r6, #0
 800dfbe:	42b0      	cmp	r0, r6
 800dfc0:	da03      	bge.n	800dfca <__mdiff+0x46>
 800dfc2:	0023      	movs	r3, r4
 800dfc4:	003c      	movs	r4, r7
 800dfc6:	001f      	movs	r7, r3
 800dfc8:	3601      	adds	r6, #1
 800dfca:	6861      	ldr	r1, [r4, #4]
 800dfcc:	9800      	ldr	r0, [sp, #0]
 800dfce:	f7ff fce3 	bl	800d998 <_Balloc>
 800dfd2:	1e02      	subs	r2, r0, #0
 800dfd4:	d103      	bne.n	800dfde <__mdiff+0x5a>
 800dfd6:	4b34      	ldr	r3, [pc, #208]	@ (800e0a8 <__mdiff+0x124>)
 800dfd8:	4834      	ldr	r0, [pc, #208]	@ (800e0ac <__mdiff+0x128>)
 800dfda:	4936      	ldr	r1, [pc, #216]	@ (800e0b4 <__mdiff+0x130>)
 800dfdc:	e7e6      	b.n	800dfac <__mdiff+0x28>
 800dfde:	6923      	ldr	r3, [r4, #16]
 800dfe0:	3414      	adds	r4, #20
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	18e3      	adds	r3, r4, r3
 800dfe8:	0021      	movs	r1, r4
 800dfea:	9401      	str	r4, [sp, #4]
 800dfec:	003c      	movs	r4, r7
 800dfee:	9302      	str	r3, [sp, #8]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	3414      	adds	r4, #20
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	18e3      	adds	r3, r4, r3
 800dff8:	9303      	str	r3, [sp, #12]
 800dffa:	0003      	movs	r3, r0
 800dffc:	60c6      	str	r6, [r0, #12]
 800dffe:	468c      	mov	ip, r1
 800e000:	2000      	movs	r0, #0
 800e002:	3314      	adds	r3, #20
 800e004:	9304      	str	r3, [sp, #16]
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	4663      	mov	r3, ip
 800e00a:	cb20      	ldmia	r3!, {r5}
 800e00c:	b2a9      	uxth	r1, r5
 800e00e:	000e      	movs	r6, r1
 800e010:	469c      	mov	ip, r3
 800e012:	cc08      	ldmia	r4!, {r3}
 800e014:	0c2d      	lsrs	r5, r5, #16
 800e016:	b299      	uxth	r1, r3
 800e018:	1a71      	subs	r1, r6, r1
 800e01a:	1809      	adds	r1, r1, r0
 800e01c:	0c1b      	lsrs	r3, r3, #16
 800e01e:	1408      	asrs	r0, r1, #16
 800e020:	1aeb      	subs	r3, r5, r3
 800e022:	181b      	adds	r3, r3, r0
 800e024:	1418      	asrs	r0, r3, #16
 800e026:	b289      	uxth	r1, r1
 800e028:	041b      	lsls	r3, r3, #16
 800e02a:	4319      	orrs	r1, r3
 800e02c:	9b05      	ldr	r3, [sp, #20]
 800e02e:	c302      	stmia	r3!, {r1}
 800e030:	9305      	str	r3, [sp, #20]
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	42a3      	cmp	r3, r4
 800e036:	d8e7      	bhi.n	800e008 <__mdiff+0x84>
 800e038:	0039      	movs	r1, r7
 800e03a:	9c03      	ldr	r4, [sp, #12]
 800e03c:	3115      	adds	r1, #21
 800e03e:	2304      	movs	r3, #4
 800e040:	428c      	cmp	r4, r1
 800e042:	d304      	bcc.n	800e04e <__mdiff+0xca>
 800e044:	1be3      	subs	r3, r4, r7
 800e046:	3b15      	subs	r3, #21
 800e048:	089b      	lsrs	r3, r3, #2
 800e04a:	3301      	adds	r3, #1
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	9901      	ldr	r1, [sp, #4]
 800e050:	18cd      	adds	r5, r1, r3
 800e052:	9904      	ldr	r1, [sp, #16]
 800e054:	002e      	movs	r6, r5
 800e056:	18cb      	adds	r3, r1, r3
 800e058:	001f      	movs	r7, r3
 800e05a:	9902      	ldr	r1, [sp, #8]
 800e05c:	428e      	cmp	r6, r1
 800e05e:	d311      	bcc.n	800e084 <__mdiff+0x100>
 800e060:	9c02      	ldr	r4, [sp, #8]
 800e062:	1ee9      	subs	r1, r5, #3
 800e064:	2000      	movs	r0, #0
 800e066:	428c      	cmp	r4, r1
 800e068:	d304      	bcc.n	800e074 <__mdiff+0xf0>
 800e06a:	0021      	movs	r1, r4
 800e06c:	3103      	adds	r1, #3
 800e06e:	1b49      	subs	r1, r1, r5
 800e070:	0889      	lsrs	r1, r1, #2
 800e072:	0088      	lsls	r0, r1, #2
 800e074:	181b      	adds	r3, r3, r0
 800e076:	3b04      	subs	r3, #4
 800e078:	6819      	ldr	r1, [r3, #0]
 800e07a:	2900      	cmp	r1, #0
 800e07c:	d010      	beq.n	800e0a0 <__mdiff+0x11c>
 800e07e:	9b00      	ldr	r3, [sp, #0]
 800e080:	6113      	str	r3, [r2, #16]
 800e082:	e798      	b.n	800dfb6 <__mdiff+0x32>
 800e084:	4684      	mov	ip, r0
 800e086:	ce02      	ldmia	r6!, {r1}
 800e088:	b288      	uxth	r0, r1
 800e08a:	4460      	add	r0, ip
 800e08c:	1400      	asrs	r0, r0, #16
 800e08e:	0c0c      	lsrs	r4, r1, #16
 800e090:	1904      	adds	r4, r0, r4
 800e092:	4461      	add	r1, ip
 800e094:	1420      	asrs	r0, r4, #16
 800e096:	b289      	uxth	r1, r1
 800e098:	0424      	lsls	r4, r4, #16
 800e09a:	4321      	orrs	r1, r4
 800e09c:	c702      	stmia	r7!, {r1}
 800e09e:	e7dc      	b.n	800e05a <__mdiff+0xd6>
 800e0a0:	9900      	ldr	r1, [sp, #0]
 800e0a2:	3901      	subs	r1, #1
 800e0a4:	9100      	str	r1, [sp, #0]
 800e0a6:	e7e6      	b.n	800e076 <__mdiff+0xf2>
 800e0a8:	080109cd 	.word	0x080109cd
 800e0ac:	080109de 	.word	0x080109de
 800e0b0:	00000237 	.word	0x00000237
 800e0b4:	00000245 	.word	0x00000245

0800e0b8 <__ulp>:
 800e0b8:	b510      	push	{r4, lr}
 800e0ba:	2400      	movs	r4, #0
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f0 <__ulp+0x38>)
 800e0be:	4a0d      	ldr	r2, [pc, #52]	@ (800e0f4 <__ulp+0x3c>)
 800e0c0:	400b      	ands	r3, r1
 800e0c2:	189b      	adds	r3, r3, r2
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	dc06      	bgt.n	800e0d6 <__ulp+0x1e>
 800e0c8:	425b      	negs	r3, r3
 800e0ca:	151a      	asrs	r2, r3, #20
 800e0cc:	2a13      	cmp	r2, #19
 800e0ce:	dc05      	bgt.n	800e0dc <__ulp+0x24>
 800e0d0:	2380      	movs	r3, #128	@ 0x80
 800e0d2:	031b      	lsls	r3, r3, #12
 800e0d4:	4113      	asrs	r3, r2
 800e0d6:	0019      	movs	r1, r3
 800e0d8:	0020      	movs	r0, r4
 800e0da:	bd10      	pop	{r4, pc}
 800e0dc:	3a14      	subs	r2, #20
 800e0de:	2401      	movs	r4, #1
 800e0e0:	2a1e      	cmp	r2, #30
 800e0e2:	dc02      	bgt.n	800e0ea <__ulp+0x32>
 800e0e4:	2480      	movs	r4, #128	@ 0x80
 800e0e6:	0624      	lsls	r4, r4, #24
 800e0e8:	40d4      	lsrs	r4, r2
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e7f3      	b.n	800e0d6 <__ulp+0x1e>
 800e0ee:	46c0      	nop			@ (mov r8, r8)
 800e0f0:	7ff00000 	.word	0x7ff00000
 800e0f4:	fcc00000 	.word	0xfcc00000

0800e0f8 <__b2d>:
 800e0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0fa:	0006      	movs	r6, r0
 800e0fc:	6903      	ldr	r3, [r0, #16]
 800e0fe:	3614      	adds	r6, #20
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	18f3      	adds	r3, r6, r3
 800e104:	1f1d      	subs	r5, r3, #4
 800e106:	682c      	ldr	r4, [r5, #0]
 800e108:	000f      	movs	r7, r1
 800e10a:	0020      	movs	r0, r4
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f7ff fd3b 	bl	800db88 <__hi0bits>
 800e112:	2220      	movs	r2, #32
 800e114:	1a12      	subs	r2, r2, r0
 800e116:	603a      	str	r2, [r7, #0]
 800e118:	0003      	movs	r3, r0
 800e11a:	4a1c      	ldr	r2, [pc, #112]	@ (800e18c <__b2d+0x94>)
 800e11c:	280a      	cmp	r0, #10
 800e11e:	dc15      	bgt.n	800e14c <__b2d+0x54>
 800e120:	210b      	movs	r1, #11
 800e122:	0027      	movs	r7, r4
 800e124:	1a09      	subs	r1, r1, r0
 800e126:	40cf      	lsrs	r7, r1
 800e128:	433a      	orrs	r2, r7
 800e12a:	468c      	mov	ip, r1
 800e12c:	0011      	movs	r1, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	42ae      	cmp	r6, r5
 800e132:	d202      	bcs.n	800e13a <__b2d+0x42>
 800e134:	9a01      	ldr	r2, [sp, #4]
 800e136:	3a08      	subs	r2, #8
 800e138:	6812      	ldr	r2, [r2, #0]
 800e13a:	3315      	adds	r3, #21
 800e13c:	409c      	lsls	r4, r3
 800e13e:	4663      	mov	r3, ip
 800e140:	0027      	movs	r7, r4
 800e142:	40da      	lsrs	r2, r3
 800e144:	4317      	orrs	r7, r2
 800e146:	0038      	movs	r0, r7
 800e148:	b003      	add	sp, #12
 800e14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14c:	2700      	movs	r7, #0
 800e14e:	42ae      	cmp	r6, r5
 800e150:	d202      	bcs.n	800e158 <__b2d+0x60>
 800e152:	9d01      	ldr	r5, [sp, #4]
 800e154:	3d08      	subs	r5, #8
 800e156:	682f      	ldr	r7, [r5, #0]
 800e158:	210b      	movs	r1, #11
 800e15a:	4249      	negs	r1, r1
 800e15c:	468c      	mov	ip, r1
 800e15e:	449c      	add	ip, r3
 800e160:	2b0b      	cmp	r3, #11
 800e162:	d010      	beq.n	800e186 <__b2d+0x8e>
 800e164:	4661      	mov	r1, ip
 800e166:	2320      	movs	r3, #32
 800e168:	408c      	lsls	r4, r1
 800e16a:	1a5b      	subs	r3, r3, r1
 800e16c:	0039      	movs	r1, r7
 800e16e:	40d9      	lsrs	r1, r3
 800e170:	430c      	orrs	r4, r1
 800e172:	4322      	orrs	r2, r4
 800e174:	0011      	movs	r1, r2
 800e176:	2200      	movs	r2, #0
 800e178:	42b5      	cmp	r5, r6
 800e17a:	d901      	bls.n	800e180 <__b2d+0x88>
 800e17c:	3d04      	subs	r5, #4
 800e17e:	682a      	ldr	r2, [r5, #0]
 800e180:	4664      	mov	r4, ip
 800e182:	40a7      	lsls	r7, r4
 800e184:	e7dd      	b.n	800e142 <__b2d+0x4a>
 800e186:	4322      	orrs	r2, r4
 800e188:	0011      	movs	r1, r2
 800e18a:	e7dc      	b.n	800e146 <__b2d+0x4e>
 800e18c:	3ff00000 	.word	0x3ff00000

0800e190 <__d2b>:
 800e190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e192:	2101      	movs	r1, #1
 800e194:	0016      	movs	r6, r2
 800e196:	001f      	movs	r7, r3
 800e198:	f7ff fbfe 	bl	800d998 <_Balloc>
 800e19c:	1e04      	subs	r4, r0, #0
 800e19e:	d105      	bne.n	800e1ac <__d2b+0x1c>
 800e1a0:	0022      	movs	r2, r4
 800e1a2:	4b25      	ldr	r3, [pc, #148]	@ (800e238 <__d2b+0xa8>)
 800e1a4:	4825      	ldr	r0, [pc, #148]	@ (800e23c <__d2b+0xac>)
 800e1a6:	4926      	ldr	r1, [pc, #152]	@ (800e240 <__d2b+0xb0>)
 800e1a8:	f001 f9b6 	bl	800f518 <__assert_func>
 800e1ac:	033b      	lsls	r3, r7, #12
 800e1ae:	007d      	lsls	r5, r7, #1
 800e1b0:	0b1b      	lsrs	r3, r3, #12
 800e1b2:	0d6d      	lsrs	r5, r5, #21
 800e1b4:	d002      	beq.n	800e1bc <__d2b+0x2c>
 800e1b6:	2280      	movs	r2, #128	@ 0x80
 800e1b8:	0352      	lsls	r2, r2, #13
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	2e00      	cmp	r6, #0
 800e1c0:	d025      	beq.n	800e20e <__d2b+0x7e>
 800e1c2:	4668      	mov	r0, sp
 800e1c4:	9600      	str	r6, [sp, #0]
 800e1c6:	f7ff fd00 	bl	800dbca <__lo0bits>
 800e1ca:	9b01      	ldr	r3, [sp, #4]
 800e1cc:	9900      	ldr	r1, [sp, #0]
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d01b      	beq.n	800e20a <__d2b+0x7a>
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	001e      	movs	r6, r3
 800e1d6:	1a12      	subs	r2, r2, r0
 800e1d8:	4096      	lsls	r6, r2
 800e1da:	0032      	movs	r2, r6
 800e1dc:	40c3      	lsrs	r3, r0
 800e1de:	430a      	orrs	r2, r1
 800e1e0:	6162      	str	r2, [r4, #20]
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	9e01      	ldr	r6, [sp, #4]
 800e1e6:	61a6      	str	r6, [r4, #24]
 800e1e8:	1e73      	subs	r3, r6, #1
 800e1ea:	419e      	sbcs	r6, r3
 800e1ec:	3601      	adds	r6, #1
 800e1ee:	6126      	str	r6, [r4, #16]
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d014      	beq.n	800e21e <__d2b+0x8e>
 800e1f4:	2635      	movs	r6, #53	@ 0x35
 800e1f6:	4b13      	ldr	r3, [pc, #76]	@ (800e244 <__d2b+0xb4>)
 800e1f8:	18ed      	adds	r5, r5, r3
 800e1fa:	9b08      	ldr	r3, [sp, #32]
 800e1fc:	182d      	adds	r5, r5, r0
 800e1fe:	601d      	str	r5, [r3, #0]
 800e200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e202:	1a36      	subs	r6, r6, r0
 800e204:	601e      	str	r6, [r3, #0]
 800e206:	0020      	movs	r0, r4
 800e208:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e20a:	6161      	str	r1, [r4, #20]
 800e20c:	e7ea      	b.n	800e1e4 <__d2b+0x54>
 800e20e:	a801      	add	r0, sp, #4
 800e210:	f7ff fcdb 	bl	800dbca <__lo0bits>
 800e214:	9b01      	ldr	r3, [sp, #4]
 800e216:	2601      	movs	r6, #1
 800e218:	6163      	str	r3, [r4, #20]
 800e21a:	3020      	adds	r0, #32
 800e21c:	e7e7      	b.n	800e1ee <__d2b+0x5e>
 800e21e:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <__d2b+0xb8>)
 800e220:	18c0      	adds	r0, r0, r3
 800e222:	9b08      	ldr	r3, [sp, #32]
 800e224:	6018      	str	r0, [r3, #0]
 800e226:	4b09      	ldr	r3, [pc, #36]	@ (800e24c <__d2b+0xbc>)
 800e228:	18f3      	adds	r3, r6, r3
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	18e3      	adds	r3, r4, r3
 800e22e:	6958      	ldr	r0, [r3, #20]
 800e230:	f7ff fcaa 	bl	800db88 <__hi0bits>
 800e234:	0176      	lsls	r6, r6, #5
 800e236:	e7e3      	b.n	800e200 <__d2b+0x70>
 800e238:	080109cd 	.word	0x080109cd
 800e23c:	080109de 	.word	0x080109de
 800e240:	0000030f 	.word	0x0000030f
 800e244:	fffffbcd 	.word	0xfffffbcd
 800e248:	fffffbce 	.word	0xfffffbce
 800e24c:	3fffffff 	.word	0x3fffffff

0800e250 <__ratio>:
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	b087      	sub	sp, #28
 800e254:	000f      	movs	r7, r1
 800e256:	a904      	add	r1, sp, #16
 800e258:	0006      	movs	r6, r0
 800e25a:	f7ff ff4d 	bl	800e0f8 <__b2d>
 800e25e:	9000      	str	r0, [sp, #0]
 800e260:	9101      	str	r1, [sp, #4]
 800e262:	9b00      	ldr	r3, [sp, #0]
 800e264:	9c01      	ldr	r4, [sp, #4]
 800e266:	0038      	movs	r0, r7
 800e268:	a905      	add	r1, sp, #20
 800e26a:	9302      	str	r3, [sp, #8]
 800e26c:	9403      	str	r4, [sp, #12]
 800e26e:	f7ff ff43 	bl	800e0f8 <__b2d>
 800e272:	000d      	movs	r5, r1
 800e274:	0002      	movs	r2, r0
 800e276:	000b      	movs	r3, r1
 800e278:	6930      	ldr	r0, [r6, #16]
 800e27a:	6939      	ldr	r1, [r7, #16]
 800e27c:	9e04      	ldr	r6, [sp, #16]
 800e27e:	1a40      	subs	r0, r0, r1
 800e280:	9905      	ldr	r1, [sp, #20]
 800e282:	0140      	lsls	r0, r0, #5
 800e284:	1a71      	subs	r1, r6, r1
 800e286:	1841      	adds	r1, r0, r1
 800e288:	0508      	lsls	r0, r1, #20
 800e28a:	2900      	cmp	r1, #0
 800e28c:	dd08      	ble.n	800e2a0 <__ratio+0x50>
 800e28e:	9901      	ldr	r1, [sp, #4]
 800e290:	1841      	adds	r1, r0, r1
 800e292:	9103      	str	r1, [sp, #12]
 800e294:	9802      	ldr	r0, [sp, #8]
 800e296:	9903      	ldr	r1, [sp, #12]
 800e298:	f7f3 fd42 	bl	8001d20 <__aeabi_ddiv>
 800e29c:	b007      	add	sp, #28
 800e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a0:	1a2b      	subs	r3, r5, r0
 800e2a2:	e7f7      	b.n	800e294 <__ratio+0x44>

0800e2a4 <__copybits>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	0014      	movs	r4, r2
 800e2a8:	0005      	movs	r5, r0
 800e2aa:	3901      	subs	r1, #1
 800e2ac:	6913      	ldr	r3, [r2, #16]
 800e2ae:	1149      	asrs	r1, r1, #5
 800e2b0:	3101      	adds	r1, #1
 800e2b2:	0089      	lsls	r1, r1, #2
 800e2b4:	3414      	adds	r4, #20
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	1841      	adds	r1, r0, r1
 800e2ba:	18e3      	adds	r3, r4, r3
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	d80d      	bhi.n	800e2dc <__copybits+0x38>
 800e2c0:	0014      	movs	r4, r2
 800e2c2:	3411      	adds	r4, #17
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	429c      	cmp	r4, r3
 800e2c8:	d803      	bhi.n	800e2d2 <__copybits+0x2e>
 800e2ca:	1a9b      	subs	r3, r3, r2
 800e2cc:	3b11      	subs	r3, #17
 800e2ce:	089b      	lsrs	r3, r3, #2
 800e2d0:	009d      	lsls	r5, r3, #2
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	1940      	adds	r0, r0, r5
 800e2d6:	4281      	cmp	r1, r0
 800e2d8:	d803      	bhi.n	800e2e2 <__copybits+0x3e>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	cc40      	ldmia	r4!, {r6}
 800e2de:	c540      	stmia	r5!, {r6}
 800e2e0:	e7ec      	b.n	800e2bc <__copybits+0x18>
 800e2e2:	c008      	stmia	r0!, {r3}
 800e2e4:	e7f7      	b.n	800e2d6 <__copybits+0x32>

0800e2e6 <__any_on>:
 800e2e6:	0002      	movs	r2, r0
 800e2e8:	6900      	ldr	r0, [r0, #16]
 800e2ea:	b510      	push	{r4, lr}
 800e2ec:	3214      	adds	r2, #20
 800e2ee:	114b      	asrs	r3, r1, #5
 800e2f0:	4298      	cmp	r0, r3
 800e2f2:	db13      	blt.n	800e31c <__any_on+0x36>
 800e2f4:	dd0c      	ble.n	800e310 <__any_on+0x2a>
 800e2f6:	241f      	movs	r4, #31
 800e2f8:	0008      	movs	r0, r1
 800e2fa:	4020      	ands	r0, r4
 800e2fc:	4221      	tst	r1, r4
 800e2fe:	d007      	beq.n	800e310 <__any_on+0x2a>
 800e300:	0099      	lsls	r1, r3, #2
 800e302:	588c      	ldr	r4, [r1, r2]
 800e304:	0021      	movs	r1, r4
 800e306:	40c1      	lsrs	r1, r0
 800e308:	4081      	lsls	r1, r0
 800e30a:	2001      	movs	r0, #1
 800e30c:	428c      	cmp	r4, r1
 800e30e:	d104      	bne.n	800e31a <__any_on+0x34>
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	18d3      	adds	r3, r2, r3
 800e314:	4293      	cmp	r3, r2
 800e316:	d803      	bhi.n	800e320 <__any_on+0x3a>
 800e318:	2000      	movs	r0, #0
 800e31a:	bd10      	pop	{r4, pc}
 800e31c:	0003      	movs	r3, r0
 800e31e:	e7f7      	b.n	800e310 <__any_on+0x2a>
 800e320:	3b04      	subs	r3, #4
 800e322:	6819      	ldr	r1, [r3, #0]
 800e324:	2900      	cmp	r1, #0
 800e326:	d0f5      	beq.n	800e314 <__any_on+0x2e>
 800e328:	2001      	movs	r0, #1
 800e32a:	e7f6      	b.n	800e31a <__any_on+0x34>

0800e32c <sulp>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	0016      	movs	r6, r2
 800e330:	000d      	movs	r5, r1
 800e332:	f7ff fec1 	bl	800e0b8 <__ulp>
 800e336:	2e00      	cmp	r6, #0
 800e338:	d00d      	beq.n	800e356 <sulp+0x2a>
 800e33a:	236b      	movs	r3, #107	@ 0x6b
 800e33c:	006a      	lsls	r2, r5, #1
 800e33e:	0d52      	lsrs	r2, r2, #21
 800e340:	1a9b      	subs	r3, r3, r2
 800e342:	2b00      	cmp	r3, #0
 800e344:	dd07      	ble.n	800e356 <sulp+0x2a>
 800e346:	2400      	movs	r4, #0
 800e348:	4a03      	ldr	r2, [pc, #12]	@ (800e358 <sulp+0x2c>)
 800e34a:	051b      	lsls	r3, r3, #20
 800e34c:	189d      	adds	r5, r3, r2
 800e34e:	002b      	movs	r3, r5
 800e350:	0022      	movs	r2, r4
 800e352:	f7f4 f929 	bl	80025a8 <__aeabi_dmul>
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	3ff00000 	.word	0x3ff00000

0800e35c <_strtod_l>:
 800e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e35e:	b0a3      	sub	sp, #140	@ 0x8c
 800e360:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e362:	2200      	movs	r2, #0
 800e364:	2600      	movs	r6, #0
 800e366:	2700      	movs	r7, #0
 800e368:	9005      	str	r0, [sp, #20]
 800e36a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e36c:	921e      	str	r2, [sp, #120]	@ 0x78
 800e36e:	911d      	str	r1, [sp, #116]	@ 0x74
 800e370:	780a      	ldrb	r2, [r1, #0]
 800e372:	2a2b      	cmp	r2, #43	@ 0x2b
 800e374:	d053      	beq.n	800e41e <_strtod_l+0xc2>
 800e376:	d83f      	bhi.n	800e3f8 <_strtod_l+0x9c>
 800e378:	2a0d      	cmp	r2, #13
 800e37a:	d839      	bhi.n	800e3f0 <_strtod_l+0x94>
 800e37c:	2a08      	cmp	r2, #8
 800e37e:	d839      	bhi.n	800e3f4 <_strtod_l+0x98>
 800e380:	2a00      	cmp	r2, #0
 800e382:	d042      	beq.n	800e40a <_strtod_l+0xae>
 800e384:	2200      	movs	r2, #0
 800e386:	9212      	str	r2, [sp, #72]	@ 0x48
 800e388:	2100      	movs	r1, #0
 800e38a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800e38c:	910c      	str	r1, [sp, #48]	@ 0x30
 800e38e:	782a      	ldrb	r2, [r5, #0]
 800e390:	2a30      	cmp	r2, #48	@ 0x30
 800e392:	d000      	beq.n	800e396 <_strtod_l+0x3a>
 800e394:	e083      	b.n	800e49e <_strtod_l+0x142>
 800e396:	786a      	ldrb	r2, [r5, #1]
 800e398:	3120      	adds	r1, #32
 800e39a:	438a      	bics	r2, r1
 800e39c:	2a58      	cmp	r2, #88	@ 0x58
 800e39e:	d000      	beq.n	800e3a2 <_strtod_l+0x46>
 800e3a0:	e073      	b.n	800e48a <_strtod_l+0x12e>
 800e3a2:	9302      	str	r3, [sp, #8]
 800e3a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3a6:	4a95      	ldr	r2, [pc, #596]	@ (800e5fc <_strtod_l+0x2a0>)
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	ab1e      	add	r3, sp, #120	@ 0x78
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	9805      	ldr	r0, [sp, #20]
 800e3b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e3b2:	a91d      	add	r1, sp, #116	@ 0x74
 800e3b4:	f001 f964 	bl	800f680 <__gethex>
 800e3b8:	230f      	movs	r3, #15
 800e3ba:	0002      	movs	r2, r0
 800e3bc:	401a      	ands	r2, r3
 800e3be:	0004      	movs	r4, r0
 800e3c0:	9206      	str	r2, [sp, #24]
 800e3c2:	4218      	tst	r0, r3
 800e3c4:	d005      	beq.n	800e3d2 <_strtod_l+0x76>
 800e3c6:	2a06      	cmp	r2, #6
 800e3c8:	d12b      	bne.n	800e422 <_strtod_l+0xc6>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	951d      	str	r5, [sp, #116]	@ 0x74
 800e3d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <_strtod_l+0x82>
 800e3d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e3da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d019      	beq.n	800e418 <_strtod_l+0xbc>
 800e3e4:	2380      	movs	r3, #128	@ 0x80
 800e3e6:	0030      	movs	r0, r6
 800e3e8:	061b      	lsls	r3, r3, #24
 800e3ea:	18f9      	adds	r1, r7, r3
 800e3ec:	b023      	add	sp, #140	@ 0x8c
 800e3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f0:	2a20      	cmp	r2, #32
 800e3f2:	d1c7      	bne.n	800e384 <_strtod_l+0x28>
 800e3f4:	3101      	adds	r1, #1
 800e3f6:	e7ba      	b.n	800e36e <_strtod_l+0x12>
 800e3f8:	2a2d      	cmp	r2, #45	@ 0x2d
 800e3fa:	d1c3      	bne.n	800e384 <_strtod_l+0x28>
 800e3fc:	3a2c      	subs	r2, #44	@ 0x2c
 800e3fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800e400:	1c4a      	adds	r2, r1, #1
 800e402:	921d      	str	r2, [sp, #116]	@ 0x74
 800e404:	784a      	ldrb	r2, [r1, #1]
 800e406:	2a00      	cmp	r2, #0
 800e408:	d1be      	bne.n	800e388 <_strtod_l+0x2c>
 800e40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e40c:	931d      	str	r3, [sp, #116]	@ 0x74
 800e40e:	2300      	movs	r3, #0
 800e410:	9312      	str	r3, [sp, #72]	@ 0x48
 800e412:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1df      	bne.n	800e3d8 <_strtod_l+0x7c>
 800e418:	0030      	movs	r0, r6
 800e41a:	0039      	movs	r1, r7
 800e41c:	e7e6      	b.n	800e3ec <_strtod_l+0x90>
 800e41e:	2200      	movs	r2, #0
 800e420:	e7ed      	b.n	800e3fe <_strtod_l+0xa2>
 800e422:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e424:	2a00      	cmp	r2, #0
 800e426:	d007      	beq.n	800e438 <_strtod_l+0xdc>
 800e428:	2135      	movs	r1, #53	@ 0x35
 800e42a:	a820      	add	r0, sp, #128	@ 0x80
 800e42c:	f7ff ff3a 	bl	800e2a4 <__copybits>
 800e430:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e432:	9805      	ldr	r0, [sp, #20]
 800e434:	f7ff faf4 	bl	800da20 <_Bfree>
 800e438:	9806      	ldr	r0, [sp, #24]
 800e43a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e43c:	3801      	subs	r0, #1
 800e43e:	2804      	cmp	r0, #4
 800e440:	d806      	bhi.n	800e450 <_strtod_l+0xf4>
 800e442:	f7f1 fe69 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e446:	0312      	.short	0x0312
 800e448:	1e1c      	.short	0x1e1c
 800e44a:	12          	.byte	0x12
 800e44b:	00          	.byte	0x00
 800e44c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e44e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800e450:	05e4      	lsls	r4, r4, #23
 800e452:	d502      	bpl.n	800e45a <_strtod_l+0xfe>
 800e454:	2380      	movs	r3, #128	@ 0x80
 800e456:	061b      	lsls	r3, r3, #24
 800e458:	431f      	orrs	r7, r3
 800e45a:	4b69      	ldr	r3, [pc, #420]	@ (800e600 <_strtod_l+0x2a4>)
 800e45c:	423b      	tst	r3, r7
 800e45e:	d1b8      	bne.n	800e3d2 <_strtod_l+0x76>
 800e460:	f7fe fad6 	bl	800ca10 <__errno>
 800e464:	2322      	movs	r3, #34	@ 0x22
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	e7b3      	b.n	800e3d2 <_strtod_l+0x76>
 800e46a:	4966      	ldr	r1, [pc, #408]	@ (800e604 <_strtod_l+0x2a8>)
 800e46c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e46e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e470:	400a      	ands	r2, r1
 800e472:	4965      	ldr	r1, [pc, #404]	@ (800e608 <_strtod_l+0x2ac>)
 800e474:	185b      	adds	r3, r3, r1
 800e476:	051b      	lsls	r3, r3, #20
 800e478:	431a      	orrs	r2, r3
 800e47a:	0017      	movs	r7, r2
 800e47c:	e7e8      	b.n	800e450 <_strtod_l+0xf4>
 800e47e:	4f60      	ldr	r7, [pc, #384]	@ (800e600 <_strtod_l+0x2a4>)
 800e480:	e7e6      	b.n	800e450 <_strtod_l+0xf4>
 800e482:	2601      	movs	r6, #1
 800e484:	4f61      	ldr	r7, [pc, #388]	@ (800e60c <_strtod_l+0x2b0>)
 800e486:	4276      	negs	r6, r6
 800e488:	e7e2      	b.n	800e450 <_strtod_l+0xf4>
 800e48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	921d      	str	r2, [sp, #116]	@ 0x74
 800e490:	785b      	ldrb	r3, [r3, #1]
 800e492:	2b30      	cmp	r3, #48	@ 0x30
 800e494:	d0f9      	beq.n	800e48a <_strtod_l+0x12e>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d09b      	beq.n	800e3d2 <_strtod_l+0x76>
 800e49a:	2301      	movs	r3, #1
 800e49c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e49e:	2500      	movs	r5, #0
 800e4a0:	220a      	movs	r2, #10
 800e4a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4a4:	950d      	str	r5, [sp, #52]	@ 0x34
 800e4a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4a8:	9508      	str	r5, [sp, #32]
 800e4aa:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e4ac:	7804      	ldrb	r4, [r0, #0]
 800e4ae:	0023      	movs	r3, r4
 800e4b0:	3b30      	subs	r3, #48	@ 0x30
 800e4b2:	b2d9      	uxtb	r1, r3
 800e4b4:	2909      	cmp	r1, #9
 800e4b6:	d927      	bls.n	800e508 <_strtod_l+0x1ac>
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	4955      	ldr	r1, [pc, #340]	@ (800e610 <_strtod_l+0x2b4>)
 800e4bc:	f000 fff8 	bl	800f4b0 <strncmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d031      	beq.n	800e528 <_strtod_l+0x1cc>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	0023      	movs	r3, r4
 800e4c8:	4684      	mov	ip, r0
 800e4ca:	9a08      	ldr	r2, [sp, #32]
 800e4cc:	900e      	str	r0, [sp, #56]	@ 0x38
 800e4ce:	9206      	str	r2, [sp, #24]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	0019      	movs	r1, r3
 800e4d4:	4391      	bics	r1, r2
 800e4d6:	000a      	movs	r2, r1
 800e4d8:	2100      	movs	r1, #0
 800e4da:	9107      	str	r1, [sp, #28]
 800e4dc:	2a45      	cmp	r2, #69	@ 0x45
 800e4de:	d000      	beq.n	800e4e2 <_strtod_l+0x186>
 800e4e0:	e0c0      	b.n	800e664 <_strtod_l+0x308>
 800e4e2:	9b06      	ldr	r3, [sp, #24]
 800e4e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4e6:	4303      	orrs	r3, r0
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	428b      	cmp	r3, r1
 800e4ec:	d08d      	beq.n	800e40a <_strtod_l+0xae>
 800e4ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	931d      	str	r3, [sp, #116]	@ 0x74
 800e4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	2b2b      	cmp	r3, #43	@ 0x2b
 800e4fc:	d070      	beq.n	800e5e0 <_strtod_l+0x284>
 800e4fe:	000c      	movs	r4, r1
 800e500:	2b2d      	cmp	r3, #45	@ 0x2d
 800e502:	d173      	bne.n	800e5ec <_strtod_l+0x290>
 800e504:	2401      	movs	r4, #1
 800e506:	e06c      	b.n	800e5e2 <_strtod_l+0x286>
 800e508:	9908      	ldr	r1, [sp, #32]
 800e50a:	2908      	cmp	r1, #8
 800e50c:	dc09      	bgt.n	800e522 <_strtod_l+0x1c6>
 800e50e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e510:	4351      	muls	r1, r2
 800e512:	185b      	adds	r3, r3, r1
 800e514:	930d      	str	r3, [sp, #52]	@ 0x34
 800e516:	9b08      	ldr	r3, [sp, #32]
 800e518:	3001      	adds	r0, #1
 800e51a:	3301      	adds	r3, #1
 800e51c:	9308      	str	r3, [sp, #32]
 800e51e:	901d      	str	r0, [sp, #116]	@ 0x74
 800e520:	e7c3      	b.n	800e4aa <_strtod_l+0x14e>
 800e522:	4355      	muls	r5, r2
 800e524:	195d      	adds	r5, r3, r5
 800e526:	e7f6      	b.n	800e516 <_strtod_l+0x1ba>
 800e528:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	921d      	str	r2, [sp, #116]	@ 0x74
 800e52e:	9a08      	ldr	r2, [sp, #32]
 800e530:	785b      	ldrb	r3, [r3, #1]
 800e532:	2a00      	cmp	r2, #0
 800e534:	d03a      	beq.n	800e5ac <_strtod_l+0x250>
 800e536:	900e      	str	r0, [sp, #56]	@ 0x38
 800e538:	9206      	str	r2, [sp, #24]
 800e53a:	001a      	movs	r2, r3
 800e53c:	3a30      	subs	r2, #48	@ 0x30
 800e53e:	2a09      	cmp	r2, #9
 800e540:	d912      	bls.n	800e568 <_strtod_l+0x20c>
 800e542:	2201      	movs	r2, #1
 800e544:	4694      	mov	ip, r2
 800e546:	e7c3      	b.n	800e4d0 <_strtod_l+0x174>
 800e548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e54a:	3001      	adds	r0, #1
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	921d      	str	r2, [sp, #116]	@ 0x74
 800e550:	785b      	ldrb	r3, [r3, #1]
 800e552:	2b30      	cmp	r3, #48	@ 0x30
 800e554:	d0f8      	beq.n	800e548 <_strtod_l+0x1ec>
 800e556:	001a      	movs	r2, r3
 800e558:	3a31      	subs	r2, #49	@ 0x31
 800e55a:	2a08      	cmp	r2, #8
 800e55c:	d83b      	bhi.n	800e5d6 <_strtod_l+0x27a>
 800e55e:	900e      	str	r0, [sp, #56]	@ 0x38
 800e560:	2000      	movs	r0, #0
 800e562:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e564:	9006      	str	r0, [sp, #24]
 800e566:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e568:	001a      	movs	r2, r3
 800e56a:	1c41      	adds	r1, r0, #1
 800e56c:	3a30      	subs	r2, #48	@ 0x30
 800e56e:	2b30      	cmp	r3, #48	@ 0x30
 800e570:	d016      	beq.n	800e5a0 <_strtod_l+0x244>
 800e572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e574:	185b      	adds	r3, r3, r1
 800e576:	930e      	str	r3, [sp, #56]	@ 0x38
 800e578:	9b06      	ldr	r3, [sp, #24]
 800e57a:	210a      	movs	r1, #10
 800e57c:	469c      	mov	ip, r3
 800e57e:	4484      	add	ip, r0
 800e580:	459c      	cmp	ip, r3
 800e582:	d115      	bne.n	800e5b0 <_strtod_l+0x254>
 800e584:	9906      	ldr	r1, [sp, #24]
 800e586:	9b06      	ldr	r3, [sp, #24]
 800e588:	3101      	adds	r1, #1
 800e58a:	1809      	adds	r1, r1, r0
 800e58c:	181b      	adds	r3, r3, r0
 800e58e:	9106      	str	r1, [sp, #24]
 800e590:	2b08      	cmp	r3, #8
 800e592:	dc19      	bgt.n	800e5c8 <_strtod_l+0x26c>
 800e594:	230a      	movs	r3, #10
 800e596:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e598:	434b      	muls	r3, r1
 800e59a:	2100      	movs	r1, #0
 800e59c:	18d3      	adds	r3, r2, r3
 800e59e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e5a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5a2:	0008      	movs	r0, r1
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	921d      	str	r2, [sp, #116]	@ 0x74
 800e5a8:	785b      	ldrb	r3, [r3, #1]
 800e5aa:	e7c6      	b.n	800e53a <_strtod_l+0x1de>
 800e5ac:	9808      	ldr	r0, [sp, #32]
 800e5ae:	e7d0      	b.n	800e552 <_strtod_l+0x1f6>
 800e5b0:	1c5c      	adds	r4, r3, #1
 800e5b2:	2b08      	cmp	r3, #8
 800e5b4:	dc04      	bgt.n	800e5c0 <_strtod_l+0x264>
 800e5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5b8:	434b      	muls	r3, r1
 800e5ba:	930d      	str	r3, [sp, #52]	@ 0x34
 800e5bc:	0023      	movs	r3, r4
 800e5be:	e7df      	b.n	800e580 <_strtod_l+0x224>
 800e5c0:	2c10      	cmp	r4, #16
 800e5c2:	dcfb      	bgt.n	800e5bc <_strtod_l+0x260>
 800e5c4:	434d      	muls	r5, r1
 800e5c6:	e7f9      	b.n	800e5bc <_strtod_l+0x260>
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	2b0f      	cmp	r3, #15
 800e5cc:	dce8      	bgt.n	800e5a0 <_strtod_l+0x244>
 800e5ce:	230a      	movs	r3, #10
 800e5d0:	435d      	muls	r5, r3
 800e5d2:	1955      	adds	r5, r2, r5
 800e5d4:	e7e4      	b.n	800e5a0 <_strtod_l+0x244>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5da:	9206      	str	r2, [sp, #24]
 800e5dc:	3201      	adds	r2, #1
 800e5de:	e7b1      	b.n	800e544 <_strtod_l+0x1e8>
 800e5e0:	2400      	movs	r4, #0
 800e5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e4:	3302      	adds	r3, #2
 800e5e6:	931d      	str	r3, [sp, #116]	@ 0x74
 800e5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ea:	789b      	ldrb	r3, [r3, #2]
 800e5ec:	001a      	movs	r2, r3
 800e5ee:	3a30      	subs	r2, #48	@ 0x30
 800e5f0:	2a09      	cmp	r2, #9
 800e5f2:	d913      	bls.n	800e61c <_strtod_l+0x2c0>
 800e5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5f6:	921d      	str	r2, [sp, #116]	@ 0x74
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	e032      	b.n	800e662 <_strtod_l+0x306>
 800e5fc:	08010b50 	.word	0x08010b50
 800e600:	7ff00000 	.word	0x7ff00000
 800e604:	ffefffff 	.word	0xffefffff
 800e608:	00000433 	.word	0x00000433
 800e60c:	7fffffff 	.word	0x7fffffff
 800e610:	08010b38 	.word	0x08010b38
 800e614:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	921d      	str	r2, [sp, #116]	@ 0x74
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b30      	cmp	r3, #48	@ 0x30
 800e61e:	d0f9      	beq.n	800e614 <_strtod_l+0x2b8>
 800e620:	2200      	movs	r2, #0
 800e622:	9207      	str	r2, [sp, #28]
 800e624:	001a      	movs	r2, r3
 800e626:	3a31      	subs	r2, #49	@ 0x31
 800e628:	2a08      	cmp	r2, #8
 800e62a:	d81b      	bhi.n	800e664 <_strtod_l+0x308>
 800e62c:	3b30      	subs	r3, #48	@ 0x30
 800e62e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e630:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e632:	9307      	str	r3, [sp, #28]
 800e634:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e636:	1c59      	adds	r1, r3, #1
 800e638:	911d      	str	r1, [sp, #116]	@ 0x74
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	001a      	movs	r2, r3
 800e63e:	3a30      	subs	r2, #48	@ 0x30
 800e640:	2a09      	cmp	r2, #9
 800e642:	d93a      	bls.n	800e6ba <_strtod_l+0x35e>
 800e644:	9a07      	ldr	r2, [sp, #28]
 800e646:	1a8a      	subs	r2, r1, r2
 800e648:	49b4      	ldr	r1, [pc, #720]	@ (800e91c <_strtod_l+0x5c0>)
 800e64a:	9107      	str	r1, [sp, #28]
 800e64c:	2a08      	cmp	r2, #8
 800e64e:	dc04      	bgt.n	800e65a <_strtod_l+0x2fe>
 800e650:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e652:	9207      	str	r2, [sp, #28]
 800e654:	428a      	cmp	r2, r1
 800e656:	dd00      	ble.n	800e65a <_strtod_l+0x2fe>
 800e658:	9107      	str	r1, [sp, #28]
 800e65a:	2c00      	cmp	r4, #0
 800e65c:	d002      	beq.n	800e664 <_strtod_l+0x308>
 800e65e:	9a07      	ldr	r2, [sp, #28]
 800e660:	4252      	negs	r2, r2
 800e662:	9207      	str	r2, [sp, #28]
 800e664:	9a06      	ldr	r2, [sp, #24]
 800e666:	2a00      	cmp	r2, #0
 800e668:	d14d      	bne.n	800e706 <_strtod_l+0x3aa>
 800e66a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e66c:	4310      	orrs	r0, r2
 800e66e:	d000      	beq.n	800e672 <_strtod_l+0x316>
 800e670:	e6af      	b.n	800e3d2 <_strtod_l+0x76>
 800e672:	4662      	mov	r2, ip
 800e674:	2a00      	cmp	r2, #0
 800e676:	d000      	beq.n	800e67a <_strtod_l+0x31e>
 800e678:	e6c7      	b.n	800e40a <_strtod_l+0xae>
 800e67a:	2b69      	cmp	r3, #105	@ 0x69
 800e67c:	d027      	beq.n	800e6ce <_strtod_l+0x372>
 800e67e:	dc23      	bgt.n	800e6c8 <_strtod_l+0x36c>
 800e680:	2b49      	cmp	r3, #73	@ 0x49
 800e682:	d024      	beq.n	800e6ce <_strtod_l+0x372>
 800e684:	2b4e      	cmp	r3, #78	@ 0x4e
 800e686:	d000      	beq.n	800e68a <_strtod_l+0x32e>
 800e688:	e6bf      	b.n	800e40a <_strtod_l+0xae>
 800e68a:	49a5      	ldr	r1, [pc, #660]	@ (800e920 <_strtod_l+0x5c4>)
 800e68c:	a81d      	add	r0, sp, #116	@ 0x74
 800e68e:	f001 fa2d 	bl	800faec <__match>
 800e692:	2800      	cmp	r0, #0
 800e694:	d100      	bne.n	800e698 <_strtod_l+0x33c>
 800e696:	e6b8      	b.n	800e40a <_strtod_l+0xae>
 800e698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b28      	cmp	r3, #40	@ 0x28
 800e69e:	d12c      	bne.n	800e6fa <_strtod_l+0x39e>
 800e6a0:	49a0      	ldr	r1, [pc, #640]	@ (800e924 <_strtod_l+0x5c8>)
 800e6a2:	aa20      	add	r2, sp, #128	@ 0x80
 800e6a4:	a81d      	add	r0, sp, #116	@ 0x74
 800e6a6:	f001 fa35 	bl	800fb14 <__hexnan>
 800e6aa:	2805      	cmp	r0, #5
 800e6ac:	d125      	bne.n	800e6fa <_strtod_l+0x39e>
 800e6ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6b0:	4a9d      	ldr	r2, [pc, #628]	@ (800e928 <_strtod_l+0x5cc>)
 800e6b2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	0017      	movs	r7, r2
 800e6b8:	e68b      	b.n	800e3d2 <_strtod_l+0x76>
 800e6ba:	220a      	movs	r2, #10
 800e6bc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e6be:	434a      	muls	r2, r1
 800e6c0:	18d2      	adds	r2, r2, r3
 800e6c2:	3a30      	subs	r2, #48	@ 0x30
 800e6c4:	9210      	str	r2, [sp, #64]	@ 0x40
 800e6c6:	e7b5      	b.n	800e634 <_strtod_l+0x2d8>
 800e6c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e6ca:	d0de      	beq.n	800e68a <_strtod_l+0x32e>
 800e6cc:	e69d      	b.n	800e40a <_strtod_l+0xae>
 800e6ce:	4997      	ldr	r1, [pc, #604]	@ (800e92c <_strtod_l+0x5d0>)
 800e6d0:	a81d      	add	r0, sp, #116	@ 0x74
 800e6d2:	f001 fa0b 	bl	800faec <__match>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d100      	bne.n	800e6dc <_strtod_l+0x380>
 800e6da:	e696      	b.n	800e40a <_strtod_l+0xae>
 800e6dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6de:	4994      	ldr	r1, [pc, #592]	@ (800e930 <_strtod_l+0x5d4>)
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	a81d      	add	r0, sp, #116	@ 0x74
 800e6e4:	931d      	str	r3, [sp, #116]	@ 0x74
 800e6e6:	f001 fa01 	bl	800faec <__match>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d102      	bne.n	800e6f4 <_strtod_l+0x398>
 800e6ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	931d      	str	r3, [sp, #116]	@ 0x74
 800e6f4:	2600      	movs	r6, #0
 800e6f6:	4f8c      	ldr	r7, [pc, #560]	@ (800e928 <_strtod_l+0x5cc>)
 800e6f8:	e66b      	b.n	800e3d2 <_strtod_l+0x76>
 800e6fa:	488e      	ldr	r0, [pc, #568]	@ (800e934 <_strtod_l+0x5d8>)
 800e6fc:	f000 ff06 	bl	800f50c <nan>
 800e700:	0006      	movs	r6, r0
 800e702:	000f      	movs	r7, r1
 800e704:	e665      	b.n	800e3d2 <_strtod_l+0x76>
 800e706:	9b07      	ldr	r3, [sp, #28]
 800e708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e70a:	1a9b      	subs	r3, r3, r2
 800e70c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e70e:	9b08      	ldr	r3, [sp, #32]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <_strtod_l+0x3bc>
 800e714:	9b06      	ldr	r3, [sp, #24]
 800e716:	9308      	str	r3, [sp, #32]
 800e718:	9c06      	ldr	r4, [sp, #24]
 800e71a:	2c10      	cmp	r4, #16
 800e71c:	dd00      	ble.n	800e720 <_strtod_l+0x3c4>
 800e71e:	2410      	movs	r4, #16
 800e720:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e722:	f7f4 fe31 	bl	8003388 <__aeabi_ui2d>
 800e726:	9b06      	ldr	r3, [sp, #24]
 800e728:	0006      	movs	r6, r0
 800e72a:	000f      	movs	r7, r1
 800e72c:	2b09      	cmp	r3, #9
 800e72e:	dc13      	bgt.n	800e758 <_strtod_l+0x3fc>
 800e730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e732:	2b00      	cmp	r3, #0
 800e734:	d100      	bne.n	800e738 <_strtod_l+0x3dc>
 800e736:	e64c      	b.n	800e3d2 <_strtod_l+0x76>
 800e738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	dc00      	bgt.n	800e740 <_strtod_l+0x3e4>
 800e73e:	e07e      	b.n	800e83e <_strtod_l+0x4e2>
 800e740:	2b16      	cmp	r3, #22
 800e742:	dc63      	bgt.n	800e80c <_strtod_l+0x4b0>
 800e744:	497c      	ldr	r1, [pc, #496]	@ (800e938 <_strtod_l+0x5dc>)
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	18c9      	adds	r1, r1, r3
 800e74a:	0032      	movs	r2, r6
 800e74c:	6808      	ldr	r0, [r1, #0]
 800e74e:	6849      	ldr	r1, [r1, #4]
 800e750:	003b      	movs	r3, r7
 800e752:	f7f3 ff29 	bl	80025a8 <__aeabi_dmul>
 800e756:	e7d3      	b.n	800e700 <_strtod_l+0x3a4>
 800e758:	0022      	movs	r2, r4
 800e75a:	4b77      	ldr	r3, [pc, #476]	@ (800e938 <_strtod_l+0x5dc>)
 800e75c:	3a09      	subs	r2, #9
 800e75e:	00d2      	lsls	r2, r2, #3
 800e760:	189b      	adds	r3, r3, r2
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f7f3 ff1f 	bl	80025a8 <__aeabi_dmul>
 800e76a:	0006      	movs	r6, r0
 800e76c:	0028      	movs	r0, r5
 800e76e:	000f      	movs	r7, r1
 800e770:	f7f4 fe0a 	bl	8003388 <__aeabi_ui2d>
 800e774:	000b      	movs	r3, r1
 800e776:	0002      	movs	r2, r0
 800e778:	0039      	movs	r1, r7
 800e77a:	0030      	movs	r0, r6
 800e77c:	f7f2 ff6c 	bl	8001658 <__aeabi_dadd>
 800e780:	9b06      	ldr	r3, [sp, #24]
 800e782:	0006      	movs	r6, r0
 800e784:	000f      	movs	r7, r1
 800e786:	2b0f      	cmp	r3, #15
 800e788:	ddd2      	ble.n	800e730 <_strtod_l+0x3d4>
 800e78a:	9b06      	ldr	r3, [sp, #24]
 800e78c:	1b1c      	subs	r4, r3, r4
 800e78e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e790:	18e4      	adds	r4, r4, r3
 800e792:	2c00      	cmp	r4, #0
 800e794:	dc00      	bgt.n	800e798 <_strtod_l+0x43c>
 800e796:	e09b      	b.n	800e8d0 <_strtod_l+0x574>
 800e798:	220f      	movs	r2, #15
 800e79a:	0023      	movs	r3, r4
 800e79c:	4013      	ands	r3, r2
 800e79e:	4214      	tst	r4, r2
 800e7a0:	d00a      	beq.n	800e7b8 <_strtod_l+0x45c>
 800e7a2:	4965      	ldr	r1, [pc, #404]	@ (800e938 <_strtod_l+0x5dc>)
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	18c9      	adds	r1, r1, r3
 800e7a8:	0032      	movs	r2, r6
 800e7aa:	6808      	ldr	r0, [r1, #0]
 800e7ac:	6849      	ldr	r1, [r1, #4]
 800e7ae:	003b      	movs	r3, r7
 800e7b0:	f7f3 fefa 	bl	80025a8 <__aeabi_dmul>
 800e7b4:	0006      	movs	r6, r0
 800e7b6:	000f      	movs	r7, r1
 800e7b8:	230f      	movs	r3, #15
 800e7ba:	439c      	bics	r4, r3
 800e7bc:	d073      	beq.n	800e8a6 <_strtod_l+0x54a>
 800e7be:	3326      	adds	r3, #38	@ 0x26
 800e7c0:	33ff      	adds	r3, #255	@ 0xff
 800e7c2:	429c      	cmp	r4, r3
 800e7c4:	dd4b      	ble.n	800e85e <_strtod_l+0x502>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	9306      	str	r3, [sp, #24]
 800e7ca:	9307      	str	r3, [sp, #28]
 800e7cc:	930d      	str	r3, [sp, #52]	@ 0x34
 800e7ce:	9308      	str	r3, [sp, #32]
 800e7d0:	2322      	movs	r3, #34	@ 0x22
 800e7d2:	2600      	movs	r6, #0
 800e7d4:	9a05      	ldr	r2, [sp, #20]
 800e7d6:	4f54      	ldr	r7, [pc, #336]	@ (800e928 <_strtod_l+0x5cc>)
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7dc:	42b3      	cmp	r3, r6
 800e7de:	d100      	bne.n	800e7e2 <_strtod_l+0x486>
 800e7e0:	e5f7      	b.n	800e3d2 <_strtod_l+0x76>
 800e7e2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	f7ff f91b 	bl	800da20 <_Bfree>
 800e7ea:	9908      	ldr	r1, [sp, #32]
 800e7ec:	9805      	ldr	r0, [sp, #20]
 800e7ee:	f7ff f917 	bl	800da20 <_Bfree>
 800e7f2:	9907      	ldr	r1, [sp, #28]
 800e7f4:	9805      	ldr	r0, [sp, #20]
 800e7f6:	f7ff f913 	bl	800da20 <_Bfree>
 800e7fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e7fc:	9805      	ldr	r0, [sp, #20]
 800e7fe:	f7ff f90f 	bl	800da20 <_Bfree>
 800e802:	9906      	ldr	r1, [sp, #24]
 800e804:	9805      	ldr	r0, [sp, #20]
 800e806:	f7ff f90b 	bl	800da20 <_Bfree>
 800e80a:	e5e2      	b.n	800e3d2 <_strtod_l+0x76>
 800e80c:	2325      	movs	r3, #37	@ 0x25
 800e80e:	9a06      	ldr	r2, [sp, #24]
 800e810:	1a9b      	subs	r3, r3, r2
 800e812:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e814:	4293      	cmp	r3, r2
 800e816:	dbb8      	blt.n	800e78a <_strtod_l+0x42e>
 800e818:	240f      	movs	r4, #15
 800e81a:	9b06      	ldr	r3, [sp, #24]
 800e81c:	4d46      	ldr	r5, [pc, #280]	@ (800e938 <_strtod_l+0x5dc>)
 800e81e:	1ae4      	subs	r4, r4, r3
 800e820:	00e1      	lsls	r1, r4, #3
 800e822:	1869      	adds	r1, r5, r1
 800e824:	0032      	movs	r2, r6
 800e826:	6808      	ldr	r0, [r1, #0]
 800e828:	6849      	ldr	r1, [r1, #4]
 800e82a:	003b      	movs	r3, r7
 800e82c:	f7f3 febc 	bl	80025a8 <__aeabi_dmul>
 800e830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e832:	1b1c      	subs	r4, r3, r4
 800e834:	00e4      	lsls	r4, r4, #3
 800e836:	192d      	adds	r5, r5, r4
 800e838:	682a      	ldr	r2, [r5, #0]
 800e83a:	686b      	ldr	r3, [r5, #4]
 800e83c:	e789      	b.n	800e752 <_strtod_l+0x3f6>
 800e83e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e840:	3316      	adds	r3, #22
 800e842:	dba2      	blt.n	800e78a <_strtod_l+0x42e>
 800e844:	9907      	ldr	r1, [sp, #28]
 800e846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e848:	4b3b      	ldr	r3, [pc, #236]	@ (800e938 <_strtod_l+0x5dc>)
 800e84a:	1a52      	subs	r2, r2, r1
 800e84c:	00d2      	lsls	r2, r2, #3
 800e84e:	189b      	adds	r3, r3, r2
 800e850:	0030      	movs	r0, r6
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	0039      	movs	r1, r7
 800e858:	f7f3 fa62 	bl	8001d20 <__aeabi_ddiv>
 800e85c:	e750      	b.n	800e700 <_strtod_l+0x3a4>
 800e85e:	2300      	movs	r3, #0
 800e860:	0030      	movs	r0, r6
 800e862:	0039      	movs	r1, r7
 800e864:	4d35      	ldr	r5, [pc, #212]	@ (800e93c <_strtod_l+0x5e0>)
 800e866:	1124      	asrs	r4, r4, #4
 800e868:	9309      	str	r3, [sp, #36]	@ 0x24
 800e86a:	2c01      	cmp	r4, #1
 800e86c:	dc1e      	bgt.n	800e8ac <_strtod_l+0x550>
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <_strtod_l+0x51a>
 800e872:	0006      	movs	r6, r0
 800e874:	000f      	movs	r7, r1
 800e876:	4b32      	ldr	r3, [pc, #200]	@ (800e940 <_strtod_l+0x5e4>)
 800e878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e87a:	18ff      	adds	r7, r7, r3
 800e87c:	4b2f      	ldr	r3, [pc, #188]	@ (800e93c <_strtod_l+0x5e0>)
 800e87e:	00d5      	lsls	r5, r2, #3
 800e880:	195d      	adds	r5, r3, r5
 800e882:	0032      	movs	r2, r6
 800e884:	6828      	ldr	r0, [r5, #0]
 800e886:	6869      	ldr	r1, [r5, #4]
 800e888:	003b      	movs	r3, r7
 800e88a:	f7f3 fe8d 	bl	80025a8 <__aeabi_dmul>
 800e88e:	4b26      	ldr	r3, [pc, #152]	@ (800e928 <_strtod_l+0x5cc>)
 800e890:	4a2c      	ldr	r2, [pc, #176]	@ (800e944 <_strtod_l+0x5e8>)
 800e892:	0006      	movs	r6, r0
 800e894:	400b      	ands	r3, r1
 800e896:	4293      	cmp	r3, r2
 800e898:	d895      	bhi.n	800e7c6 <_strtod_l+0x46a>
 800e89a:	4a2b      	ldr	r2, [pc, #172]	@ (800e948 <_strtod_l+0x5ec>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d913      	bls.n	800e8c8 <_strtod_l+0x56c>
 800e8a0:	2601      	movs	r6, #1
 800e8a2:	4f2a      	ldr	r7, [pc, #168]	@ (800e94c <_strtod_l+0x5f0>)
 800e8a4:	4276      	negs	r6, r6
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8aa:	e086      	b.n	800e9ba <_strtod_l+0x65e>
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	4214      	tst	r4, r2
 800e8b0:	d004      	beq.n	800e8bc <_strtod_l+0x560>
 800e8b2:	682a      	ldr	r2, [r5, #0]
 800e8b4:	686b      	ldr	r3, [r5, #4]
 800e8b6:	f7f3 fe77 	bl	80025a8 <__aeabi_dmul>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8be:	1064      	asrs	r4, r4, #1
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8c4:	3508      	adds	r5, #8
 800e8c6:	e7d0      	b.n	800e86a <_strtod_l+0x50e>
 800e8c8:	23d4      	movs	r3, #212	@ 0xd4
 800e8ca:	049b      	lsls	r3, r3, #18
 800e8cc:	18cf      	adds	r7, r1, r3
 800e8ce:	e7ea      	b.n	800e8a6 <_strtod_l+0x54a>
 800e8d0:	2c00      	cmp	r4, #0
 800e8d2:	d0e8      	beq.n	800e8a6 <_strtod_l+0x54a>
 800e8d4:	4264      	negs	r4, r4
 800e8d6:	230f      	movs	r3, #15
 800e8d8:	0022      	movs	r2, r4
 800e8da:	401a      	ands	r2, r3
 800e8dc:	421c      	tst	r4, r3
 800e8de:	d00a      	beq.n	800e8f6 <_strtod_l+0x59a>
 800e8e0:	4b15      	ldr	r3, [pc, #84]	@ (800e938 <_strtod_l+0x5dc>)
 800e8e2:	00d2      	lsls	r2, r2, #3
 800e8e4:	189b      	adds	r3, r3, r2
 800e8e6:	0030      	movs	r0, r6
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	0039      	movs	r1, r7
 800e8ee:	f7f3 fa17 	bl	8001d20 <__aeabi_ddiv>
 800e8f2:	0006      	movs	r6, r0
 800e8f4:	000f      	movs	r7, r1
 800e8f6:	1124      	asrs	r4, r4, #4
 800e8f8:	d0d5      	beq.n	800e8a6 <_strtod_l+0x54a>
 800e8fa:	2c1f      	cmp	r4, #31
 800e8fc:	dd28      	ble.n	800e950 <_strtod_l+0x5f4>
 800e8fe:	2300      	movs	r3, #0
 800e900:	9306      	str	r3, [sp, #24]
 800e902:	9307      	str	r3, [sp, #28]
 800e904:	930d      	str	r3, [sp, #52]	@ 0x34
 800e906:	9308      	str	r3, [sp, #32]
 800e908:	2322      	movs	r3, #34	@ 0x22
 800e90a:	9a05      	ldr	r2, [sp, #20]
 800e90c:	2600      	movs	r6, #0
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e912:	2700      	movs	r7, #0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d000      	beq.n	800e91a <_strtod_l+0x5be>
 800e918:	e763      	b.n	800e7e2 <_strtod_l+0x486>
 800e91a:	e55a      	b.n	800e3d2 <_strtod_l+0x76>
 800e91c:	00004e1f 	.word	0x00004e1f
 800e920:	08010925 	.word	0x08010925
 800e924:	08010b3c 	.word	0x08010b3c
 800e928:	7ff00000 	.word	0x7ff00000
 800e92c:	0801091d 	.word	0x0801091d
 800e930:	08010954 	.word	0x08010954
 800e934:	08010ce5 	.word	0x08010ce5
 800e938:	08010a70 	.word	0x08010a70
 800e93c:	08010a48 	.word	0x08010a48
 800e940:	fcb00000 	.word	0xfcb00000
 800e944:	7ca00000 	.word	0x7ca00000
 800e948:	7c900000 	.word	0x7c900000
 800e94c:	7fefffff 	.word	0x7fefffff
 800e950:	2310      	movs	r3, #16
 800e952:	0022      	movs	r2, r4
 800e954:	401a      	ands	r2, r3
 800e956:	9209      	str	r2, [sp, #36]	@ 0x24
 800e958:	421c      	tst	r4, r3
 800e95a:	d001      	beq.n	800e960 <_strtod_l+0x604>
 800e95c:	335a      	adds	r3, #90	@ 0x5a
 800e95e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e960:	0030      	movs	r0, r6
 800e962:	0039      	movs	r1, r7
 800e964:	2300      	movs	r3, #0
 800e966:	4dbf      	ldr	r5, [pc, #764]	@ (800ec64 <_strtod_l+0x908>)
 800e968:	2201      	movs	r2, #1
 800e96a:	4214      	tst	r4, r2
 800e96c:	d004      	beq.n	800e978 <_strtod_l+0x61c>
 800e96e:	682a      	ldr	r2, [r5, #0]
 800e970:	686b      	ldr	r3, [r5, #4]
 800e972:	f7f3 fe19 	bl	80025a8 <__aeabi_dmul>
 800e976:	2301      	movs	r3, #1
 800e978:	1064      	asrs	r4, r4, #1
 800e97a:	3508      	adds	r5, #8
 800e97c:	2c00      	cmp	r4, #0
 800e97e:	d1f3      	bne.n	800e968 <_strtod_l+0x60c>
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <_strtod_l+0x62c>
 800e984:	0006      	movs	r6, r0
 800e986:	000f      	movs	r7, r1
 800e988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00d      	beq.n	800e9aa <_strtod_l+0x64e>
 800e98e:	236b      	movs	r3, #107	@ 0x6b
 800e990:	007a      	lsls	r2, r7, #1
 800e992:	0d52      	lsrs	r2, r2, #21
 800e994:	0039      	movs	r1, r7
 800e996:	1a9b      	subs	r3, r3, r2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dd06      	ble.n	800e9aa <_strtod_l+0x64e>
 800e99c:	2b1f      	cmp	r3, #31
 800e99e:	dd5a      	ble.n	800ea56 <_strtod_l+0x6fa>
 800e9a0:	2600      	movs	r6, #0
 800e9a2:	2b34      	cmp	r3, #52	@ 0x34
 800e9a4:	dd50      	ble.n	800ea48 <_strtod_l+0x6ec>
 800e9a6:	27dc      	movs	r7, #220	@ 0xdc
 800e9a8:	04bf      	lsls	r7, r7, #18
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	0030      	movs	r0, r6
 800e9b0:	0039      	movs	r1, r7
 800e9b2:	f7f1 fd4b 	bl	800044c <__aeabi_dcmpeq>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d1a1      	bne.n	800e8fe <_strtod_l+0x5a2>
 800e9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9bc:	9a08      	ldr	r2, [sp, #32]
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e9c2:	9b06      	ldr	r3, [sp, #24]
 800e9c4:	9805      	ldr	r0, [sp, #20]
 800e9c6:	f7ff f893 	bl	800daf0 <__s2b>
 800e9ca:	900d      	str	r0, [sp, #52]	@ 0x34
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d100      	bne.n	800e9d2 <_strtod_l+0x676>
 800e9d0:	e6f9      	b.n	800e7c6 <_strtod_l+0x46a>
 800e9d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9d4:	9907      	ldr	r1, [sp, #28]
 800e9d6:	17da      	asrs	r2, r3, #31
 800e9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9da:	1a5b      	subs	r3, r3, r1
 800e9dc:	401a      	ands	r2, r3
 800e9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e9e2:	43db      	mvns	r3, r3
 800e9e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9e6:	17db      	asrs	r3, r3, #31
 800e9e8:	401a      	ands	r2, r3
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800e9ee:	9306      	str	r3, [sp, #24]
 800e9f0:	9307      	str	r3, [sp, #28]
 800e9f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9f4:	9805      	ldr	r0, [sp, #20]
 800e9f6:	6859      	ldr	r1, [r3, #4]
 800e9f8:	f7fe ffce 	bl	800d998 <_Balloc>
 800e9fc:	9008      	str	r0, [sp, #32]
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d100      	bne.n	800ea04 <_strtod_l+0x6a8>
 800ea02:	e6e5      	b.n	800e7d0 <_strtod_l+0x474>
 800ea04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea06:	300c      	adds	r0, #12
 800ea08:	0019      	movs	r1, r3
 800ea0a:	691a      	ldr	r2, [r3, #16]
 800ea0c:	310c      	adds	r1, #12
 800ea0e:	3202      	adds	r2, #2
 800ea10:	0092      	lsls	r2, r2, #2
 800ea12:	f000 fd71 	bl	800f4f8 <memcpy>
 800ea16:	ab20      	add	r3, sp, #128	@ 0x80
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	0032      	movs	r2, r6
 800ea20:	003b      	movs	r3, r7
 800ea22:	9805      	ldr	r0, [sp, #20]
 800ea24:	9610      	str	r6, [sp, #64]	@ 0x40
 800ea26:	9711      	str	r7, [sp, #68]	@ 0x44
 800ea28:	f7ff fbb2 	bl	800e190 <__d2b>
 800ea2c:	901e      	str	r0, [sp, #120]	@ 0x78
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d100      	bne.n	800ea34 <_strtod_l+0x6d8>
 800ea32:	e6cd      	b.n	800e7d0 <_strtod_l+0x474>
 800ea34:	2101      	movs	r1, #1
 800ea36:	9805      	ldr	r0, [sp, #20]
 800ea38:	f7ff f8f6 	bl	800dc28 <__i2b>
 800ea3c:	9007      	str	r0, [sp, #28]
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d10e      	bne.n	800ea60 <_strtod_l+0x704>
 800ea42:	2300      	movs	r3, #0
 800ea44:	9307      	str	r3, [sp, #28]
 800ea46:	e6c3      	b.n	800e7d0 <_strtod_l+0x474>
 800ea48:	234b      	movs	r3, #75	@ 0x4b
 800ea4a:	1a9a      	subs	r2, r3, r2
 800ea4c:	3b4c      	subs	r3, #76	@ 0x4c
 800ea4e:	4093      	lsls	r3, r2
 800ea50:	4019      	ands	r1, r3
 800ea52:	000f      	movs	r7, r1
 800ea54:	e7a9      	b.n	800e9aa <_strtod_l+0x64e>
 800ea56:	2201      	movs	r2, #1
 800ea58:	4252      	negs	r2, r2
 800ea5a:	409a      	lsls	r2, r3
 800ea5c:	4016      	ands	r6, r2
 800ea5e:	e7a4      	b.n	800e9aa <_strtod_l+0x64e>
 800ea60:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ea62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea64:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800ea66:	1ad4      	subs	r4, r2, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	db01      	blt.n	800ea70 <_strtod_l+0x714>
 800ea6c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800ea6e:	195d      	adds	r5, r3, r5
 800ea70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea74:	1a5b      	subs	r3, r3, r1
 800ea76:	2136      	movs	r1, #54	@ 0x36
 800ea78:	189b      	adds	r3, r3, r2
 800ea7a:	1a8a      	subs	r2, r1, r2
 800ea7c:	497a      	ldr	r1, [pc, #488]	@ (800ec68 <_strtod_l+0x90c>)
 800ea7e:	2001      	movs	r0, #1
 800ea80:	468c      	mov	ip, r1
 800ea82:	2100      	movs	r1, #0
 800ea84:	3b01      	subs	r3, #1
 800ea86:	9116      	str	r1, [sp, #88]	@ 0x58
 800ea88:	9014      	str	r0, [sp, #80]	@ 0x50
 800ea8a:	4563      	cmp	r3, ip
 800ea8c:	da06      	bge.n	800ea9c <_strtod_l+0x740>
 800ea8e:	4661      	mov	r1, ip
 800ea90:	1ac9      	subs	r1, r1, r3
 800ea92:	1a52      	subs	r2, r2, r1
 800ea94:	291f      	cmp	r1, #31
 800ea96:	dc3f      	bgt.n	800eb18 <_strtod_l+0x7bc>
 800ea98:	4088      	lsls	r0, r1
 800ea9a:	9014      	str	r0, [sp, #80]	@ 0x50
 800ea9c:	18ab      	adds	r3, r5, r2
 800ea9e:	930e      	str	r3, [sp, #56]	@ 0x38
 800eaa0:	18a4      	adds	r4, r4, r2
 800eaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaa6:	191c      	adds	r4, r3, r4
 800eaa8:	002b      	movs	r3, r5
 800eaaa:	4295      	cmp	r5, r2
 800eaac:	dd00      	ble.n	800eab0 <_strtod_l+0x754>
 800eaae:	0013      	movs	r3, r2
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	dd00      	ble.n	800eab6 <_strtod_l+0x75a>
 800eab4:	0023      	movs	r3, r4
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	dd04      	ble.n	800eac4 <_strtod_l+0x768>
 800eaba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eabc:	1ae4      	subs	r4, r4, r3
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eac2:	1aed      	subs	r5, r5, r3
 800eac4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	dd16      	ble.n	800eaf8 <_strtod_l+0x79c>
 800eaca:	001a      	movs	r2, r3
 800eacc:	9907      	ldr	r1, [sp, #28]
 800eace:	9805      	ldr	r0, [sp, #20]
 800ead0:	f7ff f974 	bl	800ddbc <__pow5mult>
 800ead4:	9007      	str	r0, [sp, #28]
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d0b3      	beq.n	800ea42 <_strtod_l+0x6e6>
 800eada:	0001      	movs	r1, r0
 800eadc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800eade:	9805      	ldr	r0, [sp, #20]
 800eae0:	f7ff f8ba 	bl	800dc58 <__multiply>
 800eae4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d100      	bne.n	800eaec <_strtod_l+0x790>
 800eaea:	e671      	b.n	800e7d0 <_strtod_l+0x474>
 800eaec:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eaee:	9805      	ldr	r0, [sp, #20]
 800eaf0:	f7fe ff96 	bl	800da20 <_Bfree>
 800eaf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eaf6:	931e      	str	r3, [sp, #120]	@ 0x78
 800eaf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	dc12      	bgt.n	800eb24 <_strtod_l+0x7c8>
 800eafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dd18      	ble.n	800eb36 <_strtod_l+0x7da>
 800eb04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb06:	9908      	ldr	r1, [sp, #32]
 800eb08:	9805      	ldr	r0, [sp, #20]
 800eb0a:	f7ff f957 	bl	800ddbc <__pow5mult>
 800eb0e:	9008      	str	r0, [sp, #32]
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d110      	bne.n	800eb36 <_strtod_l+0x7da>
 800eb14:	2300      	movs	r3, #0
 800eb16:	e65a      	b.n	800e7ce <_strtod_l+0x472>
 800eb18:	4954      	ldr	r1, [pc, #336]	@ (800ec6c <_strtod_l+0x910>)
 800eb1a:	1acb      	subs	r3, r1, r3
 800eb1c:	0001      	movs	r1, r0
 800eb1e:	4099      	lsls	r1, r3
 800eb20:	9116      	str	r1, [sp, #88]	@ 0x58
 800eb22:	e7ba      	b.n	800ea9a <_strtod_l+0x73e>
 800eb24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb26:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eb28:	9805      	ldr	r0, [sp, #20]
 800eb2a:	f7ff f9a3 	bl	800de74 <__lshift>
 800eb2e:	901e      	str	r0, [sp, #120]	@ 0x78
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d1e4      	bne.n	800eafe <_strtod_l+0x7a2>
 800eb34:	e64c      	b.n	800e7d0 <_strtod_l+0x474>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	dd07      	ble.n	800eb4a <_strtod_l+0x7ee>
 800eb3a:	0022      	movs	r2, r4
 800eb3c:	9908      	ldr	r1, [sp, #32]
 800eb3e:	9805      	ldr	r0, [sp, #20]
 800eb40:	f7ff f998 	bl	800de74 <__lshift>
 800eb44:	9008      	str	r0, [sp, #32]
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0e4      	beq.n	800eb14 <_strtod_l+0x7b8>
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	dd08      	ble.n	800eb60 <_strtod_l+0x804>
 800eb4e:	002a      	movs	r2, r5
 800eb50:	9907      	ldr	r1, [sp, #28]
 800eb52:	9805      	ldr	r0, [sp, #20]
 800eb54:	f7ff f98e 	bl	800de74 <__lshift>
 800eb58:	9007      	str	r0, [sp, #28]
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d100      	bne.n	800eb60 <_strtod_l+0x804>
 800eb5e:	e637      	b.n	800e7d0 <_strtod_l+0x474>
 800eb60:	9a08      	ldr	r2, [sp, #32]
 800eb62:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eb64:	9805      	ldr	r0, [sp, #20]
 800eb66:	f7ff fa0d 	bl	800df84 <__mdiff>
 800eb6a:	9006      	str	r0, [sp, #24]
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d100      	bne.n	800eb72 <_strtod_l+0x816>
 800eb70:	e62e      	b.n	800e7d0 <_strtod_l+0x474>
 800eb72:	68c3      	ldr	r3, [r0, #12]
 800eb74:	9907      	ldr	r1, [sp, #28]
 800eb76:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60c3      	str	r3, [r0, #12]
 800eb7c:	f7ff f9e6 	bl	800df4c <__mcmp>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	da3b      	bge.n	800ebfc <_strtod_l+0x8a0>
 800eb84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb86:	4333      	orrs	r3, r6
 800eb88:	d167      	bne.n	800ec5a <_strtod_l+0x8fe>
 800eb8a:	033b      	lsls	r3, r7, #12
 800eb8c:	d165      	bne.n	800ec5a <_strtod_l+0x8fe>
 800eb8e:	22d6      	movs	r2, #214	@ 0xd6
 800eb90:	4b37      	ldr	r3, [pc, #220]	@ (800ec70 <_strtod_l+0x914>)
 800eb92:	04d2      	lsls	r2, r2, #19
 800eb94:	403b      	ands	r3, r7
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d95f      	bls.n	800ec5a <_strtod_l+0x8fe>
 800eb9a:	9b06      	ldr	r3, [sp, #24]
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d103      	bne.n	800ebaa <_strtod_l+0x84e>
 800eba2:	9b06      	ldr	r3, [sp, #24]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	dd57      	ble.n	800ec5a <_strtod_l+0x8fe>
 800ebaa:	9906      	ldr	r1, [sp, #24]
 800ebac:	2201      	movs	r2, #1
 800ebae:	9805      	ldr	r0, [sp, #20]
 800ebb0:	f7ff f960 	bl	800de74 <__lshift>
 800ebb4:	9907      	ldr	r1, [sp, #28]
 800ebb6:	9006      	str	r0, [sp, #24]
 800ebb8:	f7ff f9c8 	bl	800df4c <__mcmp>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	dd4c      	ble.n	800ec5a <_strtod_l+0x8fe>
 800ebc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ec70 <_strtod_l+0x914>)
 800ebc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebc4:	403b      	ands	r3, r7
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	d074      	beq.n	800ecb4 <_strtod_l+0x958>
 800ebca:	22d6      	movs	r2, #214	@ 0xd6
 800ebcc:	04d2      	lsls	r2, r2, #19
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d870      	bhi.n	800ecb4 <_strtod_l+0x958>
 800ebd2:	22dc      	movs	r2, #220	@ 0xdc
 800ebd4:	0492      	lsls	r2, r2, #18
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d800      	bhi.n	800ebdc <_strtod_l+0x880>
 800ebda:	e695      	b.n	800e908 <_strtod_l+0x5ac>
 800ebdc:	0030      	movs	r0, r6
 800ebde:	0039      	movs	r1, r7
 800ebe0:	4b24      	ldr	r3, [pc, #144]	@ (800ec74 <_strtod_l+0x918>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f7f3 fce0 	bl	80025a8 <__aeabi_dmul>
 800ebe8:	4b21      	ldr	r3, [pc, #132]	@ (800ec70 <_strtod_l+0x914>)
 800ebea:	0006      	movs	r6, r0
 800ebec:	000f      	movs	r7, r1
 800ebee:	420b      	tst	r3, r1
 800ebf0:	d000      	beq.n	800ebf4 <_strtod_l+0x898>
 800ebf2:	e5f6      	b.n	800e7e2 <_strtod_l+0x486>
 800ebf4:	2322      	movs	r3, #34	@ 0x22
 800ebf6:	9a05      	ldr	r2, [sp, #20]
 800ebf8:	6013      	str	r3, [r2, #0]
 800ebfa:	e5f2      	b.n	800e7e2 <_strtod_l+0x486>
 800ebfc:	970e      	str	r7, [sp, #56]	@ 0x38
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d175      	bne.n	800ecee <_strtod_l+0x992>
 800ec02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ec04:	033b      	lsls	r3, r7, #12
 800ec06:	0b1b      	lsrs	r3, r3, #12
 800ec08:	2a00      	cmp	r2, #0
 800ec0a:	d039      	beq.n	800ec80 <_strtod_l+0x924>
 800ec0c:	4a1a      	ldr	r2, [pc, #104]	@ (800ec78 <_strtod_l+0x91c>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d138      	bne.n	800ec84 <_strtod_l+0x928>
 800ec12:	2101      	movs	r1, #1
 800ec14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec16:	4249      	negs	r1, r1
 800ec18:	0032      	movs	r2, r6
 800ec1a:	0008      	movs	r0, r1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <_strtod_l+0x8dc>
 800ec20:	24d4      	movs	r4, #212	@ 0xd4
 800ec22:	4b13      	ldr	r3, [pc, #76]	@ (800ec70 <_strtod_l+0x914>)
 800ec24:	0008      	movs	r0, r1
 800ec26:	403b      	ands	r3, r7
 800ec28:	04e4      	lsls	r4, r4, #19
 800ec2a:	42a3      	cmp	r3, r4
 800ec2c:	d804      	bhi.n	800ec38 <_strtod_l+0x8dc>
 800ec2e:	306c      	adds	r0, #108	@ 0x6c
 800ec30:	0d1b      	lsrs	r3, r3, #20
 800ec32:	1ac3      	subs	r3, r0, r3
 800ec34:	4099      	lsls	r1, r3
 800ec36:	0008      	movs	r0, r1
 800ec38:	4282      	cmp	r2, r0
 800ec3a:	d123      	bne.n	800ec84 <_strtod_l+0x928>
 800ec3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec7c <_strtod_l+0x920>)
 800ec3e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ec40:	4299      	cmp	r1, r3
 800ec42:	d102      	bne.n	800ec4a <_strtod_l+0x8ee>
 800ec44:	3201      	adds	r2, #1
 800ec46:	d100      	bne.n	800ec4a <_strtod_l+0x8ee>
 800ec48:	e5c2      	b.n	800e7d0 <_strtod_l+0x474>
 800ec4a:	4b09      	ldr	r3, [pc, #36]	@ (800ec70 <_strtod_l+0x914>)
 800ec4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec4e:	2600      	movs	r6, #0
 800ec50:	401a      	ands	r2, r3
 800ec52:	0013      	movs	r3, r2
 800ec54:	2280      	movs	r2, #128	@ 0x80
 800ec56:	0352      	lsls	r2, r2, #13
 800ec58:	189f      	adds	r7, r3, r2
 800ec5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1bd      	bne.n	800ebdc <_strtod_l+0x880>
 800ec60:	e5bf      	b.n	800e7e2 <_strtod_l+0x486>
 800ec62:	46c0      	nop			@ (mov r8, r8)
 800ec64:	08010b68 	.word	0x08010b68
 800ec68:	fffffc02 	.word	0xfffffc02
 800ec6c:	fffffbe2 	.word	0xfffffbe2
 800ec70:	7ff00000 	.word	0x7ff00000
 800ec74:	39500000 	.word	0x39500000
 800ec78:	000fffff 	.word	0x000fffff
 800ec7c:	7fefffff 	.word	0x7fefffff
 800ec80:	4333      	orrs	r3, r6
 800ec82:	d09d      	beq.n	800ebc0 <_strtod_l+0x864>
 800ec84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d01c      	beq.n	800ecc4 <_strtod_l+0x968>
 800ec8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ec8e:	4213      	tst	r3, r2
 800ec90:	d0e3      	beq.n	800ec5a <_strtod_l+0x8fe>
 800ec92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec94:	0030      	movs	r0, r6
 800ec96:	0039      	movs	r1, r7
 800ec98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d016      	beq.n	800eccc <_strtod_l+0x970>
 800ec9e:	f7ff fb45 	bl	800e32c <sulp>
 800eca2:	0002      	movs	r2, r0
 800eca4:	000b      	movs	r3, r1
 800eca6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eca8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ecaa:	f7f2 fcd5 	bl	8001658 <__aeabi_dadd>
 800ecae:	0006      	movs	r6, r0
 800ecb0:	000f      	movs	r7, r1
 800ecb2:	e7d2      	b.n	800ec5a <_strtod_l+0x8fe>
 800ecb4:	2601      	movs	r6, #1
 800ecb6:	4a92      	ldr	r2, [pc, #584]	@ (800ef00 <_strtod_l+0xba4>)
 800ecb8:	4276      	negs	r6, r6
 800ecba:	189b      	adds	r3, r3, r2
 800ecbc:	4a91      	ldr	r2, [pc, #580]	@ (800ef04 <_strtod_l+0xba8>)
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	0017      	movs	r7, r2
 800ecc2:	e7ca      	b.n	800ec5a <_strtod_l+0x8fe>
 800ecc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ecc6:	4233      	tst	r3, r6
 800ecc8:	d0c7      	beq.n	800ec5a <_strtod_l+0x8fe>
 800ecca:	e7e2      	b.n	800ec92 <_strtod_l+0x936>
 800eccc:	f7ff fb2e 	bl	800e32c <sulp>
 800ecd0:	0002      	movs	r2, r0
 800ecd2:	000b      	movs	r3, r1
 800ecd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ecd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ecd8:	f7f3 ff2e 	bl	8002b38 <__aeabi_dsub>
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2300      	movs	r3, #0
 800ece0:	0006      	movs	r6, r0
 800ece2:	000f      	movs	r7, r1
 800ece4:	f7f1 fbb2 	bl	800044c <__aeabi_dcmpeq>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d0b6      	beq.n	800ec5a <_strtod_l+0x8fe>
 800ecec:	e60c      	b.n	800e908 <_strtod_l+0x5ac>
 800ecee:	9907      	ldr	r1, [sp, #28]
 800ecf0:	9806      	ldr	r0, [sp, #24]
 800ecf2:	f7ff faad 	bl	800e250 <__ratio>
 800ecf6:	2380      	movs	r3, #128	@ 0x80
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	05db      	lsls	r3, r3, #23
 800ecfc:	0004      	movs	r4, r0
 800ecfe:	000d      	movs	r5, r1
 800ed00:	f7f1 fbb4 	bl	800046c <__aeabi_dcmple>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d06c      	beq.n	800ede2 <_strtod_l+0xa86>
 800ed08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d177      	bne.n	800edfe <_strtod_l+0xaa2>
 800ed0e:	2e00      	cmp	r6, #0
 800ed10:	d157      	bne.n	800edc2 <_strtod_l+0xa66>
 800ed12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed14:	031b      	lsls	r3, r3, #12
 800ed16:	d15a      	bne.n	800edce <_strtod_l+0xa72>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	0020      	movs	r0, r4
 800ed1c:	0029      	movs	r1, r5
 800ed1e:	4b7a      	ldr	r3, [pc, #488]	@ (800ef08 <_strtod_l+0xbac>)
 800ed20:	f7f1 fb9a 	bl	8000458 <__aeabi_dcmplt>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d159      	bne.n	800eddc <_strtod_l+0xa80>
 800ed28:	0020      	movs	r0, r4
 800ed2a:	0029      	movs	r1, r5
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4b77      	ldr	r3, [pc, #476]	@ (800ef0c <_strtod_l+0xbb0>)
 800ed30:	f7f3 fc3a 	bl	80025a8 <__aeabi_dmul>
 800ed34:	0004      	movs	r4, r0
 800ed36:	000d      	movs	r5, r1
 800ed38:	2380      	movs	r3, #128	@ 0x80
 800ed3a:	061b      	lsls	r3, r3, #24
 800ed3c:	18eb      	adds	r3, r5, r3
 800ed3e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed46:	9214      	str	r2, [sp, #80]	@ 0x50
 800ed48:	9315      	str	r3, [sp, #84]	@ 0x54
 800ed4a:	4a71      	ldr	r2, [pc, #452]	@ (800ef10 <_strtod_l+0xbb4>)
 800ed4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed4e:	4013      	ands	r3, r2
 800ed50:	9316      	str	r3, [sp, #88]	@ 0x58
 800ed52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ed54:	4b6f      	ldr	r3, [pc, #444]	@ (800ef14 <_strtod_l+0xbb8>)
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d000      	beq.n	800ed5c <_strtod_l+0xa00>
 800ed5a:	e087      	b.n	800ee6c <_strtod_l+0xb10>
 800ed5c:	4a6e      	ldr	r2, [pc, #440]	@ (800ef18 <_strtod_l+0xbbc>)
 800ed5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed60:	4694      	mov	ip, r2
 800ed62:	4463      	add	r3, ip
 800ed64:	001f      	movs	r7, r3
 800ed66:	0030      	movs	r0, r6
 800ed68:	0019      	movs	r1, r3
 800ed6a:	f7ff f9a5 	bl	800e0b8 <__ulp>
 800ed6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed72:	f7f3 fc19 	bl	80025a8 <__aeabi_dmul>
 800ed76:	0032      	movs	r2, r6
 800ed78:	003b      	movs	r3, r7
 800ed7a:	f7f2 fc6d 	bl	8001658 <__aeabi_dadd>
 800ed7e:	4a64      	ldr	r2, [pc, #400]	@ (800ef10 <_strtod_l+0xbb4>)
 800ed80:	4b66      	ldr	r3, [pc, #408]	@ (800ef1c <_strtod_l+0xbc0>)
 800ed82:	0006      	movs	r6, r0
 800ed84:	400a      	ands	r2, r1
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d940      	bls.n	800ee0c <_strtod_l+0xab0>
 800ed8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed8c:	4a64      	ldr	r2, [pc, #400]	@ (800ef20 <_strtod_l+0xbc4>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d103      	bne.n	800ed9a <_strtod_l+0xa3e>
 800ed92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed94:	3301      	adds	r3, #1
 800ed96:	d100      	bne.n	800ed9a <_strtod_l+0xa3e>
 800ed98:	e51a      	b.n	800e7d0 <_strtod_l+0x474>
 800ed9a:	2601      	movs	r6, #1
 800ed9c:	4f60      	ldr	r7, [pc, #384]	@ (800ef20 <_strtod_l+0xbc4>)
 800ed9e:	4276      	negs	r6, r6
 800eda0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eda2:	9805      	ldr	r0, [sp, #20]
 800eda4:	f7fe fe3c 	bl	800da20 <_Bfree>
 800eda8:	9908      	ldr	r1, [sp, #32]
 800edaa:	9805      	ldr	r0, [sp, #20]
 800edac:	f7fe fe38 	bl	800da20 <_Bfree>
 800edb0:	9907      	ldr	r1, [sp, #28]
 800edb2:	9805      	ldr	r0, [sp, #20]
 800edb4:	f7fe fe34 	bl	800da20 <_Bfree>
 800edb8:	9906      	ldr	r1, [sp, #24]
 800edba:	9805      	ldr	r0, [sp, #20]
 800edbc:	f7fe fe30 	bl	800da20 <_Bfree>
 800edc0:	e617      	b.n	800e9f2 <_strtod_l+0x696>
 800edc2:	2e01      	cmp	r6, #1
 800edc4:	d103      	bne.n	800edce <_strtod_l+0xa72>
 800edc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d100      	bne.n	800edce <_strtod_l+0xa72>
 800edcc:	e59c      	b.n	800e908 <_strtod_l+0x5ac>
 800edce:	2300      	movs	r3, #0
 800edd0:	4c54      	ldr	r4, [pc, #336]	@ (800ef24 <_strtod_l+0xbc8>)
 800edd2:	4d4d      	ldr	r5, [pc, #308]	@ (800ef08 <_strtod_l+0xbac>)
 800edd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800edd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800edd8:	2400      	movs	r4, #0
 800edda:	e7b2      	b.n	800ed42 <_strtod_l+0x9e6>
 800eddc:	2400      	movs	r4, #0
 800edde:	4d4b      	ldr	r5, [pc, #300]	@ (800ef0c <_strtod_l+0xbb0>)
 800ede0:	e7aa      	b.n	800ed38 <_strtod_l+0x9dc>
 800ede2:	0020      	movs	r0, r4
 800ede4:	0029      	movs	r1, r5
 800ede6:	4b49      	ldr	r3, [pc, #292]	@ (800ef0c <_strtod_l+0xbb0>)
 800ede8:	2200      	movs	r2, #0
 800edea:	f7f3 fbdd 	bl	80025a8 <__aeabi_dmul>
 800edee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800edf0:	0004      	movs	r4, r0
 800edf2:	000d      	movs	r5, r1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d09f      	beq.n	800ed38 <_strtod_l+0x9dc>
 800edf8:	940a      	str	r4, [sp, #40]	@ 0x28
 800edfa:	950b      	str	r5, [sp, #44]	@ 0x2c
 800edfc:	e7a1      	b.n	800ed42 <_strtod_l+0x9e6>
 800edfe:	2300      	movs	r3, #0
 800ee00:	4c41      	ldr	r4, [pc, #260]	@ (800ef08 <_strtod_l+0xbac>)
 800ee02:	0025      	movs	r5, r4
 800ee04:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ee08:	001c      	movs	r4, r3
 800ee0a:	e79a      	b.n	800ed42 <_strtod_l+0x9e6>
 800ee0c:	23d4      	movs	r3, #212	@ 0xd4
 800ee0e:	049b      	lsls	r3, r3, #18
 800ee10:	18cf      	adds	r7, r1, r3
 800ee12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee14:	9710      	str	r7, [sp, #64]	@ 0x40
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1c2      	bne.n	800eda0 <_strtod_l+0xa44>
 800ee1a:	4b3d      	ldr	r3, [pc, #244]	@ (800ef10 <_strtod_l+0xbb4>)
 800ee1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee1e:	403b      	ands	r3, r7
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d1bd      	bne.n	800eda0 <_strtod_l+0xa44>
 800ee24:	0020      	movs	r0, r4
 800ee26:	0029      	movs	r1, r5
 800ee28:	f7f1 fbe4 	bl	80005f4 <__aeabi_d2lz>
 800ee2c:	f7f1 fc1c 	bl	8000668 <__aeabi_l2d>
 800ee30:	0002      	movs	r2, r0
 800ee32:	000b      	movs	r3, r1
 800ee34:	0020      	movs	r0, r4
 800ee36:	0029      	movs	r1, r5
 800ee38:	f7f3 fe7e 	bl	8002b38 <__aeabi_dsub>
 800ee3c:	033c      	lsls	r4, r7, #12
 800ee3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee40:	0b24      	lsrs	r4, r4, #12
 800ee42:	4334      	orrs	r4, r6
 800ee44:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee46:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ee48:	4a37      	ldr	r2, [pc, #220]	@ (800ef28 <_strtod_l+0xbcc>)
 800ee4a:	431c      	orrs	r4, r3
 800ee4c:	d052      	beq.n	800eef4 <_strtod_l+0xb98>
 800ee4e:	4b37      	ldr	r3, [pc, #220]	@ (800ef2c <_strtod_l+0xbd0>)
 800ee50:	f7f1 fb02 	bl	8000458 <__aeabi_dcmplt>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d000      	beq.n	800ee5a <_strtod_l+0xafe>
 800ee58:	e4c3      	b.n	800e7e2 <_strtod_l+0x486>
 800ee5a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ee5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee5e:	4a34      	ldr	r2, [pc, #208]	@ (800ef30 <_strtod_l+0xbd4>)
 800ee60:	4b2a      	ldr	r3, [pc, #168]	@ (800ef0c <_strtod_l+0xbb0>)
 800ee62:	f7f1 fb0d 	bl	8000480 <__aeabi_dcmpgt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d09a      	beq.n	800eda0 <_strtod_l+0xa44>
 800ee6a:	e4ba      	b.n	800e7e2 <_strtod_l+0x486>
 800ee6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d02a      	beq.n	800eec8 <_strtod_l+0xb6c>
 800ee72:	23d4      	movs	r3, #212	@ 0xd4
 800ee74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee76:	04db      	lsls	r3, r3, #19
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d825      	bhi.n	800eec8 <_strtod_l+0xb6c>
 800ee7c:	0020      	movs	r0, r4
 800ee7e:	0029      	movs	r1, r5
 800ee80:	4a2c      	ldr	r2, [pc, #176]	@ (800ef34 <_strtod_l+0xbd8>)
 800ee82:	4b2d      	ldr	r3, [pc, #180]	@ (800ef38 <_strtod_l+0xbdc>)
 800ee84:	f7f1 faf2 	bl	800046c <__aeabi_dcmple>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d016      	beq.n	800eeba <_strtod_l+0xb5e>
 800ee8c:	0020      	movs	r0, r4
 800ee8e:	0029      	movs	r1, r5
 800ee90:	f7f1 fb92 	bl	80005b8 <__aeabi_d2uiz>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d100      	bne.n	800ee9a <_strtod_l+0xb3e>
 800ee98:	3001      	adds	r0, #1
 800ee9a:	f7f4 fa75 	bl	8003388 <__aeabi_ui2d>
 800ee9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eea0:	0004      	movs	r4, r0
 800eea2:	000d      	movs	r5, r1
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d122      	bne.n	800eeee <_strtod_l+0xb92>
 800eea8:	2380      	movs	r3, #128	@ 0x80
 800eeaa:	061b      	lsls	r3, r3, #24
 800eeac:	18cb      	adds	r3, r1, r3
 800eeae:	9018      	str	r0, [sp, #96]	@ 0x60
 800eeb0:	9319      	str	r3, [sp, #100]	@ 0x64
 800eeb2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800eeb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eeb6:	9214      	str	r2, [sp, #80]	@ 0x50
 800eeb8:	9315      	str	r3, [sp, #84]	@ 0x54
 800eeba:	22d6      	movs	r2, #214	@ 0xd6
 800eebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eebe:	04d2      	lsls	r2, r2, #19
 800eec0:	189b      	adds	r3, r3, r2
 800eec2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eec4:	1a9b      	subs	r3, r3, r2
 800eec6:	9315      	str	r3, [sp, #84]	@ 0x54
 800eec8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eeca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eecc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800eece:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800eed0:	f7ff f8f2 	bl	800e0b8 <__ulp>
 800eed4:	0002      	movs	r2, r0
 800eed6:	000b      	movs	r3, r1
 800eed8:	0030      	movs	r0, r6
 800eeda:	0039      	movs	r1, r7
 800eedc:	f7f3 fb64 	bl	80025a8 <__aeabi_dmul>
 800eee0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800eee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eee4:	f7f2 fbb8 	bl	8001658 <__aeabi_dadd>
 800eee8:	0006      	movs	r6, r0
 800eeea:	000f      	movs	r7, r1
 800eeec:	e791      	b.n	800ee12 <_strtod_l+0xab6>
 800eeee:	9418      	str	r4, [sp, #96]	@ 0x60
 800eef0:	9519      	str	r5, [sp, #100]	@ 0x64
 800eef2:	e7de      	b.n	800eeb2 <_strtod_l+0xb56>
 800eef4:	4b11      	ldr	r3, [pc, #68]	@ (800ef3c <_strtod_l+0xbe0>)
 800eef6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800eef8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eefa:	f7f1 faad 	bl	8000458 <__aeabi_dcmplt>
 800eefe:	e7b2      	b.n	800ee66 <_strtod_l+0xb0a>
 800ef00:	fff00000 	.word	0xfff00000
 800ef04:	000fffff 	.word	0x000fffff
 800ef08:	3ff00000 	.word	0x3ff00000
 800ef0c:	3fe00000 	.word	0x3fe00000
 800ef10:	7ff00000 	.word	0x7ff00000
 800ef14:	7fe00000 	.word	0x7fe00000
 800ef18:	fcb00000 	.word	0xfcb00000
 800ef1c:	7c9fffff 	.word	0x7c9fffff
 800ef20:	7fefffff 	.word	0x7fefffff
 800ef24:	bff00000 	.word	0xbff00000
 800ef28:	94a03595 	.word	0x94a03595
 800ef2c:	3fdfffff 	.word	0x3fdfffff
 800ef30:	35afe535 	.word	0x35afe535
 800ef34:	ffc00000 	.word	0xffc00000
 800ef38:	41dfffff 	.word	0x41dfffff
 800ef3c:	3fcfffff 	.word	0x3fcfffff

0800ef40 <_strtod_r>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	4b02      	ldr	r3, [pc, #8]	@ (800ef4c <_strtod_r+0xc>)
 800ef44:	f7ff fa0a 	bl	800e35c <_strtod_l>
 800ef48:	bd10      	pop	{r4, pc}
 800ef4a:	46c0      	nop			@ (mov r8, r8)
 800ef4c:	20000090 	.word	0x20000090

0800ef50 <_strtol_l.constprop.0>:
 800ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef52:	b085      	sub	sp, #20
 800ef54:	0017      	movs	r7, r2
 800ef56:	001e      	movs	r6, r3
 800ef58:	9003      	str	r0, [sp, #12]
 800ef5a:	9101      	str	r1, [sp, #4]
 800ef5c:	2b24      	cmp	r3, #36	@ 0x24
 800ef5e:	d844      	bhi.n	800efea <_strtol_l.constprop.0+0x9a>
 800ef60:	000c      	movs	r4, r1
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d041      	beq.n	800efea <_strtol_l.constprop.0+0x9a>
 800ef66:	4b3d      	ldr	r3, [pc, #244]	@ (800f05c <_strtol_l.constprop.0+0x10c>)
 800ef68:	2208      	movs	r2, #8
 800ef6a:	469c      	mov	ip, r3
 800ef6c:	0023      	movs	r3, r4
 800ef6e:	4661      	mov	r1, ip
 800ef70:	781d      	ldrb	r5, [r3, #0]
 800ef72:	3401      	adds	r4, #1
 800ef74:	5d48      	ldrb	r0, [r1, r5]
 800ef76:	0001      	movs	r1, r0
 800ef78:	4011      	ands	r1, r2
 800ef7a:	4210      	tst	r0, r2
 800ef7c:	d1f6      	bne.n	800ef6c <_strtol_l.constprop.0+0x1c>
 800ef7e:	2d2d      	cmp	r5, #45	@ 0x2d
 800ef80:	d13a      	bne.n	800eff8 <_strtol_l.constprop.0+0xa8>
 800ef82:	7825      	ldrb	r5, [r4, #0]
 800ef84:	1c9c      	adds	r4, r3, #2
 800ef86:	2301      	movs	r3, #1
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	2210      	movs	r2, #16
 800ef8c:	0033      	movs	r3, r6
 800ef8e:	4393      	bics	r3, r2
 800ef90:	d109      	bne.n	800efa6 <_strtol_l.constprop.0+0x56>
 800ef92:	2d30      	cmp	r5, #48	@ 0x30
 800ef94:	d136      	bne.n	800f004 <_strtol_l.constprop.0+0xb4>
 800ef96:	2120      	movs	r1, #32
 800ef98:	7823      	ldrb	r3, [r4, #0]
 800ef9a:	438b      	bics	r3, r1
 800ef9c:	2b58      	cmp	r3, #88	@ 0x58
 800ef9e:	d131      	bne.n	800f004 <_strtol_l.constprop.0+0xb4>
 800efa0:	0016      	movs	r6, r2
 800efa2:	7865      	ldrb	r5, [r4, #1]
 800efa4:	3402      	adds	r4, #2
 800efa6:	4a2e      	ldr	r2, [pc, #184]	@ (800f060 <_strtol_l.constprop.0+0x110>)
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	4694      	mov	ip, r2
 800efac:	4463      	add	r3, ip
 800efae:	0031      	movs	r1, r6
 800efb0:	0018      	movs	r0, r3
 800efb2:	9302      	str	r3, [sp, #8]
 800efb4:	f7f1 f94a 	bl	800024c <__aeabi_uidivmod>
 800efb8:	2200      	movs	r2, #0
 800efba:	4684      	mov	ip, r0
 800efbc:	0010      	movs	r0, r2
 800efbe:	002b      	movs	r3, r5
 800efc0:	3b30      	subs	r3, #48	@ 0x30
 800efc2:	2b09      	cmp	r3, #9
 800efc4:	d825      	bhi.n	800f012 <_strtol_l.constprop.0+0xc2>
 800efc6:	001d      	movs	r5, r3
 800efc8:	42ae      	cmp	r6, r5
 800efca:	dd31      	ble.n	800f030 <_strtol_l.constprop.0+0xe0>
 800efcc:	1c53      	adds	r3, r2, #1
 800efce:	d009      	beq.n	800efe4 <_strtol_l.constprop.0+0x94>
 800efd0:	2201      	movs	r2, #1
 800efd2:	4252      	negs	r2, r2
 800efd4:	4584      	cmp	ip, r0
 800efd6:	d305      	bcc.n	800efe4 <_strtol_l.constprop.0+0x94>
 800efd8:	d101      	bne.n	800efde <_strtol_l.constprop.0+0x8e>
 800efda:	42a9      	cmp	r1, r5
 800efdc:	db25      	blt.n	800f02a <_strtol_l.constprop.0+0xda>
 800efde:	2201      	movs	r2, #1
 800efe0:	4370      	muls	r0, r6
 800efe2:	1828      	adds	r0, r5, r0
 800efe4:	7825      	ldrb	r5, [r4, #0]
 800efe6:	3401      	adds	r4, #1
 800efe8:	e7e9      	b.n	800efbe <_strtol_l.constprop.0+0x6e>
 800efea:	f7fd fd11 	bl	800ca10 <__errno>
 800efee:	2316      	movs	r3, #22
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	b005      	add	sp, #20
 800eff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff8:	9100      	str	r1, [sp, #0]
 800effa:	2d2b      	cmp	r5, #43	@ 0x2b
 800effc:	d1c5      	bne.n	800ef8a <_strtol_l.constprop.0+0x3a>
 800effe:	7825      	ldrb	r5, [r4, #0]
 800f000:	1c9c      	adds	r4, r3, #2
 800f002:	e7c2      	b.n	800ef8a <_strtol_l.constprop.0+0x3a>
 800f004:	2e00      	cmp	r6, #0
 800f006:	d1ce      	bne.n	800efa6 <_strtol_l.constprop.0+0x56>
 800f008:	3608      	adds	r6, #8
 800f00a:	2d30      	cmp	r5, #48	@ 0x30
 800f00c:	d0cb      	beq.n	800efa6 <_strtol_l.constprop.0+0x56>
 800f00e:	3602      	adds	r6, #2
 800f010:	e7c9      	b.n	800efa6 <_strtol_l.constprop.0+0x56>
 800f012:	002b      	movs	r3, r5
 800f014:	3b41      	subs	r3, #65	@ 0x41
 800f016:	2b19      	cmp	r3, #25
 800f018:	d801      	bhi.n	800f01e <_strtol_l.constprop.0+0xce>
 800f01a:	3d37      	subs	r5, #55	@ 0x37
 800f01c:	e7d4      	b.n	800efc8 <_strtol_l.constprop.0+0x78>
 800f01e:	002b      	movs	r3, r5
 800f020:	3b61      	subs	r3, #97	@ 0x61
 800f022:	2b19      	cmp	r3, #25
 800f024:	d804      	bhi.n	800f030 <_strtol_l.constprop.0+0xe0>
 800f026:	3d57      	subs	r5, #87	@ 0x57
 800f028:	e7ce      	b.n	800efc8 <_strtol_l.constprop.0+0x78>
 800f02a:	2201      	movs	r2, #1
 800f02c:	4252      	negs	r2, r2
 800f02e:	e7d9      	b.n	800efe4 <_strtol_l.constprop.0+0x94>
 800f030:	1c53      	adds	r3, r2, #1
 800f032:	d108      	bne.n	800f046 <_strtol_l.constprop.0+0xf6>
 800f034:	2322      	movs	r3, #34	@ 0x22
 800f036:	9a03      	ldr	r2, [sp, #12]
 800f038:	9802      	ldr	r0, [sp, #8]
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	2f00      	cmp	r7, #0
 800f03e:	d0d9      	beq.n	800eff4 <_strtol_l.constprop.0+0xa4>
 800f040:	1e63      	subs	r3, r4, #1
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	e007      	b.n	800f056 <_strtol_l.constprop.0+0x106>
 800f046:	9b00      	ldr	r3, [sp, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d000      	beq.n	800f04e <_strtol_l.constprop.0+0xfe>
 800f04c:	4240      	negs	r0, r0
 800f04e:	2f00      	cmp	r7, #0
 800f050:	d0d0      	beq.n	800eff4 <_strtol_l.constprop.0+0xa4>
 800f052:	2a00      	cmp	r2, #0
 800f054:	d1f4      	bne.n	800f040 <_strtol_l.constprop.0+0xf0>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	603b      	str	r3, [r7, #0]
 800f05a:	e7cb      	b.n	800eff4 <_strtol_l.constprop.0+0xa4>
 800f05c:	08010b91 	.word	0x08010b91
 800f060:	7fffffff 	.word	0x7fffffff

0800f064 <_strtol_r>:
 800f064:	b510      	push	{r4, lr}
 800f066:	f7ff ff73 	bl	800ef50 <_strtol_l.constprop.0>
 800f06a:	bd10      	pop	{r4, pc}

0800f06c <__ssputs_r>:
 800f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f06e:	688e      	ldr	r6, [r1, #8]
 800f070:	b085      	sub	sp, #20
 800f072:	001f      	movs	r7, r3
 800f074:	000c      	movs	r4, r1
 800f076:	680b      	ldr	r3, [r1, #0]
 800f078:	9002      	str	r0, [sp, #8]
 800f07a:	9203      	str	r2, [sp, #12]
 800f07c:	42be      	cmp	r6, r7
 800f07e:	d830      	bhi.n	800f0e2 <__ssputs_r+0x76>
 800f080:	210c      	movs	r1, #12
 800f082:	5e62      	ldrsh	r2, [r4, r1]
 800f084:	2190      	movs	r1, #144	@ 0x90
 800f086:	00c9      	lsls	r1, r1, #3
 800f088:	420a      	tst	r2, r1
 800f08a:	d028      	beq.n	800f0de <__ssputs_r+0x72>
 800f08c:	2003      	movs	r0, #3
 800f08e:	6921      	ldr	r1, [r4, #16]
 800f090:	1a5b      	subs	r3, r3, r1
 800f092:	9301      	str	r3, [sp, #4]
 800f094:	6963      	ldr	r3, [r4, #20]
 800f096:	4343      	muls	r3, r0
 800f098:	9801      	ldr	r0, [sp, #4]
 800f09a:	0fdd      	lsrs	r5, r3, #31
 800f09c:	18ed      	adds	r5, r5, r3
 800f09e:	1c7b      	adds	r3, r7, #1
 800f0a0:	181b      	adds	r3, r3, r0
 800f0a2:	106d      	asrs	r5, r5, #1
 800f0a4:	42ab      	cmp	r3, r5
 800f0a6:	d900      	bls.n	800f0aa <__ssputs_r+0x3e>
 800f0a8:	001d      	movs	r5, r3
 800f0aa:	0552      	lsls	r2, r2, #21
 800f0ac:	d528      	bpl.n	800f100 <__ssputs_r+0x94>
 800f0ae:	0029      	movs	r1, r5
 800f0b0:	9802      	ldr	r0, [sp, #8]
 800f0b2:	f7fe fbe1 	bl	800d878 <_malloc_r>
 800f0b6:	1e06      	subs	r6, r0, #0
 800f0b8:	d02c      	beq.n	800f114 <__ssputs_r+0xa8>
 800f0ba:	9a01      	ldr	r2, [sp, #4]
 800f0bc:	6921      	ldr	r1, [r4, #16]
 800f0be:	f000 fa1b 	bl	800f4f8 <memcpy>
 800f0c2:	89a2      	ldrh	r2, [r4, #12]
 800f0c4:	4b18      	ldr	r3, [pc, #96]	@ (800f128 <__ssputs_r+0xbc>)
 800f0c6:	401a      	ands	r2, r3
 800f0c8:	2380      	movs	r3, #128	@ 0x80
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	81a3      	strh	r3, [r4, #12]
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	6126      	str	r6, [r4, #16]
 800f0d2:	18f6      	adds	r6, r6, r3
 800f0d4:	6026      	str	r6, [r4, #0]
 800f0d6:	003e      	movs	r6, r7
 800f0d8:	6165      	str	r5, [r4, #20]
 800f0da:	1aed      	subs	r5, r5, r3
 800f0dc:	60a5      	str	r5, [r4, #8]
 800f0de:	42be      	cmp	r6, r7
 800f0e0:	d900      	bls.n	800f0e4 <__ssputs_r+0x78>
 800f0e2:	003e      	movs	r6, r7
 800f0e4:	0032      	movs	r2, r6
 800f0e6:	9903      	ldr	r1, [sp, #12]
 800f0e8:	6820      	ldr	r0, [r4, #0]
 800f0ea:	f000 f9ce 	bl	800f48a <memmove>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	1b9b      	subs	r3, r3, r6
 800f0f4:	60a3      	str	r3, [r4, #8]
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	199b      	adds	r3, r3, r6
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	b005      	add	sp, #20
 800f0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f100:	002a      	movs	r2, r5
 800f102:	9802      	ldr	r0, [sp, #8]
 800f104:	f000 fdc0 	bl	800fc88 <_realloc_r>
 800f108:	1e06      	subs	r6, r0, #0
 800f10a:	d1e0      	bne.n	800f0ce <__ssputs_r+0x62>
 800f10c:	6921      	ldr	r1, [r4, #16]
 800f10e:	9802      	ldr	r0, [sp, #8]
 800f110:	f7fe fb3c 	bl	800d78c <_free_r>
 800f114:	230c      	movs	r3, #12
 800f116:	2001      	movs	r0, #1
 800f118:	9a02      	ldr	r2, [sp, #8]
 800f11a:	4240      	negs	r0, r0
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	89a2      	ldrh	r2, [r4, #12]
 800f120:	3334      	adds	r3, #52	@ 0x34
 800f122:	4313      	orrs	r3, r2
 800f124:	81a3      	strh	r3, [r4, #12]
 800f126:	e7e9      	b.n	800f0fc <__ssputs_r+0x90>
 800f128:	fffffb7f 	.word	0xfffffb7f

0800f12c <_svfiprintf_r>:
 800f12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12e:	b0a1      	sub	sp, #132	@ 0x84
 800f130:	9003      	str	r0, [sp, #12]
 800f132:	001d      	movs	r5, r3
 800f134:	898b      	ldrh	r3, [r1, #12]
 800f136:	000f      	movs	r7, r1
 800f138:	0016      	movs	r6, r2
 800f13a:	061b      	lsls	r3, r3, #24
 800f13c:	d511      	bpl.n	800f162 <_svfiprintf_r+0x36>
 800f13e:	690b      	ldr	r3, [r1, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10e      	bne.n	800f162 <_svfiprintf_r+0x36>
 800f144:	2140      	movs	r1, #64	@ 0x40
 800f146:	f7fe fb97 	bl	800d878 <_malloc_r>
 800f14a:	6038      	str	r0, [r7, #0]
 800f14c:	6138      	str	r0, [r7, #16]
 800f14e:	2800      	cmp	r0, #0
 800f150:	d105      	bne.n	800f15e <_svfiprintf_r+0x32>
 800f152:	230c      	movs	r3, #12
 800f154:	9a03      	ldr	r2, [sp, #12]
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	2001      	movs	r0, #1
 800f15a:	4240      	negs	r0, r0
 800f15c:	e0cf      	b.n	800f2fe <_svfiprintf_r+0x1d2>
 800f15e:	2340      	movs	r3, #64	@ 0x40
 800f160:	617b      	str	r3, [r7, #20]
 800f162:	2300      	movs	r3, #0
 800f164:	ac08      	add	r4, sp, #32
 800f166:	6163      	str	r3, [r4, #20]
 800f168:	3320      	adds	r3, #32
 800f16a:	7663      	strb	r3, [r4, #25]
 800f16c:	3310      	adds	r3, #16
 800f16e:	76a3      	strb	r3, [r4, #26]
 800f170:	9507      	str	r5, [sp, #28]
 800f172:	0035      	movs	r5, r6
 800f174:	782b      	ldrb	r3, [r5, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <_svfiprintf_r+0x52>
 800f17a:	2b25      	cmp	r3, #37	@ 0x25
 800f17c:	d148      	bne.n	800f210 <_svfiprintf_r+0xe4>
 800f17e:	1bab      	subs	r3, r5, r6
 800f180:	9305      	str	r3, [sp, #20]
 800f182:	42b5      	cmp	r5, r6
 800f184:	d00b      	beq.n	800f19e <_svfiprintf_r+0x72>
 800f186:	0032      	movs	r2, r6
 800f188:	0039      	movs	r1, r7
 800f18a:	9803      	ldr	r0, [sp, #12]
 800f18c:	f7ff ff6e 	bl	800f06c <__ssputs_r>
 800f190:	3001      	adds	r0, #1
 800f192:	d100      	bne.n	800f196 <_svfiprintf_r+0x6a>
 800f194:	e0ae      	b.n	800f2f4 <_svfiprintf_r+0x1c8>
 800f196:	6963      	ldr	r3, [r4, #20]
 800f198:	9a05      	ldr	r2, [sp, #20]
 800f19a:	189b      	adds	r3, r3, r2
 800f19c:	6163      	str	r3, [r4, #20]
 800f19e:	782b      	ldrb	r3, [r5, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d100      	bne.n	800f1a6 <_svfiprintf_r+0x7a>
 800f1a4:	e0a6      	b.n	800f2f4 <_svfiprintf_r+0x1c8>
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4252      	negs	r2, r2
 800f1ac:	6062      	str	r2, [r4, #4]
 800f1ae:	a904      	add	r1, sp, #16
 800f1b0:	3254      	adds	r2, #84	@ 0x54
 800f1b2:	1852      	adds	r2, r2, r1
 800f1b4:	1c6e      	adds	r6, r5, #1
 800f1b6:	6023      	str	r3, [r4, #0]
 800f1b8:	60e3      	str	r3, [r4, #12]
 800f1ba:	60a3      	str	r3, [r4, #8]
 800f1bc:	7013      	strb	r3, [r2, #0]
 800f1be:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f1c0:	4b54      	ldr	r3, [pc, #336]	@ (800f314 <_svfiprintf_r+0x1e8>)
 800f1c2:	2205      	movs	r2, #5
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	7831      	ldrb	r1, [r6, #0]
 800f1c8:	9305      	str	r3, [sp, #20]
 800f1ca:	f7fd fc4e 	bl	800ca6a <memchr>
 800f1ce:	1c75      	adds	r5, r6, #1
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d11f      	bne.n	800f214 <_svfiprintf_r+0xe8>
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	06d3      	lsls	r3, r2, #27
 800f1d8:	d504      	bpl.n	800f1e4 <_svfiprintf_r+0xb8>
 800f1da:	2353      	movs	r3, #83	@ 0x53
 800f1dc:	a904      	add	r1, sp, #16
 800f1de:	185b      	adds	r3, r3, r1
 800f1e0:	2120      	movs	r1, #32
 800f1e2:	7019      	strb	r1, [r3, #0]
 800f1e4:	0713      	lsls	r3, r2, #28
 800f1e6:	d504      	bpl.n	800f1f2 <_svfiprintf_r+0xc6>
 800f1e8:	2353      	movs	r3, #83	@ 0x53
 800f1ea:	a904      	add	r1, sp, #16
 800f1ec:	185b      	adds	r3, r3, r1
 800f1ee:	212b      	movs	r1, #43	@ 0x2b
 800f1f0:	7019      	strb	r1, [r3, #0]
 800f1f2:	7833      	ldrb	r3, [r6, #0]
 800f1f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1f6:	d016      	beq.n	800f226 <_svfiprintf_r+0xfa>
 800f1f8:	0035      	movs	r5, r6
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	200a      	movs	r0, #10
 800f1fe:	68e3      	ldr	r3, [r4, #12]
 800f200:	782a      	ldrb	r2, [r5, #0]
 800f202:	1c6e      	adds	r6, r5, #1
 800f204:	3a30      	subs	r2, #48	@ 0x30
 800f206:	2a09      	cmp	r2, #9
 800f208:	d950      	bls.n	800f2ac <_svfiprintf_r+0x180>
 800f20a:	2900      	cmp	r1, #0
 800f20c:	d111      	bne.n	800f232 <_svfiprintf_r+0x106>
 800f20e:	e017      	b.n	800f240 <_svfiprintf_r+0x114>
 800f210:	3501      	adds	r5, #1
 800f212:	e7af      	b.n	800f174 <_svfiprintf_r+0x48>
 800f214:	9b05      	ldr	r3, [sp, #20]
 800f216:	6822      	ldr	r2, [r4, #0]
 800f218:	1ac0      	subs	r0, r0, r3
 800f21a:	2301      	movs	r3, #1
 800f21c:	4083      	lsls	r3, r0
 800f21e:	4313      	orrs	r3, r2
 800f220:	002e      	movs	r6, r5
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	e7cc      	b.n	800f1c0 <_svfiprintf_r+0x94>
 800f226:	9b07      	ldr	r3, [sp, #28]
 800f228:	1d19      	adds	r1, r3, #4
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	9107      	str	r1, [sp, #28]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	db01      	blt.n	800f236 <_svfiprintf_r+0x10a>
 800f232:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f234:	e004      	b.n	800f240 <_svfiprintf_r+0x114>
 800f236:	425b      	negs	r3, r3
 800f238:	60e3      	str	r3, [r4, #12]
 800f23a:	2302      	movs	r3, #2
 800f23c:	4313      	orrs	r3, r2
 800f23e:	6023      	str	r3, [r4, #0]
 800f240:	782b      	ldrb	r3, [r5, #0]
 800f242:	2b2e      	cmp	r3, #46	@ 0x2e
 800f244:	d10c      	bne.n	800f260 <_svfiprintf_r+0x134>
 800f246:	786b      	ldrb	r3, [r5, #1]
 800f248:	2b2a      	cmp	r3, #42	@ 0x2a
 800f24a:	d134      	bne.n	800f2b6 <_svfiprintf_r+0x18a>
 800f24c:	9b07      	ldr	r3, [sp, #28]
 800f24e:	3502      	adds	r5, #2
 800f250:	1d1a      	adds	r2, r3, #4
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	9207      	str	r2, [sp, #28]
 800f256:	2b00      	cmp	r3, #0
 800f258:	da01      	bge.n	800f25e <_svfiprintf_r+0x132>
 800f25a:	2301      	movs	r3, #1
 800f25c:	425b      	negs	r3, r3
 800f25e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f260:	4e2d      	ldr	r6, [pc, #180]	@ (800f318 <_svfiprintf_r+0x1ec>)
 800f262:	2203      	movs	r2, #3
 800f264:	0030      	movs	r0, r6
 800f266:	7829      	ldrb	r1, [r5, #0]
 800f268:	f7fd fbff 	bl	800ca6a <memchr>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d006      	beq.n	800f27e <_svfiprintf_r+0x152>
 800f270:	2340      	movs	r3, #64	@ 0x40
 800f272:	1b80      	subs	r0, r0, r6
 800f274:	4083      	lsls	r3, r0
 800f276:	6822      	ldr	r2, [r4, #0]
 800f278:	3501      	adds	r5, #1
 800f27a:	4313      	orrs	r3, r2
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	7829      	ldrb	r1, [r5, #0]
 800f280:	2206      	movs	r2, #6
 800f282:	4826      	ldr	r0, [pc, #152]	@ (800f31c <_svfiprintf_r+0x1f0>)
 800f284:	1c6e      	adds	r6, r5, #1
 800f286:	7621      	strb	r1, [r4, #24]
 800f288:	f7fd fbef 	bl	800ca6a <memchr>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d038      	beq.n	800f302 <_svfiprintf_r+0x1d6>
 800f290:	4b23      	ldr	r3, [pc, #140]	@ (800f320 <_svfiprintf_r+0x1f4>)
 800f292:	2b00      	cmp	r3, #0
 800f294:	d122      	bne.n	800f2dc <_svfiprintf_r+0x1b0>
 800f296:	2207      	movs	r2, #7
 800f298:	9b07      	ldr	r3, [sp, #28]
 800f29a:	3307      	adds	r3, #7
 800f29c:	4393      	bics	r3, r2
 800f29e:	3308      	adds	r3, #8
 800f2a0:	9307      	str	r3, [sp, #28]
 800f2a2:	6963      	ldr	r3, [r4, #20]
 800f2a4:	9a04      	ldr	r2, [sp, #16]
 800f2a6:	189b      	adds	r3, r3, r2
 800f2a8:	6163      	str	r3, [r4, #20]
 800f2aa:	e762      	b.n	800f172 <_svfiprintf_r+0x46>
 800f2ac:	4343      	muls	r3, r0
 800f2ae:	0035      	movs	r5, r6
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	189b      	adds	r3, r3, r2
 800f2b4:	e7a4      	b.n	800f200 <_svfiprintf_r+0xd4>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	200a      	movs	r0, #10
 800f2ba:	0019      	movs	r1, r3
 800f2bc:	3501      	adds	r5, #1
 800f2be:	6063      	str	r3, [r4, #4]
 800f2c0:	782a      	ldrb	r2, [r5, #0]
 800f2c2:	1c6e      	adds	r6, r5, #1
 800f2c4:	3a30      	subs	r2, #48	@ 0x30
 800f2c6:	2a09      	cmp	r2, #9
 800f2c8:	d903      	bls.n	800f2d2 <_svfiprintf_r+0x1a6>
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d0c8      	beq.n	800f260 <_svfiprintf_r+0x134>
 800f2ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2d0:	e7c6      	b.n	800f260 <_svfiprintf_r+0x134>
 800f2d2:	4341      	muls	r1, r0
 800f2d4:	0035      	movs	r5, r6
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	1889      	adds	r1, r1, r2
 800f2da:	e7f1      	b.n	800f2c0 <_svfiprintf_r+0x194>
 800f2dc:	aa07      	add	r2, sp, #28
 800f2de:	9200      	str	r2, [sp, #0]
 800f2e0:	0021      	movs	r1, r4
 800f2e2:	003a      	movs	r2, r7
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f324 <_svfiprintf_r+0x1f8>)
 800f2e6:	9803      	ldr	r0, [sp, #12]
 800f2e8:	f7fc fc0a 	bl	800bb00 <_printf_float>
 800f2ec:	9004      	str	r0, [sp, #16]
 800f2ee:	9b04      	ldr	r3, [sp, #16]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	d1d6      	bne.n	800f2a2 <_svfiprintf_r+0x176>
 800f2f4:	89bb      	ldrh	r3, [r7, #12]
 800f2f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f2f8:	065b      	lsls	r3, r3, #25
 800f2fa:	d500      	bpl.n	800f2fe <_svfiprintf_r+0x1d2>
 800f2fc:	e72c      	b.n	800f158 <_svfiprintf_r+0x2c>
 800f2fe:	b021      	add	sp, #132	@ 0x84
 800f300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f302:	aa07      	add	r2, sp, #28
 800f304:	9200      	str	r2, [sp, #0]
 800f306:	0021      	movs	r1, r4
 800f308:	003a      	movs	r2, r7
 800f30a:	4b06      	ldr	r3, [pc, #24]	@ (800f324 <_svfiprintf_r+0x1f8>)
 800f30c:	9803      	ldr	r0, [sp, #12]
 800f30e:	f7fc fea5 	bl	800c05c <_printf_i>
 800f312:	e7eb      	b.n	800f2ec <_svfiprintf_r+0x1c0>
 800f314:	08010c91 	.word	0x08010c91
 800f318:	08010c97 	.word	0x08010c97
 800f31c:	08010c9b 	.word	0x08010c9b
 800f320:	0800bb01 	.word	0x0800bb01
 800f324:	0800f06d 	.word	0x0800f06d

0800f328 <__sflush_r>:
 800f328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f32a:	220c      	movs	r2, #12
 800f32c:	5e8b      	ldrsh	r3, [r1, r2]
 800f32e:	0005      	movs	r5, r0
 800f330:	000c      	movs	r4, r1
 800f332:	071a      	lsls	r2, r3, #28
 800f334:	d456      	bmi.n	800f3e4 <__sflush_r+0xbc>
 800f336:	684a      	ldr	r2, [r1, #4]
 800f338:	2a00      	cmp	r2, #0
 800f33a:	dc02      	bgt.n	800f342 <__sflush_r+0x1a>
 800f33c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f33e:	2a00      	cmp	r2, #0
 800f340:	dd4e      	ble.n	800f3e0 <__sflush_r+0xb8>
 800f342:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f344:	2f00      	cmp	r7, #0
 800f346:	d04b      	beq.n	800f3e0 <__sflush_r+0xb8>
 800f348:	2200      	movs	r2, #0
 800f34a:	2080      	movs	r0, #128	@ 0x80
 800f34c:	682e      	ldr	r6, [r5, #0]
 800f34e:	602a      	str	r2, [r5, #0]
 800f350:	001a      	movs	r2, r3
 800f352:	0140      	lsls	r0, r0, #5
 800f354:	6a21      	ldr	r1, [r4, #32]
 800f356:	4002      	ands	r2, r0
 800f358:	4203      	tst	r3, r0
 800f35a:	d033      	beq.n	800f3c4 <__sflush_r+0x9c>
 800f35c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	075b      	lsls	r3, r3, #29
 800f362:	d506      	bpl.n	800f372 <__sflush_r+0x4a>
 800f364:	6863      	ldr	r3, [r4, #4]
 800f366:	1ad2      	subs	r2, r2, r3
 800f368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <__sflush_r+0x4a>
 800f36e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f370:	1ad2      	subs	r2, r2, r3
 800f372:	2300      	movs	r3, #0
 800f374:	0028      	movs	r0, r5
 800f376:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f378:	6a21      	ldr	r1, [r4, #32]
 800f37a:	47b8      	blx	r7
 800f37c:	89a2      	ldrh	r2, [r4, #12]
 800f37e:	1c43      	adds	r3, r0, #1
 800f380:	d106      	bne.n	800f390 <__sflush_r+0x68>
 800f382:	6829      	ldr	r1, [r5, #0]
 800f384:	291d      	cmp	r1, #29
 800f386:	d846      	bhi.n	800f416 <__sflush_r+0xee>
 800f388:	4b29      	ldr	r3, [pc, #164]	@ (800f430 <__sflush_r+0x108>)
 800f38a:	410b      	asrs	r3, r1
 800f38c:	07db      	lsls	r3, r3, #31
 800f38e:	d442      	bmi.n	800f416 <__sflush_r+0xee>
 800f390:	2300      	movs	r3, #0
 800f392:	6063      	str	r3, [r4, #4]
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	04d2      	lsls	r2, r2, #19
 800f39a:	d505      	bpl.n	800f3a8 <__sflush_r+0x80>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <__sflush_r+0x7e>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d100      	bne.n	800f3a8 <__sflush_r+0x80>
 800f3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3aa:	602e      	str	r6, [r5, #0]
 800f3ac:	2900      	cmp	r1, #0
 800f3ae:	d017      	beq.n	800f3e0 <__sflush_r+0xb8>
 800f3b0:	0023      	movs	r3, r4
 800f3b2:	3344      	adds	r3, #68	@ 0x44
 800f3b4:	4299      	cmp	r1, r3
 800f3b6:	d002      	beq.n	800f3be <__sflush_r+0x96>
 800f3b8:	0028      	movs	r0, r5
 800f3ba:	f7fe f9e7 	bl	800d78c <_free_r>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3c2:	e00d      	b.n	800f3e0 <__sflush_r+0xb8>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	0028      	movs	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	0002      	movs	r2, r0
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d1c6      	bne.n	800f35e <__sflush_r+0x36>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d0c3      	beq.n	800f35e <__sflush_r+0x36>
 800f3d6:	2b1d      	cmp	r3, #29
 800f3d8:	d001      	beq.n	800f3de <__sflush_r+0xb6>
 800f3da:	2b16      	cmp	r3, #22
 800f3dc:	d11a      	bne.n	800f414 <__sflush_r+0xec>
 800f3de:	602e      	str	r6, [r5, #0]
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	e01e      	b.n	800f422 <__sflush_r+0xfa>
 800f3e4:	690e      	ldr	r6, [r1, #16]
 800f3e6:	2e00      	cmp	r6, #0
 800f3e8:	d0fa      	beq.n	800f3e0 <__sflush_r+0xb8>
 800f3ea:	680f      	ldr	r7, [r1, #0]
 800f3ec:	600e      	str	r6, [r1, #0]
 800f3ee:	1bba      	subs	r2, r7, r6
 800f3f0:	9201      	str	r2, [sp, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	079b      	lsls	r3, r3, #30
 800f3f6:	d100      	bne.n	800f3fa <__sflush_r+0xd2>
 800f3f8:	694a      	ldr	r2, [r1, #20]
 800f3fa:	60a2      	str	r2, [r4, #8]
 800f3fc:	9b01      	ldr	r3, [sp, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	ddee      	ble.n	800f3e0 <__sflush_r+0xb8>
 800f402:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f404:	0032      	movs	r2, r6
 800f406:	001f      	movs	r7, r3
 800f408:	0028      	movs	r0, r5
 800f40a:	9b01      	ldr	r3, [sp, #4]
 800f40c:	6a21      	ldr	r1, [r4, #32]
 800f40e:	47b8      	blx	r7
 800f410:	2800      	cmp	r0, #0
 800f412:	dc07      	bgt.n	800f424 <__sflush_r+0xfc>
 800f414:	89a2      	ldrh	r2, [r4, #12]
 800f416:	2340      	movs	r3, #64	@ 0x40
 800f418:	2001      	movs	r0, #1
 800f41a:	4313      	orrs	r3, r2
 800f41c:	b21b      	sxth	r3, r3
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	4240      	negs	r0, r0
 800f422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f424:	9b01      	ldr	r3, [sp, #4]
 800f426:	1836      	adds	r6, r6, r0
 800f428:	1a1b      	subs	r3, r3, r0
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	e7e6      	b.n	800f3fc <__sflush_r+0xd4>
 800f42e:	46c0      	nop			@ (mov r8, r8)
 800f430:	dfbffffe 	.word	0xdfbffffe

0800f434 <_fflush_r>:
 800f434:	690b      	ldr	r3, [r1, #16]
 800f436:	b570      	push	{r4, r5, r6, lr}
 800f438:	0005      	movs	r5, r0
 800f43a:	000c      	movs	r4, r1
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d102      	bne.n	800f446 <_fflush_r+0x12>
 800f440:	2500      	movs	r5, #0
 800f442:	0028      	movs	r0, r5
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	2800      	cmp	r0, #0
 800f448:	d004      	beq.n	800f454 <_fflush_r+0x20>
 800f44a:	6a03      	ldr	r3, [r0, #32]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <_fflush_r+0x20>
 800f450:	f7fd f9b0 	bl	800c7b4 <__sinit>
 800f454:	220c      	movs	r2, #12
 800f456:	5ea3      	ldrsh	r3, [r4, r2]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d0f1      	beq.n	800f440 <_fflush_r+0xc>
 800f45c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f45e:	07d2      	lsls	r2, r2, #31
 800f460:	d404      	bmi.n	800f46c <_fflush_r+0x38>
 800f462:	059b      	lsls	r3, r3, #22
 800f464:	d402      	bmi.n	800f46c <_fflush_r+0x38>
 800f466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f468:	f7fd fafd 	bl	800ca66 <__retarget_lock_acquire_recursive>
 800f46c:	0028      	movs	r0, r5
 800f46e:	0021      	movs	r1, r4
 800f470:	f7ff ff5a 	bl	800f328 <__sflush_r>
 800f474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f476:	0005      	movs	r5, r0
 800f478:	07db      	lsls	r3, r3, #31
 800f47a:	d4e2      	bmi.n	800f442 <_fflush_r+0xe>
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	059b      	lsls	r3, r3, #22
 800f480:	d4df      	bmi.n	800f442 <_fflush_r+0xe>
 800f482:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f484:	f7fd faf0 	bl	800ca68 <__retarget_lock_release_recursive>
 800f488:	e7db      	b.n	800f442 <_fflush_r+0xe>

0800f48a <memmove>:
 800f48a:	b510      	push	{r4, lr}
 800f48c:	4288      	cmp	r0, r1
 800f48e:	d806      	bhi.n	800f49e <memmove+0x14>
 800f490:	2300      	movs	r3, #0
 800f492:	429a      	cmp	r2, r3
 800f494:	d008      	beq.n	800f4a8 <memmove+0x1e>
 800f496:	5ccc      	ldrb	r4, [r1, r3]
 800f498:	54c4      	strb	r4, [r0, r3]
 800f49a:	3301      	adds	r3, #1
 800f49c:	e7f9      	b.n	800f492 <memmove+0x8>
 800f49e:	188b      	adds	r3, r1, r2
 800f4a0:	4298      	cmp	r0, r3
 800f4a2:	d2f5      	bcs.n	800f490 <memmove+0x6>
 800f4a4:	3a01      	subs	r2, #1
 800f4a6:	d200      	bcs.n	800f4aa <memmove+0x20>
 800f4a8:	bd10      	pop	{r4, pc}
 800f4aa:	5c8b      	ldrb	r3, [r1, r2]
 800f4ac:	5483      	strb	r3, [r0, r2]
 800f4ae:	e7f9      	b.n	800f4a4 <memmove+0x1a>

0800f4b0 <strncmp>:
 800f4b0:	b530      	push	{r4, r5, lr}
 800f4b2:	0005      	movs	r5, r0
 800f4b4:	1e10      	subs	r0, r2, #0
 800f4b6:	d00b      	beq.n	800f4d0 <strncmp+0x20>
 800f4b8:	2400      	movs	r4, #0
 800f4ba:	3a01      	subs	r2, #1
 800f4bc:	5d2b      	ldrb	r3, [r5, r4]
 800f4be:	5d08      	ldrb	r0, [r1, r4]
 800f4c0:	4283      	cmp	r3, r0
 800f4c2:	d104      	bne.n	800f4ce <strncmp+0x1e>
 800f4c4:	42a2      	cmp	r2, r4
 800f4c6:	d002      	beq.n	800f4ce <strncmp+0x1e>
 800f4c8:	3401      	adds	r4, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1f6      	bne.n	800f4bc <strncmp+0xc>
 800f4ce:	1a18      	subs	r0, r3, r0
 800f4d0:	bd30      	pop	{r4, r5, pc}
	...

0800f4d4 <_sbrk_r>:
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	4d06      	ldr	r5, [pc, #24]	@ (800f4f4 <_sbrk_r+0x20>)
 800f4da:	0004      	movs	r4, r0
 800f4dc:	0008      	movs	r0, r1
 800f4de:	602b      	str	r3, [r5, #0]
 800f4e0:	f7f5 fb5e 	bl	8004ba0 <_sbrk>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	d103      	bne.n	800f4f0 <_sbrk_r+0x1c>
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d000      	beq.n	800f4f0 <_sbrk_r+0x1c>
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	bd70      	pop	{r4, r5, r6, pc}
 800f4f2:	46c0      	nop			@ (mov r8, r8)
 800f4f4:	20000b84 	.word	0x20000b84

0800f4f8 <memcpy>:
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d100      	bne.n	800f502 <memcpy+0xa>
 800f500:	bd10      	pop	{r4, pc}
 800f502:	5ccc      	ldrb	r4, [r1, r3]
 800f504:	54c4      	strb	r4, [r0, r3]
 800f506:	3301      	adds	r3, #1
 800f508:	e7f8      	b.n	800f4fc <memcpy+0x4>
	...

0800f50c <nan>:
 800f50c:	2000      	movs	r0, #0
 800f50e:	4901      	ldr	r1, [pc, #4]	@ (800f514 <nan+0x8>)
 800f510:	4770      	bx	lr
 800f512:	46c0      	nop			@ (mov r8, r8)
 800f514:	7ff80000 	.word	0x7ff80000

0800f518 <__assert_func>:
 800f518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f51a:	0014      	movs	r4, r2
 800f51c:	001a      	movs	r2, r3
 800f51e:	4b09      	ldr	r3, [pc, #36]	@ (800f544 <__assert_func+0x2c>)
 800f520:	0005      	movs	r5, r0
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	000e      	movs	r6, r1
 800f526:	68d8      	ldr	r0, [r3, #12]
 800f528:	4b07      	ldr	r3, [pc, #28]	@ (800f548 <__assert_func+0x30>)
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	d101      	bne.n	800f532 <__assert_func+0x1a>
 800f52e:	4b07      	ldr	r3, [pc, #28]	@ (800f54c <__assert_func+0x34>)
 800f530:	001c      	movs	r4, r3
 800f532:	4907      	ldr	r1, [pc, #28]	@ (800f550 <__assert_func+0x38>)
 800f534:	9301      	str	r3, [sp, #4]
 800f536:	9402      	str	r4, [sp, #8]
 800f538:	002b      	movs	r3, r5
 800f53a:	9600      	str	r6, [sp, #0]
 800f53c:	f000 fbe0 	bl	800fd00 <fiprintf>
 800f540:	f000 fbee 	bl	800fd20 <abort>
 800f544:	20000040 	.word	0x20000040
 800f548:	08010caa 	.word	0x08010caa
 800f54c:	08010ce5 	.word	0x08010ce5
 800f550:	08010cb7 	.word	0x08010cb7

0800f554 <_calloc_r>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	0c0b      	lsrs	r3, r1, #16
 800f558:	0c15      	lsrs	r5, r2, #16
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d11e      	bne.n	800f59c <_calloc_r+0x48>
 800f55e:	2d00      	cmp	r5, #0
 800f560:	d10c      	bne.n	800f57c <_calloc_r+0x28>
 800f562:	b289      	uxth	r1, r1
 800f564:	b294      	uxth	r4, r2
 800f566:	434c      	muls	r4, r1
 800f568:	0021      	movs	r1, r4
 800f56a:	f7fe f985 	bl	800d878 <_malloc_r>
 800f56e:	1e05      	subs	r5, r0, #0
 800f570:	d01a      	beq.n	800f5a8 <_calloc_r+0x54>
 800f572:	0022      	movs	r2, r4
 800f574:	2100      	movs	r1, #0
 800f576:	f7fd f9f1 	bl	800c95c <memset>
 800f57a:	e016      	b.n	800f5aa <_calloc_r+0x56>
 800f57c:	1c2b      	adds	r3, r5, #0
 800f57e:	1c0c      	adds	r4, r1, #0
 800f580:	b289      	uxth	r1, r1
 800f582:	b292      	uxth	r2, r2
 800f584:	434a      	muls	r2, r1
 800f586:	b29b      	uxth	r3, r3
 800f588:	b2a1      	uxth	r1, r4
 800f58a:	4359      	muls	r1, r3
 800f58c:	0c14      	lsrs	r4, r2, #16
 800f58e:	190c      	adds	r4, r1, r4
 800f590:	0c23      	lsrs	r3, r4, #16
 800f592:	d107      	bne.n	800f5a4 <_calloc_r+0x50>
 800f594:	0424      	lsls	r4, r4, #16
 800f596:	b292      	uxth	r2, r2
 800f598:	4314      	orrs	r4, r2
 800f59a:	e7e5      	b.n	800f568 <_calloc_r+0x14>
 800f59c:	2d00      	cmp	r5, #0
 800f59e:	d101      	bne.n	800f5a4 <_calloc_r+0x50>
 800f5a0:	1c14      	adds	r4, r2, #0
 800f5a2:	e7ed      	b.n	800f580 <_calloc_r+0x2c>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	6003      	str	r3, [r0, #0]
 800f5a8:	2500      	movs	r5, #0
 800f5aa:	0028      	movs	r0, r5
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}

0800f5ae <rshift>:
 800f5ae:	0002      	movs	r2, r0
 800f5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5b2:	6904      	ldr	r4, [r0, #16]
 800f5b4:	b085      	sub	sp, #20
 800f5b6:	3214      	adds	r2, #20
 800f5b8:	114b      	asrs	r3, r1, #5
 800f5ba:	0016      	movs	r6, r2
 800f5bc:	9302      	str	r3, [sp, #8]
 800f5be:	429c      	cmp	r4, r3
 800f5c0:	dd31      	ble.n	800f626 <rshift+0x78>
 800f5c2:	261f      	movs	r6, #31
 800f5c4:	000f      	movs	r7, r1
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	00a5      	lsls	r5, r4, #2
 800f5ca:	18d3      	adds	r3, r2, r3
 800f5cc:	4037      	ands	r7, r6
 800f5ce:	1955      	adds	r5, r2, r5
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	9701      	str	r7, [sp, #4]
 800f5d4:	4231      	tst	r1, r6
 800f5d6:	d10d      	bne.n	800f5f4 <rshift+0x46>
 800f5d8:	0016      	movs	r6, r2
 800f5da:	0019      	movs	r1, r3
 800f5dc:	428d      	cmp	r5, r1
 800f5de:	d836      	bhi.n	800f64e <rshift+0xa0>
 800f5e0:	9b00      	ldr	r3, [sp, #0]
 800f5e2:	2600      	movs	r6, #0
 800f5e4:	3b03      	subs	r3, #3
 800f5e6:	429d      	cmp	r5, r3
 800f5e8:	d302      	bcc.n	800f5f0 <rshift+0x42>
 800f5ea:	9b02      	ldr	r3, [sp, #8]
 800f5ec:	1ae4      	subs	r4, r4, r3
 800f5ee:	00a6      	lsls	r6, r4, #2
 800f5f0:	1996      	adds	r6, r2, r6
 800f5f2:	e018      	b.n	800f626 <rshift+0x78>
 800f5f4:	2120      	movs	r1, #32
 800f5f6:	9e01      	ldr	r6, [sp, #4]
 800f5f8:	9f01      	ldr	r7, [sp, #4]
 800f5fa:	1b89      	subs	r1, r1, r6
 800f5fc:	9e00      	ldr	r6, [sp, #0]
 800f5fe:	9103      	str	r1, [sp, #12]
 800f600:	ce02      	ldmia	r6!, {r1}
 800f602:	4694      	mov	ip, r2
 800f604:	40f9      	lsrs	r1, r7
 800f606:	42b5      	cmp	r5, r6
 800f608:	d816      	bhi.n	800f638 <rshift+0x8a>
 800f60a:	9b00      	ldr	r3, [sp, #0]
 800f60c:	2600      	movs	r6, #0
 800f60e:	3301      	adds	r3, #1
 800f610:	429d      	cmp	r5, r3
 800f612:	d303      	bcc.n	800f61c <rshift+0x6e>
 800f614:	9b02      	ldr	r3, [sp, #8]
 800f616:	1ae4      	subs	r4, r4, r3
 800f618:	00a6      	lsls	r6, r4, #2
 800f61a:	3e04      	subs	r6, #4
 800f61c:	1996      	adds	r6, r2, r6
 800f61e:	6031      	str	r1, [r6, #0]
 800f620:	2900      	cmp	r1, #0
 800f622:	d000      	beq.n	800f626 <rshift+0x78>
 800f624:	3604      	adds	r6, #4
 800f626:	1ab1      	subs	r1, r6, r2
 800f628:	1089      	asrs	r1, r1, #2
 800f62a:	6101      	str	r1, [r0, #16]
 800f62c:	4296      	cmp	r6, r2
 800f62e:	d101      	bne.n	800f634 <rshift+0x86>
 800f630:	2300      	movs	r3, #0
 800f632:	6143      	str	r3, [r0, #20]
 800f634:	b005      	add	sp, #20
 800f636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f638:	6837      	ldr	r7, [r6, #0]
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	409f      	lsls	r7, r3
 800f63e:	430f      	orrs	r7, r1
 800f640:	4661      	mov	r1, ip
 800f642:	c180      	stmia	r1!, {r7}
 800f644:	468c      	mov	ip, r1
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	ce02      	ldmia	r6!, {r1}
 800f64a:	40d9      	lsrs	r1, r3
 800f64c:	e7db      	b.n	800f606 <rshift+0x58>
 800f64e:	c980      	ldmia	r1!, {r7}
 800f650:	c680      	stmia	r6!, {r7}
 800f652:	e7c3      	b.n	800f5dc <rshift+0x2e>

0800f654 <__hexdig_fun>:
 800f654:	0002      	movs	r2, r0
 800f656:	3a30      	subs	r2, #48	@ 0x30
 800f658:	0003      	movs	r3, r0
 800f65a:	2a09      	cmp	r2, #9
 800f65c:	d802      	bhi.n	800f664 <__hexdig_fun+0x10>
 800f65e:	3b20      	subs	r3, #32
 800f660:	b2d8      	uxtb	r0, r3
 800f662:	4770      	bx	lr
 800f664:	0002      	movs	r2, r0
 800f666:	3a61      	subs	r2, #97	@ 0x61
 800f668:	2a05      	cmp	r2, #5
 800f66a:	d801      	bhi.n	800f670 <__hexdig_fun+0x1c>
 800f66c:	3b47      	subs	r3, #71	@ 0x47
 800f66e:	e7f7      	b.n	800f660 <__hexdig_fun+0xc>
 800f670:	001a      	movs	r2, r3
 800f672:	3a41      	subs	r2, #65	@ 0x41
 800f674:	2000      	movs	r0, #0
 800f676:	2a05      	cmp	r2, #5
 800f678:	d8f3      	bhi.n	800f662 <__hexdig_fun+0xe>
 800f67a:	3b27      	subs	r3, #39	@ 0x27
 800f67c:	e7f0      	b.n	800f660 <__hexdig_fun+0xc>
	...

0800f680 <__gethex>:
 800f680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f682:	b089      	sub	sp, #36	@ 0x24
 800f684:	9307      	str	r3, [sp, #28]
 800f686:	680b      	ldr	r3, [r1, #0]
 800f688:	9201      	str	r2, [sp, #4]
 800f68a:	9003      	str	r0, [sp, #12]
 800f68c:	9106      	str	r1, [sp, #24]
 800f68e:	1c9a      	adds	r2, r3, #2
 800f690:	0011      	movs	r1, r2
 800f692:	3201      	adds	r2, #1
 800f694:	1e50      	subs	r0, r2, #1
 800f696:	7800      	ldrb	r0, [r0, #0]
 800f698:	2830      	cmp	r0, #48	@ 0x30
 800f69a:	d0f9      	beq.n	800f690 <__gethex+0x10>
 800f69c:	1acb      	subs	r3, r1, r3
 800f69e:	3b02      	subs	r3, #2
 800f6a0:	9305      	str	r3, [sp, #20]
 800f6a2:	9100      	str	r1, [sp, #0]
 800f6a4:	f7ff ffd6 	bl	800f654 <__hexdig_fun>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	001d      	movs	r5, r3
 800f6ac:	9302      	str	r3, [sp, #8]
 800f6ae:	4298      	cmp	r0, r3
 800f6b0:	d11e      	bne.n	800f6f0 <__gethex+0x70>
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	49a6      	ldr	r1, [pc, #664]	@ (800f950 <__gethex+0x2d0>)
 800f6b6:	9800      	ldr	r0, [sp, #0]
 800f6b8:	f7ff fefa 	bl	800f4b0 <strncmp>
 800f6bc:	0007      	movs	r7, r0
 800f6be:	42a8      	cmp	r0, r5
 800f6c0:	d000      	beq.n	800f6c4 <__gethex+0x44>
 800f6c2:	e06a      	b.n	800f79a <__gethex+0x11a>
 800f6c4:	9b00      	ldr	r3, [sp, #0]
 800f6c6:	7858      	ldrb	r0, [r3, #1]
 800f6c8:	1c5c      	adds	r4, r3, #1
 800f6ca:	f7ff ffc3 	bl	800f654 <__hexdig_fun>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	9302      	str	r3, [sp, #8]
 800f6d2:	42a8      	cmp	r0, r5
 800f6d4:	d02f      	beq.n	800f736 <__gethex+0xb6>
 800f6d6:	9400      	str	r4, [sp, #0]
 800f6d8:	9b00      	ldr	r3, [sp, #0]
 800f6da:	7818      	ldrb	r0, [r3, #0]
 800f6dc:	2830      	cmp	r0, #48	@ 0x30
 800f6de:	d009      	beq.n	800f6f4 <__gethex+0x74>
 800f6e0:	f7ff ffb8 	bl	800f654 <__hexdig_fun>
 800f6e4:	4242      	negs	r2, r0
 800f6e6:	4142      	adcs	r2, r0
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	0025      	movs	r5, r4
 800f6ec:	9202      	str	r2, [sp, #8]
 800f6ee:	9305      	str	r3, [sp, #20]
 800f6f0:	9c00      	ldr	r4, [sp, #0]
 800f6f2:	e004      	b.n	800f6fe <__gethex+0x7e>
 800f6f4:	9b00      	ldr	r3, [sp, #0]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	e7ed      	b.n	800f6d8 <__gethex+0x58>
 800f6fc:	3401      	adds	r4, #1
 800f6fe:	7820      	ldrb	r0, [r4, #0]
 800f700:	f7ff ffa8 	bl	800f654 <__hexdig_fun>
 800f704:	1e07      	subs	r7, r0, #0
 800f706:	d1f9      	bne.n	800f6fc <__gethex+0x7c>
 800f708:	2201      	movs	r2, #1
 800f70a:	0020      	movs	r0, r4
 800f70c:	4990      	ldr	r1, [pc, #576]	@ (800f950 <__gethex+0x2d0>)
 800f70e:	f7ff fecf 	bl	800f4b0 <strncmp>
 800f712:	2800      	cmp	r0, #0
 800f714:	d10d      	bne.n	800f732 <__gethex+0xb2>
 800f716:	2d00      	cmp	r5, #0
 800f718:	d106      	bne.n	800f728 <__gethex+0xa8>
 800f71a:	3401      	adds	r4, #1
 800f71c:	0025      	movs	r5, r4
 800f71e:	7820      	ldrb	r0, [r4, #0]
 800f720:	f7ff ff98 	bl	800f654 <__hexdig_fun>
 800f724:	2800      	cmp	r0, #0
 800f726:	d102      	bne.n	800f72e <__gethex+0xae>
 800f728:	1b2d      	subs	r5, r5, r4
 800f72a:	00af      	lsls	r7, r5, #2
 800f72c:	e003      	b.n	800f736 <__gethex+0xb6>
 800f72e:	3401      	adds	r4, #1
 800f730:	e7f5      	b.n	800f71e <__gethex+0x9e>
 800f732:	2d00      	cmp	r5, #0
 800f734:	d1f8      	bne.n	800f728 <__gethex+0xa8>
 800f736:	2220      	movs	r2, #32
 800f738:	7823      	ldrb	r3, [r4, #0]
 800f73a:	0026      	movs	r6, r4
 800f73c:	4393      	bics	r3, r2
 800f73e:	2b50      	cmp	r3, #80	@ 0x50
 800f740:	d11d      	bne.n	800f77e <__gethex+0xfe>
 800f742:	7863      	ldrb	r3, [r4, #1]
 800f744:	2b2b      	cmp	r3, #43	@ 0x2b
 800f746:	d02d      	beq.n	800f7a4 <__gethex+0x124>
 800f748:	2b2d      	cmp	r3, #45	@ 0x2d
 800f74a:	d02f      	beq.n	800f7ac <__gethex+0x12c>
 800f74c:	2300      	movs	r3, #0
 800f74e:	1c66      	adds	r6, r4, #1
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	7830      	ldrb	r0, [r6, #0]
 800f754:	f7ff ff7e 	bl	800f654 <__hexdig_fun>
 800f758:	1e43      	subs	r3, r0, #1
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	0005      	movs	r5, r0
 800f75e:	2b18      	cmp	r3, #24
 800f760:	d82a      	bhi.n	800f7b8 <__gethex+0x138>
 800f762:	7870      	ldrb	r0, [r6, #1]
 800f764:	f7ff ff76 	bl	800f654 <__hexdig_fun>
 800f768:	1e43      	subs	r3, r0, #1
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	3601      	adds	r6, #1
 800f76e:	3d10      	subs	r5, #16
 800f770:	2b18      	cmp	r3, #24
 800f772:	d91d      	bls.n	800f7b0 <__gethex+0x130>
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d000      	beq.n	800f77c <__gethex+0xfc>
 800f77a:	426d      	negs	r5, r5
 800f77c:	197f      	adds	r7, r7, r5
 800f77e:	9b06      	ldr	r3, [sp, #24]
 800f780:	601e      	str	r6, [r3, #0]
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d019      	beq.n	800f7bc <__gethex+0x13c>
 800f788:	9b05      	ldr	r3, [sp, #20]
 800f78a:	2606      	movs	r6, #6
 800f78c:	425a      	negs	r2, r3
 800f78e:	4153      	adcs	r3, r2
 800f790:	425b      	negs	r3, r3
 800f792:	401e      	ands	r6, r3
 800f794:	0030      	movs	r0, r6
 800f796:	b009      	add	sp, #36	@ 0x24
 800f798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f79a:	2301      	movs	r3, #1
 800f79c:	2700      	movs	r7, #0
 800f79e:	9c00      	ldr	r4, [sp, #0]
 800f7a0:	9302      	str	r3, [sp, #8]
 800f7a2:	e7c8      	b.n	800f736 <__gethex+0xb6>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	1ca6      	adds	r6, r4, #2
 800f7aa:	e7d2      	b.n	800f752 <__gethex+0xd2>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e7fa      	b.n	800f7a6 <__gethex+0x126>
 800f7b0:	230a      	movs	r3, #10
 800f7b2:	435d      	muls	r5, r3
 800f7b4:	182d      	adds	r5, r5, r0
 800f7b6:	e7d4      	b.n	800f762 <__gethex+0xe2>
 800f7b8:	0026      	movs	r6, r4
 800f7ba:	e7e0      	b.n	800f77e <__gethex+0xfe>
 800f7bc:	9b00      	ldr	r3, [sp, #0]
 800f7be:	9902      	ldr	r1, [sp, #8]
 800f7c0:	1ae3      	subs	r3, r4, r3
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	2b07      	cmp	r3, #7
 800f7c6:	dc0a      	bgt.n	800f7de <__gethex+0x15e>
 800f7c8:	9803      	ldr	r0, [sp, #12]
 800f7ca:	f7fe f8e5 	bl	800d998 <_Balloc>
 800f7ce:	1e05      	subs	r5, r0, #0
 800f7d0:	d108      	bne.n	800f7e4 <__gethex+0x164>
 800f7d2:	002a      	movs	r2, r5
 800f7d4:	21e4      	movs	r1, #228	@ 0xe4
 800f7d6:	4b5f      	ldr	r3, [pc, #380]	@ (800f954 <__gethex+0x2d4>)
 800f7d8:	485f      	ldr	r0, [pc, #380]	@ (800f958 <__gethex+0x2d8>)
 800f7da:	f7ff fe9d 	bl	800f518 <__assert_func>
 800f7de:	3101      	adds	r1, #1
 800f7e0:	105b      	asrs	r3, r3, #1
 800f7e2:	e7ef      	b.n	800f7c4 <__gethex+0x144>
 800f7e4:	0003      	movs	r3, r0
 800f7e6:	3314      	adds	r3, #20
 800f7e8:	9302      	str	r3, [sp, #8]
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	001e      	movs	r6, r3
 800f7f0:	9304      	str	r3, [sp, #16]
 800f7f2:	9b00      	ldr	r3, [sp, #0]
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	d338      	bcc.n	800f86a <__gethex+0x1ea>
 800f7f8:	9c05      	ldr	r4, [sp, #20]
 800f7fa:	9b02      	ldr	r3, [sp, #8]
 800f7fc:	c440      	stmia	r4!, {r6}
 800f7fe:	1ae4      	subs	r4, r4, r3
 800f800:	10a4      	asrs	r4, r4, #2
 800f802:	0030      	movs	r0, r6
 800f804:	612c      	str	r4, [r5, #16]
 800f806:	f7fe f9bf 	bl	800db88 <__hi0bits>
 800f80a:	9b01      	ldr	r3, [sp, #4]
 800f80c:	0164      	lsls	r4, r4, #5
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	1a26      	subs	r6, r4, r0
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	429e      	cmp	r6, r3
 800f816:	dd52      	ble.n	800f8be <__gethex+0x23e>
 800f818:	1af6      	subs	r6, r6, r3
 800f81a:	0031      	movs	r1, r6
 800f81c:	0028      	movs	r0, r5
 800f81e:	f7fe fd62 	bl	800e2e6 <__any_on>
 800f822:	1e04      	subs	r4, r0, #0
 800f824:	d00f      	beq.n	800f846 <__gethex+0x1c6>
 800f826:	2401      	movs	r4, #1
 800f828:	231f      	movs	r3, #31
 800f82a:	0020      	movs	r0, r4
 800f82c:	1e72      	subs	r2, r6, #1
 800f82e:	4013      	ands	r3, r2
 800f830:	4098      	lsls	r0, r3
 800f832:	0003      	movs	r3, r0
 800f834:	1151      	asrs	r1, r2, #5
 800f836:	9802      	ldr	r0, [sp, #8]
 800f838:	0089      	lsls	r1, r1, #2
 800f83a:	5809      	ldr	r1, [r1, r0]
 800f83c:	4219      	tst	r1, r3
 800f83e:	d002      	beq.n	800f846 <__gethex+0x1c6>
 800f840:	42a2      	cmp	r2, r4
 800f842:	dc34      	bgt.n	800f8ae <__gethex+0x22e>
 800f844:	2402      	movs	r4, #2
 800f846:	0031      	movs	r1, r6
 800f848:	0028      	movs	r0, r5
 800f84a:	f7ff feb0 	bl	800f5ae <rshift>
 800f84e:	19bf      	adds	r7, r7, r6
 800f850:	9b01      	ldr	r3, [sp, #4]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	42bb      	cmp	r3, r7
 800f856:	da42      	bge.n	800f8de <__gethex+0x25e>
 800f858:	0029      	movs	r1, r5
 800f85a:	9803      	ldr	r0, [sp, #12]
 800f85c:	f7fe f8e0 	bl	800da20 <_Bfree>
 800f860:	2300      	movs	r3, #0
 800f862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f864:	26a3      	movs	r6, #163	@ 0xa3
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	e794      	b.n	800f794 <__gethex+0x114>
 800f86a:	3c01      	subs	r4, #1
 800f86c:	7823      	ldrb	r3, [r4, #0]
 800f86e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f870:	d012      	beq.n	800f898 <__gethex+0x218>
 800f872:	9b04      	ldr	r3, [sp, #16]
 800f874:	2b20      	cmp	r3, #32
 800f876:	d104      	bne.n	800f882 <__gethex+0x202>
 800f878:	9b05      	ldr	r3, [sp, #20]
 800f87a:	c340      	stmia	r3!, {r6}
 800f87c:	2600      	movs	r6, #0
 800f87e:	9305      	str	r3, [sp, #20]
 800f880:	9604      	str	r6, [sp, #16]
 800f882:	7820      	ldrb	r0, [r4, #0]
 800f884:	f7ff fee6 	bl	800f654 <__hexdig_fun>
 800f888:	230f      	movs	r3, #15
 800f88a:	4018      	ands	r0, r3
 800f88c:	9b04      	ldr	r3, [sp, #16]
 800f88e:	4098      	lsls	r0, r3
 800f890:	3304      	adds	r3, #4
 800f892:	4306      	orrs	r6, r0
 800f894:	9304      	str	r3, [sp, #16]
 800f896:	e7ac      	b.n	800f7f2 <__gethex+0x172>
 800f898:	9b00      	ldr	r3, [sp, #0]
 800f89a:	42a3      	cmp	r3, r4
 800f89c:	d8e9      	bhi.n	800f872 <__gethex+0x1f2>
 800f89e:	2201      	movs	r2, #1
 800f8a0:	0020      	movs	r0, r4
 800f8a2:	492b      	ldr	r1, [pc, #172]	@ (800f950 <__gethex+0x2d0>)
 800f8a4:	f7ff fe04 	bl	800f4b0 <strncmp>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d1e2      	bne.n	800f872 <__gethex+0x1f2>
 800f8ac:	e7a1      	b.n	800f7f2 <__gethex+0x172>
 800f8ae:	0028      	movs	r0, r5
 800f8b0:	1eb1      	subs	r1, r6, #2
 800f8b2:	f7fe fd18 	bl	800e2e6 <__any_on>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d0c4      	beq.n	800f844 <__gethex+0x1c4>
 800f8ba:	2403      	movs	r4, #3
 800f8bc:	e7c3      	b.n	800f846 <__gethex+0x1c6>
 800f8be:	9b00      	ldr	r3, [sp, #0]
 800f8c0:	2400      	movs	r4, #0
 800f8c2:	429e      	cmp	r6, r3
 800f8c4:	dac4      	bge.n	800f850 <__gethex+0x1d0>
 800f8c6:	1b9e      	subs	r6, r3, r6
 800f8c8:	0029      	movs	r1, r5
 800f8ca:	0032      	movs	r2, r6
 800f8cc:	9803      	ldr	r0, [sp, #12]
 800f8ce:	f7fe fad1 	bl	800de74 <__lshift>
 800f8d2:	0003      	movs	r3, r0
 800f8d4:	3314      	adds	r3, #20
 800f8d6:	0005      	movs	r5, r0
 800f8d8:	1bbf      	subs	r7, r7, r6
 800f8da:	9302      	str	r3, [sp, #8]
 800f8dc:	e7b8      	b.n	800f850 <__gethex+0x1d0>
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	685e      	ldr	r6, [r3, #4]
 800f8e2:	42be      	cmp	r6, r7
 800f8e4:	dd6f      	ble.n	800f9c6 <__gethex+0x346>
 800f8e6:	9b00      	ldr	r3, [sp, #0]
 800f8e8:	1bf6      	subs	r6, r6, r7
 800f8ea:	42b3      	cmp	r3, r6
 800f8ec:	dc36      	bgt.n	800f95c <__gethex+0x2dc>
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d024      	beq.n	800f940 <__gethex+0x2c0>
 800f8f6:	2b03      	cmp	r3, #3
 800f8f8:	d026      	beq.n	800f948 <__gethex+0x2c8>
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d117      	bne.n	800f92e <__gethex+0x2ae>
 800f8fe:	9b00      	ldr	r3, [sp, #0]
 800f900:	42b3      	cmp	r3, r6
 800f902:	d114      	bne.n	800f92e <__gethex+0x2ae>
 800f904:	2b01      	cmp	r3, #1
 800f906:	d10b      	bne.n	800f920 <__gethex+0x2a0>
 800f908:	9b01      	ldr	r3, [sp, #4]
 800f90a:	9a07      	ldr	r2, [sp, #28]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	2662      	movs	r6, #98	@ 0x62
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	2301      	movs	r3, #1
 800f914:	9a02      	ldr	r2, [sp, #8]
 800f916:	612b      	str	r3, [r5, #16]
 800f918:	6013      	str	r3, [r2, #0]
 800f91a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f91c:	601d      	str	r5, [r3, #0]
 800f91e:	e739      	b.n	800f794 <__gethex+0x114>
 800f920:	9900      	ldr	r1, [sp, #0]
 800f922:	0028      	movs	r0, r5
 800f924:	3901      	subs	r1, #1
 800f926:	f7fe fcde 	bl	800e2e6 <__any_on>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1ec      	bne.n	800f908 <__gethex+0x288>
 800f92e:	0029      	movs	r1, r5
 800f930:	9803      	ldr	r0, [sp, #12]
 800f932:	f7fe f875 	bl	800da20 <_Bfree>
 800f936:	2300      	movs	r3, #0
 800f938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f93a:	2650      	movs	r6, #80	@ 0x50
 800f93c:	6013      	str	r3, [r2, #0]
 800f93e:	e729      	b.n	800f794 <__gethex+0x114>
 800f940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1f3      	bne.n	800f92e <__gethex+0x2ae>
 800f946:	e7df      	b.n	800f908 <__gethex+0x288>
 800f948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1dc      	bne.n	800f908 <__gethex+0x288>
 800f94e:	e7ee      	b.n	800f92e <__gethex+0x2ae>
 800f950:	08010b38 	.word	0x08010b38
 800f954:	080109cd 	.word	0x080109cd
 800f958:	08010ce6 	.word	0x08010ce6
 800f95c:	1e77      	subs	r7, r6, #1
 800f95e:	2c00      	cmp	r4, #0
 800f960:	d12f      	bne.n	800f9c2 <__gethex+0x342>
 800f962:	2f00      	cmp	r7, #0
 800f964:	d004      	beq.n	800f970 <__gethex+0x2f0>
 800f966:	0039      	movs	r1, r7
 800f968:	0028      	movs	r0, r5
 800f96a:	f7fe fcbc 	bl	800e2e6 <__any_on>
 800f96e:	0004      	movs	r4, r0
 800f970:	231f      	movs	r3, #31
 800f972:	117a      	asrs	r2, r7, #5
 800f974:	401f      	ands	r7, r3
 800f976:	3b1e      	subs	r3, #30
 800f978:	40bb      	lsls	r3, r7
 800f97a:	9902      	ldr	r1, [sp, #8]
 800f97c:	0092      	lsls	r2, r2, #2
 800f97e:	5852      	ldr	r2, [r2, r1]
 800f980:	421a      	tst	r2, r3
 800f982:	d001      	beq.n	800f988 <__gethex+0x308>
 800f984:	2302      	movs	r3, #2
 800f986:	431c      	orrs	r4, r3
 800f988:	9b00      	ldr	r3, [sp, #0]
 800f98a:	0031      	movs	r1, r6
 800f98c:	1b9b      	subs	r3, r3, r6
 800f98e:	2602      	movs	r6, #2
 800f990:	0028      	movs	r0, r5
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	f7ff fe0b 	bl	800f5ae <rshift>
 800f998:	9b01      	ldr	r3, [sp, #4]
 800f99a:	685f      	ldr	r7, [r3, #4]
 800f99c:	2c00      	cmp	r4, #0
 800f99e:	d03f      	beq.n	800fa20 <__gethex+0x3a0>
 800f9a0:	9b01      	ldr	r3, [sp, #4]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	d010      	beq.n	800f9ca <__gethex+0x34a>
 800f9a8:	2b03      	cmp	r3, #3
 800f9aa:	d012      	beq.n	800f9d2 <__gethex+0x352>
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d106      	bne.n	800f9be <__gethex+0x33e>
 800f9b0:	07a2      	lsls	r2, r4, #30
 800f9b2:	d504      	bpl.n	800f9be <__gethex+0x33e>
 800f9b4:	9a02      	ldr	r2, [sp, #8]
 800f9b6:	6812      	ldr	r2, [r2, #0]
 800f9b8:	4314      	orrs	r4, r2
 800f9ba:	421c      	tst	r4, r3
 800f9bc:	d10c      	bne.n	800f9d8 <__gethex+0x358>
 800f9be:	2310      	movs	r3, #16
 800f9c0:	e02d      	b.n	800fa1e <__gethex+0x39e>
 800f9c2:	2401      	movs	r4, #1
 800f9c4:	e7d4      	b.n	800f970 <__gethex+0x2f0>
 800f9c6:	2601      	movs	r6, #1
 800f9c8:	e7e8      	b.n	800f99c <__gethex+0x31c>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f9ce:	1a9b      	subs	r3, r3, r2
 800f9d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d0f2      	beq.n	800f9be <__gethex+0x33e>
 800f9d8:	692b      	ldr	r3, [r5, #16]
 800f9da:	2000      	movs	r0, #0
 800f9dc:	9302      	str	r3, [sp, #8]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	9304      	str	r3, [sp, #16]
 800f9e2:	002b      	movs	r3, r5
 800f9e4:	9a04      	ldr	r2, [sp, #16]
 800f9e6:	3314      	adds	r3, #20
 800f9e8:	1899      	adds	r1, r3, r2
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	1c54      	adds	r4, r2, #1
 800f9ee:	d01c      	beq.n	800fa2a <__gethex+0x3aa>
 800f9f0:	3201      	adds	r2, #1
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	002b      	movs	r3, r5
 800f9f6:	3314      	adds	r3, #20
 800f9f8:	2e02      	cmp	r6, #2
 800f9fa:	d13f      	bne.n	800fa7c <__gethex+0x3fc>
 800f9fc:	9a01      	ldr	r2, [sp, #4]
 800f9fe:	9900      	ldr	r1, [sp, #0]
 800fa00:	6812      	ldr	r2, [r2, #0]
 800fa02:	3a01      	subs	r2, #1
 800fa04:	428a      	cmp	r2, r1
 800fa06:	d109      	bne.n	800fa1c <__gethex+0x39c>
 800fa08:	000a      	movs	r2, r1
 800fa0a:	201f      	movs	r0, #31
 800fa0c:	4010      	ands	r0, r2
 800fa0e:	2201      	movs	r2, #1
 800fa10:	4082      	lsls	r2, r0
 800fa12:	1149      	asrs	r1, r1, #5
 800fa14:	0089      	lsls	r1, r1, #2
 800fa16:	58cb      	ldr	r3, [r1, r3]
 800fa18:	4213      	tst	r3, r2
 800fa1a:	d13d      	bne.n	800fa98 <__gethex+0x418>
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	431e      	orrs	r6, r3
 800fa20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa22:	601d      	str	r5, [r3, #0]
 800fa24:	9b07      	ldr	r3, [sp, #28]
 800fa26:	601f      	str	r7, [r3, #0]
 800fa28:	e6b4      	b.n	800f794 <__gethex+0x114>
 800fa2a:	c301      	stmia	r3!, {r0}
 800fa2c:	4299      	cmp	r1, r3
 800fa2e:	d8dc      	bhi.n	800f9ea <__gethex+0x36a>
 800fa30:	68ab      	ldr	r3, [r5, #8]
 800fa32:	9a02      	ldr	r2, [sp, #8]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	db18      	blt.n	800fa6a <__gethex+0x3ea>
 800fa38:	6869      	ldr	r1, [r5, #4]
 800fa3a:	9803      	ldr	r0, [sp, #12]
 800fa3c:	3101      	adds	r1, #1
 800fa3e:	f7fd ffab 	bl	800d998 <_Balloc>
 800fa42:	1e04      	subs	r4, r0, #0
 800fa44:	d104      	bne.n	800fa50 <__gethex+0x3d0>
 800fa46:	0022      	movs	r2, r4
 800fa48:	2184      	movs	r1, #132	@ 0x84
 800fa4a:	4b1d      	ldr	r3, [pc, #116]	@ (800fac0 <__gethex+0x440>)
 800fa4c:	481d      	ldr	r0, [pc, #116]	@ (800fac4 <__gethex+0x444>)
 800fa4e:	e6c4      	b.n	800f7da <__gethex+0x15a>
 800fa50:	0029      	movs	r1, r5
 800fa52:	692a      	ldr	r2, [r5, #16]
 800fa54:	310c      	adds	r1, #12
 800fa56:	3202      	adds	r2, #2
 800fa58:	0092      	lsls	r2, r2, #2
 800fa5a:	300c      	adds	r0, #12
 800fa5c:	f7ff fd4c 	bl	800f4f8 <memcpy>
 800fa60:	0029      	movs	r1, r5
 800fa62:	9803      	ldr	r0, [sp, #12]
 800fa64:	f7fd ffdc 	bl	800da20 <_Bfree>
 800fa68:	0025      	movs	r5, r4
 800fa6a:	692b      	ldr	r3, [r5, #16]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	612a      	str	r2, [r5, #16]
 800fa70:	2201      	movs	r2, #1
 800fa72:	3304      	adds	r3, #4
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	18eb      	adds	r3, r5, r3
 800fa78:	605a      	str	r2, [r3, #4]
 800fa7a:	e7bb      	b.n	800f9f4 <__gethex+0x374>
 800fa7c:	692a      	ldr	r2, [r5, #16]
 800fa7e:	9902      	ldr	r1, [sp, #8]
 800fa80:	428a      	cmp	r2, r1
 800fa82:	dd0b      	ble.n	800fa9c <__gethex+0x41c>
 800fa84:	2101      	movs	r1, #1
 800fa86:	0028      	movs	r0, r5
 800fa88:	f7ff fd91 	bl	800f5ae <rshift>
 800fa8c:	9b01      	ldr	r3, [sp, #4]
 800fa8e:	3701      	adds	r7, #1
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	42bb      	cmp	r3, r7
 800fa94:	da00      	bge.n	800fa98 <__gethex+0x418>
 800fa96:	e6df      	b.n	800f858 <__gethex+0x1d8>
 800fa98:	2601      	movs	r6, #1
 800fa9a:	e7bf      	b.n	800fa1c <__gethex+0x39c>
 800fa9c:	221f      	movs	r2, #31
 800fa9e:	9c00      	ldr	r4, [sp, #0]
 800faa0:	9900      	ldr	r1, [sp, #0]
 800faa2:	4014      	ands	r4, r2
 800faa4:	4211      	tst	r1, r2
 800faa6:	d0f7      	beq.n	800fa98 <__gethex+0x418>
 800faa8:	9a04      	ldr	r2, [sp, #16]
 800faaa:	189b      	adds	r3, r3, r2
 800faac:	3b04      	subs	r3, #4
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	f7fe f86a 	bl	800db88 <__hi0bits>
 800fab4:	2320      	movs	r3, #32
 800fab6:	1b1b      	subs	r3, r3, r4
 800fab8:	4298      	cmp	r0, r3
 800faba:	dbe3      	blt.n	800fa84 <__gethex+0x404>
 800fabc:	e7ec      	b.n	800fa98 <__gethex+0x418>
 800fabe:	46c0      	nop			@ (mov r8, r8)
 800fac0:	080109cd 	.word	0x080109cd
 800fac4:	08010ce6 	.word	0x08010ce6

0800fac8 <L_shift>:
 800fac8:	2308      	movs	r3, #8
 800faca:	b570      	push	{r4, r5, r6, lr}
 800facc:	2520      	movs	r5, #32
 800face:	1a9a      	subs	r2, r3, r2
 800fad0:	0092      	lsls	r2, r2, #2
 800fad2:	1aad      	subs	r5, r5, r2
 800fad4:	6843      	ldr	r3, [r0, #4]
 800fad6:	6804      	ldr	r4, [r0, #0]
 800fad8:	001e      	movs	r6, r3
 800fada:	40ae      	lsls	r6, r5
 800fadc:	40d3      	lsrs	r3, r2
 800fade:	4334      	orrs	r4, r6
 800fae0:	6004      	str	r4, [r0, #0]
 800fae2:	6043      	str	r3, [r0, #4]
 800fae4:	3004      	adds	r0, #4
 800fae6:	4288      	cmp	r0, r1
 800fae8:	d3f4      	bcc.n	800fad4 <L_shift+0xc>
 800faea:	bd70      	pop	{r4, r5, r6, pc}

0800faec <__match>:
 800faec:	b530      	push	{r4, r5, lr}
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	780c      	ldrb	r4, [r1, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	d102      	bne.n	800fafe <__match+0x12>
 800faf8:	6003      	str	r3, [r0, #0]
 800fafa:	2001      	movs	r0, #1
 800fafc:	bd30      	pop	{r4, r5, pc}
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	0015      	movs	r5, r2
 800fb02:	3d41      	subs	r5, #65	@ 0x41
 800fb04:	2d19      	cmp	r5, #25
 800fb06:	d800      	bhi.n	800fb0a <__match+0x1e>
 800fb08:	3220      	adds	r2, #32
 800fb0a:	3101      	adds	r1, #1
 800fb0c:	42a2      	cmp	r2, r4
 800fb0e:	d0ef      	beq.n	800faf0 <__match+0x4>
 800fb10:	2000      	movs	r0, #0
 800fb12:	e7f3      	b.n	800fafc <__match+0x10>

0800fb14 <__hexnan>:
 800fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb16:	680b      	ldr	r3, [r1, #0]
 800fb18:	b08b      	sub	sp, #44	@ 0x2c
 800fb1a:	9201      	str	r2, [sp, #4]
 800fb1c:	9901      	ldr	r1, [sp, #4]
 800fb1e:	115a      	asrs	r2, r3, #5
 800fb20:	0092      	lsls	r2, r2, #2
 800fb22:	188a      	adds	r2, r1, r2
 800fb24:	9202      	str	r2, [sp, #8]
 800fb26:	0019      	movs	r1, r3
 800fb28:	221f      	movs	r2, #31
 800fb2a:	4011      	ands	r1, r2
 800fb2c:	9008      	str	r0, [sp, #32]
 800fb2e:	9106      	str	r1, [sp, #24]
 800fb30:	4213      	tst	r3, r2
 800fb32:	d002      	beq.n	800fb3a <__hexnan+0x26>
 800fb34:	9b02      	ldr	r3, [sp, #8]
 800fb36:	3304      	adds	r3, #4
 800fb38:	9302      	str	r3, [sp, #8]
 800fb3a:	9b02      	ldr	r3, [sp, #8]
 800fb3c:	2500      	movs	r5, #0
 800fb3e:	1f1f      	subs	r7, r3, #4
 800fb40:	003e      	movs	r6, r7
 800fb42:	003c      	movs	r4, r7
 800fb44:	9b08      	ldr	r3, [sp, #32]
 800fb46:	603d      	str	r5, [r7, #0]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	9507      	str	r5, [sp, #28]
 800fb4c:	9305      	str	r3, [sp, #20]
 800fb4e:	9503      	str	r5, [sp, #12]
 800fb50:	9b05      	ldr	r3, [sp, #20]
 800fb52:	3301      	adds	r3, #1
 800fb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb56:	9b05      	ldr	r3, [sp, #20]
 800fb58:	785b      	ldrb	r3, [r3, #1]
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d028      	beq.n	800fbb2 <__hexnan+0x9e>
 800fb60:	9804      	ldr	r0, [sp, #16]
 800fb62:	f7ff fd77 	bl	800f654 <__hexdig_fun>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d155      	bne.n	800fc16 <__hexnan+0x102>
 800fb6a:	9b04      	ldr	r3, [sp, #16]
 800fb6c:	2b20      	cmp	r3, #32
 800fb6e:	d819      	bhi.n	800fba4 <__hexnan+0x90>
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	9a07      	ldr	r2, [sp, #28]
 800fb74:	4293      	cmp	r3, r2
 800fb76:	dd12      	ble.n	800fb9e <__hexnan+0x8a>
 800fb78:	42b4      	cmp	r4, r6
 800fb7a:	d206      	bcs.n	800fb8a <__hexnan+0x76>
 800fb7c:	2d07      	cmp	r5, #7
 800fb7e:	dc04      	bgt.n	800fb8a <__hexnan+0x76>
 800fb80:	002a      	movs	r2, r5
 800fb82:	0031      	movs	r1, r6
 800fb84:	0020      	movs	r0, r4
 800fb86:	f7ff ff9f 	bl	800fac8 <L_shift>
 800fb8a:	9b01      	ldr	r3, [sp, #4]
 800fb8c:	2508      	movs	r5, #8
 800fb8e:	429c      	cmp	r4, r3
 800fb90:	d905      	bls.n	800fb9e <__hexnan+0x8a>
 800fb92:	1f26      	subs	r6, r4, #4
 800fb94:	2500      	movs	r5, #0
 800fb96:	0034      	movs	r4, r6
 800fb98:	9b03      	ldr	r3, [sp, #12]
 800fb9a:	6035      	str	r5, [r6, #0]
 800fb9c:	9307      	str	r3, [sp, #28]
 800fb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba0:	9305      	str	r3, [sp, #20]
 800fba2:	e7d5      	b.n	800fb50 <__hexnan+0x3c>
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	2b29      	cmp	r3, #41	@ 0x29
 800fba8:	d15a      	bne.n	800fc60 <__hexnan+0x14c>
 800fbaa:	9b05      	ldr	r3, [sp, #20]
 800fbac:	9a08      	ldr	r2, [sp, #32]
 800fbae:	3302      	adds	r3, #2
 800fbb0:	6013      	str	r3, [r2, #0]
 800fbb2:	9b03      	ldr	r3, [sp, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d053      	beq.n	800fc60 <__hexnan+0x14c>
 800fbb8:	42b4      	cmp	r4, r6
 800fbba:	d206      	bcs.n	800fbca <__hexnan+0xb6>
 800fbbc:	2d07      	cmp	r5, #7
 800fbbe:	dc04      	bgt.n	800fbca <__hexnan+0xb6>
 800fbc0:	002a      	movs	r2, r5
 800fbc2:	0031      	movs	r1, r6
 800fbc4:	0020      	movs	r0, r4
 800fbc6:	f7ff ff7f 	bl	800fac8 <L_shift>
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	429c      	cmp	r4, r3
 800fbce:	d936      	bls.n	800fc3e <__hexnan+0x12a>
 800fbd0:	001a      	movs	r2, r3
 800fbd2:	0023      	movs	r3, r4
 800fbd4:	cb02      	ldmia	r3!, {r1}
 800fbd6:	c202      	stmia	r2!, {r1}
 800fbd8:	429f      	cmp	r7, r3
 800fbda:	d2fb      	bcs.n	800fbd4 <__hexnan+0xc0>
 800fbdc:	9b02      	ldr	r3, [sp, #8]
 800fbde:	1c61      	adds	r1, r4, #1
 800fbe0:	1eda      	subs	r2, r3, #3
 800fbe2:	2304      	movs	r3, #4
 800fbe4:	4291      	cmp	r1, r2
 800fbe6:	d805      	bhi.n	800fbf4 <__hexnan+0xe0>
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	3b04      	subs	r3, #4
 800fbec:	1b1b      	subs	r3, r3, r4
 800fbee:	089b      	lsrs	r3, r3, #2
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	9a01      	ldr	r2, [sp, #4]
 800fbf6:	18d3      	adds	r3, r2, r3
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	c304      	stmia	r3!, {r2}
 800fbfc:	429f      	cmp	r7, r3
 800fbfe:	d2fc      	bcs.n	800fbfa <__hexnan+0xe6>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d104      	bne.n	800fc10 <__hexnan+0xfc>
 800fc06:	9b01      	ldr	r3, [sp, #4]
 800fc08:	429f      	cmp	r7, r3
 800fc0a:	d127      	bne.n	800fc5c <__hexnan+0x148>
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	603b      	str	r3, [r7, #0]
 800fc10:	2005      	movs	r0, #5
 800fc12:	b00b      	add	sp, #44	@ 0x2c
 800fc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc16:	9b03      	ldr	r3, [sp, #12]
 800fc18:	3501      	adds	r5, #1
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	9303      	str	r3, [sp, #12]
 800fc1e:	2d08      	cmp	r5, #8
 800fc20:	dd06      	ble.n	800fc30 <__hexnan+0x11c>
 800fc22:	9b01      	ldr	r3, [sp, #4]
 800fc24:	429c      	cmp	r4, r3
 800fc26:	d9ba      	bls.n	800fb9e <__hexnan+0x8a>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	2501      	movs	r5, #1
 800fc2c:	3c04      	subs	r4, #4
 800fc2e:	6023      	str	r3, [r4, #0]
 800fc30:	220f      	movs	r2, #15
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	4010      	ands	r0, r2
 800fc36:	011b      	lsls	r3, r3, #4
 800fc38:	4303      	orrs	r3, r0
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	e7af      	b.n	800fb9e <__hexnan+0x8a>
 800fc3e:	9b06      	ldr	r3, [sp, #24]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d0dd      	beq.n	800fc00 <__hexnan+0xec>
 800fc44:	2320      	movs	r3, #32
 800fc46:	9a06      	ldr	r2, [sp, #24]
 800fc48:	9902      	ldr	r1, [sp, #8]
 800fc4a:	1a9b      	subs	r3, r3, r2
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	4252      	negs	r2, r2
 800fc50:	40da      	lsrs	r2, r3
 800fc52:	3904      	subs	r1, #4
 800fc54:	680b      	ldr	r3, [r1, #0]
 800fc56:	4013      	ands	r3, r2
 800fc58:	600b      	str	r3, [r1, #0]
 800fc5a:	e7d1      	b.n	800fc00 <__hexnan+0xec>
 800fc5c:	3f04      	subs	r7, #4
 800fc5e:	e7cf      	b.n	800fc00 <__hexnan+0xec>
 800fc60:	2004      	movs	r0, #4
 800fc62:	e7d6      	b.n	800fc12 <__hexnan+0xfe>

0800fc64 <__ascii_mbtowc>:
 800fc64:	b082      	sub	sp, #8
 800fc66:	2900      	cmp	r1, #0
 800fc68:	d100      	bne.n	800fc6c <__ascii_mbtowc+0x8>
 800fc6a:	a901      	add	r1, sp, #4
 800fc6c:	1e10      	subs	r0, r2, #0
 800fc6e:	d006      	beq.n	800fc7e <__ascii_mbtowc+0x1a>
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d006      	beq.n	800fc82 <__ascii_mbtowc+0x1e>
 800fc74:	7813      	ldrb	r3, [r2, #0]
 800fc76:	600b      	str	r3, [r1, #0]
 800fc78:	7810      	ldrb	r0, [r2, #0]
 800fc7a:	1e43      	subs	r3, r0, #1
 800fc7c:	4198      	sbcs	r0, r3
 800fc7e:	b002      	add	sp, #8
 800fc80:	4770      	bx	lr
 800fc82:	2002      	movs	r0, #2
 800fc84:	4240      	negs	r0, r0
 800fc86:	e7fa      	b.n	800fc7e <__ascii_mbtowc+0x1a>

0800fc88 <_realloc_r>:
 800fc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc8a:	0006      	movs	r6, r0
 800fc8c:	000c      	movs	r4, r1
 800fc8e:	0015      	movs	r5, r2
 800fc90:	2900      	cmp	r1, #0
 800fc92:	d105      	bne.n	800fca0 <_realloc_r+0x18>
 800fc94:	0011      	movs	r1, r2
 800fc96:	f7fd fdef 	bl	800d878 <_malloc_r>
 800fc9a:	0004      	movs	r4, r0
 800fc9c:	0020      	movs	r0, r4
 800fc9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	d103      	bne.n	800fcac <_realloc_r+0x24>
 800fca4:	f7fd fd72 	bl	800d78c <_free_r>
 800fca8:	2400      	movs	r4, #0
 800fcaa:	e7f7      	b.n	800fc9c <_realloc_r+0x14>
 800fcac:	f000 f83f 	bl	800fd2e <_malloc_usable_size_r>
 800fcb0:	0007      	movs	r7, r0
 800fcb2:	4285      	cmp	r5, r0
 800fcb4:	d802      	bhi.n	800fcbc <_realloc_r+0x34>
 800fcb6:	0843      	lsrs	r3, r0, #1
 800fcb8:	42ab      	cmp	r3, r5
 800fcba:	d3ef      	bcc.n	800fc9c <_realloc_r+0x14>
 800fcbc:	0029      	movs	r1, r5
 800fcbe:	0030      	movs	r0, r6
 800fcc0:	f7fd fdda 	bl	800d878 <_malloc_r>
 800fcc4:	9001      	str	r0, [sp, #4]
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d0ee      	beq.n	800fca8 <_realloc_r+0x20>
 800fcca:	002a      	movs	r2, r5
 800fccc:	42bd      	cmp	r5, r7
 800fcce:	d900      	bls.n	800fcd2 <_realloc_r+0x4a>
 800fcd0:	003a      	movs	r2, r7
 800fcd2:	0021      	movs	r1, r4
 800fcd4:	9801      	ldr	r0, [sp, #4]
 800fcd6:	f7ff fc0f 	bl	800f4f8 <memcpy>
 800fcda:	0021      	movs	r1, r4
 800fcdc:	0030      	movs	r0, r6
 800fcde:	f7fd fd55 	bl	800d78c <_free_r>
 800fce2:	9c01      	ldr	r4, [sp, #4]
 800fce4:	e7da      	b.n	800fc9c <_realloc_r+0x14>

0800fce6 <__ascii_wctomb>:
 800fce6:	0003      	movs	r3, r0
 800fce8:	1e08      	subs	r0, r1, #0
 800fcea:	d005      	beq.n	800fcf8 <__ascii_wctomb+0x12>
 800fcec:	2aff      	cmp	r2, #255	@ 0xff
 800fcee:	d904      	bls.n	800fcfa <__ascii_wctomb+0x14>
 800fcf0:	228a      	movs	r2, #138	@ 0x8a
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	4240      	negs	r0, r0
 800fcf8:	4770      	bx	lr
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	700a      	strb	r2, [r1, #0]
 800fcfe:	e7fb      	b.n	800fcf8 <__ascii_wctomb+0x12>

0800fd00 <fiprintf>:
 800fd00:	b40e      	push	{r1, r2, r3}
 800fd02:	b517      	push	{r0, r1, r2, r4, lr}
 800fd04:	4c05      	ldr	r4, [pc, #20]	@ (800fd1c <fiprintf+0x1c>)
 800fd06:	ab05      	add	r3, sp, #20
 800fd08:	cb04      	ldmia	r3!, {r2}
 800fd0a:	0001      	movs	r1, r0
 800fd0c:	6820      	ldr	r0, [r4, #0]
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	f000 f83c 	bl	800fd8c <_vfiprintf_r>
 800fd14:	bc1e      	pop	{r1, r2, r3, r4}
 800fd16:	bc08      	pop	{r3}
 800fd18:	b003      	add	sp, #12
 800fd1a:	4718      	bx	r3
 800fd1c:	20000040 	.word	0x20000040

0800fd20 <abort>:
 800fd20:	2006      	movs	r0, #6
 800fd22:	b510      	push	{r4, lr}
 800fd24:	f000 fa18 	bl	8010158 <raise>
 800fd28:	2001      	movs	r0, #1
 800fd2a:	f7f4 fec7 	bl	8004abc <_exit>

0800fd2e <_malloc_usable_size_r>:
 800fd2e:	1f0b      	subs	r3, r1, #4
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	1f18      	subs	r0, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	da01      	bge.n	800fd3c <_malloc_usable_size_r+0xe>
 800fd38:	580b      	ldr	r3, [r1, r0]
 800fd3a:	18c0      	adds	r0, r0, r3
 800fd3c:	4770      	bx	lr

0800fd3e <__sfputc_r>:
 800fd3e:	6893      	ldr	r3, [r2, #8]
 800fd40:	b510      	push	{r4, lr}
 800fd42:	3b01      	subs	r3, #1
 800fd44:	6093      	str	r3, [r2, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	da04      	bge.n	800fd54 <__sfputc_r+0x16>
 800fd4a:	6994      	ldr	r4, [r2, #24]
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	db07      	blt.n	800fd60 <__sfputc_r+0x22>
 800fd50:	290a      	cmp	r1, #10
 800fd52:	d005      	beq.n	800fd60 <__sfputc_r+0x22>
 800fd54:	6813      	ldr	r3, [r2, #0]
 800fd56:	1c58      	adds	r0, r3, #1
 800fd58:	6010      	str	r0, [r2, #0]
 800fd5a:	7019      	strb	r1, [r3, #0]
 800fd5c:	0008      	movs	r0, r1
 800fd5e:	bd10      	pop	{r4, pc}
 800fd60:	f000 f930 	bl	800ffc4 <__swbuf_r>
 800fd64:	0001      	movs	r1, r0
 800fd66:	e7f9      	b.n	800fd5c <__sfputc_r+0x1e>

0800fd68 <__sfputs_r>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	0006      	movs	r6, r0
 800fd6c:	000f      	movs	r7, r1
 800fd6e:	0014      	movs	r4, r2
 800fd70:	18d5      	adds	r5, r2, r3
 800fd72:	42ac      	cmp	r4, r5
 800fd74:	d101      	bne.n	800fd7a <__sfputs_r+0x12>
 800fd76:	2000      	movs	r0, #0
 800fd78:	e007      	b.n	800fd8a <__sfputs_r+0x22>
 800fd7a:	7821      	ldrb	r1, [r4, #0]
 800fd7c:	003a      	movs	r2, r7
 800fd7e:	0030      	movs	r0, r6
 800fd80:	f7ff ffdd 	bl	800fd3e <__sfputc_r>
 800fd84:	3401      	adds	r4, #1
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	d1f3      	bne.n	800fd72 <__sfputs_r+0xa>
 800fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd8c <_vfiprintf_r>:
 800fd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd8e:	b0a1      	sub	sp, #132	@ 0x84
 800fd90:	000f      	movs	r7, r1
 800fd92:	0015      	movs	r5, r2
 800fd94:	001e      	movs	r6, r3
 800fd96:	9003      	str	r0, [sp, #12]
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d004      	beq.n	800fda6 <_vfiprintf_r+0x1a>
 800fd9c:	6a03      	ldr	r3, [r0, #32]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <_vfiprintf_r+0x1a>
 800fda2:	f7fc fd07 	bl	800c7b4 <__sinit>
 800fda6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fda8:	07db      	lsls	r3, r3, #31
 800fdaa:	d405      	bmi.n	800fdb8 <_vfiprintf_r+0x2c>
 800fdac:	89bb      	ldrh	r3, [r7, #12]
 800fdae:	059b      	lsls	r3, r3, #22
 800fdb0:	d402      	bmi.n	800fdb8 <_vfiprintf_r+0x2c>
 800fdb2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fdb4:	f7fc fe57 	bl	800ca66 <__retarget_lock_acquire_recursive>
 800fdb8:	89bb      	ldrh	r3, [r7, #12]
 800fdba:	071b      	lsls	r3, r3, #28
 800fdbc:	d502      	bpl.n	800fdc4 <_vfiprintf_r+0x38>
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d113      	bne.n	800fdec <_vfiprintf_r+0x60>
 800fdc4:	0039      	movs	r1, r7
 800fdc6:	9803      	ldr	r0, [sp, #12]
 800fdc8:	f000 f93e 	bl	8010048 <__swsetup_r>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d00d      	beq.n	800fdec <_vfiprintf_r+0x60>
 800fdd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdd2:	07db      	lsls	r3, r3, #31
 800fdd4:	d503      	bpl.n	800fdde <_vfiprintf_r+0x52>
 800fdd6:	2001      	movs	r0, #1
 800fdd8:	4240      	negs	r0, r0
 800fdda:	b021      	add	sp, #132	@ 0x84
 800fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdde:	89bb      	ldrh	r3, [r7, #12]
 800fde0:	059b      	lsls	r3, r3, #22
 800fde2:	d4f8      	bmi.n	800fdd6 <_vfiprintf_r+0x4a>
 800fde4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fde6:	f7fc fe3f 	bl	800ca68 <__retarget_lock_release_recursive>
 800fdea:	e7f4      	b.n	800fdd6 <_vfiprintf_r+0x4a>
 800fdec:	2300      	movs	r3, #0
 800fdee:	ac08      	add	r4, sp, #32
 800fdf0:	6163      	str	r3, [r4, #20]
 800fdf2:	3320      	adds	r3, #32
 800fdf4:	7663      	strb	r3, [r4, #25]
 800fdf6:	3310      	adds	r3, #16
 800fdf8:	76a3      	strb	r3, [r4, #26]
 800fdfa:	9607      	str	r6, [sp, #28]
 800fdfc:	002e      	movs	r6, r5
 800fdfe:	7833      	ldrb	r3, [r6, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <_vfiprintf_r+0x7c>
 800fe04:	2b25      	cmp	r3, #37	@ 0x25
 800fe06:	d148      	bne.n	800fe9a <_vfiprintf_r+0x10e>
 800fe08:	1b73      	subs	r3, r6, r5
 800fe0a:	9305      	str	r3, [sp, #20]
 800fe0c:	42ae      	cmp	r6, r5
 800fe0e:	d00b      	beq.n	800fe28 <_vfiprintf_r+0x9c>
 800fe10:	002a      	movs	r2, r5
 800fe12:	0039      	movs	r1, r7
 800fe14:	9803      	ldr	r0, [sp, #12]
 800fe16:	f7ff ffa7 	bl	800fd68 <__sfputs_r>
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	d100      	bne.n	800fe20 <_vfiprintf_r+0x94>
 800fe1e:	e0ae      	b.n	800ff7e <_vfiprintf_r+0x1f2>
 800fe20:	6963      	ldr	r3, [r4, #20]
 800fe22:	9a05      	ldr	r2, [sp, #20]
 800fe24:	189b      	adds	r3, r3, r2
 800fe26:	6163      	str	r3, [r4, #20]
 800fe28:	7833      	ldrb	r3, [r6, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d100      	bne.n	800fe30 <_vfiprintf_r+0xa4>
 800fe2e:	e0a6      	b.n	800ff7e <_vfiprintf_r+0x1f2>
 800fe30:	2201      	movs	r2, #1
 800fe32:	2300      	movs	r3, #0
 800fe34:	4252      	negs	r2, r2
 800fe36:	6062      	str	r2, [r4, #4]
 800fe38:	a904      	add	r1, sp, #16
 800fe3a:	3254      	adds	r2, #84	@ 0x54
 800fe3c:	1852      	adds	r2, r2, r1
 800fe3e:	1c75      	adds	r5, r6, #1
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	60e3      	str	r3, [r4, #12]
 800fe44:	60a3      	str	r3, [r4, #8]
 800fe46:	7013      	strb	r3, [r2, #0]
 800fe48:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fe4a:	4b59      	ldr	r3, [pc, #356]	@ (800ffb0 <_vfiprintf_r+0x224>)
 800fe4c:	2205      	movs	r2, #5
 800fe4e:	0018      	movs	r0, r3
 800fe50:	7829      	ldrb	r1, [r5, #0]
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	f7fc fe09 	bl	800ca6a <memchr>
 800fe58:	1c6e      	adds	r6, r5, #1
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d11f      	bne.n	800fe9e <_vfiprintf_r+0x112>
 800fe5e:	6822      	ldr	r2, [r4, #0]
 800fe60:	06d3      	lsls	r3, r2, #27
 800fe62:	d504      	bpl.n	800fe6e <_vfiprintf_r+0xe2>
 800fe64:	2353      	movs	r3, #83	@ 0x53
 800fe66:	a904      	add	r1, sp, #16
 800fe68:	185b      	adds	r3, r3, r1
 800fe6a:	2120      	movs	r1, #32
 800fe6c:	7019      	strb	r1, [r3, #0]
 800fe6e:	0713      	lsls	r3, r2, #28
 800fe70:	d504      	bpl.n	800fe7c <_vfiprintf_r+0xf0>
 800fe72:	2353      	movs	r3, #83	@ 0x53
 800fe74:	a904      	add	r1, sp, #16
 800fe76:	185b      	adds	r3, r3, r1
 800fe78:	212b      	movs	r1, #43	@ 0x2b
 800fe7a:	7019      	strb	r1, [r3, #0]
 800fe7c:	782b      	ldrb	r3, [r5, #0]
 800fe7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe80:	d016      	beq.n	800feb0 <_vfiprintf_r+0x124>
 800fe82:	002e      	movs	r6, r5
 800fe84:	2100      	movs	r1, #0
 800fe86:	200a      	movs	r0, #10
 800fe88:	68e3      	ldr	r3, [r4, #12]
 800fe8a:	7832      	ldrb	r2, [r6, #0]
 800fe8c:	1c75      	adds	r5, r6, #1
 800fe8e:	3a30      	subs	r2, #48	@ 0x30
 800fe90:	2a09      	cmp	r2, #9
 800fe92:	d950      	bls.n	800ff36 <_vfiprintf_r+0x1aa>
 800fe94:	2900      	cmp	r1, #0
 800fe96:	d111      	bne.n	800febc <_vfiprintf_r+0x130>
 800fe98:	e017      	b.n	800feca <_vfiprintf_r+0x13e>
 800fe9a:	3601      	adds	r6, #1
 800fe9c:	e7af      	b.n	800fdfe <_vfiprintf_r+0x72>
 800fe9e:	9b05      	ldr	r3, [sp, #20]
 800fea0:	6822      	ldr	r2, [r4, #0]
 800fea2:	1ac0      	subs	r0, r0, r3
 800fea4:	2301      	movs	r3, #1
 800fea6:	4083      	lsls	r3, r0
 800fea8:	4313      	orrs	r3, r2
 800feaa:	0035      	movs	r5, r6
 800feac:	6023      	str	r3, [r4, #0]
 800feae:	e7cc      	b.n	800fe4a <_vfiprintf_r+0xbe>
 800feb0:	9b07      	ldr	r3, [sp, #28]
 800feb2:	1d19      	adds	r1, r3, #4
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	9107      	str	r1, [sp, #28]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	db01      	blt.n	800fec0 <_vfiprintf_r+0x134>
 800febc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800febe:	e004      	b.n	800feca <_vfiprintf_r+0x13e>
 800fec0:	425b      	negs	r3, r3
 800fec2:	60e3      	str	r3, [r4, #12]
 800fec4:	2302      	movs	r3, #2
 800fec6:	4313      	orrs	r3, r2
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	7833      	ldrb	r3, [r6, #0]
 800fecc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fece:	d10c      	bne.n	800feea <_vfiprintf_r+0x15e>
 800fed0:	7873      	ldrb	r3, [r6, #1]
 800fed2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fed4:	d134      	bne.n	800ff40 <_vfiprintf_r+0x1b4>
 800fed6:	9b07      	ldr	r3, [sp, #28]
 800fed8:	3602      	adds	r6, #2
 800feda:	1d1a      	adds	r2, r3, #4
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	9207      	str	r2, [sp, #28]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	da01      	bge.n	800fee8 <_vfiprintf_r+0x15c>
 800fee4:	2301      	movs	r3, #1
 800fee6:	425b      	negs	r3, r3
 800fee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feea:	4d32      	ldr	r5, [pc, #200]	@ (800ffb4 <_vfiprintf_r+0x228>)
 800feec:	2203      	movs	r2, #3
 800feee:	0028      	movs	r0, r5
 800fef0:	7831      	ldrb	r1, [r6, #0]
 800fef2:	f7fc fdba 	bl	800ca6a <memchr>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d006      	beq.n	800ff08 <_vfiprintf_r+0x17c>
 800fefa:	2340      	movs	r3, #64	@ 0x40
 800fefc:	1b40      	subs	r0, r0, r5
 800fefe:	4083      	lsls	r3, r0
 800ff00:	6822      	ldr	r2, [r4, #0]
 800ff02:	3601      	adds	r6, #1
 800ff04:	4313      	orrs	r3, r2
 800ff06:	6023      	str	r3, [r4, #0]
 800ff08:	7831      	ldrb	r1, [r6, #0]
 800ff0a:	2206      	movs	r2, #6
 800ff0c:	482a      	ldr	r0, [pc, #168]	@ (800ffb8 <_vfiprintf_r+0x22c>)
 800ff0e:	1c75      	adds	r5, r6, #1
 800ff10:	7621      	strb	r1, [r4, #24]
 800ff12:	f7fc fdaa 	bl	800ca6a <memchr>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d040      	beq.n	800ff9c <_vfiprintf_r+0x210>
 800ff1a:	4b28      	ldr	r3, [pc, #160]	@ (800ffbc <_vfiprintf_r+0x230>)
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d122      	bne.n	800ff66 <_vfiprintf_r+0x1da>
 800ff20:	2207      	movs	r2, #7
 800ff22:	9b07      	ldr	r3, [sp, #28]
 800ff24:	3307      	adds	r3, #7
 800ff26:	4393      	bics	r3, r2
 800ff28:	3308      	adds	r3, #8
 800ff2a:	9307      	str	r3, [sp, #28]
 800ff2c:	6963      	ldr	r3, [r4, #20]
 800ff2e:	9a04      	ldr	r2, [sp, #16]
 800ff30:	189b      	adds	r3, r3, r2
 800ff32:	6163      	str	r3, [r4, #20]
 800ff34:	e762      	b.n	800fdfc <_vfiprintf_r+0x70>
 800ff36:	4343      	muls	r3, r0
 800ff38:	002e      	movs	r6, r5
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	189b      	adds	r3, r3, r2
 800ff3e:	e7a4      	b.n	800fe8a <_vfiprintf_r+0xfe>
 800ff40:	2300      	movs	r3, #0
 800ff42:	200a      	movs	r0, #10
 800ff44:	0019      	movs	r1, r3
 800ff46:	3601      	adds	r6, #1
 800ff48:	6063      	str	r3, [r4, #4]
 800ff4a:	7832      	ldrb	r2, [r6, #0]
 800ff4c:	1c75      	adds	r5, r6, #1
 800ff4e:	3a30      	subs	r2, #48	@ 0x30
 800ff50:	2a09      	cmp	r2, #9
 800ff52:	d903      	bls.n	800ff5c <_vfiprintf_r+0x1d0>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0c8      	beq.n	800feea <_vfiprintf_r+0x15e>
 800ff58:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff5a:	e7c6      	b.n	800feea <_vfiprintf_r+0x15e>
 800ff5c:	4341      	muls	r1, r0
 800ff5e:	002e      	movs	r6, r5
 800ff60:	2301      	movs	r3, #1
 800ff62:	1889      	adds	r1, r1, r2
 800ff64:	e7f1      	b.n	800ff4a <_vfiprintf_r+0x1be>
 800ff66:	aa07      	add	r2, sp, #28
 800ff68:	9200      	str	r2, [sp, #0]
 800ff6a:	0021      	movs	r1, r4
 800ff6c:	003a      	movs	r2, r7
 800ff6e:	4b14      	ldr	r3, [pc, #80]	@ (800ffc0 <_vfiprintf_r+0x234>)
 800ff70:	9803      	ldr	r0, [sp, #12]
 800ff72:	f7fb fdc5 	bl	800bb00 <_printf_float>
 800ff76:	9004      	str	r0, [sp, #16]
 800ff78:	9b04      	ldr	r3, [sp, #16]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	d1d6      	bne.n	800ff2c <_vfiprintf_r+0x1a0>
 800ff7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff80:	07db      	lsls	r3, r3, #31
 800ff82:	d405      	bmi.n	800ff90 <_vfiprintf_r+0x204>
 800ff84:	89bb      	ldrh	r3, [r7, #12]
 800ff86:	059b      	lsls	r3, r3, #22
 800ff88:	d402      	bmi.n	800ff90 <_vfiprintf_r+0x204>
 800ff8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff8c:	f7fc fd6c 	bl	800ca68 <__retarget_lock_release_recursive>
 800ff90:	89bb      	ldrh	r3, [r7, #12]
 800ff92:	065b      	lsls	r3, r3, #25
 800ff94:	d500      	bpl.n	800ff98 <_vfiprintf_r+0x20c>
 800ff96:	e71e      	b.n	800fdd6 <_vfiprintf_r+0x4a>
 800ff98:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ff9a:	e71e      	b.n	800fdda <_vfiprintf_r+0x4e>
 800ff9c:	aa07      	add	r2, sp, #28
 800ff9e:	9200      	str	r2, [sp, #0]
 800ffa0:	0021      	movs	r1, r4
 800ffa2:	003a      	movs	r2, r7
 800ffa4:	4b06      	ldr	r3, [pc, #24]	@ (800ffc0 <_vfiprintf_r+0x234>)
 800ffa6:	9803      	ldr	r0, [sp, #12]
 800ffa8:	f7fc f858 	bl	800c05c <_printf_i>
 800ffac:	e7e3      	b.n	800ff76 <_vfiprintf_r+0x1ea>
 800ffae:	46c0      	nop			@ (mov r8, r8)
 800ffb0:	08010c91 	.word	0x08010c91
 800ffb4:	08010c97 	.word	0x08010c97
 800ffb8:	08010c9b 	.word	0x08010c9b
 800ffbc:	0800bb01 	.word	0x0800bb01
 800ffc0:	0800fd69 	.word	0x0800fd69

0800ffc4 <__swbuf_r>:
 800ffc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc6:	0006      	movs	r6, r0
 800ffc8:	000d      	movs	r5, r1
 800ffca:	0014      	movs	r4, r2
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d004      	beq.n	800ffda <__swbuf_r+0x16>
 800ffd0:	6a03      	ldr	r3, [r0, #32]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <__swbuf_r+0x16>
 800ffd6:	f7fc fbed 	bl	800c7b4 <__sinit>
 800ffda:	69a3      	ldr	r3, [r4, #24]
 800ffdc:	60a3      	str	r3, [r4, #8]
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	071b      	lsls	r3, r3, #28
 800ffe2:	d502      	bpl.n	800ffea <__swbuf_r+0x26>
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d109      	bne.n	800fffe <__swbuf_r+0x3a>
 800ffea:	0021      	movs	r1, r4
 800ffec:	0030      	movs	r0, r6
 800ffee:	f000 f82b 	bl	8010048 <__swsetup_r>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d003      	beq.n	800fffe <__swbuf_r+0x3a>
 800fff6:	2501      	movs	r5, #1
 800fff8:	426d      	negs	r5, r5
 800fffa:	0028      	movs	r0, r5
 800fffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fffe:	6923      	ldr	r3, [r4, #16]
 8010000:	6820      	ldr	r0, [r4, #0]
 8010002:	b2ef      	uxtb	r7, r5
 8010004:	1ac0      	subs	r0, r0, r3
 8010006:	6963      	ldr	r3, [r4, #20]
 8010008:	b2ed      	uxtb	r5, r5
 801000a:	4283      	cmp	r3, r0
 801000c:	dc05      	bgt.n	801001a <__swbuf_r+0x56>
 801000e:	0021      	movs	r1, r4
 8010010:	0030      	movs	r0, r6
 8010012:	f7ff fa0f 	bl	800f434 <_fflush_r>
 8010016:	2800      	cmp	r0, #0
 8010018:	d1ed      	bne.n	800fff6 <__swbuf_r+0x32>
 801001a:	68a3      	ldr	r3, [r4, #8]
 801001c:	3001      	adds	r0, #1
 801001e:	3b01      	subs	r3, #1
 8010020:	60a3      	str	r3, [r4, #8]
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	6022      	str	r2, [r4, #0]
 8010028:	701f      	strb	r7, [r3, #0]
 801002a:	6963      	ldr	r3, [r4, #20]
 801002c:	4283      	cmp	r3, r0
 801002e:	d004      	beq.n	801003a <__swbuf_r+0x76>
 8010030:	89a3      	ldrh	r3, [r4, #12]
 8010032:	07db      	lsls	r3, r3, #31
 8010034:	d5e1      	bpl.n	800fffa <__swbuf_r+0x36>
 8010036:	2d0a      	cmp	r5, #10
 8010038:	d1df      	bne.n	800fffa <__swbuf_r+0x36>
 801003a:	0021      	movs	r1, r4
 801003c:	0030      	movs	r0, r6
 801003e:	f7ff f9f9 	bl	800f434 <_fflush_r>
 8010042:	2800      	cmp	r0, #0
 8010044:	d0d9      	beq.n	800fffa <__swbuf_r+0x36>
 8010046:	e7d6      	b.n	800fff6 <__swbuf_r+0x32>

08010048 <__swsetup_r>:
 8010048:	4b2d      	ldr	r3, [pc, #180]	@ (8010100 <__swsetup_r+0xb8>)
 801004a:	b570      	push	{r4, r5, r6, lr}
 801004c:	0005      	movs	r5, r0
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	000c      	movs	r4, r1
 8010052:	2800      	cmp	r0, #0
 8010054:	d004      	beq.n	8010060 <__swsetup_r+0x18>
 8010056:	6a03      	ldr	r3, [r0, #32]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <__swsetup_r+0x18>
 801005c:	f7fc fbaa 	bl	800c7b4 <__sinit>
 8010060:	230c      	movs	r3, #12
 8010062:	5ee2      	ldrsh	r2, [r4, r3]
 8010064:	0713      	lsls	r3, r2, #28
 8010066:	d423      	bmi.n	80100b0 <__swsetup_r+0x68>
 8010068:	06d3      	lsls	r3, r2, #27
 801006a:	d407      	bmi.n	801007c <__swsetup_r+0x34>
 801006c:	2309      	movs	r3, #9
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	2340      	movs	r3, #64	@ 0x40
 8010072:	2001      	movs	r0, #1
 8010074:	4313      	orrs	r3, r2
 8010076:	81a3      	strh	r3, [r4, #12]
 8010078:	4240      	negs	r0, r0
 801007a:	e03a      	b.n	80100f2 <__swsetup_r+0xaa>
 801007c:	0752      	lsls	r2, r2, #29
 801007e:	d513      	bpl.n	80100a8 <__swsetup_r+0x60>
 8010080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010082:	2900      	cmp	r1, #0
 8010084:	d008      	beq.n	8010098 <__swsetup_r+0x50>
 8010086:	0023      	movs	r3, r4
 8010088:	3344      	adds	r3, #68	@ 0x44
 801008a:	4299      	cmp	r1, r3
 801008c:	d002      	beq.n	8010094 <__swsetup_r+0x4c>
 801008e:	0028      	movs	r0, r5
 8010090:	f7fd fb7c 	bl	800d78c <_free_r>
 8010094:	2300      	movs	r3, #0
 8010096:	6363      	str	r3, [r4, #52]	@ 0x34
 8010098:	2224      	movs	r2, #36	@ 0x24
 801009a:	89a3      	ldrh	r3, [r4, #12]
 801009c:	4393      	bics	r3, r2
 801009e:	81a3      	strh	r3, [r4, #12]
 80100a0:	2300      	movs	r3, #0
 80100a2:	6063      	str	r3, [r4, #4]
 80100a4:	6923      	ldr	r3, [r4, #16]
 80100a6:	6023      	str	r3, [r4, #0]
 80100a8:	2308      	movs	r3, #8
 80100aa:	89a2      	ldrh	r2, [r4, #12]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	81a3      	strh	r3, [r4, #12]
 80100b0:	6923      	ldr	r3, [r4, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10b      	bne.n	80100ce <__swsetup_r+0x86>
 80100b6:	21a0      	movs	r1, #160	@ 0xa0
 80100b8:	2280      	movs	r2, #128	@ 0x80
 80100ba:	89a3      	ldrh	r3, [r4, #12]
 80100bc:	0089      	lsls	r1, r1, #2
 80100be:	0092      	lsls	r2, r2, #2
 80100c0:	400b      	ands	r3, r1
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d003      	beq.n	80100ce <__swsetup_r+0x86>
 80100c6:	0021      	movs	r1, r4
 80100c8:	0028      	movs	r0, r5
 80100ca:	f000 f88f 	bl	80101ec <__smakebuf_r>
 80100ce:	230c      	movs	r3, #12
 80100d0:	5ee2      	ldrsh	r2, [r4, r3]
 80100d2:	2101      	movs	r1, #1
 80100d4:	0013      	movs	r3, r2
 80100d6:	400b      	ands	r3, r1
 80100d8:	420a      	tst	r2, r1
 80100da:	d00b      	beq.n	80100f4 <__swsetup_r+0xac>
 80100dc:	2300      	movs	r3, #0
 80100de:	60a3      	str	r3, [r4, #8]
 80100e0:	6963      	ldr	r3, [r4, #20]
 80100e2:	425b      	negs	r3, r3
 80100e4:	61a3      	str	r3, [r4, #24]
 80100e6:	2000      	movs	r0, #0
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	4283      	cmp	r3, r0
 80100ec:	d101      	bne.n	80100f2 <__swsetup_r+0xaa>
 80100ee:	0613      	lsls	r3, r2, #24
 80100f0:	d4be      	bmi.n	8010070 <__swsetup_r+0x28>
 80100f2:	bd70      	pop	{r4, r5, r6, pc}
 80100f4:	0791      	lsls	r1, r2, #30
 80100f6:	d400      	bmi.n	80100fa <__swsetup_r+0xb2>
 80100f8:	6963      	ldr	r3, [r4, #20]
 80100fa:	60a3      	str	r3, [r4, #8]
 80100fc:	e7f3      	b.n	80100e6 <__swsetup_r+0x9e>
 80100fe:	46c0      	nop			@ (mov r8, r8)
 8010100:	20000040 	.word	0x20000040

08010104 <_raise_r>:
 8010104:	b570      	push	{r4, r5, r6, lr}
 8010106:	0004      	movs	r4, r0
 8010108:	000d      	movs	r5, r1
 801010a:	291f      	cmp	r1, #31
 801010c:	d904      	bls.n	8010118 <_raise_r+0x14>
 801010e:	2316      	movs	r3, #22
 8010110:	6003      	str	r3, [r0, #0]
 8010112:	2001      	movs	r0, #1
 8010114:	4240      	negs	r0, r0
 8010116:	bd70      	pop	{r4, r5, r6, pc}
 8010118:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801011a:	2b00      	cmp	r3, #0
 801011c:	d004      	beq.n	8010128 <_raise_r+0x24>
 801011e:	008a      	lsls	r2, r1, #2
 8010120:	189b      	adds	r3, r3, r2
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	2a00      	cmp	r2, #0
 8010126:	d108      	bne.n	801013a <_raise_r+0x36>
 8010128:	0020      	movs	r0, r4
 801012a:	f000 f831 	bl	8010190 <_getpid_r>
 801012e:	002a      	movs	r2, r5
 8010130:	0001      	movs	r1, r0
 8010132:	0020      	movs	r0, r4
 8010134:	f000 f81a 	bl	801016c <_kill_r>
 8010138:	e7ed      	b.n	8010116 <_raise_r+0x12>
 801013a:	2a01      	cmp	r2, #1
 801013c:	d009      	beq.n	8010152 <_raise_r+0x4e>
 801013e:	1c51      	adds	r1, r2, #1
 8010140:	d103      	bne.n	801014a <_raise_r+0x46>
 8010142:	2316      	movs	r3, #22
 8010144:	6003      	str	r3, [r0, #0]
 8010146:	2001      	movs	r0, #1
 8010148:	e7e5      	b.n	8010116 <_raise_r+0x12>
 801014a:	2100      	movs	r1, #0
 801014c:	0028      	movs	r0, r5
 801014e:	6019      	str	r1, [r3, #0]
 8010150:	4790      	blx	r2
 8010152:	2000      	movs	r0, #0
 8010154:	e7df      	b.n	8010116 <_raise_r+0x12>
	...

08010158 <raise>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4b03      	ldr	r3, [pc, #12]	@ (8010168 <raise+0x10>)
 801015c:	0001      	movs	r1, r0
 801015e:	6818      	ldr	r0, [r3, #0]
 8010160:	f7ff ffd0 	bl	8010104 <_raise_r>
 8010164:	bd10      	pop	{r4, pc}
 8010166:	46c0      	nop			@ (mov r8, r8)
 8010168:	20000040 	.word	0x20000040

0801016c <_kill_r>:
 801016c:	2300      	movs	r3, #0
 801016e:	b570      	push	{r4, r5, r6, lr}
 8010170:	4d06      	ldr	r5, [pc, #24]	@ (801018c <_kill_r+0x20>)
 8010172:	0004      	movs	r4, r0
 8010174:	0008      	movs	r0, r1
 8010176:	0011      	movs	r1, r2
 8010178:	602b      	str	r3, [r5, #0]
 801017a:	f7f4 fc8f 	bl	8004a9c <_kill>
 801017e:	1c43      	adds	r3, r0, #1
 8010180:	d103      	bne.n	801018a <_kill_r+0x1e>
 8010182:	682b      	ldr	r3, [r5, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d000      	beq.n	801018a <_kill_r+0x1e>
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	20000b84 	.word	0x20000b84

08010190 <_getpid_r>:
 8010190:	b510      	push	{r4, lr}
 8010192:	f7f4 fc7d 	bl	8004a90 <_getpid>
 8010196:	bd10      	pop	{r4, pc}

08010198 <__swhatbuf_r>:
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	000e      	movs	r6, r1
 801019c:	001d      	movs	r5, r3
 801019e:	230e      	movs	r3, #14
 80101a0:	5ec9      	ldrsh	r1, [r1, r3]
 80101a2:	0014      	movs	r4, r2
 80101a4:	b096      	sub	sp, #88	@ 0x58
 80101a6:	2900      	cmp	r1, #0
 80101a8:	da0c      	bge.n	80101c4 <__swhatbuf_r+0x2c>
 80101aa:	89b2      	ldrh	r2, [r6, #12]
 80101ac:	2380      	movs	r3, #128	@ 0x80
 80101ae:	0011      	movs	r1, r2
 80101b0:	4019      	ands	r1, r3
 80101b2:	421a      	tst	r2, r3
 80101b4:	d114      	bne.n	80101e0 <__swhatbuf_r+0x48>
 80101b6:	2380      	movs	r3, #128	@ 0x80
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	2000      	movs	r0, #0
 80101bc:	6029      	str	r1, [r5, #0]
 80101be:	6023      	str	r3, [r4, #0]
 80101c0:	b016      	add	sp, #88	@ 0x58
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	466a      	mov	r2, sp
 80101c6:	f000 f853 	bl	8010270 <_fstat_r>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	dbed      	blt.n	80101aa <__swhatbuf_r+0x12>
 80101ce:	23f0      	movs	r3, #240	@ 0xf0
 80101d0:	9901      	ldr	r1, [sp, #4]
 80101d2:	021b      	lsls	r3, r3, #8
 80101d4:	4019      	ands	r1, r3
 80101d6:	4b04      	ldr	r3, [pc, #16]	@ (80101e8 <__swhatbuf_r+0x50>)
 80101d8:	18c9      	adds	r1, r1, r3
 80101da:	424b      	negs	r3, r1
 80101dc:	4159      	adcs	r1, r3
 80101de:	e7ea      	b.n	80101b6 <__swhatbuf_r+0x1e>
 80101e0:	2100      	movs	r1, #0
 80101e2:	2340      	movs	r3, #64	@ 0x40
 80101e4:	e7e9      	b.n	80101ba <__swhatbuf_r+0x22>
 80101e6:	46c0      	nop			@ (mov r8, r8)
 80101e8:	ffffe000 	.word	0xffffe000

080101ec <__smakebuf_r>:
 80101ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ee:	2602      	movs	r6, #2
 80101f0:	898b      	ldrh	r3, [r1, #12]
 80101f2:	0005      	movs	r5, r0
 80101f4:	000c      	movs	r4, r1
 80101f6:	b085      	sub	sp, #20
 80101f8:	4233      	tst	r3, r6
 80101fa:	d007      	beq.n	801020c <__smakebuf_r+0x20>
 80101fc:	0023      	movs	r3, r4
 80101fe:	3347      	adds	r3, #71	@ 0x47
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	2301      	movs	r3, #1
 8010206:	6163      	str	r3, [r4, #20]
 8010208:	b005      	add	sp, #20
 801020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020c:	ab03      	add	r3, sp, #12
 801020e:	aa02      	add	r2, sp, #8
 8010210:	f7ff ffc2 	bl	8010198 <__swhatbuf_r>
 8010214:	9f02      	ldr	r7, [sp, #8]
 8010216:	9001      	str	r0, [sp, #4]
 8010218:	0039      	movs	r1, r7
 801021a:	0028      	movs	r0, r5
 801021c:	f7fd fb2c 	bl	800d878 <_malloc_r>
 8010220:	2800      	cmp	r0, #0
 8010222:	d108      	bne.n	8010236 <__smakebuf_r+0x4a>
 8010224:	220c      	movs	r2, #12
 8010226:	5ea3      	ldrsh	r3, [r4, r2]
 8010228:	059a      	lsls	r2, r3, #22
 801022a:	d4ed      	bmi.n	8010208 <__smakebuf_r+0x1c>
 801022c:	2203      	movs	r2, #3
 801022e:	4393      	bics	r3, r2
 8010230:	431e      	orrs	r6, r3
 8010232:	81a6      	strh	r6, [r4, #12]
 8010234:	e7e2      	b.n	80101fc <__smakebuf_r+0x10>
 8010236:	2380      	movs	r3, #128	@ 0x80
 8010238:	89a2      	ldrh	r2, [r4, #12]
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	4313      	orrs	r3, r2
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	9b03      	ldr	r3, [sp, #12]
 8010242:	6120      	str	r0, [r4, #16]
 8010244:	6167      	str	r7, [r4, #20]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00c      	beq.n	8010264 <__smakebuf_r+0x78>
 801024a:	0028      	movs	r0, r5
 801024c:	230e      	movs	r3, #14
 801024e:	5ee1      	ldrsh	r1, [r4, r3]
 8010250:	f000 f820 	bl	8010294 <_isatty_r>
 8010254:	2800      	cmp	r0, #0
 8010256:	d005      	beq.n	8010264 <__smakebuf_r+0x78>
 8010258:	2303      	movs	r3, #3
 801025a:	89a2      	ldrh	r2, [r4, #12]
 801025c:	439a      	bics	r2, r3
 801025e:	3b02      	subs	r3, #2
 8010260:	4313      	orrs	r3, r2
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	89a3      	ldrh	r3, [r4, #12]
 8010266:	9a01      	ldr	r2, [sp, #4]
 8010268:	4313      	orrs	r3, r2
 801026a:	81a3      	strh	r3, [r4, #12]
 801026c:	e7cc      	b.n	8010208 <__smakebuf_r+0x1c>
	...

08010270 <_fstat_r>:
 8010270:	2300      	movs	r3, #0
 8010272:	b570      	push	{r4, r5, r6, lr}
 8010274:	4d06      	ldr	r5, [pc, #24]	@ (8010290 <_fstat_r+0x20>)
 8010276:	0004      	movs	r4, r0
 8010278:	0008      	movs	r0, r1
 801027a:	0011      	movs	r1, r2
 801027c:	602b      	str	r3, [r5, #0]
 801027e:	f7f4 fc6d 	bl	8004b5c <_fstat>
 8010282:	1c43      	adds	r3, r0, #1
 8010284:	d103      	bne.n	801028e <_fstat_r+0x1e>
 8010286:	682b      	ldr	r3, [r5, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d000      	beq.n	801028e <_fstat_r+0x1e>
 801028c:	6023      	str	r3, [r4, #0]
 801028e:	bd70      	pop	{r4, r5, r6, pc}
 8010290:	20000b84 	.word	0x20000b84

08010294 <_isatty_r>:
 8010294:	2300      	movs	r3, #0
 8010296:	b570      	push	{r4, r5, r6, lr}
 8010298:	4d06      	ldr	r5, [pc, #24]	@ (80102b4 <_isatty_r+0x20>)
 801029a:	0004      	movs	r4, r0
 801029c:	0008      	movs	r0, r1
 801029e:	602b      	str	r3, [r5, #0]
 80102a0:	f7f4 fc6a 	bl	8004b78 <_isatty>
 80102a4:	1c43      	adds	r3, r0, #1
 80102a6:	d103      	bne.n	80102b0 <_isatty_r+0x1c>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d000      	beq.n	80102b0 <_isatty_r+0x1c>
 80102ae:	6023      	str	r3, [r4, #0]
 80102b0:	bd70      	pop	{r4, r5, r6, pc}
 80102b2:	46c0      	nop			@ (mov r8, r8)
 80102b4:	20000b84 	.word	0x20000b84

080102b8 <expf>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	1c04      	adds	r4, r0, #0
 80102bc:	f000 f876 	bl	80103ac <__ieee754_expf>
 80102c0:	1c05      	adds	r5, r0, #0
 80102c2:	1c20      	adds	r0, r4, #0
 80102c4:	f000 f820 	bl	8010308 <finitef>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d00b      	beq.n	80102e4 <expf+0x2c>
 80102cc:	490c      	ldr	r1, [pc, #48]	@ (8010300 <expf+0x48>)
 80102ce:	1c20      	adds	r0, r4, #0
 80102d0:	f7f0 f910 	bl	80004f4 <__aeabi_fcmpgt>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d007      	beq.n	80102e8 <expf+0x30>
 80102d8:	f7fc fb9a 	bl	800ca10 <__errno>
 80102dc:	25ff      	movs	r5, #255	@ 0xff
 80102de:	2322      	movs	r3, #34	@ 0x22
 80102e0:	05ed      	lsls	r5, r5, #23
 80102e2:	6003      	str	r3, [r0, #0]
 80102e4:	1c28      	adds	r0, r5, #0
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	4906      	ldr	r1, [pc, #24]	@ (8010304 <expf+0x4c>)
 80102ea:	1c20      	adds	r0, r4, #0
 80102ec:	f7f0 f8ee 	bl	80004cc <__aeabi_fcmplt>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d0f7      	beq.n	80102e4 <expf+0x2c>
 80102f4:	f7fc fb8c 	bl	800ca10 <__errno>
 80102f8:	2322      	movs	r3, #34	@ 0x22
 80102fa:	2500      	movs	r5, #0
 80102fc:	6003      	str	r3, [r0, #0]
 80102fe:	e7f1      	b.n	80102e4 <expf+0x2c>
 8010300:	42b17217 	.word	0x42b17217
 8010304:	c2cff1b5 	.word	0xc2cff1b5

08010308 <finitef>:
 8010308:	22ff      	movs	r2, #255	@ 0xff
 801030a:	0043      	lsls	r3, r0, #1
 801030c:	085b      	lsrs	r3, r3, #1
 801030e:	2001      	movs	r0, #1
 8010310:	05d2      	lsls	r2, r2, #23
 8010312:	4293      	cmp	r3, r2
 8010314:	db00      	blt.n	8010318 <finitef+0x10>
 8010316:	2000      	movs	r0, #0
 8010318:	4770      	bx	lr

0801031a <fmaxf>:
 801031a:	b570      	push	{r4, r5, r6, lr}
 801031c:	1c04      	adds	r4, r0, #0
 801031e:	1c0d      	adds	r5, r1, #0
 8010320:	f000 f828 	bl	8010374 <__fpclassifyf>
 8010324:	2800      	cmp	r0, #0
 8010326:	d102      	bne.n	801032e <fmaxf+0x14>
 8010328:	1c2c      	adds	r4, r5, #0
 801032a:	1c20      	adds	r0, r4, #0
 801032c:	bd70      	pop	{r4, r5, r6, pc}
 801032e:	1c28      	adds	r0, r5, #0
 8010330:	f000 f820 	bl	8010374 <__fpclassifyf>
 8010334:	2800      	cmp	r0, #0
 8010336:	d0f8      	beq.n	801032a <fmaxf+0x10>
 8010338:	1c29      	adds	r1, r5, #0
 801033a:	1c20      	adds	r0, r4, #0
 801033c:	f7f0 f8da 	bl	80004f4 <__aeabi_fcmpgt>
 8010340:	2800      	cmp	r0, #0
 8010342:	d0f1      	beq.n	8010328 <fmaxf+0xe>
 8010344:	e7f1      	b.n	801032a <fmaxf+0x10>

08010346 <fminf>:
 8010346:	b570      	push	{r4, r5, r6, lr}
 8010348:	1c04      	adds	r4, r0, #0
 801034a:	1c0d      	adds	r5, r1, #0
 801034c:	f000 f812 	bl	8010374 <__fpclassifyf>
 8010350:	2800      	cmp	r0, #0
 8010352:	d102      	bne.n	801035a <fminf+0x14>
 8010354:	1c2c      	adds	r4, r5, #0
 8010356:	1c20      	adds	r0, r4, #0
 8010358:	bd70      	pop	{r4, r5, r6, pc}
 801035a:	1c28      	adds	r0, r5, #0
 801035c:	f000 f80a 	bl	8010374 <__fpclassifyf>
 8010360:	2800      	cmp	r0, #0
 8010362:	d0f8      	beq.n	8010356 <fminf+0x10>
 8010364:	1c29      	adds	r1, r5, #0
 8010366:	1c20      	adds	r0, r4, #0
 8010368:	f7f0 f8b0 	bl	80004cc <__aeabi_fcmplt>
 801036c:	2800      	cmp	r0, #0
 801036e:	d0f1      	beq.n	8010354 <fminf+0xe>
 8010370:	e7f1      	b.n	8010356 <fminf+0x10>
	...

08010374 <__fpclassifyf>:
 8010374:	0043      	lsls	r3, r0, #1
 8010376:	085a      	lsrs	r2, r3, #1
 8010378:	2002      	movs	r0, #2
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00f      	beq.n	801039e <__fpclassifyf+0x2a>
 801037e:	21fe      	movs	r1, #254	@ 0xfe
 8010380:	4b07      	ldr	r3, [pc, #28]	@ (80103a0 <__fpclassifyf+0x2c>)
 8010382:	05c9      	lsls	r1, r1, #23
 8010384:	18d3      	adds	r3, r2, r3
 8010386:	1800      	adds	r0, r0, r0
 8010388:	428b      	cmp	r3, r1
 801038a:	d308      	bcc.n	801039e <__fpclassifyf+0x2a>
 801038c:	4905      	ldr	r1, [pc, #20]	@ (80103a4 <__fpclassifyf+0x30>)
 801038e:	1e53      	subs	r3, r2, #1
 8010390:	3801      	subs	r0, #1
 8010392:	428b      	cmp	r3, r1
 8010394:	d903      	bls.n	801039e <__fpclassifyf+0x2a>
 8010396:	4b04      	ldr	r3, [pc, #16]	@ (80103a8 <__fpclassifyf+0x34>)
 8010398:	18d0      	adds	r0, r2, r3
 801039a:	4243      	negs	r3, r0
 801039c:	4158      	adcs	r0, r3
 801039e:	4770      	bx	lr
 80103a0:	ff800000 	.word	0xff800000
 80103a4:	007ffffe 	.word	0x007ffffe
 80103a8:	80800000 	.word	0x80800000

080103ac <__ieee754_expf>:
 80103ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103ae:	21ff      	movs	r1, #255	@ 0xff
 80103b0:	0043      	lsls	r3, r0, #1
 80103b2:	1c04      	adds	r4, r0, #0
 80103b4:	085b      	lsrs	r3, r3, #1
 80103b6:	05c9      	lsls	r1, r1, #23
 80103b8:	428b      	cmp	r3, r1
 80103ba:	d904      	bls.n	80103c6 <__ieee754_expf+0x1a>
 80103bc:	1c01      	adds	r1, r0, #0
 80103be:	1c20      	adds	r0, r4, #0
 80103c0:	f7f0 fa34 	bl	800082c <__aeabi_fadd>
 80103c4:	e00d      	b.n	80103e2 <__ieee754_expf+0x36>
 80103c6:	0fc6      	lsrs	r6, r0, #31
 80103c8:	428b      	cmp	r3, r1
 80103ca:	d104      	bne.n	80103d6 <__ieee754_expf+0x2a>
 80103cc:	2e00      	cmp	r6, #0
 80103ce:	d000      	beq.n	80103d2 <__ieee754_expf+0x26>
 80103d0:	e0ba      	b.n	8010548 <__ieee754_expf+0x19c>
 80103d2:	1c20      	adds	r0, r4, #0
 80103d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103d6:	495d      	ldr	r1, [pc, #372]	@ (801054c <__ieee754_expf+0x1a0>)
 80103d8:	4288      	cmp	r0, r1
 80103da:	dd04      	ble.n	80103e6 <__ieee754_expf+0x3a>
 80103dc:	2000      	movs	r0, #0
 80103de:	f000 f8f1 	bl	80105c4 <__math_oflowf>
 80103e2:	1c04      	adds	r4, r0, #0
 80103e4:	e7f5      	b.n	80103d2 <__ieee754_expf+0x26>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	da06      	bge.n	80103f8 <__ieee754_expf+0x4c>
 80103ea:	4a59      	ldr	r2, [pc, #356]	@ (8010550 <__ieee754_expf+0x1a4>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d903      	bls.n	80103f8 <__ieee754_expf+0x4c>
 80103f0:	2000      	movs	r0, #0
 80103f2:	f000 f8e1 	bl	80105b8 <__math_uflowf>
 80103f6:	e7f4      	b.n	80103e2 <__ieee754_expf+0x36>
 80103f8:	4a56      	ldr	r2, [pc, #344]	@ (8010554 <__ieee754_expf+0x1a8>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d96e      	bls.n	80104dc <__ieee754_expf+0x130>
 80103fe:	4a56      	ldr	r2, [pc, #344]	@ (8010558 <__ieee754_expf+0x1ac>)
 8010400:	00b5      	lsls	r5, r6, #2
 8010402:	4293      	cmp	r3, r2
 8010404:	d84e      	bhi.n	80104a4 <__ieee754_expf+0xf8>
 8010406:	4b55      	ldr	r3, [pc, #340]	@ (801055c <__ieee754_expf+0x1b0>)
 8010408:	1c20      	adds	r0, r4, #0
 801040a:	5959      	ldr	r1, [r3, r5]
 801040c:	f7f0 febc 	bl	8001188 <__aeabi_fsub>
 8010410:	4b53      	ldr	r3, [pc, #332]	@ (8010560 <__ieee754_expf+0x1b4>)
 8010412:	1c07      	adds	r7, r0, #0
 8010414:	595b      	ldr	r3, [r3, r5]
 8010416:	2501      	movs	r5, #1
 8010418:	1bad      	subs	r5, r5, r6
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	1bad      	subs	r5, r5, r6
 801041e:	9900      	ldr	r1, [sp, #0]
 8010420:	1c38      	adds	r0, r7, #0
 8010422:	f7f0 feb1 	bl	8001188 <__aeabi_fsub>
 8010426:	1c04      	adds	r4, r0, #0
 8010428:	1c21      	adds	r1, r4, #0
 801042a:	1c20      	adds	r0, r4, #0
 801042c:	f7f0 fd6e 	bl	8000f0c <__aeabi_fmul>
 8010430:	494c      	ldr	r1, [pc, #304]	@ (8010564 <__ieee754_expf+0x1b8>)
 8010432:	1c06      	adds	r6, r0, #0
 8010434:	f7f0 fd6a 	bl	8000f0c <__aeabi_fmul>
 8010438:	494b      	ldr	r1, [pc, #300]	@ (8010568 <__ieee754_expf+0x1bc>)
 801043a:	f7f0 fea5 	bl	8001188 <__aeabi_fsub>
 801043e:	1c31      	adds	r1, r6, #0
 8010440:	f7f0 fd64 	bl	8000f0c <__aeabi_fmul>
 8010444:	4949      	ldr	r1, [pc, #292]	@ (801056c <__ieee754_expf+0x1c0>)
 8010446:	f7f0 f9f1 	bl	800082c <__aeabi_fadd>
 801044a:	1c31      	adds	r1, r6, #0
 801044c:	f7f0 fd5e 	bl	8000f0c <__aeabi_fmul>
 8010450:	4947      	ldr	r1, [pc, #284]	@ (8010570 <__ieee754_expf+0x1c4>)
 8010452:	f7f0 fe99 	bl	8001188 <__aeabi_fsub>
 8010456:	1c31      	adds	r1, r6, #0
 8010458:	f7f0 fd58 	bl	8000f0c <__aeabi_fmul>
 801045c:	4945      	ldr	r1, [pc, #276]	@ (8010574 <__ieee754_expf+0x1c8>)
 801045e:	f7f0 f9e5 	bl	800082c <__aeabi_fadd>
 8010462:	1c31      	adds	r1, r6, #0
 8010464:	f7f0 fd52 	bl	8000f0c <__aeabi_fmul>
 8010468:	1c01      	adds	r1, r0, #0
 801046a:	1c20      	adds	r0, r4, #0
 801046c:	f7f0 fe8c 	bl	8001188 <__aeabi_fsub>
 8010470:	1c01      	adds	r1, r0, #0
 8010472:	1c06      	adds	r6, r0, #0
 8010474:	1c20      	adds	r0, r4, #0
 8010476:	f7f0 fd49 	bl	8000f0c <__aeabi_fmul>
 801047a:	9001      	str	r0, [sp, #4]
 801047c:	2d00      	cmp	r5, #0
 801047e:	d140      	bne.n	8010502 <__ieee754_expf+0x156>
 8010480:	2180      	movs	r1, #128	@ 0x80
 8010482:	1c30      	adds	r0, r6, #0
 8010484:	05c9      	lsls	r1, r1, #23
 8010486:	f7f0 fe7f 	bl	8001188 <__aeabi_fsub>
 801048a:	1c01      	adds	r1, r0, #0
 801048c:	9801      	ldr	r0, [sp, #4]
 801048e:	f7f0 fb57 	bl	8000b40 <__aeabi_fdiv>
 8010492:	1c21      	adds	r1, r4, #0
 8010494:	f7f0 fe78 	bl	8001188 <__aeabi_fsub>
 8010498:	1c01      	adds	r1, r0, #0
 801049a:	20fe      	movs	r0, #254	@ 0xfe
 801049c:	0580      	lsls	r0, r0, #22
 801049e:	f7f0 fe73 	bl	8001188 <__aeabi_fsub>
 80104a2:	e79e      	b.n	80103e2 <__ieee754_expf+0x36>
 80104a4:	4934      	ldr	r1, [pc, #208]	@ (8010578 <__ieee754_expf+0x1cc>)
 80104a6:	1c20      	adds	r0, r4, #0
 80104a8:	f7f0 fd30 	bl	8000f0c <__aeabi_fmul>
 80104ac:	4b33      	ldr	r3, [pc, #204]	@ (801057c <__ieee754_expf+0x1d0>)
 80104ae:	5959      	ldr	r1, [r3, r5]
 80104b0:	f7f0 f9bc 	bl	800082c <__aeabi_fadd>
 80104b4:	f7f1 f822 	bl	80014fc <__aeabi_f2iz>
 80104b8:	0005      	movs	r5, r0
 80104ba:	f7f1 f83f 	bl	800153c <__aeabi_i2f>
 80104be:	4930      	ldr	r1, [pc, #192]	@ (8010580 <__ieee754_expf+0x1d4>)
 80104c0:	1c06      	adds	r6, r0, #0
 80104c2:	f7f0 fd23 	bl	8000f0c <__aeabi_fmul>
 80104c6:	1c01      	adds	r1, r0, #0
 80104c8:	1c20      	adds	r0, r4, #0
 80104ca:	f7f0 fe5d 	bl	8001188 <__aeabi_fsub>
 80104ce:	492d      	ldr	r1, [pc, #180]	@ (8010584 <__ieee754_expf+0x1d8>)
 80104d0:	1c07      	adds	r7, r0, #0
 80104d2:	1c30      	adds	r0, r6, #0
 80104d4:	f7f0 fd1a 	bl	8000f0c <__aeabi_fmul>
 80104d8:	9000      	str	r0, [sp, #0]
 80104da:	e7a0      	b.n	801041e <__ieee754_expf+0x72>
 80104dc:	22d0      	movs	r2, #208	@ 0xd0
 80104de:	0592      	lsls	r2, r2, #22
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d20c      	bcs.n	80104fe <__ieee754_expf+0x152>
 80104e4:	4928      	ldr	r1, [pc, #160]	@ (8010588 <__ieee754_expf+0x1dc>)
 80104e6:	1c20      	adds	r0, r4, #0
 80104e8:	f7f0 f9a0 	bl	800082c <__aeabi_fadd>
 80104ec:	21fe      	movs	r1, #254	@ 0xfe
 80104ee:	0589      	lsls	r1, r1, #22
 80104f0:	f7f0 f800 	bl	80004f4 <__aeabi_fcmpgt>
 80104f4:	1e05      	subs	r5, r0, #0
 80104f6:	d097      	beq.n	8010428 <__ieee754_expf+0x7c>
 80104f8:	21fe      	movs	r1, #254	@ 0xfe
 80104fa:	0589      	lsls	r1, r1, #22
 80104fc:	e75f      	b.n	80103be <__ieee754_expf+0x12>
 80104fe:	2500      	movs	r5, #0
 8010500:	e792      	b.n	8010428 <__ieee754_expf+0x7c>
 8010502:	2080      	movs	r0, #128	@ 0x80
 8010504:	1c31      	adds	r1, r6, #0
 8010506:	05c0      	lsls	r0, r0, #23
 8010508:	f7f0 fe3e 	bl	8001188 <__aeabi_fsub>
 801050c:	1c01      	adds	r1, r0, #0
 801050e:	9801      	ldr	r0, [sp, #4]
 8010510:	f7f0 fb16 	bl	8000b40 <__aeabi_fdiv>
 8010514:	1c01      	adds	r1, r0, #0
 8010516:	9800      	ldr	r0, [sp, #0]
 8010518:	f7f0 fe36 	bl	8001188 <__aeabi_fsub>
 801051c:	1c39      	adds	r1, r7, #0
 801051e:	f7f0 fe33 	bl	8001188 <__aeabi_fsub>
 8010522:	1c01      	adds	r1, r0, #0
 8010524:	20fe      	movs	r0, #254	@ 0xfe
 8010526:	0580      	lsls	r0, r0, #22
 8010528:	f7f0 fe2e 	bl	8001188 <__aeabi_fsub>
 801052c:	002b      	movs	r3, r5
 801052e:	337d      	adds	r3, #125	@ 0x7d
 8010530:	db02      	blt.n	8010538 <__ieee754_expf+0x18c>
 8010532:	05ec      	lsls	r4, r5, #23
 8010534:	1824      	adds	r4, r4, r0
 8010536:	e74c      	b.n	80103d2 <__ieee754_expf+0x26>
 8010538:	21d8      	movs	r1, #216	@ 0xd8
 801053a:	3564      	adds	r5, #100	@ 0x64
 801053c:	05ed      	lsls	r5, r5, #23
 801053e:	1828      	adds	r0, r5, r0
 8010540:	0509      	lsls	r1, r1, #20
 8010542:	f7f0 fce3 	bl	8000f0c <__aeabi_fmul>
 8010546:	e74c      	b.n	80103e2 <__ieee754_expf+0x36>
 8010548:	2400      	movs	r4, #0
 801054a:	e742      	b.n	80103d2 <__ieee754_expf+0x26>
 801054c:	42b17217 	.word	0x42b17217
 8010550:	42cff1b5 	.word	0x42cff1b5
 8010554:	3eb17218 	.word	0x3eb17218
 8010558:	3f851591 	.word	0x3f851591
 801055c:	08010d50 	.word	0x08010d50
 8010560:	08010d48 	.word	0x08010d48
 8010564:	3331bb4c 	.word	0x3331bb4c
 8010568:	35ddea0e 	.word	0x35ddea0e
 801056c:	388ab355 	.word	0x388ab355
 8010570:	3b360b61 	.word	0x3b360b61
 8010574:	3e2aaaab 	.word	0x3e2aaaab
 8010578:	3fb8aa3b 	.word	0x3fb8aa3b
 801057c:	08010d58 	.word	0x08010d58
 8010580:	3f317180 	.word	0x3f317180
 8010584:	3717f7d1 	.word	0x3717f7d1
 8010588:	7149f2ca 	.word	0x7149f2ca

0801058c <with_errnof>:
 801058c:	b570      	push	{r4, r5, r6, lr}
 801058e:	000d      	movs	r5, r1
 8010590:	1c04      	adds	r4, r0, #0
 8010592:	f7fc fa3d 	bl	800ca10 <__errno>
 8010596:	6005      	str	r5, [r0, #0]
 8010598:	1c20      	adds	r0, r4, #0
 801059a:	bd70      	pop	{r4, r5, r6, pc}

0801059c <xflowf>:
 801059c:	b510      	push	{r4, lr}
 801059e:	1c0b      	adds	r3, r1, #0
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d002      	beq.n	80105aa <xflowf+0xe>
 80105a4:	2380      	movs	r3, #128	@ 0x80
 80105a6:	061b      	lsls	r3, r3, #24
 80105a8:	18cb      	adds	r3, r1, r3
 80105aa:	1c18      	adds	r0, r3, #0
 80105ac:	f7f0 fcae 	bl	8000f0c <__aeabi_fmul>
 80105b0:	2122      	movs	r1, #34	@ 0x22
 80105b2:	f7ff ffeb 	bl	801058c <with_errnof>
 80105b6:	bd10      	pop	{r4, pc}

080105b8 <__math_uflowf>:
 80105b8:	2180      	movs	r1, #128	@ 0x80
 80105ba:	b510      	push	{r4, lr}
 80105bc:	0549      	lsls	r1, r1, #21
 80105be:	f7ff ffed 	bl	801059c <xflowf>
 80105c2:	bd10      	pop	{r4, pc}

080105c4 <__math_oflowf>:
 80105c4:	21e0      	movs	r1, #224	@ 0xe0
 80105c6:	b510      	push	{r4, lr}
 80105c8:	05c9      	lsls	r1, r1, #23
 80105ca:	f7ff ffe7 	bl	801059c <xflowf>
 80105ce:	bd10      	pop	{r4, pc}

080105d0 <_init>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	46c0      	nop			@ (mov r8, r8)
 80105d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105d6:	bc08      	pop	{r3}
 80105d8:	469e      	mov	lr, r3
 80105da:	4770      	bx	lr

080105dc <_fini>:
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105de:	46c0      	nop			@ (mov r8, r8)
 80105e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e2:	bc08      	pop	{r3}
 80105e4:	469e      	mov	lr, r3
 80105e6:	4770      	bx	lr
