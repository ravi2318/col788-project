
Task-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c290  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800c350  0800c350  0000d350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c970  0800c970  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c970  0800c970  0000d970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c978  0800c978  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c978  0800c978  0000d978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c97c  0800c97c  0000d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c980  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200001e4  0800cb64  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800cb64  0000e650  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb93  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc4  00000000  00000000  0001ad9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0001cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fc  00000000  00000000  0001d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c8e  00000000  00000000  0001dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edc5  00000000  00000000  00033c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008152c  00000000  00000000  00042a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  000c3fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c338 	.word	0x0800c338

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800c338 	.word	0x0800c338

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f841 	bl	80024c4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff81 	bl	8002354 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f833 	bl	80024c4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f829 	bl	80024c4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ffab 	bl	80023dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffa1 	bl	80023dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fe71 	bl	80032b4 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 faac 	bl	8002b38 <__aeabi_dsub>
 80005e0:	f002 fe68 	bl	80032b4 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 ffb7 	bl	80025a8 <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fea2 	bl	8003388 <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 ffae 	bl	80025a8 <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 fa70 	bl	8002b38 <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fe5d 	bl	800332c <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 ff97 	bl	80025a8 <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fe82 	bl	8003388 <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 ffe6 	bl	8001658 <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 ff76 	bl	80035a4 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 ff71 	bl	80035a4 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fde3 	bl	8003568 <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fcb1 	bl	8003568 <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 fca5 	bl	8003568 <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	0800c404 	.word	0x0800c404
 8000d78:	0800c444 	.word	0x0800c444
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fa6a 	bl	8003568 <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 fa5c 	bl	8003568 <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_fsub>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4647      	mov	r7, r8
 800118c:	46ce      	mov	lr, r9
 800118e:	024e      	lsls	r6, r1, #9
 8001190:	0243      	lsls	r3, r0, #9
 8001192:	0045      	lsls	r5, r0, #1
 8001194:	0a72      	lsrs	r2, r6, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0048      	lsls	r0, r1, #1
 800119a:	b580      	push	{r7, lr}
 800119c:	4694      	mov	ip, r2
 800119e:	0a5f      	lsrs	r7, r3, #9
 80011a0:	0e2d      	lsrs	r5, r5, #24
 80011a2:	099b      	lsrs	r3, r3, #6
 80011a4:	0e00      	lsrs	r0, r0, #24
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	09b6      	lsrs	r6, r6, #6
 80011aa:	28ff      	cmp	r0, #255	@ 0xff
 80011ac:	d024      	beq.n	80011f8 <__aeabi_fsub+0x70>
 80011ae:	2201      	movs	r2, #1
 80011b0:	4051      	eors	r1, r2
 80011b2:	1a2a      	subs	r2, r5, r0
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d00f      	beq.n	80011d8 <__aeabi_fsub+0x50>
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dc00      	bgt.n	80011be <__aeabi_fsub+0x36>
 80011bc:	e16a      	b.n	8001494 <__aeabi_fsub+0x30c>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d135      	bne.n	800122e <__aeabi_fsub+0xa6>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x40>
 80011c6:	e0a2      	b.n	800130e <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x48>
 80011ce:	e124      	b.n	800141a <__aeabi_fsub+0x292>
 80011d0:	2aff      	cmp	r2, #255	@ 0xff
 80011d2:	d021      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011d4:	000a      	movs	r2, r1
 80011d6:	e02f      	b.n	8001238 <__aeabi_fsub+0xb0>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_fsub+0x56>
 80011dc:	e167      	b.n	80014ae <__aeabi_fsub+0x326>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d05e      	beq.n	80012a0 <__aeabi_fsub+0x118>
 80011e2:	2dff      	cmp	r5, #255	@ 0xff
 80011e4:	d018      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	04c9      	lsls	r1, r1, #19
 80011ea:	430e      	orrs	r6, r1
 80011ec:	2a1b      	cmp	r2, #27
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_fsub+0x6a>
 80011f0:	e076      	b.n	80012e0 <__aeabi_fsub+0x158>
 80011f2:	002a      	movs	r2, r5
 80011f4:	3301      	adds	r3, #1
 80011f6:	e032      	b.n	800125e <__aeabi_fsub+0xd6>
 80011f8:	002a      	movs	r2, r5
 80011fa:	3aff      	subs	r2, #255	@ 0xff
 80011fc:	4691      	mov	r9, r2
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d042      	beq.n	8001288 <__aeabi_fsub+0x100>
 8001202:	428c      	cmp	r4, r1
 8001204:	d055      	beq.n	80012b2 <__aeabi_fsub+0x12a>
 8001206:	464a      	mov	r2, r9
 8001208:	2a00      	cmp	r2, #0
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x86>
 800120c:	e09c      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800120e:	2d00      	cmp	r5, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x8c>
 8001212:	e077      	b.n	8001304 <__aeabi_fsub+0x17c>
 8001214:	000c      	movs	r4, r1
 8001216:	0033      	movs	r3, r6
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_fsub+0x98>
 800121e:	e06e      	b.n	80012fe <__aeabi_fsub+0x176>
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	03d2      	lsls	r2, r2, #15
 8001224:	4313      	orrs	r3, r2
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	20ff      	movs	r0, #255	@ 0xff
 800122a:	0a5b      	lsrs	r3, r3, #9
 800122c:	e024      	b.n	8001278 <__aeabi_fsub+0xf0>
 800122e:	2dff      	cmp	r5, #255	@ 0xff
 8001230:	d0f2      	beq.n	8001218 <__aeabi_fsub+0x90>
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	04c9      	lsls	r1, r1, #19
 8001236:	430e      	orrs	r6, r1
 8001238:	2101      	movs	r1, #1
 800123a:	2a1b      	cmp	r2, #27
 800123c:	dc08      	bgt.n	8001250 <__aeabi_fsub+0xc8>
 800123e:	0031      	movs	r1, r6
 8001240:	2020      	movs	r0, #32
 8001242:	40d1      	lsrs	r1, r2
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	4096      	lsls	r6, r2
 8001248:	0032      	movs	r2, r6
 800124a:	1e50      	subs	r0, r2, #1
 800124c:	4182      	sbcs	r2, r0
 800124e:	4311      	orrs	r1, r2
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	d460      	bmi.n	8001318 <__aeabi_fsub+0x190>
 8001256:	2107      	movs	r1, #7
 8001258:	002a      	movs	r2, r5
 800125a:	4019      	ands	r1, r3
 800125c:	d057      	beq.n	800130e <__aeabi_fsub+0x186>
 800125e:	210f      	movs	r1, #15
 8001260:	4019      	ands	r1, r3
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0xe0>
 8001266:	3304      	adds	r3, #4
 8001268:	0159      	lsls	r1, r3, #5
 800126a:	d550      	bpl.n	800130e <__aeabi_fsub+0x186>
 800126c:	1c50      	adds	r0, r2, #1
 800126e:	2afe      	cmp	r2, #254	@ 0xfe
 8001270:	d045      	beq.n	80012fe <__aeabi_fsub+0x176>
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b2c0      	uxtb	r0, r0
 8001276:	0a5b      	lsrs	r3, r3, #9
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4318      	orrs	r0, r3
 800127c:	07e4      	lsls	r4, r4, #31
 800127e:	4320      	orrs	r0, r4
 8001280:	bcc0      	pop	{r6, r7}
 8001282:	46b9      	mov	r9, r7
 8001284:	46b0      	mov	r8, r6
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001288:	2201      	movs	r2, #1
 800128a:	4051      	eors	r1, r2
 800128c:	428c      	cmp	r4, r1
 800128e:	d1ba      	bne.n	8001206 <__aeabi_fsub+0x7e>
 8001290:	464a      	mov	r2, r9
 8001292:	2a00      	cmp	r2, #0
 8001294:	d010      	beq.n	80012b8 <__aeabi_fsub+0x130>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x114>
 800129a:	e098      	b.n	80013ce <__aeabi_fsub+0x246>
 800129c:	2300      	movs	r3, #0
 800129e:	e7bb      	b.n	8001218 <__aeabi_fsub+0x90>
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d034      	beq.n	800130e <__aeabi_fsub+0x186>
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d06e      	beq.n	8001388 <__aeabi_fsub+0x200>
 80012aa:	2aff      	cmp	r2, #255	@ 0xff
 80012ac:	d0b4      	beq.n	8001218 <__aeabi_fsub+0x90>
 80012ae:	000a      	movs	r2, r1
 80012b0:	e79c      	b.n	80011ec <__aeabi_fsub+0x64>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d000      	beq.n	80012b8 <__aeabi_fsub+0x130>
 80012b6:	e088      	b.n	80013ca <__aeabi_fsub+0x242>
 80012b8:	20fe      	movs	r0, #254	@ 0xfe
 80012ba:	1c6a      	adds	r2, r5, #1
 80012bc:	4210      	tst	r0, r2
 80012be:	d000      	beq.n	80012c2 <__aeabi_fsub+0x13a>
 80012c0:	e092      	b.n	80013e8 <__aeabi_fsub+0x260>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x140>
 80012c6:	e0a4      	b.n	8001412 <__aeabi_fsub+0x28a>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x146>
 80012cc:	e0cb      	b.n	8001466 <__aeabi_fsub+0x2de>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 80012d2:	e0ca      	b.n	800146a <__aeabi_fsub+0x2e2>
 80012d4:	2200      	movs	r2, #0
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	b2d0      	uxtb	r0, r2
 80012de:	e7cb      	b.n	8001278 <__aeabi_fsub+0xf0>
 80012e0:	0031      	movs	r1, r6
 80012e2:	2020      	movs	r0, #32
 80012e4:	40d1      	lsrs	r1, r2
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0032      	movs	r2, r6
 80012ec:	1e50      	subs	r0, r2, #1
 80012ee:	4182      	sbcs	r2, r0
 80012f0:	430a      	orrs	r2, r1
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	d5ae      	bpl.n	8001256 <__aeabi_fsub+0xce>
 80012f8:	1c6a      	adds	r2, r5, #1
 80012fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80012fc:	d14a      	bne.n	8001394 <__aeabi_fsub+0x20c>
 80012fe:	20ff      	movs	r0, #255	@ 0xff
 8001300:	2300      	movs	r3, #0
 8001302:	e7b9      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	2b00      	cmp	r3, #0
 8001308:	d14b      	bne.n	80013a2 <__aeabi_fsub+0x21a>
 800130a:	000c      	movs	r4, r1
 800130c:	0033      	movs	r3, r6
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	2aff      	cmp	r2, #255	@ 0xff
 8001312:	d100      	bne.n	8001316 <__aeabi_fsub+0x18e>
 8001314:	e781      	b.n	800121a <__aeabi_fsub+0x92>
 8001316:	e7df      	b.n	80012d8 <__aeabi_fsub+0x150>
 8001318:	019f      	lsls	r7, r3, #6
 800131a:	09bf      	lsrs	r7, r7, #6
 800131c:	0038      	movs	r0, r7
 800131e:	f002 f923 	bl	8003568 <__clzsi2>
 8001322:	3805      	subs	r0, #5
 8001324:	4087      	lsls	r7, r0
 8001326:	4285      	cmp	r5, r0
 8001328:	dc21      	bgt.n	800136e <__aeabi_fsub+0x1e6>
 800132a:	003b      	movs	r3, r7
 800132c:	2120      	movs	r1, #32
 800132e:	1b42      	subs	r2, r0, r5
 8001330:	3201      	adds	r2, #1
 8001332:	40d3      	lsrs	r3, r2
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	4097      	lsls	r7, r2
 8001338:	1e7a      	subs	r2, r7, #1
 800133a:	4197      	sbcs	r7, r2
 800133c:	2200      	movs	r2, #0
 800133e:	433b      	orrs	r3, r7
 8001340:	0759      	lsls	r1, r3, #29
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x1be>
 8001344:	e78b      	b.n	800125e <__aeabi_fsub+0xd6>
 8001346:	e78f      	b.n	8001268 <__aeabi_fsub+0xe0>
 8001348:	20fe      	movs	r0, #254	@ 0xfe
 800134a:	1c6a      	adds	r2, r5, #1
 800134c:	4210      	tst	r0, r2
 800134e:	d112      	bne.n	8001376 <__aeabi_fsub+0x1ee>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d152      	bne.n	80013fa <__aeabi_fsub+0x272>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d07c      	beq.n	8001452 <__aeabi_fsub+0x2ca>
 8001358:	2e00      	cmp	r6, #0
 800135a:	d0bb      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 800135c:	1b9a      	subs	r2, r3, r6
 800135e:	0150      	lsls	r0, r2, #5
 8001360:	d400      	bmi.n	8001364 <__aeabi_fsub+0x1dc>
 8001362:	e08b      	b.n	800147c <__aeabi_fsub+0x2f4>
 8001364:	2401      	movs	r4, #1
 8001366:	2200      	movs	r2, #0
 8001368:	1af3      	subs	r3, r6, r3
 800136a:	400c      	ands	r4, r1
 800136c:	e7e8      	b.n	8001340 <__aeabi_fsub+0x1b8>
 800136e:	4b56      	ldr	r3, [pc, #344]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001370:	1a2a      	subs	r2, r5, r0
 8001372:	403b      	ands	r3, r7
 8001374:	e7e4      	b.n	8001340 <__aeabi_fsub+0x1b8>
 8001376:	1b9f      	subs	r7, r3, r6
 8001378:	017a      	lsls	r2, r7, #5
 800137a:	d446      	bmi.n	800140a <__aeabi_fsub+0x282>
 800137c:	2f00      	cmp	r7, #0
 800137e:	d1cd      	bne.n	800131c <__aeabi_fsub+0x194>
 8001380:	2400      	movs	r4, #0
 8001382:	2000      	movs	r0, #0
 8001384:	2300      	movs	r3, #0
 8001386:	e777      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001388:	199b      	adds	r3, r3, r6
 800138a:	2501      	movs	r5, #1
 800138c:	3201      	adds	r2, #1
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	d400      	bmi.n	8001394 <__aeabi_fsub+0x20c>
 8001392:	e760      	b.n	8001256 <__aeabi_fsub+0xce>
 8001394:	2101      	movs	r1, #1
 8001396:	484d      	ldr	r0, [pc, #308]	@ (80014cc <__aeabi_fsub+0x344>)
 8001398:	4019      	ands	r1, r3
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	4003      	ands	r3, r0
 800139e:	430b      	orrs	r3, r1
 80013a0:	e7ce      	b.n	8001340 <__aeabi_fsub+0x1b8>
 80013a2:	1e57      	subs	r7, r2, #1
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d05a      	beq.n	800145e <__aeabi_fsub+0x2d6>
 80013a8:	000c      	movs	r4, r1
 80013aa:	2aff      	cmp	r2, #255	@ 0xff
 80013ac:	d033      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2f1b      	cmp	r7, #27
 80013b2:	dc07      	bgt.n	80013c4 <__aeabi_fsub+0x23c>
 80013b4:	2120      	movs	r1, #32
 80013b6:	1bc9      	subs	r1, r1, r7
 80013b8:	001a      	movs	r2, r3
 80013ba:	408b      	lsls	r3, r1
 80013bc:	40fa      	lsrs	r2, r7
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	418b      	sbcs	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	0005      	movs	r5, r0
 80013c6:	1ab3      	subs	r3, r6, r2
 80013c8:	e743      	b.n	8001252 <__aeabi_fsub+0xca>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d123      	bne.n	8001416 <__aeabi_fsub+0x28e>
 80013ce:	22ff      	movs	r2, #255	@ 0xff
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d09b      	beq.n	800130c <__aeabi_fsub+0x184>
 80013d4:	1e51      	subs	r1, r2, #1
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d0d6      	beq.n	8001388 <__aeabi_fsub+0x200>
 80013da:	2aff      	cmp	r2, #255	@ 0xff
 80013dc:	d01b      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013de:	291b      	cmp	r1, #27
 80013e0:	dd2c      	ble.n	800143c <__aeabi_fsub+0x2b4>
 80013e2:	0002      	movs	r2, r0
 80013e4:	1c73      	adds	r3, r6, #1
 80013e6:	e73a      	b.n	800125e <__aeabi_fsub+0xd6>
 80013e8:	2aff      	cmp	r2, #255	@ 0xff
 80013ea:	d088      	beq.n	80012fe <__aeabi_fsub+0x176>
 80013ec:	199b      	adds	r3, r3, r6
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	0759      	lsls	r1, r3, #29
 80013f2:	d000      	beq.n	80013f6 <__aeabi_fsub+0x26e>
 80013f4:	e733      	b.n	800125e <__aeabi_fsub+0xd6>
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_fsub+0x150>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d110      	bne.n	8001420 <__aeabi_fsub+0x298>
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d043      	beq.n	800148a <__aeabi_fsub+0x302>
 8001402:	2401      	movs	r4, #1
 8001404:	0033      	movs	r3, r6
 8001406:	400c      	ands	r4, r1
 8001408:	e706      	b.n	8001218 <__aeabi_fsub+0x90>
 800140a:	2401      	movs	r4, #1
 800140c:	1af7      	subs	r7, r6, r3
 800140e:	400c      	ands	r4, r1
 8001410:	e784      	b.n	800131c <__aeabi_fsub+0x194>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <__aeabi_fsub+0x298>
 8001416:	0033      	movs	r3, r6
 8001418:	e6fe      	b.n	8001218 <__aeabi_fsub+0x90>
 800141a:	2501      	movs	r5, #1
 800141c:	1b9b      	subs	r3, r3, r6
 800141e:	e718      	b.n	8001252 <__aeabi_fsub+0xca>
 8001420:	2e00      	cmp	r6, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_fsub+0x29e>
 8001424:	e6f8      	b.n	8001218 <__aeabi_fsub+0x90>
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	03d2      	lsls	r2, r2, #15
 800142a:	4297      	cmp	r7, r2
 800142c:	d304      	bcc.n	8001438 <__aeabi_fsub+0x2b0>
 800142e:	4594      	cmp	ip, r2
 8001430:	d202      	bcs.n	8001438 <__aeabi_fsub+0x2b0>
 8001432:	2401      	movs	r4, #1
 8001434:	0033      	movs	r3, r6
 8001436:	400c      	ands	r4, r1
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	e6f1      	b.n	8001220 <__aeabi_fsub+0x98>
 800143c:	001a      	movs	r2, r3
 800143e:	2520      	movs	r5, #32
 8001440:	40ca      	lsrs	r2, r1
 8001442:	1a69      	subs	r1, r5, r1
 8001444:	408b      	lsls	r3, r1
 8001446:	1e59      	subs	r1, r3, #1
 8001448:	418b      	sbcs	r3, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	0005      	movs	r5, r0
 800144e:	199b      	adds	r3, r3, r6
 8001450:	e750      	b.n	80012f4 <__aeabi_fsub+0x16c>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d094      	beq.n	8001380 <__aeabi_fsub+0x1f8>
 8001456:	2401      	movs	r4, #1
 8001458:	0033      	movs	r3, r6
 800145a:	400c      	ands	r4, r1
 800145c:	e73a      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800145e:	000c      	movs	r4, r1
 8001460:	2501      	movs	r5, #1
 8001462:	1af3      	subs	r3, r6, r3
 8001464:	e6f5      	b.n	8001252 <__aeabi_fsub+0xca>
 8001466:	0033      	movs	r3, r6
 8001468:	e734      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800146a:	199b      	adds	r3, r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	0159      	lsls	r1, r3, #5
 8001470:	d5c1      	bpl.n	80013f6 <__aeabi_fsub+0x26e>
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001474:	4013      	ands	r3, r2
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	2201      	movs	r2, #1
 800147a:	e72d      	b.n	80012d8 <__aeabi_fsub+0x150>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_fsub+0x2fa>
 8001480:	e77e      	b.n	8001380 <__aeabi_fsub+0x1f8>
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	e726      	b.n	80012d8 <__aeabi_fsub+0x150>
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	2400      	movs	r4, #0
 800148e:	20ff      	movs	r0, #255	@ 0xff
 8001490:	03db      	lsls	r3, r3, #15
 8001492:	e6f1      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001494:	2a00      	cmp	r2, #0
 8001496:	d100      	bne.n	800149a <__aeabi_fsub+0x312>
 8001498:	e756      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800149a:	1b47      	subs	r7, r0, r5
 800149c:	003a      	movs	r2, r7
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_fsub+0x31c>
 80014a2:	e730      	b.n	8001306 <__aeabi_fsub+0x17e>
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	04d2      	lsls	r2, r2, #19
 80014a8:	000c      	movs	r4, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	e77f      	b.n	80013ae <__aeabi_fsub+0x226>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_fsub+0x32c>
 80014b2:	e701      	b.n	80012b8 <__aeabi_fsub+0x130>
 80014b4:	1b41      	subs	r1, r0, r5
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d101      	bne.n	80014be <__aeabi_fsub+0x336>
 80014ba:	000a      	movs	r2, r1
 80014bc:	e788      	b.n	80013d0 <__aeabi_fsub+0x248>
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	04d2      	lsls	r2, r2, #19
 80014c2:	4313      	orrs	r3, r2
 80014c4:	e78b      	b.n	80013de <__aeabi_fsub+0x256>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	fbffffff 	.word	0xfbffffff
 80014cc:	7dffffff 	.word	0x7dffffff

080014d0 <__aeabi_fcmpun>:
 80014d0:	0243      	lsls	r3, r0, #9
 80014d2:	024a      	lsls	r2, r1, #9
 80014d4:	0040      	lsls	r0, r0, #1
 80014d6:	0049      	lsls	r1, r1, #1
 80014d8:	0a5b      	lsrs	r3, r3, #9
 80014da:	0a52      	lsrs	r2, r2, #9
 80014dc:	0e09      	lsrs	r1, r1, #24
 80014de:	0e00      	lsrs	r0, r0, #24
 80014e0:	28ff      	cmp	r0, #255	@ 0xff
 80014e2:	d006      	beq.n	80014f2 <__aeabi_fcmpun+0x22>
 80014e4:	2000      	movs	r0, #0
 80014e6:	29ff      	cmp	r1, #255	@ 0xff
 80014e8:	d102      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014ea:	1e53      	subs	r3, r2, #1
 80014ec:	419a      	sbcs	r2, r3
 80014ee:	0010      	movs	r0, r2
 80014f0:	4770      	bx	lr
 80014f2:	38fe      	subs	r0, #254	@ 0xfe
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1fb      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014f8:	e7f4      	b.n	80014e4 <__aeabi_fcmpun+0x14>
 80014fa:	46c0      	nop			@ (mov r8, r8)

080014fc <__aeabi_f2iz>:
 80014fc:	0241      	lsls	r1, r0, #9
 80014fe:	0042      	lsls	r2, r0, #1
 8001500:	0fc3      	lsrs	r3, r0, #31
 8001502:	0a49      	lsrs	r1, r1, #9
 8001504:	2000      	movs	r0, #0
 8001506:	0e12      	lsrs	r2, r2, #24
 8001508:	2a7e      	cmp	r2, #126	@ 0x7e
 800150a:	dd03      	ble.n	8001514 <__aeabi_f2iz+0x18>
 800150c:	2a9d      	cmp	r2, #157	@ 0x9d
 800150e:	dd02      	ble.n	8001516 <__aeabi_f2iz+0x1a>
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <__aeabi_f2iz+0x3c>)
 8001512:	1898      	adds	r0, r3, r2
 8001514:	4770      	bx	lr
 8001516:	2080      	movs	r0, #128	@ 0x80
 8001518:	0400      	lsls	r0, r0, #16
 800151a:	4301      	orrs	r1, r0
 800151c:	2a95      	cmp	r2, #149	@ 0x95
 800151e:	dc07      	bgt.n	8001530 <__aeabi_f2iz+0x34>
 8001520:	2096      	movs	r0, #150	@ 0x96
 8001522:	1a82      	subs	r2, r0, r2
 8001524:	40d1      	lsrs	r1, r2
 8001526:	4248      	negs	r0, r1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f3      	bne.n	8001514 <__aeabi_f2iz+0x18>
 800152c:	0008      	movs	r0, r1
 800152e:	e7f1      	b.n	8001514 <__aeabi_f2iz+0x18>
 8001530:	3a96      	subs	r2, #150	@ 0x96
 8001532:	4091      	lsls	r1, r2
 8001534:	e7f7      	b.n	8001526 <__aeabi_f2iz+0x2a>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	7fffffff 	.word	0x7fffffff

0800153c <__aeabi_i2f>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	2800      	cmp	r0, #0
 8001540:	d013      	beq.n	800156a <__aeabi_i2f+0x2e>
 8001542:	17c3      	asrs	r3, r0, #31
 8001544:	18c5      	adds	r5, r0, r3
 8001546:	405d      	eors	r5, r3
 8001548:	0fc4      	lsrs	r4, r0, #31
 800154a:	0028      	movs	r0, r5
 800154c:	f002 f80c 	bl	8003568 <__clzsi2>
 8001550:	239e      	movs	r3, #158	@ 0x9e
 8001552:	0001      	movs	r1, r0
 8001554:	1a1b      	subs	r3, r3, r0
 8001556:	2b96      	cmp	r3, #150	@ 0x96
 8001558:	dc0f      	bgt.n	800157a <__aeabi_i2f+0x3e>
 800155a:	2808      	cmp	r0, #8
 800155c:	d034      	beq.n	80015c8 <__aeabi_i2f+0x8c>
 800155e:	3908      	subs	r1, #8
 8001560:	408d      	lsls	r5, r1
 8001562:	026d      	lsls	r5, r5, #9
 8001564:	0a6d      	lsrs	r5, r5, #9
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	e002      	b.n	8001570 <__aeabi_i2f+0x34>
 800156a:	2400      	movs	r4, #0
 800156c:	2000      	movs	r0, #0
 800156e:	2500      	movs	r5, #0
 8001570:	05c0      	lsls	r0, r0, #23
 8001572:	4328      	orrs	r0, r5
 8001574:	07e4      	lsls	r4, r4, #31
 8001576:	4320      	orrs	r0, r4
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	2b99      	cmp	r3, #153	@ 0x99
 800157c:	dc16      	bgt.n	80015ac <__aeabi_i2f+0x70>
 800157e:	1f42      	subs	r2, r0, #5
 8001580:	2805      	cmp	r0, #5
 8001582:	d000      	beq.n	8001586 <__aeabi_i2f+0x4a>
 8001584:	4095      	lsls	r5, r2
 8001586:	002a      	movs	r2, r5
 8001588:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <__aeabi_i2f+0x94>)
 800158a:	4002      	ands	r2, r0
 800158c:	076e      	lsls	r6, r5, #29
 800158e:	d009      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001590:	260f      	movs	r6, #15
 8001592:	4035      	ands	r5, r6
 8001594:	2d04      	cmp	r5, #4
 8001596:	d005      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001598:	3204      	adds	r2, #4
 800159a:	0155      	lsls	r5, r2, #5
 800159c:	d502      	bpl.n	80015a4 <__aeabi_i2f+0x68>
 800159e:	239f      	movs	r3, #159	@ 0x9f
 80015a0:	4002      	ands	r2, r0
 80015a2:	1a5b      	subs	r3, r3, r1
 80015a4:	0192      	lsls	r2, r2, #6
 80015a6:	0a55      	lsrs	r5, r2, #9
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	e7e1      	b.n	8001570 <__aeabi_i2f+0x34>
 80015ac:	2205      	movs	r2, #5
 80015ae:	1a12      	subs	r2, r2, r0
 80015b0:	0028      	movs	r0, r5
 80015b2:	40d0      	lsrs	r0, r2
 80015b4:	0002      	movs	r2, r0
 80015b6:	0008      	movs	r0, r1
 80015b8:	301b      	adds	r0, #27
 80015ba:	4085      	lsls	r5, r0
 80015bc:	0028      	movs	r0, r5
 80015be:	1e45      	subs	r5, r0, #1
 80015c0:	41a8      	sbcs	r0, r5
 80015c2:	4302      	orrs	r2, r0
 80015c4:	0015      	movs	r5, r2
 80015c6:	e7de      	b.n	8001586 <__aeabi_i2f+0x4a>
 80015c8:	026d      	lsls	r5, r5, #9
 80015ca:	2096      	movs	r0, #150	@ 0x96
 80015cc:	0a6d      	lsrs	r5, r5, #9
 80015ce:	e7cf      	b.n	8001570 <__aeabi_i2f+0x34>
 80015d0:	fbffffff 	.word	0xfbffffff

080015d4 <__aeabi_ui2f>:
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	1e04      	subs	r4, r0, #0
 80015d8:	d00e      	beq.n	80015f8 <__aeabi_ui2f+0x24>
 80015da:	f001 ffc5 	bl	8003568 <__clzsi2>
 80015de:	239e      	movs	r3, #158	@ 0x9e
 80015e0:	0001      	movs	r1, r0
 80015e2:	1a1b      	subs	r3, r3, r0
 80015e4:	2b96      	cmp	r3, #150	@ 0x96
 80015e6:	dc0c      	bgt.n	8001602 <__aeabi_ui2f+0x2e>
 80015e8:	2808      	cmp	r0, #8
 80015ea:	d02f      	beq.n	800164c <__aeabi_ui2f+0x78>
 80015ec:	3908      	subs	r1, #8
 80015ee:	408c      	lsls	r4, r1
 80015f0:	0264      	lsls	r4, r4, #9
 80015f2:	0a64      	lsrs	r4, r4, #9
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	e001      	b.n	80015fc <__aeabi_ui2f+0x28>
 80015f8:	2000      	movs	r0, #0
 80015fa:	2400      	movs	r4, #0
 80015fc:	05c0      	lsls	r0, r0, #23
 80015fe:	4320      	orrs	r0, r4
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	2b99      	cmp	r3, #153	@ 0x99
 8001604:	dc16      	bgt.n	8001634 <__aeabi_ui2f+0x60>
 8001606:	1f42      	subs	r2, r0, #5
 8001608:	2805      	cmp	r0, #5
 800160a:	d000      	beq.n	800160e <__aeabi_ui2f+0x3a>
 800160c:	4094      	lsls	r4, r2
 800160e:	0022      	movs	r2, r4
 8001610:	4810      	ldr	r0, [pc, #64]	@ (8001654 <__aeabi_ui2f+0x80>)
 8001612:	4002      	ands	r2, r0
 8001614:	0765      	lsls	r5, r4, #29
 8001616:	d009      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001618:	250f      	movs	r5, #15
 800161a:	402c      	ands	r4, r5
 800161c:	2c04      	cmp	r4, #4
 800161e:	d005      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001620:	3204      	adds	r2, #4
 8001622:	0154      	lsls	r4, r2, #5
 8001624:	d502      	bpl.n	800162c <__aeabi_ui2f+0x58>
 8001626:	239f      	movs	r3, #159	@ 0x9f
 8001628:	4002      	ands	r2, r0
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	0192      	lsls	r2, r2, #6
 800162e:	0a54      	lsrs	r4, r2, #9
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	e7e3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001634:	0002      	movs	r2, r0
 8001636:	0020      	movs	r0, r4
 8001638:	321b      	adds	r2, #27
 800163a:	4090      	lsls	r0, r2
 800163c:	0002      	movs	r2, r0
 800163e:	1e50      	subs	r0, r2, #1
 8001640:	4182      	sbcs	r2, r0
 8001642:	2005      	movs	r0, #5
 8001644:	1a40      	subs	r0, r0, r1
 8001646:	40c4      	lsrs	r4, r0
 8001648:	4314      	orrs	r4, r2
 800164a:	e7e0      	b.n	800160e <__aeabi_ui2f+0x3a>
 800164c:	0264      	lsls	r4, r4, #9
 800164e:	2096      	movs	r0, #150	@ 0x96
 8001650:	0a64      	lsrs	r4, r4, #9
 8001652:	e7d3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001654:	fbffffff 	.word	0xfbffffff

08001658 <__aeabi_dadd>:
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	4657      	mov	r7, sl
 800165c:	464e      	mov	r6, r9
 800165e:	4645      	mov	r5, r8
 8001660:	46de      	mov	lr, fp
 8001662:	b5e0      	push	{r5, r6, r7, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	9000      	str	r0, [sp, #0]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	030c      	lsls	r4, r1, #12
 800166c:	004f      	lsls	r7, r1, #1
 800166e:	0fce      	lsrs	r6, r1, #31
 8001670:	0a61      	lsrs	r1, r4, #9
 8001672:	9c00      	ldr	r4, [sp, #0]
 8001674:	031d      	lsls	r5, r3, #12
 8001676:	0f64      	lsrs	r4, r4, #29
 8001678:	430c      	orrs	r4, r1
 800167a:	9900      	ldr	r1, [sp, #0]
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	00c8      	lsls	r0, r1, #3
 8001682:	0059      	lsls	r1, r3, #1
 8001684:	0d4b      	lsrs	r3, r1, #21
 8001686:	4699      	mov	r9, r3
 8001688:	9a00      	ldr	r2, [sp, #0]
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0a6d      	lsrs	r5, r5, #9
 800168e:	0fd9      	lsrs	r1, r3, #31
 8001690:	0f53      	lsrs	r3, r2, #29
 8001692:	432b      	orrs	r3, r5
 8001694:	469a      	mov	sl, r3
 8001696:	9b00      	ldr	r3, [sp, #0]
 8001698:	0d7f      	lsrs	r7, r7, #21
 800169a:	00da      	lsls	r2, r3, #3
 800169c:	4694      	mov	ip, r2
 800169e:	464a      	mov	r2, r9
 80016a0:	46b0      	mov	r8, r6
 80016a2:	1aba      	subs	r2, r7, r2
 80016a4:	428e      	cmp	r6, r1
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x52>
 80016a8:	e0b0      	b.n	800180c <__aeabi_dadd+0x1b4>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	dc00      	bgt.n	80016b0 <__aeabi_dadd+0x58>
 80016ae:	e078      	b.n	80017a2 <__aeabi_dadd+0x14a>
 80016b0:	4649      	mov	r1, r9
 80016b2:	2900      	cmp	r1, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x60>
 80016b6:	e0e9      	b.n	800188c <__aeabi_dadd+0x234>
 80016b8:	49c9      	ldr	r1, [pc, #804]	@ (80019e0 <__aeabi_dadd+0x388>)
 80016ba:	428f      	cmp	r7, r1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x68>
 80016be:	e195      	b.n	80019ec <__aeabi_dadd+0x394>
 80016c0:	2501      	movs	r5, #1
 80016c2:	2a38      	cmp	r2, #56	@ 0x38
 80016c4:	dc16      	bgt.n	80016f4 <__aeabi_dadd+0x9c>
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	4653      	mov	r3, sl
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	430b      	orrs	r3, r1
 80016ce:	469a      	mov	sl, r3
 80016d0:	2a1f      	cmp	r2, #31
 80016d2:	dd00      	ble.n	80016d6 <__aeabi_dadd+0x7e>
 80016d4:	e1e7      	b.n	8001aa6 <__aeabi_dadd+0x44e>
 80016d6:	2120      	movs	r1, #32
 80016d8:	4655      	mov	r5, sl
 80016da:	1a8b      	subs	r3, r1, r2
 80016dc:	4661      	mov	r1, ip
 80016de:	409d      	lsls	r5, r3
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	430d      	orrs	r5, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	4099      	lsls	r1, r3
 80016e8:	1e4b      	subs	r3, r1, #1
 80016ea:	4199      	sbcs	r1, r3
 80016ec:	4653      	mov	r3, sl
 80016ee:	40d3      	lsrs	r3, r2
 80016f0:	430d      	orrs	r5, r1
 80016f2:	1ae4      	subs	r4, r4, r3
 80016f4:	1b45      	subs	r5, r0, r5
 80016f6:	42a8      	cmp	r0, r5
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	4240      	negs	r0, r0
 80016fc:	1a24      	subs	r4, r4, r0
 80016fe:	0223      	lsls	r3, r4, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0xac>
 8001702:	e10f      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001704:	0264      	lsls	r4, r4, #9
 8001706:	0a64      	lsrs	r4, r4, #9
 8001708:	2c00      	cmp	r4, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0xb6>
 800170c:	e139      	b.n	8001982 <__aeabi_dadd+0x32a>
 800170e:	0020      	movs	r0, r4
 8001710:	f001 ff2a 	bl	8003568 <__clzsi2>
 8001714:	0003      	movs	r3, r0
 8001716:	3b08      	subs	r3, #8
 8001718:	2120      	movs	r1, #32
 800171a:	0028      	movs	r0, r5
 800171c:	1aca      	subs	r2, r1, r3
 800171e:	40d0      	lsrs	r0, r2
 8001720:	409c      	lsls	r4, r3
 8001722:	0002      	movs	r2, r0
 8001724:	409d      	lsls	r5, r3
 8001726:	4322      	orrs	r2, r4
 8001728:	429f      	cmp	r7, r3
 800172a:	dd00      	ble.n	800172e <__aeabi_dadd+0xd6>
 800172c:	e173      	b.n	8001a16 <__aeabi_dadd+0x3be>
 800172e:	1bd8      	subs	r0, r3, r7
 8001730:	3001      	adds	r0, #1
 8001732:	1a09      	subs	r1, r1, r0
 8001734:	002c      	movs	r4, r5
 8001736:	408d      	lsls	r5, r1
 8001738:	40c4      	lsrs	r4, r0
 800173a:	1e6b      	subs	r3, r5, #1
 800173c:	419d      	sbcs	r5, r3
 800173e:	0013      	movs	r3, r2
 8001740:	40c2      	lsrs	r2, r0
 8001742:	408b      	lsls	r3, r1
 8001744:	4325      	orrs	r5, r4
 8001746:	2700      	movs	r7, #0
 8001748:	0014      	movs	r4, r2
 800174a:	431d      	orrs	r5, r3
 800174c:	076b      	lsls	r3, r5, #29
 800174e:	d009      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001750:	230f      	movs	r3, #15
 8001752:	402b      	ands	r3, r5
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001758:	1d2b      	adds	r3, r5, #4
 800175a:	42ab      	cmp	r3, r5
 800175c:	41ad      	sbcs	r5, r5
 800175e:	426d      	negs	r5, r5
 8001760:	1964      	adds	r4, r4, r5
 8001762:	001d      	movs	r5, r3
 8001764:	0223      	lsls	r3, r4, #8
 8001766:	d400      	bmi.n	800176a <__aeabi_dadd+0x112>
 8001768:	e12d      	b.n	80019c6 <__aeabi_dadd+0x36e>
 800176a:	4a9d      	ldr	r2, [pc, #628]	@ (80019e0 <__aeabi_dadd+0x388>)
 800176c:	3701      	adds	r7, #1
 800176e:	4297      	cmp	r7, r2
 8001770:	d100      	bne.n	8001774 <__aeabi_dadd+0x11c>
 8001772:	e0d3      	b.n	800191c <__aeabi_dadd+0x2c4>
 8001774:	4646      	mov	r6, r8
 8001776:	499b      	ldr	r1, [pc, #620]	@ (80019e4 <__aeabi_dadd+0x38c>)
 8001778:	08ed      	lsrs	r5, r5, #3
 800177a:	4021      	ands	r1, r4
 800177c:	074a      	lsls	r2, r1, #29
 800177e:	432a      	orrs	r2, r5
 8001780:	057c      	lsls	r4, r7, #21
 8001782:	024d      	lsls	r5, r1, #9
 8001784:	0b2d      	lsrs	r5, r5, #12
 8001786:	0d64      	lsrs	r4, r4, #21
 8001788:	0524      	lsls	r4, r4, #20
 800178a:	432c      	orrs	r4, r5
 800178c:	07f6      	lsls	r6, r6, #31
 800178e:	4334      	orrs	r4, r6
 8001790:	0010      	movs	r0, r2
 8001792:	0021      	movs	r1, r4
 8001794:	b003      	add	sp, #12
 8001796:	bcf0      	pop	{r4, r5, r6, r7}
 8001798:	46bb      	mov	fp, r7
 800179a:	46b2      	mov	sl, r6
 800179c:	46a9      	mov	r9, r5
 800179e:	46a0      	mov	r8, r4
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x150>
 80017a6:	e084      	b.n	80018b2 <__aeabi_dadd+0x25a>
 80017a8:	464a      	mov	r2, r9
 80017aa:	1bd2      	subs	r2, r2, r7
 80017ac:	2f00      	cmp	r7, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x15a>
 80017b0:	e16d      	b.n	8001a8e <__aeabi_dadd+0x436>
 80017b2:	0025      	movs	r5, r4
 80017b4:	4305      	orrs	r5, r0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x162>
 80017b8:	e127      	b.n	8001a0a <__aeabi_dadd+0x3b2>
 80017ba:	1e56      	subs	r6, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x16a>
 80017c0:	e23b      	b.n	8001c3a <__aeabi_dadd+0x5e2>
 80017c2:	4d87      	ldr	r5, [pc, #540]	@ (80019e0 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x172>
 80017c8:	e26a      	b.n	8001ca0 <__aeabi_dadd+0x648>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2e38      	cmp	r6, #56	@ 0x38
 80017ce:	dc12      	bgt.n	80017f6 <__aeabi_dadd+0x19e>
 80017d0:	0032      	movs	r2, r6
 80017d2:	2a1f      	cmp	r2, #31
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dadd+0x180>
 80017d6:	e1f8      	b.n	8001bca <__aeabi_dadd+0x572>
 80017d8:	2620      	movs	r6, #32
 80017da:	0025      	movs	r5, r4
 80017dc:	1ab6      	subs	r6, r6, r2
 80017de:	0007      	movs	r7, r0
 80017e0:	4653      	mov	r3, sl
 80017e2:	40b0      	lsls	r0, r6
 80017e4:	40d4      	lsrs	r4, r2
 80017e6:	40b5      	lsls	r5, r6
 80017e8:	40d7      	lsrs	r7, r2
 80017ea:	1e46      	subs	r6, r0, #1
 80017ec:	41b0      	sbcs	r0, r6
 80017ee:	1b1b      	subs	r3, r3, r4
 80017f0:	469a      	mov	sl, r3
 80017f2:	433d      	orrs	r5, r7
 80017f4:	4305      	orrs	r5, r0
 80017f6:	4662      	mov	r2, ip
 80017f8:	1b55      	subs	r5, r2, r5
 80017fa:	45ac      	cmp	ip, r5
 80017fc:	4192      	sbcs	r2, r2
 80017fe:	4653      	mov	r3, sl
 8001800:	4252      	negs	r2, r2
 8001802:	000e      	movs	r6, r1
 8001804:	464f      	mov	r7, r9
 8001806:	4688      	mov	r8, r1
 8001808:	1a9c      	subs	r4, r3, r2
 800180a:	e778      	b.n	80016fe <__aeabi_dadd+0xa6>
 800180c:	2a00      	cmp	r2, #0
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dadd+0x1ba>
 8001810:	e08e      	b.n	8001930 <__aeabi_dadd+0x2d8>
 8001812:	4649      	mov	r1, r9
 8001814:	2900      	cmp	r1, #0
 8001816:	d175      	bne.n	8001904 <__aeabi_dadd+0x2ac>
 8001818:	4661      	mov	r1, ip
 800181a:	4653      	mov	r3, sl
 800181c:	4319      	orrs	r1, r3
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x1ca>
 8001820:	e0f6      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001822:	1e51      	subs	r1, r2, #1
 8001824:	2a01      	cmp	r2, #1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x1d2>
 8001828:	e191      	b.n	8001b4e <__aeabi_dadd+0x4f6>
 800182a:	4d6d      	ldr	r5, [pc, #436]	@ (80019e0 <__aeabi_dadd+0x388>)
 800182c:	42aa      	cmp	r2, r5
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x1da>
 8001830:	e0dc      	b.n	80019ec <__aeabi_dadd+0x394>
 8001832:	2501      	movs	r5, #1
 8001834:	2938      	cmp	r1, #56	@ 0x38
 8001836:	dc14      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001838:	000a      	movs	r2, r1
 800183a:	2a1f      	cmp	r2, #31
 800183c:	dd00      	ble.n	8001840 <__aeabi_dadd+0x1e8>
 800183e:	e1a2      	b.n	8001b86 <__aeabi_dadd+0x52e>
 8001840:	2120      	movs	r1, #32
 8001842:	4653      	mov	r3, sl
 8001844:	1a89      	subs	r1, r1, r2
 8001846:	408b      	lsls	r3, r1
 8001848:	001d      	movs	r5, r3
 800184a:	4663      	mov	r3, ip
 800184c:	40d3      	lsrs	r3, r2
 800184e:	431d      	orrs	r5, r3
 8001850:	4663      	mov	r3, ip
 8001852:	408b      	lsls	r3, r1
 8001854:	0019      	movs	r1, r3
 8001856:	1e4b      	subs	r3, r1, #1
 8001858:	4199      	sbcs	r1, r3
 800185a:	4653      	mov	r3, sl
 800185c:	40d3      	lsrs	r3, r2
 800185e:	430d      	orrs	r5, r1
 8001860:	18e4      	adds	r4, r4, r3
 8001862:	182d      	adds	r5, r5, r0
 8001864:	4285      	cmp	r5, r0
 8001866:	4180      	sbcs	r0, r0
 8001868:	4240      	negs	r0, r0
 800186a:	1824      	adds	r4, r4, r0
 800186c:	0223      	lsls	r3, r4, #8
 800186e:	d559      	bpl.n	8001924 <__aeabi_dadd+0x2cc>
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001872:	3701      	adds	r7, #1
 8001874:	429f      	cmp	r7, r3
 8001876:	d051      	beq.n	800191c <__aeabi_dadd+0x2c4>
 8001878:	2101      	movs	r1, #1
 800187a:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <__aeabi_dadd+0x38c>)
 800187c:	086a      	lsrs	r2, r5, #1
 800187e:	401c      	ands	r4, r3
 8001880:	4029      	ands	r1, r5
 8001882:	430a      	orrs	r2, r1
 8001884:	07e5      	lsls	r5, r4, #31
 8001886:	4315      	orrs	r5, r2
 8001888:	0864      	lsrs	r4, r4, #1
 800188a:	e75f      	b.n	800174c <__aeabi_dadd+0xf4>
 800188c:	4661      	mov	r1, ip
 800188e:	4653      	mov	r3, sl
 8001890:	4319      	orrs	r1, r3
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0x23e>
 8001894:	e0bc      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001896:	1e51      	subs	r1, r2, #1
 8001898:	2a01      	cmp	r2, #1
 800189a:	d100      	bne.n	800189e <__aeabi_dadd+0x246>
 800189c:	e164      	b.n	8001b68 <__aeabi_dadd+0x510>
 800189e:	4d50      	ldr	r5, [pc, #320]	@ (80019e0 <__aeabi_dadd+0x388>)
 80018a0:	42aa      	cmp	r2, r5
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x24e>
 80018a4:	e16a      	b.n	8001b7c <__aeabi_dadd+0x524>
 80018a6:	2501      	movs	r5, #1
 80018a8:	2938      	cmp	r1, #56	@ 0x38
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dadd+0x256>
 80018ac:	e722      	b.n	80016f4 <__aeabi_dadd+0x9c>
 80018ae:	000a      	movs	r2, r1
 80018b0:	e70e      	b.n	80016d0 <__aeabi_dadd+0x78>
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <__aeabi_dadd+0x390>)
 80018b4:	1c7d      	adds	r5, r7, #1
 80018b6:	4215      	tst	r5, r2
 80018b8:	d000      	beq.n	80018bc <__aeabi_dadd+0x264>
 80018ba:	e0d0      	b.n	8001a5e <__aeabi_dadd+0x406>
 80018bc:	0025      	movs	r5, r4
 80018be:	4662      	mov	r2, ip
 80018c0:	4653      	mov	r3, sl
 80018c2:	4305      	orrs	r5, r0
 80018c4:	431a      	orrs	r2, r3
 80018c6:	2f00      	cmp	r7, #0
 80018c8:	d000      	beq.n	80018cc <__aeabi_dadd+0x274>
 80018ca:	e137      	b.n	8001b3c <__aeabi_dadd+0x4e4>
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x27a>
 80018d0:	e1a8      	b.n	8001c24 <__aeabi_dadd+0x5cc>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x280>
 80018d6:	e16a      	b.n	8001bae <__aeabi_dadd+0x556>
 80018d8:	4663      	mov	r3, ip
 80018da:	1ac5      	subs	r5, r0, r3
 80018dc:	4653      	mov	r3, sl
 80018de:	1ae2      	subs	r2, r4, r3
 80018e0:	42a8      	cmp	r0, r5
 80018e2:	419b      	sbcs	r3, r3
 80018e4:	425b      	negs	r3, r3
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	021a      	lsls	r2, r3, #8
 80018ea:	d400      	bmi.n	80018ee <__aeabi_dadd+0x296>
 80018ec:	e203      	b.n	8001cf6 <__aeabi_dadd+0x69e>
 80018ee:	4663      	mov	r3, ip
 80018f0:	1a1d      	subs	r5, r3, r0
 80018f2:	45ac      	cmp	ip, r5
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	4653      	mov	r3, sl
 80018f8:	4252      	negs	r2, r2
 80018fa:	1b1c      	subs	r4, r3, r4
 80018fc:	000e      	movs	r6, r1
 80018fe:	4688      	mov	r8, r1
 8001900:	1aa4      	subs	r4, r4, r2
 8001902:	e723      	b.n	800174c <__aeabi_dadd+0xf4>
 8001904:	4936      	ldr	r1, [pc, #216]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001906:	428f      	cmp	r7, r1
 8001908:	d070      	beq.n	80019ec <__aeabi_dadd+0x394>
 800190a:	2501      	movs	r5, #1
 800190c:	2a38      	cmp	r2, #56	@ 0x38
 800190e:	dca8      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	4653      	mov	r3, sl
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	430b      	orrs	r3, r1
 8001918:	469a      	mov	sl, r3
 800191a:	e78e      	b.n	800183a <__aeabi_dadd+0x1e2>
 800191c:	003c      	movs	r4, r7
 800191e:	2500      	movs	r5, #0
 8001920:	2200      	movs	r2, #0
 8001922:	e731      	b.n	8001788 <__aeabi_dadd+0x130>
 8001924:	2307      	movs	r3, #7
 8001926:	402b      	ands	r3, r5
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <__aeabi_dadd+0x2d6>
 800192c:	e710      	b.n	8001750 <__aeabi_dadd+0xf8>
 800192e:	e093      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001930:	2a00      	cmp	r2, #0
 8001932:	d074      	beq.n	8001a1e <__aeabi_dadd+0x3c6>
 8001934:	464a      	mov	r2, r9
 8001936:	1bd2      	subs	r2, r2, r7
 8001938:	2f00      	cmp	r7, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dadd+0x2e6>
 800193c:	e0c7      	b.n	8001ace <__aeabi_dadd+0x476>
 800193e:	4928      	ldr	r1, [pc, #160]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001940:	4589      	cmp	r9, r1
 8001942:	d100      	bne.n	8001946 <__aeabi_dadd+0x2ee>
 8001944:	e185      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001946:	2501      	movs	r5, #1
 8001948:	2a38      	cmp	r2, #56	@ 0x38
 800194a:	dc12      	bgt.n	8001972 <__aeabi_dadd+0x31a>
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	430c      	orrs	r4, r1
 8001952:	2a1f      	cmp	r2, #31
 8001954:	dd00      	ble.n	8001958 <__aeabi_dadd+0x300>
 8001956:	e1ab      	b.n	8001cb0 <__aeabi_dadd+0x658>
 8001958:	2120      	movs	r1, #32
 800195a:	0025      	movs	r5, r4
 800195c:	1a89      	subs	r1, r1, r2
 800195e:	0007      	movs	r7, r0
 8001960:	4088      	lsls	r0, r1
 8001962:	408d      	lsls	r5, r1
 8001964:	40d7      	lsrs	r7, r2
 8001966:	1e41      	subs	r1, r0, #1
 8001968:	4188      	sbcs	r0, r1
 800196a:	40d4      	lsrs	r4, r2
 800196c:	433d      	orrs	r5, r7
 800196e:	4305      	orrs	r5, r0
 8001970:	44a2      	add	sl, r4
 8001972:	4465      	add	r5, ip
 8001974:	4565      	cmp	r5, ip
 8001976:	4192      	sbcs	r2, r2
 8001978:	4252      	negs	r2, r2
 800197a:	4452      	add	r2, sl
 800197c:	0014      	movs	r4, r2
 800197e:	464f      	mov	r7, r9
 8001980:	e774      	b.n	800186c <__aeabi_dadd+0x214>
 8001982:	0028      	movs	r0, r5
 8001984:	f001 fdf0 	bl	8003568 <__clzsi2>
 8001988:	0003      	movs	r3, r0
 800198a:	3318      	adds	r3, #24
 800198c:	2b1f      	cmp	r3, #31
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dadd+0x33a>
 8001990:	e6c2      	b.n	8001718 <__aeabi_dadd+0xc0>
 8001992:	002a      	movs	r2, r5
 8001994:	3808      	subs	r0, #8
 8001996:	4082      	lsls	r2, r0
 8001998:	429f      	cmp	r7, r3
 800199a:	dd00      	ble.n	800199e <__aeabi_dadd+0x346>
 800199c:	e0a9      	b.n	8001af2 <__aeabi_dadd+0x49a>
 800199e:	1bdb      	subs	r3, r3, r7
 80019a0:	1c58      	adds	r0, r3, #1
 80019a2:	281f      	cmp	r0, #31
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dadd+0x350>
 80019a6:	e1ac      	b.n	8001d02 <__aeabi_dadd+0x6aa>
 80019a8:	0015      	movs	r5, r2
 80019aa:	3b1f      	subs	r3, #31
 80019ac:	40dd      	lsrs	r5, r3
 80019ae:	2820      	cmp	r0, #32
 80019b0:	d005      	beq.n	80019be <__aeabi_dadd+0x366>
 80019b2:	2340      	movs	r3, #64	@ 0x40
 80019b4:	1a1b      	subs	r3, r3, r0
 80019b6:	409a      	lsls	r2, r3
 80019b8:	1e53      	subs	r3, r2, #1
 80019ba:	419a      	sbcs	r2, r3
 80019bc:	4315      	orrs	r5, r2
 80019be:	2307      	movs	r3, #7
 80019c0:	2700      	movs	r7, #0
 80019c2:	402b      	ands	r3, r5
 80019c4:	e7b0      	b.n	8001928 <__aeabi_dadd+0x2d0>
 80019c6:	08ed      	lsrs	r5, r5, #3
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <__aeabi_dadd+0x388>)
 80019ca:	0762      	lsls	r2, r4, #29
 80019cc:	432a      	orrs	r2, r5
 80019ce:	08e4      	lsrs	r4, r4, #3
 80019d0:	429f      	cmp	r7, r3
 80019d2:	d00f      	beq.n	80019f4 <__aeabi_dadd+0x39c>
 80019d4:	0324      	lsls	r4, r4, #12
 80019d6:	0b25      	lsrs	r5, r4, #12
 80019d8:	057c      	lsls	r4, r7, #21
 80019da:	0d64      	lsrs	r4, r4, #21
 80019dc:	e6d4      	b.n	8001788 <__aeabi_dadd+0x130>
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	ff7fffff 	.word	0xff7fffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	08c0      	lsrs	r0, r0, #3
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	4302      	orrs	r2, r0
 80019f2:	08e4      	lsrs	r4, r4, #3
 80019f4:	0013      	movs	r3, r2
 80019f6:	4323      	orrs	r3, r4
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x3a4>
 80019fa:	e186      	b.n	8001d0a <__aeabi_dadd+0x6b2>
 80019fc:	2580      	movs	r5, #128	@ 0x80
 80019fe:	032d      	lsls	r5, r5, #12
 8001a00:	4325      	orrs	r5, r4
 8001a02:	032d      	lsls	r5, r5, #12
 8001a04:	4cc3      	ldr	r4, [pc, #780]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a06:	0b2d      	lsrs	r5, r5, #12
 8001a08:	e6be      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a0a:	4660      	mov	r0, ip
 8001a0c:	4654      	mov	r4, sl
 8001a0e:	000e      	movs	r6, r1
 8001a10:	0017      	movs	r7, r2
 8001a12:	08c5      	lsrs	r5, r0, #3
 8001a14:	e7d8      	b.n	80019c8 <__aeabi_dadd+0x370>
 8001a16:	4cc0      	ldr	r4, [pc, #768]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	e696      	b.n	800174c <__aeabi_dadd+0xf4>
 8001a1e:	4abf      	ldr	r2, [pc, #764]	@ (8001d1c <__aeabi_dadd+0x6c4>)
 8001a20:	1c79      	adds	r1, r7, #1
 8001a22:	4211      	tst	r1, r2
 8001a24:	d16b      	bne.n	8001afe <__aeabi_dadd+0x4a6>
 8001a26:	0022      	movs	r2, r4
 8001a28:	4302      	orrs	r2, r0
 8001a2a:	2f00      	cmp	r7, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dadd+0x3d8>
 8001a2e:	e0db      	b.n	8001be8 <__aeabi_dadd+0x590>
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x3de>
 8001a34:	e12d      	b.n	8001c92 <__aeabi_dadd+0x63a>
 8001a36:	4662      	mov	r2, ip
 8001a38:	4653      	mov	r3, sl
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dadd+0x3e8>
 8001a3e:	e0b6      	b.n	8001bae <__aeabi_dadd+0x556>
 8001a40:	4663      	mov	r3, ip
 8001a42:	18c5      	adds	r5, r0, r3
 8001a44:	4285      	cmp	r5, r0
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4454      	add	r4, sl
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1824      	adds	r4, r4, r0
 8001a4e:	0223      	lsls	r3, r4, #8
 8001a50:	d502      	bpl.n	8001a58 <__aeabi_dadd+0x400>
 8001a52:	000f      	movs	r7, r1
 8001a54:	4bb0      	ldr	r3, [pc, #704]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a56:	401c      	ands	r4, r3
 8001a58:	003a      	movs	r2, r7
 8001a5a:	0028      	movs	r0, r5
 8001a5c:	e7d8      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001a5e:	4662      	mov	r2, ip
 8001a60:	1a85      	subs	r5, r0, r2
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4653      	mov	r3, sl
 8001a68:	4252      	negs	r2, r2
 8001a6a:	4691      	mov	r9, r2
 8001a6c:	1ae3      	subs	r3, r4, r3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	464b      	mov	r3, r9
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	4691      	mov	r9, r2
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	d454      	bmi.n	8001b26 <__aeabi_dadd+0x4ce>
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	464c      	mov	r4, r9
 8001a80:	432a      	orrs	r2, r5
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dadd+0x42e>
 8001a84:	e640      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001a86:	2600      	movs	r6, #0
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	e67c      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a8e:	4da1      	ldr	r5, [pc, #644]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a90:	45a9      	cmp	r9, r5
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x43e>
 8001a94:	e090      	b.n	8001bb8 <__aeabi_dadd+0x560>
 8001a96:	2501      	movs	r5, #1
 8001a98:	2a38      	cmp	r2, #56	@ 0x38
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dadd+0x446>
 8001a9c:	e6ab      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001a9e:	2580      	movs	r5, #128	@ 0x80
 8001aa0:	042d      	lsls	r5, r5, #16
 8001aa2:	432c      	orrs	r4, r5
 8001aa4:	e695      	b.n	80017d2 <__aeabi_dadd+0x17a>
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	4655      	mov	r5, sl
 8001aaa:	3920      	subs	r1, #32
 8001aac:	40cd      	lsrs	r5, r1
 8001aae:	46a9      	mov	r9, r5
 8001ab0:	2a20      	cmp	r2, #32
 8001ab2:	d006      	beq.n	8001ac2 <__aeabi_dadd+0x46a>
 8001ab4:	2140      	movs	r1, #64	@ 0x40
 8001ab6:	4653      	mov	r3, sl
 8001ab8:	1a8a      	subs	r2, r1, r2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	4662      	mov	r2, ip
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	4694      	mov	ip, r2
 8001ac2:	4665      	mov	r5, ip
 8001ac4:	1e6b      	subs	r3, r5, #1
 8001ac6:	419d      	sbcs	r5, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	431d      	orrs	r5, r3
 8001acc:	e612      	b.n	80016f4 <__aeabi_dadd+0x9c>
 8001ace:	0021      	movs	r1, r4
 8001ad0:	4301      	orrs	r1, r0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dadd+0x47e>
 8001ad4:	e0c4      	b.n	8001c60 <__aeabi_dadd+0x608>
 8001ad6:	1e51      	subs	r1, r2, #1
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d100      	bne.n	8001ade <__aeabi_dadd+0x486>
 8001adc:	e0fb      	b.n	8001cd6 <__aeabi_dadd+0x67e>
 8001ade:	4d8d      	ldr	r5, [pc, #564]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001ae0:	42aa      	cmp	r2, r5
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dadd+0x48e>
 8001ae4:	e0b5      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	2938      	cmp	r1, #56	@ 0x38
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dadd+0x496>
 8001aec:	e741      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001aee:	000a      	movs	r2, r1
 8001af0:	e72f      	b.n	8001952 <__aeabi_dadd+0x2fa>
 8001af2:	4c89      	ldr	r4, [pc, #548]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001af4:	1aff      	subs	r7, r7, r3
 8001af6:	4014      	ands	r4, r2
 8001af8:	0762      	lsls	r2, r4, #29
 8001afa:	08e4      	lsrs	r4, r4, #3
 8001afc:	e76a      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001afe:	4a85      	ldr	r2, [pc, #532]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001b00:	4291      	cmp	r1, r2
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dadd+0x4ae>
 8001b04:	e0e3      	b.n	8001cce <__aeabi_dadd+0x676>
 8001b06:	4663      	mov	r3, ip
 8001b08:	18c2      	adds	r2, r0, r3
 8001b0a:	4282      	cmp	r2, r0
 8001b0c:	4180      	sbcs	r0, r0
 8001b0e:	0023      	movs	r3, r4
 8001b10:	4240      	negs	r0, r0
 8001b12:	4453      	add	r3, sl
 8001b14:	181b      	adds	r3, r3, r0
 8001b16:	07dd      	lsls	r5, r3, #31
 8001b18:	085c      	lsrs	r4, r3, #1
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	0852      	lsrs	r2, r2, #1
 8001b1e:	4315      	orrs	r5, r2
 8001b20:	000f      	movs	r7, r1
 8001b22:	402b      	ands	r3, r5
 8001b24:	e700      	b.n	8001928 <__aeabi_dadd+0x2d0>
 8001b26:	4663      	mov	r3, ip
 8001b28:	1a1d      	subs	r5, r3, r0
 8001b2a:	45ac      	cmp	ip, r5
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	4653      	mov	r3, sl
 8001b30:	4252      	negs	r2, r2
 8001b32:	1b1c      	subs	r4, r3, r4
 8001b34:	000e      	movs	r6, r1
 8001b36:	4688      	mov	r8, r1
 8001b38:	1aa4      	subs	r4, r4, r2
 8001b3a:	e5e5      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_dadd+0x4ea>
 8001b40:	e091      	b.n	8001c66 <__aeabi_dadd+0x60e>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d138      	bne.n	8001bb8 <__aeabi_dadd+0x560>
 8001b46:	2480      	movs	r4, #128	@ 0x80
 8001b48:	2600      	movs	r6, #0
 8001b4a:	0324      	lsls	r4, r4, #12
 8001b4c:	e756      	b.n	80019fc <__aeabi_dadd+0x3a4>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	18c5      	adds	r5, r0, r3
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4454      	add	r4, sl
 8001b58:	4240      	negs	r0, r0
 8001b5a:	1824      	adds	r4, r4, r0
 8001b5c:	2701      	movs	r7, #1
 8001b5e:	0223      	lsls	r3, r4, #8
 8001b60:	d400      	bmi.n	8001b64 <__aeabi_dadd+0x50c>
 8001b62:	e6df      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001b64:	2702      	movs	r7, #2
 8001b66:	e687      	b.n	8001878 <__aeabi_dadd+0x220>
 8001b68:	4663      	mov	r3, ip
 8001b6a:	1ac5      	subs	r5, r0, r3
 8001b6c:	42a8      	cmp	r0, r5
 8001b6e:	4180      	sbcs	r0, r0
 8001b70:	4653      	mov	r3, sl
 8001b72:	4240      	negs	r0, r0
 8001b74:	1ae4      	subs	r4, r4, r3
 8001b76:	2701      	movs	r7, #1
 8001b78:	1a24      	subs	r4, r4, r0
 8001b7a:	e5c0      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	08c0      	lsrs	r0, r0, #3
 8001b80:	4302      	orrs	r2, r0
 8001b82:	08e4      	lsrs	r4, r4, #3
 8001b84:	e736      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001b86:	0011      	movs	r1, r2
 8001b88:	4653      	mov	r3, sl
 8001b8a:	3920      	subs	r1, #32
 8001b8c:	40cb      	lsrs	r3, r1
 8001b8e:	4699      	mov	r9, r3
 8001b90:	2a20      	cmp	r2, #32
 8001b92:	d006      	beq.n	8001ba2 <__aeabi_dadd+0x54a>
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4653      	mov	r3, sl
 8001b98:	1a8a      	subs	r2, r1, r2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	4694      	mov	ip, r2
 8001ba2:	4665      	mov	r5, ip
 8001ba4:	1e6b      	subs	r3, r5, #1
 8001ba6:	419d      	sbcs	r5, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	431d      	orrs	r5, r3
 8001bac:	e659      	b.n	8001862 <__aeabi_dadd+0x20a>
 8001bae:	0762      	lsls	r2, r4, #29
 8001bb0:	08c0      	lsrs	r0, r0, #3
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	08e4      	lsrs	r4, r4, #3
 8001bb6:	e70d      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001bb8:	4653      	mov	r3, sl
 8001bba:	075a      	lsls	r2, r3, #29
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	08d8      	lsrs	r0, r3, #3
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e714      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001bca:	0015      	movs	r5, r2
 8001bcc:	0026      	movs	r6, r4
 8001bce:	3d20      	subs	r5, #32
 8001bd0:	40ee      	lsrs	r6, r5
 8001bd2:	2a20      	cmp	r2, #32
 8001bd4:	d003      	beq.n	8001bde <__aeabi_dadd+0x586>
 8001bd6:	2540      	movs	r5, #64	@ 0x40
 8001bd8:	1aaa      	subs	r2, r5, r2
 8001bda:	4094      	lsls	r4, r2
 8001bdc:	4320      	orrs	r0, r4
 8001bde:	1e42      	subs	r2, r0, #1
 8001be0:	4190      	sbcs	r0, r2
 8001be2:	0005      	movs	r5, r0
 8001be4:	4335      	orrs	r5, r6
 8001be6:	e606      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d07c      	beq.n	8001ce6 <__aeabi_dadd+0x68e>
 8001bec:	4662      	mov	r2, ip
 8001bee:	4653      	mov	r3, sl
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dadd+0x5a0>
 8001bf6:	e6fa      	b.n	80019ee <__aeabi_dadd+0x396>
 8001bf8:	0762      	lsls	r2, r4, #29
 8001bfa:	4310      	orrs	r0, r2
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	08e4      	lsrs	r4, r4, #3
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	4214      	tst	r4, r2
 8001c04:	d008      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c06:	08d9      	lsrs	r1, r3, #3
 8001c08:	4211      	tst	r1, r2
 8001c0a:	d105      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	08d8      	lsrs	r0, r3, #3
 8001c10:	4653      	mov	r3, sl
 8001c12:	000c      	movs	r4, r1
 8001c14:	075b      	lsls	r3, r3, #29
 8001c16:	4318      	orrs	r0, r3
 8001c18:	0f42      	lsrs	r2, r0, #29
 8001c1a:	00c0      	lsls	r0, r0, #3
 8001c1c:	08c0      	lsrs	r0, r0, #3
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	4302      	orrs	r2, r0
 8001c22:	e6e7      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dadd+0x5d2>
 8001c28:	e72d      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	08d8      	lsrs	r0, r3, #3
 8001c2e:	4653      	mov	r3, sl
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	000e      	movs	r6, r1
 8001c34:	4302      	orrs	r2, r0
 8001c36:	08dc      	lsrs	r4, r3, #3
 8001c38:	e6cc      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	1a1d      	subs	r5, r3, r0
 8001c3e:	45ac      	cmp	ip, r5
 8001c40:	4192      	sbcs	r2, r2
 8001c42:	4653      	mov	r3, sl
 8001c44:	4252      	negs	r2, r2
 8001c46:	1b1c      	subs	r4, r3, r4
 8001c48:	000e      	movs	r6, r1
 8001c4a:	4688      	mov	r8, r1
 8001c4c:	1aa4      	subs	r4, r4, r2
 8001c4e:	3701      	adds	r7, #1
 8001c50:	e555      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001c52:	4663      	mov	r3, ip
 8001c54:	08d9      	lsrs	r1, r3, #3
 8001c56:	4653      	mov	r3, sl
 8001c58:	075a      	lsls	r2, r3, #29
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	08dc      	lsrs	r4, r3, #3
 8001c5e:	e6c9      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c60:	4660      	mov	r0, ip
 8001c62:	4654      	mov	r4, sl
 8001c64:	e6d4      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001c66:	08c0      	lsrs	r0, r0, #3
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dadd+0x616>
 8001c6c:	e6bf      	b.n	80019ee <__aeabi_dadd+0x396>
 8001c6e:	0762      	lsls	r2, r4, #29
 8001c70:	4310      	orrs	r0, r2
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	08e4      	lsrs	r4, r4, #3
 8001c76:	0312      	lsls	r2, r2, #12
 8001c78:	4214      	tst	r4, r2
 8001c7a:	d0cd      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c7c:	08dd      	lsrs	r5, r3, #3
 8001c7e:	4215      	tst	r5, r2
 8001c80:	d1ca      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c82:	4663      	mov	r3, ip
 8001c84:	08d8      	lsrs	r0, r3, #3
 8001c86:	4653      	mov	r3, sl
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	000e      	movs	r6, r1
 8001c8c:	002c      	movs	r4, r5
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	e7c2      	b.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c92:	4663      	mov	r3, ip
 8001c94:	08d9      	lsrs	r1, r3, #3
 8001c96:	4653      	mov	r3, sl
 8001c98:	075a      	lsls	r2, r3, #29
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	08dc      	lsrs	r4, r3, #3
 8001c9e:	e699      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	075a      	lsls	r2, r3, #29
 8001ca8:	000e      	movs	r6, r1
 8001caa:	4302      	orrs	r2, r0
 8001cac:	08dc      	lsrs	r4, r3, #3
 8001cae:	e6a1      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0027      	movs	r7, r4
 8001cb4:	3920      	subs	r1, #32
 8001cb6:	40cf      	lsrs	r7, r1
 8001cb8:	2a20      	cmp	r2, #32
 8001cba:	d003      	beq.n	8001cc4 <__aeabi_dadd+0x66c>
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	1a8a      	subs	r2, r1, r2
 8001cc0:	4094      	lsls	r4, r2
 8001cc2:	4320      	orrs	r0, r4
 8001cc4:	1e42      	subs	r2, r0, #1
 8001cc6:	4190      	sbcs	r0, r2
 8001cc8:	0005      	movs	r5, r0
 8001cca:	433d      	orrs	r5, r7
 8001ccc:	e651      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001cce:	000c      	movs	r4, r1
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	e558      	b.n	8001788 <__aeabi_dadd+0x130>
 8001cd6:	4460      	add	r0, ip
 8001cd8:	4560      	cmp	r0, ip
 8001cda:	4192      	sbcs	r2, r2
 8001cdc:	4454      	add	r4, sl
 8001cde:	4252      	negs	r2, r2
 8001ce0:	0005      	movs	r5, r0
 8001ce2:	18a4      	adds	r4, r4, r2
 8001ce4:	e73a      	b.n	8001b5c <__aeabi_dadd+0x504>
 8001ce6:	4653      	mov	r3, sl
 8001ce8:	075a      	lsls	r2, r3, #29
 8001cea:	4663      	mov	r3, ip
 8001cec:	08d9      	lsrs	r1, r3, #3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	08dc      	lsrs	r4, r3, #3
 8001cf4:	e67e      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	432a      	orrs	r2, r5
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dadd+0x6a8>
 8001cfe:	e6ab      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001d00:	e6c1      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001d02:	2120      	movs	r1, #32
 8001d04:	2500      	movs	r5, #0
 8001d06:	1a09      	subs	r1, r1, r0
 8001d08:	e519      	b.n	800173e <__aeabi_dadd+0xe6>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4c01      	ldr	r4, [pc, #4]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001d10:	e53a      	b.n	8001788 <__aeabi_dadd+0x130>
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	000007ff 	.word	0x000007ff
 8001d18:	ff7fffff 	.word	0xff7fffff
 8001d1c:	000007fe 	.word	0x000007fe

08001d20 <__aeabi_ddiv>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	46de      	mov	lr, fp
 8001d24:	4645      	mov	r5, r8
 8001d26:	4657      	mov	r7, sl
 8001d28:	464e      	mov	r6, r9
 8001d2a:	b5e0      	push	{r5, r6, r7, lr}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	030b      	lsls	r3, r1, #12
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	469b      	mov	fp, r3
 8001d38:	0fca      	lsrs	r2, r1, #31
 8001d3a:	004b      	lsls	r3, r1, #1
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	4680      	mov	r8, r0
 8001d40:	0d5b      	lsrs	r3, r3, #21
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	d100      	bne.n	8001d48 <__aeabi_ddiv+0x28>
 8001d46:	e16a      	b.n	800201e <__aeabi_ddiv+0x2fe>
 8001d48:	4ad4      	ldr	r2, [pc, #848]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x30>
 8001d4e:	e18c      	b.n	800206a <__aeabi_ddiv+0x34a>
 8001d50:	4659      	mov	r1, fp
 8001d52:	0f42      	lsrs	r2, r0, #29
 8001d54:	00c9      	lsls	r1, r1, #3
 8001d56:	430a      	orrs	r2, r1
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	0409      	lsls	r1, r1, #16
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	00c2      	lsls	r2, r0, #3
 8001d60:	4690      	mov	r8, r2
 8001d62:	4acf      	ldr	r2, [pc, #828]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001d64:	4689      	mov	r9, r1
 8001d66:	4692      	mov	sl, r2
 8001d68:	449a      	add	sl, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9e00      	ldr	r6, [sp, #0]
 8001d72:	9f01      	ldr	r7, [sp, #4]
 8001d74:	033b      	lsls	r3, r7, #12
 8001d76:	0b1b      	lsrs	r3, r3, #12
 8001d78:	469b      	mov	fp, r3
 8001d7a:	007b      	lsls	r3, r7, #1
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0d5b      	lsrs	r3, r3, #21
 8001d80:	0ffd      	lsrs	r5, r7, #31
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x68>
 8001d86:	e128      	b.n	8001fda <__aeabi_ddiv+0x2ba>
 8001d88:	4ac4      	ldr	r2, [pc, #784]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x70>
 8001d8e:	e177      	b.n	8002080 <__aeabi_ddiv+0x360>
 8001d90:	4659      	mov	r1, fp
 8001d92:	0f72      	lsrs	r2, r6, #29
 8001d94:	00c9      	lsls	r1, r1, #3
 8001d96:	430a      	orrs	r2, r1
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	0409      	lsls	r1, r1, #16
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	468b      	mov	fp, r1
 8001da0:	49bf      	ldr	r1, [pc, #764]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001da2:	00f2      	lsls	r2, r6, #3
 8001da4:	468c      	mov	ip, r1
 8001da6:	4651      	mov	r1, sl
 8001da8:	4463      	add	r3, ip
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	469a      	mov	sl, r3
 8001dae:	2300      	movs	r3, #0
 8001db0:	9e02      	ldr	r6, [sp, #8]
 8001db2:	406e      	eors	r6, r5
 8001db4:	2c0f      	cmp	r4, #15
 8001db6:	d827      	bhi.n	8001e08 <__aeabi_ddiv+0xe8>
 8001db8:	49ba      	ldr	r1, [pc, #744]	@ (80020a4 <__aeabi_ddiv+0x384>)
 8001dba:	00a4      	lsls	r4, r4, #2
 8001dbc:	5909      	ldr	r1, [r1, r4]
 8001dbe:	468f      	mov	pc, r1
 8001dc0:	46cb      	mov	fp, r9
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d016      	beq.n	8001dfa <__aeabi_ddiv+0xda>
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0xb2>
 8001dd0:	e2a6      	b.n	8002320 <__aeabi_ddiv+0x600>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0xb8>
 8001dd6:	e0df      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	4690      	mov	r8, r2
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	4323      	orrs	r3, r4
 8001de4:	07f6      	lsls	r6, r6, #31
 8001de6:	4333      	orrs	r3, r6
 8001de8:	4640      	mov	r0, r8
 8001dea:	0019      	movs	r1, r3
 8001dec:	b007      	add	sp, #28
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4690      	mov	r8, r2
 8001e00:	4ba6      	ldr	r3, [pc, #664]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001e02:	e7ed      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001e04:	002e      	movs	r6, r5
 8001e06:	e7df      	b.n	8001dc8 <__aeabi_ddiv+0xa8>
 8001e08:	45cb      	cmp	fp, r9
 8001e0a:	d200      	bcs.n	8001e0e <__aeabi_ddiv+0xee>
 8001e0c:	e1d4      	b.n	80021b8 <__aeabi_ddiv+0x498>
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0xf2>
 8001e10:	e1cf      	b.n	80021b2 <__aeabi_ddiv+0x492>
 8001e12:	2301      	movs	r3, #1
 8001e14:	425b      	negs	r3, r3
 8001e16:	469c      	mov	ip, r3
 8001e18:	4644      	mov	r4, r8
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	2700      	movs	r7, #0
 8001e1e:	44e2      	add	sl, ip
 8001e20:	465b      	mov	r3, fp
 8001e22:	0e15      	lsrs	r5, r2, #24
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	431d      	orrs	r5, r3
 8001e28:	0c19      	lsrs	r1, r3, #16
 8001e2a:	042b      	lsls	r3, r5, #16
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	9500      	str	r5, [sp, #0]
 8001e30:	0c1d      	lsrs	r5, r3, #16
 8001e32:	4691      	mov	r9, r2
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9503      	str	r5, [sp, #12]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	436a      	muls	r2, r5
 8001e40:	040b      	lsls	r3, r1, #16
 8001e42:	0c21      	lsrs	r1, r4, #16
 8001e44:	4680      	mov	r8, r0
 8001e46:	4319      	orrs	r1, r3
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d909      	bls.n	8001e60 <__aeabi_ddiv+0x140>
 8001e4c:	9d00      	ldr	r5, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	46ac      	mov	ip, r5
 8001e52:	425b      	negs	r3, r3
 8001e54:	4461      	add	r1, ip
 8001e56:	469c      	mov	ip, r3
 8001e58:	44e0      	add	r8, ip
 8001e5a:	428d      	cmp	r5, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x140>
 8001e5e:	e1fb      	b.n	8002258 <__aeabi_ddiv+0x538>
 8001e60:	1a88      	subs	r0, r1, r2
 8001e62:	9902      	ldr	r1, [sp, #8]
 8001e64:	f7fe f9f2 	bl	800024c <__aeabi_uidivmod>
 8001e68:	9a03      	ldr	r2, [sp, #12]
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	4342      	muls	r2, r0
 8001e6e:	0409      	lsls	r1, r1, #16
 8001e70:	0c24      	lsrs	r4, r4, #16
 8001e72:	0003      	movs	r3, r0
 8001e74:	430c      	orrs	r4, r1
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d906      	bls.n	8001e88 <__aeabi_ddiv+0x168>
 8001e7a:	9900      	ldr	r1, [sp, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4464      	add	r4, ip
 8001e82:	42a1      	cmp	r1, r4
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x168>
 8001e86:	e1e1      	b.n	800224c <__aeabi_ddiv+0x52c>
 8001e88:	1aa0      	subs	r0, r4, r2
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	0412      	lsls	r2, r2, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	4693      	mov	fp, r2
 8001e92:	464b      	mov	r3, r9
 8001e94:	4659      	mov	r1, fp
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	001d      	movs	r5, r3
 8001e9a:	9304      	str	r3, [sp, #16]
 8001e9c:	040b      	lsls	r3, r1, #16
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	0409      	lsls	r1, r1, #16
 8001ea2:	0c09      	lsrs	r1, r1, #16
 8001ea4:	000c      	movs	r4, r1
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	435c      	muls	r4, r3
 8001eaa:	0c12      	lsrs	r2, r2, #16
 8001eac:	436b      	muls	r3, r5
 8001eae:	4688      	mov	r8, r1
 8001eb0:	4351      	muls	r1, r2
 8001eb2:	436a      	muls	r2, r5
 8001eb4:	0c25      	lsrs	r5, r4, #16
 8001eb6:	46ac      	mov	ip, r5
 8001eb8:	185b      	adds	r3, r3, r1
 8001eba:	4463      	add	r3, ip
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d903      	bls.n	8001ec8 <__aeabi_ddiv+0x1a8>
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4462      	add	r2, ip
 8001ec8:	0c19      	lsrs	r1, r3, #16
 8001eca:	0424      	lsls	r4, r4, #16
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c24      	lsrs	r4, r4, #16
 8001ed0:	188a      	adds	r2, r1, r2
 8001ed2:	191c      	adds	r4, r3, r4
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	d302      	bcc.n	8001ede <__aeabi_ddiv+0x1be>
 8001ed8:	d116      	bne.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001eda:	42a7      	cmp	r7, r4
 8001edc:	d214      	bcs.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001ede:	465b      	mov	r3, fp
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	444f      	add	r7, r9
 8001ee6:	9305      	str	r3, [sp, #20]
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	419b      	sbcs	r3, r3
 8001eec:	46ac      	mov	ip, r5
 8001eee:	425b      	negs	r3, r3
 8001ef0:	4463      	add	r3, ip
 8001ef2:	18c0      	adds	r0, r0, r3
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d300      	bcc.n	8001efa <__aeabi_ddiv+0x1da>
 8001ef8:	e1a1      	b.n	800223e <__aeabi_ddiv+0x51e>
 8001efa:	4282      	cmp	r2, r0
 8001efc:	d900      	bls.n	8001f00 <__aeabi_ddiv+0x1e0>
 8001efe:	e1f6      	b.n	80022ee <__aeabi_ddiv+0x5ce>
 8001f00:	d100      	bne.n	8001f04 <__aeabi_ddiv+0x1e4>
 8001f02:	e1f1      	b.n	80022e8 <__aeabi_ddiv+0x5c8>
 8001f04:	9b05      	ldr	r3, [sp, #20]
 8001f06:	469b      	mov	fp, r3
 8001f08:	1b3c      	subs	r4, r7, r4
 8001f0a:	42a7      	cmp	r7, r4
 8001f0c:	41bf      	sbcs	r7, r7
 8001f0e:	9d00      	ldr	r5, [sp, #0]
 8001f10:	1a80      	subs	r0, r0, r2
 8001f12:	427f      	negs	r7, r7
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	4285      	cmp	r5, r0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_ddiv+0x1fc>
 8001f1a:	e1d0      	b.n	80022be <__aeabi_ddiv+0x59e>
 8001f1c:	9902      	ldr	r1, [sp, #8]
 8001f1e:	f7fe f995 	bl	800024c <__aeabi_uidivmod>
 8001f22:	9a03      	ldr	r2, [sp, #12]
 8001f24:	040b      	lsls	r3, r1, #16
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c21      	lsrs	r1, r4, #16
 8001f2a:	0007      	movs	r7, r0
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d900      	bls.n	8001f34 <__aeabi_ddiv+0x214>
 8001f32:	e178      	b.n	8002226 <__aeabi_ddiv+0x506>
 8001f34:	1a88      	subs	r0, r1, r2
 8001f36:	9902      	ldr	r1, [sp, #8]
 8001f38:	f7fe f988 	bl	800024c <__aeabi_uidivmod>
 8001f3c:	9a03      	ldr	r2, [sp, #12]
 8001f3e:	0424      	lsls	r4, r4, #16
 8001f40:	4342      	muls	r2, r0
 8001f42:	0409      	lsls	r1, r1, #16
 8001f44:	0c24      	lsrs	r4, r4, #16
 8001f46:	0003      	movs	r3, r0
 8001f48:	430c      	orrs	r4, r1
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x230>
 8001f4e:	e15d      	b.n	800220c <__aeabi_ddiv+0x4ec>
 8001f50:	4641      	mov	r1, r8
 8001f52:	1aa4      	subs	r4, r4, r2
 8001f54:	043a      	lsls	r2, r7, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	9d04      	ldr	r5, [sp, #16]
 8001f5a:	0413      	lsls	r3, r2, #16
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	4359      	muls	r1, r3
 8001f60:	4647      	mov	r7, r8
 8001f62:	436b      	muls	r3, r5
 8001f64:	469c      	mov	ip, r3
 8001f66:	0c10      	lsrs	r0, r2, #16
 8001f68:	4347      	muls	r7, r0
 8001f6a:	0c0b      	lsrs	r3, r1, #16
 8001f6c:	44bc      	add	ip, r7
 8001f6e:	4463      	add	r3, ip
 8001f70:	4368      	muls	r0, r5
 8001f72:	429f      	cmp	r7, r3
 8001f74:	d903      	bls.n	8001f7e <__aeabi_ddiv+0x25e>
 8001f76:	2580      	movs	r5, #128	@ 0x80
 8001f78:	026d      	lsls	r5, r5, #9
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	4460      	add	r0, ip
 8001f7e:	0c1f      	lsrs	r7, r3, #16
 8001f80:	0409      	lsls	r1, r1, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c09      	lsrs	r1, r1, #16
 8001f86:	183f      	adds	r7, r7, r0
 8001f88:	185b      	adds	r3, r3, r1
 8001f8a:	42bc      	cmp	r4, r7
 8001f8c:	d200      	bcs.n	8001f90 <__aeabi_ddiv+0x270>
 8001f8e:	e102      	b.n	8002196 <__aeabi_ddiv+0x476>
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x274>
 8001f92:	e0fd      	b.n	8002190 <__aeabi_ddiv+0x470>
 8001f94:	2301      	movs	r3, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <__aeabi_ddiv+0x388>)
 8001f9a:	4453      	add	r3, sl
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_ddiv+0x282>
 8001fa0:	e0ae      	b.n	8002100 <__aeabi_ddiv+0x3e0>
 8001fa2:	0751      	lsls	r1, r2, #29
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x288>
 8001fa6:	e198      	b.n	80022da <__aeabi_ddiv+0x5ba>
 8001fa8:	4659      	mov	r1, fp
 8001faa:	01c9      	lsls	r1, r1, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_ddiv+0x29c>
 8001fae:	4659      	mov	r1, fp
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <__aeabi_ddiv+0x38c>)
 8001fb2:	4019      	ands	r1, r3
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	468b      	mov	fp, r1
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4453      	add	r3, sl
 8001fbc:	493c      	ldr	r1, [pc, #240]	@ (80020b0 <__aeabi_ddiv+0x390>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_ddiv+0x2a4>
 8001fc2:	e71a      	b.n	8001dfa <__aeabi_ddiv+0xda>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	465a      	mov	r2, fp
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	0254      	lsls	r4, r2, #9
 8001fd2:	4688      	mov	r8, r1
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	e702      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001fda:	465a      	mov	r2, fp
 8001fdc:	9b00      	ldr	r3, [sp, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_ddiv+0x2c4>
 8001fe2:	e07e      	b.n	80020e2 <__aeabi_ddiv+0x3c2>
 8001fe4:	465b      	mov	r3, fp
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x2cc>
 8001fea:	e100      	b.n	80021ee <__aeabi_ddiv+0x4ce>
 8001fec:	4658      	mov	r0, fp
 8001fee:	f001 fabb 	bl	8003568 <__clzsi2>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	3a0b      	subs	r2, #11
 8001ff8:	271d      	movs	r7, #29
 8001ffa:	9e00      	ldr	r6, [sp, #0]
 8001ffc:	1aba      	subs	r2, r7, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	4658      	mov	r0, fp
 8002002:	40d6      	lsrs	r6, r2
 8002004:	3908      	subs	r1, #8
 8002006:	4088      	lsls	r0, r1
 8002008:	0032      	movs	r2, r6
 800200a:	4302      	orrs	r2, r0
 800200c:	4693      	mov	fp, r2
 800200e:	9a00      	ldr	r2, [sp, #0]
 8002010:	408a      	lsls	r2, r1
 8002012:	4928      	ldr	r1, [pc, #160]	@ (80020b4 <__aeabi_ddiv+0x394>)
 8002014:	4453      	add	r3, sl
 8002016:	468a      	mov	sl, r1
 8002018:	449a      	add	sl, r3
 800201a:	2300      	movs	r3, #0
 800201c:	e6c8      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800201e:	465b      	mov	r3, fp
 8002020:	4303      	orrs	r3, r0
 8002022:	4699      	mov	r9, r3
 8002024:	d056      	beq.n	80020d4 <__aeabi_ddiv+0x3b4>
 8002026:	465b      	mov	r3, fp
 8002028:	2b00      	cmp	r3, #0
 800202a:	d100      	bne.n	800202e <__aeabi_ddiv+0x30e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_ddiv+0x4aa>
 800202e:	4658      	mov	r0, fp
 8002030:	f001 fa9a 	bl	8003568 <__clzsi2>
 8002034:	230b      	movs	r3, #11
 8002036:	425b      	negs	r3, r3
 8002038:	469c      	mov	ip, r3
 800203a:	0002      	movs	r2, r0
 800203c:	4484      	add	ip, r0
 800203e:	4666      	mov	r6, ip
 8002040:	231d      	movs	r3, #29
 8002042:	1b9b      	subs	r3, r3, r6
 8002044:	0026      	movs	r6, r4
 8002046:	0011      	movs	r1, r2
 8002048:	4658      	mov	r0, fp
 800204a:	40de      	lsrs	r6, r3
 800204c:	3908      	subs	r1, #8
 800204e:	4088      	lsls	r0, r1
 8002050:	0033      	movs	r3, r6
 8002052:	4303      	orrs	r3, r0
 8002054:	4699      	mov	r9, r3
 8002056:	0023      	movs	r3, r4
 8002058:	408b      	lsls	r3, r1
 800205a:	4698      	mov	r8, r3
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <__aeabi_ddiv+0x398>)
 800205e:	2400      	movs	r4, #0
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	469a      	mov	sl, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	e682      	b.n	8001d70 <__aeabi_ddiv+0x50>
 800206a:	465a      	mov	r2, fp
 800206c:	4302      	orrs	r2, r0
 800206e:	4691      	mov	r9, r2
 8002070:	d12a      	bne.n	80020c8 <__aeabi_ddiv+0x3a8>
 8002072:	2200      	movs	r2, #0
 8002074:	469a      	mov	sl, r3
 8002076:	2302      	movs	r3, #2
 8002078:	4690      	mov	r8, r2
 800207a:	2408      	movs	r4, #8
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	e677      	b.n	8001d70 <__aeabi_ddiv+0x50>
 8002080:	465a      	mov	r2, fp
 8002082:	9b00      	ldr	r3, [sp, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <__aeabi_ddiv+0x39c>)
 8002088:	469c      	mov	ip, r3
 800208a:	44e2      	add	sl, ip
 800208c:	2a00      	cmp	r2, #0
 800208e:	d117      	bne.n	80020c0 <__aeabi_ddiv+0x3a0>
 8002090:	2302      	movs	r3, #2
 8002092:	431c      	orrs	r4, r3
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3302      	adds	r3, #2
 800209a:	e689      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	fffffc01 	.word	0xfffffc01
 80020a4:	0800c480 	.word	0x0800c480
 80020a8:	000003ff 	.word	0x000003ff
 80020ac:	feffffff 	.word	0xfeffffff
 80020b0:	000007fe 	.word	0x000007fe
 80020b4:	000003f3 	.word	0x000003f3
 80020b8:	fffffc0d 	.word	0xfffffc0d
 80020bc:	fffff801 	.word	0xfffff801
 80020c0:	2303      	movs	r3, #3
 80020c2:	0032      	movs	r2, r6
 80020c4:	431c      	orrs	r4, r3
 80020c6:	e673      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020c8:	469a      	mov	sl, r3
 80020ca:	2303      	movs	r3, #3
 80020cc:	46d9      	mov	r9, fp
 80020ce:	240c      	movs	r4, #12
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	e64d      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020d4:	2300      	movs	r3, #0
 80020d6:	4698      	mov	r8, r3
 80020d8:	469a      	mov	sl, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	2404      	movs	r4, #4
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	e646      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020e2:	2301      	movs	r3, #1
 80020e4:	431c      	orrs	r4, r3
 80020e6:	2300      	movs	r3, #0
 80020e8:	469b      	mov	fp, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	e660      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	4698      	mov	r8, r3
 80020f4:	2600      	movs	r6, #0
 80020f6:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <__aeabi_ddiv+0x620>)
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	e671      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4252      	negs	r2, r2
 8002100:	2101      	movs	r1, #1
 8002102:	1ac9      	subs	r1, r1, r3
 8002104:	2938      	cmp	r1, #56	@ 0x38
 8002106:	dd00      	ble.n	800210a <__aeabi_ddiv+0x3ea>
 8002108:	e666      	b.n	8001dd8 <__aeabi_ddiv+0xb8>
 800210a:	291f      	cmp	r1, #31
 800210c:	dc00      	bgt.n	8002110 <__aeabi_ddiv+0x3f0>
 800210e:	e0ab      	b.n	8002268 <__aeabi_ddiv+0x548>
 8002110:	201f      	movs	r0, #31
 8002112:	4240      	negs	r0, r0
 8002114:	1ac3      	subs	r3, r0, r3
 8002116:	4658      	mov	r0, fp
 8002118:	40d8      	lsrs	r0, r3
 800211a:	0003      	movs	r3, r0
 800211c:	2920      	cmp	r1, #32
 800211e:	d004      	beq.n	800212a <__aeabi_ddiv+0x40a>
 8002120:	4658      	mov	r0, fp
 8002122:	4988      	ldr	r1, [pc, #544]	@ (8002344 <__aeabi_ddiv+0x624>)
 8002124:	4451      	add	r1, sl
 8002126:	4088      	lsls	r0, r1
 8002128:	4302      	orrs	r2, r0
 800212a:	1e51      	subs	r1, r2, #1
 800212c:	418a      	sbcs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	2307      	movs	r3, #7
 8002132:	0019      	movs	r1, r3
 8002134:	2400      	movs	r4, #0
 8002136:	4011      	ands	r1, r2
 8002138:	4213      	tst	r3, r2
 800213a:	d00c      	beq.n	8002156 <__aeabi_ddiv+0x436>
 800213c:	230f      	movs	r3, #15
 800213e:	4013      	ands	r3, r2
 8002140:	2b04      	cmp	r3, #4
 8002142:	d100      	bne.n	8002146 <__aeabi_ddiv+0x426>
 8002144:	e0f9      	b.n	800233a <__aeabi_ddiv+0x61a>
 8002146:	1d11      	adds	r1, r2, #4
 8002148:	4291      	cmp	r1, r2
 800214a:	419b      	sbcs	r3, r3
 800214c:	000a      	movs	r2, r1
 800214e:	425b      	negs	r3, r3
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	0b1c      	lsrs	r4, r3, #12
 8002156:	08d2      	lsrs	r2, r2, #3
 8002158:	430a      	orrs	r2, r1
 800215a:	4690      	mov	r8, r2
 800215c:	2300      	movs	r3, #0
 800215e:	e63f      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002160:	2480      	movs	r4, #128	@ 0x80
 8002162:	464b      	mov	r3, r9
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	4223      	tst	r3, r4
 8002168:	d009      	beq.n	800217e <__aeabi_ddiv+0x45e>
 800216a:	465b      	mov	r3, fp
 800216c:	4223      	tst	r3, r4
 800216e:	d106      	bne.n	800217e <__aeabi_ddiv+0x45e>
 8002170:	431c      	orrs	r4, r3
 8002172:	0324      	lsls	r4, r4, #12
 8002174:	002e      	movs	r6, r5
 8002176:	4690      	mov	r8, r2
 8002178:	4b71      	ldr	r3, [pc, #452]	@ (8002340 <__aeabi_ddiv+0x620>)
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	e630      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 800217e:	2480      	movs	r4, #128	@ 0x80
 8002180:	464b      	mov	r3, r9
 8002182:	0324      	lsls	r4, r4, #12
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	9e02      	ldr	r6, [sp, #8]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <__aeabi_ddiv+0x620>)
 800218c:	0b24      	lsrs	r4, r4, #12
 800218e:	e627      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <__aeabi_ddiv+0x476>
 8002194:	e700      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8002196:	9800      	ldr	r0, [sp, #0]
 8002198:	1e51      	subs	r1, r2, #1
 800219a:	4684      	mov	ip, r0
 800219c:	4464      	add	r4, ip
 800219e:	4284      	cmp	r4, r0
 80021a0:	d200      	bcs.n	80021a4 <__aeabi_ddiv+0x484>
 80021a2:	e084      	b.n	80022ae <__aeabi_ddiv+0x58e>
 80021a4:	42bc      	cmp	r4, r7
 80021a6:	d200      	bcs.n	80021aa <__aeabi_ddiv+0x48a>
 80021a8:	e0ae      	b.n	8002308 <__aeabi_ddiv+0x5e8>
 80021aa:	d100      	bne.n	80021ae <__aeabi_ddiv+0x48e>
 80021ac:	e0c1      	b.n	8002332 <__aeabi_ddiv+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	e6f0      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80021b2:	4542      	cmp	r2, r8
 80021b4:	d900      	bls.n	80021b8 <__aeabi_ddiv+0x498>
 80021b6:	e62c      	b.n	8001e12 <__aeabi_ddiv+0xf2>
 80021b8:	464b      	mov	r3, r9
 80021ba:	07dc      	lsls	r4, r3, #31
 80021bc:	0858      	lsrs	r0, r3, #1
 80021be:	4643      	mov	r3, r8
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	431c      	orrs	r4, r3
 80021c4:	4643      	mov	r3, r8
 80021c6:	07df      	lsls	r7, r3, #31
 80021c8:	e62a      	b.n	8001e20 <__aeabi_ddiv+0x100>
 80021ca:	f001 f9cd 	bl	8003568 <__clzsi2>
 80021ce:	2315      	movs	r3, #21
 80021d0:	469c      	mov	ip, r3
 80021d2:	4484      	add	ip, r0
 80021d4:	0002      	movs	r2, r0
 80021d6:	4663      	mov	r3, ip
 80021d8:	3220      	adds	r2, #32
 80021da:	2b1c      	cmp	r3, #28
 80021dc:	dc00      	bgt.n	80021e0 <__aeabi_ddiv+0x4c0>
 80021de:	e72e      	b.n	800203e <__aeabi_ddiv+0x31e>
 80021e0:	0023      	movs	r3, r4
 80021e2:	3808      	subs	r0, #8
 80021e4:	4083      	lsls	r3, r0
 80021e6:	4699      	mov	r9, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	4698      	mov	r8, r3
 80021ec:	e736      	b.n	800205c <__aeabi_ddiv+0x33c>
 80021ee:	f001 f9bb 	bl	8003568 <__clzsi2>
 80021f2:	0002      	movs	r2, r0
 80021f4:	0003      	movs	r3, r0
 80021f6:	3215      	adds	r2, #21
 80021f8:	3320      	adds	r3, #32
 80021fa:	2a1c      	cmp	r2, #28
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_ddiv+0x4e0>
 80021fe:	e6fb      	b.n	8001ff8 <__aeabi_ddiv+0x2d8>
 8002200:	9900      	ldr	r1, [sp, #0]
 8002202:	3808      	subs	r0, #8
 8002204:	4081      	lsls	r1, r0
 8002206:	2200      	movs	r2, #0
 8002208:	468b      	mov	fp, r1
 800220a:	e702      	b.n	8002012 <__aeabi_ddiv+0x2f2>
 800220c:	9900      	ldr	r1, [sp, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	468c      	mov	ip, r1
 8002212:	4464      	add	r4, ip
 8002214:	42a1      	cmp	r1, r4
 8002216:	d900      	bls.n	800221a <__aeabi_ddiv+0x4fa>
 8002218:	e69a      	b.n	8001f50 <__aeabi_ddiv+0x230>
 800221a:	42a2      	cmp	r2, r4
 800221c:	d800      	bhi.n	8002220 <__aeabi_ddiv+0x500>
 800221e:	e697      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002220:	1e83      	subs	r3, r0, #2
 8002222:	4464      	add	r4, ip
 8002224:	e694      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002226:	46ac      	mov	ip, r5
 8002228:	4461      	add	r1, ip
 800222a:	3f01      	subs	r7, #1
 800222c:	428d      	cmp	r5, r1
 800222e:	d900      	bls.n	8002232 <__aeabi_ddiv+0x512>
 8002230:	e680      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002232:	428a      	cmp	r2, r1
 8002234:	d800      	bhi.n	8002238 <__aeabi_ddiv+0x518>
 8002236:	e67d      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002238:	1e87      	subs	r7, r0, #2
 800223a:	4461      	add	r1, ip
 800223c:	e67a      	b.n	8001f34 <__aeabi_ddiv+0x214>
 800223e:	4285      	cmp	r5, r0
 8002240:	d000      	beq.n	8002244 <__aeabi_ddiv+0x524>
 8002242:	e65f      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 8002244:	45b9      	cmp	r9, r7
 8002246:	d900      	bls.n	800224a <__aeabi_ddiv+0x52a>
 8002248:	e65c      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 800224a:	e656      	b.n	8001efa <__aeabi_ddiv+0x1da>
 800224c:	42a2      	cmp	r2, r4
 800224e:	d800      	bhi.n	8002252 <__aeabi_ddiv+0x532>
 8002250:	e61a      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002252:	1e83      	subs	r3, r0, #2
 8002254:	4464      	add	r4, ip
 8002256:	e617      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002258:	428a      	cmp	r2, r1
 800225a:	d800      	bhi.n	800225e <__aeabi_ddiv+0x53e>
 800225c:	e600      	b.n	8001e60 <__aeabi_ddiv+0x140>
 800225e:	46ac      	mov	ip, r5
 8002260:	1e83      	subs	r3, r0, #2
 8002262:	4698      	mov	r8, r3
 8002264:	4461      	add	r1, ip
 8002266:	e5fb      	b.n	8001e60 <__aeabi_ddiv+0x140>
 8002268:	4837      	ldr	r0, [pc, #220]	@ (8002348 <__aeabi_ddiv+0x628>)
 800226a:	0014      	movs	r4, r2
 800226c:	4450      	add	r0, sl
 800226e:	4082      	lsls	r2, r0
 8002270:	465b      	mov	r3, fp
 8002272:	0017      	movs	r7, r2
 8002274:	4083      	lsls	r3, r0
 8002276:	40cc      	lsrs	r4, r1
 8002278:	1e7a      	subs	r2, r7, #1
 800227a:	4197      	sbcs	r7, r2
 800227c:	4323      	orrs	r3, r4
 800227e:	433b      	orrs	r3, r7
 8002280:	001a      	movs	r2, r3
 8002282:	465b      	mov	r3, fp
 8002284:	40cb      	lsrs	r3, r1
 8002286:	0751      	lsls	r1, r2, #29
 8002288:	d009      	beq.n	800229e <__aeabi_ddiv+0x57e>
 800228a:	210f      	movs	r1, #15
 800228c:	4011      	ands	r1, r2
 800228e:	2904      	cmp	r1, #4
 8002290:	d005      	beq.n	800229e <__aeabi_ddiv+0x57e>
 8002292:	1d11      	adds	r1, r2, #4
 8002294:	4291      	cmp	r1, r2
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	189b      	adds	r3, r3, r2
 800229c:	000a      	movs	r2, r1
 800229e:	0219      	lsls	r1, r3, #8
 80022a0:	d400      	bmi.n	80022a4 <__aeabi_ddiv+0x584>
 80022a2:	e755      	b.n	8002150 <__aeabi_ddiv+0x430>
 80022a4:	2200      	movs	r2, #0
 80022a6:	2301      	movs	r3, #1
 80022a8:	2400      	movs	r4, #0
 80022aa:	4690      	mov	r8, r2
 80022ac:	e598      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80022ae:	000a      	movs	r2, r1
 80022b0:	42bc      	cmp	r4, r7
 80022b2:	d000      	beq.n	80022b6 <__aeabi_ddiv+0x596>
 80022b4:	e66e      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022b6:	454b      	cmp	r3, r9
 80022b8:	d000      	beq.n	80022bc <__aeabi_ddiv+0x59c>
 80022ba:	e66b      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022bc:	e66c      	b.n	8001f98 <__aeabi_ddiv+0x278>
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <__aeabi_ddiv+0x62c>)
 80022c0:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <__aeabi_ddiv+0x630>)
 80022c2:	4453      	add	r3, sl
 80022c4:	4592      	cmp	sl, r2
 80022c6:	da00      	bge.n	80022ca <__aeabi_ddiv+0x5aa>
 80022c8:	e718      	b.n	80020fc <__aeabi_ddiv+0x3dc>
 80022ca:	2101      	movs	r1, #1
 80022cc:	4249      	negs	r1, r1
 80022ce:	1d0a      	adds	r2, r1, #4
 80022d0:	428a      	cmp	r2, r1
 80022d2:	4189      	sbcs	r1, r1
 80022d4:	4249      	negs	r1, r1
 80022d6:	448b      	add	fp, r1
 80022d8:	e666      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022da:	210f      	movs	r1, #15
 80022dc:	4011      	ands	r1, r2
 80022de:	2904      	cmp	r1, #4
 80022e0:	d100      	bne.n	80022e4 <__aeabi_ddiv+0x5c4>
 80022e2:	e661      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022e4:	0011      	movs	r1, r2
 80022e6:	e7f2      	b.n	80022ce <__aeabi_ddiv+0x5ae>
 80022e8:	42bc      	cmp	r4, r7
 80022ea:	d800      	bhi.n	80022ee <__aeabi_ddiv+0x5ce>
 80022ec:	e60a      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 80022ee:	2302      	movs	r3, #2
 80022f0:	425b      	negs	r3, r3
 80022f2:	469c      	mov	ip, r3
 80022f4:	9900      	ldr	r1, [sp, #0]
 80022f6:	444f      	add	r7, r9
 80022f8:	454f      	cmp	r7, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	44e3      	add	fp, ip
 80022fe:	468c      	mov	ip, r1
 8002300:	425b      	negs	r3, r3
 8002302:	4463      	add	r3, ip
 8002304:	18c0      	adds	r0, r0, r3
 8002306:	e5ff      	b.n	8001f08 <__aeabi_ddiv+0x1e8>
 8002308:	4649      	mov	r1, r9
 800230a:	9d00      	ldr	r5, [sp, #0]
 800230c:	0048      	lsls	r0, r1, #1
 800230e:	4548      	cmp	r0, r9
 8002310:	4189      	sbcs	r1, r1
 8002312:	46ac      	mov	ip, r5
 8002314:	4249      	negs	r1, r1
 8002316:	4461      	add	r1, ip
 8002318:	4681      	mov	r9, r0
 800231a:	3a02      	subs	r2, #2
 800231c:	1864      	adds	r4, r4, r1
 800231e:	e7c7      	b.n	80022b0 <__aeabi_ddiv+0x590>
 8002320:	2480      	movs	r4, #128	@ 0x80
 8002322:	465b      	mov	r3, fp
 8002324:	0324      	lsls	r4, r4, #12
 8002326:	431c      	orrs	r4, r3
 8002328:	0324      	lsls	r4, r4, #12
 800232a:	4690      	mov	r8, r2
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__aeabi_ddiv+0x620>)
 800232e:	0b24      	lsrs	r4, r4, #12
 8002330:	e556      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002332:	4599      	cmp	r9, r3
 8002334:	d3e8      	bcc.n	8002308 <__aeabi_ddiv+0x5e8>
 8002336:	000a      	movs	r2, r1
 8002338:	e7bd      	b.n	80022b6 <__aeabi_ddiv+0x596>
 800233a:	2300      	movs	r3, #0
 800233c:	e708      	b.n	8002150 <__aeabi_ddiv+0x430>
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff
 8002344:	0000043e 	.word	0x0000043e
 8002348:	0000041e 	.word	0x0000041e
 800234c:	000003ff 	.word	0x000003ff
 8002350:	fffffc02 	.word	0xfffffc02

08002354 <__eqdf2>:
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	4657      	mov	r7, sl
 8002358:	46de      	mov	lr, fp
 800235a:	464e      	mov	r6, r9
 800235c:	4645      	mov	r5, r8
 800235e:	b5e0      	push	{r5, r6, r7, lr}
 8002360:	000d      	movs	r5, r1
 8002362:	0004      	movs	r4, r0
 8002364:	0fe8      	lsrs	r0, r5, #31
 8002366:	4683      	mov	fp, r0
 8002368:	0309      	lsls	r1, r1, #12
 800236a:	0fd8      	lsrs	r0, r3, #31
 800236c:	0b09      	lsrs	r1, r1, #12
 800236e:	4682      	mov	sl, r0
 8002370:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <__eqdf2+0x84>)
 8002372:	468c      	mov	ip, r1
 8002374:	031f      	lsls	r7, r3, #12
 8002376:	0069      	lsls	r1, r5, #1
 8002378:	005e      	lsls	r6, r3, #1
 800237a:	0d49      	lsrs	r1, r1, #21
 800237c:	0b3f      	lsrs	r7, r7, #12
 800237e:	0d76      	lsrs	r6, r6, #21
 8002380:	4281      	cmp	r1, r0
 8002382:	d018      	beq.n	80023b6 <__eqdf2+0x62>
 8002384:	4286      	cmp	r6, r0
 8002386:	d00f      	beq.n	80023a8 <__eqdf2+0x54>
 8002388:	2001      	movs	r0, #1
 800238a:	42b1      	cmp	r1, r6
 800238c:	d10d      	bne.n	80023aa <__eqdf2+0x56>
 800238e:	45bc      	cmp	ip, r7
 8002390:	d10b      	bne.n	80023aa <__eqdf2+0x56>
 8002392:	4294      	cmp	r4, r2
 8002394:	d109      	bne.n	80023aa <__eqdf2+0x56>
 8002396:	45d3      	cmp	fp, sl
 8002398:	d01c      	beq.n	80023d4 <__eqdf2+0x80>
 800239a:	2900      	cmp	r1, #0
 800239c:	d105      	bne.n	80023aa <__eqdf2+0x56>
 800239e:	4660      	mov	r0, ip
 80023a0:	4320      	orrs	r0, r4
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e000      	b.n	80023aa <__eqdf2+0x56>
 80023a8:	2001      	movs	r0, #1
 80023aa:	bcf0      	pop	{r4, r5, r6, r7}
 80023ac:	46bb      	mov	fp, r7
 80023ae:	46b2      	mov	sl, r6
 80023b0:	46a9      	mov	r9, r5
 80023b2:	46a0      	mov	r8, r4
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b6:	2001      	movs	r0, #1
 80023b8:	428e      	cmp	r6, r1
 80023ba:	d1f6      	bne.n	80023aa <__eqdf2+0x56>
 80023bc:	4661      	mov	r1, ip
 80023be:	4339      	orrs	r1, r7
 80023c0:	000f      	movs	r7, r1
 80023c2:	4317      	orrs	r7, r2
 80023c4:	4327      	orrs	r7, r4
 80023c6:	d1f0      	bne.n	80023aa <__eqdf2+0x56>
 80023c8:	465b      	mov	r3, fp
 80023ca:	4652      	mov	r2, sl
 80023cc:	1a98      	subs	r0, r3, r2
 80023ce:	1e43      	subs	r3, r0, #1
 80023d0:	4198      	sbcs	r0, r3
 80023d2:	e7ea      	b.n	80023aa <__eqdf2+0x56>
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7e8      	b.n	80023aa <__eqdf2+0x56>
 80023d8:	000007ff 	.word	0x000007ff

080023dc <__gedf2>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	4657      	mov	r7, sl
 80023e0:	464e      	mov	r6, r9
 80023e2:	4645      	mov	r5, r8
 80023e4:	46de      	mov	lr, fp
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	000d      	movs	r5, r1
 80023ea:	030f      	lsls	r7, r1, #12
 80023ec:	0b39      	lsrs	r1, r7, #12
 80023ee:	b083      	sub	sp, #12
 80023f0:	0004      	movs	r4, r0
 80023f2:	4680      	mov	r8, r0
 80023f4:	9101      	str	r1, [sp, #4]
 80023f6:	0058      	lsls	r0, r3, #1
 80023f8:	0fe9      	lsrs	r1, r5, #31
 80023fa:	4f31      	ldr	r7, [pc, #196]	@ (80024c0 <__gedf2+0xe4>)
 80023fc:	0d40      	lsrs	r0, r0, #21
 80023fe:	468c      	mov	ip, r1
 8002400:	006e      	lsls	r6, r5, #1
 8002402:	0319      	lsls	r1, r3, #12
 8002404:	4682      	mov	sl, r0
 8002406:	4691      	mov	r9, r2
 8002408:	0d76      	lsrs	r6, r6, #21
 800240a:	0b09      	lsrs	r1, r1, #12
 800240c:	0fd8      	lsrs	r0, r3, #31
 800240e:	42be      	cmp	r6, r7
 8002410:	d01f      	beq.n	8002452 <__gedf2+0x76>
 8002412:	45ba      	cmp	sl, r7
 8002414:	d00f      	beq.n	8002436 <__gedf2+0x5a>
 8002416:	2e00      	cmp	r6, #0
 8002418:	d12f      	bne.n	800247a <__gedf2+0x9e>
 800241a:	4655      	mov	r5, sl
 800241c:	9e01      	ldr	r6, [sp, #4]
 800241e:	4334      	orrs	r4, r6
 8002420:	2d00      	cmp	r5, #0
 8002422:	d127      	bne.n	8002474 <__gedf2+0x98>
 8002424:	430a      	orrs	r2, r1
 8002426:	d03a      	beq.n	800249e <__gedf2+0xc2>
 8002428:	2c00      	cmp	r4, #0
 800242a:	d145      	bne.n	80024b8 <__gedf2+0xdc>
 800242c:	2800      	cmp	r0, #0
 800242e:	d11a      	bne.n	8002466 <__gedf2+0x8a>
 8002430:	2001      	movs	r0, #1
 8002432:	4240      	negs	r0, r0
 8002434:	e017      	b.n	8002466 <__gedf2+0x8a>
 8002436:	4311      	orrs	r1, r2
 8002438:	d13b      	bne.n	80024b2 <__gedf2+0xd6>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d102      	bne.n	8002444 <__gedf2+0x68>
 800243e:	9f01      	ldr	r7, [sp, #4]
 8002440:	4327      	orrs	r7, r4
 8002442:	d0f3      	beq.n	800242c <__gedf2+0x50>
 8002444:	4584      	cmp	ip, r0
 8002446:	d109      	bne.n	800245c <__gedf2+0x80>
 8002448:	4663      	mov	r3, ip
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <__gedf2+0x54>
 800244e:	4660      	mov	r0, ip
 8002450:	e009      	b.n	8002466 <__gedf2+0x8a>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d12c      	bne.n	80024b2 <__gedf2+0xd6>
 8002458:	45b2      	cmp	sl, r6
 800245a:	d024      	beq.n	80024a6 <__gedf2+0xca>
 800245c:	4663      	mov	r3, ip
 800245e:	2002      	movs	r0, #2
 8002460:	3b01      	subs	r3, #1
 8002462:	4018      	ands	r0, r3
 8002464:	3801      	subs	r0, #1
 8002466:	b003      	add	sp, #12
 8002468:	bcf0      	pop	{r4, r5, r6, r7}
 800246a:	46bb      	mov	fp, r7
 800246c:	46b2      	mov	sl, r6
 800246e:	46a9      	mov	r9, r5
 8002470:	46a0      	mov	r8, r4
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0d9      	beq.n	800242c <__gedf2+0x50>
 8002478:	e7e4      	b.n	8002444 <__gedf2+0x68>
 800247a:	4654      	mov	r4, sl
 800247c:	2c00      	cmp	r4, #0
 800247e:	d0ed      	beq.n	800245c <__gedf2+0x80>
 8002480:	4584      	cmp	ip, r0
 8002482:	d1eb      	bne.n	800245c <__gedf2+0x80>
 8002484:	4556      	cmp	r6, sl
 8002486:	dce9      	bgt.n	800245c <__gedf2+0x80>
 8002488:	dbde      	blt.n	8002448 <__gedf2+0x6c>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	428b      	cmp	r3, r1
 800248e:	d8e5      	bhi.n	800245c <__gedf2+0x80>
 8002490:	d1da      	bne.n	8002448 <__gedf2+0x6c>
 8002492:	45c8      	cmp	r8, r9
 8002494:	d8e2      	bhi.n	800245c <__gedf2+0x80>
 8002496:	2000      	movs	r0, #0
 8002498:	45c8      	cmp	r8, r9
 800249a:	d2e4      	bcs.n	8002466 <__gedf2+0x8a>
 800249c:	e7d4      	b.n	8002448 <__gedf2+0x6c>
 800249e:	2000      	movs	r0, #0
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0e0      	beq.n	8002466 <__gedf2+0x8a>
 80024a4:	e7da      	b.n	800245c <__gedf2+0x80>
 80024a6:	4311      	orrs	r1, r2
 80024a8:	d103      	bne.n	80024b2 <__gedf2+0xd6>
 80024aa:	4584      	cmp	ip, r0
 80024ac:	d1d6      	bne.n	800245c <__gedf2+0x80>
 80024ae:	2000      	movs	r0, #0
 80024b0:	e7d9      	b.n	8002466 <__gedf2+0x8a>
 80024b2:	2002      	movs	r0, #2
 80024b4:	4240      	negs	r0, r0
 80024b6:	e7d6      	b.n	8002466 <__gedf2+0x8a>
 80024b8:	4584      	cmp	ip, r0
 80024ba:	d0e6      	beq.n	800248a <__gedf2+0xae>
 80024bc:	e7ce      	b.n	800245c <__gedf2+0x80>
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff

080024c4 <__ledf2>:
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	4657      	mov	r7, sl
 80024c8:	464e      	mov	r6, r9
 80024ca:	4645      	mov	r5, r8
 80024cc:	46de      	mov	lr, fp
 80024ce:	b5e0      	push	{r5, r6, r7, lr}
 80024d0:	000d      	movs	r5, r1
 80024d2:	030f      	lsls	r7, r1, #12
 80024d4:	0004      	movs	r4, r0
 80024d6:	4680      	mov	r8, r0
 80024d8:	0fe8      	lsrs	r0, r5, #31
 80024da:	0b39      	lsrs	r1, r7, #12
 80024dc:	4684      	mov	ip, r0
 80024de:	b083      	sub	sp, #12
 80024e0:	0058      	lsls	r0, r3, #1
 80024e2:	4f30      	ldr	r7, [pc, #192]	@ (80025a4 <__ledf2+0xe0>)
 80024e4:	0d40      	lsrs	r0, r0, #21
 80024e6:	9101      	str	r1, [sp, #4]
 80024e8:	031e      	lsls	r6, r3, #12
 80024ea:	0069      	lsls	r1, r5, #1
 80024ec:	4682      	mov	sl, r0
 80024ee:	4691      	mov	r9, r2
 80024f0:	0d49      	lsrs	r1, r1, #21
 80024f2:	0b36      	lsrs	r6, r6, #12
 80024f4:	0fd8      	lsrs	r0, r3, #31
 80024f6:	42b9      	cmp	r1, r7
 80024f8:	d020      	beq.n	800253c <__ledf2+0x78>
 80024fa:	45ba      	cmp	sl, r7
 80024fc:	d00f      	beq.n	800251e <__ledf2+0x5a>
 80024fe:	2900      	cmp	r1, #0
 8002500:	d12b      	bne.n	800255a <__ledf2+0x96>
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	430c      	orrs	r4, r1
 8002506:	4651      	mov	r1, sl
 8002508:	2900      	cmp	r1, #0
 800250a:	d137      	bne.n	800257c <__ledf2+0xb8>
 800250c:	4332      	orrs	r2, r6
 800250e:	d038      	beq.n	8002582 <__ledf2+0xbe>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d144      	bne.n	800259e <__ledf2+0xda>
 8002514:	2800      	cmp	r0, #0
 8002516:	d119      	bne.n	800254c <__ledf2+0x88>
 8002518:	2001      	movs	r0, #1
 800251a:	4240      	negs	r0, r0
 800251c:	e016      	b.n	800254c <__ledf2+0x88>
 800251e:	4316      	orrs	r6, r2
 8002520:	d113      	bne.n	800254a <__ledf2+0x86>
 8002522:	2900      	cmp	r1, #0
 8002524:	d102      	bne.n	800252c <__ledf2+0x68>
 8002526:	9f01      	ldr	r7, [sp, #4]
 8002528:	4327      	orrs	r7, r4
 800252a:	d0f3      	beq.n	8002514 <__ledf2+0x50>
 800252c:	4584      	cmp	ip, r0
 800252e:	d020      	beq.n	8002572 <__ledf2+0xae>
 8002530:	4663      	mov	r3, ip
 8002532:	2002      	movs	r0, #2
 8002534:	3b01      	subs	r3, #1
 8002536:	4018      	ands	r0, r3
 8002538:	3801      	subs	r0, #1
 800253a:	e007      	b.n	800254c <__ledf2+0x88>
 800253c:	9f01      	ldr	r7, [sp, #4]
 800253e:	4327      	orrs	r7, r4
 8002540:	d103      	bne.n	800254a <__ledf2+0x86>
 8002542:	458a      	cmp	sl, r1
 8002544:	d1f4      	bne.n	8002530 <__ledf2+0x6c>
 8002546:	4316      	orrs	r6, r2
 8002548:	d01f      	beq.n	800258a <__ledf2+0xc6>
 800254a:	2002      	movs	r0, #2
 800254c:	b003      	add	sp, #12
 800254e:	bcf0      	pop	{r4, r5, r6, r7}
 8002550:	46bb      	mov	fp, r7
 8002552:	46b2      	mov	sl, r6
 8002554:	46a9      	mov	r9, r5
 8002556:	46a0      	mov	r8, r4
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	4654      	mov	r4, sl
 800255c:	2c00      	cmp	r4, #0
 800255e:	d0e7      	beq.n	8002530 <__ledf2+0x6c>
 8002560:	4584      	cmp	ip, r0
 8002562:	d1e5      	bne.n	8002530 <__ledf2+0x6c>
 8002564:	4551      	cmp	r1, sl
 8002566:	dce3      	bgt.n	8002530 <__ledf2+0x6c>
 8002568:	db03      	blt.n	8002572 <__ledf2+0xae>
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	42b3      	cmp	r3, r6
 800256e:	d8df      	bhi.n	8002530 <__ledf2+0x6c>
 8002570:	d00f      	beq.n	8002592 <__ledf2+0xce>
 8002572:	4663      	mov	r3, ip
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0cf      	beq.n	8002518 <__ledf2+0x54>
 8002578:	4660      	mov	r0, ip
 800257a:	e7e7      	b.n	800254c <__ledf2+0x88>
 800257c:	2c00      	cmp	r4, #0
 800257e:	d0c9      	beq.n	8002514 <__ledf2+0x50>
 8002580:	e7d4      	b.n	800252c <__ledf2+0x68>
 8002582:	2000      	movs	r0, #0
 8002584:	2c00      	cmp	r4, #0
 8002586:	d0e1      	beq.n	800254c <__ledf2+0x88>
 8002588:	e7d2      	b.n	8002530 <__ledf2+0x6c>
 800258a:	4584      	cmp	ip, r0
 800258c:	d1d0      	bne.n	8002530 <__ledf2+0x6c>
 800258e:	2000      	movs	r0, #0
 8002590:	e7dc      	b.n	800254c <__ledf2+0x88>
 8002592:	45c8      	cmp	r8, r9
 8002594:	d8cc      	bhi.n	8002530 <__ledf2+0x6c>
 8002596:	2000      	movs	r0, #0
 8002598:	45c8      	cmp	r8, r9
 800259a:	d2d7      	bcs.n	800254c <__ledf2+0x88>
 800259c:	e7e9      	b.n	8002572 <__ledf2+0xae>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d0e3      	beq.n	800256a <__ledf2+0xa6>
 80025a2:	e7c5      	b.n	8002530 <__ledf2+0x6c>
 80025a4:	000007ff 	.word	0x000007ff

080025a8 <__aeabi_dmul>:
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	4657      	mov	r7, sl
 80025ac:	46de      	mov	lr, fp
 80025ae:	464e      	mov	r6, r9
 80025b0:	4645      	mov	r5, r8
 80025b2:	b5e0      	push	{r5, r6, r7, lr}
 80025b4:	001f      	movs	r7, r3
 80025b6:	030b      	lsls	r3, r1, #12
 80025b8:	0b1b      	lsrs	r3, r3, #12
 80025ba:	0016      	movs	r6, r2
 80025bc:	469a      	mov	sl, r3
 80025be:	0fca      	lsrs	r2, r1, #31
 80025c0:	004b      	lsls	r3, r1, #1
 80025c2:	0004      	movs	r4, r0
 80025c4:	4693      	mov	fp, r2
 80025c6:	b087      	sub	sp, #28
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	d100      	bne.n	80025ce <__aeabi_dmul+0x26>
 80025cc:	e0d5      	b.n	800277a <__aeabi_dmul+0x1d2>
 80025ce:	4abb      	ldr	r2, [pc, #748]	@ (80028bc <__aeabi_dmul+0x314>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dmul+0x2e>
 80025d4:	e0f8      	b.n	80027c8 <__aeabi_dmul+0x220>
 80025d6:	4651      	mov	r1, sl
 80025d8:	0f42      	lsrs	r2, r0, #29
 80025da:	00c9      	lsls	r1, r1, #3
 80025dc:	430a      	orrs	r2, r1
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	0409      	lsls	r1, r1, #16
 80025e2:	4311      	orrs	r1, r2
 80025e4:	00c2      	lsls	r2, r0, #3
 80025e6:	4691      	mov	r9, r2
 80025e8:	4ab5      	ldr	r2, [pc, #724]	@ (80028c0 <__aeabi_dmul+0x318>)
 80025ea:	468a      	mov	sl, r1
 80025ec:	189d      	adds	r5, r3, r2
 80025ee:	2300      	movs	r3, #0
 80025f0:	4698      	mov	r8, r3
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	033c      	lsls	r4, r7, #12
 80025f6:	007b      	lsls	r3, r7, #1
 80025f8:	0ffa      	lsrs	r2, r7, #31
 80025fa:	0030      	movs	r0, r6
 80025fc:	0b24      	lsrs	r4, r4, #12
 80025fe:	0d5b      	lsrs	r3, r3, #21
 8002600:	9200      	str	r2, [sp, #0]
 8002602:	d100      	bne.n	8002606 <__aeabi_dmul+0x5e>
 8002604:	e096      	b.n	8002734 <__aeabi_dmul+0x18c>
 8002606:	4aad      	ldr	r2, [pc, #692]	@ (80028bc <__aeabi_dmul+0x314>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d031      	beq.n	8002670 <__aeabi_dmul+0xc8>
 800260c:	0f72      	lsrs	r2, r6, #29
 800260e:	00e4      	lsls	r4, r4, #3
 8002610:	4322      	orrs	r2, r4
 8002612:	2480      	movs	r4, #128	@ 0x80
 8002614:	0424      	lsls	r4, r4, #16
 8002616:	4314      	orrs	r4, r2
 8002618:	4aa9      	ldr	r2, [pc, #676]	@ (80028c0 <__aeabi_dmul+0x318>)
 800261a:	00f0      	lsls	r0, r6, #3
 800261c:	4694      	mov	ip, r2
 800261e:	4463      	add	r3, ip
 8002620:	195b      	adds	r3, r3, r5
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	4642      	mov	r2, r8
 8002628:	2600      	movs	r6, #0
 800262a:	2a0a      	cmp	r2, #10
 800262c:	dc42      	bgt.n	80026b4 <__aeabi_dmul+0x10c>
 800262e:	465a      	mov	r2, fp
 8002630:	9900      	ldr	r1, [sp, #0]
 8002632:	404a      	eors	r2, r1
 8002634:	4693      	mov	fp, r2
 8002636:	4642      	mov	r2, r8
 8002638:	2a02      	cmp	r2, #2
 800263a:	dc32      	bgt.n	80026a2 <__aeabi_dmul+0xfa>
 800263c:	3a01      	subs	r2, #1
 800263e:	2a01      	cmp	r2, #1
 8002640:	d900      	bls.n	8002644 <__aeabi_dmul+0x9c>
 8002642:	e149      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002644:	2e02      	cmp	r6, #2
 8002646:	d100      	bne.n	800264a <__aeabi_dmul+0xa2>
 8002648:	e0ca      	b.n	80027e0 <__aeabi_dmul+0x238>
 800264a:	2e01      	cmp	r6, #1
 800264c:	d13d      	bne.n	80026ca <__aeabi_dmul+0x122>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	0010      	movs	r0, r2
 8002656:	465a      	mov	r2, fp
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	4323      	orrs	r3, r4
 800265c:	07d2      	lsls	r2, r2, #31
 800265e:	4313      	orrs	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	b007      	add	sp, #28
 8002664:	bcf0      	pop	{r4, r5, r6, r7}
 8002666:	46bb      	mov	fp, r7
 8002668:	46b2      	mov	sl, r6
 800266a:	46a9      	mov	r9, r5
 800266c:	46a0      	mov	r8, r4
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	4b92      	ldr	r3, [pc, #584]	@ (80028bc <__aeabi_dmul+0x314>)
 8002672:	4326      	orrs	r6, r4
 8002674:	18eb      	adds	r3, r5, r3
 8002676:	2e00      	cmp	r6, #0
 8002678:	d100      	bne.n	800267c <__aeabi_dmul+0xd4>
 800267a:	e0bb      	b.n	80027f4 <__aeabi_dmul+0x24c>
 800267c:	2203      	movs	r2, #3
 800267e:	4641      	mov	r1, r8
 8002680:	4311      	orrs	r1, r2
 8002682:	465a      	mov	r2, fp
 8002684:	4688      	mov	r8, r1
 8002686:	9900      	ldr	r1, [sp, #0]
 8002688:	404a      	eors	r2, r1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	0109      	lsls	r1, r1, #4
 800268e:	468c      	mov	ip, r1
 8002690:	0029      	movs	r1, r5
 8002692:	4461      	add	r1, ip
 8002694:	9101      	str	r1, [sp, #4]
 8002696:	4641      	mov	r1, r8
 8002698:	290a      	cmp	r1, #10
 800269a:	dd00      	ble.n	800269e <__aeabi_dmul+0xf6>
 800269c:	e233      	b.n	8002b06 <__aeabi_dmul+0x55e>
 800269e:	4693      	mov	fp, r2
 80026a0:	2603      	movs	r6, #3
 80026a2:	4642      	mov	r2, r8
 80026a4:	2701      	movs	r7, #1
 80026a6:	4097      	lsls	r7, r2
 80026a8:	21a6      	movs	r1, #166	@ 0xa6
 80026aa:	003a      	movs	r2, r7
 80026ac:	00c9      	lsls	r1, r1, #3
 80026ae:	400a      	ands	r2, r1
 80026b0:	420f      	tst	r7, r1
 80026b2:	d031      	beq.n	8002718 <__aeabi_dmul+0x170>
 80026b4:	9e02      	ldr	r6, [sp, #8]
 80026b6:	2e02      	cmp	r6, #2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dmul+0x114>
 80026ba:	e235      	b.n	8002b28 <__aeabi_dmul+0x580>
 80026bc:	2e03      	cmp	r6, #3
 80026be:	d100      	bne.n	80026c2 <__aeabi_dmul+0x11a>
 80026c0:	e1d2      	b.n	8002a68 <__aeabi_dmul+0x4c0>
 80026c2:	4654      	mov	r4, sl
 80026c4:	4648      	mov	r0, r9
 80026c6:	2e01      	cmp	r6, #1
 80026c8:	d0c1      	beq.n	800264e <__aeabi_dmul+0xa6>
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	4b7d      	ldr	r3, [pc, #500]	@ (80028c4 <__aeabi_dmul+0x31c>)
 80026ce:	4694      	mov	ip, r2
 80026d0:	4463      	add	r3, ip
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dc00      	bgt.n	80026d8 <__aeabi_dmul+0x130>
 80026d6:	e0c0      	b.n	800285a <__aeabi_dmul+0x2b2>
 80026d8:	0742      	lsls	r2, r0, #29
 80026da:	d009      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026dc:	220f      	movs	r2, #15
 80026de:	4002      	ands	r2, r0
 80026e0:	2a04      	cmp	r2, #4
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026e4:	1d02      	adds	r2, r0, #4
 80026e6:	4282      	cmp	r2, r0
 80026e8:	4180      	sbcs	r0, r0
 80026ea:	4240      	negs	r0, r0
 80026ec:	1824      	adds	r4, r4, r0
 80026ee:	0010      	movs	r0, r2
 80026f0:	01e2      	lsls	r2, r4, #7
 80026f2:	d506      	bpl.n	8002702 <__aeabi_dmul+0x15a>
 80026f4:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <__aeabi_dmul+0x320>)
 80026f6:	9a01      	ldr	r2, [sp, #4]
 80026f8:	401c      	ands	r4, r3
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	4694      	mov	ip, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4463      	add	r3, ip
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <__aeabi_dmul+0x324>)
 8002704:	4293      	cmp	r3, r2
 8002706:	dc6b      	bgt.n	80027e0 <__aeabi_dmul+0x238>
 8002708:	0762      	lsls	r2, r4, #29
 800270a:	08c0      	lsrs	r0, r0, #3
 800270c:	0264      	lsls	r4, r4, #9
 800270e:	055b      	lsls	r3, r3, #21
 8002710:	4302      	orrs	r2, r0
 8002712:	0b24      	lsrs	r4, r4, #12
 8002714:	0d5b      	lsrs	r3, r3, #21
 8002716:	e79d      	b.n	8002654 <__aeabi_dmul+0xac>
 8002718:	2190      	movs	r1, #144	@ 0x90
 800271a:	0089      	lsls	r1, r1, #2
 800271c:	420f      	tst	r7, r1
 800271e:	d163      	bne.n	80027e8 <__aeabi_dmul+0x240>
 8002720:	2288      	movs	r2, #136	@ 0x88
 8002722:	423a      	tst	r2, r7
 8002724:	d100      	bne.n	8002728 <__aeabi_dmul+0x180>
 8002726:	e0d7      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002728:	9b00      	ldr	r3, [sp, #0]
 800272a:	46a2      	mov	sl, r4
 800272c:	469b      	mov	fp, r3
 800272e:	4681      	mov	r9, r0
 8002730:	9602      	str	r6, [sp, #8]
 8002732:	e7bf      	b.n	80026b4 <__aeabi_dmul+0x10c>
 8002734:	0023      	movs	r3, r4
 8002736:	4333      	orrs	r3, r6
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x194>
 800273a:	e07f      	b.n	800283c <__aeabi_dmul+0x294>
 800273c:	2c00      	cmp	r4, #0
 800273e:	d100      	bne.n	8002742 <__aeabi_dmul+0x19a>
 8002740:	e1ad      	b.n	8002a9e <__aeabi_dmul+0x4f6>
 8002742:	0020      	movs	r0, r4
 8002744:	f000 ff10 	bl	8003568 <__clzsi2>
 8002748:	0002      	movs	r2, r0
 800274a:	0003      	movs	r3, r0
 800274c:	3a0b      	subs	r2, #11
 800274e:	201d      	movs	r0, #29
 8002750:	0019      	movs	r1, r3
 8002752:	1a82      	subs	r2, r0, r2
 8002754:	0030      	movs	r0, r6
 8002756:	3908      	subs	r1, #8
 8002758:	40d0      	lsrs	r0, r2
 800275a:	408c      	lsls	r4, r1
 800275c:	4304      	orrs	r4, r0
 800275e:	0030      	movs	r0, r6
 8002760:	4088      	lsls	r0, r1
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <__aeabi_dmul+0x328>)
 8002764:	1aeb      	subs	r3, r5, r3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2600      	movs	r6, #0
 8002772:	2a0a      	cmp	r2, #10
 8002774:	dc00      	bgt.n	8002778 <__aeabi_dmul+0x1d0>
 8002776:	e75a      	b.n	800262e <__aeabi_dmul+0x86>
 8002778:	e79c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800277a:	4653      	mov	r3, sl
 800277c:	4303      	orrs	r3, r0
 800277e:	4699      	mov	r9, r3
 8002780:	d054      	beq.n	800282c <__aeabi_dmul+0x284>
 8002782:	4653      	mov	r3, sl
 8002784:	2b00      	cmp	r3, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dmul+0x1e2>
 8002788:	e177      	b.n	8002a7a <__aeabi_dmul+0x4d2>
 800278a:	4650      	mov	r0, sl
 800278c:	f000 feec 	bl	8003568 <__clzsi2>
 8002790:	230b      	movs	r3, #11
 8002792:	425b      	negs	r3, r3
 8002794:	469c      	mov	ip, r3
 8002796:	0002      	movs	r2, r0
 8002798:	4484      	add	ip, r0
 800279a:	0011      	movs	r1, r2
 800279c:	4650      	mov	r0, sl
 800279e:	3908      	subs	r1, #8
 80027a0:	4088      	lsls	r0, r1
 80027a2:	231d      	movs	r3, #29
 80027a4:	4680      	mov	r8, r0
 80027a6:	4660      	mov	r0, ip
 80027a8:	1a1b      	subs	r3, r3, r0
 80027aa:	0020      	movs	r0, r4
 80027ac:	40d8      	lsrs	r0, r3
 80027ae:	0003      	movs	r3, r0
 80027b0:	4640      	mov	r0, r8
 80027b2:	4303      	orrs	r3, r0
 80027b4:	469a      	mov	sl, r3
 80027b6:	0023      	movs	r3, r4
 80027b8:	408b      	lsls	r3, r1
 80027ba:	4699      	mov	r9, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	4d44      	ldr	r5, [pc, #272]	@ (80028d0 <__aeabi_dmul+0x328>)
 80027c0:	4698      	mov	r8, r3
 80027c2:	1aad      	subs	r5, r5, r2
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	e715      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027c8:	4652      	mov	r2, sl
 80027ca:	4302      	orrs	r2, r0
 80027cc:	4691      	mov	r9, r2
 80027ce:	d126      	bne.n	800281e <__aeabi_dmul+0x276>
 80027d0:	2200      	movs	r2, #0
 80027d2:	001d      	movs	r5, r3
 80027d4:	2302      	movs	r3, #2
 80027d6:	4692      	mov	sl, r2
 80027d8:	3208      	adds	r2, #8
 80027da:	4690      	mov	r8, r2
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	e709      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027e0:	2400      	movs	r4, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <__aeabi_dmul+0x314>)
 80027e6:	e735      	b.n	8002654 <__aeabi_dmul+0xac>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2480      	movs	r4, #128	@ 0x80
 80027ec:	469b      	mov	fp, r3
 80027ee:	0324      	lsls	r4, r4, #12
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <__aeabi_dmul+0x314>)
 80027f2:	e72f      	b.n	8002654 <__aeabi_dmul+0xac>
 80027f4:	2202      	movs	r2, #2
 80027f6:	4641      	mov	r1, r8
 80027f8:	4311      	orrs	r1, r2
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	4694      	mov	ip, r2
 8002800:	002a      	movs	r2, r5
 8002802:	4462      	add	r2, ip
 8002804:	4688      	mov	r8, r1
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	290a      	cmp	r1, #10
 800280a:	dd00      	ble.n	800280e <__aeabi_dmul+0x266>
 800280c:	e752      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800280e:	465a      	mov	r2, fp
 8002810:	2000      	movs	r0, #0
 8002812:	9900      	ldr	r1, [sp, #0]
 8002814:	0004      	movs	r4, r0
 8002816:	404a      	eors	r2, r1
 8002818:	4693      	mov	fp, r2
 800281a:	2602      	movs	r6, #2
 800281c:	e70b      	b.n	8002636 <__aeabi_dmul+0x8e>
 800281e:	220c      	movs	r2, #12
 8002820:	001d      	movs	r5, r3
 8002822:	2303      	movs	r3, #3
 8002824:	4681      	mov	r9, r0
 8002826:	4690      	mov	r8, r2
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	e6e3      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800282c:	2300      	movs	r3, #0
 800282e:	469a      	mov	sl, r3
 8002830:	3304      	adds	r3, #4
 8002832:	4698      	mov	r8, r3
 8002834:	3b03      	subs	r3, #3
 8002836:	2500      	movs	r5, #0
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	e6db      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800283c:	4642      	mov	r2, r8
 800283e:	3301      	adds	r3, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	002b      	movs	r3, r5
 8002844:	4690      	mov	r8, r2
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	4642      	mov	r2, r8
 800284c:	2400      	movs	r4, #0
 800284e:	2000      	movs	r0, #0
 8002850:	2601      	movs	r6, #1
 8002852:	2a0a      	cmp	r2, #10
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dmul+0x2b0>
 8002856:	e6ea      	b.n	800262e <__aeabi_dmul+0x86>
 8002858:	e72c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800285a:	2201      	movs	r2, #1
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	2a38      	cmp	r2, #56	@ 0x38
 8002860:	dd00      	ble.n	8002864 <__aeabi_dmul+0x2bc>
 8002862:	e6f4      	b.n	800264e <__aeabi_dmul+0xa6>
 8002864:	2a1f      	cmp	r2, #31
 8002866:	dc00      	bgt.n	800286a <__aeabi_dmul+0x2c2>
 8002868:	e12a      	b.n	8002ac0 <__aeabi_dmul+0x518>
 800286a:	211f      	movs	r1, #31
 800286c:	4249      	negs	r1, r1
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	0021      	movs	r1, r4
 8002872:	40d9      	lsrs	r1, r3
 8002874:	000b      	movs	r3, r1
 8002876:	2a20      	cmp	r2, #32
 8002878:	d005      	beq.n	8002886 <__aeabi_dmul+0x2de>
 800287a:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <__aeabi_dmul+0x32c>)
 800287c:	9d01      	ldr	r5, [sp, #4]
 800287e:	4694      	mov	ip, r2
 8002880:	4465      	add	r5, ip
 8002882:	40ac      	lsls	r4, r5
 8002884:	4320      	orrs	r0, r4
 8002886:	1e42      	subs	r2, r0, #1
 8002888:	4190      	sbcs	r0, r2
 800288a:	4318      	orrs	r0, r3
 800288c:	2307      	movs	r3, #7
 800288e:	0019      	movs	r1, r3
 8002890:	2400      	movs	r4, #0
 8002892:	4001      	ands	r1, r0
 8002894:	4203      	tst	r3, r0
 8002896:	d00c      	beq.n	80028b2 <__aeabi_dmul+0x30a>
 8002898:	230f      	movs	r3, #15
 800289a:	4003      	ands	r3, r0
 800289c:	2b04      	cmp	r3, #4
 800289e:	d100      	bne.n	80028a2 <__aeabi_dmul+0x2fa>
 80028a0:	e140      	b.n	8002b24 <__aeabi_dmul+0x57c>
 80028a2:	1d03      	adds	r3, r0, #4
 80028a4:	4283      	cmp	r3, r0
 80028a6:	41a4      	sbcs	r4, r4
 80028a8:	0018      	movs	r0, r3
 80028aa:	4264      	negs	r4, r4
 80028ac:	0761      	lsls	r1, r4, #29
 80028ae:	0264      	lsls	r4, r4, #9
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	08c2      	lsrs	r2, r0, #3
 80028b4:	2300      	movs	r3, #0
 80028b6:	430a      	orrs	r2, r1
 80028b8:	e6cc      	b.n	8002654 <__aeabi_dmul+0xac>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000007ff 	.word	0x000007ff
 80028c0:	fffffc01 	.word	0xfffffc01
 80028c4:	000003ff 	.word	0x000003ff
 80028c8:	feffffff 	.word	0xfeffffff
 80028cc:	000007fe 	.word	0x000007fe
 80028d0:	fffffc0d 	.word	0xfffffc0d
 80028d4:	0000043e 	.word	0x0000043e
 80028d8:	4649      	mov	r1, r9
 80028da:	464a      	mov	r2, r9
 80028dc:	0409      	lsls	r1, r1, #16
 80028de:	0c09      	lsrs	r1, r1, #16
 80028e0:	000d      	movs	r5, r1
 80028e2:	0c16      	lsrs	r6, r2, #16
 80028e4:	0c02      	lsrs	r2, r0, #16
 80028e6:	0400      	lsls	r0, r0, #16
 80028e8:	0c00      	lsrs	r0, r0, #16
 80028ea:	4345      	muls	r5, r0
 80028ec:	46ac      	mov	ip, r5
 80028ee:	0005      	movs	r5, r0
 80028f0:	4375      	muls	r5, r6
 80028f2:	46a8      	mov	r8, r5
 80028f4:	0015      	movs	r5, r2
 80028f6:	000f      	movs	r7, r1
 80028f8:	4375      	muls	r5, r6
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	9502      	str	r5, [sp, #8]
 80028fe:	002a      	movs	r2, r5
 8002900:	9d00      	ldr	r5, [sp, #0]
 8002902:	436f      	muls	r7, r5
 8002904:	4665      	mov	r5, ip
 8002906:	0c2d      	lsrs	r5, r5, #16
 8002908:	46a9      	mov	r9, r5
 800290a:	4447      	add	r7, r8
 800290c:	444f      	add	r7, r9
 800290e:	45b8      	cmp	r8, r7
 8002910:	d905      	bls.n	800291e <__aeabi_dmul+0x376>
 8002912:	0015      	movs	r5, r2
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0252      	lsls	r2, r2, #9
 8002918:	4690      	mov	r8, r2
 800291a:	4445      	add	r5, r8
 800291c:	9502      	str	r5, [sp, #8]
 800291e:	0c3d      	lsrs	r5, r7, #16
 8002920:	9503      	str	r5, [sp, #12]
 8002922:	4665      	mov	r5, ip
 8002924:	042d      	lsls	r5, r5, #16
 8002926:	043f      	lsls	r7, r7, #16
 8002928:	0c2d      	lsrs	r5, r5, #16
 800292a:	46ac      	mov	ip, r5
 800292c:	003d      	movs	r5, r7
 800292e:	4465      	add	r5, ip
 8002930:	9504      	str	r5, [sp, #16]
 8002932:	0c25      	lsrs	r5, r4, #16
 8002934:	0424      	lsls	r4, r4, #16
 8002936:	0c24      	lsrs	r4, r4, #16
 8002938:	46ac      	mov	ip, r5
 800293a:	0025      	movs	r5, r4
 800293c:	4375      	muls	r5, r6
 800293e:	46a8      	mov	r8, r5
 8002940:	4665      	mov	r5, ip
 8002942:	000f      	movs	r7, r1
 8002944:	4369      	muls	r1, r5
 8002946:	4441      	add	r1, r8
 8002948:	4689      	mov	r9, r1
 800294a:	4367      	muls	r7, r4
 800294c:	0c39      	lsrs	r1, r7, #16
 800294e:	4449      	add	r1, r9
 8002950:	436e      	muls	r6, r5
 8002952:	4588      	cmp	r8, r1
 8002954:	d903      	bls.n	800295e <__aeabi_dmul+0x3b6>
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0252      	lsls	r2, r2, #9
 800295a:	4690      	mov	r8, r2
 800295c:	4446      	add	r6, r8
 800295e:	0c0d      	lsrs	r5, r1, #16
 8002960:	46a8      	mov	r8, r5
 8002962:	0035      	movs	r5, r6
 8002964:	4445      	add	r5, r8
 8002966:	9505      	str	r5, [sp, #20]
 8002968:	9d03      	ldr	r5, [sp, #12]
 800296a:	043f      	lsls	r7, r7, #16
 800296c:	46a8      	mov	r8, r5
 800296e:	0c3f      	lsrs	r7, r7, #16
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	19c9      	adds	r1, r1, r7
 8002974:	4488      	add	r8, r1
 8002976:	4645      	mov	r5, r8
 8002978:	9503      	str	r5, [sp, #12]
 800297a:	4655      	mov	r5, sl
 800297c:	042e      	lsls	r6, r5, #16
 800297e:	0c36      	lsrs	r6, r6, #16
 8002980:	0c2f      	lsrs	r7, r5, #16
 8002982:	0035      	movs	r5, r6
 8002984:	4345      	muls	r5, r0
 8002986:	4378      	muls	r0, r7
 8002988:	4681      	mov	r9, r0
 800298a:	0038      	movs	r0, r7
 800298c:	46a8      	mov	r8, r5
 800298e:	0c2d      	lsrs	r5, r5, #16
 8002990:	46aa      	mov	sl, r5
 8002992:	9a00      	ldr	r2, [sp, #0]
 8002994:	4350      	muls	r0, r2
 8002996:	4372      	muls	r2, r6
 8002998:	444a      	add	r2, r9
 800299a:	4452      	add	r2, sl
 800299c:	4591      	cmp	r9, r2
 800299e:	d903      	bls.n	80029a8 <__aeabi_dmul+0x400>
 80029a0:	2580      	movs	r5, #128	@ 0x80
 80029a2:	026d      	lsls	r5, r5, #9
 80029a4:	46a9      	mov	r9, r5
 80029a6:	4448      	add	r0, r9
 80029a8:	0c15      	lsrs	r5, r2, #16
 80029aa:	46a9      	mov	r9, r5
 80029ac:	4645      	mov	r5, r8
 80029ae:	042d      	lsls	r5, r5, #16
 80029b0:	0c2d      	lsrs	r5, r5, #16
 80029b2:	46a8      	mov	r8, r5
 80029b4:	4665      	mov	r5, ip
 80029b6:	437d      	muls	r5, r7
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	4448      	add	r0, r9
 80029bc:	4490      	add	r8, r2
 80029be:	46a9      	mov	r9, r5
 80029c0:	0032      	movs	r2, r6
 80029c2:	4665      	mov	r5, ip
 80029c4:	4362      	muls	r2, r4
 80029c6:	436e      	muls	r6, r5
 80029c8:	437c      	muls	r4, r7
 80029ca:	0c17      	lsrs	r7, r2, #16
 80029cc:	1936      	adds	r6, r6, r4
 80029ce:	19bf      	adds	r7, r7, r6
 80029d0:	42bc      	cmp	r4, r7
 80029d2:	d903      	bls.n	80029dc <__aeabi_dmul+0x434>
 80029d4:	2480      	movs	r4, #128	@ 0x80
 80029d6:	0264      	lsls	r4, r4, #9
 80029d8:	46a4      	mov	ip, r4
 80029da:	44e1      	add	r9, ip
 80029dc:	9c02      	ldr	r4, [sp, #8]
 80029de:	9e03      	ldr	r6, [sp, #12]
 80029e0:	46a4      	mov	ip, r4
 80029e2:	9d05      	ldr	r5, [sp, #20]
 80029e4:	4466      	add	r6, ip
 80029e6:	428e      	cmp	r6, r1
 80029e8:	4189      	sbcs	r1, r1
 80029ea:	46ac      	mov	ip, r5
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	043c      	lsls	r4, r7, #16
 80029f0:	0c12      	lsrs	r2, r2, #16
 80029f2:	18a2      	adds	r2, r4, r2
 80029f4:	4462      	add	r2, ip
 80029f6:	4249      	negs	r1, r1
 80029f8:	1854      	adds	r4, r2, r1
 80029fa:	4446      	add	r6, r8
 80029fc:	46a4      	mov	ip, r4
 80029fe:	4546      	cmp	r6, r8
 8002a00:	41a4      	sbcs	r4, r4
 8002a02:	4682      	mov	sl, r0
 8002a04:	4264      	negs	r4, r4
 8002a06:	46a0      	mov	r8, r4
 8002a08:	42aa      	cmp	r2, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	458c      	cmp	ip, r1
 8002a0e:	4189      	sbcs	r1, r1
 8002a10:	44e2      	add	sl, ip
 8002a12:	44d0      	add	r8, sl
 8002a14:	4249      	negs	r1, r1
 8002a16:	4252      	negs	r2, r2
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	45a0      	cmp	r8, r4
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4582      	cmp	sl, r0
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	4264      	negs	r4, r4
 8002a24:	4249      	negs	r1, r1
 8002a26:	430c      	orrs	r4, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	0c3f      	lsrs	r7, r7, #16
 8002a2c:	19d2      	adds	r2, r2, r7
 8002a2e:	1912      	adds	r2, r2, r4
 8002a30:	0dcc      	lsrs	r4, r1, #23
 8002a32:	9904      	ldr	r1, [sp, #16]
 8002a34:	0270      	lsls	r0, r6, #9
 8002a36:	4308      	orrs	r0, r1
 8002a38:	1e41      	subs	r1, r0, #1
 8002a3a:	4188      	sbcs	r0, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	444a      	add	r2, r9
 8002a40:	0df6      	lsrs	r6, r6, #23
 8002a42:	0252      	lsls	r2, r2, #9
 8002a44:	4330      	orrs	r0, r6
 8002a46:	0249      	lsls	r1, r1, #9
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	01d2      	lsls	r2, r2, #7
 8002a4e:	d535      	bpl.n	8002abc <__aeabi_dmul+0x514>
 8002a50:	2201      	movs	r2, #1
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4002      	ands	r2, r0
 8002a56:	4313      	orrs	r3, r2
 8002a58:	07e0      	lsls	r0, r4, #31
 8002a5a:	4318      	orrs	r0, r3
 8002a5c:	0864      	lsrs	r4, r4, #1
 8002a5e:	e634      	b.n	80026ca <__aeabi_dmul+0x122>
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	46a2      	mov	sl, r4
 8002a64:	469b      	mov	fp, r3
 8002a66:	4681      	mov	r9, r0
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	0324      	lsls	r4, r4, #12
 8002a6e:	431c      	orrs	r4, r3
 8002a70:	0324      	lsls	r4, r4, #12
 8002a72:	464a      	mov	r2, r9
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002a76:	0b24      	lsrs	r4, r4, #12
 8002a78:	e5ec      	b.n	8002654 <__aeabi_dmul+0xac>
 8002a7a:	f000 fd75 	bl	8003568 <__clzsi2>
 8002a7e:	2315      	movs	r3, #21
 8002a80:	469c      	mov	ip, r3
 8002a82:	4484      	add	ip, r0
 8002a84:	0002      	movs	r2, r0
 8002a86:	4663      	mov	r3, ip
 8002a88:	3220      	adds	r2, #32
 8002a8a:	2b1c      	cmp	r3, #28
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x4e8>
 8002a8e:	e684      	b.n	800279a <__aeabi_dmul+0x1f2>
 8002a90:	2300      	movs	r3, #0
 8002a92:	4699      	mov	r9, r3
 8002a94:	0023      	movs	r3, r4
 8002a96:	3808      	subs	r0, #8
 8002a98:	4083      	lsls	r3, r0
 8002a9a:	469a      	mov	sl, r3
 8002a9c:	e68e      	b.n	80027bc <__aeabi_dmul+0x214>
 8002a9e:	f000 fd63 	bl	8003568 <__clzsi2>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3215      	adds	r2, #21
 8002aa8:	3320      	adds	r3, #32
 8002aaa:	2a1c      	cmp	r2, #28
 8002aac:	dc00      	bgt.n	8002ab0 <__aeabi_dmul+0x508>
 8002aae:	e64e      	b.n	800274e <__aeabi_dmul+0x1a6>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	0034      	movs	r4, r6
 8002ab4:	3a08      	subs	r2, #8
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4094      	lsls	r4, r2
 8002aba:	e652      	b.n	8002762 <__aeabi_dmul+0x1ba>
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	e604      	b.n	80026ca <__aeabi_dmul+0x122>
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <__aeabi_dmul+0x58c>)
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	469c      	mov	ip, r3
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	9d01      	ldr	r5, [sp, #4]
 8002aca:	40d3      	lsrs	r3, r2
 8002acc:	4465      	add	r5, ip
 8002ace:	40a9      	lsls	r1, r5
 8002ad0:	4319      	orrs	r1, r3
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	40ab      	lsls	r3, r5
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	4183      	sbcs	r3, r0
 8002ada:	4319      	orrs	r1, r3
 8002adc:	0008      	movs	r0, r1
 8002ade:	40d4      	lsrs	r4, r2
 8002ae0:	074b      	lsls	r3, r1, #29
 8002ae2:	d009      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d005      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002aec:	1d0b      	adds	r3, r1, #4
 8002aee:	428b      	cmp	r3, r1
 8002af0:	4180      	sbcs	r0, r0
 8002af2:	4240      	negs	r0, r0
 8002af4:	1824      	adds	r4, r4, r0
 8002af6:	0018      	movs	r0, r3
 8002af8:	0223      	lsls	r3, r4, #8
 8002afa:	d400      	bmi.n	8002afe <__aeabi_dmul+0x556>
 8002afc:	e6d6      	b.n	80028ac <__aeabi_dmul+0x304>
 8002afe:	2301      	movs	r3, #1
 8002b00:	2400      	movs	r4, #0
 8002b02:	2200      	movs	r2, #0
 8002b04:	e5a6      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b06:	290f      	cmp	r1, #15
 8002b08:	d1aa      	bne.n	8002a60 <__aeabi_dmul+0x4b8>
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	421a      	tst	r2, r3
 8002b12:	d0a9      	beq.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b14:	421c      	tst	r4, r3
 8002b16:	d1a7      	bne.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b18:	431c      	orrs	r4, r3
 8002b1a:	9b00      	ldr	r3, [sp, #0]
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	469b      	mov	fp, r3
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b22:	e597      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b24:	2400      	movs	r4, #0
 8002b26:	e6c1      	b.n	80028ac <__aeabi_dmul+0x304>
 8002b28:	2400      	movs	r4, #0
 8002b2a:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b2c:	0022      	movs	r2, r4
 8002b2e:	e591      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b30:	000007ff 	.word	0x000007ff
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_dsub>:
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	464e      	mov	r6, r9
 8002b3c:	4645      	mov	r5, r8
 8002b3e:	46de      	mov	lr, fp
 8002b40:	4657      	mov	r7, sl
 8002b42:	b5e0      	push	{r5, r6, r7, lr}
 8002b44:	b085      	sub	sp, #20
 8002b46:	9000      	str	r0, [sp, #0]
 8002b48:	9101      	str	r1, [sp, #4]
 8002b4a:	030c      	lsls	r4, r1, #12
 8002b4c:	004f      	lsls	r7, r1, #1
 8002b4e:	0fce      	lsrs	r6, r1, #31
 8002b50:	0a61      	lsrs	r1, r4, #9
 8002b52:	9c00      	ldr	r4, [sp, #0]
 8002b54:	46b0      	mov	r8, r6
 8002b56:	0f64      	lsrs	r4, r4, #29
 8002b58:	430c      	orrs	r4, r1
 8002b5a:	9900      	ldr	r1, [sp, #0]
 8002b5c:	0d7f      	lsrs	r7, r7, #21
 8002b5e:	00c8      	lsls	r0, r1, #3
 8002b60:	0011      	movs	r1, r2
 8002b62:	001a      	movs	r2, r3
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	469c      	mov	ip, r3
 8002b68:	9100      	str	r1, [sp, #0]
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	0051      	lsls	r1, r2, #1
 8002b6e:	0d4b      	lsrs	r3, r1, #21
 8002b70:	4699      	mov	r9, r3
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	9d00      	ldr	r5, [sp, #0]
 8002b76:	0fd9      	lsrs	r1, r3, #31
 8002b78:	4663      	mov	r3, ip
 8002b7a:	0f6a      	lsrs	r2, r5, #29
 8002b7c:	0a5b      	lsrs	r3, r3, #9
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	00ea      	lsls	r2, r5, #3
 8002b82:	4694      	mov	ip, r2
 8002b84:	4693      	mov	fp, r2
 8002b86:	4ac1      	ldr	r2, [pc, #772]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002b88:	9003      	str	r0, [sp, #12]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	4591      	cmp	r9, r2
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x5a>
 8002b90:	e0cd      	b.n	8002d2e <__aeabi_dsub+0x1f6>
 8002b92:	2501      	movs	r5, #1
 8002b94:	4069      	eors	r1, r5
 8002b96:	464d      	mov	r5, r9
 8002b98:	1b7d      	subs	r5, r7, r5
 8002b9a:	46aa      	mov	sl, r5
 8002b9c:	428e      	cmp	r6, r1
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x6a>
 8002ba0:	e080      	b.n	8002ca4 <__aeabi_dsub+0x16c>
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	dc00      	bgt.n	8002ba8 <__aeabi_dsub+0x70>
 8002ba6:	e335      	b.n	8003214 <__aeabi_dsub+0x6dc>
 8002ba8:	4649      	mov	r1, r9
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x78>
 8002bae:	e0df      	b.n	8002d70 <__aeabi_dsub+0x238>
 8002bb0:	4297      	cmp	r7, r2
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x7e>
 8002bb4:	e194      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	2501      	movs	r5, #1
 8002bba:	2a38      	cmp	r2, #56	@ 0x38
 8002bbc:	dc19      	bgt.n	8002bf2 <__aeabi_dsub+0xba>
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	9b02      	ldr	r3, [sp, #8]
 8002bc2:	0412      	lsls	r2, r2, #16
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	4652      	mov	r2, sl
 8002bca:	2a1f      	cmp	r2, #31
 8002bcc:	dd00      	ble.n	8002bd0 <__aeabi_dsub+0x98>
 8002bce:	e1e3      	b.n	8002f98 <__aeabi_dsub+0x460>
 8002bd0:	4653      	mov	r3, sl
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	4661      	mov	r1, ip
 8002bd6:	9d02      	ldr	r5, [sp, #8]
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	4095      	lsls	r5, r2
 8002bdc:	40d9      	lsrs	r1, r3
 8002bde:	430d      	orrs	r5, r1
 8002be0:	4661      	mov	r1, ip
 8002be2:	4091      	lsls	r1, r2
 8002be4:	000a      	movs	r2, r1
 8002be6:	1e51      	subs	r1, r2, #1
 8002be8:	418a      	sbcs	r2, r1
 8002bea:	4315      	orrs	r5, r2
 8002bec:	9a02      	ldr	r2, [sp, #8]
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	1aa4      	subs	r4, r4, r2
 8002bf2:	1b45      	subs	r5, r0, r5
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	4180      	sbcs	r0, r0
 8002bf8:	4240      	negs	r0, r0
 8002bfa:	1a24      	subs	r4, r4, r0
 8002bfc:	0223      	lsls	r3, r4, #8
 8002bfe:	d400      	bmi.n	8002c02 <__aeabi_dsub+0xca>
 8002c00:	e13d      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002c02:	0264      	lsls	r4, r4, #9
 8002c04:	0a64      	lsrs	r4, r4, #9
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0xd4>
 8002c0a:	e147      	b.n	8002e9c <__aeabi_dsub+0x364>
 8002c0c:	0020      	movs	r0, r4
 8002c0e:	f000 fcab 	bl	8003568 <__clzsi2>
 8002c12:	0003      	movs	r3, r0
 8002c14:	3b08      	subs	r3, #8
 8002c16:	2120      	movs	r1, #32
 8002c18:	0028      	movs	r0, r5
 8002c1a:	1aca      	subs	r2, r1, r3
 8002c1c:	40d0      	lsrs	r0, r2
 8002c1e:	409c      	lsls	r4, r3
 8002c20:	0002      	movs	r2, r0
 8002c22:	409d      	lsls	r5, r3
 8002c24:	4322      	orrs	r2, r4
 8002c26:	429f      	cmp	r7, r3
 8002c28:	dd00      	ble.n	8002c2c <__aeabi_dsub+0xf4>
 8002c2a:	e177      	b.n	8002f1c <__aeabi_dsub+0x3e4>
 8002c2c:	1bd8      	subs	r0, r3, r7
 8002c2e:	3001      	adds	r0, #1
 8002c30:	1a09      	subs	r1, r1, r0
 8002c32:	002c      	movs	r4, r5
 8002c34:	408d      	lsls	r5, r1
 8002c36:	40c4      	lsrs	r4, r0
 8002c38:	1e6b      	subs	r3, r5, #1
 8002c3a:	419d      	sbcs	r5, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	40c2      	lsrs	r2, r0
 8002c40:	408b      	lsls	r3, r1
 8002c42:	4325      	orrs	r5, r4
 8002c44:	2700      	movs	r7, #0
 8002c46:	0014      	movs	r4, r2
 8002c48:	431d      	orrs	r5, r3
 8002c4a:	076b      	lsls	r3, r5, #29
 8002c4c:	d009      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c4e:	230f      	movs	r3, #15
 8002c50:	402b      	ands	r3, r5
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d005      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c56:	1d2b      	adds	r3, r5, #4
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	41ad      	sbcs	r5, r5
 8002c5c:	426d      	negs	r5, r5
 8002c5e:	1964      	adds	r4, r4, r5
 8002c60:	001d      	movs	r5, r3
 8002c62:	0223      	lsls	r3, r4, #8
 8002c64:	d400      	bmi.n	8002c68 <__aeabi_dsub+0x130>
 8002c66:	e140      	b.n	8002eea <__aeabi_dsub+0x3b2>
 8002c68:	4a88      	ldr	r2, [pc, #544]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002c6a:	3701      	adds	r7, #1
 8002c6c:	4297      	cmp	r7, r2
 8002c6e:	d100      	bne.n	8002c72 <__aeabi_dsub+0x13a>
 8002c70:	e101      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002c72:	2601      	movs	r6, #1
 8002c74:	4643      	mov	r3, r8
 8002c76:	4986      	ldr	r1, [pc, #536]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002c78:	08ed      	lsrs	r5, r5, #3
 8002c7a:	4021      	ands	r1, r4
 8002c7c:	074a      	lsls	r2, r1, #29
 8002c7e:	432a      	orrs	r2, r5
 8002c80:	057c      	lsls	r4, r7, #21
 8002c82:	024d      	lsls	r5, r1, #9
 8002c84:	0b2d      	lsrs	r5, r5, #12
 8002c86:	0d64      	lsrs	r4, r4, #21
 8002c88:	401e      	ands	r6, r3
 8002c8a:	0524      	lsls	r4, r4, #20
 8002c8c:	432c      	orrs	r4, r5
 8002c8e:	07f6      	lsls	r6, r6, #31
 8002c90:	4334      	orrs	r4, r6
 8002c92:	0010      	movs	r0, r2
 8002c94:	0021      	movs	r1, r4
 8002c96:	b005      	add	sp, #20
 8002c98:	bcf0      	pop	{r4, r5, r6, r7}
 8002c9a:	46bb      	mov	fp, r7
 8002c9c:	46b2      	mov	sl, r6
 8002c9e:	46a9      	mov	r9, r5
 8002ca0:	46a0      	mov	r8, r4
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	dc00      	bgt.n	8002caa <__aeabi_dsub+0x172>
 8002ca8:	e2d0      	b.n	800324c <__aeabi_dsub+0x714>
 8002caa:	4649      	mov	r1, r9
 8002cac:	2900      	cmp	r1, #0
 8002cae:	d000      	beq.n	8002cb2 <__aeabi_dsub+0x17a>
 8002cb0:	e0d4      	b.n	8002e5c <__aeabi_dsub+0x324>
 8002cb2:	4661      	mov	r1, ip
 8002cb4:	9b02      	ldr	r3, [sp, #8]
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x184>
 8002cba:	e12b      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002cbc:	1e69      	subs	r1, r5, #1
 8002cbe:	2d01      	cmp	r5, #1
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x18c>
 8002cc2:	e1d9      	b.n	8003078 <__aeabi_dsub+0x540>
 8002cc4:	4295      	cmp	r5, r2
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x192>
 8002cc8:	e10a      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002cca:	2501      	movs	r5, #1
 8002ccc:	2938      	cmp	r1, #56	@ 0x38
 8002cce:	dc17      	bgt.n	8002d00 <__aeabi_dsub+0x1c8>
 8002cd0:	468a      	mov	sl, r1
 8002cd2:	4653      	mov	r3, sl
 8002cd4:	2b1f      	cmp	r3, #31
 8002cd6:	dd00      	ble.n	8002cda <__aeabi_dsub+0x1a2>
 8002cd8:	e1e7      	b.n	80030aa <__aeabi_dsub+0x572>
 8002cda:	2220      	movs	r2, #32
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	4661      	mov	r1, ip
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	001d      	movs	r5, r3
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	4663      	mov	r3, ip
 8002cec:	4093      	lsls	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	430d      	orrs	r5, r1
 8002cf2:	1e51      	subs	r1, r2, #1
 8002cf4:	418a      	sbcs	r2, r1
 8002cf6:	4653      	mov	r3, sl
 8002cf8:	4315      	orrs	r5, r2
 8002cfa:	9a02      	ldr	r2, [sp, #8]
 8002cfc:	40da      	lsrs	r2, r3
 8002cfe:	18a4      	adds	r4, r4, r2
 8002d00:	182d      	adds	r5, r5, r0
 8002d02:	4285      	cmp	r5, r0
 8002d04:	4180      	sbcs	r0, r0
 8002d06:	4240      	negs	r0, r0
 8002d08:	1824      	adds	r4, r4, r0
 8002d0a:	0223      	lsls	r3, r4, #8
 8002d0c:	d400      	bmi.n	8002d10 <__aeabi_dsub+0x1d8>
 8002d0e:	e0b6      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d12:	3701      	adds	r7, #1
 8002d14:	429f      	cmp	r7, r3
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x1e2>
 8002d18:	e0ad      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002d1e:	086a      	lsrs	r2, r5, #1
 8002d20:	401c      	ands	r4, r3
 8002d22:	4029      	ands	r1, r5
 8002d24:	430a      	orrs	r2, r1
 8002d26:	07e5      	lsls	r5, r4, #31
 8002d28:	4315      	orrs	r5, r2
 8002d2a:	0864      	lsrs	r4, r4, #1
 8002d2c:	e78d      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002d2e:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <__aeabi_dsub+0x35c>)
 8002d30:	9b02      	ldr	r3, [sp, #8]
 8002d32:	4692      	mov	sl, r2
 8002d34:	4662      	mov	r2, ip
 8002d36:	44ba      	add	sl, r7
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	d02c      	beq.n	8002d96 <__aeabi_dsub+0x25e>
 8002d3c:	428e      	cmp	r6, r1
 8002d3e:	d02e      	beq.n	8002d9e <__aeabi_dsub+0x266>
 8002d40:	4652      	mov	r2, sl
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d060      	beq.n	8002e08 <__aeabi_dsub+0x2d0>
 8002d46:	2f00      	cmp	r7, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x214>
 8002d4a:	e0db      	b.n	8002f04 <__aeabi_dsub+0x3cc>
 8002d4c:	4663      	mov	r3, ip
 8002d4e:	000e      	movs	r6, r1
 8002d50:	9c02      	ldr	r4, [sp, #8]
 8002d52:	08d8      	lsrs	r0, r3, #3
 8002d54:	0762      	lsls	r2, r4, #29
 8002d56:	4302      	orrs	r2, r0
 8002d58:	08e4      	lsrs	r4, r4, #3
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x22a>
 8002d60:	e254      	b.n	800320c <__aeabi_dsub+0x6d4>
 8002d62:	2580      	movs	r5, #128	@ 0x80
 8002d64:	032d      	lsls	r5, r5, #12
 8002d66:	4325      	orrs	r5, r4
 8002d68:	032d      	lsls	r5, r5, #12
 8002d6a:	4c48      	ldr	r4, [pc, #288]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d6c:	0b2d      	lsrs	r5, r5, #12
 8002d6e:	e78c      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002d70:	4661      	mov	r1, ip
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4319      	orrs	r1, r3
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x242>
 8002d78:	e0cc      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	3901      	subs	r1, #1
 8002d7e:	2d01      	cmp	r5, #1
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x24c>
 8002d82:	e188      	b.n	8003096 <__aeabi_dsub+0x55e>
 8002d84:	4295      	cmp	r5, r2
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x252>
 8002d88:	e0aa      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002d8a:	2501      	movs	r5, #1
 8002d8c:	2938      	cmp	r1, #56	@ 0x38
 8002d8e:	dd00      	ble.n	8002d92 <__aeabi_dsub+0x25a>
 8002d90:	e72f      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002d92:	468a      	mov	sl, r1
 8002d94:	e718      	b.n	8002bc8 <__aeabi_dsub+0x90>
 8002d96:	2201      	movs	r2, #1
 8002d98:	4051      	eors	r1, r2
 8002d9a:	428e      	cmp	r6, r1
 8002d9c:	d1d0      	bne.n	8002d40 <__aeabi_dsub+0x208>
 8002d9e:	4653      	mov	r3, sl
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x26e>
 8002da4:	e0be      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x274>
 8002daa:	e138      	b.n	800301e <__aeabi_dsub+0x4e6>
 8002dac:	46ca      	mov	sl, r9
 8002dae:	0022      	movs	r2, r4
 8002db0:	4302      	orrs	r2, r0
 8002db2:	d100      	bne.n	8002db6 <__aeabi_dsub+0x27e>
 8002db4:	e1e2      	b.n	800317c <__aeabi_dsub+0x644>
 8002db6:	4653      	mov	r3, sl
 8002db8:	1e59      	subs	r1, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x288>
 8002dbe:	e20d      	b.n	80031dc <__aeabi_dsub+0x6a4>
 8002dc0:	4a32      	ldr	r2, [pc, #200]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002dc2:	4592      	cmp	sl, r2
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x290>
 8002dc6:	e1d2      	b.n	800316e <__aeabi_dsub+0x636>
 8002dc8:	2701      	movs	r7, #1
 8002dca:	2938      	cmp	r1, #56	@ 0x38
 8002dcc:	dc13      	bgt.n	8002df6 <__aeabi_dsub+0x2be>
 8002dce:	291f      	cmp	r1, #31
 8002dd0:	dd00      	ble.n	8002dd4 <__aeabi_dsub+0x29c>
 8002dd2:	e1ee      	b.n	80031b2 <__aeabi_dsub+0x67a>
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	1a52      	subs	r2, r2, r1
 8002dda:	0025      	movs	r5, r4
 8002ddc:	0007      	movs	r7, r0
 8002dde:	469a      	mov	sl, r3
 8002de0:	40cc      	lsrs	r4, r1
 8002de2:	4090      	lsls	r0, r2
 8002de4:	4095      	lsls	r5, r2
 8002de6:	40cf      	lsrs	r7, r1
 8002de8:	44a2      	add	sl, r4
 8002dea:	1e42      	subs	r2, r0, #1
 8002dec:	4190      	sbcs	r0, r2
 8002dee:	4653      	mov	r3, sl
 8002df0:	432f      	orrs	r7, r5
 8002df2:	4307      	orrs	r7, r0
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	003d      	movs	r5, r7
 8002df8:	4465      	add	r5, ip
 8002dfa:	4565      	cmp	r5, ip
 8002dfc:	4192      	sbcs	r2, r2
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	4252      	negs	r2, r2
 8002e02:	464f      	mov	r7, r9
 8002e04:	18d4      	adds	r4, r2, r3
 8002e06:	e780      	b.n	8002d0a <__aeabi_dsub+0x1d2>
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <__aeabi_dsub+0x360>)
 8002e0a:	1c7d      	adds	r5, r7, #1
 8002e0c:	4215      	tst	r5, r2
 8002e0e:	d000      	beq.n	8002e12 <__aeabi_dsub+0x2da>
 8002e10:	e0aa      	b.n	8002f68 <__aeabi_dsub+0x430>
 8002e12:	4662      	mov	r2, ip
 8002e14:	0025      	movs	r5, r4
 8002e16:	9b02      	ldr	r3, [sp, #8]
 8002e18:	4305      	orrs	r5, r0
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	2f00      	cmp	r7, #0
 8002e1e:	d000      	beq.n	8002e22 <__aeabi_dsub+0x2ea>
 8002e20:	e0f5      	b.n	800300e <__aeabi_dsub+0x4d6>
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d100      	bne.n	8002e28 <__aeabi_dsub+0x2f0>
 8002e26:	e16b      	b.n	8003100 <__aeabi_dsub+0x5c8>
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x2f6>
 8002e2c:	e152      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002e2e:	4663      	mov	r3, ip
 8002e30:	1ac5      	subs	r5, r0, r3
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	1ae2      	subs	r2, r4, r3
 8002e36:	42a8      	cmp	r0, r5
 8002e38:	419b      	sbcs	r3, r3
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	d400      	bmi.n	8002e44 <__aeabi_dsub+0x30c>
 8002e42:	e1d5      	b.n	80031f0 <__aeabi_dsub+0x6b8>
 8002e44:	4663      	mov	r3, ip
 8002e46:	1a1d      	subs	r5, r3, r0
 8002e48:	45ac      	cmp	ip, r5
 8002e4a:	4192      	sbcs	r2, r2
 8002e4c:	2601      	movs	r6, #1
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	4252      	negs	r2, r2
 8002e52:	1b1c      	subs	r4, r3, r4
 8002e54:	4688      	mov	r8, r1
 8002e56:	1aa4      	subs	r4, r4, r2
 8002e58:	400e      	ands	r6, r1
 8002e5a:	e6f6      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002e5c:	4297      	cmp	r7, r2
 8002e5e:	d03f      	beq.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002e60:	4652      	mov	r2, sl
 8002e62:	2501      	movs	r5, #1
 8002e64:	2a38      	cmp	r2, #56	@ 0x38
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0x332>
 8002e68:	e74a      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	9b02      	ldr	r3, [sp, #8]
 8002e6e:	0412      	lsls	r2, r2, #16
 8002e70:	4313      	orrs	r3, r2
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	e72d      	b.n	8002cd2 <__aeabi_dsub+0x19a>
 8002e76:	003c      	movs	r4, r7
 8002e78:	2500      	movs	r5, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	e705      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	402b      	ands	r3, r5
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d000      	beq.n	8002e88 <__aeabi_dsub+0x350>
 8002e86:	e6e2      	b.n	8002c4e <__aeabi_dsub+0x116>
 8002e88:	e06b      	b.n	8002f62 <__aeabi_dsub+0x42a>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	000007ff 	.word	0x000007ff
 8002e90:	ff7fffff 	.word	0xff7fffff
 8002e94:	fffff801 	.word	0xfffff801
 8002e98:	000007fe 	.word	0x000007fe
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f000 fb63 	bl	8003568 <__clzsi2>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	2b1f      	cmp	r3, #31
 8002ea8:	dc00      	bgt.n	8002eac <__aeabi_dsub+0x374>
 8002eaa:	e6b4      	b.n	8002c16 <__aeabi_dsub+0xde>
 8002eac:	002a      	movs	r2, r5
 8002eae:	3808      	subs	r0, #8
 8002eb0:	4082      	lsls	r2, r0
 8002eb2:	429f      	cmp	r7, r3
 8002eb4:	dd00      	ble.n	8002eb8 <__aeabi_dsub+0x380>
 8002eb6:	e0b9      	b.n	800302c <__aeabi_dsub+0x4f4>
 8002eb8:	1bdb      	subs	r3, r3, r7
 8002eba:	1c58      	adds	r0, r3, #1
 8002ebc:	281f      	cmp	r0, #31
 8002ebe:	dc00      	bgt.n	8002ec2 <__aeabi_dsub+0x38a>
 8002ec0:	e1a0      	b.n	8003204 <__aeabi_dsub+0x6cc>
 8002ec2:	0015      	movs	r5, r2
 8002ec4:	3b1f      	subs	r3, #31
 8002ec6:	40dd      	lsrs	r5, r3
 8002ec8:	2820      	cmp	r0, #32
 8002eca:	d005      	beq.n	8002ed8 <__aeabi_dsub+0x3a0>
 8002ecc:	2340      	movs	r3, #64	@ 0x40
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	1e53      	subs	r3, r2, #1
 8002ed4:	419a      	sbcs	r2, r3
 8002ed6:	4315      	orrs	r5, r2
 8002ed8:	2307      	movs	r3, #7
 8002eda:	2700      	movs	r7, #0
 8002edc:	402b      	ands	r3, r5
 8002ede:	e7d0      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8002ee0:	08c0      	lsrs	r0, r0, #3
 8002ee2:	0762      	lsls	r2, r4, #29
 8002ee4:	4302      	orrs	r2, r0
 8002ee6:	08e4      	lsrs	r4, r4, #3
 8002ee8:	e737      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002eea:	08ea      	lsrs	r2, r5, #3
 8002eec:	0763      	lsls	r3, r4, #29
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	4bd3      	ldr	r3, [pc, #844]	@ (8003240 <__aeabi_dsub+0x708>)
 8002ef2:	08e4      	lsrs	r4, r4, #3
 8002ef4:	429f      	cmp	r7, r3
 8002ef6:	d100      	bne.n	8002efa <__aeabi_dsub+0x3c2>
 8002ef8:	e72f      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002efa:	0324      	lsls	r4, r4, #12
 8002efc:	0b25      	lsrs	r5, r4, #12
 8002efe:	057c      	lsls	r4, r7, #21
 8002f00:	0d64      	lsrs	r4, r4, #21
 8002f02:	e6c2      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f04:	46ca      	mov	sl, r9
 8002f06:	0022      	movs	r2, r4
 8002f08:	4302      	orrs	r2, r0
 8002f0a:	d158      	bne.n	8002fbe <__aeabi_dsub+0x486>
 8002f0c:	4663      	mov	r3, ip
 8002f0e:	000e      	movs	r6, r1
 8002f10:	9c02      	ldr	r4, [sp, #8]
 8002f12:	9303      	str	r3, [sp, #12]
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	4657      	mov	r7, sl
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	e7e7      	b.n	8002eec <__aeabi_dsub+0x3b4>
 8002f1c:	4cc9      	ldr	r4, [pc, #804]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f1e:	1aff      	subs	r7, r7, r3
 8002f20:	4014      	ands	r4, r2
 8002f22:	e692      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002f24:	4dc8      	ldr	r5, [pc, #800]	@ (8003248 <__aeabi_dsub+0x710>)
 8002f26:	1c7a      	adds	r2, r7, #1
 8002f28:	422a      	tst	r2, r5
 8002f2a:	d000      	beq.n	8002f2e <__aeabi_dsub+0x3f6>
 8002f2c:	e084      	b.n	8003038 <__aeabi_dsub+0x500>
 8002f2e:	0022      	movs	r2, r4
 8002f30:	4302      	orrs	r2, r0
 8002f32:	2f00      	cmp	r7, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x400>
 8002f36:	e0ef      	b.n	8003118 <__aeabi_dsub+0x5e0>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x406>
 8002f3c:	e0e5      	b.n	800310a <__aeabi_dsub+0x5d2>
 8002f3e:	4662      	mov	r2, ip
 8002f40:	9902      	ldr	r1, [sp, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	d100      	bne.n	8002f48 <__aeabi_dsub+0x410>
 8002f46:	e0c5      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002f48:	4663      	mov	r3, ip
 8002f4a:	18c5      	adds	r5, r0, r3
 8002f4c:	468c      	mov	ip, r1
 8002f4e:	4285      	cmp	r5, r0
 8002f50:	4180      	sbcs	r0, r0
 8002f52:	4464      	add	r4, ip
 8002f54:	4240      	negs	r0, r0
 8002f56:	1824      	adds	r4, r4, r0
 8002f58:	0223      	lsls	r3, r4, #8
 8002f5a:	d502      	bpl.n	8002f62 <__aeabi_dsub+0x42a>
 8002f5c:	4bb9      	ldr	r3, [pc, #740]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f5e:	3701      	adds	r7, #1
 8002f60:	401c      	ands	r4, r3
 8002f62:	46ba      	mov	sl, r7
 8002f64:	9503      	str	r5, [sp, #12]
 8002f66:	e7d5      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002f68:	4662      	mov	r2, ip
 8002f6a:	1a85      	subs	r5, r0, r2
 8002f6c:	42a8      	cmp	r0, r5
 8002f6e:	4192      	sbcs	r2, r2
 8002f70:	4252      	negs	r2, r2
 8002f72:	4691      	mov	r9, r2
 8002f74:	9b02      	ldr	r3, [sp, #8]
 8002f76:	1ae3      	subs	r3, r4, r3
 8002f78:	001a      	movs	r2, r3
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	0013      	movs	r3, r2
 8002f80:	4691      	mov	r9, r2
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	d46c      	bmi.n	8003060 <__aeabi_dsub+0x528>
 8002f86:	464a      	mov	r2, r9
 8002f88:	464c      	mov	r4, r9
 8002f8a:	432a      	orrs	r2, r5
 8002f8c:	d000      	beq.n	8002f90 <__aeabi_dsub+0x458>
 8002f8e:	e63a      	b.n	8002c06 <__aeabi_dsub+0xce>
 8002f90:	2600      	movs	r6, #0
 8002f92:	2400      	movs	r4, #0
 8002f94:	2500      	movs	r5, #0
 8002f96:	e678      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f98:	9902      	ldr	r1, [sp, #8]
 8002f9a:	4653      	mov	r3, sl
 8002f9c:	000d      	movs	r5, r1
 8002f9e:	3a20      	subs	r2, #32
 8002fa0:	40d5      	lsrs	r5, r2
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d006      	beq.n	8002fb4 <__aeabi_dsub+0x47c>
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	000b      	movs	r3, r1
 8002fac:	4093      	lsls	r3, r2
 8002fae:	4662      	mov	r2, ip
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	4693      	mov	fp, r2
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	4193      	sbcs	r3, r2
 8002fba:	431d      	orrs	r5, r3
 8002fbc:	e619      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002fbe:	4653      	mov	r3, sl
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d100      	bne.n	8002fc8 <__aeabi_dsub+0x490>
 8002fc6:	e0c6      	b.n	8003156 <__aeabi_dsub+0x61e>
 8002fc8:	4e9d      	ldr	r6, [pc, #628]	@ (8003240 <__aeabi_dsub+0x708>)
 8002fca:	45b2      	cmp	sl, r6
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x498>
 8002fce:	e6bd      	b.n	8002d4c <__aeabi_dsub+0x214>
 8002fd0:	4688      	mov	r8, r1
 8002fd2:	000e      	movs	r6, r1
 8002fd4:	2501      	movs	r5, #1
 8002fd6:	2a38      	cmp	r2, #56	@ 0x38
 8002fd8:	dc10      	bgt.n	8002ffc <__aeabi_dsub+0x4c4>
 8002fda:	2a1f      	cmp	r2, #31
 8002fdc:	dc7f      	bgt.n	80030de <__aeabi_dsub+0x5a6>
 8002fde:	2120      	movs	r1, #32
 8002fe0:	0025      	movs	r5, r4
 8002fe2:	1a89      	subs	r1, r1, r2
 8002fe4:	0007      	movs	r7, r0
 8002fe6:	4088      	lsls	r0, r1
 8002fe8:	408d      	lsls	r5, r1
 8002fea:	40d7      	lsrs	r7, r2
 8002fec:	40d4      	lsrs	r4, r2
 8002fee:	1e41      	subs	r1, r0, #1
 8002ff0:	4188      	sbcs	r0, r1
 8002ff2:	9b02      	ldr	r3, [sp, #8]
 8002ff4:	433d      	orrs	r5, r7
 8002ff6:	1b1b      	subs	r3, r3, r4
 8002ff8:	4305      	orrs	r5, r0
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1b55      	subs	r5, r2, r5
 8003000:	45ac      	cmp	ip, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	9b02      	ldr	r3, [sp, #8]
 8003006:	4252      	negs	r2, r2
 8003008:	464f      	mov	r7, r9
 800300a:	1a9c      	subs	r4, r3, r2
 800300c:	e5f6      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800300e:	2d00      	cmp	r5, #0
 8003010:	d000      	beq.n	8003014 <__aeabi_dsub+0x4dc>
 8003012:	e0b7      	b.n	8003184 <__aeabi_dsub+0x64c>
 8003014:	2a00      	cmp	r2, #0
 8003016:	d100      	bne.n	800301a <__aeabi_dsub+0x4e2>
 8003018:	e0f0      	b.n	80031fc <__aeabi_dsub+0x6c4>
 800301a:	2601      	movs	r6, #1
 800301c:	400e      	ands	r6, r1
 800301e:	4663      	mov	r3, ip
 8003020:	9802      	ldr	r0, [sp, #8]
 8003022:	08d9      	lsrs	r1, r3, #3
 8003024:	0742      	lsls	r2, r0, #29
 8003026:	430a      	orrs	r2, r1
 8003028:	08c4      	lsrs	r4, r0, #3
 800302a:	e696      	b.n	8002d5a <__aeabi_dsub+0x222>
 800302c:	4c85      	ldr	r4, [pc, #532]	@ (8003244 <__aeabi_dsub+0x70c>)
 800302e:	1aff      	subs	r7, r7, r3
 8003030:	4014      	ands	r4, r2
 8003032:	0762      	lsls	r2, r4, #29
 8003034:	08e4      	lsrs	r4, r4, #3
 8003036:	e760      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003038:	4981      	ldr	r1, [pc, #516]	@ (8003240 <__aeabi_dsub+0x708>)
 800303a:	428a      	cmp	r2, r1
 800303c:	d100      	bne.n	8003040 <__aeabi_dsub+0x508>
 800303e:	e0c9      	b.n	80031d4 <__aeabi_dsub+0x69c>
 8003040:	4663      	mov	r3, ip
 8003042:	18c1      	adds	r1, r0, r3
 8003044:	4281      	cmp	r1, r0
 8003046:	4180      	sbcs	r0, r0
 8003048:	9b02      	ldr	r3, [sp, #8]
 800304a:	4240      	negs	r0, r0
 800304c:	18e3      	adds	r3, r4, r3
 800304e:	181b      	adds	r3, r3, r0
 8003050:	07dd      	lsls	r5, r3, #31
 8003052:	085c      	lsrs	r4, r3, #1
 8003054:	2307      	movs	r3, #7
 8003056:	0849      	lsrs	r1, r1, #1
 8003058:	430d      	orrs	r5, r1
 800305a:	0017      	movs	r7, r2
 800305c:	402b      	ands	r3, r5
 800305e:	e710      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8003060:	4663      	mov	r3, ip
 8003062:	1a1d      	subs	r5, r3, r0
 8003064:	45ac      	cmp	ip, r5
 8003066:	4192      	sbcs	r2, r2
 8003068:	2601      	movs	r6, #1
 800306a:	9b02      	ldr	r3, [sp, #8]
 800306c:	4252      	negs	r2, r2
 800306e:	1b1c      	subs	r4, r3, r4
 8003070:	4688      	mov	r8, r1
 8003072:	1aa4      	subs	r4, r4, r2
 8003074:	400e      	ands	r6, r1
 8003076:	e5c6      	b.n	8002c06 <__aeabi_dsub+0xce>
 8003078:	4663      	mov	r3, ip
 800307a:	18c5      	adds	r5, r0, r3
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	4285      	cmp	r5, r0
 8003080:	4180      	sbcs	r0, r0
 8003082:	469c      	mov	ip, r3
 8003084:	4240      	negs	r0, r0
 8003086:	4464      	add	r4, ip
 8003088:	1824      	adds	r4, r4, r0
 800308a:	2701      	movs	r7, #1
 800308c:	0223      	lsls	r3, r4, #8
 800308e:	d400      	bmi.n	8003092 <__aeabi_dsub+0x55a>
 8003090:	e6f5      	b.n	8002e7e <__aeabi_dsub+0x346>
 8003092:	2702      	movs	r7, #2
 8003094:	e641      	b.n	8002d1a <__aeabi_dsub+0x1e2>
 8003096:	4663      	mov	r3, ip
 8003098:	1ac5      	subs	r5, r0, r3
 800309a:	42a8      	cmp	r0, r5
 800309c:	4180      	sbcs	r0, r0
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	4240      	negs	r0, r0
 80030a2:	1ae4      	subs	r4, r4, r3
 80030a4:	2701      	movs	r7, #1
 80030a6:	1a24      	subs	r4, r4, r0
 80030a8:	e5a8      	b.n	8002bfc <__aeabi_dsub+0xc4>
 80030aa:	9d02      	ldr	r5, [sp, #8]
 80030ac:	4652      	mov	r2, sl
 80030ae:	002b      	movs	r3, r5
 80030b0:	3a20      	subs	r2, #32
 80030b2:	40d3      	lsrs	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	4653      	mov	r3, sl
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d006      	beq.n	80030ca <__aeabi_dsub+0x592>
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	002b      	movs	r3, r5
 80030c2:	4093      	lsls	r3, r2
 80030c4:	4662      	mov	r2, ip
 80030c6:	431a      	orrs	r2, r3
 80030c8:	4693      	mov	fp, r2
 80030ca:	465d      	mov	r5, fp
 80030cc:	1e6b      	subs	r3, r5, #1
 80030ce:	419d      	sbcs	r5, r3
 80030d0:	430d      	orrs	r5, r1
 80030d2:	e615      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 80030d4:	0762      	lsls	r2, r4, #29
 80030d6:	08c0      	lsrs	r0, r0, #3
 80030d8:	4302      	orrs	r2, r0
 80030da:	08e4      	lsrs	r4, r4, #3
 80030dc:	e70d      	b.n	8002efa <__aeabi_dsub+0x3c2>
 80030de:	0011      	movs	r1, r2
 80030e0:	0027      	movs	r7, r4
 80030e2:	3920      	subs	r1, #32
 80030e4:	40cf      	lsrs	r7, r1
 80030e6:	2a20      	cmp	r2, #32
 80030e8:	d005      	beq.n	80030f6 <__aeabi_dsub+0x5be>
 80030ea:	2140      	movs	r1, #64	@ 0x40
 80030ec:	1a8a      	subs	r2, r1, r2
 80030ee:	4094      	lsls	r4, r2
 80030f0:	0025      	movs	r5, r4
 80030f2:	4305      	orrs	r5, r0
 80030f4:	9503      	str	r5, [sp, #12]
 80030f6:	9d03      	ldr	r5, [sp, #12]
 80030f8:	1e6a      	subs	r2, r5, #1
 80030fa:	4195      	sbcs	r5, r2
 80030fc:	433d      	orrs	r5, r7
 80030fe:	e77d      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 8003100:	2a00      	cmp	r2, #0
 8003102:	d100      	bne.n	8003106 <__aeabi_dsub+0x5ce>
 8003104:	e744      	b.n	8002f90 <__aeabi_dsub+0x458>
 8003106:	2601      	movs	r6, #1
 8003108:	400e      	ands	r6, r1
 800310a:	4663      	mov	r3, ip
 800310c:	08d9      	lsrs	r1, r3, #3
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	075a      	lsls	r2, r3, #29
 8003112:	430a      	orrs	r2, r1
 8003114:	08dc      	lsrs	r4, r3, #3
 8003116:	e6f0      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003118:	2a00      	cmp	r2, #0
 800311a:	d028      	beq.n	800316e <__aeabi_dsub+0x636>
 800311c:	4662      	mov	r2, ip
 800311e:	9f02      	ldr	r7, [sp, #8]
 8003120:	08c0      	lsrs	r0, r0, #3
 8003122:	433a      	orrs	r2, r7
 8003124:	d100      	bne.n	8003128 <__aeabi_dsub+0x5f0>
 8003126:	e6dc      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 8003128:	0762      	lsls	r2, r4, #29
 800312a:	4310      	orrs	r0, r2
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	08e4      	lsrs	r4, r4, #3
 8003130:	0312      	lsls	r2, r2, #12
 8003132:	4214      	tst	r4, r2
 8003134:	d009      	beq.n	800314a <__aeabi_dsub+0x612>
 8003136:	08fd      	lsrs	r5, r7, #3
 8003138:	4215      	tst	r5, r2
 800313a:	d106      	bne.n	800314a <__aeabi_dsub+0x612>
 800313c:	4663      	mov	r3, ip
 800313e:	2601      	movs	r6, #1
 8003140:	002c      	movs	r4, r5
 8003142:	08d8      	lsrs	r0, r3, #3
 8003144:	077b      	lsls	r3, r7, #29
 8003146:	4318      	orrs	r0, r3
 8003148:	400e      	ands	r6, r1
 800314a:	0f42      	lsrs	r2, r0, #29
 800314c:	00c0      	lsls	r0, r0, #3
 800314e:	08c0      	lsrs	r0, r0, #3
 8003150:	0752      	lsls	r2, r2, #29
 8003152:	4302      	orrs	r2, r0
 8003154:	e601      	b.n	8002d5a <__aeabi_dsub+0x222>
 8003156:	4663      	mov	r3, ip
 8003158:	1a1d      	subs	r5, r3, r0
 800315a:	45ac      	cmp	ip, r5
 800315c:	4192      	sbcs	r2, r2
 800315e:	9b02      	ldr	r3, [sp, #8]
 8003160:	4252      	negs	r2, r2
 8003162:	1b1c      	subs	r4, r3, r4
 8003164:	000e      	movs	r6, r1
 8003166:	4688      	mov	r8, r1
 8003168:	2701      	movs	r7, #1
 800316a:	1aa4      	subs	r4, r4, r2
 800316c:	e546      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800316e:	4663      	mov	r3, ip
 8003170:	08d9      	lsrs	r1, r3, #3
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	075a      	lsls	r2, r3, #29
 8003176:	430a      	orrs	r2, r1
 8003178:	08dc      	lsrs	r4, r3, #3
 800317a:	e5ee      	b.n	8002d5a <__aeabi_dsub+0x222>
 800317c:	4663      	mov	r3, ip
 800317e:	9c02      	ldr	r4, [sp, #8]
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	e6c7      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8003184:	08c0      	lsrs	r0, r0, #3
 8003186:	2a00      	cmp	r2, #0
 8003188:	d100      	bne.n	800318c <__aeabi_dsub+0x654>
 800318a:	e6aa      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 800318c:	0762      	lsls	r2, r4, #29
 800318e:	4310      	orrs	r0, r2
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	08e4      	lsrs	r4, r4, #3
 8003194:	0312      	lsls	r2, r2, #12
 8003196:	4214      	tst	r4, r2
 8003198:	d0d7      	beq.n	800314a <__aeabi_dsub+0x612>
 800319a:	9f02      	ldr	r7, [sp, #8]
 800319c:	08fd      	lsrs	r5, r7, #3
 800319e:	4215      	tst	r5, r2
 80031a0:	d1d3      	bne.n	800314a <__aeabi_dsub+0x612>
 80031a2:	4663      	mov	r3, ip
 80031a4:	2601      	movs	r6, #1
 80031a6:	08d8      	lsrs	r0, r3, #3
 80031a8:	077b      	lsls	r3, r7, #29
 80031aa:	002c      	movs	r4, r5
 80031ac:	4318      	orrs	r0, r3
 80031ae:	400e      	ands	r6, r1
 80031b0:	e7cb      	b.n	800314a <__aeabi_dsub+0x612>
 80031b2:	000a      	movs	r2, r1
 80031b4:	0027      	movs	r7, r4
 80031b6:	3a20      	subs	r2, #32
 80031b8:	40d7      	lsrs	r7, r2
 80031ba:	2920      	cmp	r1, #32
 80031bc:	d005      	beq.n	80031ca <__aeabi_dsub+0x692>
 80031be:	2240      	movs	r2, #64	@ 0x40
 80031c0:	1a52      	subs	r2, r2, r1
 80031c2:	4094      	lsls	r4, r2
 80031c4:	0025      	movs	r5, r4
 80031c6:	4305      	orrs	r5, r0
 80031c8:	9503      	str	r5, [sp, #12]
 80031ca:	9d03      	ldr	r5, [sp, #12]
 80031cc:	1e6a      	subs	r2, r5, #1
 80031ce:	4195      	sbcs	r5, r2
 80031d0:	432f      	orrs	r7, r5
 80031d2:	e610      	b.n	8002df6 <__aeabi_dsub+0x2be>
 80031d4:	0014      	movs	r4, r2
 80031d6:	2500      	movs	r5, #0
 80031d8:	2200      	movs	r2, #0
 80031da:	e556      	b.n	8002c8a <__aeabi_dsub+0x152>
 80031dc:	9b02      	ldr	r3, [sp, #8]
 80031de:	4460      	add	r0, ip
 80031e0:	4699      	mov	r9, r3
 80031e2:	4560      	cmp	r0, ip
 80031e4:	4192      	sbcs	r2, r2
 80031e6:	444c      	add	r4, r9
 80031e8:	4252      	negs	r2, r2
 80031ea:	0005      	movs	r5, r0
 80031ec:	18a4      	adds	r4, r4, r2
 80031ee:	e74c      	b.n	800308a <__aeabi_dsub+0x552>
 80031f0:	001a      	movs	r2, r3
 80031f2:	001c      	movs	r4, r3
 80031f4:	432a      	orrs	r2, r5
 80031f6:	d000      	beq.n	80031fa <__aeabi_dsub+0x6c2>
 80031f8:	e6b3      	b.n	8002f62 <__aeabi_dsub+0x42a>
 80031fa:	e6c9      	b.n	8002f90 <__aeabi_dsub+0x458>
 80031fc:	2480      	movs	r4, #128	@ 0x80
 80031fe:	2600      	movs	r6, #0
 8003200:	0324      	lsls	r4, r4, #12
 8003202:	e5ae      	b.n	8002d62 <__aeabi_dsub+0x22a>
 8003204:	2120      	movs	r1, #32
 8003206:	2500      	movs	r5, #0
 8003208:	1a09      	subs	r1, r1, r0
 800320a:	e517      	b.n	8002c3c <__aeabi_dsub+0x104>
 800320c:	2200      	movs	r2, #0
 800320e:	2500      	movs	r5, #0
 8003210:	4c0b      	ldr	r4, [pc, #44]	@ (8003240 <__aeabi_dsub+0x708>)
 8003212:	e53a      	b.n	8002c8a <__aeabi_dsub+0x152>
 8003214:	2d00      	cmp	r5, #0
 8003216:	d100      	bne.n	800321a <__aeabi_dsub+0x6e2>
 8003218:	e5f6      	b.n	8002e08 <__aeabi_dsub+0x2d0>
 800321a:	464b      	mov	r3, r9
 800321c:	1bda      	subs	r2, r3, r7
 800321e:	4692      	mov	sl, r2
 8003220:	2f00      	cmp	r7, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x6ee>
 8003224:	e66f      	b.n	8002f06 <__aeabi_dsub+0x3ce>
 8003226:	2a38      	cmp	r2, #56	@ 0x38
 8003228:	dc05      	bgt.n	8003236 <__aeabi_dsub+0x6fe>
 800322a:	2680      	movs	r6, #128	@ 0x80
 800322c:	0436      	lsls	r6, r6, #16
 800322e:	4334      	orrs	r4, r6
 8003230:	4688      	mov	r8, r1
 8003232:	000e      	movs	r6, r1
 8003234:	e6d1      	b.n	8002fda <__aeabi_dsub+0x4a2>
 8003236:	4688      	mov	r8, r1
 8003238:	000e      	movs	r6, r1
 800323a:	2501      	movs	r5, #1
 800323c:	e6de      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	000007ff 	.word	0x000007ff
 8003244:	ff7fffff 	.word	0xff7fffff
 8003248:	000007fe 	.word	0x000007fe
 800324c:	2d00      	cmp	r5, #0
 800324e:	d100      	bne.n	8003252 <__aeabi_dsub+0x71a>
 8003250:	e668      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8003252:	464b      	mov	r3, r9
 8003254:	1bd9      	subs	r1, r3, r7
 8003256:	2f00      	cmp	r7, #0
 8003258:	d101      	bne.n	800325e <__aeabi_dsub+0x726>
 800325a:	468a      	mov	sl, r1
 800325c:	e5a7      	b.n	8002dae <__aeabi_dsub+0x276>
 800325e:	2701      	movs	r7, #1
 8003260:	2938      	cmp	r1, #56	@ 0x38
 8003262:	dd00      	ble.n	8003266 <__aeabi_dsub+0x72e>
 8003264:	e5c7      	b.n	8002df6 <__aeabi_dsub+0x2be>
 8003266:	2280      	movs	r2, #128	@ 0x80
 8003268:	0412      	lsls	r2, r2, #16
 800326a:	4314      	orrs	r4, r2
 800326c:	e5af      	b.n	8002dce <__aeabi_dsub+0x296>
 800326e:	46c0      	nop			@ (mov r8, r8)

08003270 <__aeabi_dcmpun>:
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	46c6      	mov	lr, r8
 8003274:	031e      	lsls	r6, r3, #12
 8003276:	0b36      	lsrs	r6, r6, #12
 8003278:	46b0      	mov	r8, r6
 800327a:	4e0d      	ldr	r6, [pc, #52]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 800327c:	030c      	lsls	r4, r1, #12
 800327e:	004d      	lsls	r5, r1, #1
 8003280:	005f      	lsls	r7, r3, #1
 8003282:	b500      	push	{lr}
 8003284:	0b24      	lsrs	r4, r4, #12
 8003286:	0d6d      	lsrs	r5, r5, #21
 8003288:	0d7f      	lsrs	r7, r7, #21
 800328a:	42b5      	cmp	r5, r6
 800328c:	d00b      	beq.n	80032a6 <__aeabi_dcmpun+0x36>
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 8003290:	2000      	movs	r0, #0
 8003292:	428f      	cmp	r7, r1
 8003294:	d104      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 8003296:	4646      	mov	r6, r8
 8003298:	4316      	orrs	r6, r2
 800329a:	0030      	movs	r0, r6
 800329c:	1e43      	subs	r3, r0, #1
 800329e:	4198      	sbcs	r0, r3
 80032a0:	bc80      	pop	{r7}
 80032a2:	46b8      	mov	r8, r7
 80032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a6:	4304      	orrs	r4, r0
 80032a8:	2001      	movs	r0, #1
 80032aa:	2c00      	cmp	r4, #0
 80032ac:	d1f8      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 80032ae:	e7ee      	b.n	800328e <__aeabi_dcmpun+0x1e>
 80032b0:	000007ff 	.word	0x000007ff

080032b4 <__aeabi_d2iz>:
 80032b4:	000b      	movs	r3, r1
 80032b6:	0002      	movs	r2, r0
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d16      	ldr	r5, [pc, #88]	@ (8003314 <__aeabi_d2iz+0x60>)
 80032bc:	030c      	lsls	r4, r1, #12
 80032be:	b082      	sub	sp, #8
 80032c0:	0049      	lsls	r1, r1, #1
 80032c2:	2000      	movs	r0, #0
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	0b24      	lsrs	r4, r4, #12
 80032ca:	0d49      	lsrs	r1, r1, #21
 80032cc:	0fde      	lsrs	r6, r3, #31
 80032ce:	42a9      	cmp	r1, r5
 80032d0:	dd04      	ble.n	80032dc <__aeabi_d2iz+0x28>
 80032d2:	4811      	ldr	r0, [pc, #68]	@ (8003318 <__aeabi_d2iz+0x64>)
 80032d4:	4281      	cmp	r1, r0
 80032d6:	dd03      	ble.n	80032e0 <__aeabi_d2iz+0x2c>
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <__aeabi_d2iz+0x68>)
 80032da:	18f0      	adds	r0, r6, r3
 80032dc:	b002      	add	sp, #8
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	2080      	movs	r0, #128	@ 0x80
 80032e2:	0340      	lsls	r0, r0, #13
 80032e4:	4320      	orrs	r0, r4
 80032e6:	4c0e      	ldr	r4, [pc, #56]	@ (8003320 <__aeabi_d2iz+0x6c>)
 80032e8:	1a64      	subs	r4, r4, r1
 80032ea:	2c1f      	cmp	r4, #31
 80032ec:	dd08      	ble.n	8003300 <__aeabi_d2iz+0x4c>
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <__aeabi_d2iz+0x70>)
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	40d8      	lsrs	r0, r3
 80032f4:	0003      	movs	r3, r0
 80032f6:	4258      	negs	r0, r3
 80032f8:	2e00      	cmp	r6, #0
 80032fa:	d1ef      	bne.n	80032dc <__aeabi_d2iz+0x28>
 80032fc:	0018      	movs	r0, r3
 80032fe:	e7ed      	b.n	80032dc <__aeabi_d2iz+0x28>
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <__aeabi_d2iz+0x74>)
 8003302:	9a00      	ldr	r2, [sp, #0]
 8003304:	469c      	mov	ip, r3
 8003306:	0003      	movs	r3, r0
 8003308:	4461      	add	r1, ip
 800330a:	408b      	lsls	r3, r1
 800330c:	40e2      	lsrs	r2, r4
 800330e:	4313      	orrs	r3, r2
 8003310:	e7f1      	b.n	80032f6 <__aeabi_d2iz+0x42>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	000003fe 	.word	0x000003fe
 8003318:	0000041d 	.word	0x0000041d
 800331c:	7fffffff 	.word	0x7fffffff
 8003320:	00000433 	.word	0x00000433
 8003324:	00000413 	.word	0x00000413
 8003328:	fffffbed 	.word	0xfffffbed

0800332c <__aeabi_i2d>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2800      	cmp	r0, #0
 8003330:	d016      	beq.n	8003360 <__aeabi_i2d+0x34>
 8003332:	17c3      	asrs	r3, r0, #31
 8003334:	18c5      	adds	r5, r0, r3
 8003336:	405d      	eors	r5, r3
 8003338:	0fc4      	lsrs	r4, r0, #31
 800333a:	0028      	movs	r0, r5
 800333c:	f000 f914 	bl	8003568 <__clzsi2>
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <__aeabi_i2d+0x58>)
 8003342:	1a1b      	subs	r3, r3, r0
 8003344:	055b      	lsls	r3, r3, #21
 8003346:	0d5b      	lsrs	r3, r3, #21
 8003348:	280a      	cmp	r0, #10
 800334a:	dc14      	bgt.n	8003376 <__aeabi_i2d+0x4a>
 800334c:	0002      	movs	r2, r0
 800334e:	002e      	movs	r6, r5
 8003350:	3215      	adds	r2, #21
 8003352:	4096      	lsls	r6, r2
 8003354:	220b      	movs	r2, #11
 8003356:	1a12      	subs	r2, r2, r0
 8003358:	40d5      	lsrs	r5, r2
 800335a:	032d      	lsls	r5, r5, #12
 800335c:	0b2d      	lsrs	r5, r5, #12
 800335e:	e003      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003360:	2400      	movs	r4, #0
 8003362:	2300      	movs	r3, #0
 8003364:	2500      	movs	r5, #0
 8003366:	2600      	movs	r6, #0
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	432b      	orrs	r3, r5
 800336c:	07e4      	lsls	r4, r4, #31
 800336e:	4323      	orrs	r3, r4
 8003370:	0030      	movs	r0, r6
 8003372:	0019      	movs	r1, r3
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	380b      	subs	r0, #11
 8003378:	4085      	lsls	r5, r0
 800337a:	032d      	lsls	r5, r5, #12
 800337c:	2600      	movs	r6, #0
 800337e:	0b2d      	lsrs	r5, r5, #12
 8003380:	e7f2      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	0000041e 	.word	0x0000041e

08003388 <__aeabi_ui2d>:
 8003388:	b510      	push	{r4, lr}
 800338a:	1e04      	subs	r4, r0, #0
 800338c:	d010      	beq.n	80033b0 <__aeabi_ui2d+0x28>
 800338e:	f000 f8eb 	bl	8003568 <__clzsi2>
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <__aeabi_ui2d+0x44>)
 8003394:	1a1b      	subs	r3, r3, r0
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	0d5b      	lsrs	r3, r3, #21
 800339a:	280a      	cmp	r0, #10
 800339c:	dc0f      	bgt.n	80033be <__aeabi_ui2d+0x36>
 800339e:	220b      	movs	r2, #11
 80033a0:	0021      	movs	r1, r4
 80033a2:	1a12      	subs	r2, r2, r0
 80033a4:	40d1      	lsrs	r1, r2
 80033a6:	3015      	adds	r0, #21
 80033a8:	030a      	lsls	r2, r1, #12
 80033aa:	4084      	lsls	r4, r0
 80033ac:	0b12      	lsrs	r2, r2, #12
 80033ae:	e001      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2200      	movs	r2, #0
 80033b4:	051b      	lsls	r3, r3, #20
 80033b6:	4313      	orrs	r3, r2
 80033b8:	0020      	movs	r0, r4
 80033ba:	0019      	movs	r1, r3
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	0022      	movs	r2, r4
 80033c0:	380b      	subs	r0, #11
 80033c2:	4082      	lsls	r2, r0
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	2400      	movs	r4, #0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e7f3      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033cc:	0000041e 	.word	0x0000041e

080033d0 <__aeabi_f2d>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	0242      	lsls	r2, r0, #9
 80033d4:	0043      	lsls	r3, r0, #1
 80033d6:	0fc4      	lsrs	r4, r0, #31
 80033d8:	20fe      	movs	r0, #254	@ 0xfe
 80033da:	0e1b      	lsrs	r3, r3, #24
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	0a55      	lsrs	r5, r2, #9
 80033e0:	4208      	tst	r0, r1
 80033e2:	d00c      	beq.n	80033fe <__aeabi_f2d+0x2e>
 80033e4:	21e0      	movs	r1, #224	@ 0xe0
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	468c      	mov	ip, r1
 80033ea:	076d      	lsls	r5, r5, #29
 80033ec:	0b12      	lsrs	r2, r2, #12
 80033ee:	4463      	add	r3, ip
 80033f0:	051b      	lsls	r3, r3, #20
 80033f2:	4313      	orrs	r3, r2
 80033f4:	07e4      	lsls	r4, r4, #31
 80033f6:	4323      	orrs	r3, r4
 80033f8:	0028      	movs	r0, r5
 80033fa:	0019      	movs	r1, r3
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <__aeabi_f2d+0x5c>
 8003402:	2d00      	cmp	r5, #0
 8003404:	d01b      	beq.n	800343e <__aeabi_f2d+0x6e>
 8003406:	0028      	movs	r0, r5
 8003408:	f000 f8ae 	bl	8003568 <__clzsi2>
 800340c:	280a      	cmp	r0, #10
 800340e:	dc1c      	bgt.n	800344a <__aeabi_f2d+0x7a>
 8003410:	230b      	movs	r3, #11
 8003412:	002a      	movs	r2, r5
 8003414:	1a1b      	subs	r3, r3, r0
 8003416:	40da      	lsrs	r2, r3
 8003418:	0003      	movs	r3, r0
 800341a:	3315      	adds	r3, #21
 800341c:	409d      	lsls	r5, r3
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <__aeabi_f2d+0x88>)
 8003420:	0312      	lsls	r2, r2, #12
 8003422:	1a1b      	subs	r3, r3, r0
 8003424:	055b      	lsls	r3, r3, #21
 8003426:	0b12      	lsrs	r2, r2, #12
 8003428:	0d5b      	lsrs	r3, r3, #21
 800342a:	e7e1      	b.n	80033f0 <__aeabi_f2d+0x20>
 800342c:	2d00      	cmp	r5, #0
 800342e:	d009      	beq.n	8003444 <__aeabi_f2d+0x74>
 8003430:	0b13      	lsrs	r3, r2, #12
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	431a      	orrs	r2, r3
 8003438:	076d      	lsls	r5, r5, #29
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <__aeabi_f2d+0x8c>)
 800343c:	e7d8      	b.n	80033f0 <__aeabi_f2d+0x20>
 800343e:	2300      	movs	r3, #0
 8003440:	2200      	movs	r2, #0
 8003442:	e7d5      	b.n	80033f0 <__aeabi_f2d+0x20>
 8003444:	2200      	movs	r2, #0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <__aeabi_f2d+0x8c>)
 8003448:	e7d2      	b.n	80033f0 <__aeabi_f2d+0x20>
 800344a:	0003      	movs	r3, r0
 800344c:	002a      	movs	r2, r5
 800344e:	3b0b      	subs	r3, #11
 8003450:	409a      	lsls	r2, r3
 8003452:	2500      	movs	r5, #0
 8003454:	e7e3      	b.n	800341e <__aeabi_f2d+0x4e>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	00000389 	.word	0x00000389
 800345c:	000007ff 	.word	0x000007ff

08003460 <__aeabi_d2f>:
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	004b      	lsls	r3, r1, #1
 8003464:	030f      	lsls	r7, r1, #12
 8003466:	0d5b      	lsrs	r3, r3, #21
 8003468:	4c3b      	ldr	r4, [pc, #236]	@ (8003558 <__aeabi_d2f+0xf8>)
 800346a:	0f45      	lsrs	r5, r0, #29
 800346c:	b083      	sub	sp, #12
 800346e:	0a7f      	lsrs	r7, r7, #9
 8003470:	1c5e      	adds	r6, r3, #1
 8003472:	432f      	orrs	r7, r5
 8003474:	9000      	str	r0, [sp, #0]
 8003476:	9101      	str	r1, [sp, #4]
 8003478:	0fca      	lsrs	r2, r1, #31
 800347a:	00c5      	lsls	r5, r0, #3
 800347c:	4226      	tst	r6, r4
 800347e:	d00b      	beq.n	8003498 <__aeabi_d2f+0x38>
 8003480:	4936      	ldr	r1, [pc, #216]	@ (800355c <__aeabi_d2f+0xfc>)
 8003482:	185c      	adds	r4, r3, r1
 8003484:	2cfe      	cmp	r4, #254	@ 0xfe
 8003486:	dd13      	ble.n	80034b0 <__aeabi_d2f+0x50>
 8003488:	20ff      	movs	r0, #255	@ 0xff
 800348a:	2300      	movs	r3, #0
 800348c:	05c0      	lsls	r0, r0, #23
 800348e:	4318      	orrs	r0, r3
 8003490:	07d2      	lsls	r2, r2, #31
 8003492:	4310      	orrs	r0, r2
 8003494:	b003      	add	sp, #12
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <__aeabi_d2f+0x42>
 800349c:	2000      	movs	r0, #0
 800349e:	2300      	movs	r3, #0
 80034a0:	e7f4      	b.n	800348c <__aeabi_d2f+0x2c>
 80034a2:	433d      	orrs	r5, r7
 80034a4:	d0f0      	beq.n	8003488 <__aeabi_d2f+0x28>
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	03db      	lsls	r3, r3, #15
 80034aa:	20ff      	movs	r0, #255	@ 0xff
 80034ac:	433b      	orrs	r3, r7
 80034ae:	e7ed      	b.n	800348c <__aeabi_d2f+0x2c>
 80034b0:	2c00      	cmp	r4, #0
 80034b2:	dd14      	ble.n	80034de <__aeabi_d2f+0x7e>
 80034b4:	9b00      	ldr	r3, [sp, #0]
 80034b6:	00ff      	lsls	r7, r7, #3
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	4183      	sbcs	r3, r0
 80034be:	0f69      	lsrs	r1, r5, #29
 80034c0:	433b      	orrs	r3, r7
 80034c2:	430b      	orrs	r3, r1
 80034c4:	0759      	lsls	r1, r3, #29
 80034c6:	d041      	beq.n	800354c <__aeabi_d2f+0xec>
 80034c8:	210f      	movs	r1, #15
 80034ca:	4019      	ands	r1, r3
 80034cc:	2904      	cmp	r1, #4
 80034ce:	d028      	beq.n	8003522 <__aeabi_d2f+0xc2>
 80034d0:	3304      	adds	r3, #4
 80034d2:	0159      	lsls	r1, r3, #5
 80034d4:	d525      	bpl.n	8003522 <__aeabi_d2f+0xc2>
 80034d6:	3401      	adds	r4, #1
 80034d8:	2300      	movs	r3, #0
 80034da:	b2e0      	uxtb	r0, r4
 80034dc:	e7d6      	b.n	800348c <__aeabi_d2f+0x2c>
 80034de:	0021      	movs	r1, r4
 80034e0:	3117      	adds	r1, #23
 80034e2:	dbdb      	blt.n	800349c <__aeabi_d2f+0x3c>
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	201e      	movs	r0, #30
 80034e8:	0409      	lsls	r1, r1, #16
 80034ea:	4339      	orrs	r1, r7
 80034ec:	1b00      	subs	r0, r0, r4
 80034ee:	281f      	cmp	r0, #31
 80034f0:	dd1b      	ble.n	800352a <__aeabi_d2f+0xca>
 80034f2:	2602      	movs	r6, #2
 80034f4:	4276      	negs	r6, r6
 80034f6:	1b34      	subs	r4, r6, r4
 80034f8:	000e      	movs	r6, r1
 80034fa:	40e6      	lsrs	r6, r4
 80034fc:	0034      	movs	r4, r6
 80034fe:	2820      	cmp	r0, #32
 8003500:	d004      	beq.n	800350c <__aeabi_d2f+0xac>
 8003502:	4817      	ldr	r0, [pc, #92]	@ (8003560 <__aeabi_d2f+0x100>)
 8003504:	4684      	mov	ip, r0
 8003506:	4463      	add	r3, ip
 8003508:	4099      	lsls	r1, r3
 800350a:	430d      	orrs	r5, r1
 800350c:	002b      	movs	r3, r5
 800350e:	1e59      	subs	r1, r3, #1
 8003510:	418b      	sbcs	r3, r1
 8003512:	4323      	orrs	r3, r4
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d015      	beq.n	8003544 <__aeabi_d2f+0xe4>
 8003518:	210f      	movs	r1, #15
 800351a:	2400      	movs	r4, #0
 800351c:	4019      	ands	r1, r3
 800351e:	2904      	cmp	r1, #4
 8003520:	d117      	bne.n	8003552 <__aeabi_d2f+0xf2>
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	b2e0      	uxtb	r0, r4
 8003528:	e7b0      	b.n	800348c <__aeabi_d2f+0x2c>
 800352a:	4c0e      	ldr	r4, [pc, #56]	@ (8003564 <__aeabi_d2f+0x104>)
 800352c:	191c      	adds	r4, r3, r4
 800352e:	002b      	movs	r3, r5
 8003530:	40a5      	lsls	r5, r4
 8003532:	40c3      	lsrs	r3, r0
 8003534:	40a1      	lsls	r1, r4
 8003536:	1e68      	subs	r0, r5, #1
 8003538:	4185      	sbcs	r5, r0
 800353a:	4329      	orrs	r1, r5
 800353c:	430b      	orrs	r3, r1
 800353e:	2400      	movs	r4, #0
 8003540:	0759      	lsls	r1, r3, #29
 8003542:	d1c1      	bne.n	80034c8 <__aeabi_d2f+0x68>
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	2000      	movs	r0, #0
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	e79f      	b.n	800348c <__aeabi_d2f+0x2c>
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2e0      	uxtb	r0, r4
 8003550:	e79c      	b.n	800348c <__aeabi_d2f+0x2c>
 8003552:	3304      	adds	r3, #4
 8003554:	e7e5      	b.n	8003522 <__aeabi_d2f+0xc2>
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	000007fe 	.word	0x000007fe
 800355c:	fffffc80 	.word	0xfffffc80
 8003560:	fffffca2 	.word	0xfffffca2
 8003564:	fffffc82 	.word	0xfffffc82

08003568 <__clzsi2>:
 8003568:	211c      	movs	r1, #28
 800356a:	2301      	movs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4298      	cmp	r0, r3
 8003570:	d301      	bcc.n	8003576 <__clzsi2+0xe>
 8003572:	0c00      	lsrs	r0, r0, #16
 8003574:	3910      	subs	r1, #16
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	4298      	cmp	r0, r3
 800357a:	d301      	bcc.n	8003580 <__clzsi2+0x18>
 800357c:	0a00      	lsrs	r0, r0, #8
 800357e:	3908      	subs	r1, #8
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0x22>
 8003586:	0900      	lsrs	r0, r0, #4
 8003588:	3904      	subs	r1, #4
 800358a:	a202      	add	r2, pc, #8	@ (adr r2, 8003594 <__clzsi2+0x2c>)
 800358c:	5c10      	ldrb	r0, [r2, r0]
 800358e:	1840      	adds	r0, r0, r1
 8003590:	4770      	bx	lr
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	02020304 	.word	0x02020304
 8003598:	01010101 	.word	0x01010101
	...

080035a4 <__clzdi2>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d103      	bne.n	80035b2 <__clzdi2+0xe>
 80035aa:	f7ff ffdd 	bl	8003568 <__clzsi2>
 80035ae:	3020      	adds	r0, #32
 80035b0:	e002      	b.n	80035b8 <__clzdi2+0x14>
 80035b2:	0008      	movs	r0, r1
 80035b4:	f7ff ffd8 	bl	8003568 <__clzsi2>
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)

080035bc <MAX30102_Init>:
 * @brief  Initializes the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    // Reset the MAX30102
    MAX30102_Reset(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f85a 	bl	8003680 <MAX30102_Reset>

    // Wait for the reset to complete
    HAL_Delay(100);
 80035cc:	2064      	movs	r0, #100	@ 0x64
 80035ce:	f001 fa17 	bl	8004a00 <HAL_Delay>

    // Set the mode to SpO2 mode
    MAX30102_SetMode(hi2c, MAX30102_MODE_SPO2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2103      	movs	r1, #3
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f860 	bl	800369c <MAX30102_SetMode>

    // Configure SpO2 sensor parameters
    MAX30102_SetSpO2Config(hi2c, MAX30102_SPO2_PW_411, MAX30102_SPO2_ADC_RGE_2048, MAX30102_SPO2_SR_400);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	2303      	movs	r3, #3
 80035e0:	2200      	movs	r2, #0
 80035e2:	2103      	movs	r1, #3
 80035e4:	f000 f86c 	bl	80036c0 <MAX30102_SetSpO2Config>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_INTR_ENABLE_2, MAX30102_REG_INTR_ENABLE_2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	2103      	movs	r1, #3
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f8b1 	bl	8003756 <MAX30102_WriteRegister>




    // Set the LED pulse amplitudes (adjust according to your requirements)
    MAX30102_SetLedPulseAmplitude(hi2c, MAX30100_LED_CURRENT_11MA , MAX30100_LED_CURRENT_11MA );
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	2103      	movs	r1, #3
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f88d 	bl	800371a <MAX30102_SetLedPulseAmplitude>


    // Additional sensor configurations can go here
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <MAX30102_ReadFifo>:
 * @param  hi2c: I2C handle
 * @param  data: pointer to MAX30102_Data structure to store the results
 * @retval None
 */
void MAX30102_ReadFifo(I2C_HandleTypeDef *hi2c, MAX30102_Data *data)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b089      	sub	sp, #36	@ 0x24
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    uint8_t fifoData[6];

    // Read 6 bytes from the FIFO_DATA register
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, MAX30102_REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, fifoData, 6, HAL_MAX_DELAY);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	2301      	movs	r3, #1
 8003616:	425b      	negs	r3, r3
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	2306      	movs	r3, #6
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2408      	movs	r4, #8
 8003620:	193b      	adds	r3, r7, r4
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	2207      	movs	r2, #7
 8003628:	21ae      	movs	r1, #174	@ 0xae
 800362a:	f001 fe67 	bl	80052fc <HAL_I2C_Mem_Read>

    // Combine the bytes to form 16-bit values for Red and IR data
    data->red = (fifoData[0] << 16) | (fifoData[1] << 8) | fifoData[2];
 800362e:	0021      	movs	r1, r4
 8003630:	187b      	adds	r3, r7, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	b21a      	sxth	r2, r3
 8003638:	187b      	adds	r3, r7, r1
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21a      	sxth	r2, r3
 8003644:	187b      	adds	r3, r7, r1
 8003646:	789b      	ldrb	r3, [r3, #2]
 8003648:	b21b      	sxth	r3, r3
 800364a:	4313      	orrs	r3, r2
 800364c:	b21b      	sxth	r3, r3
 800364e:	b29a      	uxth	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	801a      	strh	r2, [r3, #0]
    data->ir = (fifoData[3] << 16) | (fifoData[4] << 8) | fifoData[5];
 8003654:	187b      	adds	r3, r7, r1
 8003656:	78db      	ldrb	r3, [r3, #3]
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	b21a      	sxth	r2, r3
 800365c:	187b      	adds	r3, r7, r1
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21a      	sxth	r2, r3
 8003668:	187b      	adds	r3, r7, r1
 800366a:	795b      	ldrb	r3, [r3, #5]
 800366c:	b21b      	sxth	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b21b      	sxth	r3, r3
 8003672:	b29a      	uxth	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	805a      	strh	r2, [r3, #2]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b005      	add	sp, #20
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <MAX30102_Reset>:
 * @brief  Resets the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Reset(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    // Write 0x40 to the MODE_CONFIG register to reset the device
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, 0x40);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	@ 0x40
 800368c:	2109      	movs	r1, #9
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f861 	bl	8003756 <MAX30102_WriteRegister>
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <MAX30102_SetMode>:
 * @param  hi2c: I2C handle
 * @param  mode: Desired mode (e.g., MAX30102_MODE_SPO2, MAX30102_MODE_HR_ONLY)
 * @retval None
 */
void MAX30102_SetMode(I2C_HandleTypeDef *hi2c, uint8_t mode)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	000a      	movs	r2, r1
 80036a6:	1cfb      	adds	r3, r7, #3
 80036a8:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, mode);
 80036aa:	1cfb      	adds	r3, r7, #3
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2109      	movs	r1, #9
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f84f 	bl	8003756 <MAX30102_WriteRegister>
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}

080036c0 <MAX30102_SetSpO2Config>:
 * @param  adc_rge: ADC range (e.g., MAX30102_SPO2_ADC_RGE_4096)
 * @param  sr: Sample rate (e.g., MAX30102_SPO2_SR_100)
 * @retval None
 */
void MAX30102_SetSpO2Config(I2C_HandleTypeDef *hi2c, uint8_t led_pw, uint8_t adc_rge, uint8_t sr)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	000c      	movs	r4, r1
 80036ca:	0010      	movs	r0, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	1cfb      	adds	r3, r7, #3
 80036d0:	1c22      	adds	r2, r4, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	1cbb      	adds	r3, r7, #2
 80036d6:	1c02      	adds	r2, r0, #0
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	1c7b      	adds	r3, r7, #1
 80036dc:	1c0a      	adds	r2, r1, #0
 80036de:	701a      	strb	r2, [r3, #0]
    uint8_t config = (adc_rge << 5) | (sr << 2) | led_pw;
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	015b      	lsls	r3, r3, #5
 80036e6:	b25a      	sxtb	r2, r3
 80036e8:	1c7b      	adds	r3, r7, #1
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	4313      	orrs	r3, r2
 80036f2:	b25a      	sxtb	r2, r3
 80036f4:	1cfb      	adds	r3, r7, #3
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b25a      	sxtb	r2, r3
 80036fe:	210f      	movs	r1, #15
 8003700:	187b      	adds	r3, r7, r1
 8003702:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_SPO2_CONFIG, config);
 8003704:	187b      	adds	r3, r7, r1
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	210a      	movs	r1, #10
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f822 	bl	8003756 <MAX30102_WriteRegister>
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b005      	add	sp, #20
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <MAX30102_SetLedPulseAmplitude>:
 * @param  led1_pa: Pulse amplitude for LED1 (Red)
 * @param  led2_pa: Pulse amplitude for LED2 (IR)
 * @retval None
 */
void MAX30102_SetLedPulseAmplitude(I2C_HandleTypeDef *hi2c, uint8_t led1_pa, uint8_t led2_pa)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	0008      	movs	r0, r1
 8003724:	0011      	movs	r1, r2
 8003726:	1cfb      	adds	r3, r7, #3
 8003728:	1c02      	adds	r2, r0, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	1cbb      	adds	r3, r7, #2
 800372e:	1c0a      	adds	r2, r1, #0
 8003730:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED1_PA, led1_pa);
 8003732:	1cfb      	adds	r3, r7, #3
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	210c      	movs	r1, #12
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f80b 	bl	8003756 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED2_PA, led2_pa);
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	210d      	movs	r1, #13
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f804 	bl	8003756 <MAX30102_WriteRegister>
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <MAX30102_WriteRegister>:
 * @param  reg: Register address
 * @param  value: Value to write
 * @retval None
 */
void MAX30102_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af04      	add	r7, sp, #16
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	0008      	movs	r0, r1
 8003760:	0011      	movs	r1, r2
 8003762:	1cfb      	adds	r3, r7, #3
 8003764:	1c02      	adds	r2, r0, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	1cbb      	adds	r3, r7, #2
 800376a:	1c0a      	adds	r2, r1, #0
 800376c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 800376e:	1cfb      	adds	r3, r7, #3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b29a      	uxth	r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	2301      	movs	r3, #1
 8003778:	425b      	negs	r3, r3
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	2301      	movs	r3, #1
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	1cbb      	adds	r3, r7, #2
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2301      	movs	r3, #1
 8003786:	21ae      	movs	r1, #174	@ 0xae
 8003788:	f001 fc8a 	bl	80050a0 <HAL_I2C_Mem_Write>
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <MAX30102_ReadRegister>:
 * @param  hi2c: I2C handle
 * @param  reg: Register address
 * @retval Register value
 */
uint8_t MAX30102_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af04      	add	r7, sp, #16
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	000a      	movs	r2, r1
 800379e:	1cfb      	adds	r3, r7, #3
 80037a0:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 80037a2:	210f      	movs	r1, #15
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80037aa:	1cfb      	adds	r3, r7, #3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	2301      	movs	r3, #1
 80037b4:	425b      	negs	r3, r3
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	2301      	movs	r3, #1
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	000c      	movs	r4, r1
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2301      	movs	r3, #1
 80037c4:	21ae      	movs	r1, #174	@ 0xae
 80037c6:	f001 fd99 	bl	80052fc <HAL_I2C_Mem_Read>
    return value;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	781b      	ldrb	r3, [r3, #0]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b005      	add	sp, #20
 80037d4:	bd90      	pop	{r4, r7, pc}
	...

080037d8 <MAX30102_ReadTemperature>:
    }
    return spo2;
}

float MAX30102_ReadTemperature(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    // Enable temperature conversion
    MAX30102_WriteRegister(hi2c, MAX30102_REG_TEMP_CONFIG, 0x01);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	2121      	movs	r1, #33	@ 0x21
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7ff ffb5 	bl	8003756 <MAX30102_WriteRegister>

    // Wait for the temperature conversion to complete
    HAL_Delay(30);
 80037ec:	201e      	movs	r0, #30
 80037ee:	f001 f907 	bl	8004a00 <HAL_Delay>

    // Read the integer part of the temperature
    uint8_t temp_int = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_INT);
 80037f2:	250f      	movs	r5, #15
 80037f4:	197c      	adds	r4, r7, r5
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	211f      	movs	r1, #31
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff ffca 	bl	8003794 <MAX30102_ReadRegister>
 8003800:	0003      	movs	r3, r0
 8003802:	7023      	strb	r3, [r4, #0]

    // Read the fractional part of the temperature
    uint8_t temp_frac = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_FRAC);
 8003804:	260e      	movs	r6, #14
 8003806:	19bc      	adds	r4, r7, r6
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2120      	movs	r1, #32
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff ffc1 	bl	8003794 <MAX30102_ReadRegister>
 8003812:	0003      	movs	r3, r0
 8003814:	7023      	strb	r3, [r4, #0]

    // Combine the integer and fractional parts
    float temperature = temp_int + (temp_frac * 0.0625);
 8003816:	197b      	adds	r3, r7, r5
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	0018      	movs	r0, r3
 800381c:	f7ff fd86 	bl	800332c <__aeabi_i2d>
 8003820:	0004      	movs	r4, r0
 8003822:	000d      	movs	r5, r1
 8003824:	19bb      	adds	r3, r7, r6
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff fd7f 	bl	800332c <__aeabi_i2d>
 800382e:	2200      	movs	r2, #0
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <MAX30102_ReadTemperature+0x84>)
 8003832:	f7fe feb9 	bl	80025a8 <__aeabi_dmul>
 8003836:	0002      	movs	r2, r0
 8003838:	000b      	movs	r3, r1
 800383a:	0020      	movs	r0, r4
 800383c:	0029      	movs	r1, r5
 800383e:	f7fd ff0b 	bl	8001658 <__aeabi_dadd>
 8003842:	0002      	movs	r2, r0
 8003844:	000b      	movs	r3, r1
 8003846:	0010      	movs	r0, r2
 8003848:	0019      	movs	r1, r3
 800384a:	f7ff fe09 	bl	8003460 <__aeabi_d2f>
 800384e:	1c03      	adds	r3, r0, #0
 8003850:	60bb      	str	r3, [r7, #8]

    return temperature;
 8003852:	68bb      	ldr	r3, [r7, #8]
}
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	46bd      	mov	sp, r7
 8003858:	b005      	add	sp, #20
 800385a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385c:	3fb00000 	.word	0x3fb00000

08003860 <MinMaxAvgStatistic_Init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

/* Initialize the Statistic block */
void MinMaxAvgStatistic_Init(MinMaxAvgStatistic* stat) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <MinMaxAvgStatistic_Init+0x28>)
 800386c:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <MinMaxAvgStatistic_Init+0x28>)
 8003872:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	7fc00000 	.word	0x7fc00000

0800388c <MinMaxAvgStatistic_Process>:

/* Add value to the statistic */
void MinMaxAvgStatistic_Process(MinMaxAvgStatistic* stat, float value) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    stat->min = isnan(stat->min) ? value : fminf(stat->min, value);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c19      	adds	r1, r3, #0
 800389c:	1c18      	adds	r0, r3, #0
 800389e:	f7fd fe17 	bl	80014d0 <__aeabi_fcmpun>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d108      	bne.n	80038b8 <MinMaxAvgStatistic_Process+0x2c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	1c11      	adds	r1, r2, #0
 80038ae:	1c18      	adds	r0, r3, #0
 80038b0:	f008 fbfd 	bl	800c0ae <fminf>
 80038b4:	1c02      	adds	r2, r0, #0
 80038b6:	e000      	b.n	80038ba <MinMaxAvgStatistic_Process+0x2e>
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
    stat->max = isnan(stat->max) ? value : fmaxf(stat->max, value);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	1c19      	adds	r1, r3, #0
 80038c4:	1c18      	adds	r0, r3, #0
 80038c6:	f7fd fe03 	bl	80014d0 <__aeabi_fcmpun>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d108      	bne.n	80038e0 <MinMaxAvgStatistic_Process+0x54>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1c11      	adds	r1, r2, #0
 80038d6:	1c18      	adds	r0, r3, #0
 80038d8:	f008 fbd3 	bl	800c082 <fmaxf>
 80038dc:	1c02      	adds	r2, r0, #0
 80038de:	e000      	b.n	80038e2 <MinMaxAvgStatistic_Process+0x56>
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	605a      	str	r2, [r3, #4]
    stat->sum += value;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	1c18      	adds	r0, r3, #0
 80038ee:	f7fc ff9d 	bl	800082c <__aeabi_fadd>
 80038f2:	1c03      	adds	r3, r0, #0
 80038f4:	1c1a      	adds	r2, r3, #0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
    stat->count++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}

0800390c <MinMaxAvgStatistic_Reset>:

/* Reset the statistic block */
void MinMaxAvgStatistic_Reset(MinMaxAvgStatistic* stat) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a07      	ldr	r2, [pc, #28]	@ (8003934 <MinMaxAvgStatistic_Reset+0x28>)
 8003918:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <MinMaxAvgStatistic_Reset+0x28>)
 800391e:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	7fc00000 	.word	0x7fc00000

08003938 <MinMaxAvgStatistic_Minimum>:

/* Get the minimum value */
float MinMaxAvgStatistic_Minimum(const MinMaxAvgStatistic* stat) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    return stat->min;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	1c18      	adds	r0, r3, #0
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <MinMaxAvgStatistic_Maximum>:

/* Get the maximum value */
float MinMaxAvgStatistic_Maximum(const MinMaxAvgStatistic* stat) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    return stat->max;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
}
 8003958:	1c18      	adds	r0, r3, #0
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <MinMaxAvgStatistic_Average>:

/* Get the average value */
float MinMaxAvgStatistic_Average(const MinMaxAvgStatistic* stat) {
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
    return stat->sum / stat->count;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689c      	ldr	r4, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0018      	movs	r0, r3
 8003972:	f7fd fde3 	bl	800153c <__aeabi_i2f>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	1c19      	adds	r1, r3, #0
 800397a:	1c20      	adds	r0, r4, #0
 800397c:	f7fd f8e0 	bl	8000b40 <__aeabi_fdiv>
 8003980:	1c03      	adds	r3, r0, #0
}
 8003982:	1c18      	adds	r0, r3, #0
 8003984:	46bd      	mov	sp, r7
 8003986:	b003      	add	sp, #12
 8003988:	bd90      	pop	{r4, r7, pc}
	...

0800398c <HighPassFilter_Init>:
    float last_filter_value;
    float last_raw_value;
} HighPassFilter;

/* Initialize High Pass Filter with samples */
void HighPassFilter_Init(HighPassFilter* filter, float samples) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	4817      	ldr	r0, [pc, #92]	@ (80039f8 <HighPassFilter_Init+0x6c>)
 800399a:	f7fd f8d1 	bl	8000b40 <__aeabi_fdiv>
 800399e:	1c03      	adds	r3, r0, #0
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f008 fb3d 	bl	800c020 <expf>
 80039a6:	1c02      	adds	r2, r0, #0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	21fe      	movs	r1, #254	@ 0xfe
 80039b2:	0589      	lsls	r1, r1, #22
 80039b4:	1c18      	adds	r0, r3, #0
 80039b6:	f7fc ff39 	bl	800082c <__aeabi_fadd>
 80039ba:	1c03      	adds	r3, r0, #0
 80039bc:	2180      	movs	r1, #128	@ 0x80
 80039be:	05c9      	lsls	r1, r1, #23
 80039c0:	1c18      	adds	r0, r3, #0
 80039c2:	f7fd f8bd 	bl	8000b40 <__aeabi_fdiv>
 80039c6:	1c03      	adds	r3, r0, #0
 80039c8:	1c1a      	adds	r2, r3, #0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	605a      	str	r2, [r3, #4]
    filter->kA1 = -(filter->kA0);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	0612      	lsls	r2, r2, #24
 80039d6:	405a      	eors	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a05      	ldr	r2, [pc, #20]	@ (80039fc <HighPassFilter_Init+0x70>)
 80039e8:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a03      	ldr	r2, [pc, #12]	@ (80039fc <HighPassFilter_Init+0x70>)
 80039ee:	615a      	str	r2, [r3, #20]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	bf800000 	.word	0xbf800000
 80039fc:	7fc00000 	.word	0x7fc00000

08003a00 <HighPassFilter_InitWithCutoff>:

/* Initialize High Pass Filter with cutoff and sampling frequency */
void HighPassFilter_InitWithCutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
    HighPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fcdf 	bl	80033d0 <__aeabi_f2d>
 8003a12:	0004      	movs	r4, r0
 8003a14:	000d      	movs	r5, r1
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1c19      	adds	r1, r3, #0
 8003a1a:	1c18      	adds	r0, r3, #0
 8003a1c:	f7fc ff06 	bl	800082c <__aeabi_fadd>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c18      	adds	r0, r3, #0
 8003a24:	f7ff fcd4 	bl	80033d0 <__aeabi_f2d>
 8003a28:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <HighPassFilter_InitWithCutoff+0x5c>)
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <HighPassFilter_InitWithCutoff+0x60>)
 8003a2c:	f7fe fdbc 	bl	80025a8 <__aeabi_dmul>
 8003a30:	0002      	movs	r2, r0
 8003a32:	000b      	movs	r3, r1
 8003a34:	0020      	movs	r0, r4
 8003a36:	0029      	movs	r1, r5
 8003a38:	f7fe f972 	bl	8001d20 <__aeabi_ddiv>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	000b      	movs	r3, r1
 8003a40:	0010      	movs	r0, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	f7ff fd0c 	bl	8003460 <__aeabi_d2f>
 8003a48:	1c02      	adds	r2, r0, #0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1c11      	adds	r1, r2, #0
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff ff9c 	bl	800398c <HighPassFilter_Init>
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5c:	54442d18 	.word	0x54442d18
 8003a60:	400921fb 	.word	0x400921fb

08003a64 <HighPassFilter_Reset>:
    filter->last_raw_value = value;
    return filter->last_filter_value;
}

/* Reset High Pass Filter */
void HighPassFilter_Reset(HighPassFilter* filter) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = NAN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HighPassFilter_Reset+0x1c>)
 8003a70:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = NAN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a02      	ldr	r2, [pc, #8]	@ (8003a80 <HighPassFilter_Reset+0x1c>)
 8003a76:	611a      	str	r2, [r3, #16]
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	7fc00000 	.word	0x7fc00000

08003a84 <LowPassFilter_Init>:
    float kB1;
    float last_value;
} LowPassFilter;

/* Initialize Low Pass Filter with samples */
void LowPassFilter_Init(LowPassFilter* filter, float samples) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	480f      	ldr	r0, [pc, #60]	@ (8003ad0 <LowPassFilter_Init+0x4c>)
 8003a92:	f7fd f855 	bl	8000b40 <__aeabi_fdiv>
 8003a96:	1c03      	adds	r3, r0, #0
 8003a98:	1c18      	adds	r0, r3, #0
 8003a9a:	f008 fac1 	bl	800c020 <expf>
 8003a9e:	1c02      	adds	r2, r0, #0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1c19      	adds	r1, r3, #0
 8003aaa:	20fe      	movs	r0, #254	@ 0xfe
 8003aac:	0580      	lsls	r0, r0, #22
 8003aae:	f7fd fb6b 	bl	8001188 <__aeabi_fsub>
 8003ab2:	1c03      	adds	r3, r0, #0
 8003ab4:	1c1a      	adds	r2, r3, #0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a03      	ldr	r2, [pc, #12]	@ (8003ad4 <LowPassFilter_Init+0x50>)
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	46c0      	nop			@ (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	bf800000 	.word	0xbf800000
 8003ad4:	7fc00000 	.word	0x7fc00000

08003ad8 <LowPassFilter_InitWithCutoff>:

/* Initialize Low Pass Filter with cutoff and sampling frequency */
void LowPassFilter_InitWithCutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
    LowPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fc73 	bl	80033d0 <__aeabi_f2d>
 8003aea:	0004      	movs	r4, r0
 8003aec:	000d      	movs	r5, r1
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1c19      	adds	r1, r3, #0
 8003af2:	1c18      	adds	r0, r3, #0
 8003af4:	f7fc fe9a 	bl	800082c <__aeabi_fadd>
 8003af8:	1c03      	adds	r3, r0, #0
 8003afa:	1c18      	adds	r0, r3, #0
 8003afc:	f7ff fc68 	bl	80033d0 <__aeabi_f2d>
 8003b00:	4a0c      	ldr	r2, [pc, #48]	@ (8003b34 <LowPassFilter_InitWithCutoff+0x5c>)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <LowPassFilter_InitWithCutoff+0x60>)
 8003b04:	f7fe fd50 	bl	80025a8 <__aeabi_dmul>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	000b      	movs	r3, r1
 8003b0c:	0020      	movs	r0, r4
 8003b0e:	0029      	movs	r1, r5
 8003b10:	f7fe f906 	bl	8001d20 <__aeabi_ddiv>
 8003b14:	0002      	movs	r2, r0
 8003b16:	000b      	movs	r3, r1
 8003b18:	0010      	movs	r0, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	f7ff fca0 	bl	8003460 <__aeabi_d2f>
 8003b20:	1c02      	adds	r2, r0, #0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1c11      	adds	r1, r2, #0
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7ff ffac 	bl	8003a84 <LowPassFilter_Init>
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bdb0      	pop	{r4, r5, r7, pc}
 8003b34:	54442d18 	.word	0x54442d18
 8003b38:	400921fb 	.word	0x400921fb

08003b3c <LowPassFilter_Process>:

/* Apply Low Pass Filter */
float LowPassFilter_Process(LowPassFilter* filter, float value) {
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    if (isnan(filter->last_value)) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	1c19      	adds	r1, r3, #0
 8003b4c:	1c18      	adds	r0, r3, #0
 8003b4e:	f7fd fcbf 	bl	80014d0 <__aeabi_fcmpun>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d003      	beq.n	8003b5e <LowPassFilter_Process+0x22>
        filter->last_value = value;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	e018      	b.n	8003b90 <LowPassFilter_Process+0x54>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	1c18      	adds	r0, r3, #0
 8003b66:	f7fd f9d1 	bl	8000f0c <__aeabi_fmul>
 8003b6a:	1c03      	adds	r3, r0, #0
 8003b6c:	1c1c      	adds	r4, r3, #0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	1c19      	adds	r1, r3, #0
 8003b78:	1c10      	adds	r0, r2, #0
 8003b7a:	f7fd f9c7 	bl	8000f0c <__aeabi_fmul>
 8003b7e:	1c03      	adds	r3, r0, #0
 8003b80:	1c19      	adds	r1, r3, #0
 8003b82:	1c20      	adds	r0, r4, #0
 8003b84:	f7fc fe52 	bl	800082c <__aeabi_fadd>
 8003b88:	1c03      	adds	r3, r0, #0
 8003b8a:	1c1a      	adds	r2, r3, #0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
    }
    return filter->last_value;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
}
 8003b94:	1c18      	adds	r0, r3, #0
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b003      	add	sp, #12
 8003b9a:	bd90      	pop	{r4, r7, pc}

08003b9c <LowPassFilter_Reset>:

/* Reset Low Pass Filter */
void LowPassFilter_Reset(LowPassFilter* filter) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
    filter->last_value = NAN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a03      	ldr	r2, [pc, #12]	@ (8003bb4 <LowPassFilter_Reset+0x18>)
 8003ba8:	60da      	str	r2, [r3, #12]
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	7fc00000 	.word	0x7fc00000

08003bb8 <Differentiator_Init>:
    float sampling_frequency;
    float last_value;
} Differentiator;

/* Initialize Differentiator */
void Differentiator_Init(Differentiator* diff, float sampling_frequency) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    diff->sampling_frequency = sampling_frequency;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a03      	ldr	r2, [pc, #12]	@ (8003bd8 <Differentiator_Init+0x20>)
 8003bcc:	605a      	str	r2, [r3, #4]
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	7fc00000 	.word	0x7fc00000

08003bdc <Differentiator_Process>:

/* Apply Differentiator */
float Differentiator_Process(Differentiator* diff, float value) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
    if (isnan(diff->last_value)) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	1c19      	adds	r1, r3, #0
 8003bec:	1c18      	adds	r0, r3, #0
 8003bee:	f7fd fc6f 	bl	80014d0 <__aeabi_fcmpun>
 8003bf2:	1e03      	subs	r3, r0, #0
 8003bf4:	d004      	beq.n	8003c00 <Differentiator_Process+0x24>
        diff->last_value = value;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
        return 0.0;  // No change in the first iteration
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e013      	b.n	8003c28 <Differentiator_Process+0x4c>
    }
    float result = (value - diff->last_value) * diff->sampling_frequency;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	1c19      	adds	r1, r3, #0
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	f7fd fabe 	bl	8001188 <__aeabi_fsub>
 8003c0c:	1c03      	adds	r3, r0, #0
 8003c0e:	1c1a      	adds	r2, r3, #0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c19      	adds	r1, r3, #0
 8003c16:	1c10      	adds	r0, r2, #0
 8003c18:	f7fd f978 	bl	8000f0c <__aeabi_fmul>
 8003c1c:	1c03      	adds	r3, r0, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
    diff->last_value = value;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	605a      	str	r2, [r3, #4]
    return result;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	1c18      	adds	r0, r3, #0
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <Differentiator_Reset>:

/* Reset Differentiator */
void Differentiator_Reset(Differentiator* diff) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    diff->last_value = NAN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a03      	ldr	r2, [pc, #12]	@ (8003c48 <Differentiator_Reset+0x18>)
 8003c3c:	605a      	str	r2, [r3, #4]
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	7fc00000 	.word	0x7fc00000

08003c4c <MovingAverageFilter_Init>:
    int buffer_size;
    float* values;
} MovingAverageFilter;

/* Initialize Moving Average Filter */
void MovingAverageFilter_Init(MovingAverageFilter* filter, float* buffer, int buffer_size) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
    filter->index = 0;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]
    filter->values = buffer;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
}
 8003c70:	46c0      	nop			@ (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b004      	add	sp, #16
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <MovingAverageFilter_Process>:

/* Apply Moving Average Filter */
float MovingAverageFilter_Process(MovingAverageFilter* filter, float value) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    filter->values[filter->index] = value;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	18d3      	adds	r3, r2, r3
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	601a      	str	r2, [r3, #0]
    filter->index = (filter->index + 1) % filter->buffer_size;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	0010      	movs	r0, r2
 8003ca0:	f7fc fbbe 	bl	8000420 <__aeabi_idivmod>
 8003ca4:	000b      	movs	r3, r1
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
    if (filter->count < filter->buffer_size) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	da04      	bge.n	8003cc2 <MovingAverageFilter_Process+0x4a>
        filter->count++;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]
    }

    float sum = 0.0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	e00e      	b.n	8003cea <MovingAverageFilter_Process+0x72>
        sum += filter->values[i];
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	18d3      	adds	r3, r2, r3
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	1c19      	adds	r1, r3, #0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7fc fda6 	bl	800082c <__aeabi_fadd>
 8003ce0:	1c03      	adds	r3, r0, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbeb      	blt.n	8003ccc <MovingAverageFilter_Process+0x54>
    }
    return sum / filter->count;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fd fc1f 	bl	800153c <__aeabi_i2f>
 8003cfe:	1c03      	adds	r3, r0, #0
 8003d00:	1c19      	adds	r1, r3, #0
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7fc ff1c 	bl	8000b40 <__aeabi_fdiv>
 8003d08:	1c03      	adds	r3, r0, #0
}
 8003d0a:	1c18      	adds	r0, r3, #0
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <MovingAverageFilter_Reset>:

/* Reset Moving Average Filter */
void MovingAverageFilter_Reset(MovingAverageFilter* filter) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
    filter->index = 0;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	605a      	str	r2, [r3, #4]
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <send_uart>:
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
void init_filters(void);

// UART transmit helper function
void send_uart(char *message) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7fc f9e4 	bl	8000108 <strlen>
 8003d40:	0003      	movs	r3, r0
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4803      	ldr	r0, [pc, #12]	@ (8003d58 <send_uart+0x28>)
 8003d4c:	f002 ff7e 	bl	8006c4c <HAL_UART_Transmit>
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000200 	.word	0x20000200

08003d5c <main>:

// Main application loop
int main(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
    HAL_Init();
 8003d62:	f000 fddd 	bl	8004920 <HAL_Init>
    SystemClock_Config();
 8003d66:	f000 faa5 	bl	80042b4 <SystemClock_Config>
    MX_GPIO_Init();
 8003d6a:	f000 fb81 	bl	8004470 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003d6e:	f000 fb0f 	bl	8004390 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8003d72:	f000 fb4d 	bl	8004410 <MX_USART2_UART_Init>

    // Initialize I2C and MAX30102 sensor
    MAX30102_Init(&hi2c1);
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <main+0x118>)
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff fc1f 	bl	80035bc <MAX30102_Init>

    // Initialize filters for processing
    init_filters();
 8003d7e:	f000 f891 	bl	8003ea4 <init_filters>

    // Variables for periodic temperature reading
    uint32_t last_temp_read_time = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
    const uint32_t temp_read_interval_ms = 5000;  // Read temperature every 5 seconds
 8003d86:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <main+0x11c>)
 8003d88:	61bb      	str	r3, [r7, #24]

    // Main loop
    while (1) {
        // Read data from the MAX30102 sensor
        MAX30102_Data sample;
        MAX30102_ReadFifo(&hi2c1, &sample);
 8003d8a:	1d3a      	adds	r2, r7, #4
 8003d8c:	4b39      	ldr	r3, [pc, #228]	@ (8003e74 <main+0x118>)
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff fc39 	bl	8003608 <MAX30102_ReadFifo>
        float current_value_red = sample.red;  // Red LED value
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fd fc1a 	bl	80015d4 <__aeabi_ui2f>
 8003da0:	1c03      	adds	r3, r0, #0
 8003da2:	617b      	str	r3, [r7, #20]
        float current_value_ir = sample.ir;    // IR LED value
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	885b      	ldrh	r3, [r3, #2]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fd fc13 	bl	80015d4 <__aeabi_ui2f>
 8003dae:	1c03      	adds	r3, r0, #0
 8003db0:	613b      	str	r3, [r7, #16]

        // Get the current system time
        uint32_t current_time = HAL_GetTick();
 8003db2:	f000 fe1b 	bl	80049ec <HAL_GetTick>
 8003db6:	0003      	movs	r3, r0
 8003db8:	60fb      	str	r3, [r7, #12]

        // Finger detection logic
        if (current_value_red > kFingerThreshold) {
 8003dba:	4b30      	ldr	r3, [pc, #192]	@ (8003e7c <main+0x120>)
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7fd fc09 	bl	80015d4 <__aeabi_ui2f>
 8003dc2:	1c03      	adds	r3, r0, #0
 8003dc4:	1c19      	adds	r1, r3, #0
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7fc fb94 	bl	80004f4 <__aeabi_fcmpgt>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d00a      	beq.n	8003de6 <main+0x8a>
            if (current_time - finger_timestamp > kFingerCooldownMs) {
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e80 <main+0x124>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2264      	movs	r2, #100	@ 0x64
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90f      	bls.n	8003dfe <main+0xa2>
                finger_detected = true;
 8003dde:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <main+0x128>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e00b      	b.n	8003dfe <main+0xa2>
            }
        } else {
            // If no finger is detected, reset filters
            reset_filters();
 8003de6:	f000 f8a7 	bl	8003f38 <reset_filters>
            finger_detected = false;
 8003dea:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <main+0x128>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
            finger_timestamp = current_time;
 8003df0:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <main+0x124>)
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]
            send_uart("No finger detected, resetting filters\n\r");
 8003df6:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <main+0x12c>)
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff ff99 	bl	8003d30 <send_uart>
        }

        // Periodic temperature reading
        if (current_time - last_temp_read_time >= temp_read_interval_ms) {
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d801      	bhi.n	8003e0e <main+0xb2>
            last_temp_read_time = current_time;  // Update last temperature read time
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	61fb      	str	r3, [r7, #28]
//            snprintf(temp_message, sizeof(temp_message), "Temperature: %.2fC\n\r", temperature);
//            send_uart(temp_message);  // Send temperature reading over UART
        }

        // If finger is detected, process data for heartbeat and SpO2 calculation
        if (finger_detected) {
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e84 <main+0x128>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0b9      	beq.n	8003d8a <main+0x2e>
            // Apply low-pass filters to the red and IR values
            current_value_red = LowPassFilter_Process(&low_pass_filter_red, current_value_red);
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4b1c      	ldr	r3, [pc, #112]	@ (8003e8c <main+0x130>)
 8003e1a:	1c11      	adds	r1, r2, #0
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff fe8d 	bl	8003b3c <LowPassFilter_Process>
 8003e22:	1c03      	adds	r3, r0, #0
 8003e24:	617b      	str	r3, [r7, #20]
            current_value_ir = LowPassFilter_Process(&low_pass_filter_ir, current_value_ir);
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <main+0x134>)
 8003e2a:	1c11      	adds	r1, r2, #0
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fe85 	bl	8003b3c <LowPassFilter_Process>
 8003e32:	1c03      	adds	r3, r0, #0
 8003e34:	613b      	str	r3, [r7, #16]
            float current_diff = Differentiator_Process(&differentiator, current_value_red);
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <main+0x138>)
 8003e3a:	1c11      	adds	r1, r2, #0
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff fecd 	bl	8003bdc <Differentiator_Process>
 8003e42:	1c03      	adds	r3, r0, #0
 8003e44:	60bb      	str	r3, [r7, #8]

            // Update SpO2 statistics
            MinMaxAvgStatistic_Process(&stat_red, current_value_red);
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <main+0x13c>)
 8003e4a:	1c11      	adds	r1, r2, #0
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff fd1d 	bl	800388c <MinMaxAvgStatistic_Process>
            MinMaxAvgStatistic_Process(&stat_ir, current_value_ir);
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <main+0x140>)
 8003e56:	1c11      	adds	r1, r2, #0
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fd17 	bl	800388c <MinMaxAvgStatistic_Process>

            // Perform heartbeat detection and SpO2 calculation
            detect_heartbeat(current_time, current_diff, current_value_ir);
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f89d 	bl	8003fa4 <detect_heartbeat>

            last_diff = current_diff;  // Update last difference for heartbeat detection
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <main+0x144>)
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	601a      	str	r2, [r3, #0]
    while (1) {
 8003e70:	e78b      	b.n	8003d8a <main+0x2e>
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	20000288 	.word	0x20000288
 8003e78:	00001388 	.word	0x00001388
 8003e7c:	00002710 	.word	0x00002710
 8003e80:	20000340 	.word	0x20000340
 8003e84:	20000344 	.word	0x20000344
 8003e88:	0800c350 	.word	0x0800c350
 8003e8c:	200002f4 	.word	0x200002f4
 8003e90:	20000304 	.word	0x20000304
 8003e94:	20000314 	.word	0x20000314
 8003e98:	2000034c 	.word	0x2000034c
 8003e9c:	2000035c 	.word	0x2000035c
 8003ea0:	2000000c 	.word	0x2000000c

08003ea4 <init_filters>:
        }
    }
}

// Filter initialization
void init_filters(void) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
    // Initialize filters with respective cutoff frequencies
    HighPassFilter_InitWithCutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8003ea8:	21fc      	movs	r1, #252	@ 0xfc
 8003eaa:	0589      	lsls	r1, r1, #22
 8003eac:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <init_filters+0x64>)
 8003eae:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <init_filters+0x68>)
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fda5 	bl	8003a00 <HighPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_red, kLowPassCutoff, kSamplingFrequency);
 8003eb6:	4916      	ldr	r1, [pc, #88]	@ (8003f10 <init_filters+0x6c>)
 8003eb8:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <init_filters+0x64>)
 8003eba:	4b16      	ldr	r3, [pc, #88]	@ (8003f14 <init_filters+0x70>)
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7ff fe0b 	bl	8003ad8 <LowPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_ir, kLowPassCutoff, kSamplingFrequency);
 8003ec2:	4913      	ldr	r1, [pc, #76]	@ (8003f10 <init_filters+0x6c>)
 8003ec4:	4a10      	ldr	r2, [pc, #64]	@ (8003f08 <init_filters+0x64>)
 8003ec6:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <init_filters+0x74>)
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff fe05 	bl	8003ad8 <LowPassFilter_InitWithCutoff>
    Differentiator_Init(&differentiator, kSamplingFrequency);
 8003ece:	4a0e      	ldr	r2, [pc, #56]	@ (8003f08 <init_filters+0x64>)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <init_filters+0x78>)
 8003ed2:	1c11      	adds	r1, r2, #0
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7ff fe6f 	bl	8003bb8 <Differentiator_Init>

    // Initialize moving average filters for BPM and SpO2
    static float average_buffer_bpm[K_AVERAGING_SAMPLES];
    static float average_buffer_spo2[K_AVERAGING_SAMPLES];
    MovingAverageFilter_Init(&averager_bpm, average_buffer_bpm, K_AVERAGING_SAMPLES);
 8003eda:	4911      	ldr	r1, [pc, #68]	@ (8003f20 <init_filters+0x7c>)
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <init_filters+0x80>)
 8003ede:	2232      	movs	r2, #50	@ 0x32
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff feb3 	bl	8003c4c <MovingAverageFilter_Init>
    MovingAverageFilter_Init(&averager_spo2, average_buffer_spo2, K_AVERAGING_SAMPLES);
 8003ee6:	4910      	ldr	r1, [pc, #64]	@ (8003f28 <init_filters+0x84>)
 8003ee8:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <init_filters+0x88>)
 8003eea:	2232      	movs	r2, #50	@ 0x32
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff fead 	bl	8003c4c <MovingAverageFilter_Init>

    // Initialize statistics for SpO2 calculation
    MinMaxAvgStatistic_Init(&stat_red);
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <init_filters+0x8c>)
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff fcb3 	bl	8003860 <MinMaxAvgStatistic_Init>
    MinMaxAvgStatistic_Init(&stat_ir);
 8003efa:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <init_filters+0x90>)
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7ff fcaf 	bl	8003860 <MinMaxAvgStatistic_Init>
}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	43c80000 	.word	0x43c80000
 8003f0c:	200002dc 	.word	0x200002dc
 8003f10:	40400000 	.word	0x40400000
 8003f14:	200002f4 	.word	0x200002f4
 8003f18:	20000304 	.word	0x20000304
 8003f1c:	20000314 	.word	0x20000314
 8003f20:	2000036c 	.word	0x2000036c
 8003f24:	2000031c 	.word	0x2000031c
 8003f28:	20000434 	.word	0x20000434
 8003f2c:	2000032c 	.word	0x2000032c
 8003f30:	2000034c 	.word	0x2000034c
 8003f34:	2000035c 	.word	0x2000035c

08003f38 <reset_filters>:

// Reset filters when finger is removed
void reset_filters(void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
    HighPassFilter_Reset(&high_pass_filter);
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <reset_filters+0x4c>)
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7ff fd90 	bl	8003a64 <HighPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_red);
 8003f44:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <reset_filters+0x50>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fe28 	bl	8003b9c <LowPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_ir);
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <reset_filters+0x54>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7ff fe24 	bl	8003b9c <LowPassFilter_Reset>
    Differentiator_Reset(&differentiator);
 8003f54:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <reset_filters+0x58>)
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7ff fe6a 	bl	8003c30 <Differentiator_Reset>
    MovingAverageFilter_Reset(&averager_bpm);
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <reset_filters+0x5c>)
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fed7 	bl	8003d12 <MovingAverageFilter_Reset>
    MovingAverageFilter_Reset(&averager_spo2);
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <reset_filters+0x60>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff fed3 	bl	8003d12 <MovingAverageFilter_Reset>
    MinMaxAvgStatistic_Reset(&stat_red);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <reset_filters+0x64>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fccc 	bl	800390c <MinMaxAvgStatistic_Reset>
    MinMaxAvgStatistic_Reset(&stat_ir);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <reset_filters+0x68>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff fcc8 	bl	800390c <MinMaxAvgStatistic_Reset>
}
 8003f7c:	46c0      	nop			@ (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	200002dc 	.word	0x200002dc
 8003f88:	200002f4 	.word	0x200002f4
 8003f8c:	20000304 	.word	0x20000304
 8003f90:	20000314 	.word	0x20000314
 8003f94:	2000031c 	.word	0x2000031c
 8003f98:	2000032c 	.word	0x2000032c
 8003f9c:	2000034c 	.word	0x2000034c
 8003fa0:	2000035c 	.word	0x2000035c

08003fa4 <detect_heartbeat>:

// Heartbeat detection and SpO2 calculation
void detect_heartbeat(uint32_t current_time, float current_diff, float current_value_ir) {
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b09d      	sub	sp, #116	@ 0x74
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
    if (!isnan(current_diff) && !isnan(last_diff)) {
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	68b8      	ldr	r0, [r7, #8]
 8003fb4:	f7fd fa8c 	bl	80014d0 <__aeabi_fcmpun>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d000      	beq.n	8003fbe <detect_heartbeat+0x1a>
 8003fbc:	e126      	b.n	800420c <detect_heartbeat+0x268>
 8003fbe:	4b95      	ldr	r3, [pc, #596]	@ (8004214 <detect_heartbeat+0x270>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1c19      	adds	r1, r3, #0
 8003fc4:	1c18      	adds	r0, r3, #0
 8003fc6:	f7fd fa83 	bl	80014d0 <__aeabi_fcmpun>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d000      	beq.n	8003fd0 <detect_heartbeat+0x2c>
 8003fce:	e11d      	b.n	800420c <detect_heartbeat+0x268>
        // Detect edge crossing for heartbeat detection
        if (last_diff > 0 && current_diff < 0) {
 8003fd0:	4b90      	ldr	r3, [pc, #576]	@ (8004214 <detect_heartbeat+0x270>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	1c18      	adds	r0, r3, #0
 8003fd8:	f7fc fa8c 	bl	80004f4 <__aeabi_fcmpgt>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d00b      	beq.n	8003ff8 <detect_heartbeat+0x54>
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f7fc fa72 	bl	80004cc <__aeabi_fcmplt>
 8003fe8:	1e03      	subs	r3, r0, #0
 8003fea:	d005      	beq.n	8003ff8 <detect_heartbeat+0x54>
            crossed = true;
 8003fec:	4b8a      	ldr	r3, [pc, #552]	@ (8004218 <detect_heartbeat+0x274>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
            crossed_time = current_time;
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800421c <detect_heartbeat+0x278>)
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]
        }

        // Reset crossing flag
        if (current_diff > 0) {
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	68b8      	ldr	r0, [r7, #8]
 8003ffc:	f7fc fa7a 	bl	80004f4 <__aeabi_fcmpgt>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d002      	beq.n	800400a <detect_heartbeat+0x66>
            crossed = false;
 8004004:	4b84      	ldr	r3, [pc, #528]	@ (8004218 <detect_heartbeat+0x274>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
        }

        // If a crossing occurred and meets threshold criteria
        if (crossed && current_diff < kEdgeThreshold) {
 800400a:	4b83      	ldr	r3, [pc, #524]	@ (8004218 <detect_heartbeat+0x274>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d100      	bne.n	8004014 <detect_heartbeat+0x70>
 8004012:	e0fb      	b.n	800420c <detect_heartbeat+0x268>
 8004014:	4b82      	ldr	r3, [pc, #520]	@ (8004220 <detect_heartbeat+0x27c>)
 8004016:	1c19      	adds	r1, r3, #0
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f7fc fa57 	bl	80004cc <__aeabi_fcmplt>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d100      	bne.n	8004024 <detect_heartbeat+0x80>
            crossed = false;
            MinMaxAvgStatistic_Reset(&stat_red);
            MinMaxAvgStatistic_Reset(&stat_ir);
        }
    }
}
 8004022:	e0f3      	b.n	800420c <detect_heartbeat+0x268>
            if (last_heartbeat != 0 && (crossed_time - last_heartbeat) > 500) {
 8004024:	4b7f      	ldr	r3, [pc, #508]	@ (8004224 <detect_heartbeat+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d100      	bne.n	800402e <detect_heartbeat+0x8a>
 800402c:	e0df      	b.n	80041ee <detect_heartbeat+0x24a>
 800402e:	4b7b      	ldr	r3, [pc, #492]	@ (800421c <detect_heartbeat+0x278>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b7c      	ldr	r3, [pc, #496]	@ (8004224 <detect_heartbeat+0x280>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	23fa      	movs	r3, #250	@ 0xfa
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	429a      	cmp	r2, r3
 800403e:	d800      	bhi.n	8004042 <detect_heartbeat+0x9e>
 8004040:	e0d5      	b.n	80041ee <detect_heartbeat+0x24a>
                uint32_t bpm = 60000 / (crossed_time - last_heartbeat);  // Calculate BPM
 8004042:	4b76      	ldr	r3, [pc, #472]	@ (800421c <detect_heartbeat+0x278>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b77      	ldr	r3, [pc, #476]	@ (8004224 <detect_heartbeat+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	0019      	movs	r1, r3
 800404e:	4876      	ldr	r0, [pc, #472]	@ (8004228 <detect_heartbeat+0x284>)
 8004050:	f7fc f876 	bl	8000140 <__udivsi3>
 8004054:	0003      	movs	r3, r0
 8004056:	667b      	str	r3, [r7, #100]	@ 0x64
                if (bpm > 50 && bpm < 150) {
 8004058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800405a:	2b32      	cmp	r3, #50	@ 0x32
 800405c:	d800      	bhi.n	8004060 <detect_heartbeat+0xbc>
 800405e:	e0c6      	b.n	80041ee <detect_heartbeat+0x24a>
 8004060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004062:	2b95      	cmp	r3, #149	@ 0x95
 8004064:	d900      	bls.n	8004068 <detect_heartbeat+0xc4>
 8004066:	e0c2      	b.n	80041ee <detect_heartbeat+0x24a>
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 8004068:	4b70      	ldr	r3, [pc, #448]	@ (800422c <detect_heartbeat+0x288>)
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fc6e 	bl	800394c <MinMaxAvgStatistic_Maximum>
 8004070:	1c04      	adds	r4, r0, #0
 8004072:	4b6e      	ldr	r3, [pc, #440]	@ (800422c <detect_heartbeat+0x288>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fc5f 	bl	8003938 <MinMaxAvgStatistic_Minimum>
 800407a:	1c03      	adds	r3, r0, #0
 800407c:	1c19      	adds	r1, r3, #0
 800407e:	1c20      	adds	r0, r4, #0
 8004080:	f7fd f882 	bl	8001188 <__aeabi_fsub>
 8004084:	1c03      	adds	r3, r0, #0
 8004086:	1c1c      	adds	r4, r3, #0
                              MinMaxAvgStatistic_Average(&stat_red);
 8004088:	4b68      	ldr	r3, [pc, #416]	@ (800422c <detect_heartbeat+0x288>)
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fc68 	bl	8003960 <MinMaxAvgStatistic_Average>
 8004090:	1c03      	adds	r3, r0, #0
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 8004092:	1c19      	adds	r1, r3, #0
 8004094:	1c20      	adds	r0, r4, #0
 8004096:	f7fc fd53 	bl	8000b40 <__aeabi_fdiv>
 800409a:	1c03      	adds	r3, r0, #0
 800409c:	663b      	str	r3, [r7, #96]	@ 0x60
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 800409e:	4b64      	ldr	r3, [pc, #400]	@ (8004230 <detect_heartbeat+0x28c>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fc53 	bl	800394c <MinMaxAvgStatistic_Maximum>
 80040a6:	1c04      	adds	r4, r0, #0
 80040a8:	4b61      	ldr	r3, [pc, #388]	@ (8004230 <detect_heartbeat+0x28c>)
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7ff fc44 	bl	8003938 <MinMaxAvgStatistic_Minimum>
 80040b0:	1c03      	adds	r3, r0, #0
 80040b2:	1c19      	adds	r1, r3, #0
 80040b4:	1c20      	adds	r0, r4, #0
 80040b6:	f7fd f867 	bl	8001188 <__aeabi_fsub>
 80040ba:	1c03      	adds	r3, r0, #0
 80040bc:	1c1c      	adds	r4, r3, #0
                         MinMaxAvgStatistic_Average(&stat_ir);
 80040be:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <detect_heartbeat+0x28c>)
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff fc4d 	bl	8003960 <MinMaxAvgStatistic_Average>
 80040c6:	1c03      	adds	r3, r0, #0
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 80040c8:	1c19      	adds	r1, r3, #0
 80040ca:	1c20      	adds	r0, r4, #0
 80040cc:	f7fc fd38 	bl	8000b40 <__aeabi_fdiv>
 80040d0:	1c03      	adds	r3, r0, #0
 80040d2:	1c19      	adds	r1, r3, #0
 80040d4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80040d6:	f7fc fd33 	bl	8000b40 <__aeabi_fdiv>
 80040da:	1c03      	adds	r3, r0, #0
 80040dc:	663b      	str	r3, [r7, #96]	@ 0x60
                    float spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 80040de:	4b55      	ldr	r3, [pc, #340]	@ (8004234 <detect_heartbeat+0x290>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80040e4:	1c18      	adds	r0, r3, #0
 80040e6:	f7fc ff11 	bl	8000f0c <__aeabi_fmul>
 80040ea:	1c03      	adds	r3, r0, #0
 80040ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80040ee:	1c18      	adds	r0, r3, #0
 80040f0:	f7fc ff0c 	bl	8000f0c <__aeabi_fmul>
 80040f4:	1c03      	adds	r3, r0, #0
 80040f6:	1c1c      	adds	r4, r3, #0
 80040f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004238 <detect_heartbeat+0x294>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80040fe:	1c18      	adds	r0, r3, #0
 8004100:	f7fc ff04 	bl	8000f0c <__aeabi_fmul>
 8004104:	1c03      	adds	r3, r0, #0
 8004106:	1c19      	adds	r1, r3, #0
 8004108:	1c20      	adds	r0, r4, #0
 800410a:	f7fc fb8f 	bl	800082c <__aeabi_fadd>
 800410e:	1c03      	adds	r3, r0, #0
 8004110:	1c1a      	adds	r2, r3, #0
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <detect_heartbeat+0x298>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	1c19      	adds	r1, r3, #0
 8004118:	1c10      	adds	r0, r2, #0
 800411a:	f7fc fb87 	bl	800082c <__aeabi_fadd>
 800411e:	1c03      	adds	r3, r0, #0
 8004120:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    spo2 = fmaxf(0, fminf(100, spo2));  // Constrain SpO2 between 0 and 100
 8004122:	4a47      	ldr	r2, [pc, #284]	@ (8004240 <detect_heartbeat+0x29c>)
 8004124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004126:	1c11      	adds	r1, r2, #0
 8004128:	1c18      	adds	r0, r3, #0
 800412a:	f007 ffc0 	bl	800c0ae <fminf>
 800412e:	1c03      	adds	r3, r0, #0
 8004130:	2200      	movs	r2, #0
 8004132:	1c11      	adds	r1, r2, #0
 8004134:	1c18      	adds	r0, r3, #0
 8004136:	f007 ffa4 	bl	800c082 <fmaxf>
 800413a:	1c03      	adds	r3, r0, #0
 800413c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    if (kEnableAveraging) {
 800413e:	2301      	movs	r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d038      	beq.n	80041b6 <detect_heartbeat+0x212>
                        int average_bpm = MovingAverageFilter_Process(&averager_bpm, bpm);
 8004144:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004146:	f7fd fa45 	bl	80015d4 <__aeabi_ui2f>
 800414a:	1c02      	adds	r2, r0, #0
 800414c:	4b3d      	ldr	r3, [pc, #244]	@ (8004244 <detect_heartbeat+0x2a0>)
 800414e:	1c11      	adds	r1, r2, #0
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff fd91 	bl	8003c78 <MovingAverageFilter_Process>
 8004156:	1c03      	adds	r3, r0, #0
 8004158:	1c18      	adds	r0, r3, #0
 800415a:	f7fd f9cf 	bl	80014fc <__aeabi_f2iz>
 800415e:	0003      	movs	r3, r0
 8004160:	65bb      	str	r3, [r7, #88]	@ 0x58
                        float average_spo2 = MovingAverageFilter_Process(&averager_spo2, spo2);
 8004162:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004164:	4b38      	ldr	r3, [pc, #224]	@ (8004248 <detect_heartbeat+0x2a4>)
 8004166:	1c11      	adds	r1, r2, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff fd85 	bl	8003c78 <MovingAverageFilter_Process>
 800416e:	1c03      	adds	r3, r0, #0
 8004170:	657b      	str	r3, [r7, #84]	@ 0x54
                        if (averager_bpm.count >= kSampleThreshold) {
 8004172:	4b34      	ldr	r3, [pc, #208]	@ (8004244 <detect_heartbeat+0x2a0>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	220a      	movs	r2, #10
 8004178:	4293      	cmp	r3, r2
 800417a:	db38      	blt.n	80041ee <detect_heartbeat+0x24a>
                            snprintf(message, sizeof(message), "Heart Rate (avg, bpm): %d\n\r", average_bpm);
 800417c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800417e:	4a33      	ldr	r2, [pc, #204]	@ (800424c <detect_heartbeat+0x2a8>)
 8004180:	2414      	movs	r4, #20
 8004182:	1938      	adds	r0, r7, r4
 8004184:	2140      	movs	r1, #64	@ 0x40
 8004186:	f004 f9fd 	bl	8008584 <sniprintf>
                            send_uart(message);
 800418a:	193b      	adds	r3, r7, r4
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff fdcf 	bl	8003d30 <send_uart>
                            snprintf(message, sizeof(message), "SpO2 (avg, %%): %.2f\n\r", average_spo2);
 8004192:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004194:	f7ff f91c 	bl	80033d0 <__aeabi_f2d>
 8004198:	0002      	movs	r2, r0
 800419a:	000b      	movs	r3, r1
 800419c:	492c      	ldr	r1, [pc, #176]	@ (8004250 <detect_heartbeat+0x2ac>)
 800419e:	1938      	adds	r0, r7, r4
 80041a0:	9200      	str	r2, [sp, #0]
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	000a      	movs	r2, r1
 80041a6:	2140      	movs	r1, #64	@ 0x40
 80041a8:	f004 f9ec 	bl	8008584 <sniprintf>
                            send_uart(message);
 80041ac:	193b      	adds	r3, r7, r4
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fdbe 	bl	8003d30 <send_uart>
 80041b4:	e01b      	b.n	80041ee <detect_heartbeat+0x24a>
                        snprintf(message, sizeof(message), "Heart Rate (current, bpm): %lu\n\r", bpm);
 80041b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b8:	4a26      	ldr	r2, [pc, #152]	@ (8004254 <detect_heartbeat+0x2b0>)
 80041ba:	2414      	movs	r4, #20
 80041bc:	1938      	adds	r0, r7, r4
 80041be:	2140      	movs	r1, #64	@ 0x40
 80041c0:	f004 f9e0 	bl	8008584 <sniprintf>
                        send_uart(message);
 80041c4:	193b      	adds	r3, r7, r4
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7ff fdb2 	bl	8003d30 <send_uart>
                        snprintf(message, sizeof(message), "SpO2 (current, %%): %.2f\n\r", spo2);
 80041cc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80041ce:	f7ff f8ff 	bl	80033d0 <__aeabi_f2d>
 80041d2:	0002      	movs	r2, r0
 80041d4:	000b      	movs	r3, r1
 80041d6:	4920      	ldr	r1, [pc, #128]	@ (8004258 <detect_heartbeat+0x2b4>)
 80041d8:	1938      	adds	r0, r7, r4
 80041da:	9200      	str	r2, [sp, #0]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	000a      	movs	r2, r1
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	f004 f9cf 	bl	8008584 <sniprintf>
                        send_uart(message);
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff fda1 	bl	8003d30 <send_uart>
            last_heartbeat = crossed_time;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <detect_heartbeat+0x278>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <detect_heartbeat+0x280>)
 80041f4:	601a      	str	r2, [r3, #0]
            crossed = false;
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <detect_heartbeat+0x274>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
            MinMaxAvgStatistic_Reset(&stat_red);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <detect_heartbeat+0x288>)
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fb84 	bl	800390c <MinMaxAvgStatistic_Reset>
            MinMaxAvgStatistic_Reset(&stat_ir);
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <detect_heartbeat+0x28c>)
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fb80 	bl	800390c <MinMaxAvgStatistic_Reset>
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b01b      	add	sp, #108	@ 0x6c
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	2000000c 	.word	0x2000000c
 8004218:	20000345 	.word	0x20000345
 800421c:	20000348 	.word	0x20000348
 8004220:	c4fa0000 	.word	0xc4fa0000
 8004224:	2000033c 	.word	0x2000033c
 8004228:	0000ea60 	.word	0x0000ea60
 800422c:	2000034c 	.word	0x2000034c
 8004230:	2000035c 	.word	0x2000035c
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004
 800423c:	20000008 	.word	0x20000008
 8004240:	42c80000 	.word	0x42c80000
 8004244:	2000031c 	.word	0x2000031c
 8004248:	2000032c 	.word	0x2000032c
 800424c:	0800c378 	.word	0x0800c378
 8004250:	0800c394 	.word	0x0800c394
 8004254:	0800c3ac 	.word	0x0800c3ac
 8004258:	0800c3d0 	.word	0x0800c3d0

0800425c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b097      	sub	sp, #92	@ 0x5c
 8004260:	af02      	add	r7, sp, #8
 8004262:	0002      	movs	r2, r0
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == temp_Pin) {
 8004268:	1dbb      	adds	r3, r7, #6
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	429a      	cmp	r2, r3
 8004272:	d117      	bne.n	80042a4 <HAL_GPIO_EXTI_Callback+0x48>
        // Temperature interrupt detected, read and print temperature
        float temperature = MAX30102_ReadTemperature(&hi2c1);
 8004274:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_GPIO_EXTI_Callback+0x50>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7ff faae 	bl	80037d8 <MAX30102_ReadTemperature>
 800427c:	1c03      	adds	r3, r0, #0
 800427e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        char temp_message[64];
        snprintf(temp_message, sizeof(temp_message), "Temperature: %.2f°C\r\n", temperature);
 8004280:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004282:	f7ff f8a5 	bl	80033d0 <__aeabi_f2d>
 8004286:	0002      	movs	r2, r0
 8004288:	000b      	movs	r3, r1
 800428a:	4909      	ldr	r1, [pc, #36]	@ (80042b0 <HAL_GPIO_EXTI_Callback+0x54>)
 800428c:	240c      	movs	r4, #12
 800428e:	1938      	adds	r0, r7, r4
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	000a      	movs	r2, r1
 8004296:	2140      	movs	r1, #64	@ 0x40
 8004298:	f004 f974 	bl	8008584 <sniprintf>
        send_uart(temp_message);
 800429c:	193b      	adds	r3, r7, r4
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff fd46 	bl	8003d30 <send_uart>
    }
}
 80042a4:	46c0      	nop			@ (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b015      	add	sp, #84	@ 0x54
 80042aa:	bd90      	pop	{r4, r7, pc}
 80042ac:	20000288 	.word	0x20000288
 80042b0:	0800c3ec 	.word	0x0800c3ec

080042b4 <SystemClock_Config>:
void SystemClock_Config(void)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b09f      	sub	sp, #124	@ 0x7c
 80042b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ba:	2440      	movs	r4, #64	@ 0x40
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	0018      	movs	r0, r3
 80042c0:	2338      	movs	r3, #56	@ 0x38
 80042c2:	001a      	movs	r2, r3
 80042c4:	2100      	movs	r1, #0
 80042c6:	f004 f9fd 	bl	80086c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ca:	232c      	movs	r3, #44	@ 0x2c
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	0018      	movs	r0, r3
 80042d0:	2314      	movs	r3, #20
 80042d2:	001a      	movs	r2, r3
 80042d4:	2100      	movs	r1, #0
 80042d6:	f004 f9f5 	bl	80086c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	0018      	movs	r0, r3
 80042de:	2328      	movs	r3, #40	@ 0x28
 80042e0:	001a      	movs	r2, r3
 80042e2:	2100      	movs	r1, #0
 80042e4:	f004 f9ee 	bl	80086c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e8:	4b27      	ldr	r3, [pc, #156]	@ (8004388 <SystemClock_Config+0xd4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <SystemClock_Config+0xd8>)
 80042ee:	401a      	ands	r2, r3
 80042f0:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <SystemClock_Config+0xd4>)
 80042f2:	2180      	movs	r1, #128	@ 0x80
 80042f4:	0109      	lsls	r1, r1, #4
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80042fa:	0021      	movs	r1, r4
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	2210      	movs	r2, #16
 8004300:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004302:	187b      	adds	r3, r7, r1
 8004304:	2201      	movs	r2, #1
 8004306:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004308:	187b      	adds	r3, r7, r1
 800430a:	2200      	movs	r2, #0
 800430c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800430e:	187b      	adds	r3, r7, r1
 8004310:	22a0      	movs	r2, #160	@ 0xa0
 8004312:	0212      	lsls	r2, r2, #8
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800431c:	187b      	adds	r3, r7, r1
 800431e:	0018      	movs	r0, r3
 8004320:	f001 fcaa 	bl	8005c78 <HAL_RCC_OscConfig>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004328:	f000 f93e 	bl	80045a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800432c:	212c      	movs	r1, #44	@ 0x2c
 800432e:	187b      	adds	r3, r7, r1
 8004330:	220f      	movs	r2, #15
 8004332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004334:	187b      	adds	r3, r7, r1
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004340:	187b      	adds	r3, r7, r1
 8004342:	2200      	movs	r2, #0
 8004344:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800434c:	187b      	adds	r3, r7, r1
 800434e:	2100      	movs	r1, #0
 8004350:	0018      	movs	r0, r3
 8004352:	f002 f865 	bl	8006420 <HAL_RCC_ClockConfig>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d001      	beq.n	800435e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800435a:	f000 f925 	bl	80045a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	220a      	movs	r2, #10
 8004362:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	0018      	movs	r0, r3
 8004374:	f002 fa78 	bl	8006868 <HAL_RCCEx_PeriphCLKConfig>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800437c:	f000 f914 	bl	80045a8 <Error_Handler>
  }
}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b01f      	add	sp, #124	@ 0x7c
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	40007000 	.word	0x40007000
 800438c:	ffffe7ff 	.word	0xffffe7ff

08004390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004394:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <MX_I2C1_Init+0x78>)
 8004396:	4a1d      	ldr	r2, [pc, #116]	@ (800440c <MX_I2C1_Init+0x7c>)
 8004398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800439a:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <MX_I2C1_Init+0x78>)
 800439c:	22c1      	movs	r2, #193	@ 0xc1
 800439e:	00d2      	lsls	r2, r2, #3
 80043a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043a2:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043a8:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043ae:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043b4:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043ba:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 fdd0 	bl	8004f74 <HAL_I2C_Init>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d001      	beq.n	80043dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043d8:	f000 f8e6 	bl	80045a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043de:	2100      	movs	r1, #0
 80043e0:	0018      	movs	r0, r3
 80043e2:	f001 fbb1 	bl	8005b48 <HAL_I2CEx_ConfigAnalogFilter>
 80043e6:	1e03      	subs	r3, r0, #0
 80043e8:	d001      	beq.n	80043ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80043ea:	f000 f8dd 	bl	80045a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043ee:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <MX_I2C1_Init+0x78>)
 80043f0:	2100      	movs	r1, #0
 80043f2:	0018      	movs	r0, r3
 80043f4:	f001 fbf4 	bl	8005be0 <HAL_I2CEx_ConfigDigitalFilter>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80043fc:	f000 f8d4 	bl	80045a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	20000288 	.word	0x20000288
 800440c:	40005400 	.word	0x40005400

08004410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004416:	4a15      	ldr	r2, [pc, #84]	@ (800446c <MX_USART2_UART_Init+0x5c>)
 8004418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800441a:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 800441c:	22e1      	movs	r2, #225	@ 0xe1
 800441e:	0252      	lsls	r2, r2, #9
 8004420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004428:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800442e:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004436:	220c      	movs	r2, #12
 8004438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 800443c:	2200      	movs	r2, #0
 800443e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004440:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004448:	2200      	movs	r2, #0
 800444a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800444c:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 800444e:	2200      	movs	r2, #0
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004452:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <MX_USART2_UART_Init+0x58>)
 8004454:	0018      	movs	r0, r3
 8004456:	f002 fba5 	bl	8006ba4 <HAL_UART_Init>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d001      	beq.n	8004462 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800445e:	f000 f8a3 	bl	80045a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000200 	.word	0x20000200
 800446c:	40004400 	.word	0x40004400

08004470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b08b      	sub	sp, #44	@ 0x2c
 8004474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004476:	2414      	movs	r4, #20
 8004478:	193b      	adds	r3, r7, r4
 800447a:	0018      	movs	r0, r3
 800447c:	2314      	movs	r3, #20
 800447e:	001a      	movs	r2, r3
 8004480:	2100      	movs	r1, #0
 8004482:	f004 f91f 	bl	80086c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004486:	4b45      	ldr	r3, [pc, #276]	@ (800459c <MX_GPIO_Init+0x12c>)
 8004488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448a:	4b44      	ldr	r3, [pc, #272]	@ (800459c <MX_GPIO_Init+0x12c>)
 800448c:	2104      	movs	r1, #4
 800448e:	430a      	orrs	r2, r1
 8004490:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004492:	4b42      	ldr	r3, [pc, #264]	@ (800459c <MX_GPIO_Init+0x12c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	2204      	movs	r2, #4
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800449e:	4b3f      	ldr	r3, [pc, #252]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4b3e      	ldr	r3, [pc, #248]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	430a      	orrs	r2, r1
 80044a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044aa:	4b3c      	ldr	r3, [pc, #240]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b6:	4b39      	ldr	r3, [pc, #228]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ba:	4b38      	ldr	r3, [pc, #224]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044bc:	2101      	movs	r1, #1
 80044be:	430a      	orrs	r2, r1
 80044c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044c2:	4b36      	ldr	r3, [pc, #216]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ce:	4b33      	ldr	r3, [pc, #204]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d2:	4b32      	ldr	r3, [pc, #200]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044d4:	2102      	movs	r1, #2
 80044d6:	430a      	orrs	r2, r1
 80044d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044da:	4b30      	ldr	r3, [pc, #192]	@ (800459c <MX_GPIO_Init+0x12c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	2202      	movs	r2, #2
 80044e0:	4013      	ands	r3, r2
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80044e6:	23a0      	movs	r3, #160	@ 0xa0
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	2200      	movs	r2, #0
 80044ec:	2120      	movs	r1, #32
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 fd06 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	0192      	lsls	r2, r2, #6
 80044fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044fc:	193b      	adds	r3, r7, r4
 80044fe:	2284      	movs	r2, #132	@ 0x84
 8004500:	0392      	lsls	r2, r2, #14
 8004502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	193b      	adds	r3, r7, r4
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800450a:	193b      	adds	r3, r7, r4
 800450c:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <MX_GPIO_Init+0x130>)
 800450e:	0019      	movs	r1, r3
 8004510:	0010      	movs	r0, r2
 8004512:	f000 fb77 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004516:	193b      	adds	r3, r7, r4
 8004518:	2220      	movs	r2, #32
 800451a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451c:	193b      	adds	r3, r7, r4
 800451e:	2201      	movs	r2, #1
 8004520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	193b      	adds	r3, r7, r4
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004528:	193b      	adds	r3, r7, r4
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800452e:	193a      	adds	r2, r7, r4
 8004530:	23a0      	movs	r3, #160	@ 0xa0
 8004532:	05db      	lsls	r3, r3, #23
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fb64 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800453c:	0021      	movs	r1, r4
 800453e:	187b      	adds	r3, r7, r1
 8004540:	2280      	movs	r2, #128	@ 0x80
 8004542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2288      	movs	r2, #136	@ 0x88
 8004548:	0352      	lsls	r2, r2, #13
 800454a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	187b      	adds	r3, r7, r1
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004552:	000c      	movs	r4, r1
 8004554:	187b      	adds	r3, r7, r1
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <MX_GPIO_Init+0x130>)
 8004558:	0019      	movs	r1, r3
 800455a:	0010      	movs	r0, r2
 800455c:	f000 fb52 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 8004560:	0021      	movs	r1, r4
 8004562:	187b      	adds	r3, r7, r1
 8004564:	2280      	movs	r2, #128	@ 0x80
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800456a:	187b      	adds	r3, r7, r1
 800456c:	2284      	movs	r2, #132	@ 0x84
 800456e:	0392      	lsls	r2, r2, #14
 8004570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	2201      	movs	r2, #1
 8004576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8004578:	187b      	adds	r3, r7, r1
 800457a:	4a0a      	ldr	r2, [pc, #40]	@ (80045a4 <MX_GPIO_Init+0x134>)
 800457c:	0019      	movs	r1, r3
 800457e:	0010      	movs	r0, r2
 8004580:	f000 fb40 	bl	8004c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	2101      	movs	r1, #1
 8004588:	2007      	movs	r0, #7
 800458a:	f000 fb09 	bl	8004ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800458e:	2007      	movs	r0, #7
 8004590:	f000 fb1b 	bl	8004bca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b00b      	add	sp, #44	@ 0x2c
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	50000800 	.word	0x50000800
 80045a4:	50000400 	.word	0x50000400

080045a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045ac:	b672      	cpsid	i
}
 80045ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	e7fd      	b.n	80045b0 <Error_Handler+0x8>

080045b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <HAL_MspInit+0x24>)
 80045ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_MspInit+0x24>)
 80045be:	2101      	movs	r1, #1
 80045c0:	430a      	orrs	r2, r1
 80045c2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <HAL_MspInit+0x24>)
 80045c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c8:	4b03      	ldr	r3, [pc, #12]	@ (80045d8 <HAL_MspInit+0x24>)
 80045ca:	2180      	movs	r1, #128	@ 0x80
 80045cc:	0549      	lsls	r1, r1, #21
 80045ce:	430a      	orrs	r2, r1
 80045d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000

080045dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b089      	sub	sp, #36	@ 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	240c      	movs	r4, #12
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	0018      	movs	r0, r3
 80045ea:	2314      	movs	r3, #20
 80045ec:	001a      	movs	r2, r3
 80045ee:	2100      	movs	r1, #0
 80045f0:	f004 f868 	bl	80086c4 <memset>
  if(hi2c->Instance==I2C1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a18      	ldr	r2, [pc, #96]	@ (800465c <HAL_I2C_MspInit+0x80>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d12a      	bne.n	8004654 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fe:	4b18      	ldr	r3, [pc, #96]	@ (8004660 <HAL_I2C_MspInit+0x84>)
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <HAL_I2C_MspInit+0x84>)
 8004604:	2101      	movs	r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	62da      	str	r2, [r3, #44]	@ 0x2c
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_I2C_MspInit+0x84>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004616:	193b      	adds	r3, r7, r4
 8004618:	22c0      	movs	r2, #192	@ 0xc0
 800461a:	00d2      	lsls	r2, r2, #3
 800461c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800461e:	0021      	movs	r1, r4
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2212      	movs	r2, #18
 8004624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2203      	movs	r2, #3
 8004630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2206      	movs	r2, #6
 8004636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	187a      	adds	r2, r7, r1
 800463a:	23a0      	movs	r3, #160	@ 0xa0
 800463c:	05db      	lsls	r3, r3, #23
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fadf 	bl	8004c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <HAL_I2C_MspInit+0x84>)
 8004648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_I2C_MspInit+0x84>)
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	0389      	lsls	r1, r1, #14
 8004650:	430a      	orrs	r2, r1
 8004652:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b009      	add	sp, #36	@ 0x24
 800465a:	bd90      	pop	{r4, r7, pc}
 800465c:	40005400 	.word	0x40005400
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b089      	sub	sp, #36	@ 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	240c      	movs	r4, #12
 800466e:	193b      	adds	r3, r7, r4
 8004670:	0018      	movs	r0, r3
 8004672:	2314      	movs	r3, #20
 8004674:	001a      	movs	r2, r3
 8004676:	2100      	movs	r1, #0
 8004678:	f004 f824 	bl	80086c4 <memset>
  if(huart->Instance==USART2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <HAL_UART_MspInit+0x80>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d129      	bne.n	80046da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004686:	4b18      	ldr	r3, [pc, #96]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 8004688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800468a:	4b17      	ldr	r3, [pc, #92]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 800468c:	2180      	movs	r1, #128	@ 0x80
 800468e:	0289      	lsls	r1, r1, #10
 8004690:	430a      	orrs	r2, r1
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004694:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 8004696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 800469a:	2101      	movs	r1, #1
 800469c:	430a      	orrs	r2, r1
 800469e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	2201      	movs	r2, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046ac:	0021      	movs	r1, r4
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	220c      	movs	r2, #12
 80046b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	2202      	movs	r2, #2
 80046b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	2203      	movs	r2, #3
 80046c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	2204      	movs	r2, #4
 80046ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	187a      	adds	r2, r7, r1
 80046ce:	23a0      	movs	r3, #160	@ 0xa0
 80046d0:	05db      	lsls	r3, r3, #23
 80046d2:	0011      	movs	r1, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fa95 	bl	8004c04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b009      	add	sp, #36	@ 0x24
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40021000 	.word	0x40021000

080046ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	e7fd      	b.n	80046f0 <NMI_Handler+0x4>

080046f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	e7fd      	b.n	80046f8 <HardFault_Handler+0x4>

080046fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004714:	f000 f958 	bl	80049c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004718:	46c0      	nop			@ (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004722:	2080      	movs	r0, #128	@ 0x80
 8004724:	f000 fc0a 	bl	8004f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(temp_Pin);
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	0018      	movs	r0, r3
 800472e:	f000 fc05 	bl	8004f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	0018      	movs	r0, r3
 8004738:	f000 fc00 	bl	8004f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	af00      	add	r7, sp, #0
  return 1;
 8004746:	2301      	movs	r3, #1
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_kill>:

int _kill(int pid, int sig)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004758:	f004 f80e 	bl	8008778 <__errno>
 800475c:	0003      	movs	r3, r0
 800475e:	2216      	movs	r2, #22
 8004760:	601a      	str	r2, [r3, #0]
  return -1;
 8004762:	2301      	movs	r3, #1
 8004764:	425b      	negs	r3, r3
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}

0800476e <_exit>:

void _exit (int status)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004776:	2301      	movs	r3, #1
 8004778:	425a      	negs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff ffe5 	bl	800474e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004784:	46c0      	nop			@ (mov r8, r8)
 8004786:	e7fd      	b.n	8004784 <_exit+0x16>

08004788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e00a      	b.n	80047b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800479a:	e000      	b.n	800479e <_read+0x16>
 800479c:	bf00      	nop
 800479e:	0001      	movs	r1, r0
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	60ba      	str	r2, [r7, #8]
 80047a6:	b2ca      	uxtb	r2, r1
 80047a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3301      	adds	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dbf0      	blt.n	800479a <_read+0x12>
  }

  return len;
 80047b8:	687b      	ldr	r3, [r7, #4]
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b006      	add	sp, #24
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e009      	b.n	80047e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	60ba      	str	r2, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	0018      	movs	r0, r3
 80047de:	e000      	b.n	80047e2 <_write+0x20>
 80047e0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	3301      	adds	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	dbf1      	blt.n	80047d4 <_write+0x12>
  }
  return len;
 80047f0:	687b      	ldr	r3, [r7, #4]
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b006      	add	sp, #24
 80047f8:	bd80      	pop	{r7, pc}

080047fa <_close>:

int _close(int file)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004802:	2301      	movs	r3, #1
 8004804:	425b      	negs	r3, r3
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}

0800480e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2280      	movs	r2, #128	@ 0x80
 800481c:	0192      	lsls	r2, r2, #6
 800481e:	605a      	str	r2, [r3, #4]
  return 0;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}

0800482a <_isatty>:

int _isatty(int file)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004832:	2301      	movs	r3, #1
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}

0800483c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800485c:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <_sbrk+0x5c>)
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <_sbrk+0x60>)
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <_sbrk+0x64>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004870:	4b11      	ldr	r3, [pc, #68]	@ (80048b8 <_sbrk+0x64>)
 8004872:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <_sbrk+0x68>)
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <_sbrk+0x64>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d207      	bcs.n	8004894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004884:	f003 ff78 	bl	8008778 <__errno>
 8004888:	0003      	movs	r3, r0
 800488a:	220c      	movs	r2, #12
 800488c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800488e:	2301      	movs	r3, #1
 8004890:	425b      	negs	r3, r3
 8004892:	e009      	b.n	80048a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004894:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <_sbrk+0x64>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800489a:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <_sbrk+0x64>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	18d2      	adds	r2, r2, r3
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <_sbrk+0x64>)
 80048a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80048a6:	68fb      	ldr	r3, [r7, #12]
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b006      	add	sp, #24
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20005000 	.word	0x20005000
 80048b4:	00000400 	.word	0x00000400
 80048b8:	200004fc 	.word	0x200004fc
 80048bc:	20000650 	.word	0x20000650

080048c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80048cc:	480d      	ldr	r0, [pc, #52]	@ (8004904 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80048ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048d0:	f7ff fff6 	bl	80048c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048d4:	480c      	ldr	r0, [pc, #48]	@ (8004908 <LoopForever+0x6>)
  ldr r1, =_edata
 80048d6:	490d      	ldr	r1, [pc, #52]	@ (800490c <LoopForever+0xa>)
  ldr r2, =_sidata
 80048d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <LoopForever+0xe>)
  movs r3, #0
 80048da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048dc:	e002      	b.n	80048e4 <LoopCopyDataInit>

080048de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048e2:	3304      	adds	r3, #4

080048e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048e8:	d3f9      	bcc.n	80048de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004918 <LoopForever+0x16>)
  movs r3, #0
 80048ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f0:	e001      	b.n	80048f6 <LoopFillZerobss>

080048f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f4:	3204      	adds	r2, #4

080048f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048f8:	d3fb      	bcc.n	80048f2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80048fa:	f003 ff43 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048fe:	f7ff fa2d 	bl	8003d5c <main>

08004902 <LoopForever>:

LoopForever:
    b LoopForever
 8004902:	e7fe      	b.n	8004902 <LoopForever>
   ldr   r0, =_estack
 8004904:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800490c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004910:	0800c980 	.word	0x0800c980
  ldr r2, =_sbss
 8004914:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004918:	20000650 	.word	0x20000650

0800491c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800491c:	e7fe      	b.n	800491c <ADC1_COMP_IRQHandler>
	...

08004920 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004926:	1dfb      	adds	r3, r7, #7
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_Init+0x3c>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_Init+0x3c>)
 8004932:	2140      	movs	r1, #64	@ 0x40
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004938:	2000      	movs	r0, #0
 800493a:	f000 f811 	bl	8004960 <HAL_InitTick>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d003      	beq.n	800494a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e001      	b.n	800494e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800494a:	f7ff fe33 	bl	80045b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800494e:	1dfb      	adds	r3, r7, #7
 8004950:	781b      	ldrb	r3, [r3, #0]
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	40022000 	.word	0x40022000

08004960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <HAL_InitTick+0x5c>)
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <HAL_InitTick+0x60>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	23fa      	movs	r3, #250	@ 0xfa
 8004974:	0098      	lsls	r0, r3, #2
 8004976:	f7fb fbe3 	bl	8000140 <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	0019      	movs	r1, r3
 800497e:	0020      	movs	r0, r4
 8004980:	f7fb fbde 	bl	8000140 <__udivsi3>
 8004984:	0003      	movs	r3, r0
 8004986:	0018      	movs	r0, r3
 8004988:	f000 f92f 	bl	8004bea <HAL_SYSTICK_Config>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e00f      	b.n	80049b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d80b      	bhi.n	80049b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	2301      	movs	r3, #1
 800499e:	425b      	negs	r3, r3
 80049a0:	2200      	movs	r2, #0
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 f8fc 	bl	8004ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_InitTick+0x64>)
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b003      	add	sp, #12
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	20000010 	.word	0x20000010
 80049c0:	20000018 	.word	0x20000018
 80049c4:	20000014 	.word	0x20000014

080049c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_IncTick+0x1c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	001a      	movs	r2, r3
 80049d2:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_IncTick+0x20>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	18d2      	adds	r2, r2, r3
 80049d8:	4b03      	ldr	r3, [pc, #12]	@ (80049e8 <HAL_IncTick+0x20>)
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	46c0      	nop			@ (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	20000018 	.word	0x20000018
 80049e8:	20000500 	.word	0x20000500

080049ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  return uwTick;
 80049f0:	4b02      	ldr	r3, [pc, #8]	@ (80049fc <HAL_GetTick+0x10>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	20000500 	.word	0x20000500

08004a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7ff fff0 	bl	80049ec <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	d005      	beq.n	8004a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <HAL_Delay+0x44>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	001a      	movs	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	f7ff ffe0 	bl	80049ec <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d8f7      	bhi.n	8004a28 <HAL_Delay+0x28>
  {
  }
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b004      	add	sp, #16
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	20000018 	.word	0x20000018

08004a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	0002      	movs	r2, r0
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a54:	1dfb      	adds	r3, r7, #7
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a5a:	d809      	bhi.n	8004a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5c:	1dfb      	adds	r3, r7, #7
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	001a      	movs	r2, r3
 8004a62:	231f      	movs	r3, #31
 8004a64:	401a      	ands	r2, r3
 8004a66:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <__NVIC_EnableIRQ+0x30>)
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4091      	lsls	r1, r2
 8004a6c:	000a      	movs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]
  }
}
 8004a70:	46c0      	nop			@ (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b002      	add	sp, #8
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	e000e100 	.word	0xe000e100

08004a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	0002      	movs	r2, r0
 8004a84:	6039      	str	r1, [r7, #0]
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a8a:	1dfb      	adds	r3, r7, #7
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a90:	d828      	bhi.n	8004ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a92:	4a2f      	ldr	r2, [pc, #188]	@ (8004b50 <__NVIC_SetPriority+0xd4>)
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	33c0      	adds	r3, #192	@ 0xc0
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	589b      	ldr	r3, [r3, r2]
 8004aa2:	1dfa      	adds	r2, r7, #7
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	400a      	ands	r2, r1
 8004aac:	00d2      	lsls	r2, r2, #3
 8004aae:	21ff      	movs	r1, #255	@ 0xff
 8004ab0:	4091      	lsls	r1, r2
 8004ab2:	000a      	movs	r2, r1
 8004ab4:	43d2      	mvns	r2, r2
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	22ff      	movs	r2, #255	@ 0xff
 8004ac0:	401a      	ands	r2, r3
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	2303      	movs	r3, #3
 8004aca:	4003      	ands	r3, r0
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ad0:	481f      	ldr	r0, [pc, #124]	@ (8004b50 <__NVIC_SetPriority+0xd4>)
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	430a      	orrs	r2, r1
 8004adc:	33c0      	adds	r3, #192	@ 0xc0
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ae2:	e031      	b.n	8004b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b54 <__NVIC_SetPriority+0xd8>)
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	0019      	movs	r1, r3
 8004aec:	230f      	movs	r3, #15
 8004aee:	400b      	ands	r3, r1
 8004af0:	3b08      	subs	r3, #8
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	3306      	adds	r3, #6
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	3304      	adds	r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1dfa      	adds	r2, r7, #7
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	0011      	movs	r1, r2
 8004b04:	2203      	movs	r2, #3
 8004b06:	400a      	ands	r2, r1
 8004b08:	00d2      	lsls	r2, r2, #3
 8004b0a:	21ff      	movs	r1, #255	@ 0xff
 8004b0c:	4091      	lsls	r1, r2
 8004b0e:	000a      	movs	r2, r1
 8004b10:	43d2      	mvns	r2, r2
 8004b12:	401a      	ands	r2, r3
 8004b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	22ff      	movs	r2, #255	@ 0xff
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	0018      	movs	r0, r3
 8004b24:	2303      	movs	r3, #3
 8004b26:	4003      	ands	r3, r0
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b2c:	4809      	ldr	r0, [pc, #36]	@ (8004b54 <__NVIC_SetPriority+0xd8>)
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	001c      	movs	r4, r3
 8004b34:	230f      	movs	r3, #15
 8004b36:	4023      	ands	r3, r4
 8004b38:	3b08      	subs	r3, #8
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	3306      	adds	r3, #6
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	18c3      	adds	r3, r0, r3
 8004b44:	3304      	adds	r3, #4
 8004b46:	601a      	str	r2, [r3, #0]
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b003      	add	sp, #12
 8004b4e:	bd90      	pop	{r4, r7, pc}
 8004b50:	e000e100 	.word	0xe000e100
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	1e5a      	subs	r2, r3, #1
 8004b64:	2380      	movs	r3, #128	@ 0x80
 8004b66:	045b      	lsls	r3, r3, #17
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d301      	bcc.n	8004b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e010      	b.n	8004b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <SysTick_Config+0x44>)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	3a01      	subs	r2, #1
 8004b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	425b      	negs	r3, r3
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7ff ff7c 	bl	8004a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <SysTick_Config+0x44>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8a:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <SysTick_Config+0x44>)
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	0018      	movs	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b002      	add	sp, #8
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	e000e010 	.word	0xe000e010

08004ba0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	210f      	movs	r1, #15
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	1c02      	adds	r2, r0, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	0011      	movs	r1, r2
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7ff ff5d 	bl	8004a7c <__NVIC_SetPriority>
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	1dfb      	adds	r3, r7, #7
 8004bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7ff ff33 	bl	8004a48 <__NVIC_EnableIRQ>
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7ff ffaf 	bl	8004b58 <SysTick_Config>
 8004bfa:	0003      	movs	r3, r0
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b002      	add	sp, #8
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c1a:	e155      	b.n	8004ec8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4091      	lsls	r1, r2
 8004c26:	000a      	movs	r2, r1
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d100      	bne.n	8004c34 <HAL_GPIO_Init+0x30>
 8004c32:	e146      	b.n	8004ec2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d005      	beq.n	8004c4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2203      	movs	r2, #3
 8004c46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d130      	bne.n	8004cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	0013      	movs	r3, r2
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	0013      	movs	r3, r2
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c82:	2201      	movs	r2, #1
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	409a      	lsls	r2, r3
 8004c88:	0013      	movs	r3, r2
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	2201      	movs	r2, #1
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d017      	beq.n	8004cea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	0013      	movs	r3, r2
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	0013      	movs	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d123      	bne.n	8004d3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	08da      	lsrs	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3208      	adds	r2, #8
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	58d3      	ldr	r3, [r2, r3]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2207      	movs	r2, #7
 8004d08:	4013      	ands	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	220f      	movs	r2, #15
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	0013      	movs	r3, r2
 8004d12:	43da      	mvns	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2107      	movs	r1, #7
 8004d22:	400b      	ands	r3, r1
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	409a      	lsls	r2, r3
 8004d28:	0013      	movs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	08da      	lsrs	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3208      	adds	r2, #8
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	6939      	ldr	r1, [r7, #16]
 8004d3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2203      	movs	r2, #3
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	401a      	ands	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	0013      	movs	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	23c0      	movs	r3, #192	@ 0xc0
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d100      	bne.n	8004d80 <HAL_GPIO_Init+0x17c>
 8004d7e:	e0a0      	b.n	8004ec2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d80:	4b57      	ldr	r3, [pc, #348]	@ (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d84:	4b56      	ldr	r3, [pc, #344]	@ (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004d86:	2101      	movs	r1, #1
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d8c:	4a55      	ldr	r2, [pc, #340]	@ (8004ee4 <HAL_GPIO_Init+0x2e0>)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	3302      	adds	r3, #2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	589b      	ldr	r3, [r3, r2]
 8004d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	4013      	ands	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	220f      	movs	r2, #15
 8004da4:	409a      	lsls	r2, r3
 8004da6:	0013      	movs	r3, r2
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	23a0      	movs	r3, #160	@ 0xa0
 8004db4:	05db      	lsls	r3, r3, #23
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d01f      	beq.n	8004dfa <HAL_GPIO_Init+0x1f6>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee8 <HAL_GPIO_Init+0x2e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d019      	beq.n	8004df6 <HAL_GPIO_Init+0x1f2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a49      	ldr	r2, [pc, #292]	@ (8004eec <HAL_GPIO_Init+0x2e8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a48      	ldr	r2, [pc, #288]	@ (8004ef0 <HAL_GPIO_Init+0x2ec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00d      	beq.n	8004dee <HAL_GPIO_Init+0x1ea>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a47      	ldr	r2, [pc, #284]	@ (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <HAL_GPIO_Init+0x1e6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a46      	ldr	r2, [pc, #280]	@ (8004ef8 <HAL_GPIO_Init+0x2f4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_GPIO_Init+0x1e2>
 8004de2:	2305      	movs	r3, #5
 8004de4:	e00a      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e008      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e006      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e004      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e002      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	2103      	movs	r1, #3
 8004e00:	400a      	ands	r2, r1
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	4093      	lsls	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e0c:	4935      	ldr	r1, [pc, #212]	@ (8004ee4 <HAL_GPIO_Init+0x2e0>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1a:	4b38      	ldr	r3, [pc, #224]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43da      	mvns	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	035b      	lsls	r3, r3, #13
 8004e32:	4013      	ands	r3, r2
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43da      	mvns	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	039b      	lsls	r3, r3, #14
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e68:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004e6e:	4b23      	ldr	r3, [pc, #140]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43da      	mvns	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	2380      	movs	r3, #128	@ 0x80
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	4013      	ands	r3, r2
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e98:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	025b      	lsls	r3, r3, #9
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8004efc <HAL_GPIO_Init+0x2f8>)
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	40da      	lsrs	r2, r3
 8004ed0:	1e13      	subs	r3, r2, #0
 8004ed2:	d000      	beq.n	8004ed6 <HAL_GPIO_Init+0x2d2>
 8004ed4:	e6a2      	b.n	8004c1c <HAL_GPIO_Init+0x18>
  }
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	46c0      	nop			@ (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b006      	add	sp, #24
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	50000400 	.word	0x50000400
 8004eec:	50000800 	.word	0x50000800
 8004ef0:	50000c00 	.word	0x50000c00
 8004ef4:	50001000 	.word	0x50001000
 8004ef8:	50001c00 	.word	0x50001c00
 8004efc:	40010400 	.word	0x40010400

08004f00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	0008      	movs	r0, r1
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	1cbb      	adds	r3, r7, #2
 8004f0e:	1c02      	adds	r2, r0, #0
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	1c7b      	adds	r3, r7, #1
 8004f14:	1c0a      	adds	r2, r1, #0
 8004f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f18:	1c7b      	adds	r3, r7, #1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f20:	1cbb      	adds	r3, r7, #2
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004f28:	e003      	b.n	8004f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004f2a:	1cbb      	adds	r3, r7, #2
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b002      	add	sp, #8
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	0002      	movs	r2, r0
 8004f44:	1dbb      	adds	r3, r7, #6
 8004f46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	1dba      	adds	r2, r7, #6
 8004f4e:	8812      	ldrh	r2, [r2, #0]
 8004f50:	4013      	ands	r3, r2
 8004f52:	d008      	beq.n	8004f66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f56:	1dba      	adds	r2, r7, #6
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f5c:	1dbb      	adds	r3, r7, #6
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7ff f97b 	bl	800425c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b002      	add	sp, #8
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	40010400 	.word	0x40010400

08004f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e082      	b.n	800508c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2241      	movs	r2, #65	@ 0x41
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2240      	movs	r2, #64	@ 0x40
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff fb1d 	bl	80045dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2241      	movs	r2, #65	@ 0x41
 8004fa6:	2124      	movs	r1, #36	@ 0x24
 8004fa8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	438a      	bics	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4934      	ldr	r1, [pc, #208]	@ (8005094 <HAL_I2C_Init+0x120>)
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4931      	ldr	r1, [pc, #196]	@ (8005098 <HAL_I2C_Init+0x124>)
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d108      	bne.n	8004ff2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2180      	movs	r1, #128	@ 0x80
 8004fea:	0209      	lsls	r1, r1, #8
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	e007      	b.n	8005002 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2184      	movs	r1, #132	@ 0x84
 8004ffc:	0209      	lsls	r1, r1, #8
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d104      	bne.n	8005014 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2280      	movs	r2, #128	@ 0x80
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	491f      	ldr	r1, [pc, #124]	@ (800509c <HAL_I2C_Init+0x128>)
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	491a      	ldr	r1, [pc, #104]	@ (8005098 <HAL_I2C_Init+0x124>)
 8005030:	400a      	ands	r2, r1
 8005032:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	431a      	orrs	r2, r3
 800503e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69d9      	ldr	r1, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2101      	movs	r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2241      	movs	r2, #65	@ 0x41
 8005078:	2120      	movs	r1, #32
 800507a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2242      	movs	r2, #66	@ 0x42
 8005086:	2100      	movs	r1, #0
 8005088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}
 8005094:	f0ffffff 	.word	0xf0ffffff
 8005098:	ffff7fff 	.word	0xffff7fff
 800509c:	02008000 	.word	0x02008000

080050a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	000c      	movs	r4, r1
 80050aa:	0010      	movs	r0, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	230a      	movs	r3, #10
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	1c22      	adds	r2, r4, #0
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	2308      	movs	r3, #8
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	1c02      	adds	r2, r0, #0
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	1dbb      	adds	r3, r7, #6
 80050c0:	1c0a      	adds	r2, r1, #0
 80050c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2241      	movs	r2, #65	@ 0x41
 80050c8:	5c9b      	ldrb	r3, [r3, r2]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d000      	beq.n	80050d2 <HAL_I2C_Mem_Write+0x32>
 80050d0:	e10c      	b.n	80052ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_I2C_Mem_Write+0x42>
 80050d8:	232c      	movs	r3, #44	@ 0x2c
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2280      	movs	r2, #128	@ 0x80
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0ff      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2240      	movs	r2, #64	@ 0x40
 80050f2:	5c9b      	ldrb	r3, [r3, r2]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_I2C_Mem_Write+0x5c>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0f8      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2240      	movs	r2, #64	@ 0x40
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005104:	f7ff fc72 	bl	80049ec <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	0219      	lsls	r1, r3, #8
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2319      	movs	r3, #25
 8005118:	2201      	movs	r2, #1
 800511a:	f000 fb0b 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 800511e:	1e03      	subs	r3, r0, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0e3      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2241      	movs	r2, #65	@ 0x41
 800512a:	2121      	movs	r1, #33	@ 0x21
 800512c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2242      	movs	r2, #66	@ 0x42
 8005132:	2140      	movs	r1, #64	@ 0x40
 8005134:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	222c      	movs	r2, #44	@ 0x2c
 8005146:	18ba      	adds	r2, r7, r2
 8005148:	8812      	ldrh	r2, [r2, #0]
 800514a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	881c      	ldrh	r4, [r3, #0]
 8005156:	2308      	movs	r3, #8
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	881a      	ldrh	r2, [r3, #0]
 800515c:	230a      	movs	r3, #10
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	8819      	ldrh	r1, [r3, #0]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	0023      	movs	r3, r4
 800516e:	f000 f9f9 	bl	8005564 <I2C_RequestMemoryWrite>
 8005172:	1e03      	subs	r3, r0, #0
 8005174:	d005      	beq.n	8005182 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2240      	movs	r2, #64	@ 0x40
 800517a:	2100      	movs	r1, #0
 800517c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0b5      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2bff      	cmp	r3, #255	@ 0xff
 800518a:	d911      	bls.n	80051b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005196:	b2da      	uxtb	r2, r3
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	045c      	lsls	r4, r3, #17
 800519c:	230a      	movs	r3, #10
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	8819      	ldrh	r1, [r3, #0]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	0023      	movs	r3, r4
 80051aa:	f000 fc93 	bl	8005ad4 <I2C_TransferConfig>
 80051ae:	e012      	b.n	80051d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	049c      	lsls	r4, r3, #18
 80051c4:	230a      	movs	r3, #10
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	8819      	ldrh	r1, [r3, #0]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	2300      	movs	r3, #0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	0023      	movs	r3, r4
 80051d2:	f000 fc7f 	bl	8005ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 faf7 	bl	80057d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80051e2:	1e03      	subs	r3, r0, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e081      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03a      	beq.n	800529a <HAL_I2C_Mem_Write+0x1fa>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d136      	bne.n	800529a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800522c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0013      	movs	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	@ 0x80
 800523a:	f000 fa7b 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e053      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2bff      	cmp	r3, #255	@ 0xff
 800524e:	d911      	bls.n	8005274 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	22ff      	movs	r2, #255	@ 0xff
 8005254:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525a:	b2da      	uxtb	r2, r3
 800525c:	2380      	movs	r3, #128	@ 0x80
 800525e:	045c      	lsls	r4, r3, #17
 8005260:	230a      	movs	r3, #10
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	8819      	ldrh	r1, [r3, #0]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	0023      	movs	r3, r4
 800526e:	f000 fc31 	bl	8005ad4 <I2C_TransferConfig>
 8005272:	e012      	b.n	800529a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005282:	b2da      	uxtb	r2, r3
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	049c      	lsls	r4, r3, #18
 8005288:	230a      	movs	r3, #10
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	8819      	ldrh	r1, [r3, #0]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	0023      	movs	r3, r4
 8005296:	f000 fc1d 	bl	8005ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d198      	bne.n	80051d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 fad6 	bl	800585c <I2C_WaitOnSTOPFlagUntilTimeout>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01a      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2220      	movs	r2, #32
 80052be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	490b      	ldr	r1, [pc, #44]	@ (80052f8 <HAL_I2C_Mem_Write+0x258>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2241      	movs	r2, #65	@ 0x41
 80052d4:	2120      	movs	r1, #32
 80052d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2242      	movs	r2, #66	@ 0x42
 80052dc:	2100      	movs	r1, #0
 80052de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2240      	movs	r2, #64	@ 0x40
 80052e4:	2100      	movs	r1, #0
 80052e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b007      	add	sp, #28
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	fe00e800 	.word	0xfe00e800

080052fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b089      	sub	sp, #36	@ 0x24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	000c      	movs	r4, r1
 8005306:	0010      	movs	r0, r2
 8005308:	0019      	movs	r1, r3
 800530a:	230a      	movs	r3, #10
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	1c22      	adds	r2, r4, #0
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	2308      	movs	r3, #8
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	1c02      	adds	r2, r0, #0
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	1dbb      	adds	r3, r7, #6
 800531c:	1c0a      	adds	r2, r1, #0
 800531e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2241      	movs	r2, #65	@ 0x41
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b20      	cmp	r3, #32
 800532a:	d000      	beq.n	800532e <HAL_I2C_Mem_Read+0x32>
 800532c:	e110      	b.n	8005550 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <HAL_I2C_Mem_Read+0x42>
 8005334:	232c      	movs	r3, #44	@ 0x2c
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2280      	movs	r2, #128	@ 0x80
 8005342:	0092      	lsls	r2, r2, #2
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e103      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2240      	movs	r2, #64	@ 0x40
 800534e:	5c9b      	ldrb	r3, [r3, r2]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_I2C_Mem_Read+0x5c>
 8005354:	2302      	movs	r3, #2
 8005356:	e0fc      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2240      	movs	r2, #64	@ 0x40
 800535c:	2101      	movs	r1, #1
 800535e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005360:	f7ff fb44 	bl	80049ec <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	0219      	lsls	r1, r3, #8
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2319      	movs	r3, #25
 8005374:	2201      	movs	r2, #1
 8005376:	f000 f9dd 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0e7      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2241      	movs	r2, #65	@ 0x41
 8005386:	2122      	movs	r1, #34	@ 0x22
 8005388:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2242      	movs	r2, #66	@ 0x42
 800538e:	2140      	movs	r1, #64	@ 0x40
 8005390:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	222c      	movs	r2, #44	@ 0x2c
 80053a2:	18ba      	adds	r2, r7, r2
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ae:	1dbb      	adds	r3, r7, #6
 80053b0:	881c      	ldrh	r4, [r3, #0]
 80053b2:	2308      	movs	r3, #8
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	230a      	movs	r3, #10
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	8819      	ldrh	r1, [r3, #0]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	0023      	movs	r3, r4
 80053ca:	f000 f92f 	bl	800562c <I2C_RequestMemoryRead>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d005      	beq.n	80053de <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2240      	movs	r2, #64	@ 0x40
 80053d6:	2100      	movs	r1, #0
 80053d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e0b9      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2bff      	cmp	r3, #255	@ 0xff
 80053e6:	d911      	bls.n	800540c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	22ff      	movs	r2, #255	@ 0xff
 80053ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	045c      	lsls	r4, r3, #17
 80053f8:	230a      	movs	r3, #10
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	8819      	ldrh	r1, [r3, #0]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	4b56      	ldr	r3, [pc, #344]	@ (800555c <HAL_I2C_Mem_Read+0x260>)
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	0023      	movs	r3, r4
 8005406:	f000 fb65 	bl	8005ad4 <I2C_TransferConfig>
 800540a:	e012      	b.n	8005432 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541a:	b2da      	uxtb	r2, r3
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	049c      	lsls	r4, r3, #18
 8005420:	230a      	movs	r3, #10
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	8819      	ldrh	r1, [r3, #0]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	4b4c      	ldr	r3, [pc, #304]	@ (800555c <HAL_I2C_Mem_Read+0x260>)
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	0023      	movs	r3, r4
 800542e:	f000 fb51 	bl	8005ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	0013      	movs	r3, r2
 800543c:	2200      	movs	r2, #0
 800543e:	2104      	movs	r1, #4
 8005440:	f000 f978 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 8005444:	1e03      	subs	r3, r0, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e082      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d03a      	beq.n	80054fe <HAL_I2C_Mem_Read+0x202>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d136      	bne.n	80054fe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	0013      	movs	r3, r2
 800549a:	2200      	movs	r2, #0
 800549c:	2180      	movs	r1, #128	@ 0x80
 800549e:	f000 f949 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e053      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2bff      	cmp	r3, #255	@ 0xff
 80054b2:	d911      	bls.n	80054d8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	22ff      	movs	r2, #255	@ 0xff
 80054b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	2380      	movs	r3, #128	@ 0x80
 80054c2:	045c      	lsls	r4, r3, #17
 80054c4:	230a      	movs	r3, #10
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	8819      	ldrh	r1, [r3, #0]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	0023      	movs	r3, r4
 80054d2:	f000 faff 	bl	8005ad4 <I2C_TransferConfig>
 80054d6:	e012      	b.n	80054fe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	049c      	lsls	r4, r3, #18
 80054ec:	230a      	movs	r3, #10
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	8819      	ldrh	r1, [r3, #0]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	0023      	movs	r3, r4
 80054fa:	f000 faeb 	bl	8005ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d194      	bne.n	8005432 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f9a4 	bl	800585c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d001      	beq.n	800551c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e01a      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2220      	movs	r2, #32
 8005522:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	490c      	ldr	r1, [pc, #48]	@ (8005560 <HAL_I2C_Mem_Read+0x264>)
 8005530:	400a      	ands	r2, r1
 8005532:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2241      	movs	r2, #65	@ 0x41
 8005538:	2120      	movs	r1, #32
 800553a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2242      	movs	r2, #66	@ 0x42
 8005540:	2100      	movs	r1, #0
 8005542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b007      	add	sp, #28
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	80002400 	.word	0x80002400
 8005560:	fe00e800 	.word	0xfe00e800

08005564 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005564:	b5b0      	push	{r4, r5, r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	000c      	movs	r4, r1
 800556e:	0010      	movs	r0, r2
 8005570:	0019      	movs	r1, r3
 8005572:	250a      	movs	r5, #10
 8005574:	197b      	adds	r3, r7, r5
 8005576:	1c22      	adds	r2, r4, #0
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	2308      	movs	r3, #8
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	1c02      	adds	r2, r0, #0
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	1c0a      	adds	r2, r1, #0
 8005586:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005588:	1dbb      	adds	r3, r7, #6
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	045c      	lsls	r4, r3, #17
 8005592:	197b      	adds	r3, r7, r5
 8005594:	8819      	ldrh	r1, [r3, #0]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4b23      	ldr	r3, [pc, #140]	@ (8005628 <I2C_RequestMemoryWrite+0xc4>)
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	0023      	movs	r3, r4
 800559e:	f000 fa99 	bl	8005ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 f911 	bl	80057d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d001      	beq.n	80055b6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e033      	b.n	800561e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055b6:	1dbb      	adds	r3, r7, #6
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055be:	2308      	movs	r3, #8
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80055cc:	e019      	b.n	8005602 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055ce:	2308      	movs	r3, #8
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e2:	6a39      	ldr	r1, [r7, #32]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f8f2 	bl	80057d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d001      	beq.n	80055f4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e014      	b.n	800561e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055f4:	2308      	movs	r3, #8
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	0013      	movs	r3, r2
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	f000 f890 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d001      	beq.n	800561c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bdb0      	pop	{r4, r5, r7, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	80002000 	.word	0x80002000

0800562c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800562c:	b5b0      	push	{r4, r5, r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	000c      	movs	r4, r1
 8005636:	0010      	movs	r0, r2
 8005638:	0019      	movs	r1, r3
 800563a:	250a      	movs	r5, #10
 800563c:	197b      	adds	r3, r7, r5
 800563e:	1c22      	adds	r2, r4, #0
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	2308      	movs	r3, #8
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	1c02      	adds	r2, r0, #0
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	1dbb      	adds	r3, r7, #6
 800564c:	1c0a      	adds	r2, r1, #0
 800564e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	197b      	adds	r3, r7, r5
 8005658:	8819      	ldrh	r1, [r3, #0]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	4b23      	ldr	r3, [pc, #140]	@ (80056ec <I2C_RequestMemoryRead+0xc0>)
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	f000 fa37 	bl	8005ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	6a39      	ldr	r1, [r7, #32]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f8af 	bl	80057d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005672:	1e03      	subs	r3, r0, #0
 8005674:	d001      	beq.n	800567a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e033      	b.n	80056e2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567a:	1dbb      	adds	r3, r7, #6
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005682:	2308      	movs	r3, #8
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005690:	e019      	b.n	80056c6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005692:	2308      	movs	r3, #8
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	b29b      	uxth	r3, r3
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a6:	6a39      	ldr	r1, [r7, #32]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 f890 	bl	80057d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80056b0:	1e03      	subs	r3, r0, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e014      	b.n	80056e2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b8:	2308      	movs	r3, #8
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	6a3a      	ldr	r2, [r7, #32]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	0013      	movs	r3, r2
 80056d0:	2200      	movs	r2, #0
 80056d2:	2140      	movs	r1, #64	@ 0x40
 80056d4:	f000 f82e 	bl	8005734 <I2C_WaitOnFlagUntilTimeout>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d001      	beq.n	80056e0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	0018      	movs	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b004      	add	sp, #16
 80056e8:	bdb0      	pop	{r4, r5, r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	80002000 	.word	0x80002000

080056f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2202      	movs	r2, #2
 8005700:	4013      	ands	r3, r2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d103      	bne.n	800570e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2201      	movs	r2, #1
 8005716:	4013      	ands	r3, r2
 8005718:	2b01      	cmp	r3, #1
 800571a:	d007      	beq.n	800572c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2101      	movs	r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
  }
}
 800572c:	46c0      	nop			@ (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}

08005734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	1dfb      	adds	r3, r7, #7
 8005742:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005744:	e030      	b.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	d02d      	beq.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574c:	f7ff f94e 	bl	80049ec <HAL_GetTick>
 8005750:	0002      	movs	r2, r0
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d302      	bcc.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d122      	bne.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	425a      	negs	r2, r3
 8005772:	4153      	adcs	r3, r2
 8005774:	b2db      	uxtb	r3, r3
 8005776:	001a      	movs	r2, r3
 8005778:	1dfb      	adds	r3, r7, #7
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d113      	bne.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005784:	2220      	movs	r2, #32
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2241      	movs	r2, #65	@ 0x41
 8005790:	2120      	movs	r1, #32
 8005792:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2242      	movs	r2, #66	@ 0x42
 8005798:	2100      	movs	r1, #0
 800579a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2240      	movs	r2, #64	@ 0x40
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e00f      	b.n	80057c8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4013      	ands	r3, r2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	425a      	negs	r2, r3
 80057b8:	4153      	adcs	r3, r2
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	001a      	movs	r2, r3
 80057be:	1dfb      	adds	r3, r7, #7
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d0bf      	beq.n	8005746 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057dc:	e032      	b.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 f87d 	bl	80058e4 <I2C_IsErrorOccurred>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e030      	b.n	8005854 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d025      	beq.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f8:	f7ff f8f8 	bl	80049ec <HAL_GetTick>
 80057fc:	0002      	movs	r2, r0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d11a      	bne.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2202      	movs	r2, #2
 8005816:	4013      	ands	r3, r2
 8005818:	2b02      	cmp	r3, #2
 800581a:	d013      	beq.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	2220      	movs	r2, #32
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2241      	movs	r2, #65	@ 0x41
 800582c:	2120      	movs	r1, #32
 800582e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2242      	movs	r2, #66	@ 0x42
 8005834:	2100      	movs	r1, #0
 8005836:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2240      	movs	r2, #64	@ 0x40
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e007      	b.n	8005854 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2202      	movs	r2, #2
 800584c:	4013      	ands	r3, r2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d1c5      	bne.n	80057de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b004      	add	sp, #16
 800585a:	bd80      	pop	{r7, pc}

0800585c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005868:	e02f      	b.n	80058ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f837 	bl	80058e4 <I2C_IsErrorOccurred>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d001      	beq.n	800587e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e02d      	b.n	80058da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7ff f8b5 	bl	80049ec <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11a      	bne.n	80058ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2220      	movs	r2, #32
 800589c:	4013      	ands	r3, r2
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d013      	beq.n	80058ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	2220      	movs	r2, #32
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2241      	movs	r2, #65	@ 0x41
 80058b2:	2120      	movs	r1, #32
 80058b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2242      	movs	r2, #66	@ 0x42
 80058ba:	2100      	movs	r1, #0
 80058bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2240      	movs	r2, #64	@ 0x40
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e007      	b.n	80058da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2220      	movs	r2, #32
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d1c8      	bne.n	800586a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	@ 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2327      	movs	r3, #39	@ 0x27
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2210      	movs	r2, #16
 800590c:	4013      	ands	r3, r2
 800590e:	d100      	bne.n	8005912 <I2C_IsErrorOccurred+0x2e>
 8005910:	e079      	b.n	8005a06 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800591a:	e057      	b.n	80059cc <I2C_IsErrorOccurred+0xe8>
 800591c:	2227      	movs	r2, #39	@ 0x27
 800591e:	18bb      	adds	r3, r7, r2
 8005920:	18ba      	adds	r2, r7, r2
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3301      	adds	r3, #1
 800592a:	d04f      	beq.n	80059cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800592c:	f7ff f85e 	bl	80049ec <HAL_GetTick>
 8005930:	0002      	movs	r2, r0
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <I2C_IsErrorOccurred+0x5e>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d144      	bne.n	80059cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	01db      	lsls	r3, r3, #7
 800594c:	4013      	ands	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005950:	2013      	movs	r0, #19
 8005952:	183b      	adds	r3, r7, r0
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	2142      	movs	r1, #66	@ 0x42
 8005958:	5c52      	ldrb	r2, [r2, r1]
 800595a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	401a      	ands	r2, r3
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	429a      	cmp	r2, r3
 800596e:	d126      	bne.n	80059be <I2C_IsErrorOccurred+0xda>
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	01db      	lsls	r3, r3, #7
 8005976:	429a      	cmp	r2, r3
 8005978:	d021      	beq.n	80059be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800597a:	183b      	adds	r3, r7, r0
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b20      	cmp	r3, #32
 8005980:	d01d      	beq.n	80059be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2180      	movs	r1, #128	@ 0x80
 800598e:	01c9      	lsls	r1, r1, #7
 8005990:	430a      	orrs	r2, r1
 8005992:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005994:	f7ff f82a 	bl	80049ec <HAL_GetTick>
 8005998:	0003      	movs	r3, r0
 800599a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800599c:	e00f      	b.n	80059be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800599e:	f7ff f825 	bl	80049ec <HAL_GetTick>
 80059a2:	0002      	movs	r2, r0
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b19      	cmp	r3, #25
 80059aa:	d908      	bls.n	80059be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2220      	movs	r2, #32
 80059b0:	4313      	orrs	r3, r2
 80059b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80059b4:	2327      	movs	r3, #39	@ 0x27
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]

              break;
 80059bc:	e006      	b.n	80059cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2220      	movs	r2, #32
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d1e8      	bne.n	800599e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2220      	movs	r2, #32
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d004      	beq.n	80059e4 <I2C_IsErrorOccurred+0x100>
 80059da:	2327      	movs	r3, #39	@ 0x27
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d09b      	beq.n	800591c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059e4:	2327      	movs	r3, #39	@ 0x27
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2220      	movs	r2, #32
 80059f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	2204      	movs	r2, #4
 80059fa:	4313      	orrs	r3, r2
 80059fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059fe:	2327      	movs	r3, #39	@ 0x27
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4013      	ands	r3, r2
 8005a16:	d00c      	beq.n	8005a32 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2280      	movs	r2, #128	@ 0x80
 8005a26:	0052      	lsls	r2, r2, #1
 8005a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a2a:	2327      	movs	r3, #39	@ 0x27
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d00c      	beq.n	8005a56 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2208      	movs	r2, #8
 8005a40:	4313      	orrs	r3, r2
 8005a42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2280      	movs	r2, #128	@ 0x80
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a4e:	2327      	movs	r3, #39	@ 0x27
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	2380      	movs	r3, #128	@ 0x80
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d00c      	beq.n	8005a7a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2202      	movs	r2, #2
 8005a64:	4313      	orrs	r3, r2
 8005a66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2280      	movs	r2, #128	@ 0x80
 8005a6e:	0092      	lsls	r2, r2, #2
 8005a70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a72:	2327      	movs	r3, #39	@ 0x27
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005a7a:	2327      	movs	r3, #39	@ 0x27
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01d      	beq.n	8005ac0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fe32 	bl	80056f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	490e      	ldr	r1, [pc, #56]	@ (8005ad0 <I2C_IsErrorOccurred+0x1ec>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2241      	movs	r2, #65	@ 0x41
 8005aac:	2120      	movs	r1, #32
 8005aae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2242      	movs	r2, #66	@ 0x42
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2240      	movs	r2, #64	@ 0x40
 8005abc:	2100      	movs	r1, #0
 8005abe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005ac0:	2327      	movs	r3, #39	@ 0x27
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	781b      	ldrb	r3, [r3, #0]
}
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b00a      	add	sp, #40	@ 0x28
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	fe00e800 	.word	0xfe00e800

08005ad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	0008      	movs	r0, r1
 8005ade:	0011      	movs	r1, r2
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	240a      	movs	r4, #10
 8005ae4:	193b      	adds	r3, r7, r4
 8005ae6:	1c02      	adds	r2, r0, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	2009      	movs	r0, #9
 8005aec:	183b      	adds	r3, r7, r0
 8005aee:	1c0a      	adds	r2, r1, #0
 8005af0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	059b      	lsls	r3, r3, #22
 8005af8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005afa:	183b      	adds	r3, r7, r0
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	0419      	lsls	r1, r3, #16
 8005b00:	23ff      	movs	r3, #255	@ 0xff
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b1e:	0d51      	lsrs	r1, r2, #21
 8005b20:	2280      	movs	r2, #128	@ 0x80
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	400a      	ands	r2, r1
 8005b26:	4907      	ldr	r1, [pc, #28]	@ (8005b44 <I2C_TransferConfig+0x70>)
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	43d2      	mvns	r2, r2
 8005b2c:	401a      	ands	r2, r3
 8005b2e:	0011      	movs	r1, r2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b007      	add	sp, #28
 8005b40:	bd90      	pop	{r4, r7, pc}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	03ff63ff 	.word	0x03ff63ff

08005b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2241      	movs	r2, #65	@ 0x41
 8005b56:	5c9b      	ldrb	r3, [r3, r2]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d138      	bne.n	8005bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2240      	movs	r2, #64	@ 0x40
 8005b62:	5c9b      	ldrb	r3, [r3, r2]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e032      	b.n	8005bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2240      	movs	r2, #64	@ 0x40
 8005b70:	2101      	movs	r1, #1
 8005b72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2241      	movs	r2, #65	@ 0x41
 8005b78:	2124      	movs	r1, #36	@ 0x24
 8005b7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	438a      	bics	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4911      	ldr	r1, [pc, #68]	@ (8005bdc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b98:	400a      	ands	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2241      	movs	r2, #65	@ 0x41
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2240      	movs	r2, #64	@ 0x40
 8005bc8:	2100      	movs	r1, #0
 8005bca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	ffffefff 	.word	0xffffefff

08005be0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2241      	movs	r2, #65	@ 0x41
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d139      	bne.n	8005c6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2240      	movs	r2, #64	@ 0x40
 8005bfa:	5c9b      	ldrb	r3, [r3, r2]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e033      	b.n	8005c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2241      	movs	r2, #65	@ 0x41
 8005c10:	2124      	movs	r1, #36	@ 0x24
 8005c12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	438a      	bics	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a11      	ldr	r2, [pc, #68]	@ (8005c74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	430a      	orrs	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2241      	movs	r2, #65	@ 0x41
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b004      	add	sp, #16
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	fffff0ff 	.word	0xfffff0ff

08005c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c78:	b5b0      	push	{r4, r5, r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f000 fbbf 	bl	800640a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8c:	4bc9      	ldr	r3, [pc, #804]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	220c      	movs	r2, #12
 8005c92:	4013      	ands	r3, r2
 8005c94:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c96:	4bc7      	ldr	r3, [pc, #796]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	025b      	lsls	r3, r3, #9
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d100      	bne.n	8005cae <HAL_RCC_OscConfig+0x36>
 8005cac:	e07e      	b.n	8005dac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d007      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d112      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x68>
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	025b      	lsls	r3, r3, #9
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	4bbb      	ldr	r3, [pc, #748]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	@ 0x80
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x5a>
 8005cd0:	e06b      	b.n	8005daa <HAL_RCC_OscConfig+0x132>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d167      	bne.n	8005daa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f000 fb95 	bl	800640a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	025b      	lsls	r3, r3, #9
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d107      	bne.n	8005cfc <HAL_RCC_OscConfig+0x84>
 8005cec:	4bb1      	ldr	r3, [pc, #708]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4bb0      	ldr	r3, [pc, #704]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	0249      	lsls	r1, r1, #9
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e027      	b.n	8005d4c <HAL_RCC_OscConfig+0xd4>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	23a0      	movs	r3, #160	@ 0xa0
 8005d02:	02db      	lsls	r3, r3, #11
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d10e      	bne.n	8005d26 <HAL_RCC_OscConfig+0xae>
 8005d08:	4baa      	ldr	r3, [pc, #680]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4ba9      	ldr	r3, [pc, #676]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d0e:	2180      	movs	r1, #128	@ 0x80
 8005d10:	02c9      	lsls	r1, r1, #11
 8005d12:	430a      	orrs	r2, r1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	4ba7      	ldr	r3, [pc, #668]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4ba6      	ldr	r3, [pc, #664]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d1c:	2180      	movs	r1, #128	@ 0x80
 8005d1e:	0249      	lsls	r1, r1, #9
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e012      	b.n	8005d4c <HAL_RCC_OscConfig+0xd4>
 8005d26:	4ba3      	ldr	r3, [pc, #652]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4ba2      	ldr	r3, [pc, #648]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d2c:	49a2      	ldr	r1, [pc, #648]	@ (8005fb8 <HAL_RCC_OscConfig+0x340>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	4ba0      	ldr	r3, [pc, #640]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	2380      	movs	r3, #128	@ 0x80
 8005d38:	025b      	lsls	r3, r3, #9
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4b9c      	ldr	r3, [pc, #624]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b9b      	ldr	r3, [pc, #620]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d46:	499d      	ldr	r1, [pc, #628]	@ (8005fbc <HAL_RCC_OscConfig+0x344>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fe fe4a 	bl	80049ec <HAL_GetTick>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d5c:	e009      	b.n	8005d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d5e:	f7fe fe45 	bl	80049ec <HAL_GetTick>
 8005d62:	0002      	movs	r2, r0
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b64      	cmp	r3, #100	@ 0x64
 8005d6a:	d902      	bls.n	8005d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	f000 fb4c 	bl	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d72:	4b90      	ldr	r3, [pc, #576]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	2380      	movs	r3, #128	@ 0x80
 8005d78:	029b      	lsls	r3, r3, #10
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d0ef      	beq.n	8005d5e <HAL_RCC_OscConfig+0xe6>
 8005d7e:	e015      	b.n	8005dac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fe fe34 	bl	80049ec <HAL_GetTick>
 8005d84:	0003      	movs	r3, r0
 8005d86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d8a:	f7fe fe2f 	bl	80049ec <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b64      	cmp	r3, #100	@ 0x64
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e336      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d9c:	4b85      	ldr	r3, [pc, #532]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	4013      	ands	r3, r2
 8005da6:	d1f0      	bne.n	8005d8a <HAL_RCC_OscConfig+0x112>
 8005da8:	e000      	b.n	8005dac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005daa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d100      	bne.n	8005db8 <HAL_RCC_OscConfig+0x140>
 8005db6:	e099      	b.n	8005eec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005dcc:	2120      	movs	r1, #32
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4393      	bics	r3, r2
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d005      	beq.n	8005dec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d13e      	bne.n	8005e64 <HAL_RCC_OscConfig+0x1ec>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d13b      	bne.n	8005e64 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005dec:	4b71      	ldr	r3, [pc, #452]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2204      	movs	r2, #4
 8005df2:	4013      	ands	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_RCC_OscConfig+0x188>
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e304      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc0 <HAL_RCC_OscConfig+0x348>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005e16:	4b67      	ldr	r3, [pc, #412]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2209      	movs	r2, #9
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	4b64      	ldr	r3, [pc, #400]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e28:	f000 fc42 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8005e2c:	0001      	movs	r1, r0
 8005e2e:	4b61      	ldr	r3, [pc, #388]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	220f      	movs	r2, #15
 8005e36:	4013      	ands	r3, r2
 8005e38:	4a62      	ldr	r2, [pc, #392]	@ (8005fc4 <HAL_RCC_OscConfig+0x34c>)
 8005e3a:	5cd3      	ldrb	r3, [r2, r3]
 8005e3c:	000a      	movs	r2, r1
 8005e3e:	40da      	lsrs	r2, r3
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCC_OscConfig+0x350>)
 8005e42:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005e44:	4b61      	ldr	r3, [pc, #388]	@ (8005fcc <HAL_RCC_OscConfig+0x354>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2513      	movs	r5, #19
 8005e4a:	197c      	adds	r4, r7, r5
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fe fd87 	bl	8004960 <HAL_InitTick>
 8005e52:	0003      	movs	r3, r0
 8005e54:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005e56:	197b      	adds	r3, r7, r5
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d046      	beq.n	8005eec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005e5e:	197b      	adds	r3, r7, r5
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	e2d2      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d027      	beq.n	8005eba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005e6a:	4b52      	ldr	r3, [pc, #328]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2209      	movs	r2, #9
 8005e70:	4393      	bics	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7fe fdb6 	bl	80049ec <HAL_GetTick>
 8005e80:	0003      	movs	r3, r0
 8005e82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fe fdb1 	bl	80049ec <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e2b8      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e98:	4b46      	ldr	r3, [pc, #280]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d0f1      	beq.n	8005e86 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea2:	4b44      	ldr	r3, [pc, #272]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4a46      	ldr	r2, [pc, #280]	@ (8005fc0 <HAL_RCC_OscConfig+0x348>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	021a      	lsls	r2, r3, #8
 8005eb2:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	e018      	b.n	8005eec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fe fd91 	bl	80049ec <HAL_GetTick>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fe fd8c 	bl	80049ec <HAL_GetTick>
 8005ed4:	0002      	movs	r2, r0
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e293      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ee2:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d1f1      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d100      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x280>
 8005ef6:	e0a2      	b.n	800603e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d140      	bne.n	8005f80 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005efe:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	2380      	movs	r3, #128	@ 0x80
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4013      	ands	r3, r2
 8005f08:	d005      	beq.n	8005f16 <HAL_RCC_OscConfig+0x29e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e279      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005fd0 <HAL_RCC_OscConfig+0x358>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f24:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f2a:	4b22      	ldr	r3, [pc, #136]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	0a19      	lsrs	r1, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	061a      	lsls	r2, r3, #24
 8005f38:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	0b5b      	lsrs	r3, r3, #13
 8005f44:	3301      	adds	r3, #1
 8005f46:	2280      	movs	r2, #128	@ 0x80
 8005f48:	0212      	lsls	r2, r2, #8
 8005f4a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005f4c:	4b19      	ldr	r3, [pc, #100]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	210f      	movs	r1, #15
 8005f54:	400b      	ands	r3, r1
 8005f56:	491b      	ldr	r1, [pc, #108]	@ (8005fc4 <HAL_RCC_OscConfig+0x34c>)
 8005f58:	5ccb      	ldrb	r3, [r1, r3]
 8005f5a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc8 <HAL_RCC_OscConfig+0x350>)
 8005f5e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005f60:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <HAL_RCC_OscConfig+0x354>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2513      	movs	r5, #19
 8005f66:	197c      	adds	r4, r7, r5
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7fe fcf9 	bl	8004960 <HAL_InitTick>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005f72:	197b      	adds	r3, r7, r5
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d061      	beq.n	800603e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005f7a:	197b      	adds	r3, r7, r5
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	e244      	b.n	800640a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d040      	beq.n	800600a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f88:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <HAL_RCC_OscConfig+0x33c>)
 8005f8e:	2180      	movs	r1, #128	@ 0x80
 8005f90:	0049      	lsls	r1, r1, #1
 8005f92:	430a      	orrs	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f96:	f7fe fd29 	bl	80049ec <HAL_GetTick>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005f9e:	e019      	b.n	8005fd4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa0:	f7fe fd24 	bl	80049ec <HAL_GetTick>
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d912      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e22b      	b.n	800640a <HAL_RCC_OscConfig+0x792>
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	fffeffff 	.word	0xfffeffff
 8005fbc:	fffbffff 	.word	0xfffbffff
 8005fc0:	ffffe0ff 	.word	0xffffe0ff
 8005fc4:	0800c4c0 	.word	0x0800c4c0
 8005fc8:	20000010 	.word	0x20000010
 8005fcc:	20000014 	.word	0x20000014
 8005fd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fd4:	4bca      	ldr	r3, [pc, #808]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d0df      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fe0:	4bc7      	ldr	r3, [pc, #796]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4ac7      	ldr	r2, [pc, #796]	@ (8006304 <HAL_RCC_OscConfig+0x68c>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fee:	4bc4      	ldr	r3, [pc, #784]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ff4:	4bc2      	ldr	r3, [pc, #776]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	0a19      	lsrs	r1, r3, #8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	061a      	lsls	r2, r3, #24
 8006002:	4bbf      	ldr	r3, [pc, #764]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	e019      	b.n	800603e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800600a:	4bbd      	ldr	r3, [pc, #756]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4bbc      	ldr	r3, [pc, #752]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006010:	49bd      	ldr	r1, [pc, #756]	@ (8006308 <HAL_RCC_OscConfig+0x690>)
 8006012:	400a      	ands	r2, r1
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fe fce9 	bl	80049ec <HAL_GetTick>
 800601a:	0003      	movs	r3, r0
 800601c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006020:	f7fe fce4 	bl	80049ec <HAL_GetTick>
 8006024:	0002      	movs	r2, r0
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e1eb      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006032:	4bb3      	ldr	r3, [pc, #716]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4013      	ands	r3, r2
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2208      	movs	r2, #8
 8006044:	4013      	ands	r3, r2
 8006046:	d036      	beq.n	80060b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006050:	4bab      	ldr	r3, [pc, #684]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006054:	4baa      	ldr	r3, [pc, #680]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006056:	2101      	movs	r1, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605c:	f7fe fcc6 	bl	80049ec <HAL_GetTick>
 8006060:	0003      	movs	r3, r0
 8006062:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006066:	f7fe fcc1 	bl	80049ec <HAL_GetTick>
 800606a:	0002      	movs	r2, r0
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e1c8      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006078:	4ba1      	ldr	r3, [pc, #644]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800607a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607c:	2202      	movs	r2, #2
 800607e:	4013      	ands	r3, r2
 8006080:	d0f1      	beq.n	8006066 <HAL_RCC_OscConfig+0x3ee>
 8006082:	e018      	b.n	80060b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006084:	4b9e      	ldr	r3, [pc, #632]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006088:	4b9d      	ldr	r3, [pc, #628]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800608a:	2101      	movs	r1, #1
 800608c:	438a      	bics	r2, r1
 800608e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006090:	f7fe fcac 	bl	80049ec <HAL_GetTick>
 8006094:	0003      	movs	r3, r0
 8006096:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800609a:	f7fe fca7 	bl	80049ec <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e1ae      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ac:	4b94      	ldr	r3, [pc, #592]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80060ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b0:	2202      	movs	r2, #2
 80060b2:	4013      	ands	r3, r2
 80060b4:	d1f1      	bne.n	800609a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2204      	movs	r2, #4
 80060bc:	4013      	ands	r3, r2
 80060be:	d100      	bne.n	80060c2 <HAL_RCC_OscConfig+0x44a>
 80060c0:	e0ae      	b.n	8006220 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c2:	2023      	movs	r0, #35	@ 0x23
 80060c4:	183b      	adds	r3, r7, r0
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80060cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ce:	2380      	movs	r3, #128	@ 0x80
 80060d0:	055b      	lsls	r3, r3, #21
 80060d2:	4013      	ands	r3, r2
 80060d4:	d109      	bne.n	80060ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80060d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060da:	4b89      	ldr	r3, [pc, #548]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80060dc:	2180      	movs	r1, #128	@ 0x80
 80060de:	0549      	lsls	r1, r1, #21
 80060e0:	430a      	orrs	r2, r1
 80060e2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80060e4:	183b      	adds	r3, r7, r0
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ea:	4b88      	ldr	r3, [pc, #544]	@ (800630c <HAL_RCC_OscConfig+0x694>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	2380      	movs	r3, #128	@ 0x80
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4013      	ands	r3, r2
 80060f4:	d11a      	bne.n	800612c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f6:	4b85      	ldr	r3, [pc, #532]	@ (800630c <HAL_RCC_OscConfig+0x694>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b84      	ldr	r3, [pc, #528]	@ (800630c <HAL_RCC_OscConfig+0x694>)
 80060fc:	2180      	movs	r1, #128	@ 0x80
 80060fe:	0049      	lsls	r1, r1, #1
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006104:	f7fe fc72 	bl	80049ec <HAL_GetTick>
 8006108:	0003      	movs	r3, r0
 800610a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610e:	f7fe fc6d 	bl	80049ec <HAL_GetTick>
 8006112:	0002      	movs	r2, r0
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b64      	cmp	r3, #100	@ 0x64
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e174      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006120:	4b7a      	ldr	r3, [pc, #488]	@ (800630c <HAL_RCC_OscConfig+0x694>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4013      	ands	r3, r2
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	d107      	bne.n	8006148 <HAL_RCC_OscConfig+0x4d0>
 8006138:	4b71      	ldr	r3, [pc, #452]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800613a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800613c:	4b70      	ldr	r3, [pc, #448]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800613e:	2180      	movs	r1, #128	@ 0x80
 8006140:	0049      	lsls	r1, r1, #1
 8006142:	430a      	orrs	r2, r1
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50
 8006146:	e031      	b.n	80061ac <HAL_RCC_OscConfig+0x534>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10c      	bne.n	800616a <HAL_RCC_OscConfig+0x4f2>
 8006150:	4b6b      	ldr	r3, [pc, #428]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006154:	4b6a      	ldr	r3, [pc, #424]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006156:	496c      	ldr	r1, [pc, #432]	@ (8006308 <HAL_RCC_OscConfig+0x690>)
 8006158:	400a      	ands	r2, r1
 800615a:	651a      	str	r2, [r3, #80]	@ 0x50
 800615c:	4b68      	ldr	r3, [pc, #416]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800615e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006160:	4b67      	ldr	r3, [pc, #412]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006162:	496b      	ldr	r1, [pc, #428]	@ (8006310 <HAL_RCC_OscConfig+0x698>)
 8006164:	400a      	ands	r2, r1
 8006166:	651a      	str	r2, [r3, #80]	@ 0x50
 8006168:	e020      	b.n	80061ac <HAL_RCC_OscConfig+0x534>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	23a0      	movs	r3, #160	@ 0xa0
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	429a      	cmp	r2, r3
 8006174:	d10e      	bne.n	8006194 <HAL_RCC_OscConfig+0x51c>
 8006176:	4b62      	ldr	r3, [pc, #392]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800617a:	4b61      	ldr	r3, [pc, #388]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	00c9      	lsls	r1, r1, #3
 8006180:	430a      	orrs	r2, r1
 8006182:	651a      	str	r2, [r3, #80]	@ 0x50
 8006184:	4b5e      	ldr	r3, [pc, #376]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006188:	4b5d      	ldr	r3, [pc, #372]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800618a:	2180      	movs	r1, #128	@ 0x80
 800618c:	0049      	lsls	r1, r1, #1
 800618e:	430a      	orrs	r2, r1
 8006190:	651a      	str	r2, [r3, #80]	@ 0x50
 8006192:	e00b      	b.n	80061ac <HAL_RCC_OscConfig+0x534>
 8006194:	4b5a      	ldr	r3, [pc, #360]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006198:	4b59      	ldr	r3, [pc, #356]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800619a:	495b      	ldr	r1, [pc, #364]	@ (8006308 <HAL_RCC_OscConfig+0x690>)
 800619c:	400a      	ands	r2, r1
 800619e:	651a      	str	r2, [r3, #80]	@ 0x50
 80061a0:	4b57      	ldr	r3, [pc, #348]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80061a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061a4:	4b56      	ldr	r3, [pc, #344]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80061a6:	495a      	ldr	r1, [pc, #360]	@ (8006310 <HAL_RCC_OscConfig+0x698>)
 80061a8:	400a      	ands	r2, r1
 80061aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b4:	f7fe fc1a 	bl	80049ec <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061bc:	e009      	b.n	80061d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061be:	f7fe fc15 	bl	80049ec <HAL_GetTick>
 80061c2:	0002      	movs	r2, r0
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	4a52      	ldr	r2, [pc, #328]	@ (8006314 <HAL_RCC_OscConfig+0x69c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e11b      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80061d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061d6:	2380      	movs	r3, #128	@ 0x80
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4013      	ands	r3, r2
 80061dc:	d0ef      	beq.n	80061be <HAL_RCC_OscConfig+0x546>
 80061de:	e014      	b.n	800620a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e0:	f7fe fc04 	bl	80049ec <HAL_GetTick>
 80061e4:	0003      	movs	r3, r0
 80061e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061e8:	e009      	b.n	80061fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ea:	f7fe fbff 	bl	80049ec <HAL_GetTick>
 80061ee:	0002      	movs	r2, r0
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	4a47      	ldr	r2, [pc, #284]	@ (8006314 <HAL_RCC_OscConfig+0x69c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e105      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061fe:	4b40      	ldr	r3, [pc, #256]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006202:	2380      	movs	r3, #128	@ 0x80
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4013      	ands	r3, r2
 8006208:	d1ef      	bne.n	80061ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800620a:	2323      	movs	r3, #35	@ 0x23
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006214:	4b3a      	ldr	r3, [pc, #232]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006218:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 800621a:	493f      	ldr	r1, [pc, #252]	@ (8006318 <HAL_RCC_OscConfig+0x6a0>)
 800621c:	400a      	ands	r2, r1
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2220      	movs	r2, #32
 8006226:	4013      	ands	r3, r2
 8006228:	d049      	beq.n	80062be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d026      	beq.n	8006280 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006232:	4b33      	ldr	r3, [pc, #204]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	4b32      	ldr	r3, [pc, #200]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006238:	2101      	movs	r1, #1
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]
 800623e:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006242:	4b2f      	ldr	r3, [pc, #188]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006244:	2101      	movs	r1, #1
 8006246:	430a      	orrs	r2, r1
 8006248:	635a      	str	r2, [r3, #52]	@ 0x34
 800624a:	4b34      	ldr	r3, [pc, #208]	@ (800631c <HAL_RCC_OscConfig+0x6a4>)
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	4b33      	ldr	r3, [pc, #204]	@ (800631c <HAL_RCC_OscConfig+0x6a4>)
 8006250:	2180      	movs	r1, #128	@ 0x80
 8006252:	0189      	lsls	r1, r1, #6
 8006254:	430a      	orrs	r2, r1
 8006256:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fe fbc8 	bl	80049ec <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006262:	f7fe fbc3 	bl	80049ec <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e0ca      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006274:	4b22      	ldr	r3, [pc, #136]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2202      	movs	r2, #2
 800627a:	4013      	ands	r3, r2
 800627c:	d0f1      	beq.n	8006262 <HAL_RCC_OscConfig+0x5ea>
 800627e:	e01e      	b.n	80062be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006280:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	4b1e      	ldr	r3, [pc, #120]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 8006286:	2101      	movs	r1, #1
 8006288:	438a      	bics	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	4b23      	ldr	r3, [pc, #140]	@ (800631c <HAL_RCC_OscConfig+0x6a4>)
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	4b22      	ldr	r3, [pc, #136]	@ (800631c <HAL_RCC_OscConfig+0x6a4>)
 8006292:	4923      	ldr	r1, [pc, #140]	@ (8006320 <HAL_RCC_OscConfig+0x6a8>)
 8006294:	400a      	ands	r2, r1
 8006296:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fe fba8 	bl	80049ec <HAL_GetTick>
 800629c:	0003      	movs	r3, r0
 800629e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062a2:	f7fe fba3 	bl	80049ec <HAL_GetTick>
 80062a6:	0002      	movs	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e0aa      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062b4:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2202      	movs	r2, #2
 80062ba:	4013      	ands	r3, r2
 80062bc:	d1f1      	bne.n	80062a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <HAL_RCC_OscConfig+0x650>
 80062c6:	e09f      	b.n	8006408 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d100      	bne.n	80062d0 <HAL_RCC_OscConfig+0x658>
 80062ce:	e078      	b.n	80063c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d159      	bne.n	800638c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d8:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b08      	ldr	r3, [pc, #32]	@ (8006300 <HAL_RCC_OscConfig+0x688>)
 80062de:	4911      	ldr	r1, [pc, #68]	@ (8006324 <HAL_RCC_OscConfig+0x6ac>)
 80062e0:	400a      	ands	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e4:	f7fe fb82 	bl	80049ec <HAL_GetTick>
 80062e8:	0003      	movs	r3, r0
 80062ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80062ec:	e01c      	b.n	8006328 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ee:	f7fe fb7d 	bl	80049ec <HAL_GetTick>
 80062f2:	0002      	movs	r2, r0
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d915      	bls.n	8006328 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e084      	b.n	800640a <HAL_RCC_OscConfig+0x792>
 8006300:	40021000 	.word	0x40021000
 8006304:	ffff1fff 	.word	0xffff1fff
 8006308:	fffffeff 	.word	0xfffffeff
 800630c:	40007000 	.word	0x40007000
 8006310:	fffffbff 	.word	0xfffffbff
 8006314:	00001388 	.word	0x00001388
 8006318:	efffffff 	.word	0xefffffff
 800631c:	40010000 	.word	0x40010000
 8006320:	ffffdfff 	.word	0xffffdfff
 8006324:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006328:	4b3a      	ldr	r3, [pc, #232]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	049b      	lsls	r3, r3, #18
 8006330:	4013      	ands	r3, r2
 8006332:	d1dc      	bne.n	80062ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006334:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4a37      	ldr	r2, [pc, #220]	@ (8006418 <HAL_RCC_OscConfig+0x7a0>)
 800633a:	4013      	ands	r3, r2
 800633c:	0019      	movs	r1, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634c:	431a      	orrs	r2, r3
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 8006350:	430a      	orrs	r2, r1
 8006352:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006354:	4b2f      	ldr	r3, [pc, #188]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 800635a:	2180      	movs	r1, #128	@ 0x80
 800635c:	0449      	lsls	r1, r1, #17
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006362:	f7fe fb43 	bl	80049ec <HAL_GetTick>
 8006366:	0003      	movs	r3, r0
 8006368:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800636c:	f7fe fb3e 	bl	80049ec <HAL_GetTick>
 8006370:	0002      	movs	r2, r0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e045      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800637e:	4b25      	ldr	r3, [pc, #148]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	049b      	lsls	r3, r3, #18
 8006386:	4013      	ands	r3, r2
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x6f4>
 800638a:	e03d      	b.n	8006408 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	4b21      	ldr	r3, [pc, #132]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 8006392:	4922      	ldr	r1, [pc, #136]	@ (800641c <HAL_RCC_OscConfig+0x7a4>)
 8006394:	400a      	ands	r2, r1
 8006396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fe fb28 	bl	80049ec <HAL_GetTick>
 800639c:	0003      	movs	r3, r0
 800639e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a2:	f7fe fb23 	bl	80049ec <HAL_GetTick>
 80063a6:	0002      	movs	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e02a      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063b4:	4b17      	ldr	r3, [pc, #92]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	2380      	movs	r3, #128	@ 0x80
 80063ba:	049b      	lsls	r3, r3, #18
 80063bc:	4013      	ands	r3, r2
 80063be:	d1f0      	bne.n	80063a2 <HAL_RCC_OscConfig+0x72a>
 80063c0:	e022      	b.n	8006408 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <HAL_RCC_OscConfig+0x79c>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	025b      	lsls	r3, r3, #9
 80063da:	401a      	ands	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d10f      	bne.n	8006404 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	23f0      	movs	r3, #240	@ 0xf0
 80063e8:	039b      	lsls	r3, r3, #14
 80063ea:	401a      	ands	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d107      	bne.n	8006404 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	23c0      	movs	r3, #192	@ 0xc0
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	401a      	ands	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	b00a      	add	sp, #40	@ 0x28
 8006410:	bdb0      	pop	{r4, r5, r7, pc}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	40021000 	.word	0x40021000
 8006418:	ff02ffff 	.word	0xff02ffff
 800641c:	feffffff 	.word	0xfeffffff

08006420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006420:	b5b0      	push	{r4, r5, r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e128      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b96      	ldr	r3, [pc, #600]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	4013      	ands	r3, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d91e      	bls.n	8006480 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b93      	ldr	r3, [pc, #588]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2201      	movs	r2, #1
 8006448:	4393      	bics	r3, r2
 800644a:	0019      	movs	r1, r3
 800644c:	4b90      	ldr	r3, [pc, #576]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006454:	f7fe faca 	bl	80049ec <HAL_GetTick>
 8006458:	0003      	movs	r3, r0
 800645a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645c:	e009      	b.n	8006472 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800645e:	f7fe fac5 	bl	80049ec <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a8a      	ldr	r2, [pc, #552]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e109      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b87      	ldr	r3, [pc, #540]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	4013      	ands	r3, r2
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d1ee      	bne.n	800645e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	4013      	ands	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800648a:	4b83      	ldr	r3, [pc, #524]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	22f0      	movs	r2, #240	@ 0xf0
 8006490:	4393      	bics	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	4b7f      	ldr	r3, [pc, #508]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 800649a:	430a      	orrs	r2, r1
 800649c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4013      	ands	r3, r2
 80064a6:	d100      	bne.n	80064aa <HAL_RCC_ClockConfig+0x8a>
 80064a8:	e089      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b2:	4b79      	ldr	r3, [pc, #484]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	2380      	movs	r3, #128	@ 0x80
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	4013      	ands	r3, r2
 80064bc:	d120      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e1      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d107      	bne.n	80064da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ca:	4b73      	ldr	r3, [pc, #460]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	2380      	movs	r3, #128	@ 0x80
 80064d0:	049b      	lsls	r3, r3, #18
 80064d2:	4013      	ands	r3, r2
 80064d4:	d114      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0d5      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d106      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2204      	movs	r2, #4
 80064e8:	4013      	ands	r3, r2
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0ca      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80064f0:	4b69      	ldr	r3, [pc, #420]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0c2      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006500:	4b65      	ldr	r3, [pc, #404]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2203      	movs	r2, #3
 8006506:	4393      	bics	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	4b62      	ldr	r3, [pc, #392]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006510:	430a      	orrs	r2, r1
 8006512:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006514:	f7fe fa6a 	bl	80049ec <HAL_GetTick>
 8006518:	0003      	movs	r3, r0
 800651a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d111      	bne.n	8006548 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006524:	e009      	b.n	800653a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006526:	f7fe fa61 	bl	80049ec <HAL_GetTick>
 800652a:	0002      	movs	r2, r0
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	4a58      	ldr	r2, [pc, #352]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0a5      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800653a:	4b57      	ldr	r3, [pc, #348]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	220c      	movs	r2, #12
 8006540:	4013      	ands	r3, r2
 8006542:	2b08      	cmp	r3, #8
 8006544:	d1ef      	bne.n	8006526 <HAL_RCC_ClockConfig+0x106>
 8006546:	e03a      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d111      	bne.n	8006574 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006550:	e009      	b.n	8006566 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006552:	f7fe fa4b 	bl	80049ec <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	4a4d      	ldr	r2, [pc, #308]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e08f      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006566:	4b4c      	ldr	r3, [pc, #304]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	220c      	movs	r2, #12
 800656c:	4013      	ands	r3, r2
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d1ef      	bne.n	8006552 <HAL_RCC_ClockConfig+0x132>
 8006572:	e024      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d11b      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800657c:	e009      	b.n	8006592 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800657e:	f7fe fa35 	bl	80049ec <HAL_GetTick>
 8006582:	0002      	movs	r2, r0
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	4a42      	ldr	r2, [pc, #264]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e079      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006592:	4b41      	ldr	r3, [pc, #260]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	220c      	movs	r2, #12
 8006598:	4013      	ands	r3, r2
 800659a:	2b04      	cmp	r3, #4
 800659c:	d1ef      	bne.n	800657e <HAL_RCC_ClockConfig+0x15e>
 800659e:	e00e      	b.n	80065be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a0:	f7fe fa24 	bl	80049ec <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e068      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80065b4:	4b38      	ldr	r3, [pc, #224]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	220c      	movs	r2, #12
 80065ba:	4013      	ands	r3, r2
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065be:	4b34      	ldr	r3, [pc, #208]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d21e      	bcs.n	800660a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065cc:	4b30      	ldr	r3, [pc, #192]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2201      	movs	r2, #1
 80065d2:	4393      	bics	r3, r2
 80065d4:	0019      	movs	r1, r3
 80065d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065de:	f7fe fa05 	bl	80049ec <HAL_GetTick>
 80065e2:	0003      	movs	r3, r0
 80065e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	e009      	b.n	80065fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fe fa00 	bl	80049ec <HAL_GetTick>
 80065ec:	0002      	movs	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4a28      	ldr	r2, [pc, #160]	@ (8006694 <HAL_RCC_ClockConfig+0x274>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e044      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fc:	4b24      	ldr	r3, [pc, #144]	@ (8006690 <HAL_RCC_ClockConfig+0x270>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	4013      	ands	r3, r2
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d1ee      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2204      	movs	r2, #4
 8006610:	4013      	ands	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006614:	4b20      	ldr	r3, [pc, #128]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a20      	ldr	r2, [pc, #128]	@ (800669c <HAL_RCC_ClockConfig+0x27c>)
 800661a:	4013      	ands	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006624:	430a      	orrs	r2, r1
 8006626:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	4013      	ands	r3, r2
 8006630:	d00a      	beq.n	8006648 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006632:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a1a      	ldr	r2, [pc, #104]	@ (80066a0 <HAL_RCC_ClockConfig+0x280>)
 8006638:	4013      	ands	r3, r2
 800663a:	0019      	movs	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	4b15      	ldr	r3, [pc, #84]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006644:	430a      	orrs	r2, r1
 8006646:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006648:	f000 f832 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 800664c:	0001      	movs	r1, r0
 800664e:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <HAL_RCC_ClockConfig+0x278>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	220f      	movs	r2, #15
 8006656:	4013      	ands	r3, r2
 8006658:	4a12      	ldr	r2, [pc, #72]	@ (80066a4 <HAL_RCC_ClockConfig+0x284>)
 800665a:	5cd3      	ldrb	r3, [r2, r3]
 800665c:	000a      	movs	r2, r1
 800665e:	40da      	lsrs	r2, r3
 8006660:	4b11      	ldr	r3, [pc, #68]	@ (80066a8 <HAL_RCC_ClockConfig+0x288>)
 8006662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006664:	4b11      	ldr	r3, [pc, #68]	@ (80066ac <HAL_RCC_ClockConfig+0x28c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	250b      	movs	r5, #11
 800666a:	197c      	adds	r4, r7, r5
 800666c:	0018      	movs	r0, r3
 800666e:	f7fe f977 	bl	8004960 <HAL_InitTick>
 8006672:	0003      	movs	r3, r0
 8006674:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006676:	197b      	adds	r3, r7, r5
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800667e:	197b      	adds	r3, r7, r5
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	e000      	b.n	8006686 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b004      	add	sp, #16
 800668c:	bdb0      	pop	{r4, r5, r7, pc}
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	40022000 	.word	0x40022000
 8006694:	00001388 	.word	0x00001388
 8006698:	40021000 	.word	0x40021000
 800669c:	fffff8ff 	.word	0xfffff8ff
 80066a0:	ffffc7ff 	.word	0xffffc7ff
 80066a4:	0800c4c0 	.word	0x0800c4c0
 80066a8:	20000010 	.word	0x20000010
 80066ac:	20000014 	.word	0x20000014

080066b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b0:	b5b0      	push	{r4, r5, r7, lr}
 80066b2:	b08e      	sub	sp, #56	@ 0x38
 80066b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80066b6:	4b4c      	ldr	r3, [pc, #304]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066be:	230c      	movs	r3, #12
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b0c      	cmp	r3, #12
 80066c4:	d014      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x40>
 80066c6:	d900      	bls.n	80066ca <HAL_RCC_GetSysClockFreq+0x1a>
 80066c8:	e07b      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x112>
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d002      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x24>
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_GetSysClockFreq+0x3a>
 80066d2:	e076      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80066d4:	4b44      	ldr	r3, [pc, #272]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2210      	movs	r2, #16
 80066da:	4013      	ands	r3, r2
 80066dc:	d002      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80066de:	4b43      	ldr	r3, [pc, #268]	@ (80067ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80066e0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80066e2:	e07c      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80066e4:	4b42      	ldr	r3, [pc, #264]	@ (80067f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80066e6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80066e8:	e079      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066ea:	4b42      	ldr	r3, [pc, #264]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80066ee:	e076      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	0c9a      	lsrs	r2, r3, #18
 80066f4:	230f      	movs	r3, #15
 80066f6:	401a      	ands	r2, r3
 80066f8:	4b3f      	ldr	r3, [pc, #252]	@ (80067f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	0d9a      	lsrs	r2, r3, #22
 8006702:	2303      	movs	r3, #3
 8006704:	4013      	ands	r3, r2
 8006706:	3301      	adds	r3, #1
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800670a:	4b37      	ldr	r3, [pc, #220]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	025b      	lsls	r3, r3, #9
 8006712:	4013      	ands	r3, r2
 8006714:	d01a      	beq.n	800674c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	4a35      	ldr	r2, [pc, #212]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8006720:	2300      	movs	r3, #0
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	f7f9 ff19 	bl	800055c <__aeabi_lmul>
 800672a:	0002      	movs	r2, r0
 800672c:	000b      	movs	r3, r1
 800672e:	0010      	movs	r0, r2
 8006730:	0019      	movs	r1, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f7f9 feed 	bl	800051c <__aeabi_uldivmod>
 8006742:	0002      	movs	r2, r0
 8006744:	000b      	movs	r3, r1
 8006746:	0013      	movs	r3, r2
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
 800674a:	e037      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800674c:	4b26      	ldr	r3, [pc, #152]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2210      	movs	r2, #16
 8006752:	4013      	ands	r3, r2
 8006754:	d01a      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4a23      	ldr	r2, [pc, #140]	@ (80067ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8006760:	2300      	movs	r3, #0
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	f7f9 fef9 	bl	800055c <__aeabi_lmul>
 800676a:	0002      	movs	r2, r0
 800676c:	000b      	movs	r3, r1
 800676e:	0010      	movs	r0, r2
 8006770:	0019      	movs	r1, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f7f9 fecd 	bl	800051c <__aeabi_uldivmod>
 8006782:	0002      	movs	r2, r0
 8006784:	000b      	movs	r3, r1
 8006786:	0013      	movs	r3, r2
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
 800678a:	e017      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	0018      	movs	r0, r3
 8006790:	2300      	movs	r3, #0
 8006792:	0019      	movs	r1, r3
 8006794:	4a16      	ldr	r2, [pc, #88]	@ (80067f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006796:	2300      	movs	r3, #0
 8006798:	f7f9 fee0 	bl	800055c <__aeabi_lmul>
 800679c:	0002      	movs	r2, r0
 800679e:	000b      	movs	r3, r1
 80067a0:	0010      	movs	r0, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	001c      	movs	r4, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	001d      	movs	r5, r3
 80067ac:	0022      	movs	r2, r4
 80067ae:	002b      	movs	r3, r5
 80067b0:	f7f9 feb4 	bl	800051c <__aeabi_uldivmod>
 80067b4:	0002      	movs	r2, r0
 80067b6:	000b      	movs	r3, r1
 80067b8:	0013      	movs	r3, r2
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80067c0:	e00d      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80067c2:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	0b5b      	lsrs	r3, r3, #13
 80067c8:	2207      	movs	r2, #7
 80067ca:	4013      	ands	r3, r2
 80067cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	3301      	adds	r3, #1
 80067d2:	2280      	movs	r2, #128	@ 0x80
 80067d4:	0212      	lsls	r2, r2, #8
 80067d6:	409a      	lsls	r2, r3
 80067d8:	0013      	movs	r3, r2
 80067da:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80067dc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b00e      	add	sp, #56	@ 0x38
 80067e6:	bdb0      	pop	{r4, r5, r7, pc}
 80067e8:	40021000 	.word	0x40021000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	00f42400 	.word	0x00f42400
 80067f4:	007a1200 	.word	0x007a1200
 80067f8:	0800c4d8 	.word	0x0800c4d8

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006800:	4b02      	ldr	r3, [pc, #8]	@ (800680c <HAL_RCC_GetHCLKFreq+0x10>)
 8006802:	681b      	ldr	r3, [r3, #0]
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	20000010 	.word	0x20000010

08006810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006814:	f7ff fff2 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006818:	0001      	movs	r1, r0
 800681a:	4b06      	ldr	r3, [pc, #24]	@ (8006834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	2207      	movs	r2, #7
 8006822:	4013      	ands	r3, r2
 8006824:	4a04      	ldr	r2, [pc, #16]	@ (8006838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	40d9      	lsrs	r1, r3
 800682a:	000b      	movs	r3, r1
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	40021000 	.word	0x40021000
 8006838:	0800c4d0 	.word	0x0800c4d0

0800683c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006840:	f7ff ffdc 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006844:	0001      	movs	r1, r0
 8006846:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	0adb      	lsrs	r3, r3, #11
 800684c:	2207      	movs	r2, #7
 800684e:	4013      	ands	r3, r2
 8006850:	4a04      	ldr	r2, [pc, #16]	@ (8006864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	40d9      	lsrs	r1, r3
 8006856:	000b      	movs	r3, r1
}
 8006858:	0018      	movs	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	40021000 	.word	0x40021000
 8006864:	0800c4d0 	.word	0x0800c4d0

08006868 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006870:	2317      	movs	r3, #23
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2220      	movs	r2, #32
 800687e:	4013      	ands	r3, r2
 8006880:	d106      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	2380      	movs	r3, #128	@ 0x80
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	4013      	ands	r3, r2
 800688c:	d100      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800688e:	e104      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006890:	4bb9      	ldr	r3, [pc, #740]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006894:	2380      	movs	r3, #128	@ 0x80
 8006896:	055b      	lsls	r3, r3, #21
 8006898:	4013      	ands	r3, r2
 800689a:	d10a      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689c:	4bb6      	ldr	r3, [pc, #728]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800689e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a0:	4bb5      	ldr	r3, [pc, #724]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068a2:	2180      	movs	r1, #128	@ 0x80
 80068a4:	0549      	lsls	r1, r1, #21
 80068a6:	430a      	orrs	r2, r1
 80068a8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80068aa:	2317      	movs	r3, #23
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b2:	4bb2      	ldr	r3, [pc, #712]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	2380      	movs	r3, #128	@ 0x80
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4013      	ands	r3, r2
 80068bc:	d11a      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068be:	4baf      	ldr	r3, [pc, #700]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4bae      	ldr	r3, [pc, #696]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80068c4:	2180      	movs	r1, #128	@ 0x80
 80068c6:	0049      	lsls	r1, r1, #1
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068cc:	f7fe f88e 	bl	80049ec <HAL_GetTick>
 80068d0:	0003      	movs	r3, r0
 80068d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d4:	e008      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d6:	f7fe f889 	bl	80049ec <HAL_GetTick>
 80068da:	0002      	movs	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b64      	cmp	r3, #100	@ 0x64
 80068e2:	d901      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e143      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e8:	4ba4      	ldr	r3, [pc, #656]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4013      	ands	r3, r2
 80068f2:	d0f0      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80068f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	23c0      	movs	r3, #192	@ 0xc0
 80068fa:	039b      	lsls	r3, r3, #14
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	23c0      	movs	r3, #192	@ 0xc0
 8006906:	039b      	lsls	r3, r3, #14
 8006908:	4013      	ands	r3, r2
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	23c0      	movs	r3, #192	@ 0xc0
 8006916:	039b      	lsls	r3, r3, #14
 8006918:	4013      	ands	r3, r2
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d013      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	23c0      	movs	r3, #192	@ 0xc0
 8006926:	029b      	lsls	r3, r3, #10
 8006928:	401a      	ands	r2, r3
 800692a:	23c0      	movs	r3, #192	@ 0xc0
 800692c:	029b      	lsls	r3, r3, #10
 800692e:	429a      	cmp	r2, r3
 8006930:	d10a      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006932:	4b91      	ldr	r3, [pc, #580]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	2380      	movs	r3, #128	@ 0x80
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	401a      	ands	r2, r3
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	429a      	cmp	r2, r3
 8006942:	d101      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e113      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006948:	4b8b      	ldr	r3, [pc, #556]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800694a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800694c:	23c0      	movs	r3, #192	@ 0xc0
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d049      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	23c0      	movs	r3, #192	@ 0xc0
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	4013      	ands	r3, r2
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d004      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2220      	movs	r2, #32
 8006970:	4013      	ands	r3, r2
 8006972:	d10d      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	23c0      	movs	r3, #192	@ 0xc0
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	4013      	ands	r3, r2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d034      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	2380      	movs	r3, #128	@ 0x80
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	4013      	ands	r3, r2
 800698e:	d02e      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006990:	4b79      	ldr	r3, [pc, #484]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006994:	4a7a      	ldr	r2, [pc, #488]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006996:	4013      	ands	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800699a:	4b77      	ldr	r3, [pc, #476]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800699c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800699e:	4b76      	ldr	r3, [pc, #472]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069a0:	2180      	movs	r1, #128	@ 0x80
 80069a2:	0309      	lsls	r1, r1, #12
 80069a4:	430a      	orrs	r2, r1
 80069a6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a8:	4b73      	ldr	r3, [pc, #460]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069ac:	4b72      	ldr	r3, [pc, #456]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069ae:	4975      	ldr	r1, [pc, #468]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80069b0:	400a      	ands	r2, r1
 80069b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80069b4:	4b70      	ldr	r3, [pc, #448]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	4013      	ands	r3, r2
 80069c2:	d014      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c4:	f7fe f812 	bl	80049ec <HAL_GetTick>
 80069c8:	0003      	movs	r3, r0
 80069ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069cc:	e009      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fe f80d 	bl	80049ec <HAL_GetTick>
 80069d2:	0002      	movs	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0c6      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e2:	4b65      	ldr	r3, [pc, #404]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069e6:	2380      	movs	r3, #128	@ 0x80
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4013      	ands	r3, r2
 80069ec:	d0ef      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4013      	ands	r3, r2
 80069f8:	d01f      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	23c0      	movs	r3, #192	@ 0xc0
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	401a      	ands	r2, r3
 8006a04:	23c0      	movs	r3, #192	@ 0xc0
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d10c      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a5e      	ldr	r2, [pc, #376]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	0019      	movs	r1, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	23c0      	movs	r3, #192	@ 0xc0
 8006a1c:	039b      	lsls	r3, r3, #14
 8006a1e:	401a      	ands	r2, r3
 8006a20:	4b55      	ldr	r3, [pc, #340]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a22:	430a      	orrs	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	4b54      	ldr	r3, [pc, #336]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	23c0      	movs	r3, #192	@ 0xc0
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	401a      	ands	r2, r3
 8006a34:	4b50      	ldr	r3, [pc, #320]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a36:	430a      	orrs	r2, r1
 8006a38:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	4013      	ands	r3, r2
 8006a42:	d01f      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	23c0      	movs	r3, #192	@ 0xc0
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	401a      	ands	r2, r3
 8006a4e:	23c0      	movs	r3, #192	@ 0xc0
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006a56:	4b48      	ldr	r3, [pc, #288]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	23c0      	movs	r3, #192	@ 0xc0
 8006a66:	039b      	lsls	r3, r3, #14
 8006a68:	401a      	ands	r2, r3
 8006a6a:	4b43      	ldr	r3, [pc, #268]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	4b41      	ldr	r3, [pc, #260]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a72:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	23c0      	movs	r3, #192	@ 0xc0
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a80:	430a      	orrs	r2, r1
 8006a82:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a84:	2317      	movs	r3, #23
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d105      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a92:	4b39      	ldr	r3, [pc, #228]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a94:	493e      	ldr	r1, [pc, #248]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006a96:	400a      	ands	r2, r1
 8006a98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aa4:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	4393      	bics	r3, r2
 8006aac:	0019      	movs	r1, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	4b31      	ldr	r3, [pc, #196]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	4393      	bics	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	4b29      	ldr	r3, [pc, #164]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2204      	movs	r2, #4
 8006adc:	4013      	ands	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ae0:	4b25      	ldr	r3, [pc, #148]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	0019      	movs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	4b22      	ldr	r3, [pc, #136]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006af0:	430a      	orrs	r2, r1
 8006af2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2208      	movs	r2, #8
 8006afa:	4013      	ands	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006afe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	4a25      	ldr	r2, [pc, #148]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b1e:	4b16      	ldr	r3, [pc, #88]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b22:	4a17      	ldr	r2, [pc, #92]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	0019      	movs	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	4b12      	ldr	r3, [pc, #72]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2240      	movs	r2, #64	@ 0x40
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d009      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b40:	4a16      	ldr	r2, [pc, #88]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2280      	movs	r2, #128	@ 0x80
 8006b56:	4013      	ands	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006b5a:	4b07      	ldr	r3, [pc, #28]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	0019      	movs	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	4b03      	ldr	r3, [pc, #12]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b006      	add	sp, #24
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	fffcffff 	.word	0xfffcffff
 8006b84:	fff7ffff 	.word	0xfff7ffff
 8006b88:	00001388 	.word	0x00001388
 8006b8c:	ffcfffff 	.word	0xffcfffff
 8006b90:	efffffff 	.word	0xefffffff
 8006b94:	fffff3ff 	.word	0xfffff3ff
 8006b98:	ffffcfff 	.word	0xffffcfff
 8006b9c:	fbffffff 	.word	0xfbffffff
 8006ba0:	fff3ffff 	.word	0xfff3ffff

08006ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e044      	b.n	8006c40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2278      	movs	r2, #120	@ 0x78
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7fd fd4b 	bl	8004664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2224      	movs	r2, #36	@ 0x24
 8006bd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2101      	movs	r1, #1
 8006be0:	438a      	bics	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 f8d0 	bl	8006d8c <UART_SetConfig>
 8006bec:	0003      	movs	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e024      	b.n	8006c40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 fb61 	bl	80072c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	490d      	ldr	r1, [pc, #52]	@ (8006c48 <HAL_UART_Init+0xa4>)
 8006c12:	400a      	ands	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	212a      	movs	r1, #42	@ 0x2a
 8006c22:	438a      	bics	r2, r1
 8006c24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2101      	movs	r1, #1
 8006c32:	430a      	orrs	r2, r1
 8006c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 fbf9 	bl	8007430 <UART_CheckIdleState>
 8006c3e:	0003      	movs	r3, r0
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b002      	add	sp, #8
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	ffffb7ff 	.word	0xffffb7ff

08006c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	@ 0x28
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	1dbb      	adds	r3, r7, #6
 8006c5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d000      	beq.n	8006c66 <HAL_UART_Transmit+0x1a>
 8006c64:	e08c      	b.n	8006d80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_UART_Transmit+0x28>
 8006c6c:	1dbb      	adds	r3, r7, #6
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e084      	b.n	8006d82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	2380      	movs	r3, #128	@ 0x80
 8006c7e:	015b      	lsls	r3, r3, #5
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d109      	bne.n	8006c98 <HAL_UART_Transmit+0x4c>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4013      	ands	r3, r2
 8006c92:	d001      	beq.n	8006c98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e074      	b.n	8006d82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2284      	movs	r2, #132	@ 0x84
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2221      	movs	r2, #33	@ 0x21
 8006ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd fea1 	bl	80049ec <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1dba      	adds	r2, r7, #6
 8006cb2:	2150      	movs	r1, #80	@ 0x50
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1dba      	adds	r2, r7, #6
 8006cbc:	2152      	movs	r1, #82	@ 0x52
 8006cbe:	8812      	ldrh	r2, [r2, #0]
 8006cc0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	2380      	movs	r3, #128	@ 0x80
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d108      	bne.n	8006ce0 <HAL_UART_Transmit+0x94>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e003      	b.n	8006ce8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce8:	e02f      	b.n	8006d4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	0013      	movs	r3, r2
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2180      	movs	r1, #128	@ 0x80
 8006cf8:	f000 fc42 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8006cfc:	1e03      	subs	r3, r0, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e03b      	b.n	8006d82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	001a      	movs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	05d2      	lsls	r2, r2, #23
 8006d1c:	0dd2      	lsrs	r2, r2, #23
 8006d1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	3302      	adds	r3, #2
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e007      	b.n	8006d38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2252      	movs	r2, #82	@ 0x52
 8006d3c:	5a9b      	ldrh	r3, [r3, r2]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b299      	uxth	r1, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2252      	movs	r2, #82	@ 0x52
 8006d48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2252      	movs	r2, #82	@ 0x52
 8006d4e:	5a9b      	ldrh	r3, [r3, r2]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c9      	bne.n	8006cea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	0013      	movs	r3, r2
 8006d60:	2200      	movs	r2, #0
 8006d62:	2140      	movs	r1, #64	@ 0x40
 8006d64:	f000 fc0c 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8006d68:	1e03      	subs	r3, r0, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e005      	b.n	8006d82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b008      	add	sp, #32
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b5b0      	push	{r4, r5, r7, lr}
 8006d8e:	b08e      	sub	sp, #56	@ 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d94:	231a      	movs	r3, #26
 8006d96:	2218      	movs	r2, #24
 8006d98:	189b      	adds	r3, r3, r2
 8006d9a:	19db      	adds	r3, r3, r7
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4ac3      	ldr	r2, [pc, #780]	@ (80070cc <UART_SetConfig+0x340>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4abe      	ldr	r2, [pc, #760]	@ (80070d0 <UART_SetConfig+0x344>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	0019      	movs	r1, r3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4ab8      	ldr	r2, [pc, #736]	@ (80070d4 <UART_SetConfig+0x348>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4ab4      	ldr	r2, [pc, #720]	@ (80070d8 <UART_SetConfig+0x34c>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4ab0      	ldr	r2, [pc, #704]	@ (80070dc <UART_SetConfig+0x350>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d131      	bne.n	8006e84 <UART_SetConfig+0xf8>
 8006e20:	4baf      	ldr	r3, [pc, #700]	@ (80070e0 <UART_SetConfig+0x354>)
 8006e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e24:	2203      	movs	r2, #3
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d01d      	beq.n	8006e68 <UART_SetConfig+0xdc>
 8006e2c:	d823      	bhi.n	8006e76 <UART_SetConfig+0xea>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d00c      	beq.n	8006e4c <UART_SetConfig+0xc0>
 8006e32:	d820      	bhi.n	8006e76 <UART_SetConfig+0xea>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <UART_SetConfig+0xb2>
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d00e      	beq.n	8006e5a <UART_SetConfig+0xce>
 8006e3c:	e01b      	b.n	8006e76 <UART_SetConfig+0xea>
 8006e3e:	231b      	movs	r3, #27
 8006e40:	2218      	movs	r2, #24
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	19db      	adds	r3, r3, r7
 8006e46:	2201      	movs	r2, #1
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e0b4      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e4c:	231b      	movs	r3, #27
 8006e4e:	2218      	movs	r2, #24
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	19db      	adds	r3, r3, r7
 8006e54:	2202      	movs	r2, #2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e0ad      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e5a:	231b      	movs	r3, #27
 8006e5c:	2218      	movs	r2, #24
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	19db      	adds	r3, r3, r7
 8006e62:	2204      	movs	r2, #4
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e0a6      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e68:	231b      	movs	r3, #27
 8006e6a:	2218      	movs	r2, #24
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	19db      	adds	r3, r3, r7
 8006e70:	2208      	movs	r2, #8
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e09f      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e76:	231b      	movs	r3, #27
 8006e78:	2218      	movs	r2, #24
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	19db      	adds	r3, r3, r7
 8006e7e:	2210      	movs	r2, #16
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e098      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a96      	ldr	r2, [pc, #600]	@ (80070e4 <UART_SetConfig+0x358>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d131      	bne.n	8006ef2 <UART_SetConfig+0x166>
 8006e8e:	4b94      	ldr	r3, [pc, #592]	@ (80070e0 <UART_SetConfig+0x354>)
 8006e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e92:	220c      	movs	r2, #12
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d01d      	beq.n	8006ed6 <UART_SetConfig+0x14a>
 8006e9a:	d823      	bhi.n	8006ee4 <UART_SetConfig+0x158>
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d00c      	beq.n	8006eba <UART_SetConfig+0x12e>
 8006ea0:	d820      	bhi.n	8006ee4 <UART_SetConfig+0x158>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <UART_SetConfig+0x120>
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d00e      	beq.n	8006ec8 <UART_SetConfig+0x13c>
 8006eaa:	e01b      	b.n	8006ee4 <UART_SetConfig+0x158>
 8006eac:	231b      	movs	r3, #27
 8006eae:	2218      	movs	r2, #24
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	19db      	adds	r3, r3, r7
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e07d      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006eba:	231b      	movs	r3, #27
 8006ebc:	2218      	movs	r2, #24
 8006ebe:	189b      	adds	r3, r3, r2
 8006ec0:	19db      	adds	r3, r3, r7
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e076      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ec8:	231b      	movs	r3, #27
 8006eca:	2218      	movs	r2, #24
 8006ecc:	189b      	adds	r3, r3, r2
 8006ece:	19db      	adds	r3, r3, r7
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	e06f      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ed6:	231b      	movs	r3, #27
 8006ed8:	2218      	movs	r2, #24
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	19db      	adds	r3, r3, r7
 8006ede:	2208      	movs	r2, #8
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e068      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ee4:	231b      	movs	r3, #27
 8006ee6:	2218      	movs	r2, #24
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	2210      	movs	r2, #16
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e061      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80070e8 <UART_SetConfig+0x35c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d106      	bne.n	8006f0a <UART_SetConfig+0x17e>
 8006efc:	231b      	movs	r3, #27
 8006efe:	2218      	movs	r2, #24
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e055      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a77      	ldr	r2, [pc, #476]	@ (80070ec <UART_SetConfig+0x360>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d106      	bne.n	8006f22 <UART_SetConfig+0x196>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2218      	movs	r2, #24
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e049      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6b      	ldr	r2, [pc, #428]	@ (80070d4 <UART_SetConfig+0x348>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d13e      	bne.n	8006faa <UART_SetConfig+0x21e>
 8006f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <UART_SetConfig+0x354>)
 8006f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f30:	23c0      	movs	r3, #192	@ 0xc0
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	4013      	ands	r3, r2
 8006f36:	22c0      	movs	r2, #192	@ 0xc0
 8006f38:	0112      	lsls	r2, r2, #4
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d027      	beq.n	8006f8e <UART_SetConfig+0x202>
 8006f3e:	22c0      	movs	r2, #192	@ 0xc0
 8006f40:	0112      	lsls	r2, r2, #4
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d82a      	bhi.n	8006f9c <UART_SetConfig+0x210>
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	0112      	lsls	r2, r2, #4
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d011      	beq.n	8006f72 <UART_SetConfig+0x1e6>
 8006f4e:	2280      	movs	r2, #128	@ 0x80
 8006f50:	0112      	lsls	r2, r2, #4
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d822      	bhi.n	8006f9c <UART_SetConfig+0x210>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <UART_SetConfig+0x1d8>
 8006f5a:	2280      	movs	r2, #128	@ 0x80
 8006f5c:	00d2      	lsls	r2, r2, #3
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <UART_SetConfig+0x1f4>
 8006f62:	e01b      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f64:	231b      	movs	r3, #27
 8006f66:	2218      	movs	r2, #24
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	19db      	adds	r3, r3, r7
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e021      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f72:	231b      	movs	r3, #27
 8006f74:	2218      	movs	r2, #24
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	19db      	adds	r3, r3, r7
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e01a      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f80:	231b      	movs	r3, #27
 8006f82:	2218      	movs	r2, #24
 8006f84:	189b      	adds	r3, r3, r2
 8006f86:	19db      	adds	r3, r3, r7
 8006f88:	2204      	movs	r2, #4
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e013      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f8e:	231b      	movs	r3, #27
 8006f90:	2218      	movs	r2, #24
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	19db      	adds	r3, r3, r7
 8006f96:	2208      	movs	r2, #8
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e00c      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006f9c:	231b      	movs	r3, #27
 8006f9e:	2218      	movs	r2, #24
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	19db      	adds	r3, r3, r7
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e005      	b.n	8006fb6 <UART_SetConfig+0x22a>
 8006faa:	231b      	movs	r3, #27
 8006fac:	2218      	movs	r2, #24
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	19db      	adds	r3, r3, r7
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a46      	ldr	r2, [pc, #280]	@ (80070d4 <UART_SetConfig+0x348>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d000      	beq.n	8006fc2 <UART_SetConfig+0x236>
 8006fc0:	e09a      	b.n	80070f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fc2:	231b      	movs	r3, #27
 8006fc4:	2218      	movs	r2, #24
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	19db      	adds	r3, r3, r7
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d01d      	beq.n	800700c <UART_SetConfig+0x280>
 8006fd0:	dc20      	bgt.n	8007014 <UART_SetConfig+0x288>
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d015      	beq.n	8007002 <UART_SetConfig+0x276>
 8006fd6:	dc1d      	bgt.n	8007014 <UART_SetConfig+0x288>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <UART_SetConfig+0x256>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d005      	beq.n	8006fec <UART_SetConfig+0x260>
 8006fe0:	e018      	b.n	8007014 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe2:	f7ff fc15 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006fea:	e01c      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fec:	4b3c      	ldr	r3, [pc, #240]	@ (80070e0 <UART_SetConfig+0x354>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d002      	beq.n	8006ffc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80070f0 <UART_SetConfig+0x364>)
 8006ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ffa:	e014      	b.n	8007026 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80070f4 <UART_SetConfig+0x368>)
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007000:	e011      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007002:	f7ff fb55 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 8007006:	0003      	movs	r3, r0
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800700a:	e00c      	b.n	8007026 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007012:	e008      	b.n	8007026 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007018:	231a      	movs	r3, #26
 800701a:	2218      	movs	r2, #24
 800701c:	189b      	adds	r3, r3, r2
 800701e:	19db      	adds	r3, r3, r7
 8007020:	2201      	movs	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]
        break;
 8007024:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d100      	bne.n	800702e <UART_SetConfig+0x2a2>
 800702c:	e133      	b.n	8007296 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	0013      	movs	r3, r2
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	189b      	adds	r3, r3, r2
 8007038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d305      	bcc.n	800704a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007046:	429a      	cmp	r2, r3
 8007048:	d906      	bls.n	8007058 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800704a:	231a      	movs	r3, #26
 800704c:	2218      	movs	r2, #24
 800704e:	189b      	adds	r3, r3, r2
 8007050:	19db      	adds	r3, r3, r7
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e11e      	b.n	8007296 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	6939      	ldr	r1, [r7, #16]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	000b      	movs	r3, r1
 8007066:	0e1b      	lsrs	r3, r3, #24
 8007068:	0010      	movs	r0, r2
 800706a:	0205      	lsls	r5, r0, #8
 800706c:	431d      	orrs	r5, r3
 800706e:	000b      	movs	r3, r1
 8007070:	021c      	lsls	r4, r3, #8
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	68b8      	ldr	r0, [r7, #8]
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	1900      	adds	r0, r0, r4
 8007084:	4169      	adcs	r1, r5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	2300      	movs	r3, #0
 800708e:	607b      	str	r3, [r7, #4]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f7f9 fa42 	bl	800051c <__aeabi_uldivmod>
 8007098:	0002      	movs	r2, r0
 800709a:	000b      	movs	r3, r1
 800709c:	0013      	movs	r3, r2
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a2:	23c0      	movs	r3, #192	@ 0xc0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d309      	bcc.n	80070be <UART_SetConfig+0x332>
 80070aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	035b      	lsls	r3, r3, #13
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d204      	bcs.n	80070be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	e0eb      	b.n	8007296 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80070be:	231a      	movs	r3, #26
 80070c0:	2218      	movs	r2, #24
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e0e4      	b.n	8007296 <UART_SetConfig+0x50a>
 80070cc:	efff69f3 	.word	0xefff69f3
 80070d0:	ffffcfff 	.word	0xffffcfff
 80070d4:	40004800 	.word	0x40004800
 80070d8:	fffff4ff 	.word	0xfffff4ff
 80070dc:	40013800 	.word	0x40013800
 80070e0:	40021000 	.word	0x40021000
 80070e4:	40004400 	.word	0x40004400
 80070e8:	40004c00 	.word	0x40004c00
 80070ec:	40005000 	.word	0x40005000
 80070f0:	003d0900 	.word	0x003d0900
 80070f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	2380      	movs	r3, #128	@ 0x80
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	429a      	cmp	r2, r3
 8007102:	d000      	beq.n	8007106 <UART_SetConfig+0x37a>
 8007104:	e070      	b.n	80071e8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007106:	231b      	movs	r3, #27
 8007108:	2218      	movs	r2, #24
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d822      	bhi.n	800715a <UART_SetConfig+0x3ce>
 8007114:	009a      	lsls	r2, r3, #2
 8007116:	4b67      	ldr	r3, [pc, #412]	@ (80072b4 <UART_SetConfig+0x528>)
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800711e:	f7ff fb77 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 8007122:	0003      	movs	r3, r0
 8007124:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007126:	e021      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7ff fb88 	bl	800683c <HAL_RCC_GetPCLK2Freq>
 800712c:	0003      	movs	r3, r0
 800712e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007130:	e01c      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007132:	4b61      	ldr	r3, [pc, #388]	@ (80072b8 <UART_SetConfig+0x52c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2210      	movs	r2, #16
 8007138:	4013      	ands	r3, r2
 800713a:	d002      	beq.n	8007142 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800713c:	4b5f      	ldr	r3, [pc, #380]	@ (80072bc <UART_SetConfig+0x530>)
 800713e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007140:	e014      	b.n	800716c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007142:	4b5f      	ldr	r3, [pc, #380]	@ (80072c0 <UART_SetConfig+0x534>)
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007146:	e011      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007148:	f7ff fab2 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 800714c:	0003      	movs	r3, r0
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007150:	e00c      	b.n	800716c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007152:	2380      	movs	r3, #128	@ 0x80
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007158:	e008      	b.n	800716c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800715e:	231a      	movs	r3, #26
 8007160:	2218      	movs	r2, #24
 8007162:	189b      	adds	r3, r3, r2
 8007164:	19db      	adds	r3, r3, r7
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
        break;
 800716a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800716c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d100      	bne.n	8007174 <UART_SetConfig+0x3e8>
 8007172:	e090      	b.n	8007296 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	005a      	lsls	r2, r3, #1
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	18d2      	adds	r2, r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	0019      	movs	r1, r3
 8007186:	0010      	movs	r0, r2
 8007188:	f7f8 ffda 	bl	8000140 <__udivsi3>
 800718c:	0003      	movs	r3, r0
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	2b0f      	cmp	r3, #15
 8007194:	d921      	bls.n	80071da <UART_SetConfig+0x44e>
 8007196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	025b      	lsls	r3, r3, #9
 800719c:	429a      	cmp	r2, r3
 800719e:	d21c      	bcs.n	80071da <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	200e      	movs	r0, #14
 80071a6:	2418      	movs	r4, #24
 80071a8:	1903      	adds	r3, r0, r4
 80071aa:	19db      	adds	r3, r3, r7
 80071ac:	210f      	movs	r1, #15
 80071ae:	438a      	bics	r2, r1
 80071b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2207      	movs	r2, #7
 80071ba:	4013      	ands	r3, r2
 80071bc:	b299      	uxth	r1, r3
 80071be:	1903      	adds	r3, r0, r4
 80071c0:	19db      	adds	r3, r3, r7
 80071c2:	1902      	adds	r2, r0, r4
 80071c4:	19d2      	adds	r2, r2, r7
 80071c6:	8812      	ldrh	r2, [r2, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	1902      	adds	r2, r0, r4
 80071d2:	19d2      	adds	r2, r2, r7
 80071d4:	8812      	ldrh	r2, [r2, #0]
 80071d6:	60da      	str	r2, [r3, #12]
 80071d8:	e05d      	b.n	8007296 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80071da:	231a      	movs	r3, #26
 80071dc:	2218      	movs	r2, #24
 80071de:	189b      	adds	r3, r3, r2
 80071e0:	19db      	adds	r3, r3, r7
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	e056      	b.n	8007296 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071e8:	231b      	movs	r3, #27
 80071ea:	2218      	movs	r2, #24
 80071ec:	189b      	adds	r3, r3, r2
 80071ee:	19db      	adds	r3, r3, r7
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d822      	bhi.n	800723c <UART_SetConfig+0x4b0>
 80071f6:	009a      	lsls	r2, r3, #2
 80071f8:	4b32      	ldr	r3, [pc, #200]	@ (80072c4 <UART_SetConfig+0x538>)
 80071fa:	18d3      	adds	r3, r2, r3
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7ff fb06 	bl	8006810 <HAL_RCC_GetPCLK1Freq>
 8007204:	0003      	movs	r3, r0
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007208:	e021      	b.n	800724e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720a:	f7ff fb17 	bl	800683c <HAL_RCC_GetPCLK2Freq>
 800720e:	0003      	movs	r3, r0
 8007210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007212:	e01c      	b.n	800724e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007214:	4b28      	ldr	r3, [pc, #160]	@ (80072b8 <UART_SetConfig+0x52c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2210      	movs	r2, #16
 800721a:	4013      	ands	r3, r2
 800721c:	d002      	beq.n	8007224 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800721e:	4b27      	ldr	r3, [pc, #156]	@ (80072bc <UART_SetConfig+0x530>)
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007222:	e014      	b.n	800724e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007224:	4b26      	ldr	r3, [pc, #152]	@ (80072c0 <UART_SetConfig+0x534>)
 8007226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007228:	e011      	b.n	800724e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722a:	f7ff fa41 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 800722e:	0003      	movs	r3, r0
 8007230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007232:	e00c      	b.n	800724e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007234:	2380      	movs	r3, #128	@ 0x80
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800723a:	e008      	b.n	800724e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007240:	231a      	movs	r3, #26
 8007242:	2218      	movs	r2, #24
 8007244:	189b      	adds	r3, r3, r2
 8007246:	19db      	adds	r3, r3, r7
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
        break;
 800724c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	085a      	lsrs	r2, r3, #1
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	18d2      	adds	r2, r2, r3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	0019      	movs	r1, r3
 8007264:	0010      	movs	r0, r2
 8007266:	f7f8 ff6b 	bl	8000140 <__udivsi3>
 800726a:	0003      	movs	r3, r0
 800726c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	2b0f      	cmp	r3, #15
 8007272:	d90a      	bls.n	800728a <UART_SetConfig+0x4fe>
 8007274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007276:	2380      	movs	r3, #128	@ 0x80
 8007278:	025b      	lsls	r3, r3, #9
 800727a:	429a      	cmp	r2, r3
 800727c:	d205      	bcs.n	800728a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800727e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007280:	b29a      	uxth	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e005      	b.n	8007296 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800728a:	231a      	movs	r3, #26
 800728c:	2218      	movs	r2, #24
 800728e:	189b      	adds	r3, r3, r2
 8007290:	19db      	adds	r3, r3, r7
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	2200      	movs	r2, #0
 800729a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2200      	movs	r2, #0
 80072a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072a2:	231a      	movs	r3, #26
 80072a4:	2218      	movs	r2, #24
 80072a6:	189b      	adds	r3, r3, r2
 80072a8:	19db      	adds	r3, r3, r7
 80072aa:	781b      	ldrb	r3, [r3, #0]
}
 80072ac:	0018      	movs	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b00e      	add	sp, #56	@ 0x38
 80072b2:	bdb0      	pop	{r4, r5, r7, pc}
 80072b4:	0800c4e4 	.word	0x0800c4e4
 80072b8:	40021000 	.word	0x40021000
 80072bc:	003d0900 	.word	0x003d0900
 80072c0:	00f42400 	.word	0x00f42400
 80072c4:	0800c508 	.word	0x0800c508

080072c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	2201      	movs	r2, #1
 80072d6:	4013      	ands	r3, r2
 80072d8:	d00b      	beq.n	80072f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a4a      	ldr	r2, [pc, #296]	@ (800740c <UART_AdvFeatureConfig+0x144>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	0019      	movs	r1, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	2202      	movs	r2, #2
 80072f8:	4013      	ands	r3, r2
 80072fa:	d00b      	beq.n	8007314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4a43      	ldr	r2, [pc, #268]	@ (8007410 <UART_AdvFeatureConfig+0x148>)
 8007304:	4013      	ands	r3, r2
 8007306:	0019      	movs	r1, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	2204      	movs	r2, #4
 800731a:	4013      	ands	r3, r2
 800731c:	d00b      	beq.n	8007336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a3b      	ldr	r2, [pc, #236]	@ (8007414 <UART_AdvFeatureConfig+0x14c>)
 8007326:	4013      	ands	r3, r2
 8007328:	0019      	movs	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	2208      	movs	r2, #8
 800733c:	4013      	ands	r3, r2
 800733e:	d00b      	beq.n	8007358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4a34      	ldr	r2, [pc, #208]	@ (8007418 <UART_AdvFeatureConfig+0x150>)
 8007348:	4013      	ands	r3, r2
 800734a:	0019      	movs	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	2210      	movs	r2, #16
 800735e:	4013      	ands	r3, r2
 8007360:	d00b      	beq.n	800737a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <UART_AdvFeatureConfig+0x154>)
 800736a:	4013      	ands	r3, r2
 800736c:	0019      	movs	r1, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	2220      	movs	r2, #32
 8007380:	4013      	ands	r3, r2
 8007382:	d00b      	beq.n	800739c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	4a25      	ldr	r2, [pc, #148]	@ (8007420 <UART_AdvFeatureConfig+0x158>)
 800738c:	4013      	ands	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	2240      	movs	r2, #64	@ 0x40
 80073a2:	4013      	ands	r3, r2
 80073a4:	d01d      	beq.n	80073e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007424 <UART_AdvFeatureConfig+0x15c>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	0019      	movs	r1, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073c2:	2380      	movs	r3, #128	@ 0x80
 80073c4:	035b      	lsls	r3, r3, #13
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d10b      	bne.n	80073e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a15      	ldr	r2, [pc, #84]	@ (8007428 <UART_AdvFeatureConfig+0x160>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	0019      	movs	r1, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	2280      	movs	r2, #128	@ 0x80
 80073e8:	4013      	ands	r3, r2
 80073ea:	d00b      	beq.n	8007404 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	4a0e      	ldr	r2, [pc, #56]	@ (800742c <UART_AdvFeatureConfig+0x164>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	0019      	movs	r1, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	605a      	str	r2, [r3, #4]
  }
}
 8007404:	46c0      	nop			@ (mov r8, r8)
 8007406:	46bd      	mov	sp, r7
 8007408:	b002      	add	sp, #8
 800740a:	bd80      	pop	{r7, pc}
 800740c:	fffdffff 	.word	0xfffdffff
 8007410:	fffeffff 	.word	0xfffeffff
 8007414:	fffbffff 	.word	0xfffbffff
 8007418:	ffff7fff 	.word	0xffff7fff
 800741c:	ffffefff 	.word	0xffffefff
 8007420:	ffffdfff 	.word	0xffffdfff
 8007424:	ffefffff 	.word	0xffefffff
 8007428:	ff9fffff 	.word	0xff9fffff
 800742c:	fff7ffff 	.word	0xfff7ffff

08007430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b092      	sub	sp, #72	@ 0x48
 8007434:	af02      	add	r7, sp, #8
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2284      	movs	r2, #132	@ 0x84
 800743c:	2100      	movs	r1, #0
 800743e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007440:	f7fd fad4 	bl	80049ec <HAL_GetTick>
 8007444:	0003      	movs	r3, r0
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2208      	movs	r2, #8
 8007450:	4013      	ands	r3, r2
 8007452:	2b08      	cmp	r3, #8
 8007454:	d12c      	bne.n	80074b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007458:	2280      	movs	r2, #128	@ 0x80
 800745a:	0391      	lsls	r1, r2, #14
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4a46      	ldr	r2, [pc, #280]	@ (8007578 <UART_CheckIdleState+0x148>)
 8007460:	9200      	str	r2, [sp, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	f000 f88c 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8007468:	1e03      	subs	r3, r0, #0
 800746a:	d021      	beq.n	80074b0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746c:	f3ef 8310 	mrs	r3, PRIMASK
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007476:	2301      	movs	r3, #1
 8007478:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	46c0      	nop			@ (mov r8, r8)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2180      	movs	r1, #128	@ 0x80
 800748e:	438a      	bics	r2, r1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	f383 8810 	msr	PRIMASK, r3
}
 800749c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2278      	movs	r2, #120	@ 0x78
 80074a8:	2100      	movs	r1, #0
 80074aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e05f      	b.n	8007570 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2204      	movs	r2, #4
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d146      	bne.n	800754c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c0:	2280      	movs	r2, #128	@ 0x80
 80074c2:	03d1      	lsls	r1, r2, #15
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007578 <UART_CheckIdleState+0x148>)
 80074c8:	9200      	str	r2, [sp, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f000 f858 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d03b      	beq.n	800754c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d4:	f3ef 8310 	mrs	r3, PRIMASK
 80074d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074de:	2301      	movs	r3, #1
 80074e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f383 8810 	msr	PRIMASK, r3
}
 80074e8:	46c0      	nop			@ (mov r8, r8)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4921      	ldr	r1, [pc, #132]	@ (800757c <UART_CheckIdleState+0x14c>)
 80074f6:	400a      	ands	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f383 8810 	msr	PRIMASK, r3
}
 8007504:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007506:	f3ef 8310 	mrs	r3, PRIMASK
 800750a:	61bb      	str	r3, [r7, #24]
  return(result);
 800750c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007510:	2301      	movs	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f383 8810 	msr	PRIMASK, r3
}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2101      	movs	r1, #1
 8007528:	438a      	bics	r2, r1
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f383 8810 	msr	PRIMASK, r3
}
 8007536:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2280      	movs	r2, #128	@ 0x80
 800753c:	2120      	movs	r1, #32
 800753e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2278      	movs	r2, #120	@ 0x78
 8007544:	2100      	movs	r1, #0
 8007546:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e011      	b.n	8007570 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2280      	movs	r2, #128	@ 0x80
 8007556:	2120      	movs	r1, #32
 8007558:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2278      	movs	r2, #120	@ 0x78
 800756a:	2100      	movs	r1, #0
 800756c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b010      	add	sp, #64	@ 0x40
 8007576:	bd80      	pop	{r7, pc}
 8007578:	01ffffff 	.word	0x01ffffff
 800757c:	fffffedf 	.word	0xfffffedf

08007580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	1dfb      	adds	r3, r7, #7
 800758e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007590:	e04b      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	3301      	adds	r3, #1
 8007596:	d048      	beq.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007598:	f7fd fa28 	bl	80049ec <HAL_GetTick>
 800759c:	0002      	movs	r2, r0
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e04b      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2204      	movs	r2, #4
 80075ba:	4013      	ands	r3, r2
 80075bc:	d035      	beq.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	2208      	movs	r2, #8
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d111      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2208      	movs	r2, #8
 80075d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 f83c 	bl	8007654 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2284      	movs	r2, #132	@ 0x84
 80075e0:	2108      	movs	r1, #8
 80075e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2278      	movs	r2, #120	@ 0x78
 80075e8:	2100      	movs	r1, #0
 80075ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e02c      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	2380      	movs	r3, #128	@ 0x80
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	401a      	ands	r2, r3
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	429a      	cmp	r2, r3
 8007602:	d112      	bne.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2280      	movs	r2, #128	@ 0x80
 800760a:	0112      	lsls	r2, r2, #4
 800760c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	0018      	movs	r0, r3
 8007612:	f000 f81f 	bl	8007654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2284      	movs	r2, #132	@ 0x84
 800761a:	2120      	movs	r1, #32
 800761c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2278      	movs	r2, #120	@ 0x78
 8007622:	2100      	movs	r1, #0
 8007624:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e00f      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	4013      	ands	r3, r2
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	425a      	negs	r2, r3
 800763a:	4153      	adcs	r3, r2
 800763c:	b2db      	uxtb	r3, r3
 800763e:	001a      	movs	r2, r3
 8007640:	1dfb      	adds	r3, r7, #7
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d0a4      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08e      	sub	sp, #56	@ 0x38
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800765c:	f3ef 8310 	mrs	r3, PRIMASK
 8007660:	617b      	str	r3, [r7, #20]
  return(result);
 8007662:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
 8007666:	2301      	movs	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f383 8810 	msr	PRIMASK, r3
}
 8007670:	46c0      	nop			@ (mov r8, r8)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4926      	ldr	r1, [pc, #152]	@ (8007718 <UART_EndRxTransfer+0xc4>)
 800767e:	400a      	ands	r2, r1
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007684:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	f383 8810 	msr	PRIMASK, r3
}
 800768c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768e:	f3ef 8310 	mrs	r3, PRIMASK
 8007692:	623b      	str	r3, [r7, #32]
  return(result);
 8007694:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	2301      	movs	r3, #1
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2101      	movs	r1, #1
 80076b0:	438a      	bics	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d118      	bne.n	80076fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c8:	f3ef 8310 	mrs	r3, PRIMASK
 80076cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076d2:	2301      	movs	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f383 8810 	msr	PRIMASK, r3
}
 80076dc:	46c0      	nop			@ (mov r8, r8)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2110      	movs	r1, #16
 80076ea:	438a      	bics	r2, r1
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f383 8810 	msr	PRIMASK, r3
}
 80076f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2280      	movs	r2, #128	@ 0x80
 80076fe:	2120      	movs	r1, #32
 8007700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800770e:	46c0      	nop			@ (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b00e      	add	sp, #56	@ 0x38
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	fffffedf 	.word	0xfffffedf

0800771c <__cvt>:
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	001f      	movs	r7, r3
 8007720:	2300      	movs	r3, #0
 8007722:	0016      	movs	r6, r2
 8007724:	b08b      	sub	sp, #44	@ 0x2c
 8007726:	429f      	cmp	r7, r3
 8007728:	da04      	bge.n	8007734 <__cvt+0x18>
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	0609      	lsls	r1, r1, #24
 800772e:	187b      	adds	r3, r7, r1
 8007730:	001f      	movs	r7, r3
 8007732:	232d      	movs	r3, #45	@ 0x2d
 8007734:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007736:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007738:	7013      	strb	r3, [r2, #0]
 800773a:	2320      	movs	r3, #32
 800773c:	2203      	movs	r2, #3
 800773e:	439d      	bics	r5, r3
 8007740:	2d46      	cmp	r5, #70	@ 0x46
 8007742:	d007      	beq.n	8007754 <__cvt+0x38>
 8007744:	002b      	movs	r3, r5
 8007746:	3b45      	subs	r3, #69	@ 0x45
 8007748:	4259      	negs	r1, r3
 800774a:	414b      	adcs	r3, r1
 800774c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800774e:	3a01      	subs	r2, #1
 8007750:	18cb      	adds	r3, r1, r3
 8007752:	9310      	str	r3, [sp, #64]	@ 0x40
 8007754:	ab09      	add	r3, sp, #36	@ 0x24
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	ab08      	add	r3, sp, #32
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800775e:	9200      	str	r2, [sp, #0]
 8007760:	9302      	str	r3, [sp, #8]
 8007762:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007764:	0032      	movs	r2, r6
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	003b      	movs	r3, r7
 800776a:	f001 f8cf 	bl	800890c <_dtoa_r>
 800776e:	0004      	movs	r4, r0
 8007770:	2d47      	cmp	r5, #71	@ 0x47
 8007772:	d11b      	bne.n	80077ac <__cvt+0x90>
 8007774:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007776:	07db      	lsls	r3, r3, #31
 8007778:	d511      	bpl.n	800779e <__cvt+0x82>
 800777a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800777c:	18c3      	adds	r3, r0, r3
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	0030      	movs	r0, r6
 8007786:	0039      	movs	r1, r7
 8007788:	f7f8 fe60 	bl	800044c <__aeabi_dcmpeq>
 800778c:	2800      	cmp	r0, #0
 800778e:	d001      	beq.n	8007794 <__cvt+0x78>
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	9309      	str	r3, [sp, #36]	@ 0x24
 8007794:	2230      	movs	r2, #48	@ 0x30
 8007796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007798:	9907      	ldr	r1, [sp, #28]
 800779a:	428b      	cmp	r3, r1
 800779c:	d320      	bcc.n	80077e0 <__cvt+0xc4>
 800779e:	0020      	movs	r0, r4
 80077a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80077a4:	1b1b      	subs	r3, r3, r4
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	b00b      	add	sp, #44	@ 0x2c
 80077aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077ae:	18c3      	adds	r3, r0, r3
 80077b0:	9307      	str	r3, [sp, #28]
 80077b2:	2d46      	cmp	r5, #70	@ 0x46
 80077b4:	d1e4      	bne.n	8007780 <__cvt+0x64>
 80077b6:	7803      	ldrb	r3, [r0, #0]
 80077b8:	2b30      	cmp	r3, #48	@ 0x30
 80077ba:	d10c      	bne.n	80077d6 <__cvt+0xba>
 80077bc:	2200      	movs	r2, #0
 80077be:	2300      	movs	r3, #0
 80077c0:	0030      	movs	r0, r6
 80077c2:	0039      	movs	r1, r7
 80077c4:	f7f8 fe42 	bl	800044c <__aeabi_dcmpeq>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d104      	bne.n	80077d6 <__cvt+0xba>
 80077cc:	2301      	movs	r3, #1
 80077ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077d8:	9a07      	ldr	r2, [sp, #28]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	18d3      	adds	r3, r2, r3
 80077de:	e7ce      	b.n	800777e <__cvt+0x62>
 80077e0:	1c59      	adds	r1, r3, #1
 80077e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e7d6      	b.n	8007796 <__cvt+0x7a>

080077e8 <__exponent>:
 80077e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ea:	232b      	movs	r3, #43	@ 0x2b
 80077ec:	0005      	movs	r5, r0
 80077ee:	000c      	movs	r4, r1
 80077f0:	b085      	sub	sp, #20
 80077f2:	7002      	strb	r2, [r0, #0]
 80077f4:	2900      	cmp	r1, #0
 80077f6:	da01      	bge.n	80077fc <__exponent+0x14>
 80077f8:	424c      	negs	r4, r1
 80077fa:	3302      	adds	r3, #2
 80077fc:	706b      	strb	r3, [r5, #1]
 80077fe:	2c09      	cmp	r4, #9
 8007800:	dd2c      	ble.n	800785c <__exponent+0x74>
 8007802:	ab02      	add	r3, sp, #8
 8007804:	1dde      	adds	r6, r3, #7
 8007806:	0020      	movs	r0, r4
 8007808:	210a      	movs	r1, #10
 800780a:	f7f8 fe09 	bl	8000420 <__aeabi_idivmod>
 800780e:	0037      	movs	r7, r6
 8007810:	3130      	adds	r1, #48	@ 0x30
 8007812:	3e01      	subs	r6, #1
 8007814:	0020      	movs	r0, r4
 8007816:	7031      	strb	r1, [r6, #0]
 8007818:	210a      	movs	r1, #10
 800781a:	9401      	str	r4, [sp, #4]
 800781c:	f7f8 fd1a 	bl	8000254 <__divsi3>
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	0004      	movs	r4, r0
 8007824:	2b63      	cmp	r3, #99	@ 0x63
 8007826:	dcee      	bgt.n	8007806 <__exponent+0x1e>
 8007828:	1eba      	subs	r2, r7, #2
 800782a:	1ca8      	adds	r0, r5, #2
 800782c:	0001      	movs	r1, r0
 800782e:	0013      	movs	r3, r2
 8007830:	3430      	adds	r4, #48	@ 0x30
 8007832:	7014      	strb	r4, [r2, #0]
 8007834:	ac02      	add	r4, sp, #8
 8007836:	3407      	adds	r4, #7
 8007838:	429c      	cmp	r4, r3
 800783a:	d80a      	bhi.n	8007852 <__exponent+0x6a>
 800783c:	2300      	movs	r3, #0
 800783e:	42a2      	cmp	r2, r4
 8007840:	d803      	bhi.n	800784a <__exponent+0x62>
 8007842:	3309      	adds	r3, #9
 8007844:	aa02      	add	r2, sp, #8
 8007846:	189b      	adds	r3, r3, r2
 8007848:	1bdb      	subs	r3, r3, r7
 800784a:	18c0      	adds	r0, r0, r3
 800784c:	1b40      	subs	r0, r0, r5
 800784e:	b005      	add	sp, #20
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	781c      	ldrb	r4, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	700c      	strb	r4, [r1, #0]
 8007858:	3101      	adds	r1, #1
 800785a:	e7eb      	b.n	8007834 <__exponent+0x4c>
 800785c:	2330      	movs	r3, #48	@ 0x30
 800785e:	18e4      	adds	r4, r4, r3
 8007860:	70ab      	strb	r3, [r5, #2]
 8007862:	1d28      	adds	r0, r5, #4
 8007864:	70ec      	strb	r4, [r5, #3]
 8007866:	e7f1      	b.n	800784c <__exponent+0x64>

08007868 <_printf_float>:
 8007868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786a:	b097      	sub	sp, #92	@ 0x5c
 800786c:	000d      	movs	r5, r1
 800786e:	920a      	str	r2, [sp, #40]	@ 0x28
 8007870:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007874:	9009      	str	r0, [sp, #36]	@ 0x24
 8007876:	f000 ff2d 	bl	80086d4 <_localeconv_r>
 800787a:	6803      	ldr	r3, [r0, #0]
 800787c:	0018      	movs	r0, r3
 800787e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007880:	f7f8 fc42 	bl	8000108 <strlen>
 8007884:	2300      	movs	r3, #0
 8007886:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007888:	9314      	str	r3, [sp, #80]	@ 0x50
 800788a:	7e2b      	ldrb	r3, [r5, #24]
 800788c:	2207      	movs	r2, #7
 800788e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	930e      	str	r3, [sp, #56]	@ 0x38
 8007894:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	05c9      	lsls	r1, r1, #23
 800789a:	d545      	bpl.n	8007928 <_printf_float+0xc0>
 800789c:	189b      	adds	r3, r3, r2
 800789e:	4393      	bics	r3, r2
 80078a0:	001a      	movs	r2, r3
 80078a2:	3208      	adds	r2, #8
 80078a4:	6022      	str	r2, [r4, #0]
 80078a6:	2201      	movs	r2, #1
 80078a8:	681e      	ldr	r6, [r3, #0]
 80078aa:	685f      	ldr	r7, [r3, #4]
 80078ac:	007b      	lsls	r3, r7, #1
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80078b2:	9610      	str	r6, [sp, #64]	@ 0x40
 80078b4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80078b6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80078b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80078ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80078bc:	4ba7      	ldr	r3, [pc, #668]	@ (8007b5c <_printf_float+0x2f4>)
 80078be:	4252      	negs	r2, r2
 80078c0:	f7fb fcd6 	bl	8003270 <__aeabi_dcmpun>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d131      	bne.n	800792c <_printf_float+0xc4>
 80078c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80078ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80078cc:	2201      	movs	r2, #1
 80078ce:	4ba3      	ldr	r3, [pc, #652]	@ (8007b5c <_printf_float+0x2f4>)
 80078d0:	4252      	negs	r2, r2
 80078d2:	f7f8 fdcb 	bl	800046c <__aeabi_dcmple>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d128      	bne.n	800792c <_printf_float+0xc4>
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	0030      	movs	r0, r6
 80078e0:	0039      	movs	r1, r7
 80078e2:	f7f8 fdb9 	bl	8000458 <__aeabi_dcmplt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d003      	beq.n	80078f2 <_printf_float+0x8a>
 80078ea:	002b      	movs	r3, r5
 80078ec:	222d      	movs	r2, #45	@ 0x2d
 80078ee:	3343      	adds	r3, #67	@ 0x43
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078f4:	4f9a      	ldr	r7, [pc, #616]	@ (8007b60 <_printf_float+0x2f8>)
 80078f6:	2b47      	cmp	r3, #71	@ 0x47
 80078f8:	d900      	bls.n	80078fc <_printf_float+0x94>
 80078fa:	4f9a      	ldr	r7, [pc, #616]	@ (8007b64 <_printf_float+0x2fc>)
 80078fc:	2303      	movs	r3, #3
 80078fe:	2400      	movs	r4, #0
 8007900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007902:	612b      	str	r3, [r5, #16]
 8007904:	3301      	adds	r3, #1
 8007906:	439a      	bics	r2, r3
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800790c:	0029      	movs	r1, r5
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007914:	aa15      	add	r2, sp, #84	@ 0x54
 8007916:	f000 f9e5 	bl	8007ce4 <_printf_common>
 800791a:	3001      	adds	r0, #1
 800791c:	d000      	beq.n	8007920 <_printf_float+0xb8>
 800791e:	e09f      	b.n	8007a60 <_printf_float+0x1f8>
 8007920:	2001      	movs	r0, #1
 8007922:	4240      	negs	r0, r0
 8007924:	b017      	add	sp, #92	@ 0x5c
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	3307      	adds	r3, #7
 800792a:	e7b8      	b.n	800789e <_printf_float+0x36>
 800792c:	0032      	movs	r2, r6
 800792e:	003b      	movs	r3, r7
 8007930:	0030      	movs	r0, r6
 8007932:	0039      	movs	r1, r7
 8007934:	f7fb fc9c 	bl	8003270 <__aeabi_dcmpun>
 8007938:	2800      	cmp	r0, #0
 800793a:	d00b      	beq.n	8007954 <_printf_float+0xec>
 800793c:	2f00      	cmp	r7, #0
 800793e:	da03      	bge.n	8007948 <_printf_float+0xe0>
 8007940:	002b      	movs	r3, r5
 8007942:	222d      	movs	r2, #45	@ 0x2d
 8007944:	3343      	adds	r3, #67	@ 0x43
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800794a:	4f87      	ldr	r7, [pc, #540]	@ (8007b68 <_printf_float+0x300>)
 800794c:	2b47      	cmp	r3, #71	@ 0x47
 800794e:	d9d5      	bls.n	80078fc <_printf_float+0x94>
 8007950:	4f86      	ldr	r7, [pc, #536]	@ (8007b6c <_printf_float+0x304>)
 8007952:	e7d3      	b.n	80078fc <_printf_float+0x94>
 8007954:	2220      	movs	r2, #32
 8007956:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007958:	686b      	ldr	r3, [r5, #4]
 800795a:	4394      	bics	r4, r2
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	d146      	bne.n	80079ee <_printf_float+0x186>
 8007960:	3307      	adds	r3, #7
 8007962:	606b      	str	r3, [r5, #4]
 8007964:	2380      	movs	r3, #128	@ 0x80
 8007966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	4313      	orrs	r3, r2
 800796c:	2200      	movs	r2, #0
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	9206      	str	r2, [sp, #24]
 8007972:	aa14      	add	r2, sp, #80	@ 0x50
 8007974:	9205      	str	r2, [sp, #20]
 8007976:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007978:	a90a      	add	r1, sp, #40	@ 0x28
 800797a:	9204      	str	r2, [sp, #16]
 800797c:	aa13      	add	r2, sp, #76	@ 0x4c
 800797e:	9203      	str	r2, [sp, #12]
 8007980:	2223      	movs	r2, #35	@ 0x23
 8007982:	1852      	adds	r2, r2, r1
 8007984:	9202      	str	r2, [sp, #8]
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	686b      	ldr	r3, [r5, #4]
 800798a:	0032      	movs	r2, r6
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007990:	003b      	movs	r3, r7
 8007992:	f7ff fec3 	bl	800771c <__cvt>
 8007996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007998:	0007      	movs	r7, r0
 800799a:	2c47      	cmp	r4, #71	@ 0x47
 800799c:	d12d      	bne.n	80079fa <_printf_float+0x192>
 800799e:	1cd3      	adds	r3, r2, #3
 80079a0:	db02      	blt.n	80079a8 <_printf_float+0x140>
 80079a2:	686b      	ldr	r3, [r5, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	dd48      	ble.n	8007a3a <_printf_float+0x1d2>
 80079a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80079ac:	3b02      	subs	r3, #2
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80079b2:	0028      	movs	r0, r5
 80079b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079b6:	3901      	subs	r1, #1
 80079b8:	3050      	adds	r0, #80	@ 0x50
 80079ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079bc:	f7ff ff14 	bl	80077e8 <__exponent>
 80079c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079c2:	0004      	movs	r4, r0
 80079c4:	1813      	adds	r3, r2, r0
 80079c6:	612b      	str	r3, [r5, #16]
 80079c8:	2a01      	cmp	r2, #1
 80079ca:	dc02      	bgt.n	80079d2 <_printf_float+0x16a>
 80079cc:	682a      	ldr	r2, [r5, #0]
 80079ce:	07d2      	lsls	r2, r2, #31
 80079d0:	d501      	bpl.n	80079d6 <_printf_float+0x16e>
 80079d2:	3301      	adds	r3, #1
 80079d4:	612b      	str	r3, [r5, #16]
 80079d6:	2323      	movs	r3, #35	@ 0x23
 80079d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d100      	bne.n	80079e4 <_printf_float+0x17c>
 80079e2:	e792      	b.n	800790a <_printf_float+0xa2>
 80079e4:	002b      	movs	r3, r5
 80079e6:	222d      	movs	r2, #45	@ 0x2d
 80079e8:	3343      	adds	r3, #67	@ 0x43
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e78d      	b.n	800790a <_printf_float+0xa2>
 80079ee:	2c47      	cmp	r4, #71	@ 0x47
 80079f0:	d1b8      	bne.n	8007964 <_printf_float+0xfc>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1b6      	bne.n	8007964 <_printf_float+0xfc>
 80079f6:	3301      	adds	r3, #1
 80079f8:	e7b3      	b.n	8007962 <_printf_float+0xfa>
 80079fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079fc:	0011      	movs	r1, r2
 80079fe:	2b65      	cmp	r3, #101	@ 0x65
 8007a00:	d9d7      	bls.n	80079b2 <_printf_float+0x14a>
 8007a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a04:	2b66      	cmp	r3, #102	@ 0x66
 8007a06:	d11a      	bne.n	8007a3e <_printf_float+0x1d6>
 8007a08:	686b      	ldr	r3, [r5, #4]
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	dd09      	ble.n	8007a22 <_printf_float+0x1ba>
 8007a0e:	612a      	str	r2, [r5, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <_printf_float+0x1b2>
 8007a14:	6829      	ldr	r1, [r5, #0]
 8007a16:	07c9      	lsls	r1, r1, #31
 8007a18:	d50b      	bpl.n	8007a32 <_printf_float+0x1ca>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	189b      	adds	r3, r3, r2
 8007a1e:	612b      	str	r3, [r5, #16]
 8007a20:	e007      	b.n	8007a32 <_printf_float+0x1ca>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <_printf_float+0x1c6>
 8007a26:	2201      	movs	r2, #1
 8007a28:	6829      	ldr	r1, [r5, #0]
 8007a2a:	4211      	tst	r1, r2
 8007a2c:	d000      	beq.n	8007a30 <_printf_float+0x1c8>
 8007a2e:	1c9a      	adds	r2, r3, #2
 8007a30:	612a      	str	r2, [r5, #16]
 8007a32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a34:	2400      	movs	r4, #0
 8007a36:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007a38:	e7cd      	b.n	80079d6 <_printf_float+0x16e>
 8007a3a:	2367      	movs	r3, #103	@ 0x67
 8007a3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007a40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a42:	4299      	cmp	r1, r3
 8007a44:	db06      	blt.n	8007a54 <_printf_float+0x1ec>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	6129      	str	r1, [r5, #16]
 8007a4a:	07db      	lsls	r3, r3, #31
 8007a4c:	d5f1      	bpl.n	8007a32 <_printf_float+0x1ca>
 8007a4e:	3101      	adds	r1, #1
 8007a50:	6129      	str	r1, [r5, #16]
 8007a52:	e7ee      	b.n	8007a32 <_printf_float+0x1ca>
 8007a54:	2201      	movs	r2, #1
 8007a56:	2900      	cmp	r1, #0
 8007a58:	dce0      	bgt.n	8007a1c <_printf_float+0x1b4>
 8007a5a:	1892      	adds	r2, r2, r2
 8007a5c:	1a52      	subs	r2, r2, r1
 8007a5e:	e7dd      	b.n	8007a1c <_printf_float+0x1b4>
 8007a60:	682a      	ldr	r2, [r5, #0]
 8007a62:	0553      	lsls	r3, r2, #21
 8007a64:	d408      	bmi.n	8007a78 <_printf_float+0x210>
 8007a66:	692b      	ldr	r3, [r5, #16]
 8007a68:	003a      	movs	r2, r7
 8007a6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a70:	47a0      	blx	r4
 8007a72:	3001      	adds	r0, #1
 8007a74:	d129      	bne.n	8007aca <_printf_float+0x262>
 8007a76:	e753      	b.n	8007920 <_printf_float+0xb8>
 8007a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a7a:	2b65      	cmp	r3, #101	@ 0x65
 8007a7c:	d800      	bhi.n	8007a80 <_printf_float+0x218>
 8007a7e:	e0da      	b.n	8007c36 <_printf_float+0x3ce>
 8007a80:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007a82:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007a84:	2200      	movs	r2, #0
 8007a86:	2300      	movs	r3, #0
 8007a88:	f7f8 fce0 	bl	800044c <__aeabi_dcmpeq>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d033      	beq.n	8007af8 <_printf_float+0x290>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4a37      	ldr	r2, [pc, #220]	@ (8007b70 <_printf_float+0x308>)
 8007a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a9a:	47a0      	blx	r4
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d100      	bne.n	8007aa2 <_printf_float+0x23a>
 8007aa0:	e73e      	b.n	8007920 <_printf_float+0xb8>
 8007aa2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007aa6:	42b3      	cmp	r3, r6
 8007aa8:	db02      	blt.n	8007ab0 <_printf_float+0x248>
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	07db      	lsls	r3, r3, #31
 8007aae:	d50c      	bpl.n	8007aca <_printf_float+0x262>
 8007ab0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ab6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ab8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aba:	47a0      	blx	r4
 8007abc:	2400      	movs	r4, #0
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d100      	bne.n	8007ac4 <_printf_float+0x25c>
 8007ac2:	e72d      	b.n	8007920 <_printf_float+0xb8>
 8007ac4:	1e73      	subs	r3, r6, #1
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	dc0a      	bgt.n	8007ae0 <_printf_float+0x278>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	079b      	lsls	r3, r3, #30
 8007ace:	d500      	bpl.n	8007ad2 <_printf_float+0x26a>
 8007ad0:	e105      	b.n	8007cde <_printf_float+0x476>
 8007ad2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ad4:	68e8      	ldr	r0, [r5, #12]
 8007ad6:	4298      	cmp	r0, r3
 8007ad8:	db00      	blt.n	8007adc <_printf_float+0x274>
 8007ada:	e723      	b.n	8007924 <_printf_float+0xbc>
 8007adc:	0018      	movs	r0, r3
 8007ade:	e721      	b.n	8007924 <_printf_float+0xbc>
 8007ae0:	002a      	movs	r2, r5
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007aea:	321a      	adds	r2, #26
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	d100      	bne.n	8007af4 <_printf_float+0x28c>
 8007af2:	e715      	b.n	8007920 <_printf_float+0xb8>
 8007af4:	3401      	adds	r4, #1
 8007af6:	e7e5      	b.n	8007ac4 <_printf_float+0x25c>
 8007af8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dc3a      	bgt.n	8007b74 <_printf_float+0x30c>
 8007afe:	2301      	movs	r3, #1
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <_printf_float+0x308>)
 8007b02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b08:	47a0      	blx	r4
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d100      	bne.n	8007b10 <_printf_float+0x2a8>
 8007b0e:	e707      	b.n	8007920 <_printf_float+0xb8>
 8007b10:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007b12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b14:	4333      	orrs	r3, r6
 8007b16:	d102      	bne.n	8007b1e <_printf_float+0x2b6>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d5d5      	bpl.n	8007aca <_printf_float+0x262>
 8007b1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b28:	47a0      	blx	r4
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d100      	bne.n	8007b32 <_printf_float+0x2ca>
 8007b30:	e6f6      	b.n	8007920 <_printf_float+0xb8>
 8007b32:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b38:	425b      	negs	r3, r3
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	dc01      	bgt.n	8007b42 <_printf_float+0x2da>
 8007b3e:	0033      	movs	r3, r6
 8007b40:	e792      	b.n	8007a68 <_printf_float+0x200>
 8007b42:	002a      	movs	r2, r5
 8007b44:	2301      	movs	r3, #1
 8007b46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b4c:	321a      	adds	r2, #26
 8007b4e:	47a0      	blx	r4
 8007b50:	3001      	adds	r0, #1
 8007b52:	d100      	bne.n	8007b56 <_printf_float+0x2ee>
 8007b54:	e6e4      	b.n	8007920 <_printf_float+0xb8>
 8007b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b58:	3301      	adds	r3, #1
 8007b5a:	e7ea      	b.n	8007b32 <_printf_float+0x2ca>
 8007b5c:	7fefffff 	.word	0x7fefffff
 8007b60:	0800c52c 	.word	0x0800c52c
 8007b64:	0800c530 	.word	0x0800c530
 8007b68:	0800c534 	.word	0x0800c534
 8007b6c:	0800c538 	.word	0x0800c538
 8007b70:	0800c53c 	.word	0x0800c53c
 8007b74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007b78:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b7a:	429e      	cmp	r6, r3
 8007b7c:	dd00      	ble.n	8007b80 <_printf_float+0x318>
 8007b7e:	001e      	movs	r6, r3
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	dc31      	bgt.n	8007be8 <_printf_float+0x380>
 8007b84:	43f3      	mvns	r3, r6
 8007b86:	2400      	movs	r4, #0
 8007b88:	17db      	asrs	r3, r3, #31
 8007b8a:	4033      	ands	r3, r6
 8007b8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b8e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b92:	1af3      	subs	r3, r6, r3
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	dc30      	bgt.n	8007bfa <_printf_float+0x392>
 8007b98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	dc38      	bgt.n	8007c12 <_printf_float+0x3aa>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	07db      	lsls	r3, r3, #31
 8007ba4:	d435      	bmi.n	8007c12 <_printf_float+0x3aa>
 8007ba6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007baa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bac:	1b9b      	subs	r3, r3, r6
 8007bae:	1b14      	subs	r4, r2, r4
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	dd00      	ble.n	8007bb6 <_printf_float+0x34e>
 8007bb4:	001c      	movs	r4, r3
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	dc34      	bgt.n	8007c24 <_printf_float+0x3bc>
 8007bba:	43e3      	mvns	r3, r4
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	17db      	asrs	r3, r3, #31
 8007bc0:	401c      	ands	r4, r3
 8007bc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	1b1b      	subs	r3, r3, r4
 8007bca:	42b3      	cmp	r3, r6
 8007bcc:	dc00      	bgt.n	8007bd0 <_printf_float+0x368>
 8007bce:	e77c      	b.n	8007aca <_printf_float+0x262>
 8007bd0:	002a      	movs	r2, r5
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007bda:	321a      	adds	r2, #26
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	d100      	bne.n	8007be4 <_printf_float+0x37c>
 8007be2:	e69d      	b.n	8007920 <_printf_float+0xb8>
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7ec      	b.n	8007bc2 <_printf_float+0x35a>
 8007be8:	0033      	movs	r3, r6
 8007bea:	003a      	movs	r2, r7
 8007bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007bf2:	47a0      	blx	r4
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1c5      	bne.n	8007b84 <_printf_float+0x31c>
 8007bf8:	e692      	b.n	8007920 <_printf_float+0xb8>
 8007bfa:	002a      	movs	r2, r5
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c02:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c04:	321a      	adds	r2, #26
 8007c06:	47b0      	blx	r6
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d100      	bne.n	8007c0e <_printf_float+0x3a6>
 8007c0c:	e688      	b.n	8007920 <_printf_float+0xb8>
 8007c0e:	3401      	adds	r4, #1
 8007c10:	e7bd      	b.n	8007b8e <_printf_float+0x326>
 8007c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007c1c:	47a0      	blx	r4
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d1c1      	bne.n	8007ba6 <_printf_float+0x33e>
 8007c22:	e67d      	b.n	8007920 <_printf_float+0xb8>
 8007c24:	19ba      	adds	r2, r7, r6
 8007c26:	0023      	movs	r3, r4
 8007c28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c2e:	47b0      	blx	r6
 8007c30:	3001      	adds	r0, #1
 8007c32:	d1c2      	bne.n	8007bba <_printf_float+0x352>
 8007c34:	e674      	b.n	8007920 <_printf_float+0xb8>
 8007c36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c38:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	dc02      	bgt.n	8007c44 <_printf_float+0x3dc>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	421a      	tst	r2, r3
 8007c42:	d039      	beq.n	8007cb8 <_printf_float+0x450>
 8007c44:	2301      	movs	r3, #1
 8007c46:	003a      	movs	r2, r7
 8007c48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c4e:	47b0      	blx	r6
 8007c50:	3001      	adds	r0, #1
 8007c52:	d100      	bne.n	8007c56 <_printf_float+0x3ee>
 8007c54:	e664      	b.n	8007920 <_printf_float+0xb8>
 8007c56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c60:	47b0      	blx	r6
 8007c62:	3001      	adds	r0, #1
 8007c64:	d100      	bne.n	8007c68 <_printf_float+0x400>
 8007c66:	e65b      	b.n	8007920 <_printf_float+0xb8>
 8007c68:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007c6a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007c6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c6e:	2200      	movs	r2, #0
 8007c70:	3b01      	subs	r3, #1
 8007c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c74:	2300      	movs	r3, #0
 8007c76:	f7f8 fbe9 	bl	800044c <__aeabi_dcmpeq>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d11a      	bne.n	8007cb4 <_printf_float+0x44c>
 8007c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c80:	1c7a      	adds	r2, r7, #1
 8007c82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c88:	47b0      	blx	r6
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d10e      	bne.n	8007cac <_printf_float+0x444>
 8007c8e:	e647      	b.n	8007920 <_printf_float+0xb8>
 8007c90:	002a      	movs	r2, r5
 8007c92:	2301      	movs	r3, #1
 8007c94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007c9a:	321a      	adds	r2, #26
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d100      	bne.n	8007ca4 <_printf_float+0x43c>
 8007ca2:	e63d      	b.n	8007920 <_printf_float+0xb8>
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ca8:	429e      	cmp	r6, r3
 8007caa:	dbf1      	blt.n	8007c90 <_printf_float+0x428>
 8007cac:	002a      	movs	r2, r5
 8007cae:	0023      	movs	r3, r4
 8007cb0:	3250      	adds	r2, #80	@ 0x50
 8007cb2:	e6da      	b.n	8007a6a <_printf_float+0x202>
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	e7f6      	b.n	8007ca6 <_printf_float+0x43e>
 8007cb8:	003a      	movs	r2, r7
 8007cba:	e7e2      	b.n	8007c82 <_printf_float+0x41a>
 8007cbc:	002a      	movs	r2, r5
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007cc6:	3219      	adds	r2, #25
 8007cc8:	47b0      	blx	r6
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d100      	bne.n	8007cd0 <_printf_float+0x468>
 8007cce:	e627      	b.n	8007920 <_printf_float+0xb8>
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	68eb      	ldr	r3, [r5, #12]
 8007cd4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	dcef      	bgt.n	8007cbc <_printf_float+0x454>
 8007cdc:	e6f9      	b.n	8007ad2 <_printf_float+0x26a>
 8007cde:	2400      	movs	r4, #0
 8007ce0:	e7f7      	b.n	8007cd2 <_printf_float+0x46a>
 8007ce2:	46c0      	nop			@ (mov r8, r8)

08007ce4 <_printf_common>:
 8007ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce6:	0016      	movs	r6, r2
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	688a      	ldr	r2, [r1, #8]
 8007cec:	690b      	ldr	r3, [r1, #16]
 8007cee:	000c      	movs	r4, r1
 8007cf0:	9000      	str	r0, [sp, #0]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	da00      	bge.n	8007cf8 <_printf_common+0x14>
 8007cf6:	0013      	movs	r3, r2
 8007cf8:	0022      	movs	r2, r4
 8007cfa:	6033      	str	r3, [r6, #0]
 8007cfc:	3243      	adds	r2, #67	@ 0x43
 8007cfe:	7812      	ldrb	r2, [r2, #0]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d001      	beq.n	8007d08 <_printf_common+0x24>
 8007d04:	3301      	adds	r3, #1
 8007d06:	6033      	str	r3, [r6, #0]
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	069b      	lsls	r3, r3, #26
 8007d0c:	d502      	bpl.n	8007d14 <_printf_common+0x30>
 8007d0e:	6833      	ldr	r3, [r6, #0]
 8007d10:	3302      	adds	r3, #2
 8007d12:	6033      	str	r3, [r6, #0]
 8007d14:	6822      	ldr	r2, [r4, #0]
 8007d16:	2306      	movs	r3, #6
 8007d18:	0015      	movs	r5, r2
 8007d1a:	401d      	ands	r5, r3
 8007d1c:	421a      	tst	r2, r3
 8007d1e:	d027      	beq.n	8007d70 <_printf_common+0x8c>
 8007d20:	0023      	movs	r3, r4
 8007d22:	3343      	adds	r3, #67	@ 0x43
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	1e5a      	subs	r2, r3, #1
 8007d28:	4193      	sbcs	r3, r2
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	0692      	lsls	r2, r2, #26
 8007d2e:	d430      	bmi.n	8007d92 <_printf_common+0xae>
 8007d30:	0022      	movs	r2, r4
 8007d32:	9901      	ldr	r1, [sp, #4]
 8007d34:	9800      	ldr	r0, [sp, #0]
 8007d36:	9d08      	ldr	r5, [sp, #32]
 8007d38:	3243      	adds	r2, #67	@ 0x43
 8007d3a:	47a8      	blx	r5
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d025      	beq.n	8007d8c <_printf_common+0xa8>
 8007d40:	2206      	movs	r2, #6
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	2500      	movs	r5, #0
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d105      	bne.n	8007d58 <_printf_common+0x74>
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	68e5      	ldr	r5, [r4, #12]
 8007d50:	1aed      	subs	r5, r5, r3
 8007d52:	43eb      	mvns	r3, r5
 8007d54:	17db      	asrs	r3, r3, #31
 8007d56:	401d      	ands	r5, r3
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	dd01      	ble.n	8007d64 <_printf_common+0x80>
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	18ed      	adds	r5, r5, r3
 8007d64:	2600      	movs	r6, #0
 8007d66:	42b5      	cmp	r5, r6
 8007d68:	d120      	bne.n	8007dac <_printf_common+0xc8>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e010      	b.n	8007d90 <_printf_common+0xac>
 8007d6e:	3501      	adds	r5, #1
 8007d70:	68e3      	ldr	r3, [r4, #12]
 8007d72:	6832      	ldr	r2, [r6, #0]
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	42ab      	cmp	r3, r5
 8007d78:	ddd2      	ble.n	8007d20 <_printf_common+0x3c>
 8007d7a:	0022      	movs	r2, r4
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	9901      	ldr	r1, [sp, #4]
 8007d80:	9800      	ldr	r0, [sp, #0]
 8007d82:	9f08      	ldr	r7, [sp, #32]
 8007d84:	3219      	adds	r2, #25
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d1f0      	bne.n	8007d6e <_printf_common+0x8a>
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	4240      	negs	r0, r0
 8007d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d92:	2030      	movs	r0, #48	@ 0x30
 8007d94:	18e1      	adds	r1, r4, r3
 8007d96:	3143      	adds	r1, #67	@ 0x43
 8007d98:	7008      	strb	r0, [r1, #0]
 8007d9a:	0021      	movs	r1, r4
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	3145      	adds	r1, #69	@ 0x45
 8007da0:	7809      	ldrb	r1, [r1, #0]
 8007da2:	18a2      	adds	r2, r4, r2
 8007da4:	3243      	adds	r2, #67	@ 0x43
 8007da6:	3302      	adds	r3, #2
 8007da8:	7011      	strb	r1, [r2, #0]
 8007daa:	e7c1      	b.n	8007d30 <_printf_common+0x4c>
 8007dac:	0022      	movs	r2, r4
 8007dae:	2301      	movs	r3, #1
 8007db0:	9901      	ldr	r1, [sp, #4]
 8007db2:	9800      	ldr	r0, [sp, #0]
 8007db4:	9f08      	ldr	r7, [sp, #32]
 8007db6:	321a      	adds	r2, #26
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa8>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d1      	b.n	8007d66 <_printf_common+0x82>
	...

08007dc4 <_printf_i>:
 8007dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc6:	b08b      	sub	sp, #44	@ 0x2c
 8007dc8:	9206      	str	r2, [sp, #24]
 8007dca:	000a      	movs	r2, r1
 8007dcc:	3243      	adds	r2, #67	@ 0x43
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	9203      	str	r2, [sp, #12]
 8007dd4:	7e0a      	ldrb	r2, [r1, #24]
 8007dd6:	000c      	movs	r4, r1
 8007dd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dda:	2a78      	cmp	r2, #120	@ 0x78
 8007ddc:	d809      	bhi.n	8007df2 <_printf_i+0x2e>
 8007dde:	2a62      	cmp	r2, #98	@ 0x62
 8007de0:	d80b      	bhi.n	8007dfa <_printf_i+0x36>
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	d100      	bne.n	8007de8 <_printf_i+0x24>
 8007de6:	e0bc      	b.n	8007f62 <_printf_i+0x19e>
 8007de8:	497b      	ldr	r1, [pc, #492]	@ (8007fd8 <_printf_i+0x214>)
 8007dea:	9104      	str	r1, [sp, #16]
 8007dec:	2a58      	cmp	r2, #88	@ 0x58
 8007dee:	d100      	bne.n	8007df2 <_printf_i+0x2e>
 8007df0:	e090      	b.n	8007f14 <_printf_i+0x150>
 8007df2:	0025      	movs	r5, r4
 8007df4:	3542      	adds	r5, #66	@ 0x42
 8007df6:	702a      	strb	r2, [r5, #0]
 8007df8:	e022      	b.n	8007e40 <_printf_i+0x7c>
 8007dfa:	0010      	movs	r0, r2
 8007dfc:	3863      	subs	r0, #99	@ 0x63
 8007dfe:	2815      	cmp	r0, #21
 8007e00:	d8f7      	bhi.n	8007df2 <_printf_i+0x2e>
 8007e02:	f7f8 f993 	bl	800012c <__gnu_thumb1_case_shi>
 8007e06:	0016      	.short	0x0016
 8007e08:	fff6001f 	.word	0xfff6001f
 8007e0c:	fff6fff6 	.word	0xfff6fff6
 8007e10:	001ffff6 	.word	0x001ffff6
 8007e14:	fff6fff6 	.word	0xfff6fff6
 8007e18:	fff6fff6 	.word	0xfff6fff6
 8007e1c:	003600a1 	.word	0x003600a1
 8007e20:	fff60080 	.word	0xfff60080
 8007e24:	00b2fff6 	.word	0x00b2fff6
 8007e28:	0036fff6 	.word	0x0036fff6
 8007e2c:	fff6fff6 	.word	0xfff6fff6
 8007e30:	0084      	.short	0x0084
 8007e32:	0025      	movs	r5, r4
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	3542      	adds	r5, #66	@ 0x42
 8007e38:	1d11      	adds	r1, r2, #4
 8007e3a:	6019      	str	r1, [r3, #0]
 8007e3c:	6813      	ldr	r3, [r2, #0]
 8007e3e:	702b      	strb	r3, [r5, #0]
 8007e40:	2301      	movs	r3, #1
 8007e42:	e0a0      	b.n	8007f86 <_printf_i+0x1c2>
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	6809      	ldr	r1, [r1, #0]
 8007e48:	1d02      	adds	r2, r0, #4
 8007e4a:	060d      	lsls	r5, r1, #24
 8007e4c:	d50b      	bpl.n	8007e66 <_printf_i+0xa2>
 8007e4e:	6806      	ldr	r6, [r0, #0]
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	da03      	bge.n	8007e5e <_printf_i+0x9a>
 8007e56:	232d      	movs	r3, #45	@ 0x2d
 8007e58:	9a03      	ldr	r2, [sp, #12]
 8007e5a:	4276      	negs	r6, r6
 8007e5c:	7013      	strb	r3, [r2, #0]
 8007e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8007fd8 <_printf_i+0x214>)
 8007e60:	270a      	movs	r7, #10
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	e018      	b.n	8007e98 <_printf_i+0xd4>
 8007e66:	6806      	ldr	r6, [r0, #0]
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	0649      	lsls	r1, r1, #25
 8007e6c:	d5f1      	bpl.n	8007e52 <_printf_i+0x8e>
 8007e6e:	b236      	sxth	r6, r6
 8007e70:	e7ef      	b.n	8007e52 <_printf_i+0x8e>
 8007e72:	6808      	ldr	r0, [r1, #0]
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	c940      	ldmia	r1!, {r6}
 8007e78:	0605      	lsls	r5, r0, #24
 8007e7a:	d402      	bmi.n	8007e82 <_printf_i+0xbe>
 8007e7c:	0640      	lsls	r0, r0, #25
 8007e7e:	d500      	bpl.n	8007e82 <_printf_i+0xbe>
 8007e80:	b2b6      	uxth	r6, r6
 8007e82:	6019      	str	r1, [r3, #0]
 8007e84:	4b54      	ldr	r3, [pc, #336]	@ (8007fd8 <_printf_i+0x214>)
 8007e86:	270a      	movs	r7, #10
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007e8c:	d100      	bne.n	8007e90 <_printf_i+0xcc>
 8007e8e:	3f02      	subs	r7, #2
 8007e90:	0023      	movs	r3, r4
 8007e92:	2200      	movs	r2, #0
 8007e94:	3343      	adds	r3, #67	@ 0x43
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	6863      	ldr	r3, [r4, #4]
 8007e9a:	60a3      	str	r3, [r4, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	db03      	blt.n	8007ea8 <_printf_i+0xe4>
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	438a      	bics	r2, r1
 8007ea6:	6022      	str	r2, [r4, #0]
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	d102      	bne.n	8007eb2 <_printf_i+0xee>
 8007eac:	9d03      	ldr	r5, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <_printf_i+0x108>
 8007eb2:	9d03      	ldr	r5, [sp, #12]
 8007eb4:	0030      	movs	r0, r6
 8007eb6:	0039      	movs	r1, r7
 8007eb8:	f7f8 f9c8 	bl	800024c <__aeabi_uidivmod>
 8007ebc:	9b04      	ldr	r3, [sp, #16]
 8007ebe:	3d01      	subs	r5, #1
 8007ec0:	5c5b      	ldrb	r3, [r3, r1]
 8007ec2:	702b      	strb	r3, [r5, #0]
 8007ec4:	0033      	movs	r3, r6
 8007ec6:	0006      	movs	r6, r0
 8007ec8:	429f      	cmp	r7, r3
 8007eca:	d9f3      	bls.n	8007eb4 <_printf_i+0xf0>
 8007ecc:	2f08      	cmp	r7, #8
 8007ece:	d109      	bne.n	8007ee4 <_printf_i+0x120>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	07db      	lsls	r3, r3, #31
 8007ed4:	d506      	bpl.n	8007ee4 <_printf_i+0x120>
 8007ed6:	6862      	ldr	r2, [r4, #4]
 8007ed8:	6923      	ldr	r3, [r4, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	dc02      	bgt.n	8007ee4 <_printf_i+0x120>
 8007ede:	2330      	movs	r3, #48	@ 0x30
 8007ee0:	3d01      	subs	r5, #1
 8007ee2:	702b      	strb	r3, [r5, #0]
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	1b5b      	subs	r3, r3, r5
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	9b07      	ldr	r3, [sp, #28]
 8007eec:	0021      	movs	r1, r4
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	9805      	ldr	r0, [sp, #20]
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	aa09      	add	r2, sp, #36	@ 0x24
 8007ef6:	f7ff fef5 	bl	8007ce4 <_printf_common>
 8007efa:	3001      	adds	r0, #1
 8007efc:	d148      	bne.n	8007f90 <_printf_i+0x1cc>
 8007efe:	2001      	movs	r0, #1
 8007f00:	4240      	negs	r0, r0
 8007f02:	b00b      	add	sp, #44	@ 0x2c
 8007f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f06:	2220      	movs	r2, #32
 8007f08:	6809      	ldr	r1, [r1, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	2278      	movs	r2, #120	@ 0x78
 8007f10:	4932      	ldr	r1, [pc, #200]	@ (8007fdc <_printf_i+0x218>)
 8007f12:	9104      	str	r1, [sp, #16]
 8007f14:	0021      	movs	r1, r4
 8007f16:	3145      	adds	r1, #69	@ 0x45
 8007f18:	700a      	strb	r2, [r1, #0]
 8007f1a:	6819      	ldr	r1, [r3, #0]
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	c940      	ldmia	r1!, {r6}
 8007f20:	0610      	lsls	r0, r2, #24
 8007f22:	d402      	bmi.n	8007f2a <_printf_i+0x166>
 8007f24:	0650      	lsls	r0, r2, #25
 8007f26:	d500      	bpl.n	8007f2a <_printf_i+0x166>
 8007f28:	b2b6      	uxth	r6, r6
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	07d3      	lsls	r3, r2, #31
 8007f2e:	d502      	bpl.n	8007f36 <_printf_i+0x172>
 8007f30:	2320      	movs	r3, #32
 8007f32:	4313      	orrs	r3, r2
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d001      	beq.n	8007f3e <_printf_i+0x17a>
 8007f3a:	2710      	movs	r7, #16
 8007f3c:	e7a8      	b.n	8007e90 <_printf_i+0xcc>
 8007f3e:	2220      	movs	r2, #32
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	4393      	bics	r3, r2
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	e7f8      	b.n	8007f3a <_printf_i+0x176>
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	680d      	ldr	r5, [r1, #0]
 8007f4c:	1d10      	adds	r0, r2, #4
 8007f4e:	6949      	ldr	r1, [r1, #20]
 8007f50:	6018      	str	r0, [r3, #0]
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	062e      	lsls	r6, r5, #24
 8007f56:	d501      	bpl.n	8007f5c <_printf_i+0x198>
 8007f58:	6019      	str	r1, [r3, #0]
 8007f5a:	e002      	b.n	8007f62 <_printf_i+0x19e>
 8007f5c:	066d      	lsls	r5, r5, #25
 8007f5e:	d5fb      	bpl.n	8007f58 <_printf_i+0x194>
 8007f60:	8019      	strh	r1, [r3, #0]
 8007f62:	2300      	movs	r3, #0
 8007f64:	9d03      	ldr	r5, [sp, #12]
 8007f66:	6123      	str	r3, [r4, #16]
 8007f68:	e7bf      	b.n	8007eea <_printf_i+0x126>
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	1d11      	adds	r1, r2, #4
 8007f6e:	6019      	str	r1, [r3, #0]
 8007f70:	6815      	ldr	r5, [r2, #0]
 8007f72:	2100      	movs	r1, #0
 8007f74:	0028      	movs	r0, r5
 8007f76:	6862      	ldr	r2, [r4, #4]
 8007f78:	f000 fc2b 	bl	80087d2 <memchr>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d001      	beq.n	8007f84 <_printf_i+0x1c0>
 8007f80:	1b40      	subs	r0, r0, r5
 8007f82:	6060      	str	r0, [r4, #4]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	6123      	str	r3, [r4, #16]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9a03      	ldr	r2, [sp, #12]
 8007f8c:	7013      	strb	r3, [r2, #0]
 8007f8e:	e7ac      	b.n	8007eea <_printf_i+0x126>
 8007f90:	002a      	movs	r2, r5
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	9906      	ldr	r1, [sp, #24]
 8007f96:	9805      	ldr	r0, [sp, #20]
 8007f98:	9d07      	ldr	r5, [sp, #28]
 8007f9a:	47a8      	blx	r5
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d0ae      	beq.n	8007efe <_printf_i+0x13a>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	d415      	bmi.n	8007fd2 <_printf_i+0x20e>
 8007fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa8:	68e0      	ldr	r0, [r4, #12]
 8007faa:	4298      	cmp	r0, r3
 8007fac:	daa9      	bge.n	8007f02 <_printf_i+0x13e>
 8007fae:	0018      	movs	r0, r3
 8007fb0:	e7a7      	b.n	8007f02 <_printf_i+0x13e>
 8007fb2:	0022      	movs	r2, r4
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	9906      	ldr	r1, [sp, #24]
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	9e07      	ldr	r6, [sp, #28]
 8007fbc:	3219      	adds	r2, #25
 8007fbe:	47b0      	blx	r6
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d09c      	beq.n	8007efe <_printf_i+0x13a>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	68e3      	ldr	r3, [r4, #12]
 8007fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	42ab      	cmp	r3, r5
 8007fce:	dcf0      	bgt.n	8007fb2 <_printf_i+0x1ee>
 8007fd0:	e7e9      	b.n	8007fa6 <_printf_i+0x1e2>
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	e7f7      	b.n	8007fc6 <_printf_i+0x202>
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	0800c53e 	.word	0x0800c53e
 8007fdc:	0800c54f 	.word	0x0800c54f

08007fe0 <_scanf_float>:
 8007fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe2:	b08b      	sub	sp, #44	@ 0x2c
 8007fe4:	0016      	movs	r6, r2
 8007fe6:	9003      	str	r0, [sp, #12]
 8007fe8:	22ae      	movs	r2, #174	@ 0xae
 8007fea:	2000      	movs	r0, #0
 8007fec:	9307      	str	r3, [sp, #28]
 8007fee:	688b      	ldr	r3, [r1, #8]
 8007ff0:	000c      	movs	r4, r1
 8007ff2:	1e59      	subs	r1, r3, #1
 8007ff4:	0052      	lsls	r2, r2, #1
 8007ff6:	9006      	str	r0, [sp, #24]
 8007ff8:	4291      	cmp	r1, r2
 8007ffa:	d905      	bls.n	8008008 <_scanf_float+0x28>
 8007ffc:	3b5e      	subs	r3, #94	@ 0x5e
 8007ffe:	3bff      	subs	r3, #255	@ 0xff
 8008000:	9306      	str	r3, [sp, #24]
 8008002:	235e      	movs	r3, #94	@ 0x5e
 8008004:	33ff      	adds	r3, #255	@ 0xff
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	23f0      	movs	r3, #240	@ 0xf0
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	4313      	orrs	r3, r2
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	0023      	movs	r3, r4
 8008014:	2500      	movs	r5, #0
 8008016:	331c      	adds	r3, #28
 8008018:	001f      	movs	r7, r3
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	9502      	str	r5, [sp, #8]
 800801e:	9509      	str	r5, [sp, #36]	@ 0x24
 8008020:	9508      	str	r5, [sp, #32]
 8008022:	9501      	str	r5, [sp, #4]
 8008024:	9505      	str	r5, [sp, #20]
 8008026:	68a2      	ldr	r2, [r4, #8]
 8008028:	2a00      	cmp	r2, #0
 800802a:	d00a      	beq.n	8008042 <_scanf_float+0x62>
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b4e      	cmp	r3, #78	@ 0x4e
 8008032:	d844      	bhi.n	80080be <_scanf_float+0xde>
 8008034:	0018      	movs	r0, r3
 8008036:	2b40      	cmp	r3, #64	@ 0x40
 8008038:	d82c      	bhi.n	8008094 <_scanf_float+0xb4>
 800803a:	382b      	subs	r0, #43	@ 0x2b
 800803c:	b2c1      	uxtb	r1, r0
 800803e:	290e      	cmp	r1, #14
 8008040:	d92a      	bls.n	8008098 <_scanf_float+0xb8>
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <_scanf_float+0x70>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	4aa6      	ldr	r2, [pc, #664]	@ (80082e4 <_scanf_float+0x304>)
 800804c:	4013      	ands	r3, r2
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	3b01      	subs	r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d900      	bls.n	800805a <_scanf_float+0x7a>
 8008058:	e0fe      	b.n	8008258 <_scanf_float+0x278>
 800805a:	25be      	movs	r5, #190	@ 0xbe
 800805c:	006d      	lsls	r5, r5, #1
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	429f      	cmp	r7, r3
 8008062:	d900      	bls.n	8008066 <_scanf_float+0x86>
 8008064:	e0ee      	b.n	8008244 <_scanf_float+0x264>
 8008066:	2001      	movs	r0, #1
 8008068:	b00b      	add	sp, #44	@ 0x2c
 800806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800806c:	0018      	movs	r0, r3
 800806e:	3861      	subs	r0, #97	@ 0x61
 8008070:	280d      	cmp	r0, #13
 8008072:	d8e6      	bhi.n	8008042 <_scanf_float+0x62>
 8008074:	f7f8 f85a 	bl	800012c <__gnu_thumb1_case_shi>
 8008078:	ffe50089 	.word	0xffe50089
 800807c:	ffe5ffe5 	.word	0xffe5ffe5
 8008080:	00a700bb 	.word	0x00a700bb
 8008084:	ffe5ffe5 	.word	0xffe5ffe5
 8008088:	ffe5008f 	.word	0xffe5008f
 800808c:	ffe5ffe5 	.word	0xffe5ffe5
 8008090:	006bffe5 	.word	0x006bffe5
 8008094:	3841      	subs	r0, #65	@ 0x41
 8008096:	e7eb      	b.n	8008070 <_scanf_float+0x90>
 8008098:	280e      	cmp	r0, #14
 800809a:	d8d2      	bhi.n	8008042 <_scanf_float+0x62>
 800809c:	f7f8 f846 	bl	800012c <__gnu_thumb1_case_shi>
 80080a0:	ffd1004f 	.word	0xffd1004f
 80080a4:	009d004f 	.word	0x009d004f
 80080a8:	0021ffd1 	.word	0x0021ffd1
 80080ac:	00410041 	.word	0x00410041
 80080b0:	00410041 	.word	0x00410041
 80080b4:	00410041 	.word	0x00410041
 80080b8:	00410041 	.word	0x00410041
 80080bc:	0041      	.short	0x0041
 80080be:	2b6e      	cmp	r3, #110	@ 0x6e
 80080c0:	d80a      	bhi.n	80080d8 <_scanf_float+0xf8>
 80080c2:	2b60      	cmp	r3, #96	@ 0x60
 80080c4:	d8d2      	bhi.n	800806c <_scanf_float+0x8c>
 80080c6:	2b54      	cmp	r3, #84	@ 0x54
 80080c8:	d100      	bne.n	80080cc <_scanf_float+0xec>
 80080ca:	e081      	b.n	80081d0 <_scanf_float+0x1f0>
 80080cc:	2b59      	cmp	r3, #89	@ 0x59
 80080ce:	d1b8      	bne.n	8008042 <_scanf_float+0x62>
 80080d0:	2d07      	cmp	r5, #7
 80080d2:	d1b6      	bne.n	8008042 <_scanf_float+0x62>
 80080d4:	2508      	movs	r5, #8
 80080d6:	e02f      	b.n	8008138 <_scanf_float+0x158>
 80080d8:	2b74      	cmp	r3, #116	@ 0x74
 80080da:	d079      	beq.n	80081d0 <_scanf_float+0x1f0>
 80080dc:	2b79      	cmp	r3, #121	@ 0x79
 80080de:	d0f7      	beq.n	80080d0 <_scanf_float+0xf0>
 80080e0:	e7af      	b.n	8008042 <_scanf_float+0x62>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	05c8      	lsls	r0, r1, #23
 80080e6:	d51c      	bpl.n	8008122 <_scanf_float+0x142>
 80080e8:	2380      	movs	r3, #128	@ 0x80
 80080ea:	4399      	bics	r1, r3
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	6021      	str	r1, [r4, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	9b06      	ldr	r3, [sp, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <_scanf_float+0x122>
 80080fa:	3b01      	subs	r3, #1
 80080fc:	3201      	adds	r2, #1
 80080fe:	9306      	str	r3, [sp, #24]
 8008100:	60a2      	str	r2, [r4, #8]
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	3b01      	subs	r3, #1
 8008106:	60a3      	str	r3, [r4, #8]
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	3301      	adds	r3, #1
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	6873      	ldr	r3, [r6, #4]
 8008110:	3b01      	subs	r3, #1
 8008112:	6073      	str	r3, [r6, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dc00      	bgt.n	800811a <_scanf_float+0x13a>
 8008118:	e08a      	b.n	8008230 <_scanf_float+0x250>
 800811a:	6833      	ldr	r3, [r6, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	e781      	b.n	8008026 <_scanf_float+0x46>
 8008122:	9a02      	ldr	r2, [sp, #8]
 8008124:	1951      	adds	r1, r2, r5
 8008126:	2900      	cmp	r1, #0
 8008128:	d000      	beq.n	800812c <_scanf_float+0x14c>
 800812a:	e78a      	b.n	8008042 <_scanf_float+0x62>
 800812c:	000d      	movs	r5, r1
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	486d      	ldr	r0, [pc, #436]	@ (80082e8 <_scanf_float+0x308>)
 8008132:	9102      	str	r1, [sp, #8]
 8008134:	4002      	ands	r2, r0
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	703b      	strb	r3, [r7, #0]
 800813a:	3701      	adds	r7, #1
 800813c:	e7e1      	b.n	8008102 <_scanf_float+0x122>
 800813e:	2180      	movs	r1, #128	@ 0x80
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	420a      	tst	r2, r1
 8008144:	d100      	bne.n	8008148 <_scanf_float+0x168>
 8008146:	e77c      	b.n	8008042 <_scanf_float+0x62>
 8008148:	438a      	bics	r2, r1
 800814a:	6022      	str	r2, [r4, #0]
 800814c:	e7f4      	b.n	8008138 <_scanf_float+0x158>
 800814e:	9a02      	ldr	r2, [sp, #8]
 8008150:	2a00      	cmp	r2, #0
 8008152:	d10f      	bne.n	8008174 <_scanf_float+0x194>
 8008154:	9a01      	ldr	r2, [sp, #4]
 8008156:	2a00      	cmp	r2, #0
 8008158:	d10f      	bne.n	800817a <_scanf_float+0x19a>
 800815a:	6822      	ldr	r2, [r4, #0]
 800815c:	21e0      	movs	r1, #224	@ 0xe0
 800815e:	0010      	movs	r0, r2
 8008160:	00c9      	lsls	r1, r1, #3
 8008162:	4008      	ands	r0, r1
 8008164:	4288      	cmp	r0, r1
 8008166:	d108      	bne.n	800817a <_scanf_float+0x19a>
 8008168:	4960      	ldr	r1, [pc, #384]	@ (80082ec <_scanf_float+0x30c>)
 800816a:	400a      	ands	r2, r1
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	9202      	str	r2, [sp, #8]
 8008172:	e7e1      	b.n	8008138 <_scanf_float+0x158>
 8008174:	9a02      	ldr	r2, [sp, #8]
 8008176:	2a02      	cmp	r2, #2
 8008178:	d058      	beq.n	800822c <_scanf_float+0x24c>
 800817a:	2d01      	cmp	r5, #1
 800817c:	d002      	beq.n	8008184 <_scanf_float+0x1a4>
 800817e:	2d04      	cmp	r5, #4
 8008180:	d000      	beq.n	8008184 <_scanf_float+0x1a4>
 8008182:	e75e      	b.n	8008042 <_scanf_float+0x62>
 8008184:	3501      	adds	r5, #1
 8008186:	b2ed      	uxtb	r5, r5
 8008188:	e7d6      	b.n	8008138 <_scanf_float+0x158>
 800818a:	9a02      	ldr	r2, [sp, #8]
 800818c:	2a01      	cmp	r2, #1
 800818e:	d000      	beq.n	8008192 <_scanf_float+0x1b2>
 8008190:	e757      	b.n	8008042 <_scanf_float+0x62>
 8008192:	2202      	movs	r2, #2
 8008194:	e7ec      	b.n	8008170 <_scanf_float+0x190>
 8008196:	2d00      	cmp	r5, #0
 8008198:	d110      	bne.n	80081bc <_scanf_float+0x1dc>
 800819a:	9a01      	ldr	r2, [sp, #4]
 800819c:	2a00      	cmp	r2, #0
 800819e:	d000      	beq.n	80081a2 <_scanf_float+0x1c2>
 80081a0:	e752      	b.n	8008048 <_scanf_float+0x68>
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	21e0      	movs	r1, #224	@ 0xe0
 80081a6:	0010      	movs	r0, r2
 80081a8:	00c9      	lsls	r1, r1, #3
 80081aa:	4008      	ands	r0, r1
 80081ac:	4288      	cmp	r0, r1
 80081ae:	d000      	beq.n	80081b2 <_scanf_float+0x1d2>
 80081b0:	e11d      	b.n	80083ee <_scanf_float+0x40e>
 80081b2:	494e      	ldr	r1, [pc, #312]	@ (80082ec <_scanf_float+0x30c>)
 80081b4:	3501      	adds	r5, #1
 80081b6:	400a      	ands	r2, r1
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	e7bd      	b.n	8008138 <_scanf_float+0x158>
 80081bc:	21fd      	movs	r1, #253	@ 0xfd
 80081be:	1eea      	subs	r2, r5, #3
 80081c0:	420a      	tst	r2, r1
 80081c2:	d0df      	beq.n	8008184 <_scanf_float+0x1a4>
 80081c4:	e73d      	b.n	8008042 <_scanf_float+0x62>
 80081c6:	2d02      	cmp	r5, #2
 80081c8:	d000      	beq.n	80081cc <_scanf_float+0x1ec>
 80081ca:	e73a      	b.n	8008042 <_scanf_float+0x62>
 80081cc:	2503      	movs	r5, #3
 80081ce:	e7b3      	b.n	8008138 <_scanf_float+0x158>
 80081d0:	2d06      	cmp	r5, #6
 80081d2:	d000      	beq.n	80081d6 <_scanf_float+0x1f6>
 80081d4:	e735      	b.n	8008042 <_scanf_float+0x62>
 80081d6:	2507      	movs	r5, #7
 80081d8:	e7ae      	b.n	8008138 <_scanf_float+0x158>
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	0591      	lsls	r1, r2, #22
 80081de:	d400      	bmi.n	80081e2 <_scanf_float+0x202>
 80081e0:	e72f      	b.n	8008042 <_scanf_float+0x62>
 80081e2:	4943      	ldr	r1, [pc, #268]	@ (80082f0 <_scanf_float+0x310>)
 80081e4:	400a      	ands	r2, r1
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	9205      	str	r2, [sp, #20]
 80081ec:	e7a4      	b.n	8008138 <_scanf_float+0x158>
 80081ee:	21a0      	movs	r1, #160	@ 0xa0
 80081f0:	2080      	movs	r0, #128	@ 0x80
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	00c9      	lsls	r1, r1, #3
 80081f6:	4011      	ands	r1, r2
 80081f8:	00c0      	lsls	r0, r0, #3
 80081fa:	4281      	cmp	r1, r0
 80081fc:	d006      	beq.n	800820c <_scanf_float+0x22c>
 80081fe:	4202      	tst	r2, r0
 8008200:	d100      	bne.n	8008204 <_scanf_float+0x224>
 8008202:	e71e      	b.n	8008042 <_scanf_float+0x62>
 8008204:	9901      	ldr	r1, [sp, #4]
 8008206:	2900      	cmp	r1, #0
 8008208:	d100      	bne.n	800820c <_scanf_float+0x22c>
 800820a:	e0f0      	b.n	80083ee <_scanf_float+0x40e>
 800820c:	0591      	lsls	r1, r2, #22
 800820e:	d404      	bmi.n	800821a <_scanf_float+0x23a>
 8008210:	9901      	ldr	r1, [sp, #4]
 8008212:	9805      	ldr	r0, [sp, #20]
 8008214:	9709      	str	r7, [sp, #36]	@ 0x24
 8008216:	1a09      	subs	r1, r1, r0
 8008218:	9108      	str	r1, [sp, #32]
 800821a:	4934      	ldr	r1, [pc, #208]	@ (80082ec <_scanf_float+0x30c>)
 800821c:	400a      	ands	r2, r1
 800821e:	21c0      	movs	r1, #192	@ 0xc0
 8008220:	0049      	lsls	r1, r1, #1
 8008222:	430a      	orrs	r2, r1
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	9201      	str	r2, [sp, #4]
 800822a:	e785      	b.n	8008138 <_scanf_float+0x158>
 800822c:	2203      	movs	r2, #3
 800822e:	e79f      	b.n	8008170 <_scanf_float+0x190>
 8008230:	23c0      	movs	r3, #192	@ 0xc0
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	0031      	movs	r1, r6
 8008236:	58e3      	ldr	r3, [r4, r3]
 8008238:	9803      	ldr	r0, [sp, #12]
 800823a:	4798      	blx	r3
 800823c:	2800      	cmp	r0, #0
 800823e:	d100      	bne.n	8008242 <_scanf_float+0x262>
 8008240:	e6f1      	b.n	8008026 <_scanf_float+0x46>
 8008242:	e6fe      	b.n	8008042 <_scanf_float+0x62>
 8008244:	3f01      	subs	r7, #1
 8008246:	5963      	ldr	r3, [r4, r5]
 8008248:	0032      	movs	r2, r6
 800824a:	7839      	ldrb	r1, [r7, #0]
 800824c:	9803      	ldr	r0, [sp, #12]
 800824e:	4798      	blx	r3
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	3b01      	subs	r3, #1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	e702      	b.n	800805e <_scanf_float+0x7e>
 8008258:	1e6b      	subs	r3, r5, #1
 800825a:	2b06      	cmp	r3, #6
 800825c:	d80e      	bhi.n	800827c <_scanf_float+0x29c>
 800825e:	9702      	str	r7, [sp, #8]
 8008260:	2d02      	cmp	r5, #2
 8008262:	d920      	bls.n	80082a6 <_scanf_float+0x2c6>
 8008264:	1beb      	subs	r3, r5, r7
 8008266:	b2db      	uxtb	r3, r3
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	9b02      	ldr	r3, [sp, #8]
 800826c:	9a06      	ldr	r2, [sp, #24]
 800826e:	189b      	adds	r3, r3, r2
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d127      	bne.n	80082c6 <_scanf_float+0x2e6>
 8008276:	3d03      	subs	r5, #3
 8008278:	b2ed      	uxtb	r5, r5
 800827a:	1b7f      	subs	r7, r7, r5
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	05da      	lsls	r2, r3, #23
 8008280:	d553      	bpl.n	800832a <_scanf_float+0x34a>
 8008282:	055b      	lsls	r3, r3, #21
 8008284:	d536      	bpl.n	80082f4 <_scanf_float+0x314>
 8008286:	25be      	movs	r5, #190	@ 0xbe
 8008288:	006d      	lsls	r5, r5, #1
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	429f      	cmp	r7, r3
 800828e:	d800      	bhi.n	8008292 <_scanf_float+0x2b2>
 8008290:	e6e9      	b.n	8008066 <_scanf_float+0x86>
 8008292:	3f01      	subs	r7, #1
 8008294:	5963      	ldr	r3, [r4, r5]
 8008296:	0032      	movs	r2, r6
 8008298:	7839      	ldrb	r1, [r7, #0]
 800829a:	9803      	ldr	r0, [sp, #12]
 800829c:	4798      	blx	r3
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	e7f1      	b.n	800828a <_scanf_float+0x2aa>
 80082a6:	25be      	movs	r5, #190	@ 0xbe
 80082a8:	006d      	lsls	r5, r5, #1
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	429f      	cmp	r7, r3
 80082ae:	d800      	bhi.n	80082b2 <_scanf_float+0x2d2>
 80082b0:	e6d9      	b.n	8008066 <_scanf_float+0x86>
 80082b2:	3f01      	subs	r7, #1
 80082b4:	5963      	ldr	r3, [r4, r5]
 80082b6:	0032      	movs	r2, r6
 80082b8:	7839      	ldrb	r1, [r7, #0]
 80082ba:	9803      	ldr	r0, [sp, #12]
 80082bc:	4798      	blx	r3
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	e7f1      	b.n	80082aa <_scanf_float+0x2ca>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	0032      	movs	r2, r6
 80082ca:	3b01      	subs	r3, #1
 80082cc:	7819      	ldrb	r1, [r3, #0]
 80082ce:	9302      	str	r3, [sp, #8]
 80082d0:	23be      	movs	r3, #190	@ 0xbe
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	58e3      	ldr	r3, [r4, r3]
 80082d6:	9803      	ldr	r0, [sp, #12]
 80082d8:	4798      	blx	r3
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	3b01      	subs	r3, #1
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	e7c3      	b.n	800826a <_scanf_float+0x28a>
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	fffffeff 	.word	0xfffffeff
 80082e8:	fffffe7f 	.word	0xfffffe7f
 80082ec:	fffff87f 	.word	0xfffff87f
 80082f0:	fffffd7f 	.word	0xfffffd7f
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	1e7d      	subs	r5, r7, #1
 80082f8:	7829      	ldrb	r1, [r5, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	2965      	cmp	r1, #101	@ 0x65
 8008300:	d00c      	beq.n	800831c <_scanf_float+0x33c>
 8008302:	2945      	cmp	r1, #69	@ 0x45
 8008304:	d00a      	beq.n	800831c <_scanf_float+0x33c>
 8008306:	23be      	movs	r3, #190	@ 0xbe
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	58e3      	ldr	r3, [r4, r3]
 800830c:	0032      	movs	r2, r6
 800830e:	9803      	ldr	r0, [sp, #12]
 8008310:	4798      	blx	r3
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	1ebd      	subs	r5, r7, #2
 8008316:	3b01      	subs	r3, #1
 8008318:	7829      	ldrb	r1, [r5, #0]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	23be      	movs	r3, #190	@ 0xbe
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	0032      	movs	r2, r6
 8008322:	58e3      	ldr	r3, [r4, r3]
 8008324:	9803      	ldr	r0, [sp, #12]
 8008326:	4798      	blx	r3
 8008328:	002f      	movs	r7, r5
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	2310      	movs	r3, #16
 800832e:	000a      	movs	r2, r1
 8008330:	401a      	ands	r2, r3
 8008332:	4219      	tst	r1, r3
 8008334:	d001      	beq.n	800833a <_scanf_float+0x35a>
 8008336:	2000      	movs	r0, #0
 8008338:	e696      	b.n	8008068 <_scanf_float+0x88>
 800833a:	21c0      	movs	r1, #192	@ 0xc0
 800833c:	703a      	strb	r2, [r7, #0]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	00c9      	lsls	r1, r1, #3
 8008342:	400b      	ands	r3, r1
 8008344:	2180      	movs	r1, #128	@ 0x80
 8008346:	00c9      	lsls	r1, r1, #3
 8008348:	428b      	cmp	r3, r1
 800834a:	d11c      	bne.n	8008386 <_scanf_float+0x3a6>
 800834c:	9b05      	ldr	r3, [sp, #20]
 800834e:	9a01      	ldr	r2, [sp, #4]
 8008350:	9905      	ldr	r1, [sp, #20]
 8008352:	1a9a      	subs	r2, r3, r2
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	428b      	cmp	r3, r1
 8008358:	d121      	bne.n	800839e <_scanf_float+0x3be>
 800835a:	2200      	movs	r2, #0
 800835c:	9904      	ldr	r1, [sp, #16]
 800835e:	9803      	ldr	r0, [sp, #12]
 8008360:	f002 fca2 	bl	800aca8 <_strtod_r>
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	0006      	movs	r6, r0
 800836a:	000f      	movs	r7, r1
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	0791      	lsls	r1, r2, #30
 8008370:	d522      	bpl.n	80083b8 <_scanf_float+0x3d8>
 8008372:	9907      	ldr	r1, [sp, #28]
 8008374:	1d1a      	adds	r2, r3, #4
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	601e      	str	r6, [r3, #0]
 800837c:	605f      	str	r7, [r3, #4]
 800837e:	68e3      	ldr	r3, [r4, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60e3      	str	r3, [r4, #12]
 8008384:	e7d7      	b.n	8008336 <_scanf_float+0x356>
 8008386:	9b08      	ldr	r3, [sp, #32]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0e6      	beq.n	800835a <_scanf_float+0x37a>
 800838c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838e:	9803      	ldr	r0, [sp, #12]
 8008390:	1c59      	adds	r1, r3, #1
 8008392:	230a      	movs	r3, #10
 8008394:	f002 fd1a 	bl	800adcc <_strtol_r>
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800839c:	1ac2      	subs	r2, r0, r3
 800839e:	0023      	movs	r3, r4
 80083a0:	3370      	adds	r3, #112	@ 0x70
 80083a2:	33ff      	adds	r3, #255	@ 0xff
 80083a4:	429f      	cmp	r7, r3
 80083a6:	d302      	bcc.n	80083ae <_scanf_float+0x3ce>
 80083a8:	0027      	movs	r7, r4
 80083aa:	376f      	adds	r7, #111	@ 0x6f
 80083ac:	37ff      	adds	r7, #255	@ 0xff
 80083ae:	0038      	movs	r0, r7
 80083b0:	4910      	ldr	r1, [pc, #64]	@ (80083f4 <_scanf_float+0x414>)
 80083b2:	f000 f91b 	bl	80085ec <siprintf>
 80083b6:	e7d0      	b.n	800835a <_scanf_float+0x37a>
 80083b8:	1d19      	adds	r1, r3, #4
 80083ba:	0752      	lsls	r2, r2, #29
 80083bc:	d502      	bpl.n	80083c4 <_scanf_float+0x3e4>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	e7d9      	b.n	8008378 <_scanf_float+0x398>
 80083c4:	9a07      	ldr	r2, [sp, #28]
 80083c6:	0030      	movs	r0, r6
 80083c8:	6011      	str	r1, [r2, #0]
 80083ca:	681d      	ldr	r5, [r3, #0]
 80083cc:	0032      	movs	r2, r6
 80083ce:	003b      	movs	r3, r7
 80083d0:	0039      	movs	r1, r7
 80083d2:	f7fa ff4d 	bl	8003270 <__aeabi_dcmpun>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d004      	beq.n	80083e4 <_scanf_float+0x404>
 80083da:	4807      	ldr	r0, [pc, #28]	@ (80083f8 <_scanf_float+0x418>)
 80083dc:	f000 fa04 	bl	80087e8 <nanf>
 80083e0:	6028      	str	r0, [r5, #0]
 80083e2:	e7cc      	b.n	800837e <_scanf_float+0x39e>
 80083e4:	0030      	movs	r0, r6
 80083e6:	0039      	movs	r1, r7
 80083e8:	f7fb f83a 	bl	8003460 <__aeabi_d2f>
 80083ec:	e7f8      	b.n	80083e0 <_scanf_float+0x400>
 80083ee:	2300      	movs	r3, #0
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	e62d      	b.n	8008050 <_scanf_float+0x70>
 80083f4:	0800c560 	.word	0x0800c560
 80083f8:	0800c8f5 	.word	0x0800c8f5

080083fc <std>:
 80083fc:	2300      	movs	r3, #0
 80083fe:	b510      	push	{r4, lr}
 8008400:	0004      	movs	r4, r0
 8008402:	6003      	str	r3, [r0, #0]
 8008404:	6043      	str	r3, [r0, #4]
 8008406:	6083      	str	r3, [r0, #8]
 8008408:	8181      	strh	r1, [r0, #12]
 800840a:	6643      	str	r3, [r0, #100]	@ 0x64
 800840c:	81c2      	strh	r2, [r0, #14]
 800840e:	6103      	str	r3, [r0, #16]
 8008410:	6143      	str	r3, [r0, #20]
 8008412:	6183      	str	r3, [r0, #24]
 8008414:	0019      	movs	r1, r3
 8008416:	2208      	movs	r2, #8
 8008418:	305c      	adds	r0, #92	@ 0x5c
 800841a:	f000 f953 	bl	80086c4 <memset>
 800841e:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <std+0x50>)
 8008420:	6224      	str	r4, [r4, #32]
 8008422:	6263      	str	r3, [r4, #36]	@ 0x24
 8008424:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <std+0x54>)
 8008426:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008428:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <std+0x58>)
 800842a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <std+0x5c>)
 800842e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008430:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <std+0x60>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d005      	beq.n	8008442 <std+0x46>
 8008436:	4b0a      	ldr	r3, [pc, #40]	@ (8008460 <std+0x64>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d002      	beq.n	8008442 <std+0x46>
 800843c:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <std+0x68>)
 800843e:	429c      	cmp	r4, r3
 8008440:	d103      	bne.n	800844a <std+0x4e>
 8008442:	0020      	movs	r0, r4
 8008444:	3058      	adds	r0, #88	@ 0x58
 8008446:	f000 f9c1 	bl	80087cc <__retarget_lock_init_recursive>
 800844a:	bd10      	pop	{r4, pc}
 800844c:	0800862d 	.word	0x0800862d
 8008450:	08008655 	.word	0x08008655
 8008454:	0800868d 	.word	0x0800868d
 8008458:	080086b9 	.word	0x080086b9
 800845c:	20000504 	.word	0x20000504
 8008460:	2000056c 	.word	0x2000056c
 8008464:	200005d4 	.word	0x200005d4

08008468 <stdio_exit_handler>:
 8008468:	b510      	push	{r4, lr}
 800846a:	4a03      	ldr	r2, [pc, #12]	@ (8008478 <stdio_exit_handler+0x10>)
 800846c:	4903      	ldr	r1, [pc, #12]	@ (800847c <stdio_exit_handler+0x14>)
 800846e:	4804      	ldr	r0, [pc, #16]	@ (8008480 <stdio_exit_handler+0x18>)
 8008470:	f000 f86c 	bl	800854c <_fwalk_sglue>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	46c0      	nop			@ (mov r8, r8)
 8008478:	2000001c 	.word	0x2000001c
 800847c:	0800b19d 	.word	0x0800b19d
 8008480:	2000002c 	.word	0x2000002c

08008484 <cleanup_stdio>:
 8008484:	6841      	ldr	r1, [r0, #4]
 8008486:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <cleanup_stdio+0x30>)
 8008488:	b510      	push	{r4, lr}
 800848a:	0004      	movs	r4, r0
 800848c:	4299      	cmp	r1, r3
 800848e:	d001      	beq.n	8008494 <cleanup_stdio+0x10>
 8008490:	f002 fe84 	bl	800b19c <_fflush_r>
 8008494:	68a1      	ldr	r1, [r4, #8]
 8008496:	4b08      	ldr	r3, [pc, #32]	@ (80084b8 <cleanup_stdio+0x34>)
 8008498:	4299      	cmp	r1, r3
 800849a:	d002      	beq.n	80084a2 <cleanup_stdio+0x1e>
 800849c:	0020      	movs	r0, r4
 800849e:	f002 fe7d 	bl	800b19c <_fflush_r>
 80084a2:	68e1      	ldr	r1, [r4, #12]
 80084a4:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <cleanup_stdio+0x38>)
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d002      	beq.n	80084b0 <cleanup_stdio+0x2c>
 80084aa:	0020      	movs	r0, r4
 80084ac:	f002 fe76 	bl	800b19c <_fflush_r>
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	46c0      	nop			@ (mov r8, r8)
 80084b4:	20000504 	.word	0x20000504
 80084b8:	2000056c 	.word	0x2000056c
 80084bc:	200005d4 	.word	0x200005d4

080084c0 <global_stdio_init.part.0>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <global_stdio_init.part.0+0x28>)
 80084c4:	4a09      	ldr	r2, [pc, #36]	@ (80084ec <global_stdio_init.part.0+0x2c>)
 80084c6:	2104      	movs	r1, #4
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	4809      	ldr	r0, [pc, #36]	@ (80084f0 <global_stdio_init.part.0+0x30>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	f7ff ff95 	bl	80083fc <std>
 80084d2:	2201      	movs	r2, #1
 80084d4:	2109      	movs	r1, #9
 80084d6:	4807      	ldr	r0, [pc, #28]	@ (80084f4 <global_stdio_init.part.0+0x34>)
 80084d8:	f7ff ff90 	bl	80083fc <std>
 80084dc:	2202      	movs	r2, #2
 80084de:	2112      	movs	r1, #18
 80084e0:	4805      	ldr	r0, [pc, #20]	@ (80084f8 <global_stdio_init.part.0+0x38>)
 80084e2:	f7ff ff8b 	bl	80083fc <std>
 80084e6:	bd10      	pop	{r4, pc}
 80084e8:	2000063c 	.word	0x2000063c
 80084ec:	08008469 	.word	0x08008469
 80084f0:	20000504 	.word	0x20000504
 80084f4:	2000056c 	.word	0x2000056c
 80084f8:	200005d4 	.word	0x200005d4

080084fc <__sfp_lock_acquire>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	4802      	ldr	r0, [pc, #8]	@ (8008508 <__sfp_lock_acquire+0xc>)
 8008500:	f000 f965 	bl	80087ce <__retarget_lock_acquire_recursive>
 8008504:	bd10      	pop	{r4, pc}
 8008506:	46c0      	nop			@ (mov r8, r8)
 8008508:	20000645 	.word	0x20000645

0800850c <__sfp_lock_release>:
 800850c:	b510      	push	{r4, lr}
 800850e:	4802      	ldr	r0, [pc, #8]	@ (8008518 <__sfp_lock_release+0xc>)
 8008510:	f000 f95e 	bl	80087d0 <__retarget_lock_release_recursive>
 8008514:	bd10      	pop	{r4, pc}
 8008516:	46c0      	nop			@ (mov r8, r8)
 8008518:	20000645 	.word	0x20000645

0800851c <__sinit>:
 800851c:	b510      	push	{r4, lr}
 800851e:	0004      	movs	r4, r0
 8008520:	f7ff ffec 	bl	80084fc <__sfp_lock_acquire>
 8008524:	6a23      	ldr	r3, [r4, #32]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <__sinit+0x14>
 800852a:	f7ff ffef 	bl	800850c <__sfp_lock_release>
 800852e:	bd10      	pop	{r4, pc}
 8008530:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__sinit+0x28>)
 8008532:	6223      	str	r3, [r4, #32]
 8008534:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <__sinit+0x2c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f6      	bne.n	800852a <__sinit+0xe>
 800853c:	f7ff ffc0 	bl	80084c0 <global_stdio_init.part.0>
 8008540:	e7f3      	b.n	800852a <__sinit+0xe>
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	08008485 	.word	0x08008485
 8008548:	2000063c 	.word	0x2000063c

0800854c <_fwalk_sglue>:
 800854c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800854e:	0014      	movs	r4, r2
 8008550:	2600      	movs	r6, #0
 8008552:	9000      	str	r0, [sp, #0]
 8008554:	9101      	str	r1, [sp, #4]
 8008556:	68a5      	ldr	r5, [r4, #8]
 8008558:	6867      	ldr	r7, [r4, #4]
 800855a:	3f01      	subs	r7, #1
 800855c:	d504      	bpl.n	8008568 <_fwalk_sglue+0x1c>
 800855e:	6824      	ldr	r4, [r4, #0]
 8008560:	2c00      	cmp	r4, #0
 8008562:	d1f8      	bne.n	8008556 <_fwalk_sglue+0xa>
 8008564:	0030      	movs	r0, r6
 8008566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008568:	89ab      	ldrh	r3, [r5, #12]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d908      	bls.n	8008580 <_fwalk_sglue+0x34>
 800856e:	220e      	movs	r2, #14
 8008570:	5eab      	ldrsh	r3, [r5, r2]
 8008572:	3301      	adds	r3, #1
 8008574:	d004      	beq.n	8008580 <_fwalk_sglue+0x34>
 8008576:	0029      	movs	r1, r5
 8008578:	9800      	ldr	r0, [sp, #0]
 800857a:	9b01      	ldr	r3, [sp, #4]
 800857c:	4798      	blx	r3
 800857e:	4306      	orrs	r6, r0
 8008580:	3568      	adds	r5, #104	@ 0x68
 8008582:	e7ea      	b.n	800855a <_fwalk_sglue+0xe>

08008584 <sniprintf>:
 8008584:	b40c      	push	{r2, r3}
 8008586:	b530      	push	{r4, r5, lr}
 8008588:	4b17      	ldr	r3, [pc, #92]	@ (80085e8 <sniprintf+0x64>)
 800858a:	000c      	movs	r4, r1
 800858c:	681d      	ldr	r5, [r3, #0]
 800858e:	b09d      	sub	sp, #116	@ 0x74
 8008590:	2900      	cmp	r1, #0
 8008592:	da08      	bge.n	80085a6 <sniprintf+0x22>
 8008594:	238b      	movs	r3, #139	@ 0x8b
 8008596:	2001      	movs	r0, #1
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	4240      	negs	r0, r0
 800859c:	b01d      	add	sp, #116	@ 0x74
 800859e:	bc30      	pop	{r4, r5}
 80085a0:	bc08      	pop	{r3}
 80085a2:	b002      	add	sp, #8
 80085a4:	4718      	bx	r3
 80085a6:	2382      	movs	r3, #130	@ 0x82
 80085a8:	466a      	mov	r2, sp
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	8293      	strh	r3, [r2, #20]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9002      	str	r0, [sp, #8]
 80085b2:	9006      	str	r0, [sp, #24]
 80085b4:	4299      	cmp	r1, r3
 80085b6:	d000      	beq.n	80085ba <sniprintf+0x36>
 80085b8:	1e4b      	subs	r3, r1, #1
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	2301      	movs	r3, #1
 80085c0:	466a      	mov	r2, sp
 80085c2:	425b      	negs	r3, r3
 80085c4:	82d3      	strh	r3, [r2, #22]
 80085c6:	0028      	movs	r0, r5
 80085c8:	ab21      	add	r3, sp, #132	@ 0x84
 80085ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085cc:	a902      	add	r1, sp, #8
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	f002 fc60 	bl	800ae94 <_svfiprintf_r>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	da01      	bge.n	80085dc <sniprintf+0x58>
 80085d8:	238b      	movs	r3, #139	@ 0x8b
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	2c00      	cmp	r4, #0
 80085de:	d0dd      	beq.n	800859c <sniprintf+0x18>
 80085e0:	2200      	movs	r2, #0
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	e7d9      	b.n	800859c <sniprintf+0x18>
 80085e8:	20000028 	.word	0x20000028

080085ec <siprintf>:
 80085ec:	b40e      	push	{r1, r2, r3}
 80085ee:	b500      	push	{lr}
 80085f0:	490b      	ldr	r1, [pc, #44]	@ (8008620 <siprintf+0x34>)
 80085f2:	b09c      	sub	sp, #112	@ 0x70
 80085f4:	ab1d      	add	r3, sp, #116	@ 0x74
 80085f6:	9002      	str	r0, [sp, #8]
 80085f8:	9006      	str	r0, [sp, #24]
 80085fa:	9107      	str	r1, [sp, #28]
 80085fc:	9104      	str	r1, [sp, #16]
 80085fe:	4809      	ldr	r0, [pc, #36]	@ (8008624 <siprintf+0x38>)
 8008600:	4909      	ldr	r1, [pc, #36]	@ (8008628 <siprintf+0x3c>)
 8008602:	cb04      	ldmia	r3!, {r2}
 8008604:	9105      	str	r1, [sp, #20]
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	a902      	add	r1, sp, #8
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	f002 fc42 	bl	800ae94 <_svfiprintf_r>
 8008610:	2200      	movs	r2, #0
 8008612:	9b02      	ldr	r3, [sp, #8]
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	b01c      	add	sp, #112	@ 0x70
 8008618:	bc08      	pop	{r3}
 800861a:	b003      	add	sp, #12
 800861c:	4718      	bx	r3
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	7fffffff 	.word	0x7fffffff
 8008624:	20000028 	.word	0x20000028
 8008628:	ffff0208 	.word	0xffff0208

0800862c <__sread>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	000c      	movs	r4, r1
 8008630:	250e      	movs	r5, #14
 8008632:	5f49      	ldrsh	r1, [r1, r5]
 8008634:	f000 f878 	bl	8008728 <_read_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	db03      	blt.n	8008644 <__sread+0x18>
 800863c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800863e:	181b      	adds	r3, r3, r0
 8008640:	6563      	str	r3, [r4, #84]	@ 0x54
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	4a02      	ldr	r2, [pc, #8]	@ (8008650 <__sread+0x24>)
 8008648:	4013      	ands	r3, r2
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	e7f9      	b.n	8008642 <__sread+0x16>
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	ffffefff 	.word	0xffffefff

08008654 <__swrite>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	001f      	movs	r7, r3
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	0005      	movs	r5, r0
 800865c:	000c      	movs	r4, r1
 800865e:	0016      	movs	r6, r2
 8008660:	05db      	lsls	r3, r3, #23
 8008662:	d505      	bpl.n	8008670 <__swrite+0x1c>
 8008664:	230e      	movs	r3, #14
 8008666:	5ec9      	ldrsh	r1, [r1, r3]
 8008668:	2200      	movs	r2, #0
 800866a:	2302      	movs	r3, #2
 800866c:	f000 f848 	bl	8008700 <_lseek_r>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	4a05      	ldr	r2, [pc, #20]	@ (8008688 <__swrite+0x34>)
 8008674:	0028      	movs	r0, r5
 8008676:	4013      	ands	r3, r2
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	0032      	movs	r2, r6
 800867c:	230e      	movs	r3, #14
 800867e:	5ee1      	ldrsh	r1, [r4, r3]
 8008680:	003b      	movs	r3, r7
 8008682:	f000 f865 	bl	8008750 <_write_r>
 8008686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008688:	ffffefff 	.word	0xffffefff

0800868c <__sseek>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	000c      	movs	r4, r1
 8008690:	250e      	movs	r5, #14
 8008692:	5f49      	ldrsh	r1, [r1, r5]
 8008694:	f000 f834 	bl	8008700 <_lseek_r>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	1c42      	adds	r2, r0, #1
 800869c:	d103      	bne.n	80086a6 <__sseek+0x1a>
 800869e:	4a05      	ldr	r2, [pc, #20]	@ (80086b4 <__sseek+0x28>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	2280      	movs	r2, #128	@ 0x80
 80086a8:	0152      	lsls	r2, r2, #5
 80086aa:	4313      	orrs	r3, r2
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b0:	e7f8      	b.n	80086a4 <__sseek+0x18>
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	ffffefff 	.word	0xffffefff

080086b8 <__sclose>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	230e      	movs	r3, #14
 80086bc:	5ec9      	ldrsh	r1, [r1, r3]
 80086be:	f000 f80d 	bl	80086dc <_close_r>
 80086c2:	bd10      	pop	{r4, pc}

080086c4 <memset>:
 80086c4:	0003      	movs	r3, r0
 80086c6:	1882      	adds	r2, r0, r2
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d100      	bne.n	80086ce <memset+0xa>
 80086cc:	4770      	bx	lr
 80086ce:	7019      	strb	r1, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	e7f9      	b.n	80086c8 <memset+0x4>

080086d4 <_localeconv_r>:
 80086d4:	4800      	ldr	r0, [pc, #0]	@ (80086d8 <_localeconv_r+0x4>)
 80086d6:	4770      	bx	lr
 80086d8:	20000168 	.word	0x20000168

080086dc <_close_r>:
 80086dc:	2300      	movs	r3, #0
 80086de:	b570      	push	{r4, r5, r6, lr}
 80086e0:	4d06      	ldr	r5, [pc, #24]	@ (80086fc <_close_r+0x20>)
 80086e2:	0004      	movs	r4, r0
 80086e4:	0008      	movs	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7fc f887 	bl	80047fa <_close>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d103      	bne.n	80086f8 <_close_r+0x1c>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d000      	beq.n	80086f8 <_close_r+0x1c>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	20000640 	.word	0x20000640

08008700 <_lseek_r>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	0004      	movs	r4, r0
 8008704:	0008      	movs	r0, r1
 8008706:	0011      	movs	r1, r2
 8008708:	001a      	movs	r2, r3
 800870a:	2300      	movs	r3, #0
 800870c:	4d05      	ldr	r5, [pc, #20]	@ (8008724 <_lseek_r+0x24>)
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	f7fc f894 	bl	800483c <_lseek>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d103      	bne.n	8008720 <_lseek_r+0x20>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d000      	beq.n	8008720 <_lseek_r+0x20>
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	bd70      	pop	{r4, r5, r6, pc}
 8008722:	46c0      	nop			@ (mov r8, r8)
 8008724:	20000640 	.word	0x20000640

08008728 <_read_r>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	0004      	movs	r4, r0
 800872c:	0008      	movs	r0, r1
 800872e:	0011      	movs	r1, r2
 8008730:	001a      	movs	r2, r3
 8008732:	2300      	movs	r3, #0
 8008734:	4d05      	ldr	r5, [pc, #20]	@ (800874c <_read_r+0x24>)
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7fc f826 	bl	8004788 <_read>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d103      	bne.n	8008748 <_read_r+0x20>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d000      	beq.n	8008748 <_read_r+0x20>
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	46c0      	nop			@ (mov r8, r8)
 800874c:	20000640 	.word	0x20000640

08008750 <_write_r>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	0004      	movs	r4, r0
 8008754:	0008      	movs	r0, r1
 8008756:	0011      	movs	r1, r2
 8008758:	001a      	movs	r2, r3
 800875a:	2300      	movs	r3, #0
 800875c:	4d05      	ldr	r5, [pc, #20]	@ (8008774 <_write_r+0x24>)
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7fc f82f 	bl	80047c2 <_write>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d103      	bne.n	8008770 <_write_r+0x20>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d000      	beq.n	8008770 <_write_r+0x20>
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	20000640 	.word	0x20000640

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	@ (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	20000028 	.word	0x20000028

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	2600      	movs	r6, #0
 8008788:	4c0c      	ldr	r4, [pc, #48]	@ (80087bc <__libc_init_array+0x38>)
 800878a:	4d0d      	ldr	r5, [pc, #52]	@ (80087c0 <__libc_init_array+0x3c>)
 800878c:	1b64      	subs	r4, r4, r5
 800878e:	10a4      	asrs	r4, r4, #2
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	2600      	movs	r6, #0
 8008796:	f003 fdcf 	bl	800c338 <_init>
 800879a:	4c0a      	ldr	r4, [pc, #40]	@ (80087c4 <__libc_init_array+0x40>)
 800879c:	4d0a      	ldr	r5, [pc, #40]	@ (80087c8 <__libc_init_array+0x44>)
 800879e:	1b64      	subs	r4, r4, r5
 80087a0:	10a4      	asrs	r4, r4, #2
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	00b3      	lsls	r3, r6, #2
 80087aa:	58eb      	ldr	r3, [r5, r3]
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	00b3      	lsls	r3, r6, #2
 80087b4:	58eb      	ldr	r3, [r5, r3]
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	0800c978 	.word	0x0800c978
 80087c0:	0800c978 	.word	0x0800c978
 80087c4:	0800c97c 	.word	0x0800c97c
 80087c8:	0800c978 	.word	0x0800c978

080087cc <__retarget_lock_init_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_acquire_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <__retarget_lock_release_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <memchr>:
 80087d2:	b2c9      	uxtb	r1, r1
 80087d4:	1882      	adds	r2, r0, r2
 80087d6:	4290      	cmp	r0, r2
 80087d8:	d101      	bne.n	80087de <memchr+0xc>
 80087da:	2000      	movs	r0, #0
 80087dc:	4770      	bx	lr
 80087de:	7803      	ldrb	r3, [r0, #0]
 80087e0:	428b      	cmp	r3, r1
 80087e2:	d0fb      	beq.n	80087dc <memchr+0xa>
 80087e4:	3001      	adds	r0, #1
 80087e6:	e7f6      	b.n	80087d6 <memchr+0x4>

080087e8 <nanf>:
 80087e8:	4800      	ldr	r0, [pc, #0]	@ (80087ec <nanf+0x4>)
 80087ea:	4770      	bx	lr
 80087ec:	7fc00000 	.word	0x7fc00000

080087f0 <quorem>:
 80087f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f2:	6902      	ldr	r2, [r0, #16]
 80087f4:	690f      	ldr	r7, [r1, #16]
 80087f6:	b087      	sub	sp, #28
 80087f8:	0006      	movs	r6, r0
 80087fa:	000b      	movs	r3, r1
 80087fc:	2000      	movs	r0, #0
 80087fe:	9102      	str	r1, [sp, #8]
 8008800:	42ba      	cmp	r2, r7
 8008802:	db6d      	blt.n	80088e0 <quorem+0xf0>
 8008804:	3f01      	subs	r7, #1
 8008806:	00bc      	lsls	r4, r7, #2
 8008808:	3314      	adds	r3, #20
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	191b      	adds	r3, r3, r4
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	0033      	movs	r3, r6
 8008812:	3314      	adds	r3, #20
 8008814:	191c      	adds	r4, r3, r4
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	681d      	ldr	r5, [r3, #0]
 8008822:	3501      	adds	r5, #1
 8008824:	0029      	movs	r1, r5
 8008826:	f7f7 fc8b 	bl	8000140 <__udivsi3>
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	9000      	str	r0, [sp, #0]
 800882e:	42ab      	cmp	r3, r5
 8008830:	d32b      	bcc.n	800888a <quorem+0x9a>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	9d01      	ldr	r5, [sp, #4]
 8008836:	469c      	mov	ip, r3
 8008838:	2300      	movs	r3, #0
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	4662      	mov	r2, ip
 8008840:	ca08      	ldmia	r2!, {r3}
 8008842:	6828      	ldr	r0, [r5, #0]
 8008844:	4694      	mov	ip, r2
 8008846:	9a00      	ldr	r2, [sp, #0]
 8008848:	b299      	uxth	r1, r3
 800884a:	4351      	muls	r1, r2
 800884c:	9a05      	ldr	r2, [sp, #20]
 800884e:	0c1b      	lsrs	r3, r3, #16
 8008850:	1889      	adds	r1, r1, r2
 8008852:	9a00      	ldr	r2, [sp, #0]
 8008854:	4353      	muls	r3, r2
 8008856:	0c0a      	lsrs	r2, r1, #16
 8008858:	189b      	adds	r3, r3, r2
 800885a:	0c1a      	lsrs	r2, r3, #16
 800885c:	b289      	uxth	r1, r1
 800885e:	9205      	str	r2, [sp, #20]
 8008860:	b282      	uxth	r2, r0
 8008862:	1a52      	subs	r2, r2, r1
 8008864:	9904      	ldr	r1, [sp, #16]
 8008866:	0c00      	lsrs	r0, r0, #16
 8008868:	1852      	adds	r2, r2, r1
 800886a:	b29b      	uxth	r3, r3
 800886c:	1411      	asrs	r1, r2, #16
 800886e:	1ac3      	subs	r3, r0, r3
 8008870:	185b      	adds	r3, r3, r1
 8008872:	1419      	asrs	r1, r3, #16
 8008874:	b292      	uxth	r2, r2
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	431a      	orrs	r2, r3
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	9104      	str	r1, [sp, #16]
 800887e:	c504      	stmia	r5!, {r2}
 8008880:	4563      	cmp	r3, ip
 8008882:	d2dc      	bcs.n	800883e <quorem+0x4e>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d030      	beq.n	80088ec <quorem+0xfc>
 800888a:	0030      	movs	r0, r6
 800888c:	9902      	ldr	r1, [sp, #8]
 800888e:	f001 fa11 	bl	8009cb4 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	db23      	blt.n	80088de <quorem+0xee>
 8008896:	0034      	movs	r4, r6
 8008898:	2500      	movs	r5, #0
 800889a:	9902      	ldr	r1, [sp, #8]
 800889c:	3414      	adds	r4, #20
 800889e:	3114      	adds	r1, #20
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	c901      	ldmia	r1!, {r0}
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	466b      	mov	r3, sp
 80088a8:	891b      	ldrh	r3, [r3, #8]
 80088aa:	b282      	uxth	r2, r0
 80088ac:	1a9a      	subs	r2, r3, r2
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	1952      	adds	r2, r2, r5
 80088b2:	0c00      	lsrs	r0, r0, #16
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	1a1b      	subs	r3, r3, r0
 80088b8:	1410      	asrs	r0, r2, #16
 80088ba:	181b      	adds	r3, r3, r0
 80088bc:	141d      	asrs	r5, r3, #16
 80088be:	b292      	uxth	r2, r2
 80088c0:	041b      	lsls	r3, r3, #16
 80088c2:	431a      	orrs	r2, r3
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	c404      	stmia	r4!, {r2}
 80088c8:	428b      	cmp	r3, r1
 80088ca:	d2e9      	bcs.n	80088a0 <quorem+0xb0>
 80088cc:	9a01      	ldr	r2, [sp, #4]
 80088ce:	00bb      	lsls	r3, r7, #2
 80088d0:	18d3      	adds	r3, r2, r3
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	d013      	beq.n	8008900 <quorem+0x110>
 80088d8:	9b00      	ldr	r3, [sp, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	9800      	ldr	r0, [sp, #0]
 80088e0:	b007      	add	sp, #28
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <quorem+0x104>
 80088ea:	3f01      	subs	r7, #1
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	3c04      	subs	r4, #4
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d3f7      	bcc.n	80088e4 <quorem+0xf4>
 80088f4:	6137      	str	r7, [r6, #16]
 80088f6:	e7c8      	b.n	800888a <quorem+0x9a>
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	d104      	bne.n	8008908 <quorem+0x118>
 80088fe:	3f01      	subs	r7, #1
 8008900:	9a01      	ldr	r2, [sp, #4]
 8008902:	3b04      	subs	r3, #4
 8008904:	429a      	cmp	r2, r3
 8008906:	d3f7      	bcc.n	80088f8 <quorem+0x108>
 8008908:	6137      	str	r7, [r6, #16]
 800890a:	e7e5      	b.n	80088d8 <quorem+0xe8>

0800890c <_dtoa_r>:
 800890c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890e:	0014      	movs	r4, r2
 8008910:	001d      	movs	r5, r3
 8008912:	69c6      	ldr	r6, [r0, #28]
 8008914:	b09d      	sub	sp, #116	@ 0x74
 8008916:	940a      	str	r4, [sp, #40]	@ 0x28
 8008918:	950b      	str	r5, [sp, #44]	@ 0x2c
 800891a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800891c:	9003      	str	r0, [sp, #12]
 800891e:	2e00      	cmp	r6, #0
 8008920:	d10f      	bne.n	8008942 <_dtoa_r+0x36>
 8008922:	2010      	movs	r0, #16
 8008924:	f000 fe30 	bl	8009588 <malloc>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	1e02      	subs	r2, r0, #0
 800892c:	61d8      	str	r0, [r3, #28]
 800892e:	d104      	bne.n	800893a <_dtoa_r+0x2e>
 8008930:	21ef      	movs	r1, #239	@ 0xef
 8008932:	4bc7      	ldr	r3, [pc, #796]	@ (8008c50 <_dtoa_r+0x344>)
 8008934:	48c7      	ldr	r0, [pc, #796]	@ (8008c54 <_dtoa_r+0x348>)
 8008936:	f002 fca3 	bl	800b280 <__assert_func>
 800893a:	6046      	str	r6, [r0, #4]
 800893c:	6086      	str	r6, [r0, #8]
 800893e:	6006      	str	r6, [r0, #0]
 8008940:	60c6      	str	r6, [r0, #12]
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	6819      	ldr	r1, [r3, #0]
 8008948:	2900      	cmp	r1, #0
 800894a:	d00b      	beq.n	8008964 <_dtoa_r+0x58>
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	2301      	movs	r3, #1
 8008950:	4093      	lsls	r3, r2
 8008952:	604a      	str	r2, [r1, #4]
 8008954:	608b      	str	r3, [r1, #8]
 8008956:	9803      	ldr	r0, [sp, #12]
 8008958:	f000 ff16 	bl	8009788 <_Bfree>
 800895c:	2200      	movs	r2, #0
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	2d00      	cmp	r5, #0
 8008966:	da1e      	bge.n	80089a6 <_dtoa_r+0x9a>
 8008968:	2301      	movs	r3, #1
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	006b      	lsls	r3, r5, #1
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008972:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008974:	4bb8      	ldr	r3, [pc, #736]	@ (8008c58 <_dtoa_r+0x34c>)
 8008976:	4ab8      	ldr	r2, [pc, #736]	@ (8008c58 <_dtoa_r+0x34c>)
 8008978:	403b      	ands	r3, r7
 800897a:	4293      	cmp	r3, r2
 800897c:	d116      	bne.n	80089ac <_dtoa_r+0xa0>
 800897e:	4bb7      	ldr	r3, [pc, #732]	@ (8008c5c <_dtoa_r+0x350>)
 8008980:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	033b      	lsls	r3, r7, #12
 8008986:	0b1b      	lsrs	r3, r3, #12
 8008988:	4323      	orrs	r3, r4
 800898a:	d101      	bne.n	8008990 <_dtoa_r+0x84>
 800898c:	f000 fd83 	bl	8009496 <_dtoa_r+0xb8a>
 8008990:	4bb3      	ldr	r3, [pc, #716]	@ (8008c60 <_dtoa_r+0x354>)
 8008992:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008994:	9308      	str	r3, [sp, #32]
 8008996:	2a00      	cmp	r2, #0
 8008998:	d002      	beq.n	80089a0 <_dtoa_r+0x94>
 800899a:	4bb2      	ldr	r3, [pc, #712]	@ (8008c64 <_dtoa_r+0x358>)
 800899c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	9808      	ldr	r0, [sp, #32]
 80089a2:	b01d      	add	sp, #116	@ 0x74
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	2300      	movs	r3, #0
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	e7e2      	b.n	8008972 <_dtoa_r+0x66>
 80089ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80089b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80089b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f7f7 fd46 	bl	800044c <__aeabi_dcmpeq>
 80089c0:	1e06      	subs	r6, r0, #0
 80089c2:	d00b      	beq.n	80089dc <_dtoa_r+0xd0>
 80089c4:	2301      	movs	r3, #1
 80089c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <_dtoa_r+0xca>
 80089d0:	4ba5      	ldr	r3, [pc, #660]	@ (8008c68 <_dtoa_r+0x35c>)
 80089d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	4ba5      	ldr	r3, [pc, #660]	@ (8008c6c <_dtoa_r+0x360>)
 80089d8:	9308      	str	r3, [sp, #32]
 80089da:	e7e1      	b.n	80089a0 <_dtoa_r+0x94>
 80089dc:	ab1a      	add	r3, sp, #104	@ 0x68
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	9803      	ldr	r0, [sp, #12]
 80089e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80089e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ea:	f001 fa85 	bl	8009ef8 <__d2b>
 80089ee:	007a      	lsls	r2, r7, #1
 80089f0:	9005      	str	r0, [sp, #20]
 80089f2:	0d52      	lsrs	r2, r2, #21
 80089f4:	d100      	bne.n	80089f8 <_dtoa_r+0xec>
 80089f6:	e07b      	b.n	8008af0 <_dtoa_r+0x1e4>
 80089f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089fa:	9618      	str	r6, [sp, #96]	@ 0x60
 80089fc:	0319      	lsls	r1, r3, #12
 80089fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008c70 <_dtoa_r+0x364>)
 8008a00:	0b09      	lsrs	r1, r1, #12
 8008a02:	430b      	orrs	r3, r1
 8008a04:	499b      	ldr	r1, [pc, #620]	@ (8008c74 <_dtoa_r+0x368>)
 8008a06:	1857      	adds	r7, r2, r1
 8008a08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008a0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008a0c:	0019      	movs	r1, r3
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4b99      	ldr	r3, [pc, #612]	@ (8008c78 <_dtoa_r+0x36c>)
 8008a12:	f7fa f891 	bl	8002b38 <__aeabi_dsub>
 8008a16:	4a99      	ldr	r2, [pc, #612]	@ (8008c7c <_dtoa_r+0x370>)
 8008a18:	4b99      	ldr	r3, [pc, #612]	@ (8008c80 <_dtoa_r+0x374>)
 8008a1a:	f7f9 fdc5 	bl	80025a8 <__aeabi_dmul>
 8008a1e:	4a99      	ldr	r2, [pc, #612]	@ (8008c84 <_dtoa_r+0x378>)
 8008a20:	4b99      	ldr	r3, [pc, #612]	@ (8008c88 <_dtoa_r+0x37c>)
 8008a22:	f7f8 fe19 	bl	8001658 <__aeabi_dadd>
 8008a26:	0004      	movs	r4, r0
 8008a28:	0038      	movs	r0, r7
 8008a2a:	000d      	movs	r5, r1
 8008a2c:	f7fa fc7e 	bl	800332c <__aeabi_i2d>
 8008a30:	4a96      	ldr	r2, [pc, #600]	@ (8008c8c <_dtoa_r+0x380>)
 8008a32:	4b97      	ldr	r3, [pc, #604]	@ (8008c90 <_dtoa_r+0x384>)
 8008a34:	f7f9 fdb8 	bl	80025a8 <__aeabi_dmul>
 8008a38:	0002      	movs	r2, r0
 8008a3a:	000b      	movs	r3, r1
 8008a3c:	0020      	movs	r0, r4
 8008a3e:	0029      	movs	r1, r5
 8008a40:	f7f8 fe0a 	bl	8001658 <__aeabi_dadd>
 8008a44:	0004      	movs	r4, r0
 8008a46:	000d      	movs	r5, r1
 8008a48:	f7fa fc34 	bl	80032b4 <__aeabi_d2iz>
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	9004      	str	r0, [sp, #16]
 8008a50:	2300      	movs	r3, #0
 8008a52:	0020      	movs	r0, r4
 8008a54:	0029      	movs	r1, r5
 8008a56:	f7f7 fcff 	bl	8000458 <__aeabi_dcmplt>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d00b      	beq.n	8008a76 <_dtoa_r+0x16a>
 8008a5e:	9804      	ldr	r0, [sp, #16]
 8008a60:	f7fa fc64 	bl	800332c <__aeabi_i2d>
 8008a64:	002b      	movs	r3, r5
 8008a66:	0022      	movs	r2, r4
 8008a68:	f7f7 fcf0 	bl	800044c <__aeabi_dcmpeq>
 8008a6c:	4243      	negs	r3, r0
 8008a6e:	4158      	adcs	r0, r3
 8008a70:	9b04      	ldr	r3, [sp, #16]
 8008a72:	1a1b      	subs	r3, r3, r0
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	2301      	movs	r3, #1
 8008a78:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b16      	cmp	r3, #22
 8008a7e:	d810      	bhi.n	8008aa2 <_dtoa_r+0x196>
 8008a80:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008a82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	4b83      	ldr	r3, [pc, #524]	@ (8008c94 <_dtoa_r+0x388>)
 8008a88:	00d2      	lsls	r2, r2, #3
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f7f7 fce2 	bl	8000458 <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d047      	beq.n	8008b28 <_dtoa_r+0x21c>
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9315      	str	r3, [sp, #84]	@ 0x54
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	1bdb      	subs	r3, r3, r7
 8008aaa:	1e5a      	subs	r2, r3, #1
 8008aac:	d53e      	bpl.n	8008b2c <_dtoa_r+0x220>
 8008aae:	2201      	movs	r2, #1
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	9306      	str	r3, [sp, #24]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	db38      	blt.n	8008b30 <_dtoa_r+0x224>
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ac2:	4694      	mov	ip, r2
 8008ac4:	4463      	add	r3, ip
 8008ac6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9214      	str	r2, [sp, #80]	@ 0x50
 8008acc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ace:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ad0:	2401      	movs	r4, #1
 8008ad2:	2b09      	cmp	r3, #9
 8008ad4:	d867      	bhi.n	8008ba6 <_dtoa_r+0x29a>
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	dd02      	ble.n	8008ae0 <_dtoa_r+0x1d4>
 8008ada:	2400      	movs	r4, #0
 8008adc:	3b04      	subs	r3, #4
 8008ade:	9322      	str	r3, [sp, #136]	@ 0x88
 8008ae0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ae2:	1e98      	subs	r0, r3, #2
 8008ae4:	2803      	cmp	r0, #3
 8008ae6:	d867      	bhi.n	8008bb8 <_dtoa_r+0x2ac>
 8008ae8:	f7f7 fb16 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008aec:	5b383a2b 	.word	0x5b383a2b
 8008af0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008af2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008af4:	18f6      	adds	r6, r6, r3
 8008af6:	4b68      	ldr	r3, [pc, #416]	@ (8008c98 <_dtoa_r+0x38c>)
 8008af8:	18f2      	adds	r2, r6, r3
 8008afa:	2a20      	cmp	r2, #32
 8008afc:	dd0f      	ble.n	8008b1e <_dtoa_r+0x212>
 8008afe:	2340      	movs	r3, #64	@ 0x40
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	409f      	lsls	r7, r3
 8008b04:	4b65      	ldr	r3, [pc, #404]	@ (8008c9c <_dtoa_r+0x390>)
 8008b06:	0038      	movs	r0, r7
 8008b08:	18f3      	adds	r3, r6, r3
 8008b0a:	40dc      	lsrs	r4, r3
 8008b0c:	4320      	orrs	r0, r4
 8008b0e:	f7fa fc3b 	bl	8003388 <__aeabi_ui2d>
 8008b12:	2201      	movs	r2, #1
 8008b14:	4b62      	ldr	r3, [pc, #392]	@ (8008ca0 <_dtoa_r+0x394>)
 8008b16:	1e77      	subs	r7, r6, #1
 8008b18:	18cb      	adds	r3, r1, r3
 8008b1a:	9218      	str	r2, [sp, #96]	@ 0x60
 8008b1c:	e776      	b.n	8008a0c <_dtoa_r+0x100>
 8008b1e:	2320      	movs	r3, #32
 8008b20:	0020      	movs	r0, r4
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	4098      	lsls	r0, r3
 8008b26:	e7f2      	b.n	8008b0e <_dtoa_r+0x202>
 8008b28:	9015      	str	r0, [sp, #84]	@ 0x54
 8008b2a:	e7ba      	b.n	8008aa2 <_dtoa_r+0x196>
 8008b2c:	920d      	str	r2, [sp, #52]	@ 0x34
 8008b2e:	e7c3      	b.n	8008ab8 <_dtoa_r+0x1ac>
 8008b30:	9b06      	ldr	r3, [sp, #24]
 8008b32:	9a04      	ldr	r2, [sp, #16]
 8008b34:	1a9b      	subs	r3, r3, r2
 8008b36:	9306      	str	r3, [sp, #24]
 8008b38:	4253      	negs	r3, r2
 8008b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008b40:	e7c5      	b.n	8008ace <_dtoa_r+0x1c2>
 8008b42:	2300      	movs	r3, #0
 8008b44:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b48:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dc13      	bgt.n	8008b78 <_dtoa_r+0x26c>
 8008b50:	2301      	movs	r3, #1
 8008b52:	001a      	movs	r2, r3
 8008b54:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b58:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008b5a:	e00d      	b.n	8008b78 <_dtoa_r+0x26c>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e7f1      	b.n	8008b44 <_dtoa_r+0x238>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b64:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b66:	4694      	mov	ip, r2
 8008b68:	9b04      	ldr	r3, [sp, #16]
 8008b6a:	4463      	add	r3, ip
 8008b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b6e:	3301      	adds	r3, #1
 8008b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dc00      	bgt.n	8008b78 <_dtoa_r+0x26c>
 8008b76:	2301      	movs	r3, #1
 8008b78:	9a03      	ldr	r2, [sp, #12]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	69d0      	ldr	r0, [r2, #28]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	0015      	movs	r5, r2
 8008b82:	3514      	adds	r5, #20
 8008b84:	429d      	cmp	r5, r3
 8008b86:	d91b      	bls.n	8008bc0 <_dtoa_r+0x2b4>
 8008b88:	6041      	str	r1, [r0, #4]
 8008b8a:	9803      	ldr	r0, [sp, #12]
 8008b8c:	f000 fdb8 	bl	8009700 <_Balloc>
 8008b90:	9008      	str	r0, [sp, #32]
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d117      	bne.n	8008bc6 <_dtoa_r+0x2ba>
 8008b96:	21b0      	movs	r1, #176	@ 0xb0
 8008b98:	4b42      	ldr	r3, [pc, #264]	@ (8008ca4 <_dtoa_r+0x398>)
 8008b9a:	482e      	ldr	r0, [pc, #184]	@ (8008c54 <_dtoa_r+0x348>)
 8008b9c:	9a08      	ldr	r2, [sp, #32]
 8008b9e:	31ff      	adds	r1, #255	@ 0xff
 8008ba0:	e6c9      	b.n	8008936 <_dtoa_r+0x2a>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e7dd      	b.n	8008b62 <_dtoa_r+0x256>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9410      	str	r4, [sp, #64]	@ 0x40
 8008baa:	9322      	str	r3, [sp, #136]	@ 0x88
 8008bac:	3b01      	subs	r3, #1
 8008bae:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	3313      	adds	r3, #19
 8008bb6:	e7cf      	b.n	8008b58 <_dtoa_r+0x24c>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bbc:	3b02      	subs	r3, #2
 8008bbe:	e7f6      	b.n	8008bae <_dtoa_r+0x2a2>
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	0052      	lsls	r2, r2, #1
 8008bc4:	e7dc      	b.n	8008b80 <_dtoa_r+0x274>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	9a08      	ldr	r2, [sp, #32]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd0:	2b0e      	cmp	r3, #14
 8008bd2:	d900      	bls.n	8008bd6 <_dtoa_r+0x2ca>
 8008bd4:	e0d9      	b.n	8008d8a <_dtoa_r+0x47e>
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	d100      	bne.n	8008bdc <_dtoa_r+0x2d0>
 8008bda:	e0d6      	b.n	8008d8a <_dtoa_r+0x47e>
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd64      	ble.n	8008cac <_dtoa_r+0x3a0>
 8008be2:	210f      	movs	r1, #15
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c94 <_dtoa_r+0x388>)
 8008be8:	400a      	ands	r2, r1
 8008bea:	00d2      	lsls	r2, r2, #3
 8008bec:	189b      	adds	r3, r3, r2
 8008bee:	681e      	ldr	r6, [r3, #0]
 8008bf0:	685f      	ldr	r7, [r3, #4]
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	2402      	movs	r4, #2
 8008bf6:	111d      	asrs	r5, r3, #4
 8008bf8:	05db      	lsls	r3, r3, #23
 8008bfa:	d50a      	bpl.n	8008c12 <_dtoa_r+0x306>
 8008bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8008ca8 <_dtoa_r+0x39c>)
 8008bfe:	400d      	ands	r5, r1
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008c06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008c08:	f7f9 f88a 	bl	8001d20 <__aeabi_ddiv>
 8008c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c10:	3401      	adds	r4, #1
 8008c12:	4b25      	ldr	r3, [pc, #148]	@ (8008ca8 <_dtoa_r+0x39c>)
 8008c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	d108      	bne.n	8008c2c <_dtoa_r+0x320>
 8008c1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c1e:	0032      	movs	r2, r6
 8008c20:	003b      	movs	r3, r7
 8008c22:	f7f9 f87d 	bl	8001d20 <__aeabi_ddiv>
 8008c26:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c2a:	e05a      	b.n	8008ce2 <_dtoa_r+0x3d6>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	421d      	tst	r5, r3
 8008c30:	d009      	beq.n	8008c46 <_dtoa_r+0x33a>
 8008c32:	18e4      	adds	r4, r4, r3
 8008c34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c36:	0030      	movs	r0, r6
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	0039      	movs	r1, r7
 8008c3e:	f7f9 fcb3 	bl	80025a8 <__aeabi_dmul>
 8008c42:	0006      	movs	r6, r0
 8008c44:	000f      	movs	r7, r1
 8008c46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	e7e2      	b.n	8008c14 <_dtoa_r+0x308>
 8008c4e:	46c0      	nop			@ (mov r8, r8)
 8008c50:	0800c572 	.word	0x0800c572
 8008c54:	0800c589 	.word	0x0800c589
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0000270f 	.word	0x0000270f
 8008c60:	0800c56e 	.word	0x0800c56e
 8008c64:	0800c571 	.word	0x0800c571
 8008c68:	0800c53d 	.word	0x0800c53d
 8008c6c:	0800c53c 	.word	0x0800c53c
 8008c70:	3ff00000 	.word	0x3ff00000
 8008c74:	fffffc01 	.word	0xfffffc01
 8008c78:	3ff80000 	.word	0x3ff80000
 8008c7c:	636f4361 	.word	0x636f4361
 8008c80:	3fd287a7 	.word	0x3fd287a7
 8008c84:	8b60c8b3 	.word	0x8b60c8b3
 8008c88:	3fc68a28 	.word	0x3fc68a28
 8008c8c:	509f79fb 	.word	0x509f79fb
 8008c90:	3fd34413 	.word	0x3fd34413
 8008c94:	0800c680 	.word	0x0800c680
 8008c98:	00000432 	.word	0x00000432
 8008c9c:	00000412 	.word	0x00000412
 8008ca0:	fe100000 	.word	0xfe100000
 8008ca4:	0800c5e1 	.word	0x0800c5e1
 8008ca8:	0800c658 	.word	0x0800c658
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	2402      	movs	r4, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d016      	beq.n	8008ce2 <_dtoa_r+0x3d6>
 8008cb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008cb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008cb8:	220f      	movs	r2, #15
 8008cba:	425d      	negs	r5, r3
 8008cbc:	402a      	ands	r2, r5
 8008cbe:	4bd7      	ldr	r3, [pc, #860]	@ (800901c <_dtoa_r+0x710>)
 8008cc0:	00d2      	lsls	r2, r2, #3
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f7f9 fc6e 	bl	80025a8 <__aeabi_dmul>
 8008ccc:	2701      	movs	r7, #1
 8008cce:	2300      	movs	r3, #0
 8008cd0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008cd2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008cd4:	4ed2      	ldr	r6, [pc, #840]	@ (8009020 <_dtoa_r+0x714>)
 8008cd6:	112d      	asrs	r5, r5, #4
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	d000      	beq.n	8008cde <_dtoa_r+0x3d2>
 8008cdc:	e0ba      	b.n	8008e54 <_dtoa_r+0x548>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1a1      	bne.n	8008c26 <_dtoa_r+0x31a>
 8008ce2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ce4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008ce6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d100      	bne.n	8008cee <_dtoa_r+0x3e2>
 8008cec:	e0bd      	b.n	8008e6a <_dtoa_r+0x55e>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	0030      	movs	r0, r6
 8008cf2:	0039      	movs	r1, r7
 8008cf4:	4bcb      	ldr	r3, [pc, #812]	@ (8009024 <_dtoa_r+0x718>)
 8008cf6:	f7f7 fbaf 	bl	8000458 <__aeabi_dcmplt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d100      	bne.n	8008d00 <_dtoa_r+0x3f4>
 8008cfe:	e0b4      	b.n	8008e6a <_dtoa_r+0x55e>
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d100      	bne.n	8008d08 <_dtoa_r+0x3fc>
 8008d06:	e0b0      	b.n	8008e6a <_dtoa_r+0x55e>
 8008d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd39      	ble.n	8008d82 <_dtoa_r+0x476>
 8008d0e:	9b04      	ldr	r3, [sp, #16]
 8008d10:	2200      	movs	r2, #0
 8008d12:	3b01      	subs	r3, #1
 8008d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d16:	0030      	movs	r0, r6
 8008d18:	4bc3      	ldr	r3, [pc, #780]	@ (8009028 <_dtoa_r+0x71c>)
 8008d1a:	0039      	movs	r1, r7
 8008d1c:	f7f9 fc44 	bl	80025a8 <__aeabi_dmul>
 8008d20:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d26:	3401      	adds	r4, #1
 8008d28:	0020      	movs	r0, r4
 8008d2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d2c:	f7fa fafe 	bl	800332c <__aeabi_i2d>
 8008d30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d34:	f7f9 fc38 	bl	80025a8 <__aeabi_dmul>
 8008d38:	4bbc      	ldr	r3, [pc, #752]	@ (800902c <_dtoa_r+0x720>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f7f8 fc8c 	bl	8001658 <__aeabi_dadd>
 8008d40:	4bbb      	ldr	r3, [pc, #748]	@ (8009030 <_dtoa_r+0x724>)
 8008d42:	0006      	movs	r6, r0
 8008d44:	18cf      	adds	r7, r1, r3
 8008d46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d000      	beq.n	8008d4e <_dtoa_r+0x442>
 8008d4c:	e091      	b.n	8008e72 <_dtoa_r+0x566>
 8008d4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d52:	2200      	movs	r2, #0
 8008d54:	4bb7      	ldr	r3, [pc, #732]	@ (8009034 <_dtoa_r+0x728>)
 8008d56:	f7f9 feef 	bl	8002b38 <__aeabi_dsub>
 8008d5a:	0032      	movs	r2, r6
 8008d5c:	003b      	movs	r3, r7
 8008d5e:	0004      	movs	r4, r0
 8008d60:	000d      	movs	r5, r1
 8008d62:	f7f7 fb8d 	bl	8000480 <__aeabi_dcmpgt>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d000      	beq.n	8008d6c <_dtoa_r+0x460>
 8008d6a:	e29d      	b.n	80092a8 <_dtoa_r+0x99c>
 8008d6c:	2180      	movs	r1, #128	@ 0x80
 8008d6e:	0609      	lsls	r1, r1, #24
 8008d70:	187b      	adds	r3, r7, r1
 8008d72:	0032      	movs	r2, r6
 8008d74:	0020      	movs	r0, r4
 8008d76:	0029      	movs	r1, r5
 8008d78:	f7f7 fb6e 	bl	8000458 <__aeabi_dcmplt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d000      	beq.n	8008d82 <_dtoa_r+0x476>
 8008d80:	e130      	b.n	8008fe4 <_dtoa_r+0x6d8>
 8008d82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d84:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d88:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da00      	bge.n	8008d92 <_dtoa_r+0x486>
 8008d90:	e177      	b.n	8009082 <_dtoa_r+0x776>
 8008d92:	9a04      	ldr	r2, [sp, #16]
 8008d94:	2a0e      	cmp	r2, #14
 8008d96:	dd00      	ble.n	8008d9a <_dtoa_r+0x48e>
 8008d98:	e173      	b.n	8009082 <_dtoa_r+0x776>
 8008d9a:	4ba0      	ldr	r3, [pc, #640]	@ (800901c <_dtoa_r+0x710>)
 8008d9c:	00d2      	lsls	r2, r2, #3
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	685c      	ldr	r4, [r3, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	9306      	str	r3, [sp, #24]
 8008da6:	9407      	str	r4, [sp, #28]
 8008da8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da03      	bge.n	8008db6 <_dtoa_r+0x4aa>
 8008dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dc00      	bgt.n	8008db6 <_dtoa_r+0x4aa>
 8008db4:	e106      	b.n	8008fc4 <_dtoa_r+0x6b8>
 8008db6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008db8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbc:	9d08      	ldr	r5, [sp, #32]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	195b      	adds	r3, r3, r5
 8008dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc4:	9a06      	ldr	r2, [sp, #24]
 8008dc6:	9b07      	ldr	r3, [sp, #28]
 8008dc8:	0030      	movs	r0, r6
 8008dca:	0039      	movs	r1, r7
 8008dcc:	f7f8 ffa8 	bl	8001d20 <__aeabi_ddiv>
 8008dd0:	f7fa fa70 	bl	80032b4 <__aeabi_d2iz>
 8008dd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8008dd6:	f7fa faa9 	bl	800332c <__aeabi_i2d>
 8008dda:	9a06      	ldr	r2, [sp, #24]
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	f7f9 fbe3 	bl	80025a8 <__aeabi_dmul>
 8008de2:	0002      	movs	r2, r0
 8008de4:	000b      	movs	r3, r1
 8008de6:	0030      	movs	r0, r6
 8008de8:	0039      	movs	r1, r7
 8008dea:	f7f9 fea5 	bl	8002b38 <__aeabi_dsub>
 8008dee:	002b      	movs	r3, r5
 8008df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df2:	3501      	adds	r5, #1
 8008df4:	3230      	adds	r2, #48	@ 0x30
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dfa:	002c      	movs	r4, r5
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d000      	beq.n	8008e02 <_dtoa_r+0x4f6>
 8008e00:	e131      	b.n	8009066 <_dtoa_r+0x75a>
 8008e02:	0002      	movs	r2, r0
 8008e04:	000b      	movs	r3, r1
 8008e06:	f7f8 fc27 	bl	8001658 <__aeabi_dadd>
 8008e0a:	9a06      	ldr	r2, [sp, #24]
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	0006      	movs	r6, r0
 8008e10:	000f      	movs	r7, r1
 8008e12:	f7f7 fb35 	bl	8000480 <__aeabi_dcmpgt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d000      	beq.n	8008e1c <_dtoa_r+0x510>
 8008e1a:	e10f      	b.n	800903c <_dtoa_r+0x730>
 8008e1c:	9a06      	ldr	r2, [sp, #24]
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	0030      	movs	r0, r6
 8008e22:	0039      	movs	r1, r7
 8008e24:	f7f7 fb12 	bl	800044c <__aeabi_dcmpeq>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d003      	beq.n	8008e34 <_dtoa_r+0x528>
 8008e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2e:	07dd      	lsls	r5, r3, #31
 8008e30:	d500      	bpl.n	8008e34 <_dtoa_r+0x528>
 8008e32:	e103      	b.n	800903c <_dtoa_r+0x730>
 8008e34:	9905      	ldr	r1, [sp, #20]
 8008e36:	9803      	ldr	r0, [sp, #12]
 8008e38:	f000 fca6 	bl	8009788 <_Bfree>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	7023      	strb	r3, [r4, #0]
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008e44:	3301      	adds	r3, #1
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d100      	bne.n	8008e50 <_dtoa_r+0x544>
 8008e4e:	e5a7      	b.n	80089a0 <_dtoa_r+0x94>
 8008e50:	601c      	str	r4, [r3, #0]
 8008e52:	e5a5      	b.n	80089a0 <_dtoa_r+0x94>
 8008e54:	423d      	tst	r5, r7
 8008e56:	d005      	beq.n	8008e64 <_dtoa_r+0x558>
 8008e58:	6832      	ldr	r2, [r6, #0]
 8008e5a:	6873      	ldr	r3, [r6, #4]
 8008e5c:	f7f9 fba4 	bl	80025a8 <__aeabi_dmul>
 8008e60:	003b      	movs	r3, r7
 8008e62:	3401      	adds	r4, #1
 8008e64:	106d      	asrs	r5, r5, #1
 8008e66:	3608      	adds	r6, #8
 8008e68:	e736      	b.n	8008cd8 <_dtoa_r+0x3cc>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e70:	e75a      	b.n	8008d28 <_dtoa_r+0x41c>
 8008e72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e74:	4b69      	ldr	r3, [pc, #420]	@ (800901c <_dtoa_r+0x710>)
 8008e76:	3a01      	subs	r2, #1
 8008e78:	00d2      	lsls	r2, r2, #3
 8008e7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008e7c:	189b      	adds	r3, r3, r2
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d04c      	beq.n	8008f20 <_dtoa_r+0x614>
 8008e86:	2000      	movs	r0, #0
 8008e88:	496b      	ldr	r1, [pc, #428]	@ (8009038 <_dtoa_r+0x72c>)
 8008e8a:	f7f8 ff49 	bl	8001d20 <__aeabi_ddiv>
 8008e8e:	0032      	movs	r2, r6
 8008e90:	003b      	movs	r3, r7
 8008e92:	f7f9 fe51 	bl	8002b38 <__aeabi_dsub>
 8008e96:	9a08      	ldr	r2, [sp, #32]
 8008e98:	0006      	movs	r6, r0
 8008e9a:	4694      	mov	ip, r2
 8008e9c:	000f      	movs	r7, r1
 8008e9e:	9b08      	ldr	r3, [sp, #32]
 8008ea0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008ea2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ea4:	4463      	add	r3, ip
 8008ea6:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ea8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008eaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eac:	f7fa fa02 	bl	80032b4 <__aeabi_d2iz>
 8008eb0:	0005      	movs	r5, r0
 8008eb2:	f7fa fa3b 	bl	800332c <__aeabi_i2d>
 8008eb6:	0002      	movs	r2, r0
 8008eb8:	000b      	movs	r3, r1
 8008eba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ebc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ebe:	f7f9 fe3b 	bl	8002b38 <__aeabi_dsub>
 8008ec2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ec4:	3530      	adds	r5, #48	@ 0x30
 8008ec6:	1c5c      	adds	r4, r3, #1
 8008ec8:	701d      	strb	r5, [r3, #0]
 8008eca:	0032      	movs	r2, r6
 8008ecc:	003b      	movs	r3, r7
 8008ece:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ed0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ed2:	f7f7 fac1 	bl	8000458 <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d16a      	bne.n	8008fb0 <_dtoa_r+0x6a4>
 8008eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ede:	2000      	movs	r0, #0
 8008ee0:	4950      	ldr	r1, [pc, #320]	@ (8009024 <_dtoa_r+0x718>)
 8008ee2:	f7f9 fe29 	bl	8002b38 <__aeabi_dsub>
 8008ee6:	0032      	movs	r2, r6
 8008ee8:	003b      	movs	r3, r7
 8008eea:	f7f7 fab5 	bl	8000458 <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d000      	beq.n	8008ef4 <_dtoa_r+0x5e8>
 8008ef2:	e0a5      	b.n	8009040 <_dtoa_r+0x734>
 8008ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	d100      	bne.n	8008efc <_dtoa_r+0x5f0>
 8008efa:	e742      	b.n	8008d82 <_dtoa_r+0x476>
 8008efc:	2200      	movs	r2, #0
 8008efe:	0030      	movs	r0, r6
 8008f00:	0039      	movs	r1, r7
 8008f02:	4b49      	ldr	r3, [pc, #292]	@ (8009028 <_dtoa_r+0x71c>)
 8008f04:	f7f9 fb50 	bl	80025a8 <__aeabi_dmul>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	0006      	movs	r6, r0
 8008f0c:	000f      	movs	r7, r1
 8008f0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f12:	4b45      	ldr	r3, [pc, #276]	@ (8009028 <_dtoa_r+0x71c>)
 8008f14:	f7f9 fb48 	bl	80025a8 <__aeabi_dmul>
 8008f18:	9416      	str	r4, [sp, #88]	@ 0x58
 8008f1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f1e:	e7c3      	b.n	8008ea8 <_dtoa_r+0x59c>
 8008f20:	0030      	movs	r0, r6
 8008f22:	0039      	movs	r1, r7
 8008f24:	f7f9 fb40 	bl	80025a8 <__aeabi_dmul>
 8008f28:	9d08      	ldr	r5, [sp, #32]
 8008f2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f2c:	002b      	movs	r3, r5
 8008f2e:	4694      	mov	ip, r2
 8008f30:	9016      	str	r0, [sp, #88]	@ 0x58
 8008f32:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008f34:	4463      	add	r3, ip
 8008f36:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f3c:	f7fa f9ba 	bl	80032b4 <__aeabi_d2iz>
 8008f40:	0004      	movs	r4, r0
 8008f42:	f7fa f9f3 	bl	800332c <__aeabi_i2d>
 8008f46:	000b      	movs	r3, r1
 8008f48:	0002      	movs	r2, r0
 8008f4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f4e:	f7f9 fdf3 	bl	8002b38 <__aeabi_dsub>
 8008f52:	3430      	adds	r4, #48	@ 0x30
 8008f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f56:	702c      	strb	r4, [r5, #0]
 8008f58:	3501      	adds	r5, #1
 8008f5a:	0006      	movs	r6, r0
 8008f5c:	000f      	movs	r7, r1
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d129      	bne.n	8008fb6 <_dtoa_r+0x6aa>
 8008f62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008f64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008f66:	9b08      	ldr	r3, [sp, #32]
 8008f68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008f6a:	469c      	mov	ip, r3
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4b32      	ldr	r3, [pc, #200]	@ (8009038 <_dtoa_r+0x72c>)
 8008f70:	4464      	add	r4, ip
 8008f72:	f7f8 fb71 	bl	8001658 <__aeabi_dadd>
 8008f76:	0002      	movs	r2, r0
 8008f78:	000b      	movs	r3, r1
 8008f7a:	0030      	movs	r0, r6
 8008f7c:	0039      	movs	r1, r7
 8008f7e:	f7f7 fa7f 	bl	8000480 <__aeabi_dcmpgt>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d15c      	bne.n	8009040 <_dtoa_r+0x734>
 8008f86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	492a      	ldr	r1, [pc, #168]	@ (8009038 <_dtoa_r+0x72c>)
 8008f8e:	f7f9 fdd3 	bl	8002b38 <__aeabi_dsub>
 8008f92:	0002      	movs	r2, r0
 8008f94:	000b      	movs	r3, r1
 8008f96:	0030      	movs	r0, r6
 8008f98:	0039      	movs	r1, r7
 8008f9a:	f7f7 fa5d 	bl	8000458 <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d100      	bne.n	8008fa4 <_dtoa_r+0x698>
 8008fa2:	e6ee      	b.n	8008d82 <_dtoa_r+0x476>
 8008fa4:	0023      	movs	r3, r4
 8008fa6:	3c01      	subs	r4, #1
 8008fa8:	7822      	ldrb	r2, [r4, #0]
 8008faa:	2a30      	cmp	r2, #48	@ 0x30
 8008fac:	d0fa      	beq.n	8008fa4 <_dtoa_r+0x698>
 8008fae:	001c      	movs	r4, r3
 8008fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	e73e      	b.n	8008e34 <_dtoa_r+0x528>
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009028 <_dtoa_r+0x71c>)
 8008fba:	f7f9 faf5 	bl	80025a8 <__aeabi_dmul>
 8008fbe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008fc2:	e7b9      	b.n	8008f38 <_dtoa_r+0x62c>
 8008fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10c      	bne.n	8008fe4 <_dtoa_r+0x6d8>
 8008fca:	9806      	ldr	r0, [sp, #24]
 8008fcc:	9907      	ldr	r1, [sp, #28]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4b18      	ldr	r3, [pc, #96]	@ (8009034 <_dtoa_r+0x728>)
 8008fd2:	f7f9 fae9 	bl	80025a8 <__aeabi_dmul>
 8008fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fda:	f7f7 fa5b 	bl	8000494 <__aeabi_dcmpge>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d100      	bne.n	8008fe4 <_dtoa_r+0x6d8>
 8008fe2:	e164      	b.n	80092ae <_dtoa_r+0x9a2>
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	0037      	movs	r7, r6
 8008fe8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fea:	9c08      	ldr	r4, [sp, #32]
 8008fec:	43db      	mvns	r3, r3
 8008fee:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	0031      	movs	r1, r6
 8008ff6:	9803      	ldr	r0, [sp, #12]
 8008ff8:	f000 fbc6 	bl	8009788 <_Bfree>
 8008ffc:	2f00      	cmp	r7, #0
 8008ffe:	d0d7      	beq.n	8008fb0 <_dtoa_r+0x6a4>
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <_dtoa_r+0x706>
 8009006:	42bb      	cmp	r3, r7
 8009008:	d003      	beq.n	8009012 <_dtoa_r+0x706>
 800900a:	0019      	movs	r1, r3
 800900c:	9803      	ldr	r0, [sp, #12]
 800900e:	f000 fbbb 	bl	8009788 <_Bfree>
 8009012:	0039      	movs	r1, r7
 8009014:	9803      	ldr	r0, [sp, #12]
 8009016:	f000 fbb7 	bl	8009788 <_Bfree>
 800901a:	e7c9      	b.n	8008fb0 <_dtoa_r+0x6a4>
 800901c:	0800c680 	.word	0x0800c680
 8009020:	0800c658 	.word	0x0800c658
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	40240000 	.word	0x40240000
 800902c:	401c0000 	.word	0x401c0000
 8009030:	fcc00000 	.word	0xfcc00000
 8009034:	40140000 	.word	0x40140000
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009040:	0023      	movs	r3, r4
 8009042:	001c      	movs	r4, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	2a39      	cmp	r2, #57	@ 0x39
 800904a:	d108      	bne.n	800905e <_dtoa_r+0x752>
 800904c:	9a08      	ldr	r2, [sp, #32]
 800904e:	429a      	cmp	r2, r3
 8009050:	d1f7      	bne.n	8009042 <_dtoa_r+0x736>
 8009052:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009054:	9908      	ldr	r1, [sp, #32]
 8009056:	3201      	adds	r2, #1
 8009058:	920c      	str	r2, [sp, #48]	@ 0x30
 800905a:	2230      	movs	r2, #48	@ 0x30
 800905c:	700a      	strb	r2, [r1, #0]
 800905e:	781a      	ldrb	r2, [r3, #0]
 8009060:	3201      	adds	r2, #1
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e7a4      	b.n	8008fb0 <_dtoa_r+0x6a4>
 8009066:	2200      	movs	r2, #0
 8009068:	4bc6      	ldr	r3, [pc, #792]	@ (8009384 <_dtoa_r+0xa78>)
 800906a:	f7f9 fa9d 	bl	80025a8 <__aeabi_dmul>
 800906e:	2200      	movs	r2, #0
 8009070:	2300      	movs	r3, #0
 8009072:	0006      	movs	r6, r0
 8009074:	000f      	movs	r7, r1
 8009076:	f7f7 f9e9 	bl	800044c <__aeabi_dcmpeq>
 800907a:	2800      	cmp	r0, #0
 800907c:	d100      	bne.n	8009080 <_dtoa_r+0x774>
 800907e:	e6a1      	b.n	8008dc4 <_dtoa_r+0x4b8>
 8009080:	e6d8      	b.n	8008e34 <_dtoa_r+0x528>
 8009082:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009084:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009086:	9c06      	ldr	r4, [sp, #24]
 8009088:	2f00      	cmp	r7, #0
 800908a:	d014      	beq.n	80090b6 <_dtoa_r+0x7aa>
 800908c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800908e:	2a01      	cmp	r2, #1
 8009090:	dd00      	ble.n	8009094 <_dtoa_r+0x788>
 8009092:	e0c8      	b.n	8009226 <_dtoa_r+0x91a>
 8009094:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009096:	2a00      	cmp	r2, #0
 8009098:	d100      	bne.n	800909c <_dtoa_r+0x790>
 800909a:	e0be      	b.n	800921a <_dtoa_r+0x90e>
 800909c:	4aba      	ldr	r2, [pc, #744]	@ (8009388 <_dtoa_r+0xa7c>)
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	9a06      	ldr	r2, [sp, #24]
 80090a2:	2101      	movs	r1, #1
 80090a4:	18d2      	adds	r2, r2, r3
 80090a6:	9206      	str	r2, [sp, #24]
 80090a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090aa:	9803      	ldr	r0, [sp, #12]
 80090ac:	18d3      	adds	r3, r2, r3
 80090ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80090b0:	f000 fc6e 	bl	8009990 <__i2b>
 80090b4:	0007      	movs	r7, r0
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	d00e      	beq.n	80090d8 <_dtoa_r+0x7cc>
 80090ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd0b      	ble.n	80090d8 <_dtoa_r+0x7cc>
 80090c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090c2:	0023      	movs	r3, r4
 80090c4:	4294      	cmp	r4, r2
 80090c6:	dd00      	ble.n	80090ca <_dtoa_r+0x7be>
 80090c8:	0013      	movs	r3, r2
 80090ca:	9a06      	ldr	r2, [sp, #24]
 80090cc:	1ae4      	subs	r4, r4, r3
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	9206      	str	r2, [sp, #24]
 80090d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80090d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01f      	beq.n	800911e <_dtoa_r+0x812>
 80090de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d100      	bne.n	80090e6 <_dtoa_r+0x7da>
 80090e4:	e0b5      	b.n	8009252 <_dtoa_r+0x946>
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	d010      	beq.n	800910c <_dtoa_r+0x800>
 80090ea:	0039      	movs	r1, r7
 80090ec:	002a      	movs	r2, r5
 80090ee:	9803      	ldr	r0, [sp, #12]
 80090f0:	f000 fd18 	bl	8009b24 <__pow5mult>
 80090f4:	9a05      	ldr	r2, [sp, #20]
 80090f6:	0001      	movs	r1, r0
 80090f8:	0007      	movs	r7, r0
 80090fa:	9803      	ldr	r0, [sp, #12]
 80090fc:	f000 fc60 	bl	80099c0 <__multiply>
 8009100:	0006      	movs	r6, r0
 8009102:	9905      	ldr	r1, [sp, #20]
 8009104:	9803      	ldr	r0, [sp, #12]
 8009106:	f000 fb3f 	bl	8009788 <_Bfree>
 800910a:	9605      	str	r6, [sp, #20]
 800910c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800910e:	1b5a      	subs	r2, r3, r5
 8009110:	42ab      	cmp	r3, r5
 8009112:	d004      	beq.n	800911e <_dtoa_r+0x812>
 8009114:	9905      	ldr	r1, [sp, #20]
 8009116:	9803      	ldr	r0, [sp, #12]
 8009118:	f000 fd04 	bl	8009b24 <__pow5mult>
 800911c:	9005      	str	r0, [sp, #20]
 800911e:	2101      	movs	r1, #1
 8009120:	9803      	ldr	r0, [sp, #12]
 8009122:	f000 fc35 	bl	8009990 <__i2b>
 8009126:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009128:	0006      	movs	r6, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d100      	bne.n	8009130 <_dtoa_r+0x824>
 800912e:	e1bc      	b.n	80094aa <_dtoa_r+0xb9e>
 8009130:	001a      	movs	r2, r3
 8009132:	0001      	movs	r1, r0
 8009134:	9803      	ldr	r0, [sp, #12]
 8009136:	f000 fcf5 	bl	8009b24 <__pow5mult>
 800913a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800913c:	0006      	movs	r6, r0
 800913e:	2500      	movs	r5, #0
 8009140:	2b01      	cmp	r3, #1
 8009142:	dc16      	bgt.n	8009172 <_dtoa_r+0x866>
 8009144:	2500      	movs	r5, #0
 8009146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009148:	42ab      	cmp	r3, r5
 800914a:	d10e      	bne.n	800916a <_dtoa_r+0x85e>
 800914c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800914e:	031b      	lsls	r3, r3, #12
 8009150:	42ab      	cmp	r3, r5
 8009152:	d10a      	bne.n	800916a <_dtoa_r+0x85e>
 8009154:	4b8d      	ldr	r3, [pc, #564]	@ (800938c <_dtoa_r+0xa80>)
 8009156:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009158:	4213      	tst	r3, r2
 800915a:	d006      	beq.n	800916a <_dtoa_r+0x85e>
 800915c:	9b06      	ldr	r3, [sp, #24]
 800915e:	3501      	adds	r5, #1
 8009160:	3301      	adds	r3, #1
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009166:	3301      	adds	r3, #1
 8009168:	930d      	str	r3, [sp, #52]	@ 0x34
 800916a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800916c:	2001      	movs	r0, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <_dtoa_r+0x878>
 8009172:	6933      	ldr	r3, [r6, #16]
 8009174:	3303      	adds	r3, #3
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	18f3      	adds	r3, r6, r3
 800917a:	6858      	ldr	r0, [r3, #4]
 800917c:	f000 fbb8 	bl	80098f0 <__hi0bits>
 8009180:	2320      	movs	r3, #32
 8009182:	1a18      	subs	r0, r3, r0
 8009184:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009186:	1818      	adds	r0, r3, r0
 8009188:	0002      	movs	r2, r0
 800918a:	231f      	movs	r3, #31
 800918c:	401a      	ands	r2, r3
 800918e:	4218      	tst	r0, r3
 8009190:	d065      	beq.n	800925e <_dtoa_r+0x952>
 8009192:	3301      	adds	r3, #1
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	2b04      	cmp	r3, #4
 8009198:	dd5d      	ble.n	8009256 <_dtoa_r+0x94a>
 800919a:	231c      	movs	r3, #28
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	9a06      	ldr	r2, [sp, #24]
 80091a0:	18e4      	adds	r4, r4, r3
 80091a2:	18d2      	adds	r2, r2, r3
 80091a4:	9206      	str	r2, [sp, #24]
 80091a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091a8:	18d3      	adds	r3, r2, r3
 80091aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dd05      	ble.n	80091be <_dtoa_r+0x8b2>
 80091b2:	001a      	movs	r2, r3
 80091b4:	9905      	ldr	r1, [sp, #20]
 80091b6:	9803      	ldr	r0, [sp, #12]
 80091b8:	f000 fd10 	bl	8009bdc <__lshift>
 80091bc:	9005      	str	r0, [sp, #20]
 80091be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd05      	ble.n	80091d0 <_dtoa_r+0x8c4>
 80091c4:	0031      	movs	r1, r6
 80091c6:	001a      	movs	r2, r3
 80091c8:	9803      	ldr	r0, [sp, #12]
 80091ca:	f000 fd07 	bl	8009bdc <__lshift>
 80091ce:	0006      	movs	r6, r0
 80091d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d045      	beq.n	8009262 <_dtoa_r+0x956>
 80091d6:	0031      	movs	r1, r6
 80091d8:	9805      	ldr	r0, [sp, #20]
 80091da:	f000 fd6b 	bl	8009cb4 <__mcmp>
 80091de:	2800      	cmp	r0, #0
 80091e0:	da3f      	bge.n	8009262 <_dtoa_r+0x956>
 80091e2:	9b04      	ldr	r3, [sp, #16]
 80091e4:	220a      	movs	r2, #10
 80091e6:	3b01      	subs	r3, #1
 80091e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80091ea:	9905      	ldr	r1, [sp, #20]
 80091ec:	2300      	movs	r3, #0
 80091ee:	9803      	ldr	r0, [sp, #12]
 80091f0:	f000 faee 	bl	80097d0 <__multadd>
 80091f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091f6:	9005      	str	r0, [sp, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d100      	bne.n	80091fe <_dtoa_r+0x8f2>
 80091fc:	e15c      	b.n	80094b8 <_dtoa_r+0xbac>
 80091fe:	2300      	movs	r3, #0
 8009200:	0039      	movs	r1, r7
 8009202:	220a      	movs	r2, #10
 8009204:	9803      	ldr	r0, [sp, #12]
 8009206:	f000 fae3 	bl	80097d0 <__multadd>
 800920a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920c:	0007      	movs	r7, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	dc55      	bgt.n	80092be <_dtoa_r+0x9b2>
 8009212:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009214:	2b02      	cmp	r3, #2
 8009216:	dc2d      	bgt.n	8009274 <_dtoa_r+0x968>
 8009218:	e051      	b.n	80092be <_dtoa_r+0x9b2>
 800921a:	2336      	movs	r3, #54	@ 0x36
 800921c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800921e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009220:	9c06      	ldr	r4, [sp, #24]
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	e73c      	b.n	80090a0 <_dtoa_r+0x794>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	1e5d      	subs	r5, r3, #1
 800922a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800922c:	42ab      	cmp	r3, r5
 800922e:	db08      	blt.n	8009242 <_dtoa_r+0x936>
 8009230:	1b5d      	subs	r5, r3, r5
 8009232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009234:	9c06      	ldr	r4, [sp, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	db00      	blt.n	800923c <_dtoa_r+0x930>
 800923a:	e731      	b.n	80090a0 <_dtoa_r+0x794>
 800923c:	1ae4      	subs	r4, r4, r3
 800923e:	2300      	movs	r3, #0
 8009240:	e72e      	b.n	80090a0 <_dtoa_r+0x794>
 8009242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009244:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009246:	1aeb      	subs	r3, r5, r3
 8009248:	18d3      	adds	r3, r2, r3
 800924a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800924c:	9314      	str	r3, [sp, #80]	@ 0x50
 800924e:	2500      	movs	r5, #0
 8009250:	e7ef      	b.n	8009232 <_dtoa_r+0x926>
 8009252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009254:	e75e      	b.n	8009114 <_dtoa_r+0x808>
 8009256:	2b04      	cmp	r3, #4
 8009258:	d0a8      	beq.n	80091ac <_dtoa_r+0x8a0>
 800925a:	331c      	adds	r3, #28
 800925c:	e79f      	b.n	800919e <_dtoa_r+0x892>
 800925e:	0013      	movs	r3, r2
 8009260:	e7fb      	b.n	800925a <_dtoa_r+0x94e>
 8009262:	9b04      	ldr	r3, [sp, #16]
 8009264:	930c      	str	r3, [sp, #48]	@ 0x30
 8009266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009268:	930e      	str	r3, [sp, #56]	@ 0x38
 800926a:	2b00      	cmp	r3, #0
 800926c:	dc23      	bgt.n	80092b6 <_dtoa_r+0x9aa>
 800926e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009270:	2b02      	cmp	r3, #2
 8009272:	dd20      	ble.n	80092b6 <_dtoa_r+0x9aa>
 8009274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d000      	beq.n	800927c <_dtoa_r+0x970>
 800927a:	e6b5      	b.n	8008fe8 <_dtoa_r+0x6dc>
 800927c:	0031      	movs	r1, r6
 800927e:	2205      	movs	r2, #5
 8009280:	9803      	ldr	r0, [sp, #12]
 8009282:	f000 faa5 	bl	80097d0 <__multadd>
 8009286:	0006      	movs	r6, r0
 8009288:	0001      	movs	r1, r0
 800928a:	9805      	ldr	r0, [sp, #20]
 800928c:	f000 fd12 	bl	8009cb4 <__mcmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	dc00      	bgt.n	8009296 <_dtoa_r+0x98a>
 8009294:	e6a8      	b.n	8008fe8 <_dtoa_r+0x6dc>
 8009296:	9b08      	ldr	r3, [sp, #32]
 8009298:	9a08      	ldr	r2, [sp, #32]
 800929a:	1c5c      	adds	r4, r3, #1
 800929c:	2331      	movs	r3, #49	@ 0x31
 800929e:	7013      	strb	r3, [r2, #0]
 80092a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092a2:	3301      	adds	r3, #1
 80092a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80092a6:	e6a3      	b.n	8008ff0 <_dtoa_r+0x6e4>
 80092a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80092aa:	0037      	movs	r7, r6
 80092ac:	e7f3      	b.n	8009296 <_dtoa_r+0x98a>
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80092b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80092b4:	e7f9      	b.n	80092aa <_dtoa_r+0x99e>
 80092b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d100      	bne.n	80092be <_dtoa_r+0x9b2>
 80092bc:	e100      	b.n	80094c0 <_dtoa_r+0xbb4>
 80092be:	2c00      	cmp	r4, #0
 80092c0:	dd05      	ble.n	80092ce <_dtoa_r+0x9c2>
 80092c2:	0039      	movs	r1, r7
 80092c4:	0022      	movs	r2, r4
 80092c6:	9803      	ldr	r0, [sp, #12]
 80092c8:	f000 fc88 	bl	8009bdc <__lshift>
 80092cc:	0007      	movs	r7, r0
 80092ce:	0038      	movs	r0, r7
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	d018      	beq.n	8009306 <_dtoa_r+0x9fa>
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	9803      	ldr	r0, [sp, #12]
 80092d8:	f000 fa12 	bl	8009700 <_Balloc>
 80092dc:	1e04      	subs	r4, r0, #0
 80092de:	d105      	bne.n	80092ec <_dtoa_r+0x9e0>
 80092e0:	0022      	movs	r2, r4
 80092e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009390 <_dtoa_r+0xa84>)
 80092e4:	482b      	ldr	r0, [pc, #172]	@ (8009394 <_dtoa_r+0xa88>)
 80092e6:	492c      	ldr	r1, [pc, #176]	@ (8009398 <_dtoa_r+0xa8c>)
 80092e8:	f7ff fb25 	bl	8008936 <_dtoa_r+0x2a>
 80092ec:	0039      	movs	r1, r7
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	310c      	adds	r1, #12
 80092f2:	3202      	adds	r2, #2
 80092f4:	0092      	lsls	r2, r2, #2
 80092f6:	300c      	adds	r0, #12
 80092f8:	f001 ffb2 	bl	800b260 <memcpy>
 80092fc:	2201      	movs	r2, #1
 80092fe:	0021      	movs	r1, r4
 8009300:	9803      	ldr	r0, [sp, #12]
 8009302:	f000 fc6b 	bl	8009bdc <__lshift>
 8009306:	9b08      	ldr	r3, [sp, #32]
 8009308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800930a:	9306      	str	r3, [sp, #24]
 800930c:	3b01      	subs	r3, #1
 800930e:	189b      	adds	r3, r3, r2
 8009310:	2201      	movs	r2, #1
 8009312:	9704      	str	r7, [sp, #16]
 8009314:	0007      	movs	r7, r0
 8009316:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800931a:	4013      	ands	r3, r2
 800931c:	930e      	str	r3, [sp, #56]	@ 0x38
 800931e:	0031      	movs	r1, r6
 8009320:	9805      	ldr	r0, [sp, #20]
 8009322:	f7ff fa65 	bl	80087f0 <quorem>
 8009326:	9904      	ldr	r1, [sp, #16]
 8009328:	0005      	movs	r5, r0
 800932a:	900a      	str	r0, [sp, #40]	@ 0x28
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f000 fcc1 	bl	8009cb4 <__mcmp>
 8009332:	003a      	movs	r2, r7
 8009334:	900d      	str	r0, [sp, #52]	@ 0x34
 8009336:	0031      	movs	r1, r6
 8009338:	9803      	ldr	r0, [sp, #12]
 800933a:	f000 fcd7 	bl	8009cec <__mdiff>
 800933e:	2201      	movs	r2, #1
 8009340:	68c3      	ldr	r3, [r0, #12]
 8009342:	0004      	movs	r4, r0
 8009344:	3530      	adds	r5, #48	@ 0x30
 8009346:	9209      	str	r2, [sp, #36]	@ 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <_dtoa_r+0xa4a>
 800934c:	0001      	movs	r1, r0
 800934e:	9805      	ldr	r0, [sp, #20]
 8009350:	f000 fcb0 	bl	8009cb4 <__mcmp>
 8009354:	9009      	str	r0, [sp, #36]	@ 0x24
 8009356:	0021      	movs	r1, r4
 8009358:	9803      	ldr	r0, [sp, #12]
 800935a:	f000 fa15 	bl	8009788 <_Bfree>
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009362:	1c5c      	adds	r4, r3, #1
 8009364:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009366:	4313      	orrs	r3, r2
 8009368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800936a:	4313      	orrs	r3, r2
 800936c:	d116      	bne.n	800939c <_dtoa_r+0xa90>
 800936e:	2d39      	cmp	r5, #57	@ 0x39
 8009370:	d02f      	beq.n	80093d2 <_dtoa_r+0xac6>
 8009372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009374:	2b00      	cmp	r3, #0
 8009376:	dd01      	ble.n	800937c <_dtoa_r+0xa70>
 8009378:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800937a:	3531      	adds	r5, #49	@ 0x31
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	701d      	strb	r5, [r3, #0]
 8009380:	e638      	b.n	8008ff4 <_dtoa_r+0x6e8>
 8009382:	46c0      	nop			@ (mov r8, r8)
 8009384:	40240000 	.word	0x40240000
 8009388:	00000433 	.word	0x00000433
 800938c:	7ff00000 	.word	0x7ff00000
 8009390:	0800c5e1 	.word	0x0800c5e1
 8009394:	0800c589 	.word	0x0800c589
 8009398:	000002ef 	.word	0x000002ef
 800939c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db04      	blt.n	80093ac <_dtoa_r+0xaa0>
 80093a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093a4:	4313      	orrs	r3, r2
 80093a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a8:	4313      	orrs	r3, r2
 80093aa:	d11e      	bne.n	80093ea <_dtoa_r+0xade>
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dde4      	ble.n	800937c <_dtoa_r+0xa70>
 80093b2:	9905      	ldr	r1, [sp, #20]
 80093b4:	2201      	movs	r2, #1
 80093b6:	9803      	ldr	r0, [sp, #12]
 80093b8:	f000 fc10 	bl	8009bdc <__lshift>
 80093bc:	0031      	movs	r1, r6
 80093be:	9005      	str	r0, [sp, #20]
 80093c0:	f000 fc78 	bl	8009cb4 <__mcmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dc02      	bgt.n	80093ce <_dtoa_r+0xac2>
 80093c8:	d1d8      	bne.n	800937c <_dtoa_r+0xa70>
 80093ca:	07eb      	lsls	r3, r5, #31
 80093cc:	d5d6      	bpl.n	800937c <_dtoa_r+0xa70>
 80093ce:	2d39      	cmp	r5, #57	@ 0x39
 80093d0:	d1d2      	bne.n	8009378 <_dtoa_r+0xa6c>
 80093d2:	2339      	movs	r3, #57	@ 0x39
 80093d4:	9a06      	ldr	r2, [sp, #24]
 80093d6:	7013      	strb	r3, [r2, #0]
 80093d8:	0023      	movs	r3, r4
 80093da:	001c      	movs	r4, r3
 80093dc:	3b01      	subs	r3, #1
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	2a39      	cmp	r2, #57	@ 0x39
 80093e2:	d04f      	beq.n	8009484 <_dtoa_r+0xb78>
 80093e4:	3201      	adds	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	e604      	b.n	8008ff4 <_dtoa_r+0x6e8>
 80093ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd03      	ble.n	80093f8 <_dtoa_r+0xaec>
 80093f0:	2d39      	cmp	r5, #57	@ 0x39
 80093f2:	d0ee      	beq.n	80093d2 <_dtoa_r+0xac6>
 80093f4:	3501      	adds	r5, #1
 80093f6:	e7c1      	b.n	800937c <_dtoa_r+0xa70>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	9a06      	ldr	r2, [sp, #24]
 80093fc:	701d      	strb	r5, [r3, #0]
 80093fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009400:	4293      	cmp	r3, r2
 8009402:	d02a      	beq.n	800945a <_dtoa_r+0xb4e>
 8009404:	2300      	movs	r3, #0
 8009406:	220a      	movs	r2, #10
 8009408:	9905      	ldr	r1, [sp, #20]
 800940a:	9803      	ldr	r0, [sp, #12]
 800940c:	f000 f9e0 	bl	80097d0 <__multadd>
 8009410:	9b04      	ldr	r3, [sp, #16]
 8009412:	9005      	str	r0, [sp, #20]
 8009414:	42bb      	cmp	r3, r7
 8009416:	d109      	bne.n	800942c <_dtoa_r+0xb20>
 8009418:	2300      	movs	r3, #0
 800941a:	220a      	movs	r2, #10
 800941c:	9904      	ldr	r1, [sp, #16]
 800941e:	9803      	ldr	r0, [sp, #12]
 8009420:	f000 f9d6 	bl	80097d0 <__multadd>
 8009424:	9004      	str	r0, [sp, #16]
 8009426:	0007      	movs	r7, r0
 8009428:	9406      	str	r4, [sp, #24]
 800942a:	e778      	b.n	800931e <_dtoa_r+0xa12>
 800942c:	9904      	ldr	r1, [sp, #16]
 800942e:	2300      	movs	r3, #0
 8009430:	220a      	movs	r2, #10
 8009432:	9803      	ldr	r0, [sp, #12]
 8009434:	f000 f9cc 	bl	80097d0 <__multadd>
 8009438:	2300      	movs	r3, #0
 800943a:	9004      	str	r0, [sp, #16]
 800943c:	220a      	movs	r2, #10
 800943e:	0039      	movs	r1, r7
 8009440:	9803      	ldr	r0, [sp, #12]
 8009442:	f000 f9c5 	bl	80097d0 <__multadd>
 8009446:	e7ee      	b.n	8009426 <_dtoa_r+0xb1a>
 8009448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800944a:	2401      	movs	r4, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd00      	ble.n	8009452 <_dtoa_r+0xb46>
 8009450:	001c      	movs	r4, r3
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	191c      	adds	r4, r3, r4
 8009456:	2300      	movs	r3, #0
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9905      	ldr	r1, [sp, #20]
 800945c:	2201      	movs	r2, #1
 800945e:	9803      	ldr	r0, [sp, #12]
 8009460:	f000 fbbc 	bl	8009bdc <__lshift>
 8009464:	0031      	movs	r1, r6
 8009466:	9005      	str	r0, [sp, #20]
 8009468:	f000 fc24 	bl	8009cb4 <__mcmp>
 800946c:	2800      	cmp	r0, #0
 800946e:	dcb3      	bgt.n	80093d8 <_dtoa_r+0xacc>
 8009470:	d101      	bne.n	8009476 <_dtoa_r+0xb6a>
 8009472:	07ed      	lsls	r5, r5, #31
 8009474:	d4b0      	bmi.n	80093d8 <_dtoa_r+0xacc>
 8009476:	0023      	movs	r3, r4
 8009478:	001c      	movs	r4, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	2a30      	cmp	r2, #48	@ 0x30
 8009480:	d0fa      	beq.n	8009478 <_dtoa_r+0xb6c>
 8009482:	e5b7      	b.n	8008ff4 <_dtoa_r+0x6e8>
 8009484:	9a08      	ldr	r2, [sp, #32]
 8009486:	429a      	cmp	r2, r3
 8009488:	d1a7      	bne.n	80093da <_dtoa_r+0xace>
 800948a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800948c:	3301      	adds	r3, #1
 800948e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009490:	2331      	movs	r3, #49	@ 0x31
 8009492:	7013      	strb	r3, [r2, #0]
 8009494:	e5ae      	b.n	8008ff4 <_dtoa_r+0x6e8>
 8009496:	4b15      	ldr	r3, [pc, #84]	@ (80094ec <_dtoa_r+0xbe0>)
 8009498:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800949a:	9308      	str	r3, [sp, #32]
 800949c:	4b14      	ldr	r3, [pc, #80]	@ (80094f0 <_dtoa_r+0xbe4>)
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d001      	beq.n	80094a6 <_dtoa_r+0xb9a>
 80094a2:	f7ff fa7b 	bl	800899c <_dtoa_r+0x90>
 80094a6:	f7ff fa7b 	bl	80089a0 <_dtoa_r+0x94>
 80094aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	dc00      	bgt.n	80094b2 <_dtoa_r+0xba6>
 80094b0:	e648      	b.n	8009144 <_dtoa_r+0x838>
 80094b2:	2001      	movs	r0, #1
 80094b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80094b6:	e665      	b.n	8009184 <_dtoa_r+0x878>
 80094b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc00      	bgt.n	80094c0 <_dtoa_r+0xbb4>
 80094be:	e6d6      	b.n	800926e <_dtoa_r+0x962>
 80094c0:	2400      	movs	r4, #0
 80094c2:	0031      	movs	r1, r6
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	f7ff f993 	bl	80087f0 <quorem>
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	3030      	adds	r0, #48	@ 0x30
 80094ce:	5518      	strb	r0, [r3, r4]
 80094d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d2:	3401      	adds	r4, #1
 80094d4:	0005      	movs	r5, r0
 80094d6:	429c      	cmp	r4, r3
 80094d8:	dab6      	bge.n	8009448 <_dtoa_r+0xb3c>
 80094da:	2300      	movs	r3, #0
 80094dc:	220a      	movs	r2, #10
 80094de:	9905      	ldr	r1, [sp, #20]
 80094e0:	9803      	ldr	r0, [sp, #12]
 80094e2:	f000 f975 	bl	80097d0 <__multadd>
 80094e6:	9005      	str	r0, [sp, #20]
 80094e8:	e7eb      	b.n	80094c2 <_dtoa_r+0xbb6>
 80094ea:	46c0      	nop			@ (mov r8, r8)
 80094ec:	0800c565 	.word	0x0800c565
 80094f0:	0800c56d 	.word	0x0800c56d

080094f4 <_free_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	0005      	movs	r5, r0
 80094f8:	1e0c      	subs	r4, r1, #0
 80094fa:	d010      	beq.n	800951e <_free_r+0x2a>
 80094fc:	3c04      	subs	r4, #4
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	da00      	bge.n	8009506 <_free_r+0x12>
 8009504:	18e4      	adds	r4, r4, r3
 8009506:	0028      	movs	r0, r5
 8009508:	f000 f8ea 	bl	80096e0 <__malloc_lock>
 800950c:	4a1d      	ldr	r2, [pc, #116]	@ (8009584 <_free_r+0x90>)
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <_free_r+0x2c>
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	6014      	str	r4, [r2, #0]
 8009518:	0028      	movs	r0, r5
 800951a:	f000 f8e9 	bl	80096f0 <__malloc_unlock>
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	42a3      	cmp	r3, r4
 8009522:	d908      	bls.n	8009536 <_free_r+0x42>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	1821      	adds	r1, r4, r0
 8009528:	428b      	cmp	r3, r1
 800952a:	d1f3      	bne.n	8009514 <_free_r+0x20>
 800952c:	6819      	ldr	r1, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	1809      	adds	r1, r1, r0
 8009532:	6021      	str	r1, [r4, #0]
 8009534:	e7ee      	b.n	8009514 <_free_r+0x20>
 8009536:	001a      	movs	r2, r3
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <_free_r+0x4e>
 800953e:	42a3      	cmp	r3, r4
 8009540:	d9f9      	bls.n	8009536 <_free_r+0x42>
 8009542:	6811      	ldr	r1, [r2, #0]
 8009544:	1850      	adds	r0, r2, r1
 8009546:	42a0      	cmp	r0, r4
 8009548:	d10b      	bne.n	8009562 <_free_r+0x6e>
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1809      	adds	r1, r1, r0
 800954e:	1850      	adds	r0, r2, r1
 8009550:	6011      	str	r1, [r2, #0]
 8009552:	4283      	cmp	r3, r0
 8009554:	d1e0      	bne.n	8009518 <_free_r+0x24>
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	1841      	adds	r1, r0, r1
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	6053      	str	r3, [r2, #4]
 8009560:	e7da      	b.n	8009518 <_free_r+0x24>
 8009562:	42a0      	cmp	r0, r4
 8009564:	d902      	bls.n	800956c <_free_r+0x78>
 8009566:	230c      	movs	r3, #12
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	e7d5      	b.n	8009518 <_free_r+0x24>
 800956c:	6820      	ldr	r0, [r4, #0]
 800956e:	1821      	adds	r1, r4, r0
 8009570:	428b      	cmp	r3, r1
 8009572:	d103      	bne.n	800957c <_free_r+0x88>
 8009574:	6819      	ldr	r1, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	1809      	adds	r1, r1, r0
 800957a:	6021      	str	r1, [r4, #0]
 800957c:	6063      	str	r3, [r4, #4]
 800957e:	6054      	str	r4, [r2, #4]
 8009580:	e7ca      	b.n	8009518 <_free_r+0x24>
 8009582:	46c0      	nop			@ (mov r8, r8)
 8009584:	2000064c 	.word	0x2000064c

08009588 <malloc>:
 8009588:	b510      	push	{r4, lr}
 800958a:	4b03      	ldr	r3, [pc, #12]	@ (8009598 <malloc+0x10>)
 800958c:	0001      	movs	r1, r0
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	f000 f826 	bl	80095e0 <_malloc_r>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	20000028 	.word	0x20000028

0800959c <sbrk_aligned>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4e0f      	ldr	r6, [pc, #60]	@ (80095dc <sbrk_aligned+0x40>)
 80095a0:	000d      	movs	r5, r1
 80095a2:	6831      	ldr	r1, [r6, #0]
 80095a4:	0004      	movs	r4, r0
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d102      	bne.n	80095b0 <sbrk_aligned+0x14>
 80095aa:	f001 fe47 	bl	800b23c <_sbrk_r>
 80095ae:	6030      	str	r0, [r6, #0]
 80095b0:	0029      	movs	r1, r5
 80095b2:	0020      	movs	r0, r4
 80095b4:	f001 fe42 	bl	800b23c <_sbrk_r>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d103      	bne.n	80095c4 <sbrk_aligned+0x28>
 80095bc:	2501      	movs	r5, #1
 80095be:	426d      	negs	r5, r5
 80095c0:	0028      	movs	r0, r5
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	2303      	movs	r3, #3
 80095c6:	1cc5      	adds	r5, r0, #3
 80095c8:	439d      	bics	r5, r3
 80095ca:	42a8      	cmp	r0, r5
 80095cc:	d0f8      	beq.n	80095c0 <sbrk_aligned+0x24>
 80095ce:	1a29      	subs	r1, r5, r0
 80095d0:	0020      	movs	r0, r4
 80095d2:	f001 fe33 	bl	800b23c <_sbrk_r>
 80095d6:	3001      	adds	r0, #1
 80095d8:	d1f2      	bne.n	80095c0 <sbrk_aligned+0x24>
 80095da:	e7ef      	b.n	80095bc <sbrk_aligned+0x20>
 80095dc:	20000648 	.word	0x20000648

080095e0 <_malloc_r>:
 80095e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e2:	2203      	movs	r2, #3
 80095e4:	1ccb      	adds	r3, r1, #3
 80095e6:	4393      	bics	r3, r2
 80095e8:	3308      	adds	r3, #8
 80095ea:	0005      	movs	r5, r0
 80095ec:	001f      	movs	r7, r3
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d234      	bcs.n	800965c <_malloc_r+0x7c>
 80095f2:	270c      	movs	r7, #12
 80095f4:	42b9      	cmp	r1, r7
 80095f6:	d833      	bhi.n	8009660 <_malloc_r+0x80>
 80095f8:	0028      	movs	r0, r5
 80095fa:	f000 f871 	bl	80096e0 <__malloc_lock>
 80095fe:	4e37      	ldr	r6, [pc, #220]	@ (80096dc <_malloc_r+0xfc>)
 8009600:	6833      	ldr	r3, [r6, #0]
 8009602:	001c      	movs	r4, r3
 8009604:	2c00      	cmp	r4, #0
 8009606:	d12f      	bne.n	8009668 <_malloc_r+0x88>
 8009608:	0039      	movs	r1, r7
 800960a:	0028      	movs	r0, r5
 800960c:	f7ff ffc6 	bl	800959c <sbrk_aligned>
 8009610:	0004      	movs	r4, r0
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d15f      	bne.n	80096d6 <_malloc_r+0xf6>
 8009616:	6834      	ldr	r4, [r6, #0]
 8009618:	9400      	str	r4, [sp, #0]
 800961a:	9b00      	ldr	r3, [sp, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d14a      	bne.n	80096b6 <_malloc_r+0xd6>
 8009620:	2c00      	cmp	r4, #0
 8009622:	d052      	beq.n	80096ca <_malloc_r+0xea>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	0028      	movs	r0, r5
 8009628:	18e3      	adds	r3, r4, r3
 800962a:	9900      	ldr	r1, [sp, #0]
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	f001 fe05 	bl	800b23c <_sbrk_r>
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	4283      	cmp	r3, r0
 8009636:	d148      	bne.n	80096ca <_malloc_r+0xea>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	0028      	movs	r0, r5
 800963c:	1aff      	subs	r7, r7, r3
 800963e:	0039      	movs	r1, r7
 8009640:	f7ff ffac 	bl	800959c <sbrk_aligned>
 8009644:	3001      	adds	r0, #1
 8009646:	d040      	beq.n	80096ca <_malloc_r+0xea>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	19db      	adds	r3, r3, r7
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	6833      	ldr	r3, [r6, #0]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	2a00      	cmp	r2, #0
 8009654:	d133      	bne.n	80096be <_malloc_r+0xde>
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	e019      	b.n	8009690 <_malloc_r+0xb0>
 800965c:	2b00      	cmp	r3, #0
 800965e:	dac9      	bge.n	80095f4 <_malloc_r+0x14>
 8009660:	230c      	movs	r3, #12
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	2000      	movs	r0, #0
 8009666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009668:	6821      	ldr	r1, [r4, #0]
 800966a:	1bc9      	subs	r1, r1, r7
 800966c:	d420      	bmi.n	80096b0 <_malloc_r+0xd0>
 800966e:	290b      	cmp	r1, #11
 8009670:	d90a      	bls.n	8009688 <_malloc_r+0xa8>
 8009672:	19e2      	adds	r2, r4, r7
 8009674:	6027      	str	r7, [r4, #0]
 8009676:	42a3      	cmp	r3, r4
 8009678:	d104      	bne.n	8009684 <_malloc_r+0xa4>
 800967a:	6032      	str	r2, [r6, #0]
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	6011      	str	r1, [r2, #0]
 8009680:	6053      	str	r3, [r2, #4]
 8009682:	e005      	b.n	8009690 <_malloc_r+0xb0>
 8009684:	605a      	str	r2, [r3, #4]
 8009686:	e7f9      	b.n	800967c <_malloc_r+0x9c>
 8009688:	6862      	ldr	r2, [r4, #4]
 800968a:	42a3      	cmp	r3, r4
 800968c:	d10e      	bne.n	80096ac <_malloc_r+0xcc>
 800968e:	6032      	str	r2, [r6, #0]
 8009690:	0028      	movs	r0, r5
 8009692:	f000 f82d 	bl	80096f0 <__malloc_unlock>
 8009696:	0020      	movs	r0, r4
 8009698:	2207      	movs	r2, #7
 800969a:	300b      	adds	r0, #11
 800969c:	1d23      	adds	r3, r4, #4
 800969e:	4390      	bics	r0, r2
 80096a0:	1ac2      	subs	r2, r0, r3
 80096a2:	4298      	cmp	r0, r3
 80096a4:	d0df      	beq.n	8009666 <_malloc_r+0x86>
 80096a6:	1a1b      	subs	r3, r3, r0
 80096a8:	50a3      	str	r3, [r4, r2]
 80096aa:	e7dc      	b.n	8009666 <_malloc_r+0x86>
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	e7ef      	b.n	8009690 <_malloc_r+0xb0>
 80096b0:	0023      	movs	r3, r4
 80096b2:	6864      	ldr	r4, [r4, #4]
 80096b4:	e7a6      	b.n	8009604 <_malloc_r+0x24>
 80096b6:	9c00      	ldr	r4, [sp, #0]
 80096b8:	6863      	ldr	r3, [r4, #4]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	e7ad      	b.n	800961a <_malloc_r+0x3a>
 80096be:	001a      	movs	r2, r3
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	d1fb      	bne.n	80096be <_malloc_r+0xde>
 80096c6:	2300      	movs	r3, #0
 80096c8:	e7da      	b.n	8009680 <_malloc_r+0xa0>
 80096ca:	230c      	movs	r3, #12
 80096cc:	0028      	movs	r0, r5
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f000 f80e 	bl	80096f0 <__malloc_unlock>
 80096d4:	e7c6      	b.n	8009664 <_malloc_r+0x84>
 80096d6:	6007      	str	r7, [r0, #0]
 80096d8:	e7da      	b.n	8009690 <_malloc_r+0xb0>
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	2000064c 	.word	0x2000064c

080096e0 <__malloc_lock>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	4802      	ldr	r0, [pc, #8]	@ (80096ec <__malloc_lock+0xc>)
 80096e4:	f7ff f873 	bl	80087ce <__retarget_lock_acquire_recursive>
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	46c0      	nop			@ (mov r8, r8)
 80096ec:	20000644 	.word	0x20000644

080096f0 <__malloc_unlock>:
 80096f0:	b510      	push	{r4, lr}
 80096f2:	4802      	ldr	r0, [pc, #8]	@ (80096fc <__malloc_unlock+0xc>)
 80096f4:	f7ff f86c 	bl	80087d0 <__retarget_lock_release_recursive>
 80096f8:	bd10      	pop	{r4, pc}
 80096fa:	46c0      	nop			@ (mov r8, r8)
 80096fc:	20000644 	.word	0x20000644

08009700 <_Balloc>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c5      	ldr	r5, [r0, #28]
 8009704:	0006      	movs	r6, r0
 8009706:	000c      	movs	r4, r1
 8009708:	2d00      	cmp	r5, #0
 800970a:	d10e      	bne.n	800972a <_Balloc+0x2a>
 800970c:	2010      	movs	r0, #16
 800970e:	f7ff ff3b 	bl	8009588 <malloc>
 8009712:	1e02      	subs	r2, r0, #0
 8009714:	61f0      	str	r0, [r6, #28]
 8009716:	d104      	bne.n	8009722 <_Balloc+0x22>
 8009718:	216b      	movs	r1, #107	@ 0x6b
 800971a:	4b19      	ldr	r3, [pc, #100]	@ (8009780 <_Balloc+0x80>)
 800971c:	4819      	ldr	r0, [pc, #100]	@ (8009784 <_Balloc+0x84>)
 800971e:	f001 fdaf 	bl	800b280 <__assert_func>
 8009722:	6045      	str	r5, [r0, #4]
 8009724:	6085      	str	r5, [r0, #8]
 8009726:	6005      	str	r5, [r0, #0]
 8009728:	60c5      	str	r5, [r0, #12]
 800972a:	69f5      	ldr	r5, [r6, #28]
 800972c:	68eb      	ldr	r3, [r5, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d013      	beq.n	800975a <_Balloc+0x5a>
 8009732:	69f3      	ldr	r3, [r6, #28]
 8009734:	00a2      	lsls	r2, r4, #2
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	189b      	adds	r3, r3, r2
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	2800      	cmp	r0, #0
 800973e:	d118      	bne.n	8009772 <_Balloc+0x72>
 8009740:	2101      	movs	r1, #1
 8009742:	000d      	movs	r5, r1
 8009744:	40a5      	lsls	r5, r4
 8009746:	1d6a      	adds	r2, r5, #5
 8009748:	0030      	movs	r0, r6
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	f001 fdb6 	bl	800b2bc <_calloc_r>
 8009750:	2800      	cmp	r0, #0
 8009752:	d00c      	beq.n	800976e <_Balloc+0x6e>
 8009754:	6044      	str	r4, [r0, #4]
 8009756:	6085      	str	r5, [r0, #8]
 8009758:	e00d      	b.n	8009776 <_Balloc+0x76>
 800975a:	2221      	movs	r2, #33	@ 0x21
 800975c:	2104      	movs	r1, #4
 800975e:	0030      	movs	r0, r6
 8009760:	f001 fdac 	bl	800b2bc <_calloc_r>
 8009764:	69f3      	ldr	r3, [r6, #28]
 8009766:	60e8      	str	r0, [r5, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e1      	bne.n	8009732 <_Balloc+0x32>
 800976e:	2000      	movs	r0, #0
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	6802      	ldr	r2, [r0, #0]
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	6103      	str	r3, [r0, #16]
 800977a:	60c3      	str	r3, [r0, #12]
 800977c:	e7f8      	b.n	8009770 <_Balloc+0x70>
 800977e:	46c0      	nop			@ (mov r8, r8)
 8009780:	0800c572 	.word	0x0800c572
 8009784:	0800c5f2 	.word	0x0800c5f2

08009788 <_Bfree>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	69c6      	ldr	r6, [r0, #28]
 800978c:	0005      	movs	r5, r0
 800978e:	000c      	movs	r4, r1
 8009790:	2e00      	cmp	r6, #0
 8009792:	d10e      	bne.n	80097b2 <_Bfree+0x2a>
 8009794:	2010      	movs	r0, #16
 8009796:	f7ff fef7 	bl	8009588 <malloc>
 800979a:	1e02      	subs	r2, r0, #0
 800979c:	61e8      	str	r0, [r5, #28]
 800979e:	d104      	bne.n	80097aa <_Bfree+0x22>
 80097a0:	218f      	movs	r1, #143	@ 0x8f
 80097a2:	4b09      	ldr	r3, [pc, #36]	@ (80097c8 <_Bfree+0x40>)
 80097a4:	4809      	ldr	r0, [pc, #36]	@ (80097cc <_Bfree+0x44>)
 80097a6:	f001 fd6b 	bl	800b280 <__assert_func>
 80097aa:	6046      	str	r6, [r0, #4]
 80097ac:	6086      	str	r6, [r0, #8]
 80097ae:	6006      	str	r6, [r0, #0]
 80097b0:	60c6      	str	r6, [r0, #12]
 80097b2:	2c00      	cmp	r4, #0
 80097b4:	d007      	beq.n	80097c6 <_Bfree+0x3e>
 80097b6:	69eb      	ldr	r3, [r5, #28]
 80097b8:	6862      	ldr	r2, [r4, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	0092      	lsls	r2, r2, #2
 80097be:	189b      	adds	r3, r3, r2
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	6022      	str	r2, [r4, #0]
 80097c4:	601c      	str	r4, [r3, #0]
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	0800c572 	.word	0x0800c572
 80097cc:	0800c5f2 	.word	0x0800c5f2

080097d0 <__multadd>:
 80097d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d2:	000f      	movs	r7, r1
 80097d4:	9001      	str	r0, [sp, #4]
 80097d6:	000c      	movs	r4, r1
 80097d8:	001e      	movs	r6, r3
 80097da:	2000      	movs	r0, #0
 80097dc:	690d      	ldr	r5, [r1, #16]
 80097de:	3714      	adds	r7, #20
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	3001      	adds	r0, #1
 80097e4:	b299      	uxth	r1, r3
 80097e6:	4351      	muls	r1, r2
 80097e8:	0c1b      	lsrs	r3, r3, #16
 80097ea:	4353      	muls	r3, r2
 80097ec:	1989      	adds	r1, r1, r6
 80097ee:	0c0e      	lsrs	r6, r1, #16
 80097f0:	199b      	adds	r3, r3, r6
 80097f2:	0c1e      	lsrs	r6, r3, #16
 80097f4:	b289      	uxth	r1, r1
 80097f6:	041b      	lsls	r3, r3, #16
 80097f8:	185b      	adds	r3, r3, r1
 80097fa:	c708      	stmia	r7!, {r3}
 80097fc:	4285      	cmp	r5, r0
 80097fe:	dcef      	bgt.n	80097e0 <__multadd+0x10>
 8009800:	2e00      	cmp	r6, #0
 8009802:	d022      	beq.n	800984a <__multadd+0x7a>
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	42ab      	cmp	r3, r5
 8009808:	dc19      	bgt.n	800983e <__multadd+0x6e>
 800980a:	6861      	ldr	r1, [r4, #4]
 800980c:	9801      	ldr	r0, [sp, #4]
 800980e:	3101      	adds	r1, #1
 8009810:	f7ff ff76 	bl	8009700 <_Balloc>
 8009814:	1e07      	subs	r7, r0, #0
 8009816:	d105      	bne.n	8009824 <__multadd+0x54>
 8009818:	003a      	movs	r2, r7
 800981a:	21ba      	movs	r1, #186	@ 0xba
 800981c:	4b0c      	ldr	r3, [pc, #48]	@ (8009850 <__multadd+0x80>)
 800981e:	480d      	ldr	r0, [pc, #52]	@ (8009854 <__multadd+0x84>)
 8009820:	f001 fd2e 	bl	800b280 <__assert_func>
 8009824:	0021      	movs	r1, r4
 8009826:	6922      	ldr	r2, [r4, #16]
 8009828:	310c      	adds	r1, #12
 800982a:	3202      	adds	r2, #2
 800982c:	0092      	lsls	r2, r2, #2
 800982e:	300c      	adds	r0, #12
 8009830:	f001 fd16 	bl	800b260 <memcpy>
 8009834:	0021      	movs	r1, r4
 8009836:	9801      	ldr	r0, [sp, #4]
 8009838:	f7ff ffa6 	bl	8009788 <_Bfree>
 800983c:	003c      	movs	r4, r7
 800983e:	1d2b      	adds	r3, r5, #4
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	18e3      	adds	r3, r4, r3
 8009844:	3501      	adds	r5, #1
 8009846:	605e      	str	r6, [r3, #4]
 8009848:	6125      	str	r5, [r4, #16]
 800984a:	0020      	movs	r0, r4
 800984c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	0800c5e1 	.word	0x0800c5e1
 8009854:	0800c5f2 	.word	0x0800c5f2

08009858 <__s2b>:
 8009858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985a:	0007      	movs	r7, r0
 800985c:	0018      	movs	r0, r3
 800985e:	000c      	movs	r4, r1
 8009860:	3008      	adds	r0, #8
 8009862:	2109      	movs	r1, #9
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	0015      	movs	r5, r2
 8009868:	f7f6 fcf4 	bl	8000254 <__divsi3>
 800986c:	2301      	movs	r3, #1
 800986e:	2100      	movs	r1, #0
 8009870:	4283      	cmp	r3, r0
 8009872:	db0a      	blt.n	800988a <__s2b+0x32>
 8009874:	0038      	movs	r0, r7
 8009876:	f7ff ff43 	bl	8009700 <_Balloc>
 800987a:	1e01      	subs	r1, r0, #0
 800987c:	d108      	bne.n	8009890 <__s2b+0x38>
 800987e:	000a      	movs	r2, r1
 8009880:	4b19      	ldr	r3, [pc, #100]	@ (80098e8 <__s2b+0x90>)
 8009882:	481a      	ldr	r0, [pc, #104]	@ (80098ec <__s2b+0x94>)
 8009884:	31d3      	adds	r1, #211	@ 0xd3
 8009886:	f001 fcfb 	bl	800b280 <__assert_func>
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	3101      	adds	r1, #1
 800988e:	e7ef      	b.n	8009870 <__s2b+0x18>
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	6143      	str	r3, [r0, #20]
 8009894:	2301      	movs	r3, #1
 8009896:	6103      	str	r3, [r0, #16]
 8009898:	2d09      	cmp	r5, #9
 800989a:	dd18      	ble.n	80098ce <__s2b+0x76>
 800989c:	0023      	movs	r3, r4
 800989e:	3309      	adds	r3, #9
 80098a0:	001e      	movs	r6, r3
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	1964      	adds	r4, r4, r5
 80098a6:	7833      	ldrb	r3, [r6, #0]
 80098a8:	220a      	movs	r2, #10
 80098aa:	0038      	movs	r0, r7
 80098ac:	3b30      	subs	r3, #48	@ 0x30
 80098ae:	f7ff ff8f 	bl	80097d0 <__multadd>
 80098b2:	3601      	adds	r6, #1
 80098b4:	0001      	movs	r1, r0
 80098b6:	42a6      	cmp	r6, r4
 80098b8:	d1f5      	bne.n	80098a6 <__s2b+0x4e>
 80098ba:	002c      	movs	r4, r5
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	3c08      	subs	r4, #8
 80098c0:	191c      	adds	r4, r3, r4
 80098c2:	002e      	movs	r6, r5
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	429e      	cmp	r6, r3
 80098c8:	db04      	blt.n	80098d4 <__s2b+0x7c>
 80098ca:	0008      	movs	r0, r1
 80098cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ce:	2509      	movs	r5, #9
 80098d0:	340a      	adds	r4, #10
 80098d2:	e7f6      	b.n	80098c2 <__s2b+0x6a>
 80098d4:	1b63      	subs	r3, r4, r5
 80098d6:	5d9b      	ldrb	r3, [r3, r6]
 80098d8:	220a      	movs	r2, #10
 80098da:	0038      	movs	r0, r7
 80098dc:	3b30      	subs	r3, #48	@ 0x30
 80098de:	f7ff ff77 	bl	80097d0 <__multadd>
 80098e2:	3601      	adds	r6, #1
 80098e4:	0001      	movs	r1, r0
 80098e6:	e7ed      	b.n	80098c4 <__s2b+0x6c>
 80098e8:	0800c5e1 	.word	0x0800c5e1
 80098ec:	0800c5f2 	.word	0x0800c5f2

080098f0 <__hi0bits>:
 80098f0:	2280      	movs	r2, #128	@ 0x80
 80098f2:	0003      	movs	r3, r0
 80098f4:	0252      	lsls	r2, r2, #9
 80098f6:	2000      	movs	r0, #0
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d201      	bcs.n	8009900 <__hi0bits+0x10>
 80098fc:	041b      	lsls	r3, r3, #16
 80098fe:	3010      	adds	r0, #16
 8009900:	2280      	movs	r2, #128	@ 0x80
 8009902:	0452      	lsls	r2, r2, #17
 8009904:	4293      	cmp	r3, r2
 8009906:	d201      	bcs.n	800990c <__hi0bits+0x1c>
 8009908:	3008      	adds	r0, #8
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	2280      	movs	r2, #128	@ 0x80
 800990e:	0552      	lsls	r2, r2, #21
 8009910:	4293      	cmp	r3, r2
 8009912:	d201      	bcs.n	8009918 <__hi0bits+0x28>
 8009914:	3004      	adds	r0, #4
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	2280      	movs	r2, #128	@ 0x80
 800991a:	05d2      	lsls	r2, r2, #23
 800991c:	4293      	cmp	r3, r2
 800991e:	d201      	bcs.n	8009924 <__hi0bits+0x34>
 8009920:	3002      	adds	r0, #2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	db03      	blt.n	8009930 <__hi0bits+0x40>
 8009928:	3001      	adds	r0, #1
 800992a:	4213      	tst	r3, r2
 800992c:	d100      	bne.n	8009930 <__hi0bits+0x40>
 800992e:	2020      	movs	r0, #32
 8009930:	4770      	bx	lr

08009932 <__lo0bits>:
 8009932:	6803      	ldr	r3, [r0, #0]
 8009934:	0001      	movs	r1, r0
 8009936:	2207      	movs	r2, #7
 8009938:	0018      	movs	r0, r3
 800993a:	4010      	ands	r0, r2
 800993c:	4213      	tst	r3, r2
 800993e:	d00d      	beq.n	800995c <__lo0bits+0x2a>
 8009940:	3a06      	subs	r2, #6
 8009942:	2000      	movs	r0, #0
 8009944:	4213      	tst	r3, r2
 8009946:	d105      	bne.n	8009954 <__lo0bits+0x22>
 8009948:	3002      	adds	r0, #2
 800994a:	4203      	tst	r3, r0
 800994c:	d003      	beq.n	8009956 <__lo0bits+0x24>
 800994e:	40d3      	lsrs	r3, r2
 8009950:	0010      	movs	r0, r2
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	4770      	bx	lr
 8009956:	089b      	lsrs	r3, r3, #2
 8009958:	600b      	str	r3, [r1, #0]
 800995a:	e7fb      	b.n	8009954 <__lo0bits+0x22>
 800995c:	b29a      	uxth	r2, r3
 800995e:	2a00      	cmp	r2, #0
 8009960:	d101      	bne.n	8009966 <__lo0bits+0x34>
 8009962:	2010      	movs	r0, #16
 8009964:	0c1b      	lsrs	r3, r3, #16
 8009966:	b2da      	uxtb	r2, r3
 8009968:	2a00      	cmp	r2, #0
 800996a:	d101      	bne.n	8009970 <__lo0bits+0x3e>
 800996c:	3008      	adds	r0, #8
 800996e:	0a1b      	lsrs	r3, r3, #8
 8009970:	071a      	lsls	r2, r3, #28
 8009972:	d101      	bne.n	8009978 <__lo0bits+0x46>
 8009974:	3004      	adds	r0, #4
 8009976:	091b      	lsrs	r3, r3, #4
 8009978:	079a      	lsls	r2, r3, #30
 800997a:	d101      	bne.n	8009980 <__lo0bits+0x4e>
 800997c:	3002      	adds	r0, #2
 800997e:	089b      	lsrs	r3, r3, #2
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	d4e9      	bmi.n	8009958 <__lo0bits+0x26>
 8009984:	3001      	adds	r0, #1
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	d1e6      	bne.n	8009958 <__lo0bits+0x26>
 800998a:	2020      	movs	r0, #32
 800998c:	e7e2      	b.n	8009954 <__lo0bits+0x22>
	...

08009990 <__i2b>:
 8009990:	b510      	push	{r4, lr}
 8009992:	000c      	movs	r4, r1
 8009994:	2101      	movs	r1, #1
 8009996:	f7ff feb3 	bl	8009700 <_Balloc>
 800999a:	2800      	cmp	r0, #0
 800999c:	d107      	bne.n	80099ae <__i2b+0x1e>
 800999e:	2146      	movs	r1, #70	@ 0x46
 80099a0:	4c05      	ldr	r4, [pc, #20]	@ (80099b8 <__i2b+0x28>)
 80099a2:	0002      	movs	r2, r0
 80099a4:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <__i2b+0x2c>)
 80099a6:	0020      	movs	r0, r4
 80099a8:	31ff      	adds	r1, #255	@ 0xff
 80099aa:	f001 fc69 	bl	800b280 <__assert_func>
 80099ae:	2301      	movs	r3, #1
 80099b0:	6144      	str	r4, [r0, #20]
 80099b2:	6103      	str	r3, [r0, #16]
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	46c0      	nop			@ (mov r8, r8)
 80099b8:	0800c5f2 	.word	0x0800c5f2
 80099bc:	0800c5e1 	.word	0x0800c5e1

080099c0 <__multiply>:
 80099c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c2:	0014      	movs	r4, r2
 80099c4:	690a      	ldr	r2, [r1, #16]
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	000d      	movs	r5, r1
 80099ca:	b08b      	sub	sp, #44	@ 0x2c
 80099cc:	429a      	cmp	r2, r3
 80099ce:	db02      	blt.n	80099d6 <__multiply+0x16>
 80099d0:	0023      	movs	r3, r4
 80099d2:	000c      	movs	r4, r1
 80099d4:	001d      	movs	r5, r3
 80099d6:	6927      	ldr	r7, [r4, #16]
 80099d8:	692e      	ldr	r6, [r5, #16]
 80099da:	6861      	ldr	r1, [r4, #4]
 80099dc:	19bb      	adds	r3, r7, r6
 80099de:	9303      	str	r3, [sp, #12]
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	19ba      	adds	r2, r7, r6
 80099e4:	4293      	cmp	r3, r2
 80099e6:	da00      	bge.n	80099ea <__multiply+0x2a>
 80099e8:	3101      	adds	r1, #1
 80099ea:	f7ff fe89 	bl	8009700 <_Balloc>
 80099ee:	9002      	str	r0, [sp, #8]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d106      	bne.n	8009a02 <__multiply+0x42>
 80099f4:	21b1      	movs	r1, #177	@ 0xb1
 80099f6:	4b49      	ldr	r3, [pc, #292]	@ (8009b1c <__multiply+0x15c>)
 80099f8:	4849      	ldr	r0, [pc, #292]	@ (8009b20 <__multiply+0x160>)
 80099fa:	9a02      	ldr	r2, [sp, #8]
 80099fc:	0049      	lsls	r1, r1, #1
 80099fe:	f001 fc3f 	bl	800b280 <__assert_func>
 8009a02:	9b02      	ldr	r3, [sp, #8]
 8009a04:	2200      	movs	r2, #0
 8009a06:	3314      	adds	r3, #20
 8009a08:	469c      	mov	ip, r3
 8009a0a:	19bb      	adds	r3, r7, r6
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4463      	add	r3, ip
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	4663      	mov	r3, ip
 8009a14:	9904      	ldr	r1, [sp, #16]
 8009a16:	428b      	cmp	r3, r1
 8009a18:	d32a      	bcc.n	8009a70 <__multiply+0xb0>
 8009a1a:	0023      	movs	r3, r4
 8009a1c:	00bf      	lsls	r7, r7, #2
 8009a1e:	3314      	adds	r3, #20
 8009a20:	3514      	adds	r5, #20
 8009a22:	9308      	str	r3, [sp, #32]
 8009a24:	00b6      	lsls	r6, r6, #2
 8009a26:	19db      	adds	r3, r3, r7
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	19ab      	adds	r3, r5, r6
 8009a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2e:	2304      	movs	r3, #4
 8009a30:	9306      	str	r3, [sp, #24]
 8009a32:	0023      	movs	r3, r4
 8009a34:	9a05      	ldr	r2, [sp, #20]
 8009a36:	3315      	adds	r3, #21
 8009a38:	9501      	str	r5, [sp, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d305      	bcc.n	8009a4a <__multiply+0x8a>
 8009a3e:	1b13      	subs	r3, r2, r4
 8009a40:	3b15      	subs	r3, #21
 8009a42:	089b      	lsrs	r3, r3, #2
 8009a44:	3301      	adds	r3, #1
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	9306      	str	r3, [sp, #24]
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d310      	bcc.n	8009a74 <__multiply+0xb4>
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd05      	ble.n	8009a64 <__multiply+0xa4>
 8009a58:	9b04      	ldr	r3, [sp, #16]
 8009a5a:	3b04      	subs	r3, #4
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d056      	beq.n	8009b12 <__multiply+0x152>
 8009a64:	9b02      	ldr	r3, [sp, #8]
 8009a66:	9a03      	ldr	r2, [sp, #12]
 8009a68:	0018      	movs	r0, r3
 8009a6a:	611a      	str	r2, [r3, #16]
 8009a6c:	b00b      	add	sp, #44	@ 0x2c
 8009a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a70:	c304      	stmia	r3!, {r2}
 8009a72:	e7cf      	b.n	8009a14 <__multiply+0x54>
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	b280      	uxth	r0, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d01e      	beq.n	8009abc <__multiply+0xfc>
 8009a7e:	4667      	mov	r7, ip
 8009a80:	2500      	movs	r5, #0
 8009a82:	9e08      	ldr	r6, [sp, #32]
 8009a84:	ce02      	ldmia	r6!, {r1}
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	b28b      	uxth	r3, r1
 8009a8c:	4343      	muls	r3, r0
 8009a8e:	001a      	movs	r2, r3
 8009a90:	466b      	mov	r3, sp
 8009a92:	0c09      	lsrs	r1, r1, #16
 8009a94:	8b9b      	ldrh	r3, [r3, #28]
 8009a96:	4341      	muls	r1, r0
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	9a07      	ldr	r2, [sp, #28]
 8009a9c:	195b      	adds	r3, r3, r5
 8009a9e:	0c12      	lsrs	r2, r2, #16
 8009aa0:	1889      	adds	r1, r1, r2
 8009aa2:	0c1a      	lsrs	r2, r3, #16
 8009aa4:	188a      	adds	r2, r1, r2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	0c15      	lsrs	r5, r2, #16
 8009aaa:	0412      	lsls	r2, r2, #16
 8009aac:	431a      	orrs	r2, r3
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	c704      	stmia	r7!, {r2}
 8009ab2:	42b3      	cmp	r3, r6
 8009ab4:	d8e6      	bhi.n	8009a84 <__multiply+0xc4>
 8009ab6:	4663      	mov	r3, ip
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	509d      	str	r5, [r3, r2]
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	0c00      	lsrs	r0, r0, #16
 8009ac2:	d020      	beq.n	8009b06 <__multiply+0x146>
 8009ac4:	4663      	mov	r3, ip
 8009ac6:	0025      	movs	r5, r4
 8009ac8:	4661      	mov	r1, ip
 8009aca:	2700      	movs	r7, #0
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3514      	adds	r5, #20
 8009ad0:	682a      	ldr	r2, [r5, #0]
 8009ad2:	680e      	ldr	r6, [r1, #0]
 8009ad4:	b292      	uxth	r2, r2
 8009ad6:	4342      	muls	r2, r0
 8009ad8:	0c36      	lsrs	r6, r6, #16
 8009ada:	1992      	adds	r2, r2, r6
 8009adc:	19d2      	adds	r2, r2, r7
 8009ade:	0416      	lsls	r6, r2, #16
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	431e      	orrs	r6, r3
 8009ae4:	600e      	str	r6, [r1, #0]
 8009ae6:	cd40      	ldmia	r5!, {r6}
 8009ae8:	684b      	ldr	r3, [r1, #4]
 8009aea:	0c36      	lsrs	r6, r6, #16
 8009aec:	4346      	muls	r6, r0
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	0c12      	lsrs	r2, r2, #16
 8009af2:	18f3      	adds	r3, r6, r3
 8009af4:	189b      	adds	r3, r3, r2
 8009af6:	9a05      	ldr	r2, [sp, #20]
 8009af8:	0c1f      	lsrs	r7, r3, #16
 8009afa:	3104      	adds	r1, #4
 8009afc:	42aa      	cmp	r2, r5
 8009afe:	d8e7      	bhi.n	8009ad0 <__multiply+0x110>
 8009b00:	4662      	mov	r2, ip
 8009b02:	9906      	ldr	r1, [sp, #24]
 8009b04:	5053      	str	r3, [r2, r1]
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	449c      	add	ip, r3
 8009b10:	e79b      	b.n	8009a4a <__multiply+0x8a>
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	e79b      	b.n	8009a52 <__multiply+0x92>
 8009b1a:	46c0      	nop			@ (mov r8, r8)
 8009b1c:	0800c5e1 	.word	0x0800c5e1
 8009b20:	0800c5f2 	.word	0x0800c5f2

08009b24 <__pow5mult>:
 8009b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b26:	2303      	movs	r3, #3
 8009b28:	0015      	movs	r5, r2
 8009b2a:	0007      	movs	r7, r0
 8009b2c:	000e      	movs	r6, r1
 8009b2e:	401a      	ands	r2, r3
 8009b30:	421d      	tst	r5, r3
 8009b32:	d008      	beq.n	8009b46 <__pow5mult+0x22>
 8009b34:	4925      	ldr	r1, [pc, #148]	@ (8009bcc <__pow5mult+0xa8>)
 8009b36:	3a01      	subs	r2, #1
 8009b38:	0092      	lsls	r2, r2, #2
 8009b3a:	5852      	ldr	r2, [r2, r1]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	0031      	movs	r1, r6
 8009b40:	f7ff fe46 	bl	80097d0 <__multadd>
 8009b44:	0006      	movs	r6, r0
 8009b46:	10ad      	asrs	r5, r5, #2
 8009b48:	d03d      	beq.n	8009bc6 <__pow5mult+0xa2>
 8009b4a:	69fc      	ldr	r4, [r7, #28]
 8009b4c:	2c00      	cmp	r4, #0
 8009b4e:	d10f      	bne.n	8009b70 <__pow5mult+0x4c>
 8009b50:	2010      	movs	r0, #16
 8009b52:	f7ff fd19 	bl	8009588 <malloc>
 8009b56:	1e02      	subs	r2, r0, #0
 8009b58:	61f8      	str	r0, [r7, #28]
 8009b5a:	d105      	bne.n	8009b68 <__pow5mult+0x44>
 8009b5c:	21b4      	movs	r1, #180	@ 0xb4
 8009b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bd0 <__pow5mult+0xac>)
 8009b60:	481c      	ldr	r0, [pc, #112]	@ (8009bd4 <__pow5mult+0xb0>)
 8009b62:	31ff      	adds	r1, #255	@ 0xff
 8009b64:	f001 fb8c 	bl	800b280 <__assert_func>
 8009b68:	6044      	str	r4, [r0, #4]
 8009b6a:	6084      	str	r4, [r0, #8]
 8009b6c:	6004      	str	r4, [r0, #0]
 8009b6e:	60c4      	str	r4, [r0, #12]
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	689c      	ldr	r4, [r3, #8]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	d108      	bne.n	8009b8c <__pow5mult+0x68>
 8009b7a:	0038      	movs	r0, r7
 8009b7c:	4916      	ldr	r1, [pc, #88]	@ (8009bd8 <__pow5mult+0xb4>)
 8009b7e:	f7ff ff07 	bl	8009990 <__i2b>
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	0004      	movs	r4, r0
 8009b86:	6098      	str	r0, [r3, #8]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6003      	str	r3, [r0, #0]
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	421d      	tst	r5, r3
 8009b90:	d00a      	beq.n	8009ba8 <__pow5mult+0x84>
 8009b92:	0031      	movs	r1, r6
 8009b94:	0022      	movs	r2, r4
 8009b96:	0038      	movs	r0, r7
 8009b98:	f7ff ff12 	bl	80099c0 <__multiply>
 8009b9c:	0031      	movs	r1, r6
 8009b9e:	9001      	str	r0, [sp, #4]
 8009ba0:	0038      	movs	r0, r7
 8009ba2:	f7ff fdf1 	bl	8009788 <_Bfree>
 8009ba6:	9e01      	ldr	r6, [sp, #4]
 8009ba8:	106d      	asrs	r5, r5, #1
 8009baa:	d00c      	beq.n	8009bc6 <__pow5mult+0xa2>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d107      	bne.n	8009bc2 <__pow5mult+0x9e>
 8009bb2:	0022      	movs	r2, r4
 8009bb4:	0021      	movs	r1, r4
 8009bb6:	0038      	movs	r0, r7
 8009bb8:	f7ff ff02 	bl	80099c0 <__multiply>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	0004      	movs	r4, r0
 8009bc4:	e7e2      	b.n	8009b8c <__pow5mult+0x68>
 8009bc6:	0030      	movs	r0, r6
 8009bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	0800c64c 	.word	0x0800c64c
 8009bd0:	0800c572 	.word	0x0800c572
 8009bd4:	0800c5f2 	.word	0x0800c5f2
 8009bd8:	00000271 	.word	0x00000271

08009bdc <__lshift>:
 8009bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bde:	000c      	movs	r4, r1
 8009be0:	0016      	movs	r6, r2
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	1157      	asrs	r7, r2, #5
 8009be6:	b085      	sub	sp, #20
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	3301      	adds	r3, #1
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	6849      	ldr	r1, [r1, #4]
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	9002      	str	r0, [sp, #8]
 8009bf6:	9a00      	ldr	r2, [sp, #0]
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	db10      	blt.n	8009c1e <__lshift+0x42>
 8009bfc:	9802      	ldr	r0, [sp, #8]
 8009bfe:	f7ff fd7f 	bl	8009700 <_Balloc>
 8009c02:	2300      	movs	r3, #0
 8009c04:	0001      	movs	r1, r0
 8009c06:	0005      	movs	r5, r0
 8009c08:	001a      	movs	r2, r3
 8009c0a:	3114      	adds	r1, #20
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	d10c      	bne.n	8009c2a <__lshift+0x4e>
 8009c10:	21ef      	movs	r1, #239	@ 0xef
 8009c12:	002a      	movs	r2, r5
 8009c14:	4b25      	ldr	r3, [pc, #148]	@ (8009cac <__lshift+0xd0>)
 8009c16:	4826      	ldr	r0, [pc, #152]	@ (8009cb0 <__lshift+0xd4>)
 8009c18:	0049      	lsls	r1, r1, #1
 8009c1a:	f001 fb31 	bl	800b280 <__assert_func>
 8009c1e:	3101      	adds	r1, #1
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	e7e8      	b.n	8009bf6 <__lshift+0x1a>
 8009c24:	0098      	lsls	r0, r3, #2
 8009c26:	500a      	str	r2, [r1, r0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	42bb      	cmp	r3, r7
 8009c2c:	dbfa      	blt.n	8009c24 <__lshift+0x48>
 8009c2e:	43fb      	mvns	r3, r7
 8009c30:	17db      	asrs	r3, r3, #31
 8009c32:	401f      	ands	r7, r3
 8009c34:	00bf      	lsls	r7, r7, #2
 8009c36:	0023      	movs	r3, r4
 8009c38:	201f      	movs	r0, #31
 8009c3a:	19c9      	adds	r1, r1, r7
 8009c3c:	0037      	movs	r7, r6
 8009c3e:	6922      	ldr	r2, [r4, #16]
 8009c40:	3314      	adds	r3, #20
 8009c42:	0092      	lsls	r2, r2, #2
 8009c44:	189a      	adds	r2, r3, r2
 8009c46:	4007      	ands	r7, r0
 8009c48:	4206      	tst	r6, r0
 8009c4a:	d029      	beq.n	8009ca0 <__lshift+0xc4>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	1bc0      	subs	r0, r0, r7
 8009c50:	9003      	str	r0, [sp, #12]
 8009c52:	468c      	mov	ip, r1
 8009c54:	2000      	movs	r0, #0
 8009c56:	681e      	ldr	r6, [r3, #0]
 8009c58:	40be      	lsls	r6, r7
 8009c5a:	4306      	orrs	r6, r0
 8009c5c:	4660      	mov	r0, ip
 8009c5e:	c040      	stmia	r0!, {r6}
 8009c60:	4684      	mov	ip, r0
 8009c62:	9e03      	ldr	r6, [sp, #12]
 8009c64:	cb01      	ldmia	r3!, {r0}
 8009c66:	40f0      	lsrs	r0, r6
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d8f4      	bhi.n	8009c56 <__lshift+0x7a>
 8009c6c:	0026      	movs	r6, r4
 8009c6e:	3615      	adds	r6, #21
 8009c70:	2304      	movs	r3, #4
 8009c72:	42b2      	cmp	r2, r6
 8009c74:	d304      	bcc.n	8009c80 <__lshift+0xa4>
 8009c76:	1b13      	subs	r3, r2, r4
 8009c78:	3b15      	subs	r3, #21
 8009c7a:	089b      	lsrs	r3, r3, #2
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	50c8      	str	r0, [r1, r3]
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d002      	beq.n	8009c8c <__lshift+0xb0>
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	3302      	adds	r3, #2
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	9802      	ldr	r0, [sp, #8]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	0021      	movs	r1, r4
 8009c94:	612b      	str	r3, [r5, #16]
 8009c96:	f7ff fd77 	bl	8009788 <_Bfree>
 8009c9a:	0028      	movs	r0, r5
 8009c9c:	b005      	add	sp, #20
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca0:	cb01      	ldmia	r3!, {r0}
 8009ca2:	c101      	stmia	r1!, {r0}
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d8fb      	bhi.n	8009ca0 <__lshift+0xc4>
 8009ca8:	e7f0      	b.n	8009c8c <__lshift+0xb0>
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	0800c5e1 	.word	0x0800c5e1
 8009cb0:	0800c5f2 	.word	0x0800c5f2

08009cb4 <__mcmp>:
 8009cb4:	b530      	push	{r4, r5, lr}
 8009cb6:	690b      	ldr	r3, [r1, #16]
 8009cb8:	6904      	ldr	r4, [r0, #16]
 8009cba:	0002      	movs	r2, r0
 8009cbc:	1ae0      	subs	r0, r4, r3
 8009cbe:	429c      	cmp	r4, r3
 8009cc0:	d10f      	bne.n	8009ce2 <__mcmp+0x2e>
 8009cc2:	3214      	adds	r2, #20
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	3114      	adds	r1, #20
 8009cc8:	0014      	movs	r4, r2
 8009cca:	18c9      	adds	r1, r1, r3
 8009ccc:	18d2      	adds	r2, r2, r3
 8009cce:	3a04      	subs	r2, #4
 8009cd0:	3904      	subs	r1, #4
 8009cd2:	6815      	ldr	r5, [r2, #0]
 8009cd4:	680b      	ldr	r3, [r1, #0]
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	d004      	beq.n	8009ce4 <__mcmp+0x30>
 8009cda:	2001      	movs	r0, #1
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	d200      	bcs.n	8009ce2 <__mcmp+0x2e>
 8009ce0:	3802      	subs	r0, #2
 8009ce2:	bd30      	pop	{r4, r5, pc}
 8009ce4:	4294      	cmp	r4, r2
 8009ce6:	d3f2      	bcc.n	8009cce <__mcmp+0x1a>
 8009ce8:	e7fb      	b.n	8009ce2 <__mcmp+0x2e>
	...

08009cec <__mdiff>:
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	000c      	movs	r4, r1
 8009cf0:	b087      	sub	sp, #28
 8009cf2:	9000      	str	r0, [sp, #0]
 8009cf4:	0011      	movs	r1, r2
 8009cf6:	0020      	movs	r0, r4
 8009cf8:	0017      	movs	r7, r2
 8009cfa:	f7ff ffdb 	bl	8009cb4 <__mcmp>
 8009cfe:	1e05      	subs	r5, r0, #0
 8009d00:	d110      	bne.n	8009d24 <__mdiff+0x38>
 8009d02:	0001      	movs	r1, r0
 8009d04:	9800      	ldr	r0, [sp, #0]
 8009d06:	f7ff fcfb 	bl	8009700 <_Balloc>
 8009d0a:	1e02      	subs	r2, r0, #0
 8009d0c:	d104      	bne.n	8009d18 <__mdiff+0x2c>
 8009d0e:	4b40      	ldr	r3, [pc, #256]	@ (8009e10 <__mdiff+0x124>)
 8009d10:	4840      	ldr	r0, [pc, #256]	@ (8009e14 <__mdiff+0x128>)
 8009d12:	4941      	ldr	r1, [pc, #260]	@ (8009e18 <__mdiff+0x12c>)
 8009d14:	f001 fab4 	bl	800b280 <__assert_func>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	6145      	str	r5, [r0, #20]
 8009d1c:	6103      	str	r3, [r0, #16]
 8009d1e:	0010      	movs	r0, r2
 8009d20:	b007      	add	sp, #28
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d24:	2600      	movs	r6, #0
 8009d26:	42b0      	cmp	r0, r6
 8009d28:	da03      	bge.n	8009d32 <__mdiff+0x46>
 8009d2a:	0023      	movs	r3, r4
 8009d2c:	003c      	movs	r4, r7
 8009d2e:	001f      	movs	r7, r3
 8009d30:	3601      	adds	r6, #1
 8009d32:	6861      	ldr	r1, [r4, #4]
 8009d34:	9800      	ldr	r0, [sp, #0]
 8009d36:	f7ff fce3 	bl	8009700 <_Balloc>
 8009d3a:	1e02      	subs	r2, r0, #0
 8009d3c:	d103      	bne.n	8009d46 <__mdiff+0x5a>
 8009d3e:	4b34      	ldr	r3, [pc, #208]	@ (8009e10 <__mdiff+0x124>)
 8009d40:	4834      	ldr	r0, [pc, #208]	@ (8009e14 <__mdiff+0x128>)
 8009d42:	4936      	ldr	r1, [pc, #216]	@ (8009e1c <__mdiff+0x130>)
 8009d44:	e7e6      	b.n	8009d14 <__mdiff+0x28>
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	3414      	adds	r4, #20
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	18e3      	adds	r3, r4, r3
 8009d50:	0021      	movs	r1, r4
 8009d52:	9401      	str	r4, [sp, #4]
 8009d54:	003c      	movs	r4, r7
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3414      	adds	r4, #20
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	18e3      	adds	r3, r4, r3
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	0003      	movs	r3, r0
 8009d64:	60c6      	str	r6, [r0, #12]
 8009d66:	468c      	mov	ip, r1
 8009d68:	2000      	movs	r0, #0
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	4663      	mov	r3, ip
 8009d72:	cb20      	ldmia	r3!, {r5}
 8009d74:	b2a9      	uxth	r1, r5
 8009d76:	000e      	movs	r6, r1
 8009d78:	469c      	mov	ip, r3
 8009d7a:	cc08      	ldmia	r4!, {r3}
 8009d7c:	0c2d      	lsrs	r5, r5, #16
 8009d7e:	b299      	uxth	r1, r3
 8009d80:	1a71      	subs	r1, r6, r1
 8009d82:	1809      	adds	r1, r1, r0
 8009d84:	0c1b      	lsrs	r3, r3, #16
 8009d86:	1408      	asrs	r0, r1, #16
 8009d88:	1aeb      	subs	r3, r5, r3
 8009d8a:	181b      	adds	r3, r3, r0
 8009d8c:	1418      	asrs	r0, r3, #16
 8009d8e:	b289      	uxth	r1, r1
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	4319      	orrs	r1, r3
 8009d94:	9b05      	ldr	r3, [sp, #20]
 8009d96:	c302      	stmia	r3!, {r1}
 8009d98:	9305      	str	r3, [sp, #20]
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	d8e7      	bhi.n	8009d70 <__mdiff+0x84>
 8009da0:	0039      	movs	r1, r7
 8009da2:	9c03      	ldr	r4, [sp, #12]
 8009da4:	3115      	adds	r1, #21
 8009da6:	2304      	movs	r3, #4
 8009da8:	428c      	cmp	r4, r1
 8009daa:	d304      	bcc.n	8009db6 <__mdiff+0xca>
 8009dac:	1be3      	subs	r3, r4, r7
 8009dae:	3b15      	subs	r3, #21
 8009db0:	089b      	lsrs	r3, r3, #2
 8009db2:	3301      	adds	r3, #1
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	9901      	ldr	r1, [sp, #4]
 8009db8:	18cd      	adds	r5, r1, r3
 8009dba:	9904      	ldr	r1, [sp, #16]
 8009dbc:	002e      	movs	r6, r5
 8009dbe:	18cb      	adds	r3, r1, r3
 8009dc0:	001f      	movs	r7, r3
 8009dc2:	9902      	ldr	r1, [sp, #8]
 8009dc4:	428e      	cmp	r6, r1
 8009dc6:	d311      	bcc.n	8009dec <__mdiff+0x100>
 8009dc8:	9c02      	ldr	r4, [sp, #8]
 8009dca:	1ee9      	subs	r1, r5, #3
 8009dcc:	2000      	movs	r0, #0
 8009dce:	428c      	cmp	r4, r1
 8009dd0:	d304      	bcc.n	8009ddc <__mdiff+0xf0>
 8009dd2:	0021      	movs	r1, r4
 8009dd4:	3103      	adds	r1, #3
 8009dd6:	1b49      	subs	r1, r1, r5
 8009dd8:	0889      	lsrs	r1, r1, #2
 8009dda:	0088      	lsls	r0, r1, #2
 8009ddc:	181b      	adds	r3, r3, r0
 8009dde:	3b04      	subs	r3, #4
 8009de0:	6819      	ldr	r1, [r3, #0]
 8009de2:	2900      	cmp	r1, #0
 8009de4:	d010      	beq.n	8009e08 <__mdiff+0x11c>
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	6113      	str	r3, [r2, #16]
 8009dea:	e798      	b.n	8009d1e <__mdiff+0x32>
 8009dec:	4684      	mov	ip, r0
 8009dee:	ce02      	ldmia	r6!, {r1}
 8009df0:	b288      	uxth	r0, r1
 8009df2:	4460      	add	r0, ip
 8009df4:	1400      	asrs	r0, r0, #16
 8009df6:	0c0c      	lsrs	r4, r1, #16
 8009df8:	1904      	adds	r4, r0, r4
 8009dfa:	4461      	add	r1, ip
 8009dfc:	1420      	asrs	r0, r4, #16
 8009dfe:	b289      	uxth	r1, r1
 8009e00:	0424      	lsls	r4, r4, #16
 8009e02:	4321      	orrs	r1, r4
 8009e04:	c702      	stmia	r7!, {r1}
 8009e06:	e7dc      	b.n	8009dc2 <__mdiff+0xd6>
 8009e08:	9900      	ldr	r1, [sp, #0]
 8009e0a:	3901      	subs	r1, #1
 8009e0c:	9100      	str	r1, [sp, #0]
 8009e0e:	e7e6      	b.n	8009dde <__mdiff+0xf2>
 8009e10:	0800c5e1 	.word	0x0800c5e1
 8009e14:	0800c5f2 	.word	0x0800c5f2
 8009e18:	00000237 	.word	0x00000237
 8009e1c:	00000245 	.word	0x00000245

08009e20 <__ulp>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	2400      	movs	r4, #0
 8009e24:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <__ulp+0x38>)
 8009e26:	4a0d      	ldr	r2, [pc, #52]	@ (8009e5c <__ulp+0x3c>)
 8009e28:	400b      	ands	r3, r1
 8009e2a:	189b      	adds	r3, r3, r2
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	dc06      	bgt.n	8009e3e <__ulp+0x1e>
 8009e30:	425b      	negs	r3, r3
 8009e32:	151a      	asrs	r2, r3, #20
 8009e34:	2a13      	cmp	r2, #19
 8009e36:	dc05      	bgt.n	8009e44 <__ulp+0x24>
 8009e38:	2380      	movs	r3, #128	@ 0x80
 8009e3a:	031b      	lsls	r3, r3, #12
 8009e3c:	4113      	asrs	r3, r2
 8009e3e:	0019      	movs	r1, r3
 8009e40:	0020      	movs	r0, r4
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	3a14      	subs	r2, #20
 8009e46:	2401      	movs	r4, #1
 8009e48:	2a1e      	cmp	r2, #30
 8009e4a:	dc02      	bgt.n	8009e52 <__ulp+0x32>
 8009e4c:	2480      	movs	r4, #128	@ 0x80
 8009e4e:	0624      	lsls	r4, r4, #24
 8009e50:	40d4      	lsrs	r4, r2
 8009e52:	2300      	movs	r3, #0
 8009e54:	e7f3      	b.n	8009e3e <__ulp+0x1e>
 8009e56:	46c0      	nop			@ (mov r8, r8)
 8009e58:	7ff00000 	.word	0x7ff00000
 8009e5c:	fcc00000 	.word	0xfcc00000

08009e60 <__b2d>:
 8009e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e62:	0006      	movs	r6, r0
 8009e64:	6903      	ldr	r3, [r0, #16]
 8009e66:	3614      	adds	r6, #20
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	18f3      	adds	r3, r6, r3
 8009e6c:	1f1d      	subs	r5, r3, #4
 8009e6e:	682c      	ldr	r4, [r5, #0]
 8009e70:	000f      	movs	r7, r1
 8009e72:	0020      	movs	r0, r4
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	f7ff fd3b 	bl	80098f0 <__hi0bits>
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	1a12      	subs	r2, r2, r0
 8009e7e:	603a      	str	r2, [r7, #0]
 8009e80:	0003      	movs	r3, r0
 8009e82:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef4 <__b2d+0x94>)
 8009e84:	280a      	cmp	r0, #10
 8009e86:	dc15      	bgt.n	8009eb4 <__b2d+0x54>
 8009e88:	210b      	movs	r1, #11
 8009e8a:	0027      	movs	r7, r4
 8009e8c:	1a09      	subs	r1, r1, r0
 8009e8e:	40cf      	lsrs	r7, r1
 8009e90:	433a      	orrs	r2, r7
 8009e92:	468c      	mov	ip, r1
 8009e94:	0011      	movs	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	42ae      	cmp	r6, r5
 8009e9a:	d202      	bcs.n	8009ea2 <__b2d+0x42>
 8009e9c:	9a01      	ldr	r2, [sp, #4]
 8009e9e:	3a08      	subs	r2, #8
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	3315      	adds	r3, #21
 8009ea4:	409c      	lsls	r4, r3
 8009ea6:	4663      	mov	r3, ip
 8009ea8:	0027      	movs	r7, r4
 8009eaa:	40da      	lsrs	r2, r3
 8009eac:	4317      	orrs	r7, r2
 8009eae:	0038      	movs	r0, r7
 8009eb0:	b003      	add	sp, #12
 8009eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb4:	2700      	movs	r7, #0
 8009eb6:	42ae      	cmp	r6, r5
 8009eb8:	d202      	bcs.n	8009ec0 <__b2d+0x60>
 8009eba:	9d01      	ldr	r5, [sp, #4]
 8009ebc:	3d08      	subs	r5, #8
 8009ebe:	682f      	ldr	r7, [r5, #0]
 8009ec0:	210b      	movs	r1, #11
 8009ec2:	4249      	negs	r1, r1
 8009ec4:	468c      	mov	ip, r1
 8009ec6:	449c      	add	ip, r3
 8009ec8:	2b0b      	cmp	r3, #11
 8009eca:	d010      	beq.n	8009eee <__b2d+0x8e>
 8009ecc:	4661      	mov	r1, ip
 8009ece:	2320      	movs	r3, #32
 8009ed0:	408c      	lsls	r4, r1
 8009ed2:	1a5b      	subs	r3, r3, r1
 8009ed4:	0039      	movs	r1, r7
 8009ed6:	40d9      	lsrs	r1, r3
 8009ed8:	430c      	orrs	r4, r1
 8009eda:	4322      	orrs	r2, r4
 8009edc:	0011      	movs	r1, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	42b5      	cmp	r5, r6
 8009ee2:	d901      	bls.n	8009ee8 <__b2d+0x88>
 8009ee4:	3d04      	subs	r5, #4
 8009ee6:	682a      	ldr	r2, [r5, #0]
 8009ee8:	4664      	mov	r4, ip
 8009eea:	40a7      	lsls	r7, r4
 8009eec:	e7dd      	b.n	8009eaa <__b2d+0x4a>
 8009eee:	4322      	orrs	r2, r4
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	e7dc      	b.n	8009eae <__b2d+0x4e>
 8009ef4:	3ff00000 	.word	0x3ff00000

08009ef8 <__d2b>:
 8009ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009efa:	2101      	movs	r1, #1
 8009efc:	0016      	movs	r6, r2
 8009efe:	001f      	movs	r7, r3
 8009f00:	f7ff fbfe 	bl	8009700 <_Balloc>
 8009f04:	1e04      	subs	r4, r0, #0
 8009f06:	d105      	bne.n	8009f14 <__d2b+0x1c>
 8009f08:	0022      	movs	r2, r4
 8009f0a:	4b25      	ldr	r3, [pc, #148]	@ (8009fa0 <__d2b+0xa8>)
 8009f0c:	4825      	ldr	r0, [pc, #148]	@ (8009fa4 <__d2b+0xac>)
 8009f0e:	4926      	ldr	r1, [pc, #152]	@ (8009fa8 <__d2b+0xb0>)
 8009f10:	f001 f9b6 	bl	800b280 <__assert_func>
 8009f14:	033b      	lsls	r3, r7, #12
 8009f16:	007d      	lsls	r5, r7, #1
 8009f18:	0b1b      	lsrs	r3, r3, #12
 8009f1a:	0d6d      	lsrs	r5, r5, #21
 8009f1c:	d002      	beq.n	8009f24 <__d2b+0x2c>
 8009f1e:	2280      	movs	r2, #128	@ 0x80
 8009f20:	0352      	lsls	r2, r2, #13
 8009f22:	4313      	orrs	r3, r2
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	d025      	beq.n	8009f76 <__d2b+0x7e>
 8009f2a:	4668      	mov	r0, sp
 8009f2c:	9600      	str	r6, [sp, #0]
 8009f2e:	f7ff fd00 	bl	8009932 <__lo0bits>
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	9900      	ldr	r1, [sp, #0]
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d01b      	beq.n	8009f72 <__d2b+0x7a>
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	001e      	movs	r6, r3
 8009f3e:	1a12      	subs	r2, r2, r0
 8009f40:	4096      	lsls	r6, r2
 8009f42:	0032      	movs	r2, r6
 8009f44:	40c3      	lsrs	r3, r0
 8009f46:	430a      	orrs	r2, r1
 8009f48:	6162      	str	r2, [r4, #20]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	9e01      	ldr	r6, [sp, #4]
 8009f4e:	61a6      	str	r6, [r4, #24]
 8009f50:	1e73      	subs	r3, r6, #1
 8009f52:	419e      	sbcs	r6, r3
 8009f54:	3601      	adds	r6, #1
 8009f56:	6126      	str	r6, [r4, #16]
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	d014      	beq.n	8009f86 <__d2b+0x8e>
 8009f5c:	2635      	movs	r6, #53	@ 0x35
 8009f5e:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <__d2b+0xb4>)
 8009f60:	18ed      	adds	r5, r5, r3
 8009f62:	9b08      	ldr	r3, [sp, #32]
 8009f64:	182d      	adds	r5, r5, r0
 8009f66:	601d      	str	r5, [r3, #0]
 8009f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6a:	1a36      	subs	r6, r6, r0
 8009f6c:	601e      	str	r6, [r3, #0]
 8009f6e:	0020      	movs	r0, r4
 8009f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f72:	6161      	str	r1, [r4, #20]
 8009f74:	e7ea      	b.n	8009f4c <__d2b+0x54>
 8009f76:	a801      	add	r0, sp, #4
 8009f78:	f7ff fcdb 	bl	8009932 <__lo0bits>
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	2601      	movs	r6, #1
 8009f80:	6163      	str	r3, [r4, #20]
 8009f82:	3020      	adds	r0, #32
 8009f84:	e7e7      	b.n	8009f56 <__d2b+0x5e>
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <__d2b+0xb8>)
 8009f88:	18c0      	adds	r0, r0, r3
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	6018      	str	r0, [r3, #0]
 8009f8e:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <__d2b+0xbc>)
 8009f90:	18f3      	adds	r3, r6, r3
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	18e3      	adds	r3, r4, r3
 8009f96:	6958      	ldr	r0, [r3, #20]
 8009f98:	f7ff fcaa 	bl	80098f0 <__hi0bits>
 8009f9c:	0176      	lsls	r6, r6, #5
 8009f9e:	e7e3      	b.n	8009f68 <__d2b+0x70>
 8009fa0:	0800c5e1 	.word	0x0800c5e1
 8009fa4:	0800c5f2 	.word	0x0800c5f2
 8009fa8:	0000030f 	.word	0x0000030f
 8009fac:	fffffbcd 	.word	0xfffffbcd
 8009fb0:	fffffbce 	.word	0xfffffbce
 8009fb4:	3fffffff 	.word	0x3fffffff

08009fb8 <__ratio>:
 8009fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	000f      	movs	r7, r1
 8009fbe:	a904      	add	r1, sp, #16
 8009fc0:	0006      	movs	r6, r0
 8009fc2:	f7ff ff4d 	bl	8009e60 <__b2d>
 8009fc6:	9000      	str	r0, [sp, #0]
 8009fc8:	9101      	str	r1, [sp, #4]
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	9c01      	ldr	r4, [sp, #4]
 8009fce:	0038      	movs	r0, r7
 8009fd0:	a905      	add	r1, sp, #20
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	9403      	str	r4, [sp, #12]
 8009fd6:	f7ff ff43 	bl	8009e60 <__b2d>
 8009fda:	000d      	movs	r5, r1
 8009fdc:	0002      	movs	r2, r0
 8009fde:	000b      	movs	r3, r1
 8009fe0:	6930      	ldr	r0, [r6, #16]
 8009fe2:	6939      	ldr	r1, [r7, #16]
 8009fe4:	9e04      	ldr	r6, [sp, #16]
 8009fe6:	1a40      	subs	r0, r0, r1
 8009fe8:	9905      	ldr	r1, [sp, #20]
 8009fea:	0140      	lsls	r0, r0, #5
 8009fec:	1a71      	subs	r1, r6, r1
 8009fee:	1841      	adds	r1, r0, r1
 8009ff0:	0508      	lsls	r0, r1, #20
 8009ff2:	2900      	cmp	r1, #0
 8009ff4:	dd08      	ble.n	800a008 <__ratio+0x50>
 8009ff6:	9901      	ldr	r1, [sp, #4]
 8009ff8:	1841      	adds	r1, r0, r1
 8009ffa:	9103      	str	r1, [sp, #12]
 8009ffc:	9802      	ldr	r0, [sp, #8]
 8009ffe:	9903      	ldr	r1, [sp, #12]
 800a000:	f7f7 fe8e 	bl	8001d20 <__aeabi_ddiv>
 800a004:	b007      	add	sp, #28
 800a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a008:	1a2b      	subs	r3, r5, r0
 800a00a:	e7f7      	b.n	8009ffc <__ratio+0x44>

0800a00c <__copybits>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	0014      	movs	r4, r2
 800a010:	0005      	movs	r5, r0
 800a012:	3901      	subs	r1, #1
 800a014:	6913      	ldr	r3, [r2, #16]
 800a016:	1149      	asrs	r1, r1, #5
 800a018:	3101      	adds	r1, #1
 800a01a:	0089      	lsls	r1, r1, #2
 800a01c:	3414      	adds	r4, #20
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	1841      	adds	r1, r0, r1
 800a022:	18e3      	adds	r3, r4, r3
 800a024:	42a3      	cmp	r3, r4
 800a026:	d80d      	bhi.n	800a044 <__copybits+0x38>
 800a028:	0014      	movs	r4, r2
 800a02a:	3411      	adds	r4, #17
 800a02c:	2500      	movs	r5, #0
 800a02e:	429c      	cmp	r4, r3
 800a030:	d803      	bhi.n	800a03a <__copybits+0x2e>
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	3b11      	subs	r3, #17
 800a036:	089b      	lsrs	r3, r3, #2
 800a038:	009d      	lsls	r5, r3, #2
 800a03a:	2300      	movs	r3, #0
 800a03c:	1940      	adds	r0, r0, r5
 800a03e:	4281      	cmp	r1, r0
 800a040:	d803      	bhi.n	800a04a <__copybits+0x3e>
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	cc40      	ldmia	r4!, {r6}
 800a046:	c540      	stmia	r5!, {r6}
 800a048:	e7ec      	b.n	800a024 <__copybits+0x18>
 800a04a:	c008      	stmia	r0!, {r3}
 800a04c:	e7f7      	b.n	800a03e <__copybits+0x32>

0800a04e <__any_on>:
 800a04e:	0002      	movs	r2, r0
 800a050:	6900      	ldr	r0, [r0, #16]
 800a052:	b510      	push	{r4, lr}
 800a054:	3214      	adds	r2, #20
 800a056:	114b      	asrs	r3, r1, #5
 800a058:	4298      	cmp	r0, r3
 800a05a:	db13      	blt.n	800a084 <__any_on+0x36>
 800a05c:	dd0c      	ble.n	800a078 <__any_on+0x2a>
 800a05e:	241f      	movs	r4, #31
 800a060:	0008      	movs	r0, r1
 800a062:	4020      	ands	r0, r4
 800a064:	4221      	tst	r1, r4
 800a066:	d007      	beq.n	800a078 <__any_on+0x2a>
 800a068:	0099      	lsls	r1, r3, #2
 800a06a:	588c      	ldr	r4, [r1, r2]
 800a06c:	0021      	movs	r1, r4
 800a06e:	40c1      	lsrs	r1, r0
 800a070:	4081      	lsls	r1, r0
 800a072:	2001      	movs	r0, #1
 800a074:	428c      	cmp	r4, r1
 800a076:	d104      	bne.n	800a082 <__any_on+0x34>
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	18d3      	adds	r3, r2, r3
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d803      	bhi.n	800a088 <__any_on+0x3a>
 800a080:	2000      	movs	r0, #0
 800a082:	bd10      	pop	{r4, pc}
 800a084:	0003      	movs	r3, r0
 800a086:	e7f7      	b.n	800a078 <__any_on+0x2a>
 800a088:	3b04      	subs	r3, #4
 800a08a:	6819      	ldr	r1, [r3, #0]
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d0f5      	beq.n	800a07c <__any_on+0x2e>
 800a090:	2001      	movs	r0, #1
 800a092:	e7f6      	b.n	800a082 <__any_on+0x34>

0800a094 <sulp>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	0016      	movs	r6, r2
 800a098:	000d      	movs	r5, r1
 800a09a:	f7ff fec1 	bl	8009e20 <__ulp>
 800a09e:	2e00      	cmp	r6, #0
 800a0a0:	d00d      	beq.n	800a0be <sulp+0x2a>
 800a0a2:	236b      	movs	r3, #107	@ 0x6b
 800a0a4:	006a      	lsls	r2, r5, #1
 800a0a6:	0d52      	lsrs	r2, r2, #21
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	dd07      	ble.n	800a0be <sulp+0x2a>
 800a0ae:	2400      	movs	r4, #0
 800a0b0:	4a03      	ldr	r2, [pc, #12]	@ (800a0c0 <sulp+0x2c>)
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	189d      	adds	r5, r3, r2
 800a0b6:	002b      	movs	r3, r5
 800a0b8:	0022      	movs	r2, r4
 800a0ba:	f7f8 fa75 	bl	80025a8 <__aeabi_dmul>
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	3ff00000 	.word	0x3ff00000

0800a0c4 <_strtod_l>:
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	b0a3      	sub	sp, #140	@ 0x8c
 800a0c8:	921b      	str	r2, [sp, #108]	@ 0x6c
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	2700      	movs	r7, #0
 800a0d0:	9005      	str	r0, [sp, #20]
 800a0d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0d4:	921e      	str	r2, [sp, #120]	@ 0x78
 800a0d6:	911d      	str	r1, [sp, #116]	@ 0x74
 800a0d8:	780a      	ldrb	r2, [r1, #0]
 800a0da:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0dc:	d053      	beq.n	800a186 <_strtod_l+0xc2>
 800a0de:	d83f      	bhi.n	800a160 <_strtod_l+0x9c>
 800a0e0:	2a0d      	cmp	r2, #13
 800a0e2:	d839      	bhi.n	800a158 <_strtod_l+0x94>
 800a0e4:	2a08      	cmp	r2, #8
 800a0e6:	d839      	bhi.n	800a15c <_strtod_l+0x98>
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	d042      	beq.n	800a172 <_strtod_l+0xae>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800a0f4:	910c      	str	r1, [sp, #48]	@ 0x30
 800a0f6:	782a      	ldrb	r2, [r5, #0]
 800a0f8:	2a30      	cmp	r2, #48	@ 0x30
 800a0fa:	d000      	beq.n	800a0fe <_strtod_l+0x3a>
 800a0fc:	e083      	b.n	800a206 <_strtod_l+0x142>
 800a0fe:	786a      	ldrb	r2, [r5, #1]
 800a100:	3120      	adds	r1, #32
 800a102:	438a      	bics	r2, r1
 800a104:	2a58      	cmp	r2, #88	@ 0x58
 800a106:	d000      	beq.n	800a10a <_strtod_l+0x46>
 800a108:	e073      	b.n	800a1f2 <_strtod_l+0x12e>
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a10e:	4a95      	ldr	r2, [pc, #596]	@ (800a364 <_strtod_l+0x2a0>)
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	ab1e      	add	r3, sp, #120	@ 0x78
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	9805      	ldr	r0, [sp, #20]
 800a118:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a11a:	a91d      	add	r1, sp, #116	@ 0x74
 800a11c:	f001 f964 	bl	800b3e8 <__gethex>
 800a120:	230f      	movs	r3, #15
 800a122:	0002      	movs	r2, r0
 800a124:	401a      	ands	r2, r3
 800a126:	0004      	movs	r4, r0
 800a128:	9206      	str	r2, [sp, #24]
 800a12a:	4218      	tst	r0, r3
 800a12c:	d005      	beq.n	800a13a <_strtod_l+0x76>
 800a12e:	2a06      	cmp	r2, #6
 800a130:	d12b      	bne.n	800a18a <_strtod_l+0xc6>
 800a132:	2300      	movs	r3, #0
 800a134:	3501      	adds	r5, #1
 800a136:	951d      	str	r5, [sp, #116]	@ 0x74
 800a138:	9312      	str	r3, [sp, #72]	@ 0x48
 800a13a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <_strtod_l+0x82>
 800a140:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a142:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d019      	beq.n	800a180 <_strtod_l+0xbc>
 800a14c:	2380      	movs	r3, #128	@ 0x80
 800a14e:	0030      	movs	r0, r6
 800a150:	061b      	lsls	r3, r3, #24
 800a152:	18f9      	adds	r1, r7, r3
 800a154:	b023      	add	sp, #140	@ 0x8c
 800a156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a158:	2a20      	cmp	r2, #32
 800a15a:	d1c7      	bne.n	800a0ec <_strtod_l+0x28>
 800a15c:	3101      	adds	r1, #1
 800a15e:	e7ba      	b.n	800a0d6 <_strtod_l+0x12>
 800a160:	2a2d      	cmp	r2, #45	@ 0x2d
 800a162:	d1c3      	bne.n	800a0ec <_strtod_l+0x28>
 800a164:	3a2c      	subs	r2, #44	@ 0x2c
 800a166:	9212      	str	r2, [sp, #72]	@ 0x48
 800a168:	1c4a      	adds	r2, r1, #1
 800a16a:	921d      	str	r2, [sp, #116]	@ 0x74
 800a16c:	784a      	ldrb	r2, [r1, #1]
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d1be      	bne.n	800a0f0 <_strtod_l+0x2c>
 800a172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a174:	931d      	str	r3, [sp, #116]	@ 0x74
 800a176:	2300      	movs	r3, #0
 800a178:	9312      	str	r3, [sp, #72]	@ 0x48
 800a17a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1df      	bne.n	800a140 <_strtod_l+0x7c>
 800a180:	0030      	movs	r0, r6
 800a182:	0039      	movs	r1, r7
 800a184:	e7e6      	b.n	800a154 <_strtod_l+0x90>
 800a186:	2200      	movs	r2, #0
 800a188:	e7ed      	b.n	800a166 <_strtod_l+0xa2>
 800a18a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d007      	beq.n	800a1a0 <_strtod_l+0xdc>
 800a190:	2135      	movs	r1, #53	@ 0x35
 800a192:	a820      	add	r0, sp, #128	@ 0x80
 800a194:	f7ff ff3a 	bl	800a00c <__copybits>
 800a198:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a19a:	9805      	ldr	r0, [sp, #20]
 800a19c:	f7ff faf4 	bl	8009788 <_Bfree>
 800a1a0:	9806      	ldr	r0, [sp, #24]
 800a1a2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a1a4:	3801      	subs	r0, #1
 800a1a6:	2804      	cmp	r0, #4
 800a1a8:	d806      	bhi.n	800a1b8 <_strtod_l+0xf4>
 800a1aa:	f7f5 ffb5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a1ae:	0312      	.short	0x0312
 800a1b0:	1e1c      	.short	0x1e1c
 800a1b2:	12          	.byte	0x12
 800a1b3:	00          	.byte	0x00
 800a1b4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a1b6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800a1b8:	05e4      	lsls	r4, r4, #23
 800a1ba:	d502      	bpl.n	800a1c2 <_strtod_l+0xfe>
 800a1bc:	2380      	movs	r3, #128	@ 0x80
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	431f      	orrs	r7, r3
 800a1c2:	4b69      	ldr	r3, [pc, #420]	@ (800a368 <_strtod_l+0x2a4>)
 800a1c4:	423b      	tst	r3, r7
 800a1c6:	d1b8      	bne.n	800a13a <_strtod_l+0x76>
 800a1c8:	f7fe fad6 	bl	8008778 <__errno>
 800a1cc:	2322      	movs	r3, #34	@ 0x22
 800a1ce:	6003      	str	r3, [r0, #0]
 800a1d0:	e7b3      	b.n	800a13a <_strtod_l+0x76>
 800a1d2:	4966      	ldr	r1, [pc, #408]	@ (800a36c <_strtod_l+0x2a8>)
 800a1d4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a1d6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a1d8:	400a      	ands	r2, r1
 800a1da:	4965      	ldr	r1, [pc, #404]	@ (800a370 <_strtod_l+0x2ac>)
 800a1dc:	185b      	adds	r3, r3, r1
 800a1de:	051b      	lsls	r3, r3, #20
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	0017      	movs	r7, r2
 800a1e4:	e7e8      	b.n	800a1b8 <_strtod_l+0xf4>
 800a1e6:	4f60      	ldr	r7, [pc, #384]	@ (800a368 <_strtod_l+0x2a4>)
 800a1e8:	e7e6      	b.n	800a1b8 <_strtod_l+0xf4>
 800a1ea:	2601      	movs	r6, #1
 800a1ec:	4f61      	ldr	r7, [pc, #388]	@ (800a374 <_strtod_l+0x2b0>)
 800a1ee:	4276      	negs	r6, r6
 800a1f0:	e7e2      	b.n	800a1b8 <_strtod_l+0xf4>
 800a1f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	921d      	str	r2, [sp, #116]	@ 0x74
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b30      	cmp	r3, #48	@ 0x30
 800a1fc:	d0f9      	beq.n	800a1f2 <_strtod_l+0x12e>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d09b      	beq.n	800a13a <_strtod_l+0x76>
 800a202:	2301      	movs	r3, #1
 800a204:	930c      	str	r3, [sp, #48]	@ 0x30
 800a206:	2500      	movs	r5, #0
 800a208:	220a      	movs	r2, #10
 800a20a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a20c:	950d      	str	r5, [sp, #52]	@ 0x34
 800a20e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a210:	9508      	str	r5, [sp, #32]
 800a212:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800a214:	7804      	ldrb	r4, [r0, #0]
 800a216:	0023      	movs	r3, r4
 800a218:	3b30      	subs	r3, #48	@ 0x30
 800a21a:	b2d9      	uxtb	r1, r3
 800a21c:	2909      	cmp	r1, #9
 800a21e:	d927      	bls.n	800a270 <_strtod_l+0x1ac>
 800a220:	2201      	movs	r2, #1
 800a222:	4955      	ldr	r1, [pc, #340]	@ (800a378 <_strtod_l+0x2b4>)
 800a224:	f000 fff8 	bl	800b218 <strncmp>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d031      	beq.n	800a290 <_strtod_l+0x1cc>
 800a22c:	2000      	movs	r0, #0
 800a22e:	0023      	movs	r3, r4
 800a230:	4684      	mov	ip, r0
 800a232:	9a08      	ldr	r2, [sp, #32]
 800a234:	900e      	str	r0, [sp, #56]	@ 0x38
 800a236:	9206      	str	r2, [sp, #24]
 800a238:	2220      	movs	r2, #32
 800a23a:	0019      	movs	r1, r3
 800a23c:	4391      	bics	r1, r2
 800a23e:	000a      	movs	r2, r1
 800a240:	2100      	movs	r1, #0
 800a242:	9107      	str	r1, [sp, #28]
 800a244:	2a45      	cmp	r2, #69	@ 0x45
 800a246:	d000      	beq.n	800a24a <_strtod_l+0x186>
 800a248:	e0c0      	b.n	800a3cc <_strtod_l+0x308>
 800a24a:	9b06      	ldr	r3, [sp, #24]
 800a24c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a24e:	4303      	orrs	r3, r0
 800a250:	4313      	orrs	r3, r2
 800a252:	428b      	cmp	r3, r1
 800a254:	d08d      	beq.n	800a172 <_strtod_l+0xae>
 800a256:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a258:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25a:	3301      	adds	r3, #1
 800a25c:	931d      	str	r3, [sp, #116]	@ 0x74
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b2b      	cmp	r3, #43	@ 0x2b
 800a264:	d070      	beq.n	800a348 <_strtod_l+0x284>
 800a266:	000c      	movs	r4, r1
 800a268:	2b2d      	cmp	r3, #45	@ 0x2d
 800a26a:	d173      	bne.n	800a354 <_strtod_l+0x290>
 800a26c:	2401      	movs	r4, #1
 800a26e:	e06c      	b.n	800a34a <_strtod_l+0x286>
 800a270:	9908      	ldr	r1, [sp, #32]
 800a272:	2908      	cmp	r1, #8
 800a274:	dc09      	bgt.n	800a28a <_strtod_l+0x1c6>
 800a276:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a278:	4351      	muls	r1, r2
 800a27a:	185b      	adds	r3, r3, r1
 800a27c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a27e:	9b08      	ldr	r3, [sp, #32]
 800a280:	3001      	adds	r0, #1
 800a282:	3301      	adds	r3, #1
 800a284:	9308      	str	r3, [sp, #32]
 800a286:	901d      	str	r0, [sp, #116]	@ 0x74
 800a288:	e7c3      	b.n	800a212 <_strtod_l+0x14e>
 800a28a:	4355      	muls	r5, r2
 800a28c:	195d      	adds	r5, r3, r5
 800a28e:	e7f6      	b.n	800a27e <_strtod_l+0x1ba>
 800a290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	921d      	str	r2, [sp, #116]	@ 0x74
 800a296:	9a08      	ldr	r2, [sp, #32]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d03a      	beq.n	800a314 <_strtod_l+0x250>
 800a29e:	900e      	str	r0, [sp, #56]	@ 0x38
 800a2a0:	9206      	str	r2, [sp, #24]
 800a2a2:	001a      	movs	r2, r3
 800a2a4:	3a30      	subs	r2, #48	@ 0x30
 800a2a6:	2a09      	cmp	r2, #9
 800a2a8:	d912      	bls.n	800a2d0 <_strtod_l+0x20c>
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4694      	mov	ip, r2
 800a2ae:	e7c3      	b.n	800a238 <_strtod_l+0x174>
 800a2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	921d      	str	r2, [sp, #116]	@ 0x74
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	2b30      	cmp	r3, #48	@ 0x30
 800a2bc:	d0f8      	beq.n	800a2b0 <_strtod_l+0x1ec>
 800a2be:	001a      	movs	r2, r3
 800a2c0:	3a31      	subs	r2, #49	@ 0x31
 800a2c2:	2a08      	cmp	r2, #8
 800a2c4:	d83b      	bhi.n	800a33e <_strtod_l+0x27a>
 800a2c6:	900e      	str	r0, [sp, #56]	@ 0x38
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a2cc:	9006      	str	r0, [sp, #24]
 800a2ce:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a2d0:	001a      	movs	r2, r3
 800a2d2:	1c41      	adds	r1, r0, #1
 800a2d4:	3a30      	subs	r2, #48	@ 0x30
 800a2d6:	2b30      	cmp	r3, #48	@ 0x30
 800a2d8:	d016      	beq.n	800a308 <_strtod_l+0x244>
 800a2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2dc:	185b      	adds	r3, r3, r1
 800a2de:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2e0:	9b06      	ldr	r3, [sp, #24]
 800a2e2:	210a      	movs	r1, #10
 800a2e4:	469c      	mov	ip, r3
 800a2e6:	4484      	add	ip, r0
 800a2e8:	459c      	cmp	ip, r3
 800a2ea:	d115      	bne.n	800a318 <_strtod_l+0x254>
 800a2ec:	9906      	ldr	r1, [sp, #24]
 800a2ee:	9b06      	ldr	r3, [sp, #24]
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	1809      	adds	r1, r1, r0
 800a2f4:	181b      	adds	r3, r3, r0
 800a2f6:	9106      	str	r1, [sp, #24]
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	dc19      	bgt.n	800a330 <_strtod_l+0x26c>
 800a2fc:	230a      	movs	r3, #10
 800a2fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a300:	434b      	muls	r3, r1
 800a302:	2100      	movs	r1, #0
 800a304:	18d3      	adds	r3, r2, r3
 800a306:	930d      	str	r3, [sp, #52]	@ 0x34
 800a308:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a30a:	0008      	movs	r0, r1
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	921d      	str	r2, [sp, #116]	@ 0x74
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	e7c6      	b.n	800a2a2 <_strtod_l+0x1de>
 800a314:	9808      	ldr	r0, [sp, #32]
 800a316:	e7d0      	b.n	800a2ba <_strtod_l+0x1f6>
 800a318:	1c5c      	adds	r4, r3, #1
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	dc04      	bgt.n	800a328 <_strtod_l+0x264>
 800a31e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a320:	434b      	muls	r3, r1
 800a322:	930d      	str	r3, [sp, #52]	@ 0x34
 800a324:	0023      	movs	r3, r4
 800a326:	e7df      	b.n	800a2e8 <_strtod_l+0x224>
 800a328:	2c10      	cmp	r4, #16
 800a32a:	dcfb      	bgt.n	800a324 <_strtod_l+0x260>
 800a32c:	434d      	muls	r5, r1
 800a32e:	e7f9      	b.n	800a324 <_strtod_l+0x260>
 800a330:	2100      	movs	r1, #0
 800a332:	2b0f      	cmp	r3, #15
 800a334:	dce8      	bgt.n	800a308 <_strtod_l+0x244>
 800a336:	230a      	movs	r3, #10
 800a338:	435d      	muls	r5, r3
 800a33a:	1955      	adds	r5, r2, r5
 800a33c:	e7e4      	b.n	800a308 <_strtod_l+0x244>
 800a33e:	2200      	movs	r2, #0
 800a340:	920e      	str	r2, [sp, #56]	@ 0x38
 800a342:	9206      	str	r2, [sp, #24]
 800a344:	3201      	adds	r2, #1
 800a346:	e7b1      	b.n	800a2ac <_strtod_l+0x1e8>
 800a348:	2400      	movs	r4, #0
 800a34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34c:	3302      	adds	r3, #2
 800a34e:	931d      	str	r3, [sp, #116]	@ 0x74
 800a350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a352:	789b      	ldrb	r3, [r3, #2]
 800a354:	001a      	movs	r2, r3
 800a356:	3a30      	subs	r2, #48	@ 0x30
 800a358:	2a09      	cmp	r2, #9
 800a35a:	d913      	bls.n	800a384 <_strtod_l+0x2c0>
 800a35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a35e:	921d      	str	r2, [sp, #116]	@ 0x74
 800a360:	2200      	movs	r2, #0
 800a362:	e032      	b.n	800a3ca <_strtod_l+0x306>
 800a364:	0800c760 	.word	0x0800c760
 800a368:	7ff00000 	.word	0x7ff00000
 800a36c:	ffefffff 	.word	0xffefffff
 800a370:	00000433 	.word	0x00000433
 800a374:	7fffffff 	.word	0x7fffffff
 800a378:	0800c748 	.word	0x0800c748
 800a37c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	921d      	str	r2, [sp, #116]	@ 0x74
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	2b30      	cmp	r3, #48	@ 0x30
 800a386:	d0f9      	beq.n	800a37c <_strtod_l+0x2b8>
 800a388:	2200      	movs	r2, #0
 800a38a:	9207      	str	r2, [sp, #28]
 800a38c:	001a      	movs	r2, r3
 800a38e:	3a31      	subs	r2, #49	@ 0x31
 800a390:	2a08      	cmp	r2, #8
 800a392:	d81b      	bhi.n	800a3cc <_strtod_l+0x308>
 800a394:	3b30      	subs	r3, #48	@ 0x30
 800a396:	9310      	str	r3, [sp, #64]	@ 0x40
 800a398:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a39e:	1c59      	adds	r1, r3, #1
 800a3a0:	911d      	str	r1, [sp, #116]	@ 0x74
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	3a30      	subs	r2, #48	@ 0x30
 800a3a8:	2a09      	cmp	r2, #9
 800a3aa:	d93a      	bls.n	800a422 <_strtod_l+0x35e>
 800a3ac:	9a07      	ldr	r2, [sp, #28]
 800a3ae:	1a8a      	subs	r2, r1, r2
 800a3b0:	49b4      	ldr	r1, [pc, #720]	@ (800a684 <_strtod_l+0x5c0>)
 800a3b2:	9107      	str	r1, [sp, #28]
 800a3b4:	2a08      	cmp	r2, #8
 800a3b6:	dc04      	bgt.n	800a3c2 <_strtod_l+0x2fe>
 800a3b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a3ba:	9207      	str	r2, [sp, #28]
 800a3bc:	428a      	cmp	r2, r1
 800a3be:	dd00      	ble.n	800a3c2 <_strtod_l+0x2fe>
 800a3c0:	9107      	str	r1, [sp, #28]
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d002      	beq.n	800a3cc <_strtod_l+0x308>
 800a3c6:	9a07      	ldr	r2, [sp, #28]
 800a3c8:	4252      	negs	r2, r2
 800a3ca:	9207      	str	r2, [sp, #28]
 800a3cc:	9a06      	ldr	r2, [sp, #24]
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d14d      	bne.n	800a46e <_strtod_l+0x3aa>
 800a3d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3d4:	4310      	orrs	r0, r2
 800a3d6:	d000      	beq.n	800a3da <_strtod_l+0x316>
 800a3d8:	e6af      	b.n	800a13a <_strtod_l+0x76>
 800a3da:	4662      	mov	r2, ip
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	d000      	beq.n	800a3e2 <_strtod_l+0x31e>
 800a3e0:	e6c7      	b.n	800a172 <_strtod_l+0xae>
 800a3e2:	2b69      	cmp	r3, #105	@ 0x69
 800a3e4:	d027      	beq.n	800a436 <_strtod_l+0x372>
 800a3e6:	dc23      	bgt.n	800a430 <_strtod_l+0x36c>
 800a3e8:	2b49      	cmp	r3, #73	@ 0x49
 800a3ea:	d024      	beq.n	800a436 <_strtod_l+0x372>
 800a3ec:	2b4e      	cmp	r3, #78	@ 0x4e
 800a3ee:	d000      	beq.n	800a3f2 <_strtod_l+0x32e>
 800a3f0:	e6bf      	b.n	800a172 <_strtod_l+0xae>
 800a3f2:	49a5      	ldr	r1, [pc, #660]	@ (800a688 <_strtod_l+0x5c4>)
 800a3f4:	a81d      	add	r0, sp, #116	@ 0x74
 800a3f6:	f001 fa2d 	bl	800b854 <__match>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d100      	bne.n	800a400 <_strtod_l+0x33c>
 800a3fe:	e6b8      	b.n	800a172 <_strtod_l+0xae>
 800a400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b28      	cmp	r3, #40	@ 0x28
 800a406:	d12c      	bne.n	800a462 <_strtod_l+0x39e>
 800a408:	49a0      	ldr	r1, [pc, #640]	@ (800a68c <_strtod_l+0x5c8>)
 800a40a:	aa20      	add	r2, sp, #128	@ 0x80
 800a40c:	a81d      	add	r0, sp, #116	@ 0x74
 800a40e:	f001 fa35 	bl	800b87c <__hexnan>
 800a412:	2805      	cmp	r0, #5
 800a414:	d125      	bne.n	800a462 <_strtod_l+0x39e>
 800a416:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a418:	4a9d      	ldr	r2, [pc, #628]	@ (800a690 <_strtod_l+0x5cc>)
 800a41a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a41c:	431a      	orrs	r2, r3
 800a41e:	0017      	movs	r7, r2
 800a420:	e68b      	b.n	800a13a <_strtod_l+0x76>
 800a422:	220a      	movs	r2, #10
 800a424:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a426:	434a      	muls	r2, r1
 800a428:	18d2      	adds	r2, r2, r3
 800a42a:	3a30      	subs	r2, #48	@ 0x30
 800a42c:	9210      	str	r2, [sp, #64]	@ 0x40
 800a42e:	e7b5      	b.n	800a39c <_strtod_l+0x2d8>
 800a430:	2b6e      	cmp	r3, #110	@ 0x6e
 800a432:	d0de      	beq.n	800a3f2 <_strtod_l+0x32e>
 800a434:	e69d      	b.n	800a172 <_strtod_l+0xae>
 800a436:	4997      	ldr	r1, [pc, #604]	@ (800a694 <_strtod_l+0x5d0>)
 800a438:	a81d      	add	r0, sp, #116	@ 0x74
 800a43a:	f001 fa0b 	bl	800b854 <__match>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d100      	bne.n	800a444 <_strtod_l+0x380>
 800a442:	e696      	b.n	800a172 <_strtod_l+0xae>
 800a444:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a446:	4994      	ldr	r1, [pc, #592]	@ (800a698 <_strtod_l+0x5d4>)
 800a448:	3b01      	subs	r3, #1
 800a44a:	a81d      	add	r0, sp, #116	@ 0x74
 800a44c:	931d      	str	r3, [sp, #116]	@ 0x74
 800a44e:	f001 fa01 	bl	800b854 <__match>
 800a452:	2800      	cmp	r0, #0
 800a454:	d102      	bne.n	800a45c <_strtod_l+0x398>
 800a456:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a458:	3301      	adds	r3, #1
 800a45a:	931d      	str	r3, [sp, #116]	@ 0x74
 800a45c:	2600      	movs	r6, #0
 800a45e:	4f8c      	ldr	r7, [pc, #560]	@ (800a690 <_strtod_l+0x5cc>)
 800a460:	e66b      	b.n	800a13a <_strtod_l+0x76>
 800a462:	488e      	ldr	r0, [pc, #568]	@ (800a69c <_strtod_l+0x5d8>)
 800a464:	f000 ff06 	bl	800b274 <nan>
 800a468:	0006      	movs	r6, r0
 800a46a:	000f      	movs	r7, r1
 800a46c:	e665      	b.n	800a13a <_strtod_l+0x76>
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	930c      	str	r3, [sp, #48]	@ 0x30
 800a476:	9b08      	ldr	r3, [sp, #32]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <_strtod_l+0x3bc>
 800a47c:	9b06      	ldr	r3, [sp, #24]
 800a47e:	9308      	str	r3, [sp, #32]
 800a480:	9c06      	ldr	r4, [sp, #24]
 800a482:	2c10      	cmp	r4, #16
 800a484:	dd00      	ble.n	800a488 <_strtod_l+0x3c4>
 800a486:	2410      	movs	r4, #16
 800a488:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a48a:	f7f8 ff7d 	bl	8003388 <__aeabi_ui2d>
 800a48e:	9b06      	ldr	r3, [sp, #24]
 800a490:	0006      	movs	r6, r0
 800a492:	000f      	movs	r7, r1
 800a494:	2b09      	cmp	r3, #9
 800a496:	dc13      	bgt.n	800a4c0 <_strtod_l+0x3fc>
 800a498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d100      	bne.n	800a4a0 <_strtod_l+0x3dc>
 800a49e:	e64c      	b.n	800a13a <_strtod_l+0x76>
 800a4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc00      	bgt.n	800a4a8 <_strtod_l+0x3e4>
 800a4a6:	e07e      	b.n	800a5a6 <_strtod_l+0x4e2>
 800a4a8:	2b16      	cmp	r3, #22
 800a4aa:	dc63      	bgt.n	800a574 <_strtod_l+0x4b0>
 800a4ac:	497c      	ldr	r1, [pc, #496]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	18c9      	adds	r1, r1, r3
 800a4b2:	0032      	movs	r2, r6
 800a4b4:	6808      	ldr	r0, [r1, #0]
 800a4b6:	6849      	ldr	r1, [r1, #4]
 800a4b8:	003b      	movs	r3, r7
 800a4ba:	f7f8 f875 	bl	80025a8 <__aeabi_dmul>
 800a4be:	e7d3      	b.n	800a468 <_strtod_l+0x3a4>
 800a4c0:	0022      	movs	r2, r4
 800a4c2:	4b77      	ldr	r3, [pc, #476]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a4c4:	3a09      	subs	r2, #9
 800a4c6:	00d2      	lsls	r2, r2, #3
 800a4c8:	189b      	adds	r3, r3, r2
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f7f8 f86b 	bl	80025a8 <__aeabi_dmul>
 800a4d2:	0006      	movs	r6, r0
 800a4d4:	0028      	movs	r0, r5
 800a4d6:	000f      	movs	r7, r1
 800a4d8:	f7f8 ff56 	bl	8003388 <__aeabi_ui2d>
 800a4dc:	000b      	movs	r3, r1
 800a4de:	0002      	movs	r2, r0
 800a4e0:	0039      	movs	r1, r7
 800a4e2:	0030      	movs	r0, r6
 800a4e4:	f7f7 f8b8 	bl	8001658 <__aeabi_dadd>
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	0006      	movs	r6, r0
 800a4ec:	000f      	movs	r7, r1
 800a4ee:	2b0f      	cmp	r3, #15
 800a4f0:	ddd2      	ble.n	800a498 <_strtod_l+0x3d4>
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	1b1c      	subs	r4, r3, r4
 800a4f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4f8:	18e4      	adds	r4, r4, r3
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	dc00      	bgt.n	800a500 <_strtod_l+0x43c>
 800a4fe:	e09b      	b.n	800a638 <_strtod_l+0x574>
 800a500:	220f      	movs	r2, #15
 800a502:	0023      	movs	r3, r4
 800a504:	4013      	ands	r3, r2
 800a506:	4214      	tst	r4, r2
 800a508:	d00a      	beq.n	800a520 <_strtod_l+0x45c>
 800a50a:	4965      	ldr	r1, [pc, #404]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	18c9      	adds	r1, r1, r3
 800a510:	0032      	movs	r2, r6
 800a512:	6808      	ldr	r0, [r1, #0]
 800a514:	6849      	ldr	r1, [r1, #4]
 800a516:	003b      	movs	r3, r7
 800a518:	f7f8 f846 	bl	80025a8 <__aeabi_dmul>
 800a51c:	0006      	movs	r6, r0
 800a51e:	000f      	movs	r7, r1
 800a520:	230f      	movs	r3, #15
 800a522:	439c      	bics	r4, r3
 800a524:	d073      	beq.n	800a60e <_strtod_l+0x54a>
 800a526:	3326      	adds	r3, #38	@ 0x26
 800a528:	33ff      	adds	r3, #255	@ 0xff
 800a52a:	429c      	cmp	r4, r3
 800a52c:	dd4b      	ble.n	800a5c6 <_strtod_l+0x502>
 800a52e:	2300      	movs	r3, #0
 800a530:	9306      	str	r3, [sp, #24]
 800a532:	9307      	str	r3, [sp, #28]
 800a534:	930d      	str	r3, [sp, #52]	@ 0x34
 800a536:	9308      	str	r3, [sp, #32]
 800a538:	2322      	movs	r3, #34	@ 0x22
 800a53a:	2600      	movs	r6, #0
 800a53c:	9a05      	ldr	r2, [sp, #20]
 800a53e:	4f54      	ldr	r7, [pc, #336]	@ (800a690 <_strtod_l+0x5cc>)
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a544:	42b3      	cmp	r3, r6
 800a546:	d100      	bne.n	800a54a <_strtod_l+0x486>
 800a548:	e5f7      	b.n	800a13a <_strtod_l+0x76>
 800a54a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a54c:	9805      	ldr	r0, [sp, #20]
 800a54e:	f7ff f91b 	bl	8009788 <_Bfree>
 800a552:	9908      	ldr	r1, [sp, #32]
 800a554:	9805      	ldr	r0, [sp, #20]
 800a556:	f7ff f917 	bl	8009788 <_Bfree>
 800a55a:	9907      	ldr	r1, [sp, #28]
 800a55c:	9805      	ldr	r0, [sp, #20]
 800a55e:	f7ff f913 	bl	8009788 <_Bfree>
 800a562:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	f7ff f90f 	bl	8009788 <_Bfree>
 800a56a:	9906      	ldr	r1, [sp, #24]
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	f7ff f90b 	bl	8009788 <_Bfree>
 800a572:	e5e2      	b.n	800a13a <_strtod_l+0x76>
 800a574:	2325      	movs	r3, #37	@ 0x25
 800a576:	9a06      	ldr	r2, [sp, #24]
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a57c:	4293      	cmp	r3, r2
 800a57e:	dbb8      	blt.n	800a4f2 <_strtod_l+0x42e>
 800a580:	240f      	movs	r4, #15
 800a582:	9b06      	ldr	r3, [sp, #24]
 800a584:	4d46      	ldr	r5, [pc, #280]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a586:	1ae4      	subs	r4, r4, r3
 800a588:	00e1      	lsls	r1, r4, #3
 800a58a:	1869      	adds	r1, r5, r1
 800a58c:	0032      	movs	r2, r6
 800a58e:	6808      	ldr	r0, [r1, #0]
 800a590:	6849      	ldr	r1, [r1, #4]
 800a592:	003b      	movs	r3, r7
 800a594:	f7f8 f808 	bl	80025a8 <__aeabi_dmul>
 800a598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a59a:	1b1c      	subs	r4, r3, r4
 800a59c:	00e4      	lsls	r4, r4, #3
 800a59e:	192d      	adds	r5, r5, r4
 800a5a0:	682a      	ldr	r2, [r5, #0]
 800a5a2:	686b      	ldr	r3, [r5, #4]
 800a5a4:	e789      	b.n	800a4ba <_strtod_l+0x3f6>
 800a5a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5a8:	3316      	adds	r3, #22
 800a5aa:	dba2      	blt.n	800a4f2 <_strtod_l+0x42e>
 800a5ac:	9907      	ldr	r1, [sp, #28]
 800a5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a5b2:	1a52      	subs	r2, r2, r1
 800a5b4:	00d2      	lsls	r2, r2, #3
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	0030      	movs	r0, r6
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	0039      	movs	r1, r7
 800a5c0:	f7f7 fbae 	bl	8001d20 <__aeabi_ddiv>
 800a5c4:	e750      	b.n	800a468 <_strtod_l+0x3a4>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	0030      	movs	r0, r6
 800a5ca:	0039      	movs	r1, r7
 800a5cc:	4d35      	ldr	r5, [pc, #212]	@ (800a6a4 <_strtod_l+0x5e0>)
 800a5ce:	1124      	asrs	r4, r4, #4
 800a5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d2:	2c01      	cmp	r4, #1
 800a5d4:	dc1e      	bgt.n	800a614 <_strtod_l+0x550>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <_strtod_l+0x51a>
 800a5da:	0006      	movs	r6, r0
 800a5dc:	000f      	movs	r7, r1
 800a5de:	4b32      	ldr	r3, [pc, #200]	@ (800a6a8 <_strtod_l+0x5e4>)
 800a5e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5e2:	18ff      	adds	r7, r7, r3
 800a5e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a4 <_strtod_l+0x5e0>)
 800a5e6:	00d5      	lsls	r5, r2, #3
 800a5e8:	195d      	adds	r5, r3, r5
 800a5ea:	0032      	movs	r2, r6
 800a5ec:	6828      	ldr	r0, [r5, #0]
 800a5ee:	6869      	ldr	r1, [r5, #4]
 800a5f0:	003b      	movs	r3, r7
 800a5f2:	f7f7 ffd9 	bl	80025a8 <__aeabi_dmul>
 800a5f6:	4b26      	ldr	r3, [pc, #152]	@ (800a690 <_strtod_l+0x5cc>)
 800a5f8:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <_strtod_l+0x5e8>)
 800a5fa:	0006      	movs	r6, r0
 800a5fc:	400b      	ands	r3, r1
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d895      	bhi.n	800a52e <_strtod_l+0x46a>
 800a602:	4a2b      	ldr	r2, [pc, #172]	@ (800a6b0 <_strtod_l+0x5ec>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d913      	bls.n	800a630 <_strtod_l+0x56c>
 800a608:	2601      	movs	r6, #1
 800a60a:	4f2a      	ldr	r7, [pc, #168]	@ (800a6b4 <_strtod_l+0x5f0>)
 800a60c:	4276      	negs	r6, r6
 800a60e:	2300      	movs	r3, #0
 800a610:	9309      	str	r3, [sp, #36]	@ 0x24
 800a612:	e086      	b.n	800a722 <_strtod_l+0x65e>
 800a614:	2201      	movs	r2, #1
 800a616:	4214      	tst	r4, r2
 800a618:	d004      	beq.n	800a624 <_strtod_l+0x560>
 800a61a:	682a      	ldr	r2, [r5, #0]
 800a61c:	686b      	ldr	r3, [r5, #4]
 800a61e:	f7f7 ffc3 	bl	80025a8 <__aeabi_dmul>
 800a622:	2301      	movs	r3, #1
 800a624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a626:	1064      	asrs	r4, r4, #1
 800a628:	3201      	adds	r2, #1
 800a62a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a62c:	3508      	adds	r5, #8
 800a62e:	e7d0      	b.n	800a5d2 <_strtod_l+0x50e>
 800a630:	23d4      	movs	r3, #212	@ 0xd4
 800a632:	049b      	lsls	r3, r3, #18
 800a634:	18cf      	adds	r7, r1, r3
 800a636:	e7ea      	b.n	800a60e <_strtod_l+0x54a>
 800a638:	2c00      	cmp	r4, #0
 800a63a:	d0e8      	beq.n	800a60e <_strtod_l+0x54a>
 800a63c:	4264      	negs	r4, r4
 800a63e:	230f      	movs	r3, #15
 800a640:	0022      	movs	r2, r4
 800a642:	401a      	ands	r2, r3
 800a644:	421c      	tst	r4, r3
 800a646:	d00a      	beq.n	800a65e <_strtod_l+0x59a>
 800a648:	4b15      	ldr	r3, [pc, #84]	@ (800a6a0 <_strtod_l+0x5dc>)
 800a64a:	00d2      	lsls	r2, r2, #3
 800a64c:	189b      	adds	r3, r3, r2
 800a64e:	0030      	movs	r0, r6
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	0039      	movs	r1, r7
 800a656:	f7f7 fb63 	bl	8001d20 <__aeabi_ddiv>
 800a65a:	0006      	movs	r6, r0
 800a65c:	000f      	movs	r7, r1
 800a65e:	1124      	asrs	r4, r4, #4
 800a660:	d0d5      	beq.n	800a60e <_strtod_l+0x54a>
 800a662:	2c1f      	cmp	r4, #31
 800a664:	dd28      	ble.n	800a6b8 <_strtod_l+0x5f4>
 800a666:	2300      	movs	r3, #0
 800a668:	9306      	str	r3, [sp, #24]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a66e:	9308      	str	r3, [sp, #32]
 800a670:	2322      	movs	r3, #34	@ 0x22
 800a672:	9a05      	ldr	r2, [sp, #20]
 800a674:	2600      	movs	r6, #0
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a67a:	2700      	movs	r7, #0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d000      	beq.n	800a682 <_strtod_l+0x5be>
 800a680:	e763      	b.n	800a54a <_strtod_l+0x486>
 800a682:	e55a      	b.n	800a13a <_strtod_l+0x76>
 800a684:	00004e1f 	.word	0x00004e1f
 800a688:	0800c539 	.word	0x0800c539
 800a68c:	0800c74c 	.word	0x0800c74c
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	0800c531 	.word	0x0800c531
 800a698:	0800c568 	.word	0x0800c568
 800a69c:	0800c8f5 	.word	0x0800c8f5
 800a6a0:	0800c680 	.word	0x0800c680
 800a6a4:	0800c658 	.word	0x0800c658
 800a6a8:	fcb00000 	.word	0xfcb00000
 800a6ac:	7ca00000 	.word	0x7ca00000
 800a6b0:	7c900000 	.word	0x7c900000
 800a6b4:	7fefffff 	.word	0x7fefffff
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	0022      	movs	r2, r4
 800a6bc:	401a      	ands	r2, r3
 800a6be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6c0:	421c      	tst	r4, r3
 800a6c2:	d001      	beq.n	800a6c8 <_strtod_l+0x604>
 800a6c4:	335a      	adds	r3, #90	@ 0x5a
 800a6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c8:	0030      	movs	r0, r6
 800a6ca:	0039      	movs	r1, r7
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4dbf      	ldr	r5, [pc, #764]	@ (800a9cc <_strtod_l+0x908>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	4214      	tst	r4, r2
 800a6d4:	d004      	beq.n	800a6e0 <_strtod_l+0x61c>
 800a6d6:	682a      	ldr	r2, [r5, #0]
 800a6d8:	686b      	ldr	r3, [r5, #4]
 800a6da:	f7f7 ff65 	bl	80025a8 <__aeabi_dmul>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	1064      	asrs	r4, r4, #1
 800a6e2:	3508      	adds	r5, #8
 800a6e4:	2c00      	cmp	r4, #0
 800a6e6:	d1f3      	bne.n	800a6d0 <_strtod_l+0x60c>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <_strtod_l+0x62c>
 800a6ec:	0006      	movs	r6, r0
 800a6ee:	000f      	movs	r7, r1
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00d      	beq.n	800a712 <_strtod_l+0x64e>
 800a6f6:	236b      	movs	r3, #107	@ 0x6b
 800a6f8:	007a      	lsls	r2, r7, #1
 800a6fa:	0d52      	lsrs	r2, r2, #21
 800a6fc:	0039      	movs	r1, r7
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	2b00      	cmp	r3, #0
 800a702:	dd06      	ble.n	800a712 <_strtod_l+0x64e>
 800a704:	2b1f      	cmp	r3, #31
 800a706:	dd5a      	ble.n	800a7be <_strtod_l+0x6fa>
 800a708:	2600      	movs	r6, #0
 800a70a:	2b34      	cmp	r3, #52	@ 0x34
 800a70c:	dd50      	ble.n	800a7b0 <_strtod_l+0x6ec>
 800a70e:	27dc      	movs	r7, #220	@ 0xdc
 800a710:	04bf      	lsls	r7, r7, #18
 800a712:	2200      	movs	r2, #0
 800a714:	2300      	movs	r3, #0
 800a716:	0030      	movs	r0, r6
 800a718:	0039      	movs	r1, r7
 800a71a:	f7f5 fe97 	bl	800044c <__aeabi_dcmpeq>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d1a1      	bne.n	800a666 <_strtod_l+0x5a2>
 800a722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a724:	9a08      	ldr	r2, [sp, #32]
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a72a:	9b06      	ldr	r3, [sp, #24]
 800a72c:	9805      	ldr	r0, [sp, #20]
 800a72e:	f7ff f893 	bl	8009858 <__s2b>
 800a732:	900d      	str	r0, [sp, #52]	@ 0x34
 800a734:	2800      	cmp	r0, #0
 800a736:	d100      	bne.n	800a73a <_strtod_l+0x676>
 800a738:	e6f9      	b.n	800a52e <_strtod_l+0x46a>
 800a73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a73c:	9907      	ldr	r1, [sp, #28]
 800a73e:	17da      	asrs	r2, r3, #31
 800a740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a742:	1a5b      	subs	r3, r3, r1
 800a744:	401a      	ands	r2, r3
 800a746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a748:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a74a:	43db      	mvns	r3, r3
 800a74c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a74e:	17db      	asrs	r3, r3, #31
 800a750:	401a      	ands	r2, r3
 800a752:	2300      	movs	r3, #0
 800a754:	921a      	str	r2, [sp, #104]	@ 0x68
 800a756:	9306      	str	r3, [sp, #24]
 800a758:	9307      	str	r3, [sp, #28]
 800a75a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	6859      	ldr	r1, [r3, #4]
 800a760:	f7fe ffce 	bl	8009700 <_Balloc>
 800a764:	9008      	str	r0, [sp, #32]
 800a766:	2800      	cmp	r0, #0
 800a768:	d100      	bne.n	800a76c <_strtod_l+0x6a8>
 800a76a:	e6e5      	b.n	800a538 <_strtod_l+0x474>
 800a76c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a76e:	300c      	adds	r0, #12
 800a770:	0019      	movs	r1, r3
 800a772:	691a      	ldr	r2, [r3, #16]
 800a774:	310c      	adds	r1, #12
 800a776:	3202      	adds	r2, #2
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	f000 fd71 	bl	800b260 <memcpy>
 800a77e:	ab20      	add	r3, sp, #128	@ 0x80
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	0032      	movs	r2, r6
 800a788:	003b      	movs	r3, r7
 800a78a:	9805      	ldr	r0, [sp, #20]
 800a78c:	9610      	str	r6, [sp, #64]	@ 0x40
 800a78e:	9711      	str	r7, [sp, #68]	@ 0x44
 800a790:	f7ff fbb2 	bl	8009ef8 <__d2b>
 800a794:	901e      	str	r0, [sp, #120]	@ 0x78
 800a796:	2800      	cmp	r0, #0
 800a798:	d100      	bne.n	800a79c <_strtod_l+0x6d8>
 800a79a:	e6cd      	b.n	800a538 <_strtod_l+0x474>
 800a79c:	2101      	movs	r1, #1
 800a79e:	9805      	ldr	r0, [sp, #20]
 800a7a0:	f7ff f8f6 	bl	8009990 <__i2b>
 800a7a4:	9007      	str	r0, [sp, #28]
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d10e      	bne.n	800a7c8 <_strtod_l+0x704>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9307      	str	r3, [sp, #28]
 800a7ae:	e6c3      	b.n	800a538 <_strtod_l+0x474>
 800a7b0:	234b      	movs	r3, #75	@ 0x4b
 800a7b2:	1a9a      	subs	r2, r3, r2
 800a7b4:	3b4c      	subs	r3, #76	@ 0x4c
 800a7b6:	4093      	lsls	r3, r2
 800a7b8:	4019      	ands	r1, r3
 800a7ba:	000f      	movs	r7, r1
 800a7bc:	e7a9      	b.n	800a712 <_strtod_l+0x64e>
 800a7be:	2201      	movs	r2, #1
 800a7c0:	4252      	negs	r2, r2
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	4016      	ands	r6, r2
 800a7c6:	e7a4      	b.n	800a712 <_strtod_l+0x64e>
 800a7c8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a7ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7cc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a7ce:	1ad4      	subs	r4, r2, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	db01      	blt.n	800a7d8 <_strtod_l+0x714>
 800a7d4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a7d6:	195d      	adds	r5, r3, r5
 800a7d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a7dc:	1a5b      	subs	r3, r3, r1
 800a7de:	2136      	movs	r1, #54	@ 0x36
 800a7e0:	189b      	adds	r3, r3, r2
 800a7e2:	1a8a      	subs	r2, r1, r2
 800a7e4:	497a      	ldr	r1, [pc, #488]	@ (800a9d0 <_strtod_l+0x90c>)
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	468c      	mov	ip, r1
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	9116      	str	r1, [sp, #88]	@ 0x58
 800a7f0:	9014      	str	r0, [sp, #80]	@ 0x50
 800a7f2:	4563      	cmp	r3, ip
 800a7f4:	da06      	bge.n	800a804 <_strtod_l+0x740>
 800a7f6:	4661      	mov	r1, ip
 800a7f8:	1ac9      	subs	r1, r1, r3
 800a7fa:	1a52      	subs	r2, r2, r1
 800a7fc:	291f      	cmp	r1, #31
 800a7fe:	dc3f      	bgt.n	800a880 <_strtod_l+0x7bc>
 800a800:	4088      	lsls	r0, r1
 800a802:	9014      	str	r0, [sp, #80]	@ 0x50
 800a804:	18ab      	adds	r3, r5, r2
 800a806:	930e      	str	r3, [sp, #56]	@ 0x38
 800a808:	18a4      	adds	r4, r4, r2
 800a80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a80e:	191c      	adds	r4, r3, r4
 800a810:	002b      	movs	r3, r5
 800a812:	4295      	cmp	r5, r2
 800a814:	dd00      	ble.n	800a818 <_strtod_l+0x754>
 800a816:	0013      	movs	r3, r2
 800a818:	42a3      	cmp	r3, r4
 800a81a:	dd00      	ble.n	800a81e <_strtod_l+0x75a>
 800a81c:	0023      	movs	r3, r4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dd04      	ble.n	800a82c <_strtod_l+0x768>
 800a822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a824:	1ae4      	subs	r4, r4, r3
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	920e      	str	r2, [sp, #56]	@ 0x38
 800a82a:	1aed      	subs	r5, r5, r3
 800a82c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	dd16      	ble.n	800a860 <_strtod_l+0x79c>
 800a832:	001a      	movs	r2, r3
 800a834:	9907      	ldr	r1, [sp, #28]
 800a836:	9805      	ldr	r0, [sp, #20]
 800a838:	f7ff f974 	bl	8009b24 <__pow5mult>
 800a83c:	9007      	str	r0, [sp, #28]
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0b3      	beq.n	800a7aa <_strtod_l+0x6e6>
 800a842:	0001      	movs	r1, r0
 800a844:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a846:	9805      	ldr	r0, [sp, #20]
 800a848:	f7ff f8ba 	bl	80099c0 <__multiply>
 800a84c:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a84e:	2800      	cmp	r0, #0
 800a850:	d100      	bne.n	800a854 <_strtod_l+0x790>
 800a852:	e671      	b.n	800a538 <_strtod_l+0x474>
 800a854:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a856:	9805      	ldr	r0, [sp, #20]
 800a858:	f7fe ff96 	bl	8009788 <_Bfree>
 800a85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a85e:	931e      	str	r3, [sp, #120]	@ 0x78
 800a860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	dc12      	bgt.n	800a88c <_strtod_l+0x7c8>
 800a866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dd18      	ble.n	800a89e <_strtod_l+0x7da>
 800a86c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a86e:	9908      	ldr	r1, [sp, #32]
 800a870:	9805      	ldr	r0, [sp, #20]
 800a872:	f7ff f957 	bl	8009b24 <__pow5mult>
 800a876:	9008      	str	r0, [sp, #32]
 800a878:	2800      	cmp	r0, #0
 800a87a:	d110      	bne.n	800a89e <_strtod_l+0x7da>
 800a87c:	2300      	movs	r3, #0
 800a87e:	e65a      	b.n	800a536 <_strtod_l+0x472>
 800a880:	4954      	ldr	r1, [pc, #336]	@ (800a9d4 <_strtod_l+0x910>)
 800a882:	1acb      	subs	r3, r1, r3
 800a884:	0001      	movs	r1, r0
 800a886:	4099      	lsls	r1, r3
 800a888:	9116      	str	r1, [sp, #88]	@ 0x58
 800a88a:	e7ba      	b.n	800a802 <_strtod_l+0x73e>
 800a88c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a88e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a890:	9805      	ldr	r0, [sp, #20]
 800a892:	f7ff f9a3 	bl	8009bdc <__lshift>
 800a896:	901e      	str	r0, [sp, #120]	@ 0x78
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1e4      	bne.n	800a866 <_strtod_l+0x7a2>
 800a89c:	e64c      	b.n	800a538 <_strtod_l+0x474>
 800a89e:	2c00      	cmp	r4, #0
 800a8a0:	dd07      	ble.n	800a8b2 <_strtod_l+0x7ee>
 800a8a2:	0022      	movs	r2, r4
 800a8a4:	9908      	ldr	r1, [sp, #32]
 800a8a6:	9805      	ldr	r0, [sp, #20]
 800a8a8:	f7ff f998 	bl	8009bdc <__lshift>
 800a8ac:	9008      	str	r0, [sp, #32]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d0e4      	beq.n	800a87c <_strtod_l+0x7b8>
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	dd08      	ble.n	800a8c8 <_strtod_l+0x804>
 800a8b6:	002a      	movs	r2, r5
 800a8b8:	9907      	ldr	r1, [sp, #28]
 800a8ba:	9805      	ldr	r0, [sp, #20]
 800a8bc:	f7ff f98e 	bl	8009bdc <__lshift>
 800a8c0:	9007      	str	r0, [sp, #28]
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d100      	bne.n	800a8c8 <_strtod_l+0x804>
 800a8c6:	e637      	b.n	800a538 <_strtod_l+0x474>
 800a8c8:	9a08      	ldr	r2, [sp, #32]
 800a8ca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a8cc:	9805      	ldr	r0, [sp, #20]
 800a8ce:	f7ff fa0d 	bl	8009cec <__mdiff>
 800a8d2:	9006      	str	r0, [sp, #24]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d100      	bne.n	800a8da <_strtod_l+0x816>
 800a8d8:	e62e      	b.n	800a538 <_strtod_l+0x474>
 800a8da:	68c3      	ldr	r3, [r0, #12]
 800a8dc:	9907      	ldr	r1, [sp, #28]
 800a8de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60c3      	str	r3, [r0, #12]
 800a8e4:	f7ff f9e6 	bl	8009cb4 <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	da3b      	bge.n	800a964 <_strtod_l+0x8a0>
 800a8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8ee:	4333      	orrs	r3, r6
 800a8f0:	d167      	bne.n	800a9c2 <_strtod_l+0x8fe>
 800a8f2:	033b      	lsls	r3, r7, #12
 800a8f4:	d165      	bne.n	800a9c2 <_strtod_l+0x8fe>
 800a8f6:	22d6      	movs	r2, #214	@ 0xd6
 800a8f8:	4b37      	ldr	r3, [pc, #220]	@ (800a9d8 <_strtod_l+0x914>)
 800a8fa:	04d2      	lsls	r2, r2, #19
 800a8fc:	403b      	ands	r3, r7
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d95f      	bls.n	800a9c2 <_strtod_l+0x8fe>
 800a902:	9b06      	ldr	r3, [sp, #24]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <_strtod_l+0x84e>
 800a90a:	9b06      	ldr	r3, [sp, #24]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	dd57      	ble.n	800a9c2 <_strtod_l+0x8fe>
 800a912:	9906      	ldr	r1, [sp, #24]
 800a914:	2201      	movs	r2, #1
 800a916:	9805      	ldr	r0, [sp, #20]
 800a918:	f7ff f960 	bl	8009bdc <__lshift>
 800a91c:	9907      	ldr	r1, [sp, #28]
 800a91e:	9006      	str	r0, [sp, #24]
 800a920:	f7ff f9c8 	bl	8009cb4 <__mcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	dd4c      	ble.n	800a9c2 <_strtod_l+0x8fe>
 800a928:	4b2b      	ldr	r3, [pc, #172]	@ (800a9d8 <_strtod_l+0x914>)
 800a92a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a92c:	403b      	ands	r3, r7
 800a92e:	2a00      	cmp	r2, #0
 800a930:	d074      	beq.n	800aa1c <_strtod_l+0x958>
 800a932:	22d6      	movs	r2, #214	@ 0xd6
 800a934:	04d2      	lsls	r2, r2, #19
 800a936:	4293      	cmp	r3, r2
 800a938:	d870      	bhi.n	800aa1c <_strtod_l+0x958>
 800a93a:	22dc      	movs	r2, #220	@ 0xdc
 800a93c:	0492      	lsls	r2, r2, #18
 800a93e:	4293      	cmp	r3, r2
 800a940:	d800      	bhi.n	800a944 <_strtod_l+0x880>
 800a942:	e695      	b.n	800a670 <_strtod_l+0x5ac>
 800a944:	0030      	movs	r0, r6
 800a946:	0039      	movs	r1, r7
 800a948:	4b24      	ldr	r3, [pc, #144]	@ (800a9dc <_strtod_l+0x918>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f7 fe2c 	bl	80025a8 <__aeabi_dmul>
 800a950:	4b21      	ldr	r3, [pc, #132]	@ (800a9d8 <_strtod_l+0x914>)
 800a952:	0006      	movs	r6, r0
 800a954:	000f      	movs	r7, r1
 800a956:	420b      	tst	r3, r1
 800a958:	d000      	beq.n	800a95c <_strtod_l+0x898>
 800a95a:	e5f6      	b.n	800a54a <_strtod_l+0x486>
 800a95c:	2322      	movs	r3, #34	@ 0x22
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	e5f2      	b.n	800a54a <_strtod_l+0x486>
 800a964:	970e      	str	r7, [sp, #56]	@ 0x38
 800a966:	2800      	cmp	r0, #0
 800a968:	d175      	bne.n	800aa56 <_strtod_l+0x992>
 800a96a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a96c:	033b      	lsls	r3, r7, #12
 800a96e:	0b1b      	lsrs	r3, r3, #12
 800a970:	2a00      	cmp	r2, #0
 800a972:	d039      	beq.n	800a9e8 <_strtod_l+0x924>
 800a974:	4a1a      	ldr	r2, [pc, #104]	@ (800a9e0 <_strtod_l+0x91c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d138      	bne.n	800a9ec <_strtod_l+0x928>
 800a97a:	2101      	movs	r1, #1
 800a97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97e:	4249      	negs	r1, r1
 800a980:	0032      	movs	r2, r6
 800a982:	0008      	movs	r0, r1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <_strtod_l+0x8dc>
 800a988:	24d4      	movs	r4, #212	@ 0xd4
 800a98a:	4b13      	ldr	r3, [pc, #76]	@ (800a9d8 <_strtod_l+0x914>)
 800a98c:	0008      	movs	r0, r1
 800a98e:	403b      	ands	r3, r7
 800a990:	04e4      	lsls	r4, r4, #19
 800a992:	42a3      	cmp	r3, r4
 800a994:	d804      	bhi.n	800a9a0 <_strtod_l+0x8dc>
 800a996:	306c      	adds	r0, #108	@ 0x6c
 800a998:	0d1b      	lsrs	r3, r3, #20
 800a99a:	1ac3      	subs	r3, r0, r3
 800a99c:	4099      	lsls	r1, r3
 800a99e:	0008      	movs	r0, r1
 800a9a0:	4282      	cmp	r2, r0
 800a9a2:	d123      	bne.n	800a9ec <_strtod_l+0x928>
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e4 <_strtod_l+0x920>)
 800a9a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9a8:	4299      	cmp	r1, r3
 800a9aa:	d102      	bne.n	800a9b2 <_strtod_l+0x8ee>
 800a9ac:	3201      	adds	r2, #1
 800a9ae:	d100      	bne.n	800a9b2 <_strtod_l+0x8ee>
 800a9b0:	e5c2      	b.n	800a538 <_strtod_l+0x474>
 800a9b2:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <_strtod_l+0x914>)
 800a9b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	401a      	ands	r2, r3
 800a9ba:	0013      	movs	r3, r2
 800a9bc:	2280      	movs	r2, #128	@ 0x80
 800a9be:	0352      	lsls	r2, r2, #13
 800a9c0:	189f      	adds	r7, r3, r2
 800a9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1bd      	bne.n	800a944 <_strtod_l+0x880>
 800a9c8:	e5bf      	b.n	800a54a <_strtod_l+0x486>
 800a9ca:	46c0      	nop			@ (mov r8, r8)
 800a9cc:	0800c778 	.word	0x0800c778
 800a9d0:	fffffc02 	.word	0xfffffc02
 800a9d4:	fffffbe2 	.word	0xfffffbe2
 800a9d8:	7ff00000 	.word	0x7ff00000
 800a9dc:	39500000 	.word	0x39500000
 800a9e0:	000fffff 	.word	0x000fffff
 800a9e4:	7fefffff 	.word	0x7fefffff
 800a9e8:	4333      	orrs	r3, r6
 800a9ea:	d09d      	beq.n	800a928 <_strtod_l+0x864>
 800a9ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01c      	beq.n	800aa2c <_strtod_l+0x968>
 800a9f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a9f6:	4213      	tst	r3, r2
 800a9f8:	d0e3      	beq.n	800a9c2 <_strtod_l+0x8fe>
 800a9fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9fc:	0030      	movs	r0, r6
 800a9fe:	0039      	movs	r1, r7
 800aa00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <_strtod_l+0x970>
 800aa06:	f7ff fb45 	bl	800a094 <sulp>
 800aa0a:	0002      	movs	r2, r0
 800aa0c:	000b      	movs	r3, r1
 800aa0e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aa10:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aa12:	f7f6 fe21 	bl	8001658 <__aeabi_dadd>
 800aa16:	0006      	movs	r6, r0
 800aa18:	000f      	movs	r7, r1
 800aa1a:	e7d2      	b.n	800a9c2 <_strtod_l+0x8fe>
 800aa1c:	2601      	movs	r6, #1
 800aa1e:	4a92      	ldr	r2, [pc, #584]	@ (800ac68 <_strtod_l+0xba4>)
 800aa20:	4276      	negs	r6, r6
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	4a91      	ldr	r2, [pc, #580]	@ (800ac6c <_strtod_l+0xba8>)
 800aa26:	431a      	orrs	r2, r3
 800aa28:	0017      	movs	r7, r2
 800aa2a:	e7ca      	b.n	800a9c2 <_strtod_l+0x8fe>
 800aa2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa2e:	4233      	tst	r3, r6
 800aa30:	d0c7      	beq.n	800a9c2 <_strtod_l+0x8fe>
 800aa32:	e7e2      	b.n	800a9fa <_strtod_l+0x936>
 800aa34:	f7ff fb2e 	bl	800a094 <sulp>
 800aa38:	0002      	movs	r2, r0
 800aa3a:	000b      	movs	r3, r1
 800aa3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aa3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aa40:	f7f8 f87a 	bl	8002b38 <__aeabi_dsub>
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	0006      	movs	r6, r0
 800aa4a:	000f      	movs	r7, r1
 800aa4c:	f7f5 fcfe 	bl	800044c <__aeabi_dcmpeq>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d0b6      	beq.n	800a9c2 <_strtod_l+0x8fe>
 800aa54:	e60c      	b.n	800a670 <_strtod_l+0x5ac>
 800aa56:	9907      	ldr	r1, [sp, #28]
 800aa58:	9806      	ldr	r0, [sp, #24]
 800aa5a:	f7ff faad 	bl	8009fb8 <__ratio>
 800aa5e:	2380      	movs	r3, #128	@ 0x80
 800aa60:	2200      	movs	r2, #0
 800aa62:	05db      	lsls	r3, r3, #23
 800aa64:	0004      	movs	r4, r0
 800aa66:	000d      	movs	r5, r1
 800aa68:	f7f5 fd00 	bl	800046c <__aeabi_dcmple>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d06c      	beq.n	800ab4a <_strtod_l+0xa86>
 800aa70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d177      	bne.n	800ab66 <_strtod_l+0xaa2>
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d157      	bne.n	800ab2a <_strtod_l+0xa66>
 800aa7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7c:	031b      	lsls	r3, r3, #12
 800aa7e:	d15a      	bne.n	800ab36 <_strtod_l+0xa72>
 800aa80:	2200      	movs	r2, #0
 800aa82:	0020      	movs	r0, r4
 800aa84:	0029      	movs	r1, r5
 800aa86:	4b7a      	ldr	r3, [pc, #488]	@ (800ac70 <_strtod_l+0xbac>)
 800aa88:	f7f5 fce6 	bl	8000458 <__aeabi_dcmplt>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d159      	bne.n	800ab44 <_strtod_l+0xa80>
 800aa90:	0020      	movs	r0, r4
 800aa92:	0029      	movs	r1, r5
 800aa94:	2200      	movs	r2, #0
 800aa96:	4b77      	ldr	r3, [pc, #476]	@ (800ac74 <_strtod_l+0xbb0>)
 800aa98:	f7f7 fd86 	bl	80025a8 <__aeabi_dmul>
 800aa9c:	0004      	movs	r4, r0
 800aa9e:	000d      	movs	r5, r1
 800aaa0:	2380      	movs	r3, #128	@ 0x80
 800aaa2:	061b      	lsls	r3, r3, #24
 800aaa4:	18eb      	adds	r3, r5, r3
 800aaa6:	940a      	str	r4, [sp, #40]	@ 0x28
 800aaa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aaac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaae:	9214      	str	r2, [sp, #80]	@ 0x50
 800aab0:	9315      	str	r3, [sp, #84]	@ 0x54
 800aab2:	4a71      	ldr	r2, [pc, #452]	@ (800ac78 <_strtod_l+0xbb4>)
 800aab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab6:	4013      	ands	r3, r2
 800aab8:	9316      	str	r3, [sp, #88]	@ 0x58
 800aaba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aabc:	4b6f      	ldr	r3, [pc, #444]	@ (800ac7c <_strtod_l+0xbb8>)
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d000      	beq.n	800aac4 <_strtod_l+0xa00>
 800aac2:	e087      	b.n	800abd4 <_strtod_l+0xb10>
 800aac4:	4a6e      	ldr	r2, [pc, #440]	@ (800ac80 <_strtod_l+0xbbc>)
 800aac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aac8:	4694      	mov	ip, r2
 800aaca:	4463      	add	r3, ip
 800aacc:	001f      	movs	r7, r3
 800aace:	0030      	movs	r0, r6
 800aad0:	0019      	movs	r1, r3
 800aad2:	f7ff f9a5 	bl	8009e20 <__ulp>
 800aad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aada:	f7f7 fd65 	bl	80025a8 <__aeabi_dmul>
 800aade:	0032      	movs	r2, r6
 800aae0:	003b      	movs	r3, r7
 800aae2:	f7f6 fdb9 	bl	8001658 <__aeabi_dadd>
 800aae6:	4a64      	ldr	r2, [pc, #400]	@ (800ac78 <_strtod_l+0xbb4>)
 800aae8:	4b66      	ldr	r3, [pc, #408]	@ (800ac84 <_strtod_l+0xbc0>)
 800aaea:	0006      	movs	r6, r0
 800aaec:	400a      	ands	r2, r1
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d940      	bls.n	800ab74 <_strtod_l+0xab0>
 800aaf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaf4:	4a64      	ldr	r2, [pc, #400]	@ (800ac88 <_strtod_l+0xbc4>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d103      	bne.n	800ab02 <_strtod_l+0xa3e>
 800aafa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aafc:	3301      	adds	r3, #1
 800aafe:	d100      	bne.n	800ab02 <_strtod_l+0xa3e>
 800ab00:	e51a      	b.n	800a538 <_strtod_l+0x474>
 800ab02:	2601      	movs	r6, #1
 800ab04:	4f60      	ldr	r7, [pc, #384]	@ (800ac88 <_strtod_l+0xbc4>)
 800ab06:	4276      	negs	r6, r6
 800ab08:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ab0a:	9805      	ldr	r0, [sp, #20]
 800ab0c:	f7fe fe3c 	bl	8009788 <_Bfree>
 800ab10:	9908      	ldr	r1, [sp, #32]
 800ab12:	9805      	ldr	r0, [sp, #20]
 800ab14:	f7fe fe38 	bl	8009788 <_Bfree>
 800ab18:	9907      	ldr	r1, [sp, #28]
 800ab1a:	9805      	ldr	r0, [sp, #20]
 800ab1c:	f7fe fe34 	bl	8009788 <_Bfree>
 800ab20:	9906      	ldr	r1, [sp, #24]
 800ab22:	9805      	ldr	r0, [sp, #20]
 800ab24:	f7fe fe30 	bl	8009788 <_Bfree>
 800ab28:	e617      	b.n	800a75a <_strtod_l+0x696>
 800ab2a:	2e01      	cmp	r6, #1
 800ab2c:	d103      	bne.n	800ab36 <_strtod_l+0xa72>
 800ab2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d100      	bne.n	800ab36 <_strtod_l+0xa72>
 800ab34:	e59c      	b.n	800a670 <_strtod_l+0x5ac>
 800ab36:	2300      	movs	r3, #0
 800ab38:	4c54      	ldr	r4, [pc, #336]	@ (800ac8c <_strtod_l+0xbc8>)
 800ab3a:	4d4d      	ldr	r5, [pc, #308]	@ (800ac70 <_strtod_l+0xbac>)
 800ab3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab40:	2400      	movs	r4, #0
 800ab42:	e7b2      	b.n	800aaaa <_strtod_l+0x9e6>
 800ab44:	2400      	movs	r4, #0
 800ab46:	4d4b      	ldr	r5, [pc, #300]	@ (800ac74 <_strtod_l+0xbb0>)
 800ab48:	e7aa      	b.n	800aaa0 <_strtod_l+0x9dc>
 800ab4a:	0020      	movs	r0, r4
 800ab4c:	0029      	movs	r1, r5
 800ab4e:	4b49      	ldr	r3, [pc, #292]	@ (800ac74 <_strtod_l+0xbb0>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	f7f7 fd29 	bl	80025a8 <__aeabi_dmul>
 800ab56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab58:	0004      	movs	r4, r0
 800ab5a:	000d      	movs	r5, r1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d09f      	beq.n	800aaa0 <_strtod_l+0x9dc>
 800ab60:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab62:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ab64:	e7a1      	b.n	800aaaa <_strtod_l+0x9e6>
 800ab66:	2300      	movs	r3, #0
 800ab68:	4c41      	ldr	r4, [pc, #260]	@ (800ac70 <_strtod_l+0xbac>)
 800ab6a:	0025      	movs	r5, r4
 800ab6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab70:	001c      	movs	r4, r3
 800ab72:	e79a      	b.n	800aaaa <_strtod_l+0x9e6>
 800ab74:	23d4      	movs	r3, #212	@ 0xd4
 800ab76:	049b      	lsls	r3, r3, #18
 800ab78:	18cf      	adds	r7, r1, r3
 800ab7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7c:	9710      	str	r7, [sp, #64]	@ 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1c2      	bne.n	800ab08 <_strtod_l+0xa44>
 800ab82:	4b3d      	ldr	r3, [pc, #244]	@ (800ac78 <_strtod_l+0xbb4>)
 800ab84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab86:	403b      	ands	r3, r7
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d1bd      	bne.n	800ab08 <_strtod_l+0xa44>
 800ab8c:	0020      	movs	r0, r4
 800ab8e:	0029      	movs	r1, r5
 800ab90:	f7f5 fd30 	bl	80005f4 <__aeabi_d2lz>
 800ab94:	f7f5 fd68 	bl	8000668 <__aeabi_l2d>
 800ab98:	0002      	movs	r2, r0
 800ab9a:	000b      	movs	r3, r1
 800ab9c:	0020      	movs	r0, r4
 800ab9e:	0029      	movs	r1, r5
 800aba0:	f7f7 ffca 	bl	8002b38 <__aeabi_dsub>
 800aba4:	033c      	lsls	r4, r7, #12
 800aba6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aba8:	0b24      	lsrs	r4, r4, #12
 800abaa:	4334      	orrs	r4, r6
 800abac:	900e      	str	r0, [sp, #56]	@ 0x38
 800abae:	910f      	str	r1, [sp, #60]	@ 0x3c
 800abb0:	4a37      	ldr	r2, [pc, #220]	@ (800ac90 <_strtod_l+0xbcc>)
 800abb2:	431c      	orrs	r4, r3
 800abb4:	d052      	beq.n	800ac5c <_strtod_l+0xb98>
 800abb6:	4b37      	ldr	r3, [pc, #220]	@ (800ac94 <_strtod_l+0xbd0>)
 800abb8:	f7f5 fc4e 	bl	8000458 <__aeabi_dcmplt>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d000      	beq.n	800abc2 <_strtod_l+0xafe>
 800abc0:	e4c3      	b.n	800a54a <_strtod_l+0x486>
 800abc2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800abc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abc6:	4a34      	ldr	r2, [pc, #208]	@ (800ac98 <_strtod_l+0xbd4>)
 800abc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac74 <_strtod_l+0xbb0>)
 800abca:	f7f5 fc59 	bl	8000480 <__aeabi_dcmpgt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d09a      	beq.n	800ab08 <_strtod_l+0xa44>
 800abd2:	e4ba      	b.n	800a54a <_strtod_l+0x486>
 800abd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d02a      	beq.n	800ac30 <_strtod_l+0xb6c>
 800abda:	23d4      	movs	r3, #212	@ 0xd4
 800abdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abde:	04db      	lsls	r3, r3, #19
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d825      	bhi.n	800ac30 <_strtod_l+0xb6c>
 800abe4:	0020      	movs	r0, r4
 800abe6:	0029      	movs	r1, r5
 800abe8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac9c <_strtod_l+0xbd8>)
 800abea:	4b2d      	ldr	r3, [pc, #180]	@ (800aca0 <_strtod_l+0xbdc>)
 800abec:	f7f5 fc3e 	bl	800046c <__aeabi_dcmple>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d016      	beq.n	800ac22 <_strtod_l+0xb5e>
 800abf4:	0020      	movs	r0, r4
 800abf6:	0029      	movs	r1, r5
 800abf8:	f7f5 fcde 	bl	80005b8 <__aeabi_d2uiz>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d100      	bne.n	800ac02 <_strtod_l+0xb3e>
 800ac00:	3001      	adds	r0, #1
 800ac02:	f7f8 fbc1 	bl	8003388 <__aeabi_ui2d>
 800ac06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac08:	0004      	movs	r4, r0
 800ac0a:	000d      	movs	r5, r1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d122      	bne.n	800ac56 <_strtod_l+0xb92>
 800ac10:	2380      	movs	r3, #128	@ 0x80
 800ac12:	061b      	lsls	r3, r3, #24
 800ac14:	18cb      	adds	r3, r1, r3
 800ac16:	9018      	str	r0, [sp, #96]	@ 0x60
 800ac18:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ac1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac1e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ac20:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac22:	22d6      	movs	r2, #214	@ 0xd6
 800ac24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac26:	04d2      	lsls	r2, r2, #19
 800ac28:	189b      	adds	r3, r3, r2
 800ac2a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac2c:	1a9b      	subs	r3, r3, r2
 800ac2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac30:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ac32:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ac34:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ac36:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ac38:	f7ff f8f2 	bl	8009e20 <__ulp>
 800ac3c:	0002      	movs	r2, r0
 800ac3e:	000b      	movs	r3, r1
 800ac40:	0030      	movs	r0, r6
 800ac42:	0039      	movs	r1, r7
 800ac44:	f7f7 fcb0 	bl	80025a8 <__aeabi_dmul>
 800ac48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ac4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac4c:	f7f6 fd04 	bl	8001658 <__aeabi_dadd>
 800ac50:	0006      	movs	r6, r0
 800ac52:	000f      	movs	r7, r1
 800ac54:	e791      	b.n	800ab7a <_strtod_l+0xab6>
 800ac56:	9418      	str	r4, [sp, #96]	@ 0x60
 800ac58:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac5a:	e7de      	b.n	800ac1a <_strtod_l+0xb56>
 800ac5c:	4b11      	ldr	r3, [pc, #68]	@ (800aca4 <_strtod_l+0xbe0>)
 800ac5e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ac60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac62:	f7f5 fbf9 	bl	8000458 <__aeabi_dcmplt>
 800ac66:	e7b2      	b.n	800abce <_strtod_l+0xb0a>
 800ac68:	fff00000 	.word	0xfff00000
 800ac6c:	000fffff 	.word	0x000fffff
 800ac70:	3ff00000 	.word	0x3ff00000
 800ac74:	3fe00000 	.word	0x3fe00000
 800ac78:	7ff00000 	.word	0x7ff00000
 800ac7c:	7fe00000 	.word	0x7fe00000
 800ac80:	fcb00000 	.word	0xfcb00000
 800ac84:	7c9fffff 	.word	0x7c9fffff
 800ac88:	7fefffff 	.word	0x7fefffff
 800ac8c:	bff00000 	.word	0xbff00000
 800ac90:	94a03595 	.word	0x94a03595
 800ac94:	3fdfffff 	.word	0x3fdfffff
 800ac98:	35afe535 	.word	0x35afe535
 800ac9c:	ffc00000 	.word	0xffc00000
 800aca0:	41dfffff 	.word	0x41dfffff
 800aca4:	3fcfffff 	.word	0x3fcfffff

0800aca8 <_strtod_r>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	4b02      	ldr	r3, [pc, #8]	@ (800acb4 <_strtod_r+0xc>)
 800acac:	f7ff fa0a 	bl	800a0c4 <_strtod_l>
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	46c0      	nop			@ (mov r8, r8)
 800acb4:	20000078 	.word	0x20000078

0800acb8 <_strtol_l.constprop.0>:
 800acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acba:	b085      	sub	sp, #20
 800acbc:	0017      	movs	r7, r2
 800acbe:	001e      	movs	r6, r3
 800acc0:	9003      	str	r0, [sp, #12]
 800acc2:	9101      	str	r1, [sp, #4]
 800acc4:	2b24      	cmp	r3, #36	@ 0x24
 800acc6:	d844      	bhi.n	800ad52 <_strtol_l.constprop.0+0x9a>
 800acc8:	000c      	movs	r4, r1
 800acca:	2b01      	cmp	r3, #1
 800accc:	d041      	beq.n	800ad52 <_strtol_l.constprop.0+0x9a>
 800acce:	4b3d      	ldr	r3, [pc, #244]	@ (800adc4 <_strtol_l.constprop.0+0x10c>)
 800acd0:	2208      	movs	r2, #8
 800acd2:	469c      	mov	ip, r3
 800acd4:	0023      	movs	r3, r4
 800acd6:	4661      	mov	r1, ip
 800acd8:	781d      	ldrb	r5, [r3, #0]
 800acda:	3401      	adds	r4, #1
 800acdc:	5d48      	ldrb	r0, [r1, r5]
 800acde:	0001      	movs	r1, r0
 800ace0:	4011      	ands	r1, r2
 800ace2:	4210      	tst	r0, r2
 800ace4:	d1f6      	bne.n	800acd4 <_strtol_l.constprop.0+0x1c>
 800ace6:	2d2d      	cmp	r5, #45	@ 0x2d
 800ace8:	d13a      	bne.n	800ad60 <_strtol_l.constprop.0+0xa8>
 800acea:	7825      	ldrb	r5, [r4, #0]
 800acec:	1c9c      	adds	r4, r3, #2
 800acee:	2301      	movs	r3, #1
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	2210      	movs	r2, #16
 800acf4:	0033      	movs	r3, r6
 800acf6:	4393      	bics	r3, r2
 800acf8:	d109      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800acfa:	2d30      	cmp	r5, #48	@ 0x30
 800acfc:	d136      	bne.n	800ad6c <_strtol_l.constprop.0+0xb4>
 800acfe:	2120      	movs	r1, #32
 800ad00:	7823      	ldrb	r3, [r4, #0]
 800ad02:	438b      	bics	r3, r1
 800ad04:	2b58      	cmp	r3, #88	@ 0x58
 800ad06:	d131      	bne.n	800ad6c <_strtol_l.constprop.0+0xb4>
 800ad08:	0016      	movs	r6, r2
 800ad0a:	7865      	ldrb	r5, [r4, #1]
 800ad0c:	3402      	adds	r4, #2
 800ad0e:	4a2e      	ldr	r2, [pc, #184]	@ (800adc8 <_strtol_l.constprop.0+0x110>)
 800ad10:	9b00      	ldr	r3, [sp, #0]
 800ad12:	4694      	mov	ip, r2
 800ad14:	4463      	add	r3, ip
 800ad16:	0031      	movs	r1, r6
 800ad18:	0018      	movs	r0, r3
 800ad1a:	9302      	str	r3, [sp, #8]
 800ad1c:	f7f5 fa96 	bl	800024c <__aeabi_uidivmod>
 800ad20:	2200      	movs	r2, #0
 800ad22:	4684      	mov	ip, r0
 800ad24:	0010      	movs	r0, r2
 800ad26:	002b      	movs	r3, r5
 800ad28:	3b30      	subs	r3, #48	@ 0x30
 800ad2a:	2b09      	cmp	r3, #9
 800ad2c:	d825      	bhi.n	800ad7a <_strtol_l.constprop.0+0xc2>
 800ad2e:	001d      	movs	r5, r3
 800ad30:	42ae      	cmp	r6, r5
 800ad32:	dd31      	ble.n	800ad98 <_strtol_l.constprop.0+0xe0>
 800ad34:	1c53      	adds	r3, r2, #1
 800ad36:	d009      	beq.n	800ad4c <_strtol_l.constprop.0+0x94>
 800ad38:	2201      	movs	r2, #1
 800ad3a:	4252      	negs	r2, r2
 800ad3c:	4584      	cmp	ip, r0
 800ad3e:	d305      	bcc.n	800ad4c <_strtol_l.constprop.0+0x94>
 800ad40:	d101      	bne.n	800ad46 <_strtol_l.constprop.0+0x8e>
 800ad42:	42a9      	cmp	r1, r5
 800ad44:	db25      	blt.n	800ad92 <_strtol_l.constprop.0+0xda>
 800ad46:	2201      	movs	r2, #1
 800ad48:	4370      	muls	r0, r6
 800ad4a:	1828      	adds	r0, r5, r0
 800ad4c:	7825      	ldrb	r5, [r4, #0]
 800ad4e:	3401      	adds	r4, #1
 800ad50:	e7e9      	b.n	800ad26 <_strtol_l.constprop.0+0x6e>
 800ad52:	f7fd fd11 	bl	8008778 <__errno>
 800ad56:	2316      	movs	r3, #22
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	b005      	add	sp, #20
 800ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad60:	9100      	str	r1, [sp, #0]
 800ad62:	2d2b      	cmp	r5, #43	@ 0x2b
 800ad64:	d1c5      	bne.n	800acf2 <_strtol_l.constprop.0+0x3a>
 800ad66:	7825      	ldrb	r5, [r4, #0]
 800ad68:	1c9c      	adds	r4, r3, #2
 800ad6a:	e7c2      	b.n	800acf2 <_strtol_l.constprop.0+0x3a>
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	d1ce      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800ad70:	3608      	adds	r6, #8
 800ad72:	2d30      	cmp	r5, #48	@ 0x30
 800ad74:	d0cb      	beq.n	800ad0e <_strtol_l.constprop.0+0x56>
 800ad76:	3602      	adds	r6, #2
 800ad78:	e7c9      	b.n	800ad0e <_strtol_l.constprop.0+0x56>
 800ad7a:	002b      	movs	r3, r5
 800ad7c:	3b41      	subs	r3, #65	@ 0x41
 800ad7e:	2b19      	cmp	r3, #25
 800ad80:	d801      	bhi.n	800ad86 <_strtol_l.constprop.0+0xce>
 800ad82:	3d37      	subs	r5, #55	@ 0x37
 800ad84:	e7d4      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad86:	002b      	movs	r3, r5
 800ad88:	3b61      	subs	r3, #97	@ 0x61
 800ad8a:	2b19      	cmp	r3, #25
 800ad8c:	d804      	bhi.n	800ad98 <_strtol_l.constprop.0+0xe0>
 800ad8e:	3d57      	subs	r5, #87	@ 0x57
 800ad90:	e7ce      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad92:	2201      	movs	r2, #1
 800ad94:	4252      	negs	r2, r2
 800ad96:	e7d9      	b.n	800ad4c <_strtol_l.constprop.0+0x94>
 800ad98:	1c53      	adds	r3, r2, #1
 800ad9a:	d108      	bne.n	800adae <_strtol_l.constprop.0+0xf6>
 800ad9c:	2322      	movs	r3, #34	@ 0x22
 800ad9e:	9a03      	ldr	r2, [sp, #12]
 800ada0:	9802      	ldr	r0, [sp, #8]
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	2f00      	cmp	r7, #0
 800ada6:	d0d9      	beq.n	800ad5c <_strtol_l.constprop.0+0xa4>
 800ada8:	1e63      	subs	r3, r4, #1
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	e007      	b.n	800adbe <_strtol_l.constprop.0+0x106>
 800adae:	9b00      	ldr	r3, [sp, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d000      	beq.n	800adb6 <_strtol_l.constprop.0+0xfe>
 800adb4:	4240      	negs	r0, r0
 800adb6:	2f00      	cmp	r7, #0
 800adb8:	d0d0      	beq.n	800ad5c <_strtol_l.constprop.0+0xa4>
 800adba:	2a00      	cmp	r2, #0
 800adbc:	d1f4      	bne.n	800ada8 <_strtol_l.constprop.0+0xf0>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	e7cb      	b.n	800ad5c <_strtol_l.constprop.0+0xa4>
 800adc4:	0800c7a1 	.word	0x0800c7a1
 800adc8:	7fffffff 	.word	0x7fffffff

0800adcc <_strtol_r>:
 800adcc:	b510      	push	{r4, lr}
 800adce:	f7ff ff73 	bl	800acb8 <_strtol_l.constprop.0>
 800add2:	bd10      	pop	{r4, pc}

0800add4 <__ssputs_r>:
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	688e      	ldr	r6, [r1, #8]
 800add8:	b085      	sub	sp, #20
 800adda:	001f      	movs	r7, r3
 800addc:	000c      	movs	r4, r1
 800adde:	680b      	ldr	r3, [r1, #0]
 800ade0:	9002      	str	r0, [sp, #8]
 800ade2:	9203      	str	r2, [sp, #12]
 800ade4:	42be      	cmp	r6, r7
 800ade6:	d830      	bhi.n	800ae4a <__ssputs_r+0x76>
 800ade8:	210c      	movs	r1, #12
 800adea:	5e62      	ldrsh	r2, [r4, r1]
 800adec:	2190      	movs	r1, #144	@ 0x90
 800adee:	00c9      	lsls	r1, r1, #3
 800adf0:	420a      	tst	r2, r1
 800adf2:	d028      	beq.n	800ae46 <__ssputs_r+0x72>
 800adf4:	2003      	movs	r0, #3
 800adf6:	6921      	ldr	r1, [r4, #16]
 800adf8:	1a5b      	subs	r3, r3, r1
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	6963      	ldr	r3, [r4, #20]
 800adfe:	4343      	muls	r3, r0
 800ae00:	9801      	ldr	r0, [sp, #4]
 800ae02:	0fdd      	lsrs	r5, r3, #31
 800ae04:	18ed      	adds	r5, r5, r3
 800ae06:	1c7b      	adds	r3, r7, #1
 800ae08:	181b      	adds	r3, r3, r0
 800ae0a:	106d      	asrs	r5, r5, #1
 800ae0c:	42ab      	cmp	r3, r5
 800ae0e:	d900      	bls.n	800ae12 <__ssputs_r+0x3e>
 800ae10:	001d      	movs	r5, r3
 800ae12:	0552      	lsls	r2, r2, #21
 800ae14:	d528      	bpl.n	800ae68 <__ssputs_r+0x94>
 800ae16:	0029      	movs	r1, r5
 800ae18:	9802      	ldr	r0, [sp, #8]
 800ae1a:	f7fe fbe1 	bl	80095e0 <_malloc_r>
 800ae1e:	1e06      	subs	r6, r0, #0
 800ae20:	d02c      	beq.n	800ae7c <__ssputs_r+0xa8>
 800ae22:	9a01      	ldr	r2, [sp, #4]
 800ae24:	6921      	ldr	r1, [r4, #16]
 800ae26:	f000 fa1b 	bl	800b260 <memcpy>
 800ae2a:	89a2      	ldrh	r2, [r4, #12]
 800ae2c:	4b18      	ldr	r3, [pc, #96]	@ (800ae90 <__ssputs_r+0xbc>)
 800ae2e:	401a      	ands	r2, r3
 800ae30:	2380      	movs	r3, #128	@ 0x80
 800ae32:	4313      	orrs	r3, r2
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	6126      	str	r6, [r4, #16]
 800ae3a:	18f6      	adds	r6, r6, r3
 800ae3c:	6026      	str	r6, [r4, #0]
 800ae3e:	003e      	movs	r6, r7
 800ae40:	6165      	str	r5, [r4, #20]
 800ae42:	1aed      	subs	r5, r5, r3
 800ae44:	60a5      	str	r5, [r4, #8]
 800ae46:	42be      	cmp	r6, r7
 800ae48:	d900      	bls.n	800ae4c <__ssputs_r+0x78>
 800ae4a:	003e      	movs	r6, r7
 800ae4c:	0032      	movs	r2, r6
 800ae4e:	9903      	ldr	r1, [sp, #12]
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	f000 f9ce 	bl	800b1f2 <memmove>
 800ae56:	2000      	movs	r0, #0
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	1b9b      	subs	r3, r3, r6
 800ae5c:	60a3      	str	r3, [r4, #8]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	199b      	adds	r3, r3, r6
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	b005      	add	sp, #20
 800ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae68:	002a      	movs	r2, r5
 800ae6a:	9802      	ldr	r0, [sp, #8]
 800ae6c:	f000 fdc0 	bl	800b9f0 <_realloc_r>
 800ae70:	1e06      	subs	r6, r0, #0
 800ae72:	d1e0      	bne.n	800ae36 <__ssputs_r+0x62>
 800ae74:	6921      	ldr	r1, [r4, #16]
 800ae76:	9802      	ldr	r0, [sp, #8]
 800ae78:	f7fe fb3c 	bl	80094f4 <_free_r>
 800ae7c:	230c      	movs	r3, #12
 800ae7e:	2001      	movs	r0, #1
 800ae80:	9a02      	ldr	r2, [sp, #8]
 800ae82:	4240      	negs	r0, r0
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	89a2      	ldrh	r2, [r4, #12]
 800ae88:	3334      	adds	r3, #52	@ 0x34
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	e7e9      	b.n	800ae64 <__ssputs_r+0x90>
 800ae90:	fffffb7f 	.word	0xfffffb7f

0800ae94 <_svfiprintf_r>:
 800ae94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae96:	b0a1      	sub	sp, #132	@ 0x84
 800ae98:	9003      	str	r0, [sp, #12]
 800ae9a:	001d      	movs	r5, r3
 800ae9c:	898b      	ldrh	r3, [r1, #12]
 800ae9e:	000f      	movs	r7, r1
 800aea0:	0016      	movs	r6, r2
 800aea2:	061b      	lsls	r3, r3, #24
 800aea4:	d511      	bpl.n	800aeca <_svfiprintf_r+0x36>
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10e      	bne.n	800aeca <_svfiprintf_r+0x36>
 800aeac:	2140      	movs	r1, #64	@ 0x40
 800aeae:	f7fe fb97 	bl	80095e0 <_malloc_r>
 800aeb2:	6038      	str	r0, [r7, #0]
 800aeb4:	6138      	str	r0, [r7, #16]
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d105      	bne.n	800aec6 <_svfiprintf_r+0x32>
 800aeba:	230c      	movs	r3, #12
 800aebc:	9a03      	ldr	r2, [sp, #12]
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	2001      	movs	r0, #1
 800aec2:	4240      	negs	r0, r0
 800aec4:	e0cf      	b.n	800b066 <_svfiprintf_r+0x1d2>
 800aec6:	2340      	movs	r3, #64	@ 0x40
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	2300      	movs	r3, #0
 800aecc:	ac08      	add	r4, sp, #32
 800aece:	6163      	str	r3, [r4, #20]
 800aed0:	3320      	adds	r3, #32
 800aed2:	7663      	strb	r3, [r4, #25]
 800aed4:	3310      	adds	r3, #16
 800aed6:	76a3      	strb	r3, [r4, #26]
 800aed8:	9507      	str	r5, [sp, #28]
 800aeda:	0035      	movs	r5, r6
 800aedc:	782b      	ldrb	r3, [r5, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <_svfiprintf_r+0x52>
 800aee2:	2b25      	cmp	r3, #37	@ 0x25
 800aee4:	d148      	bne.n	800af78 <_svfiprintf_r+0xe4>
 800aee6:	1bab      	subs	r3, r5, r6
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	42b5      	cmp	r5, r6
 800aeec:	d00b      	beq.n	800af06 <_svfiprintf_r+0x72>
 800aeee:	0032      	movs	r2, r6
 800aef0:	0039      	movs	r1, r7
 800aef2:	9803      	ldr	r0, [sp, #12]
 800aef4:	f7ff ff6e 	bl	800add4 <__ssputs_r>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d100      	bne.n	800aefe <_svfiprintf_r+0x6a>
 800aefc:	e0ae      	b.n	800b05c <_svfiprintf_r+0x1c8>
 800aefe:	6963      	ldr	r3, [r4, #20]
 800af00:	9a05      	ldr	r2, [sp, #20]
 800af02:	189b      	adds	r3, r3, r2
 800af04:	6163      	str	r3, [r4, #20]
 800af06:	782b      	ldrb	r3, [r5, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d100      	bne.n	800af0e <_svfiprintf_r+0x7a>
 800af0c:	e0a6      	b.n	800b05c <_svfiprintf_r+0x1c8>
 800af0e:	2201      	movs	r2, #1
 800af10:	2300      	movs	r3, #0
 800af12:	4252      	negs	r2, r2
 800af14:	6062      	str	r2, [r4, #4]
 800af16:	a904      	add	r1, sp, #16
 800af18:	3254      	adds	r2, #84	@ 0x54
 800af1a:	1852      	adds	r2, r2, r1
 800af1c:	1c6e      	adds	r6, r5, #1
 800af1e:	6023      	str	r3, [r4, #0]
 800af20:	60e3      	str	r3, [r4, #12]
 800af22:	60a3      	str	r3, [r4, #8]
 800af24:	7013      	strb	r3, [r2, #0]
 800af26:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af28:	4b54      	ldr	r3, [pc, #336]	@ (800b07c <_svfiprintf_r+0x1e8>)
 800af2a:	2205      	movs	r2, #5
 800af2c:	0018      	movs	r0, r3
 800af2e:	7831      	ldrb	r1, [r6, #0]
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	f7fd fc4e 	bl	80087d2 <memchr>
 800af36:	1c75      	adds	r5, r6, #1
 800af38:	2800      	cmp	r0, #0
 800af3a:	d11f      	bne.n	800af7c <_svfiprintf_r+0xe8>
 800af3c:	6822      	ldr	r2, [r4, #0]
 800af3e:	06d3      	lsls	r3, r2, #27
 800af40:	d504      	bpl.n	800af4c <_svfiprintf_r+0xb8>
 800af42:	2353      	movs	r3, #83	@ 0x53
 800af44:	a904      	add	r1, sp, #16
 800af46:	185b      	adds	r3, r3, r1
 800af48:	2120      	movs	r1, #32
 800af4a:	7019      	strb	r1, [r3, #0]
 800af4c:	0713      	lsls	r3, r2, #28
 800af4e:	d504      	bpl.n	800af5a <_svfiprintf_r+0xc6>
 800af50:	2353      	movs	r3, #83	@ 0x53
 800af52:	a904      	add	r1, sp, #16
 800af54:	185b      	adds	r3, r3, r1
 800af56:	212b      	movs	r1, #43	@ 0x2b
 800af58:	7019      	strb	r1, [r3, #0]
 800af5a:	7833      	ldrb	r3, [r6, #0]
 800af5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af5e:	d016      	beq.n	800af8e <_svfiprintf_r+0xfa>
 800af60:	0035      	movs	r5, r6
 800af62:	2100      	movs	r1, #0
 800af64:	200a      	movs	r0, #10
 800af66:	68e3      	ldr	r3, [r4, #12]
 800af68:	782a      	ldrb	r2, [r5, #0]
 800af6a:	1c6e      	adds	r6, r5, #1
 800af6c:	3a30      	subs	r2, #48	@ 0x30
 800af6e:	2a09      	cmp	r2, #9
 800af70:	d950      	bls.n	800b014 <_svfiprintf_r+0x180>
 800af72:	2900      	cmp	r1, #0
 800af74:	d111      	bne.n	800af9a <_svfiprintf_r+0x106>
 800af76:	e017      	b.n	800afa8 <_svfiprintf_r+0x114>
 800af78:	3501      	adds	r5, #1
 800af7a:	e7af      	b.n	800aedc <_svfiprintf_r+0x48>
 800af7c:	9b05      	ldr	r3, [sp, #20]
 800af7e:	6822      	ldr	r2, [r4, #0]
 800af80:	1ac0      	subs	r0, r0, r3
 800af82:	2301      	movs	r3, #1
 800af84:	4083      	lsls	r3, r0
 800af86:	4313      	orrs	r3, r2
 800af88:	002e      	movs	r6, r5
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	e7cc      	b.n	800af28 <_svfiprintf_r+0x94>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	1d19      	adds	r1, r3, #4
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	9107      	str	r1, [sp, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	db01      	blt.n	800af9e <_svfiprintf_r+0x10a>
 800af9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af9c:	e004      	b.n	800afa8 <_svfiprintf_r+0x114>
 800af9e:	425b      	negs	r3, r3
 800afa0:	60e3      	str	r3, [r4, #12]
 800afa2:	2302      	movs	r3, #2
 800afa4:	4313      	orrs	r3, r2
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	782b      	ldrb	r3, [r5, #0]
 800afaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800afac:	d10c      	bne.n	800afc8 <_svfiprintf_r+0x134>
 800afae:	786b      	ldrb	r3, [r5, #1]
 800afb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb2:	d134      	bne.n	800b01e <_svfiprintf_r+0x18a>
 800afb4:	9b07      	ldr	r3, [sp, #28]
 800afb6:	3502      	adds	r5, #2
 800afb8:	1d1a      	adds	r2, r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	9207      	str	r2, [sp, #28]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da01      	bge.n	800afc6 <_svfiprintf_r+0x132>
 800afc2:	2301      	movs	r3, #1
 800afc4:	425b      	negs	r3, r3
 800afc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc8:	4e2d      	ldr	r6, [pc, #180]	@ (800b080 <_svfiprintf_r+0x1ec>)
 800afca:	2203      	movs	r2, #3
 800afcc:	0030      	movs	r0, r6
 800afce:	7829      	ldrb	r1, [r5, #0]
 800afd0:	f7fd fbff 	bl	80087d2 <memchr>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d006      	beq.n	800afe6 <_svfiprintf_r+0x152>
 800afd8:	2340      	movs	r3, #64	@ 0x40
 800afda:	1b80      	subs	r0, r0, r6
 800afdc:	4083      	lsls	r3, r0
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	3501      	adds	r5, #1
 800afe2:	4313      	orrs	r3, r2
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	7829      	ldrb	r1, [r5, #0]
 800afe8:	2206      	movs	r2, #6
 800afea:	4826      	ldr	r0, [pc, #152]	@ (800b084 <_svfiprintf_r+0x1f0>)
 800afec:	1c6e      	adds	r6, r5, #1
 800afee:	7621      	strb	r1, [r4, #24]
 800aff0:	f7fd fbef 	bl	80087d2 <memchr>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d038      	beq.n	800b06a <_svfiprintf_r+0x1d6>
 800aff8:	4b23      	ldr	r3, [pc, #140]	@ (800b088 <_svfiprintf_r+0x1f4>)
 800affa:	2b00      	cmp	r3, #0
 800affc:	d122      	bne.n	800b044 <_svfiprintf_r+0x1b0>
 800affe:	2207      	movs	r2, #7
 800b000:	9b07      	ldr	r3, [sp, #28]
 800b002:	3307      	adds	r3, #7
 800b004:	4393      	bics	r3, r2
 800b006:	3308      	adds	r3, #8
 800b008:	9307      	str	r3, [sp, #28]
 800b00a:	6963      	ldr	r3, [r4, #20]
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	189b      	adds	r3, r3, r2
 800b010:	6163      	str	r3, [r4, #20]
 800b012:	e762      	b.n	800aeda <_svfiprintf_r+0x46>
 800b014:	4343      	muls	r3, r0
 800b016:	0035      	movs	r5, r6
 800b018:	2101      	movs	r1, #1
 800b01a:	189b      	adds	r3, r3, r2
 800b01c:	e7a4      	b.n	800af68 <_svfiprintf_r+0xd4>
 800b01e:	2300      	movs	r3, #0
 800b020:	200a      	movs	r0, #10
 800b022:	0019      	movs	r1, r3
 800b024:	3501      	adds	r5, #1
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	782a      	ldrb	r2, [r5, #0]
 800b02a:	1c6e      	adds	r6, r5, #1
 800b02c:	3a30      	subs	r2, #48	@ 0x30
 800b02e:	2a09      	cmp	r2, #9
 800b030:	d903      	bls.n	800b03a <_svfiprintf_r+0x1a6>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0c8      	beq.n	800afc8 <_svfiprintf_r+0x134>
 800b036:	9109      	str	r1, [sp, #36]	@ 0x24
 800b038:	e7c6      	b.n	800afc8 <_svfiprintf_r+0x134>
 800b03a:	4341      	muls	r1, r0
 800b03c:	0035      	movs	r5, r6
 800b03e:	2301      	movs	r3, #1
 800b040:	1889      	adds	r1, r1, r2
 800b042:	e7f1      	b.n	800b028 <_svfiprintf_r+0x194>
 800b044:	aa07      	add	r2, sp, #28
 800b046:	9200      	str	r2, [sp, #0]
 800b048:	0021      	movs	r1, r4
 800b04a:	003a      	movs	r2, r7
 800b04c:	4b0f      	ldr	r3, [pc, #60]	@ (800b08c <_svfiprintf_r+0x1f8>)
 800b04e:	9803      	ldr	r0, [sp, #12]
 800b050:	f7fc fc0a 	bl	8007868 <_printf_float>
 800b054:	9004      	str	r0, [sp, #16]
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	3301      	adds	r3, #1
 800b05a:	d1d6      	bne.n	800b00a <_svfiprintf_r+0x176>
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b060:	065b      	lsls	r3, r3, #25
 800b062:	d500      	bpl.n	800b066 <_svfiprintf_r+0x1d2>
 800b064:	e72c      	b.n	800aec0 <_svfiprintf_r+0x2c>
 800b066:	b021      	add	sp, #132	@ 0x84
 800b068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06a:	aa07      	add	r2, sp, #28
 800b06c:	9200      	str	r2, [sp, #0]
 800b06e:	0021      	movs	r1, r4
 800b070:	003a      	movs	r2, r7
 800b072:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <_svfiprintf_r+0x1f8>)
 800b074:	9803      	ldr	r0, [sp, #12]
 800b076:	f7fc fea5 	bl	8007dc4 <_printf_i>
 800b07a:	e7eb      	b.n	800b054 <_svfiprintf_r+0x1c0>
 800b07c:	0800c8a1 	.word	0x0800c8a1
 800b080:	0800c8a7 	.word	0x0800c8a7
 800b084:	0800c8ab 	.word	0x0800c8ab
 800b088:	08007869 	.word	0x08007869
 800b08c:	0800add5 	.word	0x0800add5

0800b090 <__sflush_r>:
 800b090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b092:	220c      	movs	r2, #12
 800b094:	5e8b      	ldrsh	r3, [r1, r2]
 800b096:	0005      	movs	r5, r0
 800b098:	000c      	movs	r4, r1
 800b09a:	071a      	lsls	r2, r3, #28
 800b09c:	d456      	bmi.n	800b14c <__sflush_r+0xbc>
 800b09e:	684a      	ldr	r2, [r1, #4]
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	dc02      	bgt.n	800b0aa <__sflush_r+0x1a>
 800b0a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	dd4e      	ble.n	800b148 <__sflush_r+0xb8>
 800b0aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b0ac:	2f00      	cmp	r7, #0
 800b0ae:	d04b      	beq.n	800b148 <__sflush_r+0xb8>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2080      	movs	r0, #128	@ 0x80
 800b0b4:	682e      	ldr	r6, [r5, #0]
 800b0b6:	602a      	str	r2, [r5, #0]
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	0140      	lsls	r0, r0, #5
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	4002      	ands	r2, r0
 800b0c0:	4203      	tst	r3, r0
 800b0c2:	d033      	beq.n	800b12c <__sflush_r+0x9c>
 800b0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	075b      	lsls	r3, r3, #29
 800b0ca:	d506      	bpl.n	800b0da <__sflush_r+0x4a>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <__sflush_r+0x4a>
 800b0d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0d8:	1ad2      	subs	r2, r2, r3
 800b0da:	2300      	movs	r3, #0
 800b0dc:	0028      	movs	r0, r5
 800b0de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b0e0:	6a21      	ldr	r1, [r4, #32]
 800b0e2:	47b8      	blx	r7
 800b0e4:	89a2      	ldrh	r2, [r4, #12]
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d106      	bne.n	800b0f8 <__sflush_r+0x68>
 800b0ea:	6829      	ldr	r1, [r5, #0]
 800b0ec:	291d      	cmp	r1, #29
 800b0ee:	d846      	bhi.n	800b17e <__sflush_r+0xee>
 800b0f0:	4b29      	ldr	r3, [pc, #164]	@ (800b198 <__sflush_r+0x108>)
 800b0f2:	410b      	asrs	r3, r1
 800b0f4:	07db      	lsls	r3, r3, #31
 800b0f6:	d442      	bmi.n	800b17e <__sflush_r+0xee>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	04d2      	lsls	r2, r2, #19
 800b102:	d505      	bpl.n	800b110 <__sflush_r+0x80>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <__sflush_r+0x7e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d100      	bne.n	800b110 <__sflush_r+0x80>
 800b10e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b112:	602e      	str	r6, [r5, #0]
 800b114:	2900      	cmp	r1, #0
 800b116:	d017      	beq.n	800b148 <__sflush_r+0xb8>
 800b118:	0023      	movs	r3, r4
 800b11a:	3344      	adds	r3, #68	@ 0x44
 800b11c:	4299      	cmp	r1, r3
 800b11e:	d002      	beq.n	800b126 <__sflush_r+0x96>
 800b120:	0028      	movs	r0, r5
 800b122:	f7fe f9e7 	bl	80094f4 <_free_r>
 800b126:	2300      	movs	r3, #0
 800b128:	6363      	str	r3, [r4, #52]	@ 0x34
 800b12a:	e00d      	b.n	800b148 <__sflush_r+0xb8>
 800b12c:	2301      	movs	r3, #1
 800b12e:	0028      	movs	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	0002      	movs	r2, r0
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d1c6      	bne.n	800b0c6 <__sflush_r+0x36>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0c3      	beq.n	800b0c6 <__sflush_r+0x36>
 800b13e:	2b1d      	cmp	r3, #29
 800b140:	d001      	beq.n	800b146 <__sflush_r+0xb6>
 800b142:	2b16      	cmp	r3, #22
 800b144:	d11a      	bne.n	800b17c <__sflush_r+0xec>
 800b146:	602e      	str	r6, [r5, #0]
 800b148:	2000      	movs	r0, #0
 800b14a:	e01e      	b.n	800b18a <__sflush_r+0xfa>
 800b14c:	690e      	ldr	r6, [r1, #16]
 800b14e:	2e00      	cmp	r6, #0
 800b150:	d0fa      	beq.n	800b148 <__sflush_r+0xb8>
 800b152:	680f      	ldr	r7, [r1, #0]
 800b154:	600e      	str	r6, [r1, #0]
 800b156:	1bba      	subs	r2, r7, r6
 800b158:	9201      	str	r2, [sp, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	079b      	lsls	r3, r3, #30
 800b15e:	d100      	bne.n	800b162 <__sflush_r+0xd2>
 800b160:	694a      	ldr	r2, [r1, #20]
 800b162:	60a2      	str	r2, [r4, #8]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	ddee      	ble.n	800b148 <__sflush_r+0xb8>
 800b16a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b16c:	0032      	movs	r2, r6
 800b16e:	001f      	movs	r7, r3
 800b170:	0028      	movs	r0, r5
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	47b8      	blx	r7
 800b178:	2800      	cmp	r0, #0
 800b17a:	dc07      	bgt.n	800b18c <__sflush_r+0xfc>
 800b17c:	89a2      	ldrh	r2, [r4, #12]
 800b17e:	2340      	movs	r3, #64	@ 0x40
 800b180:	2001      	movs	r0, #1
 800b182:	4313      	orrs	r3, r2
 800b184:	b21b      	sxth	r3, r3
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	4240      	negs	r0, r0
 800b18a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	1836      	adds	r6, r6, r0
 800b190:	1a1b      	subs	r3, r3, r0
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	e7e6      	b.n	800b164 <__sflush_r+0xd4>
 800b196:	46c0      	nop			@ (mov r8, r8)
 800b198:	dfbffffe 	.word	0xdfbffffe

0800b19c <_fflush_r>:
 800b19c:	690b      	ldr	r3, [r1, #16]
 800b19e:	b570      	push	{r4, r5, r6, lr}
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	000c      	movs	r4, r1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <_fflush_r+0x12>
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	0028      	movs	r0, r5
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d004      	beq.n	800b1bc <_fflush_r+0x20>
 800b1b2:	6a03      	ldr	r3, [r0, #32]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <_fflush_r+0x20>
 800b1b8:	f7fd f9b0 	bl	800851c <__sinit>
 800b1bc:	220c      	movs	r2, #12
 800b1be:	5ea3      	ldrsh	r3, [r4, r2]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f1      	beq.n	800b1a8 <_fflush_r+0xc>
 800b1c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1c6:	07d2      	lsls	r2, r2, #31
 800b1c8:	d404      	bmi.n	800b1d4 <_fflush_r+0x38>
 800b1ca:	059b      	lsls	r3, r3, #22
 800b1cc:	d402      	bmi.n	800b1d4 <_fflush_r+0x38>
 800b1ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1d0:	f7fd fafd 	bl	80087ce <__retarget_lock_acquire_recursive>
 800b1d4:	0028      	movs	r0, r5
 800b1d6:	0021      	movs	r1, r4
 800b1d8:	f7ff ff5a 	bl	800b090 <__sflush_r>
 800b1dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1de:	0005      	movs	r5, r0
 800b1e0:	07db      	lsls	r3, r3, #31
 800b1e2:	d4e2      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	059b      	lsls	r3, r3, #22
 800b1e8:	d4df      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ec:	f7fd faf0 	bl	80087d0 <__retarget_lock_release_recursive>
 800b1f0:	e7db      	b.n	800b1aa <_fflush_r+0xe>

0800b1f2 <memmove>:
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	4288      	cmp	r0, r1
 800b1f6:	d806      	bhi.n	800b206 <memmove+0x14>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d008      	beq.n	800b210 <memmove+0x1e>
 800b1fe:	5ccc      	ldrb	r4, [r1, r3]
 800b200:	54c4      	strb	r4, [r0, r3]
 800b202:	3301      	adds	r3, #1
 800b204:	e7f9      	b.n	800b1fa <memmove+0x8>
 800b206:	188b      	adds	r3, r1, r2
 800b208:	4298      	cmp	r0, r3
 800b20a:	d2f5      	bcs.n	800b1f8 <memmove+0x6>
 800b20c:	3a01      	subs	r2, #1
 800b20e:	d200      	bcs.n	800b212 <memmove+0x20>
 800b210:	bd10      	pop	{r4, pc}
 800b212:	5c8b      	ldrb	r3, [r1, r2]
 800b214:	5483      	strb	r3, [r0, r2]
 800b216:	e7f9      	b.n	800b20c <memmove+0x1a>

0800b218 <strncmp>:
 800b218:	b530      	push	{r4, r5, lr}
 800b21a:	0005      	movs	r5, r0
 800b21c:	1e10      	subs	r0, r2, #0
 800b21e:	d00b      	beq.n	800b238 <strncmp+0x20>
 800b220:	2400      	movs	r4, #0
 800b222:	3a01      	subs	r2, #1
 800b224:	5d2b      	ldrb	r3, [r5, r4]
 800b226:	5d08      	ldrb	r0, [r1, r4]
 800b228:	4283      	cmp	r3, r0
 800b22a:	d104      	bne.n	800b236 <strncmp+0x1e>
 800b22c:	42a2      	cmp	r2, r4
 800b22e:	d002      	beq.n	800b236 <strncmp+0x1e>
 800b230:	3401      	adds	r4, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f6      	bne.n	800b224 <strncmp+0xc>
 800b236:	1a18      	subs	r0, r3, r0
 800b238:	bd30      	pop	{r4, r5, pc}
	...

0800b23c <_sbrk_r>:
 800b23c:	2300      	movs	r3, #0
 800b23e:	b570      	push	{r4, r5, r6, lr}
 800b240:	4d06      	ldr	r5, [pc, #24]	@ (800b25c <_sbrk_r+0x20>)
 800b242:	0004      	movs	r4, r0
 800b244:	0008      	movs	r0, r1
 800b246:	602b      	str	r3, [r5, #0]
 800b248:	f7f9 fb04 	bl	8004854 <_sbrk>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d103      	bne.n	800b258 <_sbrk_r+0x1c>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d000      	beq.n	800b258 <_sbrk_r+0x1c>
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	bd70      	pop	{r4, r5, r6, pc}
 800b25a:	46c0      	nop			@ (mov r8, r8)
 800b25c:	20000640 	.word	0x20000640

0800b260 <memcpy>:
 800b260:	2300      	movs	r3, #0
 800b262:	b510      	push	{r4, lr}
 800b264:	429a      	cmp	r2, r3
 800b266:	d100      	bne.n	800b26a <memcpy+0xa>
 800b268:	bd10      	pop	{r4, pc}
 800b26a:	5ccc      	ldrb	r4, [r1, r3]
 800b26c:	54c4      	strb	r4, [r0, r3]
 800b26e:	3301      	adds	r3, #1
 800b270:	e7f8      	b.n	800b264 <memcpy+0x4>
	...

0800b274 <nan>:
 800b274:	2000      	movs	r0, #0
 800b276:	4901      	ldr	r1, [pc, #4]	@ (800b27c <nan+0x8>)
 800b278:	4770      	bx	lr
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	7ff80000 	.word	0x7ff80000

0800b280 <__assert_func>:
 800b280:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b282:	0014      	movs	r4, r2
 800b284:	001a      	movs	r2, r3
 800b286:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <__assert_func+0x2c>)
 800b288:	0005      	movs	r5, r0
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	000e      	movs	r6, r1
 800b28e:	68d8      	ldr	r0, [r3, #12]
 800b290:	4b07      	ldr	r3, [pc, #28]	@ (800b2b0 <__assert_func+0x30>)
 800b292:	2c00      	cmp	r4, #0
 800b294:	d101      	bne.n	800b29a <__assert_func+0x1a>
 800b296:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <__assert_func+0x34>)
 800b298:	001c      	movs	r4, r3
 800b29a:	4907      	ldr	r1, [pc, #28]	@ (800b2b8 <__assert_func+0x38>)
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	9402      	str	r4, [sp, #8]
 800b2a0:	002b      	movs	r3, r5
 800b2a2:	9600      	str	r6, [sp, #0]
 800b2a4:	f000 fbe0 	bl	800ba68 <fiprintf>
 800b2a8:	f000 fbee 	bl	800ba88 <abort>
 800b2ac:	20000028 	.word	0x20000028
 800b2b0:	0800c8ba 	.word	0x0800c8ba
 800b2b4:	0800c8f5 	.word	0x0800c8f5
 800b2b8:	0800c8c7 	.word	0x0800c8c7

0800b2bc <_calloc_r>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	0c0b      	lsrs	r3, r1, #16
 800b2c0:	0c15      	lsrs	r5, r2, #16
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11e      	bne.n	800b304 <_calloc_r+0x48>
 800b2c6:	2d00      	cmp	r5, #0
 800b2c8:	d10c      	bne.n	800b2e4 <_calloc_r+0x28>
 800b2ca:	b289      	uxth	r1, r1
 800b2cc:	b294      	uxth	r4, r2
 800b2ce:	434c      	muls	r4, r1
 800b2d0:	0021      	movs	r1, r4
 800b2d2:	f7fe f985 	bl	80095e0 <_malloc_r>
 800b2d6:	1e05      	subs	r5, r0, #0
 800b2d8:	d01a      	beq.n	800b310 <_calloc_r+0x54>
 800b2da:	0022      	movs	r2, r4
 800b2dc:	2100      	movs	r1, #0
 800b2de:	f7fd f9f1 	bl	80086c4 <memset>
 800b2e2:	e016      	b.n	800b312 <_calloc_r+0x56>
 800b2e4:	1c2b      	adds	r3, r5, #0
 800b2e6:	1c0c      	adds	r4, r1, #0
 800b2e8:	b289      	uxth	r1, r1
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	434a      	muls	r2, r1
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	b2a1      	uxth	r1, r4
 800b2f2:	4359      	muls	r1, r3
 800b2f4:	0c14      	lsrs	r4, r2, #16
 800b2f6:	190c      	adds	r4, r1, r4
 800b2f8:	0c23      	lsrs	r3, r4, #16
 800b2fa:	d107      	bne.n	800b30c <_calloc_r+0x50>
 800b2fc:	0424      	lsls	r4, r4, #16
 800b2fe:	b292      	uxth	r2, r2
 800b300:	4314      	orrs	r4, r2
 800b302:	e7e5      	b.n	800b2d0 <_calloc_r+0x14>
 800b304:	2d00      	cmp	r5, #0
 800b306:	d101      	bne.n	800b30c <_calloc_r+0x50>
 800b308:	1c14      	adds	r4, r2, #0
 800b30a:	e7ed      	b.n	800b2e8 <_calloc_r+0x2c>
 800b30c:	230c      	movs	r3, #12
 800b30e:	6003      	str	r3, [r0, #0]
 800b310:	2500      	movs	r5, #0
 800b312:	0028      	movs	r0, r5
 800b314:	bd70      	pop	{r4, r5, r6, pc}

0800b316 <rshift>:
 800b316:	0002      	movs	r2, r0
 800b318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b31a:	6904      	ldr	r4, [r0, #16]
 800b31c:	b085      	sub	sp, #20
 800b31e:	3214      	adds	r2, #20
 800b320:	114b      	asrs	r3, r1, #5
 800b322:	0016      	movs	r6, r2
 800b324:	9302      	str	r3, [sp, #8]
 800b326:	429c      	cmp	r4, r3
 800b328:	dd31      	ble.n	800b38e <rshift+0x78>
 800b32a:	261f      	movs	r6, #31
 800b32c:	000f      	movs	r7, r1
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	00a5      	lsls	r5, r4, #2
 800b332:	18d3      	adds	r3, r2, r3
 800b334:	4037      	ands	r7, r6
 800b336:	1955      	adds	r5, r2, r5
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	9701      	str	r7, [sp, #4]
 800b33c:	4231      	tst	r1, r6
 800b33e:	d10d      	bne.n	800b35c <rshift+0x46>
 800b340:	0016      	movs	r6, r2
 800b342:	0019      	movs	r1, r3
 800b344:	428d      	cmp	r5, r1
 800b346:	d836      	bhi.n	800b3b6 <rshift+0xa0>
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	2600      	movs	r6, #0
 800b34c:	3b03      	subs	r3, #3
 800b34e:	429d      	cmp	r5, r3
 800b350:	d302      	bcc.n	800b358 <rshift+0x42>
 800b352:	9b02      	ldr	r3, [sp, #8]
 800b354:	1ae4      	subs	r4, r4, r3
 800b356:	00a6      	lsls	r6, r4, #2
 800b358:	1996      	adds	r6, r2, r6
 800b35a:	e018      	b.n	800b38e <rshift+0x78>
 800b35c:	2120      	movs	r1, #32
 800b35e:	9e01      	ldr	r6, [sp, #4]
 800b360:	9f01      	ldr	r7, [sp, #4]
 800b362:	1b89      	subs	r1, r1, r6
 800b364:	9e00      	ldr	r6, [sp, #0]
 800b366:	9103      	str	r1, [sp, #12]
 800b368:	ce02      	ldmia	r6!, {r1}
 800b36a:	4694      	mov	ip, r2
 800b36c:	40f9      	lsrs	r1, r7
 800b36e:	42b5      	cmp	r5, r6
 800b370:	d816      	bhi.n	800b3a0 <rshift+0x8a>
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	2600      	movs	r6, #0
 800b376:	3301      	adds	r3, #1
 800b378:	429d      	cmp	r5, r3
 800b37a:	d303      	bcc.n	800b384 <rshift+0x6e>
 800b37c:	9b02      	ldr	r3, [sp, #8]
 800b37e:	1ae4      	subs	r4, r4, r3
 800b380:	00a6      	lsls	r6, r4, #2
 800b382:	3e04      	subs	r6, #4
 800b384:	1996      	adds	r6, r2, r6
 800b386:	6031      	str	r1, [r6, #0]
 800b388:	2900      	cmp	r1, #0
 800b38a:	d000      	beq.n	800b38e <rshift+0x78>
 800b38c:	3604      	adds	r6, #4
 800b38e:	1ab1      	subs	r1, r6, r2
 800b390:	1089      	asrs	r1, r1, #2
 800b392:	6101      	str	r1, [r0, #16]
 800b394:	4296      	cmp	r6, r2
 800b396:	d101      	bne.n	800b39c <rshift+0x86>
 800b398:	2300      	movs	r3, #0
 800b39a:	6143      	str	r3, [r0, #20]
 800b39c:	b005      	add	sp, #20
 800b39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a0:	6837      	ldr	r7, [r6, #0]
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	409f      	lsls	r7, r3
 800b3a6:	430f      	orrs	r7, r1
 800b3a8:	4661      	mov	r1, ip
 800b3aa:	c180      	stmia	r1!, {r7}
 800b3ac:	468c      	mov	ip, r1
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	ce02      	ldmia	r6!, {r1}
 800b3b2:	40d9      	lsrs	r1, r3
 800b3b4:	e7db      	b.n	800b36e <rshift+0x58>
 800b3b6:	c980      	ldmia	r1!, {r7}
 800b3b8:	c680      	stmia	r6!, {r7}
 800b3ba:	e7c3      	b.n	800b344 <rshift+0x2e>

0800b3bc <__hexdig_fun>:
 800b3bc:	0002      	movs	r2, r0
 800b3be:	3a30      	subs	r2, #48	@ 0x30
 800b3c0:	0003      	movs	r3, r0
 800b3c2:	2a09      	cmp	r2, #9
 800b3c4:	d802      	bhi.n	800b3cc <__hexdig_fun+0x10>
 800b3c6:	3b20      	subs	r3, #32
 800b3c8:	b2d8      	uxtb	r0, r3
 800b3ca:	4770      	bx	lr
 800b3cc:	0002      	movs	r2, r0
 800b3ce:	3a61      	subs	r2, #97	@ 0x61
 800b3d0:	2a05      	cmp	r2, #5
 800b3d2:	d801      	bhi.n	800b3d8 <__hexdig_fun+0x1c>
 800b3d4:	3b47      	subs	r3, #71	@ 0x47
 800b3d6:	e7f7      	b.n	800b3c8 <__hexdig_fun+0xc>
 800b3d8:	001a      	movs	r2, r3
 800b3da:	3a41      	subs	r2, #65	@ 0x41
 800b3dc:	2000      	movs	r0, #0
 800b3de:	2a05      	cmp	r2, #5
 800b3e0:	d8f3      	bhi.n	800b3ca <__hexdig_fun+0xe>
 800b3e2:	3b27      	subs	r3, #39	@ 0x27
 800b3e4:	e7f0      	b.n	800b3c8 <__hexdig_fun+0xc>
	...

0800b3e8 <__gethex>:
 800b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ea:	b089      	sub	sp, #36	@ 0x24
 800b3ec:	9307      	str	r3, [sp, #28]
 800b3ee:	680b      	ldr	r3, [r1, #0]
 800b3f0:	9201      	str	r2, [sp, #4]
 800b3f2:	9003      	str	r0, [sp, #12]
 800b3f4:	9106      	str	r1, [sp, #24]
 800b3f6:	1c9a      	adds	r2, r3, #2
 800b3f8:	0011      	movs	r1, r2
 800b3fa:	3201      	adds	r2, #1
 800b3fc:	1e50      	subs	r0, r2, #1
 800b3fe:	7800      	ldrb	r0, [r0, #0]
 800b400:	2830      	cmp	r0, #48	@ 0x30
 800b402:	d0f9      	beq.n	800b3f8 <__gethex+0x10>
 800b404:	1acb      	subs	r3, r1, r3
 800b406:	3b02      	subs	r3, #2
 800b408:	9305      	str	r3, [sp, #20]
 800b40a:	9100      	str	r1, [sp, #0]
 800b40c:	f7ff ffd6 	bl	800b3bc <__hexdig_fun>
 800b410:	2300      	movs	r3, #0
 800b412:	001d      	movs	r5, r3
 800b414:	9302      	str	r3, [sp, #8]
 800b416:	4298      	cmp	r0, r3
 800b418:	d11e      	bne.n	800b458 <__gethex+0x70>
 800b41a:	2201      	movs	r2, #1
 800b41c:	49a6      	ldr	r1, [pc, #664]	@ (800b6b8 <__gethex+0x2d0>)
 800b41e:	9800      	ldr	r0, [sp, #0]
 800b420:	f7ff fefa 	bl	800b218 <strncmp>
 800b424:	0007      	movs	r7, r0
 800b426:	42a8      	cmp	r0, r5
 800b428:	d000      	beq.n	800b42c <__gethex+0x44>
 800b42a:	e06a      	b.n	800b502 <__gethex+0x11a>
 800b42c:	9b00      	ldr	r3, [sp, #0]
 800b42e:	7858      	ldrb	r0, [r3, #1]
 800b430:	1c5c      	adds	r4, r3, #1
 800b432:	f7ff ffc3 	bl	800b3bc <__hexdig_fun>
 800b436:	2301      	movs	r3, #1
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	42a8      	cmp	r0, r5
 800b43c:	d02f      	beq.n	800b49e <__gethex+0xb6>
 800b43e:	9400      	str	r4, [sp, #0]
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	7818      	ldrb	r0, [r3, #0]
 800b444:	2830      	cmp	r0, #48	@ 0x30
 800b446:	d009      	beq.n	800b45c <__gethex+0x74>
 800b448:	f7ff ffb8 	bl	800b3bc <__hexdig_fun>
 800b44c:	4242      	negs	r2, r0
 800b44e:	4142      	adcs	r2, r0
 800b450:	2301      	movs	r3, #1
 800b452:	0025      	movs	r5, r4
 800b454:	9202      	str	r2, [sp, #8]
 800b456:	9305      	str	r3, [sp, #20]
 800b458:	9c00      	ldr	r4, [sp, #0]
 800b45a:	e004      	b.n	800b466 <__gethex+0x7e>
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	e7ed      	b.n	800b440 <__gethex+0x58>
 800b464:	3401      	adds	r4, #1
 800b466:	7820      	ldrb	r0, [r4, #0]
 800b468:	f7ff ffa8 	bl	800b3bc <__hexdig_fun>
 800b46c:	1e07      	subs	r7, r0, #0
 800b46e:	d1f9      	bne.n	800b464 <__gethex+0x7c>
 800b470:	2201      	movs	r2, #1
 800b472:	0020      	movs	r0, r4
 800b474:	4990      	ldr	r1, [pc, #576]	@ (800b6b8 <__gethex+0x2d0>)
 800b476:	f7ff fecf 	bl	800b218 <strncmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d10d      	bne.n	800b49a <__gethex+0xb2>
 800b47e:	2d00      	cmp	r5, #0
 800b480:	d106      	bne.n	800b490 <__gethex+0xa8>
 800b482:	3401      	adds	r4, #1
 800b484:	0025      	movs	r5, r4
 800b486:	7820      	ldrb	r0, [r4, #0]
 800b488:	f7ff ff98 	bl	800b3bc <__hexdig_fun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d102      	bne.n	800b496 <__gethex+0xae>
 800b490:	1b2d      	subs	r5, r5, r4
 800b492:	00af      	lsls	r7, r5, #2
 800b494:	e003      	b.n	800b49e <__gethex+0xb6>
 800b496:	3401      	adds	r4, #1
 800b498:	e7f5      	b.n	800b486 <__gethex+0x9e>
 800b49a:	2d00      	cmp	r5, #0
 800b49c:	d1f8      	bne.n	800b490 <__gethex+0xa8>
 800b49e:	2220      	movs	r2, #32
 800b4a0:	7823      	ldrb	r3, [r4, #0]
 800b4a2:	0026      	movs	r6, r4
 800b4a4:	4393      	bics	r3, r2
 800b4a6:	2b50      	cmp	r3, #80	@ 0x50
 800b4a8:	d11d      	bne.n	800b4e6 <__gethex+0xfe>
 800b4aa:	7863      	ldrb	r3, [r4, #1]
 800b4ac:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4ae:	d02d      	beq.n	800b50c <__gethex+0x124>
 800b4b0:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4b2:	d02f      	beq.n	800b514 <__gethex+0x12c>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	1c66      	adds	r6, r4, #1
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	7830      	ldrb	r0, [r6, #0]
 800b4bc:	f7ff ff7e 	bl	800b3bc <__hexdig_fun>
 800b4c0:	1e43      	subs	r3, r0, #1
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	0005      	movs	r5, r0
 800b4c6:	2b18      	cmp	r3, #24
 800b4c8:	d82a      	bhi.n	800b520 <__gethex+0x138>
 800b4ca:	7870      	ldrb	r0, [r6, #1]
 800b4cc:	f7ff ff76 	bl	800b3bc <__hexdig_fun>
 800b4d0:	1e43      	subs	r3, r0, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	3601      	adds	r6, #1
 800b4d6:	3d10      	subs	r5, #16
 800b4d8:	2b18      	cmp	r3, #24
 800b4da:	d91d      	bls.n	800b518 <__gethex+0x130>
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d000      	beq.n	800b4e4 <__gethex+0xfc>
 800b4e2:	426d      	negs	r5, r5
 800b4e4:	197f      	adds	r7, r7, r5
 800b4e6:	9b06      	ldr	r3, [sp, #24]
 800b4e8:	601e      	str	r6, [r3, #0]
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d019      	beq.n	800b524 <__gethex+0x13c>
 800b4f0:	9b05      	ldr	r3, [sp, #20]
 800b4f2:	2606      	movs	r6, #6
 800b4f4:	425a      	negs	r2, r3
 800b4f6:	4153      	adcs	r3, r2
 800b4f8:	425b      	negs	r3, r3
 800b4fa:	401e      	ands	r6, r3
 800b4fc:	0030      	movs	r0, r6
 800b4fe:	b009      	add	sp, #36	@ 0x24
 800b500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b502:	2301      	movs	r3, #1
 800b504:	2700      	movs	r7, #0
 800b506:	9c00      	ldr	r4, [sp, #0]
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	e7c8      	b.n	800b49e <__gethex+0xb6>
 800b50c:	2300      	movs	r3, #0
 800b50e:	9304      	str	r3, [sp, #16]
 800b510:	1ca6      	adds	r6, r4, #2
 800b512:	e7d2      	b.n	800b4ba <__gethex+0xd2>
 800b514:	2301      	movs	r3, #1
 800b516:	e7fa      	b.n	800b50e <__gethex+0x126>
 800b518:	230a      	movs	r3, #10
 800b51a:	435d      	muls	r5, r3
 800b51c:	182d      	adds	r5, r5, r0
 800b51e:	e7d4      	b.n	800b4ca <__gethex+0xe2>
 800b520:	0026      	movs	r6, r4
 800b522:	e7e0      	b.n	800b4e6 <__gethex+0xfe>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	9902      	ldr	r1, [sp, #8]
 800b528:	1ae3      	subs	r3, r4, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	dc0a      	bgt.n	800b546 <__gethex+0x15e>
 800b530:	9803      	ldr	r0, [sp, #12]
 800b532:	f7fe f8e5 	bl	8009700 <_Balloc>
 800b536:	1e05      	subs	r5, r0, #0
 800b538:	d108      	bne.n	800b54c <__gethex+0x164>
 800b53a:	002a      	movs	r2, r5
 800b53c:	21e4      	movs	r1, #228	@ 0xe4
 800b53e:	4b5f      	ldr	r3, [pc, #380]	@ (800b6bc <__gethex+0x2d4>)
 800b540:	485f      	ldr	r0, [pc, #380]	@ (800b6c0 <__gethex+0x2d8>)
 800b542:	f7ff fe9d 	bl	800b280 <__assert_func>
 800b546:	3101      	adds	r1, #1
 800b548:	105b      	asrs	r3, r3, #1
 800b54a:	e7ef      	b.n	800b52c <__gethex+0x144>
 800b54c:	0003      	movs	r3, r0
 800b54e:	3314      	adds	r3, #20
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	2300      	movs	r3, #0
 800b556:	001e      	movs	r6, r3
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	d338      	bcc.n	800b5d2 <__gethex+0x1ea>
 800b560:	9c05      	ldr	r4, [sp, #20]
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	c440      	stmia	r4!, {r6}
 800b566:	1ae4      	subs	r4, r4, r3
 800b568:	10a4      	asrs	r4, r4, #2
 800b56a:	0030      	movs	r0, r6
 800b56c:	612c      	str	r4, [r5, #16]
 800b56e:	f7fe f9bf 	bl	80098f0 <__hi0bits>
 800b572:	9b01      	ldr	r3, [sp, #4]
 800b574:	0164      	lsls	r4, r4, #5
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	1a26      	subs	r6, r4, r0
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	429e      	cmp	r6, r3
 800b57e:	dd52      	ble.n	800b626 <__gethex+0x23e>
 800b580:	1af6      	subs	r6, r6, r3
 800b582:	0031      	movs	r1, r6
 800b584:	0028      	movs	r0, r5
 800b586:	f7fe fd62 	bl	800a04e <__any_on>
 800b58a:	1e04      	subs	r4, r0, #0
 800b58c:	d00f      	beq.n	800b5ae <__gethex+0x1c6>
 800b58e:	2401      	movs	r4, #1
 800b590:	231f      	movs	r3, #31
 800b592:	0020      	movs	r0, r4
 800b594:	1e72      	subs	r2, r6, #1
 800b596:	4013      	ands	r3, r2
 800b598:	4098      	lsls	r0, r3
 800b59a:	0003      	movs	r3, r0
 800b59c:	1151      	asrs	r1, r2, #5
 800b59e:	9802      	ldr	r0, [sp, #8]
 800b5a0:	0089      	lsls	r1, r1, #2
 800b5a2:	5809      	ldr	r1, [r1, r0]
 800b5a4:	4219      	tst	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__gethex+0x1c6>
 800b5a8:	42a2      	cmp	r2, r4
 800b5aa:	dc34      	bgt.n	800b616 <__gethex+0x22e>
 800b5ac:	2402      	movs	r4, #2
 800b5ae:	0031      	movs	r1, r6
 800b5b0:	0028      	movs	r0, r5
 800b5b2:	f7ff feb0 	bl	800b316 <rshift>
 800b5b6:	19bf      	adds	r7, r7, r6
 800b5b8:	9b01      	ldr	r3, [sp, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	42bb      	cmp	r3, r7
 800b5be:	da42      	bge.n	800b646 <__gethex+0x25e>
 800b5c0:	0029      	movs	r1, r5
 800b5c2:	9803      	ldr	r0, [sp, #12]
 800b5c4:	f7fe f8e0 	bl	8009788 <_Bfree>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5cc:	26a3      	movs	r6, #163	@ 0xa3
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	e794      	b.n	800b4fc <__gethex+0x114>
 800b5d2:	3c01      	subs	r4, #1
 800b5d4:	7823      	ldrb	r3, [r4, #0]
 800b5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5d8:	d012      	beq.n	800b600 <__gethex+0x218>
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	d104      	bne.n	800b5ea <__gethex+0x202>
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	c340      	stmia	r3!, {r6}
 800b5e4:	2600      	movs	r6, #0
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	9604      	str	r6, [sp, #16]
 800b5ea:	7820      	ldrb	r0, [r4, #0]
 800b5ec:	f7ff fee6 	bl	800b3bc <__hexdig_fun>
 800b5f0:	230f      	movs	r3, #15
 800b5f2:	4018      	ands	r0, r3
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	4098      	lsls	r0, r3
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4306      	orrs	r6, r0
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	e7ac      	b.n	800b55a <__gethex+0x172>
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	42a3      	cmp	r3, r4
 800b604:	d8e9      	bhi.n	800b5da <__gethex+0x1f2>
 800b606:	2201      	movs	r2, #1
 800b608:	0020      	movs	r0, r4
 800b60a:	492b      	ldr	r1, [pc, #172]	@ (800b6b8 <__gethex+0x2d0>)
 800b60c:	f7ff fe04 	bl	800b218 <strncmp>
 800b610:	2800      	cmp	r0, #0
 800b612:	d1e2      	bne.n	800b5da <__gethex+0x1f2>
 800b614:	e7a1      	b.n	800b55a <__gethex+0x172>
 800b616:	0028      	movs	r0, r5
 800b618:	1eb1      	subs	r1, r6, #2
 800b61a:	f7fe fd18 	bl	800a04e <__any_on>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d0c4      	beq.n	800b5ac <__gethex+0x1c4>
 800b622:	2403      	movs	r4, #3
 800b624:	e7c3      	b.n	800b5ae <__gethex+0x1c6>
 800b626:	9b00      	ldr	r3, [sp, #0]
 800b628:	2400      	movs	r4, #0
 800b62a:	429e      	cmp	r6, r3
 800b62c:	dac4      	bge.n	800b5b8 <__gethex+0x1d0>
 800b62e:	1b9e      	subs	r6, r3, r6
 800b630:	0029      	movs	r1, r5
 800b632:	0032      	movs	r2, r6
 800b634:	9803      	ldr	r0, [sp, #12]
 800b636:	f7fe fad1 	bl	8009bdc <__lshift>
 800b63a:	0003      	movs	r3, r0
 800b63c:	3314      	adds	r3, #20
 800b63e:	0005      	movs	r5, r0
 800b640:	1bbf      	subs	r7, r7, r6
 800b642:	9302      	str	r3, [sp, #8]
 800b644:	e7b8      	b.n	800b5b8 <__gethex+0x1d0>
 800b646:	9b01      	ldr	r3, [sp, #4]
 800b648:	685e      	ldr	r6, [r3, #4]
 800b64a:	42be      	cmp	r6, r7
 800b64c:	dd6f      	ble.n	800b72e <__gethex+0x346>
 800b64e:	9b00      	ldr	r3, [sp, #0]
 800b650:	1bf6      	subs	r6, r6, r7
 800b652:	42b3      	cmp	r3, r6
 800b654:	dc36      	bgt.n	800b6c4 <__gethex+0x2dc>
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d024      	beq.n	800b6a8 <__gethex+0x2c0>
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d026      	beq.n	800b6b0 <__gethex+0x2c8>
 800b662:	2b01      	cmp	r3, #1
 800b664:	d117      	bne.n	800b696 <__gethex+0x2ae>
 800b666:	9b00      	ldr	r3, [sp, #0]
 800b668:	42b3      	cmp	r3, r6
 800b66a:	d114      	bne.n	800b696 <__gethex+0x2ae>
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d10b      	bne.n	800b688 <__gethex+0x2a0>
 800b670:	9b01      	ldr	r3, [sp, #4]
 800b672:	9a07      	ldr	r2, [sp, #28]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2662      	movs	r6, #98	@ 0x62
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	2301      	movs	r3, #1
 800b67c:	9a02      	ldr	r2, [sp, #8]
 800b67e:	612b      	str	r3, [r5, #16]
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b684:	601d      	str	r5, [r3, #0]
 800b686:	e739      	b.n	800b4fc <__gethex+0x114>
 800b688:	9900      	ldr	r1, [sp, #0]
 800b68a:	0028      	movs	r0, r5
 800b68c:	3901      	subs	r1, #1
 800b68e:	f7fe fcde 	bl	800a04e <__any_on>
 800b692:	2800      	cmp	r0, #0
 800b694:	d1ec      	bne.n	800b670 <__gethex+0x288>
 800b696:	0029      	movs	r1, r5
 800b698:	9803      	ldr	r0, [sp, #12]
 800b69a:	f7fe f875 	bl	8009788 <_Bfree>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6a2:	2650      	movs	r6, #80	@ 0x50
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	e729      	b.n	800b4fc <__gethex+0x114>
 800b6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f3      	bne.n	800b696 <__gethex+0x2ae>
 800b6ae:	e7df      	b.n	800b670 <__gethex+0x288>
 800b6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1dc      	bne.n	800b670 <__gethex+0x288>
 800b6b6:	e7ee      	b.n	800b696 <__gethex+0x2ae>
 800b6b8:	0800c748 	.word	0x0800c748
 800b6bc:	0800c5e1 	.word	0x0800c5e1
 800b6c0:	0800c8f6 	.word	0x0800c8f6
 800b6c4:	1e77      	subs	r7, r6, #1
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d12f      	bne.n	800b72a <__gethex+0x342>
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	d004      	beq.n	800b6d8 <__gethex+0x2f0>
 800b6ce:	0039      	movs	r1, r7
 800b6d0:	0028      	movs	r0, r5
 800b6d2:	f7fe fcbc 	bl	800a04e <__any_on>
 800b6d6:	0004      	movs	r4, r0
 800b6d8:	231f      	movs	r3, #31
 800b6da:	117a      	asrs	r2, r7, #5
 800b6dc:	401f      	ands	r7, r3
 800b6de:	3b1e      	subs	r3, #30
 800b6e0:	40bb      	lsls	r3, r7
 800b6e2:	9902      	ldr	r1, [sp, #8]
 800b6e4:	0092      	lsls	r2, r2, #2
 800b6e6:	5852      	ldr	r2, [r2, r1]
 800b6e8:	421a      	tst	r2, r3
 800b6ea:	d001      	beq.n	800b6f0 <__gethex+0x308>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	431c      	orrs	r4, r3
 800b6f0:	9b00      	ldr	r3, [sp, #0]
 800b6f2:	0031      	movs	r1, r6
 800b6f4:	1b9b      	subs	r3, r3, r6
 800b6f6:	2602      	movs	r6, #2
 800b6f8:	0028      	movs	r0, r5
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	f7ff fe0b 	bl	800b316 <rshift>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	685f      	ldr	r7, [r3, #4]
 800b704:	2c00      	cmp	r4, #0
 800b706:	d03f      	beq.n	800b788 <__gethex+0x3a0>
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d010      	beq.n	800b732 <__gethex+0x34a>
 800b710:	2b03      	cmp	r3, #3
 800b712:	d012      	beq.n	800b73a <__gethex+0x352>
 800b714:	2b01      	cmp	r3, #1
 800b716:	d106      	bne.n	800b726 <__gethex+0x33e>
 800b718:	07a2      	lsls	r2, r4, #30
 800b71a:	d504      	bpl.n	800b726 <__gethex+0x33e>
 800b71c:	9a02      	ldr	r2, [sp, #8]
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	4314      	orrs	r4, r2
 800b722:	421c      	tst	r4, r3
 800b724:	d10c      	bne.n	800b740 <__gethex+0x358>
 800b726:	2310      	movs	r3, #16
 800b728:	e02d      	b.n	800b786 <__gethex+0x39e>
 800b72a:	2401      	movs	r4, #1
 800b72c:	e7d4      	b.n	800b6d8 <__gethex+0x2f0>
 800b72e:	2601      	movs	r6, #1
 800b730:	e7e8      	b.n	800b704 <__gethex+0x31c>
 800b732:	2301      	movs	r3, #1
 800b734:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b73a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0f2      	beq.n	800b726 <__gethex+0x33e>
 800b740:	692b      	ldr	r3, [r5, #16]
 800b742:	2000      	movs	r0, #0
 800b744:	9302      	str	r3, [sp, #8]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	002b      	movs	r3, r5
 800b74c:	9a04      	ldr	r2, [sp, #16]
 800b74e:	3314      	adds	r3, #20
 800b750:	1899      	adds	r1, r3, r2
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	1c54      	adds	r4, r2, #1
 800b756:	d01c      	beq.n	800b792 <__gethex+0x3aa>
 800b758:	3201      	adds	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	002b      	movs	r3, r5
 800b75e:	3314      	adds	r3, #20
 800b760:	2e02      	cmp	r6, #2
 800b762:	d13f      	bne.n	800b7e4 <__gethex+0x3fc>
 800b764:	9a01      	ldr	r2, [sp, #4]
 800b766:	9900      	ldr	r1, [sp, #0]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	428a      	cmp	r2, r1
 800b76e:	d109      	bne.n	800b784 <__gethex+0x39c>
 800b770:	000a      	movs	r2, r1
 800b772:	201f      	movs	r0, #31
 800b774:	4010      	ands	r0, r2
 800b776:	2201      	movs	r2, #1
 800b778:	4082      	lsls	r2, r0
 800b77a:	1149      	asrs	r1, r1, #5
 800b77c:	0089      	lsls	r1, r1, #2
 800b77e:	58cb      	ldr	r3, [r1, r3]
 800b780:	4213      	tst	r3, r2
 800b782:	d13d      	bne.n	800b800 <__gethex+0x418>
 800b784:	2320      	movs	r3, #32
 800b786:	431e      	orrs	r6, r3
 800b788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78a:	601d      	str	r5, [r3, #0]
 800b78c:	9b07      	ldr	r3, [sp, #28]
 800b78e:	601f      	str	r7, [r3, #0]
 800b790:	e6b4      	b.n	800b4fc <__gethex+0x114>
 800b792:	c301      	stmia	r3!, {r0}
 800b794:	4299      	cmp	r1, r3
 800b796:	d8dc      	bhi.n	800b752 <__gethex+0x36a>
 800b798:	68ab      	ldr	r3, [r5, #8]
 800b79a:	9a02      	ldr	r2, [sp, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	db18      	blt.n	800b7d2 <__gethex+0x3ea>
 800b7a0:	6869      	ldr	r1, [r5, #4]
 800b7a2:	9803      	ldr	r0, [sp, #12]
 800b7a4:	3101      	adds	r1, #1
 800b7a6:	f7fd ffab 	bl	8009700 <_Balloc>
 800b7aa:	1e04      	subs	r4, r0, #0
 800b7ac:	d104      	bne.n	800b7b8 <__gethex+0x3d0>
 800b7ae:	0022      	movs	r2, r4
 800b7b0:	2184      	movs	r1, #132	@ 0x84
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b828 <__gethex+0x440>)
 800b7b4:	481d      	ldr	r0, [pc, #116]	@ (800b82c <__gethex+0x444>)
 800b7b6:	e6c4      	b.n	800b542 <__gethex+0x15a>
 800b7b8:	0029      	movs	r1, r5
 800b7ba:	692a      	ldr	r2, [r5, #16]
 800b7bc:	310c      	adds	r1, #12
 800b7be:	3202      	adds	r2, #2
 800b7c0:	0092      	lsls	r2, r2, #2
 800b7c2:	300c      	adds	r0, #12
 800b7c4:	f7ff fd4c 	bl	800b260 <memcpy>
 800b7c8:	0029      	movs	r1, r5
 800b7ca:	9803      	ldr	r0, [sp, #12]
 800b7cc:	f7fd ffdc 	bl	8009788 <_Bfree>
 800b7d0:	0025      	movs	r5, r4
 800b7d2:	692b      	ldr	r3, [r5, #16]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	612a      	str	r2, [r5, #16]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	3304      	adds	r3, #4
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	18eb      	adds	r3, r5, r3
 800b7e0:	605a      	str	r2, [r3, #4]
 800b7e2:	e7bb      	b.n	800b75c <__gethex+0x374>
 800b7e4:	692a      	ldr	r2, [r5, #16]
 800b7e6:	9902      	ldr	r1, [sp, #8]
 800b7e8:	428a      	cmp	r2, r1
 800b7ea:	dd0b      	ble.n	800b804 <__gethex+0x41c>
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	0028      	movs	r0, r5
 800b7f0:	f7ff fd91 	bl	800b316 <rshift>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	3701      	adds	r7, #1
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	da00      	bge.n	800b800 <__gethex+0x418>
 800b7fe:	e6df      	b.n	800b5c0 <__gethex+0x1d8>
 800b800:	2601      	movs	r6, #1
 800b802:	e7bf      	b.n	800b784 <__gethex+0x39c>
 800b804:	221f      	movs	r2, #31
 800b806:	9c00      	ldr	r4, [sp, #0]
 800b808:	9900      	ldr	r1, [sp, #0]
 800b80a:	4014      	ands	r4, r2
 800b80c:	4211      	tst	r1, r2
 800b80e:	d0f7      	beq.n	800b800 <__gethex+0x418>
 800b810:	9a04      	ldr	r2, [sp, #16]
 800b812:	189b      	adds	r3, r3, r2
 800b814:	3b04      	subs	r3, #4
 800b816:	6818      	ldr	r0, [r3, #0]
 800b818:	f7fe f86a 	bl	80098f0 <__hi0bits>
 800b81c:	2320      	movs	r3, #32
 800b81e:	1b1b      	subs	r3, r3, r4
 800b820:	4298      	cmp	r0, r3
 800b822:	dbe3      	blt.n	800b7ec <__gethex+0x404>
 800b824:	e7ec      	b.n	800b800 <__gethex+0x418>
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	0800c5e1 	.word	0x0800c5e1
 800b82c:	0800c8f6 	.word	0x0800c8f6

0800b830 <L_shift>:
 800b830:	2308      	movs	r3, #8
 800b832:	b570      	push	{r4, r5, r6, lr}
 800b834:	2520      	movs	r5, #32
 800b836:	1a9a      	subs	r2, r3, r2
 800b838:	0092      	lsls	r2, r2, #2
 800b83a:	1aad      	subs	r5, r5, r2
 800b83c:	6843      	ldr	r3, [r0, #4]
 800b83e:	6804      	ldr	r4, [r0, #0]
 800b840:	001e      	movs	r6, r3
 800b842:	40ae      	lsls	r6, r5
 800b844:	40d3      	lsrs	r3, r2
 800b846:	4334      	orrs	r4, r6
 800b848:	6004      	str	r4, [r0, #0]
 800b84a:	6043      	str	r3, [r0, #4]
 800b84c:	3004      	adds	r0, #4
 800b84e:	4288      	cmp	r0, r1
 800b850:	d3f4      	bcc.n	800b83c <L_shift+0xc>
 800b852:	bd70      	pop	{r4, r5, r6, pc}

0800b854 <__match>:
 800b854:	b530      	push	{r4, r5, lr}
 800b856:	6803      	ldr	r3, [r0, #0]
 800b858:	780c      	ldrb	r4, [r1, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	2c00      	cmp	r4, #0
 800b85e:	d102      	bne.n	800b866 <__match+0x12>
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	2001      	movs	r0, #1
 800b864:	bd30      	pop	{r4, r5, pc}
 800b866:	781a      	ldrb	r2, [r3, #0]
 800b868:	0015      	movs	r5, r2
 800b86a:	3d41      	subs	r5, #65	@ 0x41
 800b86c:	2d19      	cmp	r5, #25
 800b86e:	d800      	bhi.n	800b872 <__match+0x1e>
 800b870:	3220      	adds	r2, #32
 800b872:	3101      	adds	r1, #1
 800b874:	42a2      	cmp	r2, r4
 800b876:	d0ef      	beq.n	800b858 <__match+0x4>
 800b878:	2000      	movs	r0, #0
 800b87a:	e7f3      	b.n	800b864 <__match+0x10>

0800b87c <__hexnan>:
 800b87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b87e:	680b      	ldr	r3, [r1, #0]
 800b880:	b08b      	sub	sp, #44	@ 0x2c
 800b882:	9201      	str	r2, [sp, #4]
 800b884:	9901      	ldr	r1, [sp, #4]
 800b886:	115a      	asrs	r2, r3, #5
 800b888:	0092      	lsls	r2, r2, #2
 800b88a:	188a      	adds	r2, r1, r2
 800b88c:	9202      	str	r2, [sp, #8]
 800b88e:	0019      	movs	r1, r3
 800b890:	221f      	movs	r2, #31
 800b892:	4011      	ands	r1, r2
 800b894:	9008      	str	r0, [sp, #32]
 800b896:	9106      	str	r1, [sp, #24]
 800b898:	4213      	tst	r3, r2
 800b89a:	d002      	beq.n	800b8a2 <__hexnan+0x26>
 800b89c:	9b02      	ldr	r3, [sp, #8]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	9302      	str	r3, [sp, #8]
 800b8a2:	9b02      	ldr	r3, [sp, #8]
 800b8a4:	2500      	movs	r5, #0
 800b8a6:	1f1f      	subs	r7, r3, #4
 800b8a8:	003e      	movs	r6, r7
 800b8aa:	003c      	movs	r4, r7
 800b8ac:	9b08      	ldr	r3, [sp, #32]
 800b8ae:	603d      	str	r5, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	9507      	str	r5, [sp, #28]
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	9503      	str	r5, [sp, #12]
 800b8b8:	9b05      	ldr	r3, [sp, #20]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8be:	9b05      	ldr	r3, [sp, #20]
 800b8c0:	785b      	ldrb	r3, [r3, #1]
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d028      	beq.n	800b91a <__hexnan+0x9e>
 800b8c8:	9804      	ldr	r0, [sp, #16]
 800b8ca:	f7ff fd77 	bl	800b3bc <__hexdig_fun>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d155      	bne.n	800b97e <__hexnan+0x102>
 800b8d2:	9b04      	ldr	r3, [sp, #16]
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d819      	bhi.n	800b90c <__hexnan+0x90>
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	dd12      	ble.n	800b906 <__hexnan+0x8a>
 800b8e0:	42b4      	cmp	r4, r6
 800b8e2:	d206      	bcs.n	800b8f2 <__hexnan+0x76>
 800b8e4:	2d07      	cmp	r5, #7
 800b8e6:	dc04      	bgt.n	800b8f2 <__hexnan+0x76>
 800b8e8:	002a      	movs	r2, r5
 800b8ea:	0031      	movs	r1, r6
 800b8ec:	0020      	movs	r0, r4
 800b8ee:	f7ff ff9f 	bl	800b830 <L_shift>
 800b8f2:	9b01      	ldr	r3, [sp, #4]
 800b8f4:	2508      	movs	r5, #8
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	d905      	bls.n	800b906 <__hexnan+0x8a>
 800b8fa:	1f26      	subs	r6, r4, #4
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	0034      	movs	r4, r6
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	6035      	str	r5, [r6, #0]
 800b904:	9307      	str	r3, [sp, #28]
 800b906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b908:	9305      	str	r3, [sp, #20]
 800b90a:	e7d5      	b.n	800b8b8 <__hexnan+0x3c>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	2b29      	cmp	r3, #41	@ 0x29
 800b910:	d15a      	bne.n	800b9c8 <__hexnan+0x14c>
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	9a08      	ldr	r2, [sp, #32]
 800b916:	3302      	adds	r3, #2
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d053      	beq.n	800b9c8 <__hexnan+0x14c>
 800b920:	42b4      	cmp	r4, r6
 800b922:	d206      	bcs.n	800b932 <__hexnan+0xb6>
 800b924:	2d07      	cmp	r5, #7
 800b926:	dc04      	bgt.n	800b932 <__hexnan+0xb6>
 800b928:	002a      	movs	r2, r5
 800b92a:	0031      	movs	r1, r6
 800b92c:	0020      	movs	r0, r4
 800b92e:	f7ff ff7f 	bl	800b830 <L_shift>
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	429c      	cmp	r4, r3
 800b936:	d936      	bls.n	800b9a6 <__hexnan+0x12a>
 800b938:	001a      	movs	r2, r3
 800b93a:	0023      	movs	r3, r4
 800b93c:	cb02      	ldmia	r3!, {r1}
 800b93e:	c202      	stmia	r2!, {r1}
 800b940:	429f      	cmp	r7, r3
 800b942:	d2fb      	bcs.n	800b93c <__hexnan+0xc0>
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	1c61      	adds	r1, r4, #1
 800b948:	1eda      	subs	r2, r3, #3
 800b94a:	2304      	movs	r3, #4
 800b94c:	4291      	cmp	r1, r2
 800b94e:	d805      	bhi.n	800b95c <__hexnan+0xe0>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	3b04      	subs	r3, #4
 800b954:	1b1b      	subs	r3, r3, r4
 800b956:	089b      	lsrs	r3, r3, #2
 800b958:	3301      	adds	r3, #1
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	9a01      	ldr	r2, [sp, #4]
 800b95e:	18d3      	adds	r3, r2, r3
 800b960:	2200      	movs	r2, #0
 800b962:	c304      	stmia	r3!, {r2}
 800b964:	429f      	cmp	r7, r3
 800b966:	d2fc      	bcs.n	800b962 <__hexnan+0xe6>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d104      	bne.n	800b978 <__hexnan+0xfc>
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	429f      	cmp	r7, r3
 800b972:	d127      	bne.n	800b9c4 <__hexnan+0x148>
 800b974:	2301      	movs	r3, #1
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	2005      	movs	r0, #5
 800b97a:	b00b      	add	sp, #44	@ 0x2c
 800b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	3501      	adds	r5, #1
 800b982:	3301      	adds	r3, #1
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	2d08      	cmp	r5, #8
 800b988:	dd06      	ble.n	800b998 <__hexnan+0x11c>
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	429c      	cmp	r4, r3
 800b98e:	d9ba      	bls.n	800b906 <__hexnan+0x8a>
 800b990:	2300      	movs	r3, #0
 800b992:	2501      	movs	r5, #1
 800b994:	3c04      	subs	r4, #4
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	220f      	movs	r2, #15
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	4010      	ands	r0, r2
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4303      	orrs	r3, r0
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	e7af      	b.n	800b906 <__hexnan+0x8a>
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d0dd      	beq.n	800b968 <__hexnan+0xec>
 800b9ac:	2320      	movs	r3, #32
 800b9ae:	9a06      	ldr	r2, [sp, #24]
 800b9b0:	9902      	ldr	r1, [sp, #8]
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	4252      	negs	r2, r2
 800b9b8:	40da      	lsrs	r2, r3
 800b9ba:	3904      	subs	r1, #4
 800b9bc:	680b      	ldr	r3, [r1, #0]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	600b      	str	r3, [r1, #0]
 800b9c2:	e7d1      	b.n	800b968 <__hexnan+0xec>
 800b9c4:	3f04      	subs	r7, #4
 800b9c6:	e7cf      	b.n	800b968 <__hexnan+0xec>
 800b9c8:	2004      	movs	r0, #4
 800b9ca:	e7d6      	b.n	800b97a <__hexnan+0xfe>

0800b9cc <__ascii_mbtowc>:
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d100      	bne.n	800b9d4 <__ascii_mbtowc+0x8>
 800b9d2:	a901      	add	r1, sp, #4
 800b9d4:	1e10      	subs	r0, r2, #0
 800b9d6:	d006      	beq.n	800b9e6 <__ascii_mbtowc+0x1a>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d006      	beq.n	800b9ea <__ascii_mbtowc+0x1e>
 800b9dc:	7813      	ldrb	r3, [r2, #0]
 800b9de:	600b      	str	r3, [r1, #0]
 800b9e0:	7810      	ldrb	r0, [r2, #0]
 800b9e2:	1e43      	subs	r3, r0, #1
 800b9e4:	4198      	sbcs	r0, r3
 800b9e6:	b002      	add	sp, #8
 800b9e8:	4770      	bx	lr
 800b9ea:	2002      	movs	r0, #2
 800b9ec:	4240      	negs	r0, r0
 800b9ee:	e7fa      	b.n	800b9e6 <__ascii_mbtowc+0x1a>

0800b9f0 <_realloc_r>:
 800b9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9f2:	0006      	movs	r6, r0
 800b9f4:	000c      	movs	r4, r1
 800b9f6:	0015      	movs	r5, r2
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	d105      	bne.n	800ba08 <_realloc_r+0x18>
 800b9fc:	0011      	movs	r1, r2
 800b9fe:	f7fd fdef 	bl	80095e0 <_malloc_r>
 800ba02:	0004      	movs	r4, r0
 800ba04:	0020      	movs	r0, r4
 800ba06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	d103      	bne.n	800ba14 <_realloc_r+0x24>
 800ba0c:	f7fd fd72 	bl	80094f4 <_free_r>
 800ba10:	2400      	movs	r4, #0
 800ba12:	e7f7      	b.n	800ba04 <_realloc_r+0x14>
 800ba14:	f000 f83f 	bl	800ba96 <_malloc_usable_size_r>
 800ba18:	0007      	movs	r7, r0
 800ba1a:	4285      	cmp	r5, r0
 800ba1c:	d802      	bhi.n	800ba24 <_realloc_r+0x34>
 800ba1e:	0843      	lsrs	r3, r0, #1
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d3ef      	bcc.n	800ba04 <_realloc_r+0x14>
 800ba24:	0029      	movs	r1, r5
 800ba26:	0030      	movs	r0, r6
 800ba28:	f7fd fdda 	bl	80095e0 <_malloc_r>
 800ba2c:	9001      	str	r0, [sp, #4]
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0ee      	beq.n	800ba10 <_realloc_r+0x20>
 800ba32:	002a      	movs	r2, r5
 800ba34:	42bd      	cmp	r5, r7
 800ba36:	d900      	bls.n	800ba3a <_realloc_r+0x4a>
 800ba38:	003a      	movs	r2, r7
 800ba3a:	0021      	movs	r1, r4
 800ba3c:	9801      	ldr	r0, [sp, #4]
 800ba3e:	f7ff fc0f 	bl	800b260 <memcpy>
 800ba42:	0021      	movs	r1, r4
 800ba44:	0030      	movs	r0, r6
 800ba46:	f7fd fd55 	bl	80094f4 <_free_r>
 800ba4a:	9c01      	ldr	r4, [sp, #4]
 800ba4c:	e7da      	b.n	800ba04 <_realloc_r+0x14>

0800ba4e <__ascii_wctomb>:
 800ba4e:	0003      	movs	r3, r0
 800ba50:	1e08      	subs	r0, r1, #0
 800ba52:	d005      	beq.n	800ba60 <__ascii_wctomb+0x12>
 800ba54:	2aff      	cmp	r2, #255	@ 0xff
 800ba56:	d904      	bls.n	800ba62 <__ascii_wctomb+0x14>
 800ba58:	228a      	movs	r2, #138	@ 0x8a
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	4240      	negs	r0, r0
 800ba60:	4770      	bx	lr
 800ba62:	2001      	movs	r0, #1
 800ba64:	700a      	strb	r2, [r1, #0]
 800ba66:	e7fb      	b.n	800ba60 <__ascii_wctomb+0x12>

0800ba68 <fiprintf>:
 800ba68:	b40e      	push	{r1, r2, r3}
 800ba6a:	b517      	push	{r0, r1, r2, r4, lr}
 800ba6c:	4c05      	ldr	r4, [pc, #20]	@ (800ba84 <fiprintf+0x1c>)
 800ba6e:	ab05      	add	r3, sp, #20
 800ba70:	cb04      	ldmia	r3!, {r2}
 800ba72:	0001      	movs	r1, r0
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	f000 f83c 	bl	800baf4 <_vfiprintf_r>
 800ba7c:	bc1e      	pop	{r1, r2, r3, r4}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	b003      	add	sp, #12
 800ba82:	4718      	bx	r3
 800ba84:	20000028 	.word	0x20000028

0800ba88 <abort>:
 800ba88:	2006      	movs	r0, #6
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	f000 fa18 	bl	800bec0 <raise>
 800ba90:	2001      	movs	r0, #1
 800ba92:	f7f8 fe6c 	bl	800476e <_exit>

0800ba96 <_malloc_usable_size_r>:
 800ba96:	1f0b      	subs	r3, r1, #4
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	1f18      	subs	r0, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	da01      	bge.n	800baa4 <_malloc_usable_size_r+0xe>
 800baa0:	580b      	ldr	r3, [r1, r0]
 800baa2:	18c0      	adds	r0, r0, r3
 800baa4:	4770      	bx	lr

0800baa6 <__sfputc_r>:
 800baa6:	6893      	ldr	r3, [r2, #8]
 800baa8:	b510      	push	{r4, lr}
 800baaa:	3b01      	subs	r3, #1
 800baac:	6093      	str	r3, [r2, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	da04      	bge.n	800babc <__sfputc_r+0x16>
 800bab2:	6994      	ldr	r4, [r2, #24]
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	db07      	blt.n	800bac8 <__sfputc_r+0x22>
 800bab8:	290a      	cmp	r1, #10
 800baba:	d005      	beq.n	800bac8 <__sfputc_r+0x22>
 800babc:	6813      	ldr	r3, [r2, #0]
 800babe:	1c58      	adds	r0, r3, #1
 800bac0:	6010      	str	r0, [r2, #0]
 800bac2:	7019      	strb	r1, [r3, #0]
 800bac4:	0008      	movs	r0, r1
 800bac6:	bd10      	pop	{r4, pc}
 800bac8:	f000 f930 	bl	800bd2c <__swbuf_r>
 800bacc:	0001      	movs	r1, r0
 800bace:	e7f9      	b.n	800bac4 <__sfputc_r+0x1e>

0800bad0 <__sfputs_r>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	0006      	movs	r6, r0
 800bad4:	000f      	movs	r7, r1
 800bad6:	0014      	movs	r4, r2
 800bad8:	18d5      	adds	r5, r2, r3
 800bada:	42ac      	cmp	r4, r5
 800badc:	d101      	bne.n	800bae2 <__sfputs_r+0x12>
 800bade:	2000      	movs	r0, #0
 800bae0:	e007      	b.n	800baf2 <__sfputs_r+0x22>
 800bae2:	7821      	ldrb	r1, [r4, #0]
 800bae4:	003a      	movs	r2, r7
 800bae6:	0030      	movs	r0, r6
 800bae8:	f7ff ffdd 	bl	800baa6 <__sfputc_r>
 800baec:	3401      	adds	r4, #1
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d1f3      	bne.n	800bada <__sfputs_r+0xa>
 800baf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baf4 <_vfiprintf_r>:
 800baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf6:	b0a1      	sub	sp, #132	@ 0x84
 800baf8:	000f      	movs	r7, r1
 800bafa:	0015      	movs	r5, r2
 800bafc:	001e      	movs	r6, r3
 800bafe:	9003      	str	r0, [sp, #12]
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d004      	beq.n	800bb0e <_vfiprintf_r+0x1a>
 800bb04:	6a03      	ldr	r3, [r0, #32]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <_vfiprintf_r+0x1a>
 800bb0a:	f7fc fd07 	bl	800851c <__sinit>
 800bb0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb10:	07db      	lsls	r3, r3, #31
 800bb12:	d405      	bmi.n	800bb20 <_vfiprintf_r+0x2c>
 800bb14:	89bb      	ldrh	r3, [r7, #12]
 800bb16:	059b      	lsls	r3, r3, #22
 800bb18:	d402      	bmi.n	800bb20 <_vfiprintf_r+0x2c>
 800bb1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bb1c:	f7fc fe57 	bl	80087ce <__retarget_lock_acquire_recursive>
 800bb20:	89bb      	ldrh	r3, [r7, #12]
 800bb22:	071b      	lsls	r3, r3, #28
 800bb24:	d502      	bpl.n	800bb2c <_vfiprintf_r+0x38>
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d113      	bne.n	800bb54 <_vfiprintf_r+0x60>
 800bb2c:	0039      	movs	r1, r7
 800bb2e:	9803      	ldr	r0, [sp, #12]
 800bb30:	f000 f93e 	bl	800bdb0 <__swsetup_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d00d      	beq.n	800bb54 <_vfiprintf_r+0x60>
 800bb38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb3a:	07db      	lsls	r3, r3, #31
 800bb3c:	d503      	bpl.n	800bb46 <_vfiprintf_r+0x52>
 800bb3e:	2001      	movs	r0, #1
 800bb40:	4240      	negs	r0, r0
 800bb42:	b021      	add	sp, #132	@ 0x84
 800bb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb46:	89bb      	ldrh	r3, [r7, #12]
 800bb48:	059b      	lsls	r3, r3, #22
 800bb4a:	d4f8      	bmi.n	800bb3e <_vfiprintf_r+0x4a>
 800bb4c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bb4e:	f7fc fe3f 	bl	80087d0 <__retarget_lock_release_recursive>
 800bb52:	e7f4      	b.n	800bb3e <_vfiprintf_r+0x4a>
 800bb54:	2300      	movs	r3, #0
 800bb56:	ac08      	add	r4, sp, #32
 800bb58:	6163      	str	r3, [r4, #20]
 800bb5a:	3320      	adds	r3, #32
 800bb5c:	7663      	strb	r3, [r4, #25]
 800bb5e:	3310      	adds	r3, #16
 800bb60:	76a3      	strb	r3, [r4, #26]
 800bb62:	9607      	str	r6, [sp, #28]
 800bb64:	002e      	movs	r6, r5
 800bb66:	7833      	ldrb	r3, [r6, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <_vfiprintf_r+0x7c>
 800bb6c:	2b25      	cmp	r3, #37	@ 0x25
 800bb6e:	d148      	bne.n	800bc02 <_vfiprintf_r+0x10e>
 800bb70:	1b73      	subs	r3, r6, r5
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	42ae      	cmp	r6, r5
 800bb76:	d00b      	beq.n	800bb90 <_vfiprintf_r+0x9c>
 800bb78:	002a      	movs	r2, r5
 800bb7a:	0039      	movs	r1, r7
 800bb7c:	9803      	ldr	r0, [sp, #12]
 800bb7e:	f7ff ffa7 	bl	800bad0 <__sfputs_r>
 800bb82:	3001      	adds	r0, #1
 800bb84:	d100      	bne.n	800bb88 <_vfiprintf_r+0x94>
 800bb86:	e0ae      	b.n	800bce6 <_vfiprintf_r+0x1f2>
 800bb88:	6963      	ldr	r3, [r4, #20]
 800bb8a:	9a05      	ldr	r2, [sp, #20]
 800bb8c:	189b      	adds	r3, r3, r2
 800bb8e:	6163      	str	r3, [r4, #20]
 800bb90:	7833      	ldrb	r3, [r6, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d100      	bne.n	800bb98 <_vfiprintf_r+0xa4>
 800bb96:	e0a6      	b.n	800bce6 <_vfiprintf_r+0x1f2>
 800bb98:	2201      	movs	r2, #1
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	4252      	negs	r2, r2
 800bb9e:	6062      	str	r2, [r4, #4]
 800bba0:	a904      	add	r1, sp, #16
 800bba2:	3254      	adds	r2, #84	@ 0x54
 800bba4:	1852      	adds	r2, r2, r1
 800bba6:	1c75      	adds	r5, r6, #1
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	60e3      	str	r3, [r4, #12]
 800bbac:	60a3      	str	r3, [r4, #8]
 800bbae:	7013      	strb	r3, [r2, #0]
 800bbb0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bbb2:	4b59      	ldr	r3, [pc, #356]	@ (800bd18 <_vfiprintf_r+0x224>)
 800bbb4:	2205      	movs	r2, #5
 800bbb6:	0018      	movs	r0, r3
 800bbb8:	7829      	ldrb	r1, [r5, #0]
 800bbba:	9305      	str	r3, [sp, #20]
 800bbbc:	f7fc fe09 	bl	80087d2 <memchr>
 800bbc0:	1c6e      	adds	r6, r5, #1
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d11f      	bne.n	800bc06 <_vfiprintf_r+0x112>
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	06d3      	lsls	r3, r2, #27
 800bbca:	d504      	bpl.n	800bbd6 <_vfiprintf_r+0xe2>
 800bbcc:	2353      	movs	r3, #83	@ 0x53
 800bbce:	a904      	add	r1, sp, #16
 800bbd0:	185b      	adds	r3, r3, r1
 800bbd2:	2120      	movs	r1, #32
 800bbd4:	7019      	strb	r1, [r3, #0]
 800bbd6:	0713      	lsls	r3, r2, #28
 800bbd8:	d504      	bpl.n	800bbe4 <_vfiprintf_r+0xf0>
 800bbda:	2353      	movs	r3, #83	@ 0x53
 800bbdc:	a904      	add	r1, sp, #16
 800bbde:	185b      	adds	r3, r3, r1
 800bbe0:	212b      	movs	r1, #43	@ 0x2b
 800bbe2:	7019      	strb	r1, [r3, #0]
 800bbe4:	782b      	ldrb	r3, [r5, #0]
 800bbe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe8:	d016      	beq.n	800bc18 <_vfiprintf_r+0x124>
 800bbea:	002e      	movs	r6, r5
 800bbec:	2100      	movs	r1, #0
 800bbee:	200a      	movs	r0, #10
 800bbf0:	68e3      	ldr	r3, [r4, #12]
 800bbf2:	7832      	ldrb	r2, [r6, #0]
 800bbf4:	1c75      	adds	r5, r6, #1
 800bbf6:	3a30      	subs	r2, #48	@ 0x30
 800bbf8:	2a09      	cmp	r2, #9
 800bbfa:	d950      	bls.n	800bc9e <_vfiprintf_r+0x1aa>
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d111      	bne.n	800bc24 <_vfiprintf_r+0x130>
 800bc00:	e017      	b.n	800bc32 <_vfiprintf_r+0x13e>
 800bc02:	3601      	adds	r6, #1
 800bc04:	e7af      	b.n	800bb66 <_vfiprintf_r+0x72>
 800bc06:	9b05      	ldr	r3, [sp, #20]
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	1ac0      	subs	r0, r0, r3
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	4083      	lsls	r3, r0
 800bc10:	4313      	orrs	r3, r2
 800bc12:	0035      	movs	r5, r6
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	e7cc      	b.n	800bbb2 <_vfiprintf_r+0xbe>
 800bc18:	9b07      	ldr	r3, [sp, #28]
 800bc1a:	1d19      	adds	r1, r3, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	9107      	str	r1, [sp, #28]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db01      	blt.n	800bc28 <_vfiprintf_r+0x134>
 800bc24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc26:	e004      	b.n	800bc32 <_vfiprintf_r+0x13e>
 800bc28:	425b      	negs	r3, r3
 800bc2a:	60e3      	str	r3, [r4, #12]
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	7833      	ldrb	r3, [r6, #0]
 800bc34:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc36:	d10c      	bne.n	800bc52 <_vfiprintf_r+0x15e>
 800bc38:	7873      	ldrb	r3, [r6, #1]
 800bc3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc3c:	d134      	bne.n	800bca8 <_vfiprintf_r+0x1b4>
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	3602      	adds	r6, #2
 800bc42:	1d1a      	adds	r2, r3, #4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	9207      	str	r2, [sp, #28]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	da01      	bge.n	800bc50 <_vfiprintf_r+0x15c>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	425b      	negs	r3, r3
 800bc50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc52:	4d32      	ldr	r5, [pc, #200]	@ (800bd1c <_vfiprintf_r+0x228>)
 800bc54:	2203      	movs	r2, #3
 800bc56:	0028      	movs	r0, r5
 800bc58:	7831      	ldrb	r1, [r6, #0]
 800bc5a:	f7fc fdba 	bl	80087d2 <memchr>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d006      	beq.n	800bc70 <_vfiprintf_r+0x17c>
 800bc62:	2340      	movs	r3, #64	@ 0x40
 800bc64:	1b40      	subs	r0, r0, r5
 800bc66:	4083      	lsls	r3, r0
 800bc68:	6822      	ldr	r2, [r4, #0]
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	6023      	str	r3, [r4, #0]
 800bc70:	7831      	ldrb	r1, [r6, #0]
 800bc72:	2206      	movs	r2, #6
 800bc74:	482a      	ldr	r0, [pc, #168]	@ (800bd20 <_vfiprintf_r+0x22c>)
 800bc76:	1c75      	adds	r5, r6, #1
 800bc78:	7621      	strb	r1, [r4, #24]
 800bc7a:	f7fc fdaa 	bl	80087d2 <memchr>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d040      	beq.n	800bd04 <_vfiprintf_r+0x210>
 800bc82:	4b28      	ldr	r3, [pc, #160]	@ (800bd24 <_vfiprintf_r+0x230>)
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d122      	bne.n	800bcce <_vfiprintf_r+0x1da>
 800bc88:	2207      	movs	r2, #7
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	3307      	adds	r3, #7
 800bc8e:	4393      	bics	r3, r2
 800bc90:	3308      	adds	r3, #8
 800bc92:	9307      	str	r3, [sp, #28]
 800bc94:	6963      	ldr	r3, [r4, #20]
 800bc96:	9a04      	ldr	r2, [sp, #16]
 800bc98:	189b      	adds	r3, r3, r2
 800bc9a:	6163      	str	r3, [r4, #20]
 800bc9c:	e762      	b.n	800bb64 <_vfiprintf_r+0x70>
 800bc9e:	4343      	muls	r3, r0
 800bca0:	002e      	movs	r6, r5
 800bca2:	2101      	movs	r1, #1
 800bca4:	189b      	adds	r3, r3, r2
 800bca6:	e7a4      	b.n	800bbf2 <_vfiprintf_r+0xfe>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	200a      	movs	r0, #10
 800bcac:	0019      	movs	r1, r3
 800bcae:	3601      	adds	r6, #1
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	7832      	ldrb	r2, [r6, #0]
 800bcb4:	1c75      	adds	r5, r6, #1
 800bcb6:	3a30      	subs	r2, #48	@ 0x30
 800bcb8:	2a09      	cmp	r2, #9
 800bcba:	d903      	bls.n	800bcc4 <_vfiprintf_r+0x1d0>
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d0c8      	beq.n	800bc52 <_vfiprintf_r+0x15e>
 800bcc0:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcc2:	e7c6      	b.n	800bc52 <_vfiprintf_r+0x15e>
 800bcc4:	4341      	muls	r1, r0
 800bcc6:	002e      	movs	r6, r5
 800bcc8:	2301      	movs	r3, #1
 800bcca:	1889      	adds	r1, r1, r2
 800bccc:	e7f1      	b.n	800bcb2 <_vfiprintf_r+0x1be>
 800bcce:	aa07      	add	r2, sp, #28
 800bcd0:	9200      	str	r2, [sp, #0]
 800bcd2:	0021      	movs	r1, r4
 800bcd4:	003a      	movs	r2, r7
 800bcd6:	4b14      	ldr	r3, [pc, #80]	@ (800bd28 <_vfiprintf_r+0x234>)
 800bcd8:	9803      	ldr	r0, [sp, #12]
 800bcda:	f7fb fdc5 	bl	8007868 <_printf_float>
 800bcde:	9004      	str	r0, [sp, #16]
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	3301      	adds	r3, #1
 800bce4:	d1d6      	bne.n	800bc94 <_vfiprintf_r+0x1a0>
 800bce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bce8:	07db      	lsls	r3, r3, #31
 800bcea:	d405      	bmi.n	800bcf8 <_vfiprintf_r+0x204>
 800bcec:	89bb      	ldrh	r3, [r7, #12]
 800bcee:	059b      	lsls	r3, r3, #22
 800bcf0:	d402      	bmi.n	800bcf8 <_vfiprintf_r+0x204>
 800bcf2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bcf4:	f7fc fd6c 	bl	80087d0 <__retarget_lock_release_recursive>
 800bcf8:	89bb      	ldrh	r3, [r7, #12]
 800bcfa:	065b      	lsls	r3, r3, #25
 800bcfc:	d500      	bpl.n	800bd00 <_vfiprintf_r+0x20c>
 800bcfe:	e71e      	b.n	800bb3e <_vfiprintf_r+0x4a>
 800bd00:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bd02:	e71e      	b.n	800bb42 <_vfiprintf_r+0x4e>
 800bd04:	aa07      	add	r2, sp, #28
 800bd06:	9200      	str	r2, [sp, #0]
 800bd08:	0021      	movs	r1, r4
 800bd0a:	003a      	movs	r2, r7
 800bd0c:	4b06      	ldr	r3, [pc, #24]	@ (800bd28 <_vfiprintf_r+0x234>)
 800bd0e:	9803      	ldr	r0, [sp, #12]
 800bd10:	f7fc f858 	bl	8007dc4 <_printf_i>
 800bd14:	e7e3      	b.n	800bcde <_vfiprintf_r+0x1ea>
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	0800c8a1 	.word	0x0800c8a1
 800bd1c:	0800c8a7 	.word	0x0800c8a7
 800bd20:	0800c8ab 	.word	0x0800c8ab
 800bd24:	08007869 	.word	0x08007869
 800bd28:	0800bad1 	.word	0x0800bad1

0800bd2c <__swbuf_r>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	0006      	movs	r6, r0
 800bd30:	000d      	movs	r5, r1
 800bd32:	0014      	movs	r4, r2
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d004      	beq.n	800bd42 <__swbuf_r+0x16>
 800bd38:	6a03      	ldr	r3, [r0, #32]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <__swbuf_r+0x16>
 800bd3e:	f7fc fbed 	bl	800851c <__sinit>
 800bd42:	69a3      	ldr	r3, [r4, #24]
 800bd44:	60a3      	str	r3, [r4, #8]
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	071b      	lsls	r3, r3, #28
 800bd4a:	d502      	bpl.n	800bd52 <__swbuf_r+0x26>
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d109      	bne.n	800bd66 <__swbuf_r+0x3a>
 800bd52:	0021      	movs	r1, r4
 800bd54:	0030      	movs	r0, r6
 800bd56:	f000 f82b 	bl	800bdb0 <__swsetup_r>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d003      	beq.n	800bd66 <__swbuf_r+0x3a>
 800bd5e:	2501      	movs	r5, #1
 800bd60:	426d      	negs	r5, r5
 800bd62:	0028      	movs	r0, r5
 800bd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	6820      	ldr	r0, [r4, #0]
 800bd6a:	b2ef      	uxtb	r7, r5
 800bd6c:	1ac0      	subs	r0, r0, r3
 800bd6e:	6963      	ldr	r3, [r4, #20]
 800bd70:	b2ed      	uxtb	r5, r5
 800bd72:	4283      	cmp	r3, r0
 800bd74:	dc05      	bgt.n	800bd82 <__swbuf_r+0x56>
 800bd76:	0021      	movs	r1, r4
 800bd78:	0030      	movs	r0, r6
 800bd7a:	f7ff fa0f 	bl	800b19c <_fflush_r>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d1ed      	bne.n	800bd5e <__swbuf_r+0x32>
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	3001      	adds	r0, #1
 800bd86:	3b01      	subs	r3, #1
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	6022      	str	r2, [r4, #0]
 800bd90:	701f      	strb	r7, [r3, #0]
 800bd92:	6963      	ldr	r3, [r4, #20]
 800bd94:	4283      	cmp	r3, r0
 800bd96:	d004      	beq.n	800bda2 <__swbuf_r+0x76>
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d5e1      	bpl.n	800bd62 <__swbuf_r+0x36>
 800bd9e:	2d0a      	cmp	r5, #10
 800bda0:	d1df      	bne.n	800bd62 <__swbuf_r+0x36>
 800bda2:	0021      	movs	r1, r4
 800bda4:	0030      	movs	r0, r6
 800bda6:	f7ff f9f9 	bl	800b19c <_fflush_r>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d0d9      	beq.n	800bd62 <__swbuf_r+0x36>
 800bdae:	e7d6      	b.n	800bd5e <__swbuf_r+0x32>

0800bdb0 <__swsetup_r>:
 800bdb0:	4b2d      	ldr	r3, [pc, #180]	@ (800be68 <__swsetup_r+0xb8>)
 800bdb2:	b570      	push	{r4, r5, r6, lr}
 800bdb4:	0005      	movs	r5, r0
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	000c      	movs	r4, r1
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d004      	beq.n	800bdc8 <__swsetup_r+0x18>
 800bdbe:	6a03      	ldr	r3, [r0, #32]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <__swsetup_r+0x18>
 800bdc4:	f7fc fbaa 	bl	800851c <__sinit>
 800bdc8:	230c      	movs	r3, #12
 800bdca:	5ee2      	ldrsh	r2, [r4, r3]
 800bdcc:	0713      	lsls	r3, r2, #28
 800bdce:	d423      	bmi.n	800be18 <__swsetup_r+0x68>
 800bdd0:	06d3      	lsls	r3, r2, #27
 800bdd2:	d407      	bmi.n	800bde4 <__swsetup_r+0x34>
 800bdd4:	2309      	movs	r3, #9
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	2340      	movs	r3, #64	@ 0x40
 800bdda:	2001      	movs	r0, #1
 800bddc:	4313      	orrs	r3, r2
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	4240      	negs	r0, r0
 800bde2:	e03a      	b.n	800be5a <__swsetup_r+0xaa>
 800bde4:	0752      	lsls	r2, r2, #29
 800bde6:	d513      	bpl.n	800be10 <__swsetup_r+0x60>
 800bde8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d008      	beq.n	800be00 <__swsetup_r+0x50>
 800bdee:	0023      	movs	r3, r4
 800bdf0:	3344      	adds	r3, #68	@ 0x44
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	d002      	beq.n	800bdfc <__swsetup_r+0x4c>
 800bdf6:	0028      	movs	r0, r5
 800bdf8:	f7fd fb7c 	bl	80094f4 <_free_r>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	6363      	str	r3, [r4, #52]	@ 0x34
 800be00:	2224      	movs	r2, #36	@ 0x24
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	4393      	bics	r3, r2
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	2300      	movs	r3, #0
 800be0a:	6063      	str	r3, [r4, #4]
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	2308      	movs	r3, #8
 800be12:	89a2      	ldrh	r2, [r4, #12]
 800be14:	4313      	orrs	r3, r2
 800be16:	81a3      	strh	r3, [r4, #12]
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10b      	bne.n	800be36 <__swsetup_r+0x86>
 800be1e:	21a0      	movs	r1, #160	@ 0xa0
 800be20:	2280      	movs	r2, #128	@ 0x80
 800be22:	89a3      	ldrh	r3, [r4, #12]
 800be24:	0089      	lsls	r1, r1, #2
 800be26:	0092      	lsls	r2, r2, #2
 800be28:	400b      	ands	r3, r1
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d003      	beq.n	800be36 <__swsetup_r+0x86>
 800be2e:	0021      	movs	r1, r4
 800be30:	0028      	movs	r0, r5
 800be32:	f000 f88f 	bl	800bf54 <__smakebuf_r>
 800be36:	230c      	movs	r3, #12
 800be38:	5ee2      	ldrsh	r2, [r4, r3]
 800be3a:	2101      	movs	r1, #1
 800be3c:	0013      	movs	r3, r2
 800be3e:	400b      	ands	r3, r1
 800be40:	420a      	tst	r2, r1
 800be42:	d00b      	beq.n	800be5c <__swsetup_r+0xac>
 800be44:	2300      	movs	r3, #0
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	6963      	ldr	r3, [r4, #20]
 800be4a:	425b      	negs	r3, r3
 800be4c:	61a3      	str	r3, [r4, #24]
 800be4e:	2000      	movs	r0, #0
 800be50:	6923      	ldr	r3, [r4, #16]
 800be52:	4283      	cmp	r3, r0
 800be54:	d101      	bne.n	800be5a <__swsetup_r+0xaa>
 800be56:	0613      	lsls	r3, r2, #24
 800be58:	d4be      	bmi.n	800bdd8 <__swsetup_r+0x28>
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	0791      	lsls	r1, r2, #30
 800be5e:	d400      	bmi.n	800be62 <__swsetup_r+0xb2>
 800be60:	6963      	ldr	r3, [r4, #20]
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	e7f3      	b.n	800be4e <__swsetup_r+0x9e>
 800be66:	46c0      	nop			@ (mov r8, r8)
 800be68:	20000028 	.word	0x20000028

0800be6c <_raise_r>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	0004      	movs	r4, r0
 800be70:	000d      	movs	r5, r1
 800be72:	291f      	cmp	r1, #31
 800be74:	d904      	bls.n	800be80 <_raise_r+0x14>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	2001      	movs	r0, #1
 800be7c:	4240      	negs	r0, r0
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <_raise_r+0x24>
 800be86:	008a      	lsls	r2, r1, #2
 800be88:	189b      	adds	r3, r3, r2
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	d108      	bne.n	800bea2 <_raise_r+0x36>
 800be90:	0020      	movs	r0, r4
 800be92:	f000 f831 	bl	800bef8 <_getpid_r>
 800be96:	002a      	movs	r2, r5
 800be98:	0001      	movs	r1, r0
 800be9a:	0020      	movs	r0, r4
 800be9c:	f000 f81a 	bl	800bed4 <_kill_r>
 800bea0:	e7ed      	b.n	800be7e <_raise_r+0x12>
 800bea2:	2a01      	cmp	r2, #1
 800bea4:	d009      	beq.n	800beba <_raise_r+0x4e>
 800bea6:	1c51      	adds	r1, r2, #1
 800bea8:	d103      	bne.n	800beb2 <_raise_r+0x46>
 800beaa:	2316      	movs	r3, #22
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	2001      	movs	r0, #1
 800beb0:	e7e5      	b.n	800be7e <_raise_r+0x12>
 800beb2:	2100      	movs	r1, #0
 800beb4:	0028      	movs	r0, r5
 800beb6:	6019      	str	r1, [r3, #0]
 800beb8:	4790      	blx	r2
 800beba:	2000      	movs	r0, #0
 800bebc:	e7df      	b.n	800be7e <_raise_r+0x12>
	...

0800bec0 <raise>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4b03      	ldr	r3, [pc, #12]	@ (800bed0 <raise+0x10>)
 800bec4:	0001      	movs	r1, r0
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	f7ff ffd0 	bl	800be6c <_raise_r>
 800becc:	bd10      	pop	{r4, pc}
 800bece:	46c0      	nop			@ (mov r8, r8)
 800bed0:	20000028 	.word	0x20000028

0800bed4 <_kill_r>:
 800bed4:	2300      	movs	r3, #0
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	4d06      	ldr	r5, [pc, #24]	@ (800bef4 <_kill_r+0x20>)
 800beda:	0004      	movs	r4, r0
 800bedc:	0008      	movs	r0, r1
 800bede:	0011      	movs	r1, r2
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f7f8 fc34 	bl	800474e <_kill>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d103      	bne.n	800bef2 <_kill_r+0x1e>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d000      	beq.n	800bef2 <_kill_r+0x1e>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	20000640 	.word	0x20000640

0800bef8 <_getpid_r>:
 800bef8:	b510      	push	{r4, lr}
 800befa:	f7f8 fc22 	bl	8004742 <_getpid>
 800befe:	bd10      	pop	{r4, pc}

0800bf00 <__swhatbuf_r>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	000e      	movs	r6, r1
 800bf04:	001d      	movs	r5, r3
 800bf06:	230e      	movs	r3, #14
 800bf08:	5ec9      	ldrsh	r1, [r1, r3]
 800bf0a:	0014      	movs	r4, r2
 800bf0c:	b096      	sub	sp, #88	@ 0x58
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	da0c      	bge.n	800bf2c <__swhatbuf_r+0x2c>
 800bf12:	89b2      	ldrh	r2, [r6, #12]
 800bf14:	2380      	movs	r3, #128	@ 0x80
 800bf16:	0011      	movs	r1, r2
 800bf18:	4019      	ands	r1, r3
 800bf1a:	421a      	tst	r2, r3
 800bf1c:	d114      	bne.n	800bf48 <__swhatbuf_r+0x48>
 800bf1e:	2380      	movs	r3, #128	@ 0x80
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	2000      	movs	r0, #0
 800bf24:	6029      	str	r1, [r5, #0]
 800bf26:	6023      	str	r3, [r4, #0]
 800bf28:	b016      	add	sp, #88	@ 0x58
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	466a      	mov	r2, sp
 800bf2e:	f000 f853 	bl	800bfd8 <_fstat_r>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	dbed      	blt.n	800bf12 <__swhatbuf_r+0x12>
 800bf36:	23f0      	movs	r3, #240	@ 0xf0
 800bf38:	9901      	ldr	r1, [sp, #4]
 800bf3a:	021b      	lsls	r3, r3, #8
 800bf3c:	4019      	ands	r1, r3
 800bf3e:	4b04      	ldr	r3, [pc, #16]	@ (800bf50 <__swhatbuf_r+0x50>)
 800bf40:	18c9      	adds	r1, r1, r3
 800bf42:	424b      	negs	r3, r1
 800bf44:	4159      	adcs	r1, r3
 800bf46:	e7ea      	b.n	800bf1e <__swhatbuf_r+0x1e>
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2340      	movs	r3, #64	@ 0x40
 800bf4c:	e7e9      	b.n	800bf22 <__swhatbuf_r+0x22>
 800bf4e:	46c0      	nop			@ (mov r8, r8)
 800bf50:	ffffe000 	.word	0xffffe000

0800bf54 <__smakebuf_r>:
 800bf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf56:	2602      	movs	r6, #2
 800bf58:	898b      	ldrh	r3, [r1, #12]
 800bf5a:	0005      	movs	r5, r0
 800bf5c:	000c      	movs	r4, r1
 800bf5e:	b085      	sub	sp, #20
 800bf60:	4233      	tst	r3, r6
 800bf62:	d007      	beq.n	800bf74 <__smakebuf_r+0x20>
 800bf64:	0023      	movs	r3, r4
 800bf66:	3347      	adds	r3, #71	@ 0x47
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	6123      	str	r3, [r4, #16]
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	6163      	str	r3, [r4, #20]
 800bf70:	b005      	add	sp, #20
 800bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	aa02      	add	r2, sp, #8
 800bf78:	f7ff ffc2 	bl	800bf00 <__swhatbuf_r>
 800bf7c:	9f02      	ldr	r7, [sp, #8]
 800bf7e:	9001      	str	r0, [sp, #4]
 800bf80:	0039      	movs	r1, r7
 800bf82:	0028      	movs	r0, r5
 800bf84:	f7fd fb2c 	bl	80095e0 <_malloc_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d108      	bne.n	800bf9e <__smakebuf_r+0x4a>
 800bf8c:	220c      	movs	r2, #12
 800bf8e:	5ea3      	ldrsh	r3, [r4, r2]
 800bf90:	059a      	lsls	r2, r3, #22
 800bf92:	d4ed      	bmi.n	800bf70 <__smakebuf_r+0x1c>
 800bf94:	2203      	movs	r2, #3
 800bf96:	4393      	bics	r3, r2
 800bf98:	431e      	orrs	r6, r3
 800bf9a:	81a6      	strh	r6, [r4, #12]
 800bf9c:	e7e2      	b.n	800bf64 <__smakebuf_r+0x10>
 800bf9e:	2380      	movs	r3, #128	@ 0x80
 800bfa0:	89a2      	ldrh	r2, [r4, #12]
 800bfa2:	6020      	str	r0, [r4, #0]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	81a3      	strh	r3, [r4, #12]
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	6120      	str	r0, [r4, #16]
 800bfac:	6167      	str	r7, [r4, #20]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00c      	beq.n	800bfcc <__smakebuf_r+0x78>
 800bfb2:	0028      	movs	r0, r5
 800bfb4:	230e      	movs	r3, #14
 800bfb6:	5ee1      	ldrsh	r1, [r4, r3]
 800bfb8:	f000 f820 	bl	800bffc <_isatty_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d005      	beq.n	800bfcc <__smakebuf_r+0x78>
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	89a2      	ldrh	r2, [r4, #12]
 800bfc4:	439a      	bics	r2, r3
 800bfc6:	3b02      	subs	r3, #2
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	9a01      	ldr	r2, [sp, #4]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	e7cc      	b.n	800bf70 <__smakebuf_r+0x1c>
	...

0800bfd8 <_fstat_r>:
 800bfd8:	2300      	movs	r3, #0
 800bfda:	b570      	push	{r4, r5, r6, lr}
 800bfdc:	4d06      	ldr	r5, [pc, #24]	@ (800bff8 <_fstat_r+0x20>)
 800bfde:	0004      	movs	r4, r0
 800bfe0:	0008      	movs	r0, r1
 800bfe2:	0011      	movs	r1, r2
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	f7f8 fc12 	bl	800480e <_fstat>
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	d103      	bne.n	800bff6 <_fstat_r+0x1e>
 800bfee:	682b      	ldr	r3, [r5, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d000      	beq.n	800bff6 <_fstat_r+0x1e>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd70      	pop	{r4, r5, r6, pc}
 800bff8:	20000640 	.word	0x20000640

0800bffc <_isatty_r>:
 800bffc:	2300      	movs	r3, #0
 800bffe:	b570      	push	{r4, r5, r6, lr}
 800c000:	4d06      	ldr	r5, [pc, #24]	@ (800c01c <_isatty_r+0x20>)
 800c002:	0004      	movs	r4, r0
 800c004:	0008      	movs	r0, r1
 800c006:	602b      	str	r3, [r5, #0]
 800c008:	f7f8 fc0f 	bl	800482a <_isatty>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d103      	bne.n	800c018 <_isatty_r+0x1c>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d000      	beq.n	800c018 <_isatty_r+0x1c>
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	bd70      	pop	{r4, r5, r6, pc}
 800c01a:	46c0      	nop			@ (mov r8, r8)
 800c01c:	20000640 	.word	0x20000640

0800c020 <expf>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	1c04      	adds	r4, r0, #0
 800c024:	f000 f876 	bl	800c114 <__ieee754_expf>
 800c028:	1c05      	adds	r5, r0, #0
 800c02a:	1c20      	adds	r0, r4, #0
 800c02c:	f000 f820 	bl	800c070 <finitef>
 800c030:	2800      	cmp	r0, #0
 800c032:	d00b      	beq.n	800c04c <expf+0x2c>
 800c034:	490c      	ldr	r1, [pc, #48]	@ (800c068 <expf+0x48>)
 800c036:	1c20      	adds	r0, r4, #0
 800c038:	f7f4 fa5c 	bl	80004f4 <__aeabi_fcmpgt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d007      	beq.n	800c050 <expf+0x30>
 800c040:	f7fc fb9a 	bl	8008778 <__errno>
 800c044:	25ff      	movs	r5, #255	@ 0xff
 800c046:	2322      	movs	r3, #34	@ 0x22
 800c048:	05ed      	lsls	r5, r5, #23
 800c04a:	6003      	str	r3, [r0, #0]
 800c04c:	1c28      	adds	r0, r5, #0
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	4906      	ldr	r1, [pc, #24]	@ (800c06c <expf+0x4c>)
 800c052:	1c20      	adds	r0, r4, #0
 800c054:	f7f4 fa3a 	bl	80004cc <__aeabi_fcmplt>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0f7      	beq.n	800c04c <expf+0x2c>
 800c05c:	f7fc fb8c 	bl	8008778 <__errno>
 800c060:	2322      	movs	r3, #34	@ 0x22
 800c062:	2500      	movs	r5, #0
 800c064:	6003      	str	r3, [r0, #0]
 800c066:	e7f1      	b.n	800c04c <expf+0x2c>
 800c068:	42b17217 	.word	0x42b17217
 800c06c:	c2cff1b5 	.word	0xc2cff1b5

0800c070 <finitef>:
 800c070:	22ff      	movs	r2, #255	@ 0xff
 800c072:	0043      	lsls	r3, r0, #1
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	2001      	movs	r0, #1
 800c078:	05d2      	lsls	r2, r2, #23
 800c07a:	4293      	cmp	r3, r2
 800c07c:	db00      	blt.n	800c080 <finitef+0x10>
 800c07e:	2000      	movs	r0, #0
 800c080:	4770      	bx	lr

0800c082 <fmaxf>:
 800c082:	b570      	push	{r4, r5, r6, lr}
 800c084:	1c04      	adds	r4, r0, #0
 800c086:	1c0d      	adds	r5, r1, #0
 800c088:	f000 f828 	bl	800c0dc <__fpclassifyf>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d102      	bne.n	800c096 <fmaxf+0x14>
 800c090:	1c2c      	adds	r4, r5, #0
 800c092:	1c20      	adds	r0, r4, #0
 800c094:	bd70      	pop	{r4, r5, r6, pc}
 800c096:	1c28      	adds	r0, r5, #0
 800c098:	f000 f820 	bl	800c0dc <__fpclassifyf>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d0f8      	beq.n	800c092 <fmaxf+0x10>
 800c0a0:	1c29      	adds	r1, r5, #0
 800c0a2:	1c20      	adds	r0, r4, #0
 800c0a4:	f7f4 fa26 	bl	80004f4 <__aeabi_fcmpgt>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0f1      	beq.n	800c090 <fmaxf+0xe>
 800c0ac:	e7f1      	b.n	800c092 <fmaxf+0x10>

0800c0ae <fminf>:
 800c0ae:	b570      	push	{r4, r5, r6, lr}
 800c0b0:	1c04      	adds	r4, r0, #0
 800c0b2:	1c0d      	adds	r5, r1, #0
 800c0b4:	f000 f812 	bl	800c0dc <__fpclassifyf>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d102      	bne.n	800c0c2 <fminf+0x14>
 800c0bc:	1c2c      	adds	r4, r5, #0
 800c0be:	1c20      	adds	r0, r4, #0
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	1c28      	adds	r0, r5, #0
 800c0c4:	f000 f80a 	bl	800c0dc <__fpclassifyf>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d0f8      	beq.n	800c0be <fminf+0x10>
 800c0cc:	1c29      	adds	r1, r5, #0
 800c0ce:	1c20      	adds	r0, r4, #0
 800c0d0:	f7f4 f9fc 	bl	80004cc <__aeabi_fcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d0f1      	beq.n	800c0bc <fminf+0xe>
 800c0d8:	e7f1      	b.n	800c0be <fminf+0x10>
	...

0800c0dc <__fpclassifyf>:
 800c0dc:	0043      	lsls	r3, r0, #1
 800c0de:	085a      	lsrs	r2, r3, #1
 800c0e0:	2002      	movs	r0, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00f      	beq.n	800c106 <__fpclassifyf+0x2a>
 800c0e6:	21fe      	movs	r1, #254	@ 0xfe
 800c0e8:	4b07      	ldr	r3, [pc, #28]	@ (800c108 <__fpclassifyf+0x2c>)
 800c0ea:	05c9      	lsls	r1, r1, #23
 800c0ec:	18d3      	adds	r3, r2, r3
 800c0ee:	1800      	adds	r0, r0, r0
 800c0f0:	428b      	cmp	r3, r1
 800c0f2:	d308      	bcc.n	800c106 <__fpclassifyf+0x2a>
 800c0f4:	4905      	ldr	r1, [pc, #20]	@ (800c10c <__fpclassifyf+0x30>)
 800c0f6:	1e53      	subs	r3, r2, #1
 800c0f8:	3801      	subs	r0, #1
 800c0fa:	428b      	cmp	r3, r1
 800c0fc:	d903      	bls.n	800c106 <__fpclassifyf+0x2a>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <__fpclassifyf+0x34>)
 800c100:	18d0      	adds	r0, r2, r3
 800c102:	4243      	negs	r3, r0
 800c104:	4158      	adcs	r0, r3
 800c106:	4770      	bx	lr
 800c108:	ff800000 	.word	0xff800000
 800c10c:	007ffffe 	.word	0x007ffffe
 800c110:	80800000 	.word	0x80800000

0800c114 <__ieee754_expf>:
 800c114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c116:	21ff      	movs	r1, #255	@ 0xff
 800c118:	0043      	lsls	r3, r0, #1
 800c11a:	1c04      	adds	r4, r0, #0
 800c11c:	085b      	lsrs	r3, r3, #1
 800c11e:	05c9      	lsls	r1, r1, #23
 800c120:	428b      	cmp	r3, r1
 800c122:	d904      	bls.n	800c12e <__ieee754_expf+0x1a>
 800c124:	1c01      	adds	r1, r0, #0
 800c126:	1c20      	adds	r0, r4, #0
 800c128:	f7f4 fb80 	bl	800082c <__aeabi_fadd>
 800c12c:	e00d      	b.n	800c14a <__ieee754_expf+0x36>
 800c12e:	0fc6      	lsrs	r6, r0, #31
 800c130:	428b      	cmp	r3, r1
 800c132:	d104      	bne.n	800c13e <__ieee754_expf+0x2a>
 800c134:	2e00      	cmp	r6, #0
 800c136:	d000      	beq.n	800c13a <__ieee754_expf+0x26>
 800c138:	e0ba      	b.n	800c2b0 <__ieee754_expf+0x19c>
 800c13a:	1c20      	adds	r0, r4, #0
 800c13c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c13e:	495d      	ldr	r1, [pc, #372]	@ (800c2b4 <__ieee754_expf+0x1a0>)
 800c140:	4288      	cmp	r0, r1
 800c142:	dd04      	ble.n	800c14e <__ieee754_expf+0x3a>
 800c144:	2000      	movs	r0, #0
 800c146:	f000 f8f1 	bl	800c32c <__math_oflowf>
 800c14a:	1c04      	adds	r4, r0, #0
 800c14c:	e7f5      	b.n	800c13a <__ieee754_expf+0x26>
 800c14e:	2800      	cmp	r0, #0
 800c150:	da06      	bge.n	800c160 <__ieee754_expf+0x4c>
 800c152:	4a59      	ldr	r2, [pc, #356]	@ (800c2b8 <__ieee754_expf+0x1a4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d903      	bls.n	800c160 <__ieee754_expf+0x4c>
 800c158:	2000      	movs	r0, #0
 800c15a:	f000 f8e1 	bl	800c320 <__math_uflowf>
 800c15e:	e7f4      	b.n	800c14a <__ieee754_expf+0x36>
 800c160:	4a56      	ldr	r2, [pc, #344]	@ (800c2bc <__ieee754_expf+0x1a8>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d96e      	bls.n	800c244 <__ieee754_expf+0x130>
 800c166:	4a56      	ldr	r2, [pc, #344]	@ (800c2c0 <__ieee754_expf+0x1ac>)
 800c168:	00b5      	lsls	r5, r6, #2
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d84e      	bhi.n	800c20c <__ieee754_expf+0xf8>
 800c16e:	4b55      	ldr	r3, [pc, #340]	@ (800c2c4 <__ieee754_expf+0x1b0>)
 800c170:	1c20      	adds	r0, r4, #0
 800c172:	5959      	ldr	r1, [r3, r5]
 800c174:	f7f5 f808 	bl	8001188 <__aeabi_fsub>
 800c178:	4b53      	ldr	r3, [pc, #332]	@ (800c2c8 <__ieee754_expf+0x1b4>)
 800c17a:	1c07      	adds	r7, r0, #0
 800c17c:	595b      	ldr	r3, [r3, r5]
 800c17e:	2501      	movs	r5, #1
 800c180:	1bad      	subs	r5, r5, r6
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	1bad      	subs	r5, r5, r6
 800c186:	9900      	ldr	r1, [sp, #0]
 800c188:	1c38      	adds	r0, r7, #0
 800c18a:	f7f4 fffd 	bl	8001188 <__aeabi_fsub>
 800c18e:	1c04      	adds	r4, r0, #0
 800c190:	1c21      	adds	r1, r4, #0
 800c192:	1c20      	adds	r0, r4, #0
 800c194:	f7f4 feba 	bl	8000f0c <__aeabi_fmul>
 800c198:	494c      	ldr	r1, [pc, #304]	@ (800c2cc <__ieee754_expf+0x1b8>)
 800c19a:	1c06      	adds	r6, r0, #0
 800c19c:	f7f4 feb6 	bl	8000f0c <__aeabi_fmul>
 800c1a0:	494b      	ldr	r1, [pc, #300]	@ (800c2d0 <__ieee754_expf+0x1bc>)
 800c1a2:	f7f4 fff1 	bl	8001188 <__aeabi_fsub>
 800c1a6:	1c31      	adds	r1, r6, #0
 800c1a8:	f7f4 feb0 	bl	8000f0c <__aeabi_fmul>
 800c1ac:	4949      	ldr	r1, [pc, #292]	@ (800c2d4 <__ieee754_expf+0x1c0>)
 800c1ae:	f7f4 fb3d 	bl	800082c <__aeabi_fadd>
 800c1b2:	1c31      	adds	r1, r6, #0
 800c1b4:	f7f4 feaa 	bl	8000f0c <__aeabi_fmul>
 800c1b8:	4947      	ldr	r1, [pc, #284]	@ (800c2d8 <__ieee754_expf+0x1c4>)
 800c1ba:	f7f4 ffe5 	bl	8001188 <__aeabi_fsub>
 800c1be:	1c31      	adds	r1, r6, #0
 800c1c0:	f7f4 fea4 	bl	8000f0c <__aeabi_fmul>
 800c1c4:	4945      	ldr	r1, [pc, #276]	@ (800c2dc <__ieee754_expf+0x1c8>)
 800c1c6:	f7f4 fb31 	bl	800082c <__aeabi_fadd>
 800c1ca:	1c31      	adds	r1, r6, #0
 800c1cc:	f7f4 fe9e 	bl	8000f0c <__aeabi_fmul>
 800c1d0:	1c01      	adds	r1, r0, #0
 800c1d2:	1c20      	adds	r0, r4, #0
 800c1d4:	f7f4 ffd8 	bl	8001188 <__aeabi_fsub>
 800c1d8:	1c01      	adds	r1, r0, #0
 800c1da:	1c06      	adds	r6, r0, #0
 800c1dc:	1c20      	adds	r0, r4, #0
 800c1de:	f7f4 fe95 	bl	8000f0c <__aeabi_fmul>
 800c1e2:	9001      	str	r0, [sp, #4]
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	d140      	bne.n	800c26a <__ieee754_expf+0x156>
 800c1e8:	2180      	movs	r1, #128	@ 0x80
 800c1ea:	1c30      	adds	r0, r6, #0
 800c1ec:	05c9      	lsls	r1, r1, #23
 800c1ee:	f7f4 ffcb 	bl	8001188 <__aeabi_fsub>
 800c1f2:	1c01      	adds	r1, r0, #0
 800c1f4:	9801      	ldr	r0, [sp, #4]
 800c1f6:	f7f4 fca3 	bl	8000b40 <__aeabi_fdiv>
 800c1fa:	1c21      	adds	r1, r4, #0
 800c1fc:	f7f4 ffc4 	bl	8001188 <__aeabi_fsub>
 800c200:	1c01      	adds	r1, r0, #0
 800c202:	20fe      	movs	r0, #254	@ 0xfe
 800c204:	0580      	lsls	r0, r0, #22
 800c206:	f7f4 ffbf 	bl	8001188 <__aeabi_fsub>
 800c20a:	e79e      	b.n	800c14a <__ieee754_expf+0x36>
 800c20c:	4934      	ldr	r1, [pc, #208]	@ (800c2e0 <__ieee754_expf+0x1cc>)
 800c20e:	1c20      	adds	r0, r4, #0
 800c210:	f7f4 fe7c 	bl	8000f0c <__aeabi_fmul>
 800c214:	4b33      	ldr	r3, [pc, #204]	@ (800c2e4 <__ieee754_expf+0x1d0>)
 800c216:	5959      	ldr	r1, [r3, r5]
 800c218:	f7f4 fb08 	bl	800082c <__aeabi_fadd>
 800c21c:	f7f5 f96e 	bl	80014fc <__aeabi_f2iz>
 800c220:	0005      	movs	r5, r0
 800c222:	f7f5 f98b 	bl	800153c <__aeabi_i2f>
 800c226:	4930      	ldr	r1, [pc, #192]	@ (800c2e8 <__ieee754_expf+0x1d4>)
 800c228:	1c06      	adds	r6, r0, #0
 800c22a:	f7f4 fe6f 	bl	8000f0c <__aeabi_fmul>
 800c22e:	1c01      	adds	r1, r0, #0
 800c230:	1c20      	adds	r0, r4, #0
 800c232:	f7f4 ffa9 	bl	8001188 <__aeabi_fsub>
 800c236:	492d      	ldr	r1, [pc, #180]	@ (800c2ec <__ieee754_expf+0x1d8>)
 800c238:	1c07      	adds	r7, r0, #0
 800c23a:	1c30      	adds	r0, r6, #0
 800c23c:	f7f4 fe66 	bl	8000f0c <__aeabi_fmul>
 800c240:	9000      	str	r0, [sp, #0]
 800c242:	e7a0      	b.n	800c186 <__ieee754_expf+0x72>
 800c244:	22d0      	movs	r2, #208	@ 0xd0
 800c246:	0592      	lsls	r2, r2, #22
 800c248:	4293      	cmp	r3, r2
 800c24a:	d20c      	bcs.n	800c266 <__ieee754_expf+0x152>
 800c24c:	4928      	ldr	r1, [pc, #160]	@ (800c2f0 <__ieee754_expf+0x1dc>)
 800c24e:	1c20      	adds	r0, r4, #0
 800c250:	f7f4 faec 	bl	800082c <__aeabi_fadd>
 800c254:	21fe      	movs	r1, #254	@ 0xfe
 800c256:	0589      	lsls	r1, r1, #22
 800c258:	f7f4 f94c 	bl	80004f4 <__aeabi_fcmpgt>
 800c25c:	1e05      	subs	r5, r0, #0
 800c25e:	d097      	beq.n	800c190 <__ieee754_expf+0x7c>
 800c260:	21fe      	movs	r1, #254	@ 0xfe
 800c262:	0589      	lsls	r1, r1, #22
 800c264:	e75f      	b.n	800c126 <__ieee754_expf+0x12>
 800c266:	2500      	movs	r5, #0
 800c268:	e792      	b.n	800c190 <__ieee754_expf+0x7c>
 800c26a:	2080      	movs	r0, #128	@ 0x80
 800c26c:	1c31      	adds	r1, r6, #0
 800c26e:	05c0      	lsls	r0, r0, #23
 800c270:	f7f4 ff8a 	bl	8001188 <__aeabi_fsub>
 800c274:	1c01      	adds	r1, r0, #0
 800c276:	9801      	ldr	r0, [sp, #4]
 800c278:	f7f4 fc62 	bl	8000b40 <__aeabi_fdiv>
 800c27c:	1c01      	adds	r1, r0, #0
 800c27e:	9800      	ldr	r0, [sp, #0]
 800c280:	f7f4 ff82 	bl	8001188 <__aeabi_fsub>
 800c284:	1c39      	adds	r1, r7, #0
 800c286:	f7f4 ff7f 	bl	8001188 <__aeabi_fsub>
 800c28a:	1c01      	adds	r1, r0, #0
 800c28c:	20fe      	movs	r0, #254	@ 0xfe
 800c28e:	0580      	lsls	r0, r0, #22
 800c290:	f7f4 ff7a 	bl	8001188 <__aeabi_fsub>
 800c294:	002b      	movs	r3, r5
 800c296:	337d      	adds	r3, #125	@ 0x7d
 800c298:	db02      	blt.n	800c2a0 <__ieee754_expf+0x18c>
 800c29a:	05ec      	lsls	r4, r5, #23
 800c29c:	1824      	adds	r4, r4, r0
 800c29e:	e74c      	b.n	800c13a <__ieee754_expf+0x26>
 800c2a0:	21d8      	movs	r1, #216	@ 0xd8
 800c2a2:	3564      	adds	r5, #100	@ 0x64
 800c2a4:	05ed      	lsls	r5, r5, #23
 800c2a6:	1828      	adds	r0, r5, r0
 800c2a8:	0509      	lsls	r1, r1, #20
 800c2aa:	f7f4 fe2f 	bl	8000f0c <__aeabi_fmul>
 800c2ae:	e74c      	b.n	800c14a <__ieee754_expf+0x36>
 800c2b0:	2400      	movs	r4, #0
 800c2b2:	e742      	b.n	800c13a <__ieee754_expf+0x26>
 800c2b4:	42b17217 	.word	0x42b17217
 800c2b8:	42cff1b5 	.word	0x42cff1b5
 800c2bc:	3eb17218 	.word	0x3eb17218
 800c2c0:	3f851591 	.word	0x3f851591
 800c2c4:	0800c960 	.word	0x0800c960
 800c2c8:	0800c958 	.word	0x0800c958
 800c2cc:	3331bb4c 	.word	0x3331bb4c
 800c2d0:	35ddea0e 	.word	0x35ddea0e
 800c2d4:	388ab355 	.word	0x388ab355
 800c2d8:	3b360b61 	.word	0x3b360b61
 800c2dc:	3e2aaaab 	.word	0x3e2aaaab
 800c2e0:	3fb8aa3b 	.word	0x3fb8aa3b
 800c2e4:	0800c968 	.word	0x0800c968
 800c2e8:	3f317180 	.word	0x3f317180
 800c2ec:	3717f7d1 	.word	0x3717f7d1
 800c2f0:	7149f2ca 	.word	0x7149f2ca

0800c2f4 <with_errnof>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	000d      	movs	r5, r1
 800c2f8:	1c04      	adds	r4, r0, #0
 800c2fa:	f7fc fa3d 	bl	8008778 <__errno>
 800c2fe:	6005      	str	r5, [r0, #0]
 800c300:	1c20      	adds	r0, r4, #0
 800c302:	bd70      	pop	{r4, r5, r6, pc}

0800c304 <xflowf>:
 800c304:	b510      	push	{r4, lr}
 800c306:	1c0b      	adds	r3, r1, #0
 800c308:	2800      	cmp	r0, #0
 800c30a:	d002      	beq.n	800c312 <xflowf+0xe>
 800c30c:	2380      	movs	r3, #128	@ 0x80
 800c30e:	061b      	lsls	r3, r3, #24
 800c310:	18cb      	adds	r3, r1, r3
 800c312:	1c18      	adds	r0, r3, #0
 800c314:	f7f4 fdfa 	bl	8000f0c <__aeabi_fmul>
 800c318:	2122      	movs	r1, #34	@ 0x22
 800c31a:	f7ff ffeb 	bl	800c2f4 <with_errnof>
 800c31e:	bd10      	pop	{r4, pc}

0800c320 <__math_uflowf>:
 800c320:	2180      	movs	r1, #128	@ 0x80
 800c322:	b510      	push	{r4, lr}
 800c324:	0549      	lsls	r1, r1, #21
 800c326:	f7ff ffed 	bl	800c304 <xflowf>
 800c32a:	bd10      	pop	{r4, pc}

0800c32c <__math_oflowf>:
 800c32c:	21e0      	movs	r1, #224	@ 0xe0
 800c32e:	b510      	push	{r4, lr}
 800c330:	05c9      	lsls	r1, r1, #23
 800c332:	f7ff ffe7 	bl	800c304 <xflowf>
 800c336:	bd10      	pop	{r4, pc}

0800c338 <_init>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	46c0      	nop			@ (mov r8, r8)
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr

0800c344 <_fini>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	46c0      	nop			@ (mov r8, r8)
 800c348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34a:	bc08      	pop	{r3}
 800c34c:	469e      	mov	lr, r3
 800c34e:	4770      	bx	lr
