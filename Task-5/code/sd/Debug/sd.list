
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134e8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  080135a8  080135a8  000145a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ff0  08013ff0  000151f4  2**0
                  CONTENTS
  4 .ARM          00000008  08013ff0  08013ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ff8  08013ff8  000151f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ff8  08013ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013ffc  08013ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08014000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004794  200001f4  080141f4  000151f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004988  080141f4  00015988  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000151f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccce  00000000  00000000  0001521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004495  00000000  00000000  00031eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  00036380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a1  00000000  00000000  00037f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b35c  00000000  00000000  00039511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230cf  00000000  00000000  0005486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad41  00000000  00000000  0007793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011267d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dec  00000000  00000000  001126c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0011a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08013590 	.word	0x08013590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08013590 	.word	0x08013590

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f841 	bl	80024c4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff81 	bl	8002354 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f833 	bl	80024c4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f829 	bl	80024c4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ffab 	bl	80023dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffa1 	bl	80023dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fe71 	bl	80032b4 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 faac 	bl	8002b38 <__aeabi_dsub>
 80005e0:	f002 fe68 	bl	80032b4 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 ffb7 	bl	80025a8 <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fea2 	bl	8003388 <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 ffae 	bl	80025a8 <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 fa70 	bl	8002b38 <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fe5d 	bl	800332c <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 ff97 	bl	80025a8 <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fe82 	bl	8003388 <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 ffe6 	bl	8001658 <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 ff76 	bl	80035a4 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 ff71 	bl	80035a4 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fde3 	bl	8003568 <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fcb1 	bl	8003568 <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 fca5 	bl	8003568 <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	08013a00 	.word	0x08013a00
 8000d78:	08013a40 	.word	0x08013a40
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fa6a 	bl	8003568 <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 fa5c 	bl	8003568 <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_fsub>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4647      	mov	r7, r8
 800118c:	46ce      	mov	lr, r9
 800118e:	024e      	lsls	r6, r1, #9
 8001190:	0243      	lsls	r3, r0, #9
 8001192:	0045      	lsls	r5, r0, #1
 8001194:	0a72      	lsrs	r2, r6, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0048      	lsls	r0, r1, #1
 800119a:	b580      	push	{r7, lr}
 800119c:	4694      	mov	ip, r2
 800119e:	0a5f      	lsrs	r7, r3, #9
 80011a0:	0e2d      	lsrs	r5, r5, #24
 80011a2:	099b      	lsrs	r3, r3, #6
 80011a4:	0e00      	lsrs	r0, r0, #24
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	09b6      	lsrs	r6, r6, #6
 80011aa:	28ff      	cmp	r0, #255	@ 0xff
 80011ac:	d024      	beq.n	80011f8 <__aeabi_fsub+0x70>
 80011ae:	2201      	movs	r2, #1
 80011b0:	4051      	eors	r1, r2
 80011b2:	1a2a      	subs	r2, r5, r0
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d00f      	beq.n	80011d8 <__aeabi_fsub+0x50>
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dc00      	bgt.n	80011be <__aeabi_fsub+0x36>
 80011bc:	e16a      	b.n	8001494 <__aeabi_fsub+0x30c>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d135      	bne.n	800122e <__aeabi_fsub+0xa6>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x40>
 80011c6:	e0a2      	b.n	800130e <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x48>
 80011ce:	e124      	b.n	800141a <__aeabi_fsub+0x292>
 80011d0:	2aff      	cmp	r2, #255	@ 0xff
 80011d2:	d021      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011d4:	000a      	movs	r2, r1
 80011d6:	e02f      	b.n	8001238 <__aeabi_fsub+0xb0>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_fsub+0x56>
 80011dc:	e167      	b.n	80014ae <__aeabi_fsub+0x326>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d05e      	beq.n	80012a0 <__aeabi_fsub+0x118>
 80011e2:	2dff      	cmp	r5, #255	@ 0xff
 80011e4:	d018      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	04c9      	lsls	r1, r1, #19
 80011ea:	430e      	orrs	r6, r1
 80011ec:	2a1b      	cmp	r2, #27
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_fsub+0x6a>
 80011f0:	e076      	b.n	80012e0 <__aeabi_fsub+0x158>
 80011f2:	002a      	movs	r2, r5
 80011f4:	3301      	adds	r3, #1
 80011f6:	e032      	b.n	800125e <__aeabi_fsub+0xd6>
 80011f8:	002a      	movs	r2, r5
 80011fa:	3aff      	subs	r2, #255	@ 0xff
 80011fc:	4691      	mov	r9, r2
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d042      	beq.n	8001288 <__aeabi_fsub+0x100>
 8001202:	428c      	cmp	r4, r1
 8001204:	d055      	beq.n	80012b2 <__aeabi_fsub+0x12a>
 8001206:	464a      	mov	r2, r9
 8001208:	2a00      	cmp	r2, #0
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x86>
 800120c:	e09c      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800120e:	2d00      	cmp	r5, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x8c>
 8001212:	e077      	b.n	8001304 <__aeabi_fsub+0x17c>
 8001214:	000c      	movs	r4, r1
 8001216:	0033      	movs	r3, r6
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_fsub+0x98>
 800121e:	e06e      	b.n	80012fe <__aeabi_fsub+0x176>
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	03d2      	lsls	r2, r2, #15
 8001224:	4313      	orrs	r3, r2
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	20ff      	movs	r0, #255	@ 0xff
 800122a:	0a5b      	lsrs	r3, r3, #9
 800122c:	e024      	b.n	8001278 <__aeabi_fsub+0xf0>
 800122e:	2dff      	cmp	r5, #255	@ 0xff
 8001230:	d0f2      	beq.n	8001218 <__aeabi_fsub+0x90>
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	04c9      	lsls	r1, r1, #19
 8001236:	430e      	orrs	r6, r1
 8001238:	2101      	movs	r1, #1
 800123a:	2a1b      	cmp	r2, #27
 800123c:	dc08      	bgt.n	8001250 <__aeabi_fsub+0xc8>
 800123e:	0031      	movs	r1, r6
 8001240:	2020      	movs	r0, #32
 8001242:	40d1      	lsrs	r1, r2
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	4096      	lsls	r6, r2
 8001248:	0032      	movs	r2, r6
 800124a:	1e50      	subs	r0, r2, #1
 800124c:	4182      	sbcs	r2, r0
 800124e:	4311      	orrs	r1, r2
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	d460      	bmi.n	8001318 <__aeabi_fsub+0x190>
 8001256:	2107      	movs	r1, #7
 8001258:	002a      	movs	r2, r5
 800125a:	4019      	ands	r1, r3
 800125c:	d057      	beq.n	800130e <__aeabi_fsub+0x186>
 800125e:	210f      	movs	r1, #15
 8001260:	4019      	ands	r1, r3
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0xe0>
 8001266:	3304      	adds	r3, #4
 8001268:	0159      	lsls	r1, r3, #5
 800126a:	d550      	bpl.n	800130e <__aeabi_fsub+0x186>
 800126c:	1c50      	adds	r0, r2, #1
 800126e:	2afe      	cmp	r2, #254	@ 0xfe
 8001270:	d045      	beq.n	80012fe <__aeabi_fsub+0x176>
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b2c0      	uxtb	r0, r0
 8001276:	0a5b      	lsrs	r3, r3, #9
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4318      	orrs	r0, r3
 800127c:	07e4      	lsls	r4, r4, #31
 800127e:	4320      	orrs	r0, r4
 8001280:	bcc0      	pop	{r6, r7}
 8001282:	46b9      	mov	r9, r7
 8001284:	46b0      	mov	r8, r6
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001288:	2201      	movs	r2, #1
 800128a:	4051      	eors	r1, r2
 800128c:	428c      	cmp	r4, r1
 800128e:	d1ba      	bne.n	8001206 <__aeabi_fsub+0x7e>
 8001290:	464a      	mov	r2, r9
 8001292:	2a00      	cmp	r2, #0
 8001294:	d010      	beq.n	80012b8 <__aeabi_fsub+0x130>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x114>
 800129a:	e098      	b.n	80013ce <__aeabi_fsub+0x246>
 800129c:	2300      	movs	r3, #0
 800129e:	e7bb      	b.n	8001218 <__aeabi_fsub+0x90>
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d034      	beq.n	800130e <__aeabi_fsub+0x186>
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d06e      	beq.n	8001388 <__aeabi_fsub+0x200>
 80012aa:	2aff      	cmp	r2, #255	@ 0xff
 80012ac:	d0b4      	beq.n	8001218 <__aeabi_fsub+0x90>
 80012ae:	000a      	movs	r2, r1
 80012b0:	e79c      	b.n	80011ec <__aeabi_fsub+0x64>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d000      	beq.n	80012b8 <__aeabi_fsub+0x130>
 80012b6:	e088      	b.n	80013ca <__aeabi_fsub+0x242>
 80012b8:	20fe      	movs	r0, #254	@ 0xfe
 80012ba:	1c6a      	adds	r2, r5, #1
 80012bc:	4210      	tst	r0, r2
 80012be:	d000      	beq.n	80012c2 <__aeabi_fsub+0x13a>
 80012c0:	e092      	b.n	80013e8 <__aeabi_fsub+0x260>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x140>
 80012c6:	e0a4      	b.n	8001412 <__aeabi_fsub+0x28a>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x146>
 80012cc:	e0cb      	b.n	8001466 <__aeabi_fsub+0x2de>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 80012d2:	e0ca      	b.n	800146a <__aeabi_fsub+0x2e2>
 80012d4:	2200      	movs	r2, #0
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	b2d0      	uxtb	r0, r2
 80012de:	e7cb      	b.n	8001278 <__aeabi_fsub+0xf0>
 80012e0:	0031      	movs	r1, r6
 80012e2:	2020      	movs	r0, #32
 80012e4:	40d1      	lsrs	r1, r2
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0032      	movs	r2, r6
 80012ec:	1e50      	subs	r0, r2, #1
 80012ee:	4182      	sbcs	r2, r0
 80012f0:	430a      	orrs	r2, r1
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	d5ae      	bpl.n	8001256 <__aeabi_fsub+0xce>
 80012f8:	1c6a      	adds	r2, r5, #1
 80012fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80012fc:	d14a      	bne.n	8001394 <__aeabi_fsub+0x20c>
 80012fe:	20ff      	movs	r0, #255	@ 0xff
 8001300:	2300      	movs	r3, #0
 8001302:	e7b9      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	2b00      	cmp	r3, #0
 8001308:	d14b      	bne.n	80013a2 <__aeabi_fsub+0x21a>
 800130a:	000c      	movs	r4, r1
 800130c:	0033      	movs	r3, r6
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	2aff      	cmp	r2, #255	@ 0xff
 8001312:	d100      	bne.n	8001316 <__aeabi_fsub+0x18e>
 8001314:	e781      	b.n	800121a <__aeabi_fsub+0x92>
 8001316:	e7df      	b.n	80012d8 <__aeabi_fsub+0x150>
 8001318:	019f      	lsls	r7, r3, #6
 800131a:	09bf      	lsrs	r7, r7, #6
 800131c:	0038      	movs	r0, r7
 800131e:	f002 f923 	bl	8003568 <__clzsi2>
 8001322:	3805      	subs	r0, #5
 8001324:	4087      	lsls	r7, r0
 8001326:	4285      	cmp	r5, r0
 8001328:	dc21      	bgt.n	800136e <__aeabi_fsub+0x1e6>
 800132a:	003b      	movs	r3, r7
 800132c:	2120      	movs	r1, #32
 800132e:	1b42      	subs	r2, r0, r5
 8001330:	3201      	adds	r2, #1
 8001332:	40d3      	lsrs	r3, r2
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	4097      	lsls	r7, r2
 8001338:	1e7a      	subs	r2, r7, #1
 800133a:	4197      	sbcs	r7, r2
 800133c:	2200      	movs	r2, #0
 800133e:	433b      	orrs	r3, r7
 8001340:	0759      	lsls	r1, r3, #29
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x1be>
 8001344:	e78b      	b.n	800125e <__aeabi_fsub+0xd6>
 8001346:	e78f      	b.n	8001268 <__aeabi_fsub+0xe0>
 8001348:	20fe      	movs	r0, #254	@ 0xfe
 800134a:	1c6a      	adds	r2, r5, #1
 800134c:	4210      	tst	r0, r2
 800134e:	d112      	bne.n	8001376 <__aeabi_fsub+0x1ee>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d152      	bne.n	80013fa <__aeabi_fsub+0x272>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d07c      	beq.n	8001452 <__aeabi_fsub+0x2ca>
 8001358:	2e00      	cmp	r6, #0
 800135a:	d0bb      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 800135c:	1b9a      	subs	r2, r3, r6
 800135e:	0150      	lsls	r0, r2, #5
 8001360:	d400      	bmi.n	8001364 <__aeabi_fsub+0x1dc>
 8001362:	e08b      	b.n	800147c <__aeabi_fsub+0x2f4>
 8001364:	2401      	movs	r4, #1
 8001366:	2200      	movs	r2, #0
 8001368:	1af3      	subs	r3, r6, r3
 800136a:	400c      	ands	r4, r1
 800136c:	e7e8      	b.n	8001340 <__aeabi_fsub+0x1b8>
 800136e:	4b56      	ldr	r3, [pc, #344]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001370:	1a2a      	subs	r2, r5, r0
 8001372:	403b      	ands	r3, r7
 8001374:	e7e4      	b.n	8001340 <__aeabi_fsub+0x1b8>
 8001376:	1b9f      	subs	r7, r3, r6
 8001378:	017a      	lsls	r2, r7, #5
 800137a:	d446      	bmi.n	800140a <__aeabi_fsub+0x282>
 800137c:	2f00      	cmp	r7, #0
 800137e:	d1cd      	bne.n	800131c <__aeabi_fsub+0x194>
 8001380:	2400      	movs	r4, #0
 8001382:	2000      	movs	r0, #0
 8001384:	2300      	movs	r3, #0
 8001386:	e777      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001388:	199b      	adds	r3, r3, r6
 800138a:	2501      	movs	r5, #1
 800138c:	3201      	adds	r2, #1
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	d400      	bmi.n	8001394 <__aeabi_fsub+0x20c>
 8001392:	e760      	b.n	8001256 <__aeabi_fsub+0xce>
 8001394:	2101      	movs	r1, #1
 8001396:	484d      	ldr	r0, [pc, #308]	@ (80014cc <__aeabi_fsub+0x344>)
 8001398:	4019      	ands	r1, r3
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	4003      	ands	r3, r0
 800139e:	430b      	orrs	r3, r1
 80013a0:	e7ce      	b.n	8001340 <__aeabi_fsub+0x1b8>
 80013a2:	1e57      	subs	r7, r2, #1
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d05a      	beq.n	800145e <__aeabi_fsub+0x2d6>
 80013a8:	000c      	movs	r4, r1
 80013aa:	2aff      	cmp	r2, #255	@ 0xff
 80013ac:	d033      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2f1b      	cmp	r7, #27
 80013b2:	dc07      	bgt.n	80013c4 <__aeabi_fsub+0x23c>
 80013b4:	2120      	movs	r1, #32
 80013b6:	1bc9      	subs	r1, r1, r7
 80013b8:	001a      	movs	r2, r3
 80013ba:	408b      	lsls	r3, r1
 80013bc:	40fa      	lsrs	r2, r7
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	418b      	sbcs	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	0005      	movs	r5, r0
 80013c6:	1ab3      	subs	r3, r6, r2
 80013c8:	e743      	b.n	8001252 <__aeabi_fsub+0xca>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d123      	bne.n	8001416 <__aeabi_fsub+0x28e>
 80013ce:	22ff      	movs	r2, #255	@ 0xff
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d09b      	beq.n	800130c <__aeabi_fsub+0x184>
 80013d4:	1e51      	subs	r1, r2, #1
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d0d6      	beq.n	8001388 <__aeabi_fsub+0x200>
 80013da:	2aff      	cmp	r2, #255	@ 0xff
 80013dc:	d01b      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013de:	291b      	cmp	r1, #27
 80013e0:	dd2c      	ble.n	800143c <__aeabi_fsub+0x2b4>
 80013e2:	0002      	movs	r2, r0
 80013e4:	1c73      	adds	r3, r6, #1
 80013e6:	e73a      	b.n	800125e <__aeabi_fsub+0xd6>
 80013e8:	2aff      	cmp	r2, #255	@ 0xff
 80013ea:	d088      	beq.n	80012fe <__aeabi_fsub+0x176>
 80013ec:	199b      	adds	r3, r3, r6
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	0759      	lsls	r1, r3, #29
 80013f2:	d000      	beq.n	80013f6 <__aeabi_fsub+0x26e>
 80013f4:	e733      	b.n	800125e <__aeabi_fsub+0xd6>
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_fsub+0x150>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d110      	bne.n	8001420 <__aeabi_fsub+0x298>
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d043      	beq.n	800148a <__aeabi_fsub+0x302>
 8001402:	2401      	movs	r4, #1
 8001404:	0033      	movs	r3, r6
 8001406:	400c      	ands	r4, r1
 8001408:	e706      	b.n	8001218 <__aeabi_fsub+0x90>
 800140a:	2401      	movs	r4, #1
 800140c:	1af7      	subs	r7, r6, r3
 800140e:	400c      	ands	r4, r1
 8001410:	e784      	b.n	800131c <__aeabi_fsub+0x194>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <__aeabi_fsub+0x298>
 8001416:	0033      	movs	r3, r6
 8001418:	e6fe      	b.n	8001218 <__aeabi_fsub+0x90>
 800141a:	2501      	movs	r5, #1
 800141c:	1b9b      	subs	r3, r3, r6
 800141e:	e718      	b.n	8001252 <__aeabi_fsub+0xca>
 8001420:	2e00      	cmp	r6, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_fsub+0x29e>
 8001424:	e6f8      	b.n	8001218 <__aeabi_fsub+0x90>
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	03d2      	lsls	r2, r2, #15
 800142a:	4297      	cmp	r7, r2
 800142c:	d304      	bcc.n	8001438 <__aeabi_fsub+0x2b0>
 800142e:	4594      	cmp	ip, r2
 8001430:	d202      	bcs.n	8001438 <__aeabi_fsub+0x2b0>
 8001432:	2401      	movs	r4, #1
 8001434:	0033      	movs	r3, r6
 8001436:	400c      	ands	r4, r1
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	e6f1      	b.n	8001220 <__aeabi_fsub+0x98>
 800143c:	001a      	movs	r2, r3
 800143e:	2520      	movs	r5, #32
 8001440:	40ca      	lsrs	r2, r1
 8001442:	1a69      	subs	r1, r5, r1
 8001444:	408b      	lsls	r3, r1
 8001446:	1e59      	subs	r1, r3, #1
 8001448:	418b      	sbcs	r3, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	0005      	movs	r5, r0
 800144e:	199b      	adds	r3, r3, r6
 8001450:	e750      	b.n	80012f4 <__aeabi_fsub+0x16c>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d094      	beq.n	8001380 <__aeabi_fsub+0x1f8>
 8001456:	2401      	movs	r4, #1
 8001458:	0033      	movs	r3, r6
 800145a:	400c      	ands	r4, r1
 800145c:	e73a      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800145e:	000c      	movs	r4, r1
 8001460:	2501      	movs	r5, #1
 8001462:	1af3      	subs	r3, r6, r3
 8001464:	e6f5      	b.n	8001252 <__aeabi_fsub+0xca>
 8001466:	0033      	movs	r3, r6
 8001468:	e734      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800146a:	199b      	adds	r3, r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	0159      	lsls	r1, r3, #5
 8001470:	d5c1      	bpl.n	80013f6 <__aeabi_fsub+0x26e>
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001474:	4013      	ands	r3, r2
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	2201      	movs	r2, #1
 800147a:	e72d      	b.n	80012d8 <__aeabi_fsub+0x150>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_fsub+0x2fa>
 8001480:	e77e      	b.n	8001380 <__aeabi_fsub+0x1f8>
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	e726      	b.n	80012d8 <__aeabi_fsub+0x150>
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	2400      	movs	r4, #0
 800148e:	20ff      	movs	r0, #255	@ 0xff
 8001490:	03db      	lsls	r3, r3, #15
 8001492:	e6f1      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001494:	2a00      	cmp	r2, #0
 8001496:	d100      	bne.n	800149a <__aeabi_fsub+0x312>
 8001498:	e756      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800149a:	1b47      	subs	r7, r0, r5
 800149c:	003a      	movs	r2, r7
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_fsub+0x31c>
 80014a2:	e730      	b.n	8001306 <__aeabi_fsub+0x17e>
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	04d2      	lsls	r2, r2, #19
 80014a8:	000c      	movs	r4, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	e77f      	b.n	80013ae <__aeabi_fsub+0x226>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_fsub+0x32c>
 80014b2:	e701      	b.n	80012b8 <__aeabi_fsub+0x130>
 80014b4:	1b41      	subs	r1, r0, r5
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d101      	bne.n	80014be <__aeabi_fsub+0x336>
 80014ba:	000a      	movs	r2, r1
 80014bc:	e788      	b.n	80013d0 <__aeabi_fsub+0x248>
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	04d2      	lsls	r2, r2, #19
 80014c2:	4313      	orrs	r3, r2
 80014c4:	e78b      	b.n	80013de <__aeabi_fsub+0x256>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	fbffffff 	.word	0xfbffffff
 80014cc:	7dffffff 	.word	0x7dffffff

080014d0 <__aeabi_fcmpun>:
 80014d0:	0243      	lsls	r3, r0, #9
 80014d2:	024a      	lsls	r2, r1, #9
 80014d4:	0040      	lsls	r0, r0, #1
 80014d6:	0049      	lsls	r1, r1, #1
 80014d8:	0a5b      	lsrs	r3, r3, #9
 80014da:	0a52      	lsrs	r2, r2, #9
 80014dc:	0e09      	lsrs	r1, r1, #24
 80014de:	0e00      	lsrs	r0, r0, #24
 80014e0:	28ff      	cmp	r0, #255	@ 0xff
 80014e2:	d006      	beq.n	80014f2 <__aeabi_fcmpun+0x22>
 80014e4:	2000      	movs	r0, #0
 80014e6:	29ff      	cmp	r1, #255	@ 0xff
 80014e8:	d102      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014ea:	1e53      	subs	r3, r2, #1
 80014ec:	419a      	sbcs	r2, r3
 80014ee:	0010      	movs	r0, r2
 80014f0:	4770      	bx	lr
 80014f2:	38fe      	subs	r0, #254	@ 0xfe
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1fb      	bne.n	80014f0 <__aeabi_fcmpun+0x20>
 80014f8:	e7f4      	b.n	80014e4 <__aeabi_fcmpun+0x14>
 80014fa:	46c0      	nop			@ (mov r8, r8)

080014fc <__aeabi_f2iz>:
 80014fc:	0241      	lsls	r1, r0, #9
 80014fe:	0042      	lsls	r2, r0, #1
 8001500:	0fc3      	lsrs	r3, r0, #31
 8001502:	0a49      	lsrs	r1, r1, #9
 8001504:	2000      	movs	r0, #0
 8001506:	0e12      	lsrs	r2, r2, #24
 8001508:	2a7e      	cmp	r2, #126	@ 0x7e
 800150a:	dd03      	ble.n	8001514 <__aeabi_f2iz+0x18>
 800150c:	2a9d      	cmp	r2, #157	@ 0x9d
 800150e:	dd02      	ble.n	8001516 <__aeabi_f2iz+0x1a>
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <__aeabi_f2iz+0x3c>)
 8001512:	1898      	adds	r0, r3, r2
 8001514:	4770      	bx	lr
 8001516:	2080      	movs	r0, #128	@ 0x80
 8001518:	0400      	lsls	r0, r0, #16
 800151a:	4301      	orrs	r1, r0
 800151c:	2a95      	cmp	r2, #149	@ 0x95
 800151e:	dc07      	bgt.n	8001530 <__aeabi_f2iz+0x34>
 8001520:	2096      	movs	r0, #150	@ 0x96
 8001522:	1a82      	subs	r2, r0, r2
 8001524:	40d1      	lsrs	r1, r2
 8001526:	4248      	negs	r0, r1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f3      	bne.n	8001514 <__aeabi_f2iz+0x18>
 800152c:	0008      	movs	r0, r1
 800152e:	e7f1      	b.n	8001514 <__aeabi_f2iz+0x18>
 8001530:	3a96      	subs	r2, #150	@ 0x96
 8001532:	4091      	lsls	r1, r2
 8001534:	e7f7      	b.n	8001526 <__aeabi_f2iz+0x2a>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	7fffffff 	.word	0x7fffffff

0800153c <__aeabi_i2f>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	2800      	cmp	r0, #0
 8001540:	d013      	beq.n	800156a <__aeabi_i2f+0x2e>
 8001542:	17c3      	asrs	r3, r0, #31
 8001544:	18c5      	adds	r5, r0, r3
 8001546:	405d      	eors	r5, r3
 8001548:	0fc4      	lsrs	r4, r0, #31
 800154a:	0028      	movs	r0, r5
 800154c:	f002 f80c 	bl	8003568 <__clzsi2>
 8001550:	239e      	movs	r3, #158	@ 0x9e
 8001552:	0001      	movs	r1, r0
 8001554:	1a1b      	subs	r3, r3, r0
 8001556:	2b96      	cmp	r3, #150	@ 0x96
 8001558:	dc0f      	bgt.n	800157a <__aeabi_i2f+0x3e>
 800155a:	2808      	cmp	r0, #8
 800155c:	d034      	beq.n	80015c8 <__aeabi_i2f+0x8c>
 800155e:	3908      	subs	r1, #8
 8001560:	408d      	lsls	r5, r1
 8001562:	026d      	lsls	r5, r5, #9
 8001564:	0a6d      	lsrs	r5, r5, #9
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	e002      	b.n	8001570 <__aeabi_i2f+0x34>
 800156a:	2400      	movs	r4, #0
 800156c:	2000      	movs	r0, #0
 800156e:	2500      	movs	r5, #0
 8001570:	05c0      	lsls	r0, r0, #23
 8001572:	4328      	orrs	r0, r5
 8001574:	07e4      	lsls	r4, r4, #31
 8001576:	4320      	orrs	r0, r4
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	2b99      	cmp	r3, #153	@ 0x99
 800157c:	dc16      	bgt.n	80015ac <__aeabi_i2f+0x70>
 800157e:	1f42      	subs	r2, r0, #5
 8001580:	2805      	cmp	r0, #5
 8001582:	d000      	beq.n	8001586 <__aeabi_i2f+0x4a>
 8001584:	4095      	lsls	r5, r2
 8001586:	002a      	movs	r2, r5
 8001588:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <__aeabi_i2f+0x94>)
 800158a:	4002      	ands	r2, r0
 800158c:	076e      	lsls	r6, r5, #29
 800158e:	d009      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001590:	260f      	movs	r6, #15
 8001592:	4035      	ands	r5, r6
 8001594:	2d04      	cmp	r5, #4
 8001596:	d005      	beq.n	80015a4 <__aeabi_i2f+0x68>
 8001598:	3204      	adds	r2, #4
 800159a:	0155      	lsls	r5, r2, #5
 800159c:	d502      	bpl.n	80015a4 <__aeabi_i2f+0x68>
 800159e:	239f      	movs	r3, #159	@ 0x9f
 80015a0:	4002      	ands	r2, r0
 80015a2:	1a5b      	subs	r3, r3, r1
 80015a4:	0192      	lsls	r2, r2, #6
 80015a6:	0a55      	lsrs	r5, r2, #9
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	e7e1      	b.n	8001570 <__aeabi_i2f+0x34>
 80015ac:	2205      	movs	r2, #5
 80015ae:	1a12      	subs	r2, r2, r0
 80015b0:	0028      	movs	r0, r5
 80015b2:	40d0      	lsrs	r0, r2
 80015b4:	0002      	movs	r2, r0
 80015b6:	0008      	movs	r0, r1
 80015b8:	301b      	adds	r0, #27
 80015ba:	4085      	lsls	r5, r0
 80015bc:	0028      	movs	r0, r5
 80015be:	1e45      	subs	r5, r0, #1
 80015c0:	41a8      	sbcs	r0, r5
 80015c2:	4302      	orrs	r2, r0
 80015c4:	0015      	movs	r5, r2
 80015c6:	e7de      	b.n	8001586 <__aeabi_i2f+0x4a>
 80015c8:	026d      	lsls	r5, r5, #9
 80015ca:	2096      	movs	r0, #150	@ 0x96
 80015cc:	0a6d      	lsrs	r5, r5, #9
 80015ce:	e7cf      	b.n	8001570 <__aeabi_i2f+0x34>
 80015d0:	fbffffff 	.word	0xfbffffff

080015d4 <__aeabi_ui2f>:
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	1e04      	subs	r4, r0, #0
 80015d8:	d00e      	beq.n	80015f8 <__aeabi_ui2f+0x24>
 80015da:	f001 ffc5 	bl	8003568 <__clzsi2>
 80015de:	239e      	movs	r3, #158	@ 0x9e
 80015e0:	0001      	movs	r1, r0
 80015e2:	1a1b      	subs	r3, r3, r0
 80015e4:	2b96      	cmp	r3, #150	@ 0x96
 80015e6:	dc0c      	bgt.n	8001602 <__aeabi_ui2f+0x2e>
 80015e8:	2808      	cmp	r0, #8
 80015ea:	d02f      	beq.n	800164c <__aeabi_ui2f+0x78>
 80015ec:	3908      	subs	r1, #8
 80015ee:	408c      	lsls	r4, r1
 80015f0:	0264      	lsls	r4, r4, #9
 80015f2:	0a64      	lsrs	r4, r4, #9
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	e001      	b.n	80015fc <__aeabi_ui2f+0x28>
 80015f8:	2000      	movs	r0, #0
 80015fa:	2400      	movs	r4, #0
 80015fc:	05c0      	lsls	r0, r0, #23
 80015fe:	4320      	orrs	r0, r4
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	2b99      	cmp	r3, #153	@ 0x99
 8001604:	dc16      	bgt.n	8001634 <__aeabi_ui2f+0x60>
 8001606:	1f42      	subs	r2, r0, #5
 8001608:	2805      	cmp	r0, #5
 800160a:	d000      	beq.n	800160e <__aeabi_ui2f+0x3a>
 800160c:	4094      	lsls	r4, r2
 800160e:	0022      	movs	r2, r4
 8001610:	4810      	ldr	r0, [pc, #64]	@ (8001654 <__aeabi_ui2f+0x80>)
 8001612:	4002      	ands	r2, r0
 8001614:	0765      	lsls	r5, r4, #29
 8001616:	d009      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001618:	250f      	movs	r5, #15
 800161a:	402c      	ands	r4, r5
 800161c:	2c04      	cmp	r4, #4
 800161e:	d005      	beq.n	800162c <__aeabi_ui2f+0x58>
 8001620:	3204      	adds	r2, #4
 8001622:	0154      	lsls	r4, r2, #5
 8001624:	d502      	bpl.n	800162c <__aeabi_ui2f+0x58>
 8001626:	239f      	movs	r3, #159	@ 0x9f
 8001628:	4002      	ands	r2, r0
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	0192      	lsls	r2, r2, #6
 800162e:	0a54      	lsrs	r4, r2, #9
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	e7e3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001634:	0002      	movs	r2, r0
 8001636:	0020      	movs	r0, r4
 8001638:	321b      	adds	r2, #27
 800163a:	4090      	lsls	r0, r2
 800163c:	0002      	movs	r2, r0
 800163e:	1e50      	subs	r0, r2, #1
 8001640:	4182      	sbcs	r2, r0
 8001642:	2005      	movs	r0, #5
 8001644:	1a40      	subs	r0, r0, r1
 8001646:	40c4      	lsrs	r4, r0
 8001648:	4314      	orrs	r4, r2
 800164a:	e7e0      	b.n	800160e <__aeabi_ui2f+0x3a>
 800164c:	0264      	lsls	r4, r4, #9
 800164e:	2096      	movs	r0, #150	@ 0x96
 8001650:	0a64      	lsrs	r4, r4, #9
 8001652:	e7d3      	b.n	80015fc <__aeabi_ui2f+0x28>
 8001654:	fbffffff 	.word	0xfbffffff

08001658 <__aeabi_dadd>:
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	4657      	mov	r7, sl
 800165c:	464e      	mov	r6, r9
 800165e:	4645      	mov	r5, r8
 8001660:	46de      	mov	lr, fp
 8001662:	b5e0      	push	{r5, r6, r7, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	9000      	str	r0, [sp, #0]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	030c      	lsls	r4, r1, #12
 800166c:	004f      	lsls	r7, r1, #1
 800166e:	0fce      	lsrs	r6, r1, #31
 8001670:	0a61      	lsrs	r1, r4, #9
 8001672:	9c00      	ldr	r4, [sp, #0]
 8001674:	031d      	lsls	r5, r3, #12
 8001676:	0f64      	lsrs	r4, r4, #29
 8001678:	430c      	orrs	r4, r1
 800167a:	9900      	ldr	r1, [sp, #0]
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	00c8      	lsls	r0, r1, #3
 8001682:	0059      	lsls	r1, r3, #1
 8001684:	0d4b      	lsrs	r3, r1, #21
 8001686:	4699      	mov	r9, r3
 8001688:	9a00      	ldr	r2, [sp, #0]
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0a6d      	lsrs	r5, r5, #9
 800168e:	0fd9      	lsrs	r1, r3, #31
 8001690:	0f53      	lsrs	r3, r2, #29
 8001692:	432b      	orrs	r3, r5
 8001694:	469a      	mov	sl, r3
 8001696:	9b00      	ldr	r3, [sp, #0]
 8001698:	0d7f      	lsrs	r7, r7, #21
 800169a:	00da      	lsls	r2, r3, #3
 800169c:	4694      	mov	ip, r2
 800169e:	464a      	mov	r2, r9
 80016a0:	46b0      	mov	r8, r6
 80016a2:	1aba      	subs	r2, r7, r2
 80016a4:	428e      	cmp	r6, r1
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x52>
 80016a8:	e0b0      	b.n	800180c <__aeabi_dadd+0x1b4>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	dc00      	bgt.n	80016b0 <__aeabi_dadd+0x58>
 80016ae:	e078      	b.n	80017a2 <__aeabi_dadd+0x14a>
 80016b0:	4649      	mov	r1, r9
 80016b2:	2900      	cmp	r1, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x60>
 80016b6:	e0e9      	b.n	800188c <__aeabi_dadd+0x234>
 80016b8:	49c9      	ldr	r1, [pc, #804]	@ (80019e0 <__aeabi_dadd+0x388>)
 80016ba:	428f      	cmp	r7, r1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x68>
 80016be:	e195      	b.n	80019ec <__aeabi_dadd+0x394>
 80016c0:	2501      	movs	r5, #1
 80016c2:	2a38      	cmp	r2, #56	@ 0x38
 80016c4:	dc16      	bgt.n	80016f4 <__aeabi_dadd+0x9c>
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	4653      	mov	r3, sl
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	430b      	orrs	r3, r1
 80016ce:	469a      	mov	sl, r3
 80016d0:	2a1f      	cmp	r2, #31
 80016d2:	dd00      	ble.n	80016d6 <__aeabi_dadd+0x7e>
 80016d4:	e1e7      	b.n	8001aa6 <__aeabi_dadd+0x44e>
 80016d6:	2120      	movs	r1, #32
 80016d8:	4655      	mov	r5, sl
 80016da:	1a8b      	subs	r3, r1, r2
 80016dc:	4661      	mov	r1, ip
 80016de:	409d      	lsls	r5, r3
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	430d      	orrs	r5, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	4099      	lsls	r1, r3
 80016e8:	1e4b      	subs	r3, r1, #1
 80016ea:	4199      	sbcs	r1, r3
 80016ec:	4653      	mov	r3, sl
 80016ee:	40d3      	lsrs	r3, r2
 80016f0:	430d      	orrs	r5, r1
 80016f2:	1ae4      	subs	r4, r4, r3
 80016f4:	1b45      	subs	r5, r0, r5
 80016f6:	42a8      	cmp	r0, r5
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	4240      	negs	r0, r0
 80016fc:	1a24      	subs	r4, r4, r0
 80016fe:	0223      	lsls	r3, r4, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0xac>
 8001702:	e10f      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001704:	0264      	lsls	r4, r4, #9
 8001706:	0a64      	lsrs	r4, r4, #9
 8001708:	2c00      	cmp	r4, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0xb6>
 800170c:	e139      	b.n	8001982 <__aeabi_dadd+0x32a>
 800170e:	0020      	movs	r0, r4
 8001710:	f001 ff2a 	bl	8003568 <__clzsi2>
 8001714:	0003      	movs	r3, r0
 8001716:	3b08      	subs	r3, #8
 8001718:	2120      	movs	r1, #32
 800171a:	0028      	movs	r0, r5
 800171c:	1aca      	subs	r2, r1, r3
 800171e:	40d0      	lsrs	r0, r2
 8001720:	409c      	lsls	r4, r3
 8001722:	0002      	movs	r2, r0
 8001724:	409d      	lsls	r5, r3
 8001726:	4322      	orrs	r2, r4
 8001728:	429f      	cmp	r7, r3
 800172a:	dd00      	ble.n	800172e <__aeabi_dadd+0xd6>
 800172c:	e173      	b.n	8001a16 <__aeabi_dadd+0x3be>
 800172e:	1bd8      	subs	r0, r3, r7
 8001730:	3001      	adds	r0, #1
 8001732:	1a09      	subs	r1, r1, r0
 8001734:	002c      	movs	r4, r5
 8001736:	408d      	lsls	r5, r1
 8001738:	40c4      	lsrs	r4, r0
 800173a:	1e6b      	subs	r3, r5, #1
 800173c:	419d      	sbcs	r5, r3
 800173e:	0013      	movs	r3, r2
 8001740:	40c2      	lsrs	r2, r0
 8001742:	408b      	lsls	r3, r1
 8001744:	4325      	orrs	r5, r4
 8001746:	2700      	movs	r7, #0
 8001748:	0014      	movs	r4, r2
 800174a:	431d      	orrs	r5, r3
 800174c:	076b      	lsls	r3, r5, #29
 800174e:	d009      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001750:	230f      	movs	r3, #15
 8001752:	402b      	ands	r3, r5
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <__aeabi_dadd+0x10c>
 8001758:	1d2b      	adds	r3, r5, #4
 800175a:	42ab      	cmp	r3, r5
 800175c:	41ad      	sbcs	r5, r5
 800175e:	426d      	negs	r5, r5
 8001760:	1964      	adds	r4, r4, r5
 8001762:	001d      	movs	r5, r3
 8001764:	0223      	lsls	r3, r4, #8
 8001766:	d400      	bmi.n	800176a <__aeabi_dadd+0x112>
 8001768:	e12d      	b.n	80019c6 <__aeabi_dadd+0x36e>
 800176a:	4a9d      	ldr	r2, [pc, #628]	@ (80019e0 <__aeabi_dadd+0x388>)
 800176c:	3701      	adds	r7, #1
 800176e:	4297      	cmp	r7, r2
 8001770:	d100      	bne.n	8001774 <__aeabi_dadd+0x11c>
 8001772:	e0d3      	b.n	800191c <__aeabi_dadd+0x2c4>
 8001774:	4646      	mov	r6, r8
 8001776:	499b      	ldr	r1, [pc, #620]	@ (80019e4 <__aeabi_dadd+0x38c>)
 8001778:	08ed      	lsrs	r5, r5, #3
 800177a:	4021      	ands	r1, r4
 800177c:	074a      	lsls	r2, r1, #29
 800177e:	432a      	orrs	r2, r5
 8001780:	057c      	lsls	r4, r7, #21
 8001782:	024d      	lsls	r5, r1, #9
 8001784:	0b2d      	lsrs	r5, r5, #12
 8001786:	0d64      	lsrs	r4, r4, #21
 8001788:	0524      	lsls	r4, r4, #20
 800178a:	432c      	orrs	r4, r5
 800178c:	07f6      	lsls	r6, r6, #31
 800178e:	4334      	orrs	r4, r6
 8001790:	0010      	movs	r0, r2
 8001792:	0021      	movs	r1, r4
 8001794:	b003      	add	sp, #12
 8001796:	bcf0      	pop	{r4, r5, r6, r7}
 8001798:	46bb      	mov	fp, r7
 800179a:	46b2      	mov	sl, r6
 800179c:	46a9      	mov	r9, r5
 800179e:	46a0      	mov	r8, r4
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x150>
 80017a6:	e084      	b.n	80018b2 <__aeabi_dadd+0x25a>
 80017a8:	464a      	mov	r2, r9
 80017aa:	1bd2      	subs	r2, r2, r7
 80017ac:	2f00      	cmp	r7, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x15a>
 80017b0:	e16d      	b.n	8001a8e <__aeabi_dadd+0x436>
 80017b2:	0025      	movs	r5, r4
 80017b4:	4305      	orrs	r5, r0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x162>
 80017b8:	e127      	b.n	8001a0a <__aeabi_dadd+0x3b2>
 80017ba:	1e56      	subs	r6, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x16a>
 80017c0:	e23b      	b.n	8001c3a <__aeabi_dadd+0x5e2>
 80017c2:	4d87      	ldr	r5, [pc, #540]	@ (80019e0 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x172>
 80017c8:	e26a      	b.n	8001ca0 <__aeabi_dadd+0x648>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2e38      	cmp	r6, #56	@ 0x38
 80017ce:	dc12      	bgt.n	80017f6 <__aeabi_dadd+0x19e>
 80017d0:	0032      	movs	r2, r6
 80017d2:	2a1f      	cmp	r2, #31
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dadd+0x180>
 80017d6:	e1f8      	b.n	8001bca <__aeabi_dadd+0x572>
 80017d8:	2620      	movs	r6, #32
 80017da:	0025      	movs	r5, r4
 80017dc:	1ab6      	subs	r6, r6, r2
 80017de:	0007      	movs	r7, r0
 80017e0:	4653      	mov	r3, sl
 80017e2:	40b0      	lsls	r0, r6
 80017e4:	40d4      	lsrs	r4, r2
 80017e6:	40b5      	lsls	r5, r6
 80017e8:	40d7      	lsrs	r7, r2
 80017ea:	1e46      	subs	r6, r0, #1
 80017ec:	41b0      	sbcs	r0, r6
 80017ee:	1b1b      	subs	r3, r3, r4
 80017f0:	469a      	mov	sl, r3
 80017f2:	433d      	orrs	r5, r7
 80017f4:	4305      	orrs	r5, r0
 80017f6:	4662      	mov	r2, ip
 80017f8:	1b55      	subs	r5, r2, r5
 80017fa:	45ac      	cmp	ip, r5
 80017fc:	4192      	sbcs	r2, r2
 80017fe:	4653      	mov	r3, sl
 8001800:	4252      	negs	r2, r2
 8001802:	000e      	movs	r6, r1
 8001804:	464f      	mov	r7, r9
 8001806:	4688      	mov	r8, r1
 8001808:	1a9c      	subs	r4, r3, r2
 800180a:	e778      	b.n	80016fe <__aeabi_dadd+0xa6>
 800180c:	2a00      	cmp	r2, #0
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dadd+0x1ba>
 8001810:	e08e      	b.n	8001930 <__aeabi_dadd+0x2d8>
 8001812:	4649      	mov	r1, r9
 8001814:	2900      	cmp	r1, #0
 8001816:	d175      	bne.n	8001904 <__aeabi_dadd+0x2ac>
 8001818:	4661      	mov	r1, ip
 800181a:	4653      	mov	r3, sl
 800181c:	4319      	orrs	r1, r3
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x1ca>
 8001820:	e0f6      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001822:	1e51      	subs	r1, r2, #1
 8001824:	2a01      	cmp	r2, #1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x1d2>
 8001828:	e191      	b.n	8001b4e <__aeabi_dadd+0x4f6>
 800182a:	4d6d      	ldr	r5, [pc, #436]	@ (80019e0 <__aeabi_dadd+0x388>)
 800182c:	42aa      	cmp	r2, r5
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x1da>
 8001830:	e0dc      	b.n	80019ec <__aeabi_dadd+0x394>
 8001832:	2501      	movs	r5, #1
 8001834:	2938      	cmp	r1, #56	@ 0x38
 8001836:	dc14      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001838:	000a      	movs	r2, r1
 800183a:	2a1f      	cmp	r2, #31
 800183c:	dd00      	ble.n	8001840 <__aeabi_dadd+0x1e8>
 800183e:	e1a2      	b.n	8001b86 <__aeabi_dadd+0x52e>
 8001840:	2120      	movs	r1, #32
 8001842:	4653      	mov	r3, sl
 8001844:	1a89      	subs	r1, r1, r2
 8001846:	408b      	lsls	r3, r1
 8001848:	001d      	movs	r5, r3
 800184a:	4663      	mov	r3, ip
 800184c:	40d3      	lsrs	r3, r2
 800184e:	431d      	orrs	r5, r3
 8001850:	4663      	mov	r3, ip
 8001852:	408b      	lsls	r3, r1
 8001854:	0019      	movs	r1, r3
 8001856:	1e4b      	subs	r3, r1, #1
 8001858:	4199      	sbcs	r1, r3
 800185a:	4653      	mov	r3, sl
 800185c:	40d3      	lsrs	r3, r2
 800185e:	430d      	orrs	r5, r1
 8001860:	18e4      	adds	r4, r4, r3
 8001862:	182d      	adds	r5, r5, r0
 8001864:	4285      	cmp	r5, r0
 8001866:	4180      	sbcs	r0, r0
 8001868:	4240      	negs	r0, r0
 800186a:	1824      	adds	r4, r4, r0
 800186c:	0223      	lsls	r3, r4, #8
 800186e:	d559      	bpl.n	8001924 <__aeabi_dadd+0x2cc>
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001872:	3701      	adds	r7, #1
 8001874:	429f      	cmp	r7, r3
 8001876:	d051      	beq.n	800191c <__aeabi_dadd+0x2c4>
 8001878:	2101      	movs	r1, #1
 800187a:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <__aeabi_dadd+0x38c>)
 800187c:	086a      	lsrs	r2, r5, #1
 800187e:	401c      	ands	r4, r3
 8001880:	4029      	ands	r1, r5
 8001882:	430a      	orrs	r2, r1
 8001884:	07e5      	lsls	r5, r4, #31
 8001886:	4315      	orrs	r5, r2
 8001888:	0864      	lsrs	r4, r4, #1
 800188a:	e75f      	b.n	800174c <__aeabi_dadd+0xf4>
 800188c:	4661      	mov	r1, ip
 800188e:	4653      	mov	r3, sl
 8001890:	4319      	orrs	r1, r3
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0x23e>
 8001894:	e0bc      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001896:	1e51      	subs	r1, r2, #1
 8001898:	2a01      	cmp	r2, #1
 800189a:	d100      	bne.n	800189e <__aeabi_dadd+0x246>
 800189c:	e164      	b.n	8001b68 <__aeabi_dadd+0x510>
 800189e:	4d50      	ldr	r5, [pc, #320]	@ (80019e0 <__aeabi_dadd+0x388>)
 80018a0:	42aa      	cmp	r2, r5
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x24e>
 80018a4:	e16a      	b.n	8001b7c <__aeabi_dadd+0x524>
 80018a6:	2501      	movs	r5, #1
 80018a8:	2938      	cmp	r1, #56	@ 0x38
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dadd+0x256>
 80018ac:	e722      	b.n	80016f4 <__aeabi_dadd+0x9c>
 80018ae:	000a      	movs	r2, r1
 80018b0:	e70e      	b.n	80016d0 <__aeabi_dadd+0x78>
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <__aeabi_dadd+0x390>)
 80018b4:	1c7d      	adds	r5, r7, #1
 80018b6:	4215      	tst	r5, r2
 80018b8:	d000      	beq.n	80018bc <__aeabi_dadd+0x264>
 80018ba:	e0d0      	b.n	8001a5e <__aeabi_dadd+0x406>
 80018bc:	0025      	movs	r5, r4
 80018be:	4662      	mov	r2, ip
 80018c0:	4653      	mov	r3, sl
 80018c2:	4305      	orrs	r5, r0
 80018c4:	431a      	orrs	r2, r3
 80018c6:	2f00      	cmp	r7, #0
 80018c8:	d000      	beq.n	80018cc <__aeabi_dadd+0x274>
 80018ca:	e137      	b.n	8001b3c <__aeabi_dadd+0x4e4>
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x27a>
 80018d0:	e1a8      	b.n	8001c24 <__aeabi_dadd+0x5cc>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x280>
 80018d6:	e16a      	b.n	8001bae <__aeabi_dadd+0x556>
 80018d8:	4663      	mov	r3, ip
 80018da:	1ac5      	subs	r5, r0, r3
 80018dc:	4653      	mov	r3, sl
 80018de:	1ae2      	subs	r2, r4, r3
 80018e0:	42a8      	cmp	r0, r5
 80018e2:	419b      	sbcs	r3, r3
 80018e4:	425b      	negs	r3, r3
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	021a      	lsls	r2, r3, #8
 80018ea:	d400      	bmi.n	80018ee <__aeabi_dadd+0x296>
 80018ec:	e203      	b.n	8001cf6 <__aeabi_dadd+0x69e>
 80018ee:	4663      	mov	r3, ip
 80018f0:	1a1d      	subs	r5, r3, r0
 80018f2:	45ac      	cmp	ip, r5
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	4653      	mov	r3, sl
 80018f8:	4252      	negs	r2, r2
 80018fa:	1b1c      	subs	r4, r3, r4
 80018fc:	000e      	movs	r6, r1
 80018fe:	4688      	mov	r8, r1
 8001900:	1aa4      	subs	r4, r4, r2
 8001902:	e723      	b.n	800174c <__aeabi_dadd+0xf4>
 8001904:	4936      	ldr	r1, [pc, #216]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001906:	428f      	cmp	r7, r1
 8001908:	d070      	beq.n	80019ec <__aeabi_dadd+0x394>
 800190a:	2501      	movs	r5, #1
 800190c:	2a38      	cmp	r2, #56	@ 0x38
 800190e:	dca8      	bgt.n	8001862 <__aeabi_dadd+0x20a>
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	4653      	mov	r3, sl
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	430b      	orrs	r3, r1
 8001918:	469a      	mov	sl, r3
 800191a:	e78e      	b.n	800183a <__aeabi_dadd+0x1e2>
 800191c:	003c      	movs	r4, r7
 800191e:	2500      	movs	r5, #0
 8001920:	2200      	movs	r2, #0
 8001922:	e731      	b.n	8001788 <__aeabi_dadd+0x130>
 8001924:	2307      	movs	r3, #7
 8001926:	402b      	ands	r3, r5
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <__aeabi_dadd+0x2d6>
 800192c:	e710      	b.n	8001750 <__aeabi_dadd+0xf8>
 800192e:	e093      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001930:	2a00      	cmp	r2, #0
 8001932:	d074      	beq.n	8001a1e <__aeabi_dadd+0x3c6>
 8001934:	464a      	mov	r2, r9
 8001936:	1bd2      	subs	r2, r2, r7
 8001938:	2f00      	cmp	r7, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dadd+0x2e6>
 800193c:	e0c7      	b.n	8001ace <__aeabi_dadd+0x476>
 800193e:	4928      	ldr	r1, [pc, #160]	@ (80019e0 <__aeabi_dadd+0x388>)
 8001940:	4589      	cmp	r9, r1
 8001942:	d100      	bne.n	8001946 <__aeabi_dadd+0x2ee>
 8001944:	e185      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001946:	2501      	movs	r5, #1
 8001948:	2a38      	cmp	r2, #56	@ 0x38
 800194a:	dc12      	bgt.n	8001972 <__aeabi_dadd+0x31a>
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	430c      	orrs	r4, r1
 8001952:	2a1f      	cmp	r2, #31
 8001954:	dd00      	ble.n	8001958 <__aeabi_dadd+0x300>
 8001956:	e1ab      	b.n	8001cb0 <__aeabi_dadd+0x658>
 8001958:	2120      	movs	r1, #32
 800195a:	0025      	movs	r5, r4
 800195c:	1a89      	subs	r1, r1, r2
 800195e:	0007      	movs	r7, r0
 8001960:	4088      	lsls	r0, r1
 8001962:	408d      	lsls	r5, r1
 8001964:	40d7      	lsrs	r7, r2
 8001966:	1e41      	subs	r1, r0, #1
 8001968:	4188      	sbcs	r0, r1
 800196a:	40d4      	lsrs	r4, r2
 800196c:	433d      	orrs	r5, r7
 800196e:	4305      	orrs	r5, r0
 8001970:	44a2      	add	sl, r4
 8001972:	4465      	add	r5, ip
 8001974:	4565      	cmp	r5, ip
 8001976:	4192      	sbcs	r2, r2
 8001978:	4252      	negs	r2, r2
 800197a:	4452      	add	r2, sl
 800197c:	0014      	movs	r4, r2
 800197e:	464f      	mov	r7, r9
 8001980:	e774      	b.n	800186c <__aeabi_dadd+0x214>
 8001982:	0028      	movs	r0, r5
 8001984:	f001 fdf0 	bl	8003568 <__clzsi2>
 8001988:	0003      	movs	r3, r0
 800198a:	3318      	adds	r3, #24
 800198c:	2b1f      	cmp	r3, #31
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dadd+0x33a>
 8001990:	e6c2      	b.n	8001718 <__aeabi_dadd+0xc0>
 8001992:	002a      	movs	r2, r5
 8001994:	3808      	subs	r0, #8
 8001996:	4082      	lsls	r2, r0
 8001998:	429f      	cmp	r7, r3
 800199a:	dd00      	ble.n	800199e <__aeabi_dadd+0x346>
 800199c:	e0a9      	b.n	8001af2 <__aeabi_dadd+0x49a>
 800199e:	1bdb      	subs	r3, r3, r7
 80019a0:	1c58      	adds	r0, r3, #1
 80019a2:	281f      	cmp	r0, #31
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dadd+0x350>
 80019a6:	e1ac      	b.n	8001d02 <__aeabi_dadd+0x6aa>
 80019a8:	0015      	movs	r5, r2
 80019aa:	3b1f      	subs	r3, #31
 80019ac:	40dd      	lsrs	r5, r3
 80019ae:	2820      	cmp	r0, #32
 80019b0:	d005      	beq.n	80019be <__aeabi_dadd+0x366>
 80019b2:	2340      	movs	r3, #64	@ 0x40
 80019b4:	1a1b      	subs	r3, r3, r0
 80019b6:	409a      	lsls	r2, r3
 80019b8:	1e53      	subs	r3, r2, #1
 80019ba:	419a      	sbcs	r2, r3
 80019bc:	4315      	orrs	r5, r2
 80019be:	2307      	movs	r3, #7
 80019c0:	2700      	movs	r7, #0
 80019c2:	402b      	ands	r3, r5
 80019c4:	e7b0      	b.n	8001928 <__aeabi_dadd+0x2d0>
 80019c6:	08ed      	lsrs	r5, r5, #3
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <__aeabi_dadd+0x388>)
 80019ca:	0762      	lsls	r2, r4, #29
 80019cc:	432a      	orrs	r2, r5
 80019ce:	08e4      	lsrs	r4, r4, #3
 80019d0:	429f      	cmp	r7, r3
 80019d2:	d00f      	beq.n	80019f4 <__aeabi_dadd+0x39c>
 80019d4:	0324      	lsls	r4, r4, #12
 80019d6:	0b25      	lsrs	r5, r4, #12
 80019d8:	057c      	lsls	r4, r7, #21
 80019da:	0d64      	lsrs	r4, r4, #21
 80019dc:	e6d4      	b.n	8001788 <__aeabi_dadd+0x130>
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	ff7fffff 	.word	0xff7fffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	08c0      	lsrs	r0, r0, #3
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	4302      	orrs	r2, r0
 80019f2:	08e4      	lsrs	r4, r4, #3
 80019f4:	0013      	movs	r3, r2
 80019f6:	4323      	orrs	r3, r4
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x3a4>
 80019fa:	e186      	b.n	8001d0a <__aeabi_dadd+0x6b2>
 80019fc:	2580      	movs	r5, #128	@ 0x80
 80019fe:	032d      	lsls	r5, r5, #12
 8001a00:	4325      	orrs	r5, r4
 8001a02:	032d      	lsls	r5, r5, #12
 8001a04:	4cc3      	ldr	r4, [pc, #780]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a06:	0b2d      	lsrs	r5, r5, #12
 8001a08:	e6be      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a0a:	4660      	mov	r0, ip
 8001a0c:	4654      	mov	r4, sl
 8001a0e:	000e      	movs	r6, r1
 8001a10:	0017      	movs	r7, r2
 8001a12:	08c5      	lsrs	r5, r0, #3
 8001a14:	e7d8      	b.n	80019c8 <__aeabi_dadd+0x370>
 8001a16:	4cc0      	ldr	r4, [pc, #768]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	e696      	b.n	800174c <__aeabi_dadd+0xf4>
 8001a1e:	4abf      	ldr	r2, [pc, #764]	@ (8001d1c <__aeabi_dadd+0x6c4>)
 8001a20:	1c79      	adds	r1, r7, #1
 8001a22:	4211      	tst	r1, r2
 8001a24:	d16b      	bne.n	8001afe <__aeabi_dadd+0x4a6>
 8001a26:	0022      	movs	r2, r4
 8001a28:	4302      	orrs	r2, r0
 8001a2a:	2f00      	cmp	r7, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dadd+0x3d8>
 8001a2e:	e0db      	b.n	8001be8 <__aeabi_dadd+0x590>
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x3de>
 8001a34:	e12d      	b.n	8001c92 <__aeabi_dadd+0x63a>
 8001a36:	4662      	mov	r2, ip
 8001a38:	4653      	mov	r3, sl
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dadd+0x3e8>
 8001a3e:	e0b6      	b.n	8001bae <__aeabi_dadd+0x556>
 8001a40:	4663      	mov	r3, ip
 8001a42:	18c5      	adds	r5, r0, r3
 8001a44:	4285      	cmp	r5, r0
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4454      	add	r4, sl
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1824      	adds	r4, r4, r0
 8001a4e:	0223      	lsls	r3, r4, #8
 8001a50:	d502      	bpl.n	8001a58 <__aeabi_dadd+0x400>
 8001a52:	000f      	movs	r7, r1
 8001a54:	4bb0      	ldr	r3, [pc, #704]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001a56:	401c      	ands	r4, r3
 8001a58:	003a      	movs	r2, r7
 8001a5a:	0028      	movs	r0, r5
 8001a5c:	e7d8      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001a5e:	4662      	mov	r2, ip
 8001a60:	1a85      	subs	r5, r0, r2
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4653      	mov	r3, sl
 8001a68:	4252      	negs	r2, r2
 8001a6a:	4691      	mov	r9, r2
 8001a6c:	1ae3      	subs	r3, r4, r3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	464b      	mov	r3, r9
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	4691      	mov	r9, r2
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	d454      	bmi.n	8001b26 <__aeabi_dadd+0x4ce>
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	464c      	mov	r4, r9
 8001a80:	432a      	orrs	r2, r5
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dadd+0x42e>
 8001a84:	e640      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001a86:	2600      	movs	r6, #0
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	e67c      	b.n	8001788 <__aeabi_dadd+0x130>
 8001a8e:	4da1      	ldr	r5, [pc, #644]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001a90:	45a9      	cmp	r9, r5
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x43e>
 8001a94:	e090      	b.n	8001bb8 <__aeabi_dadd+0x560>
 8001a96:	2501      	movs	r5, #1
 8001a98:	2a38      	cmp	r2, #56	@ 0x38
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dadd+0x446>
 8001a9c:	e6ab      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001a9e:	2580      	movs	r5, #128	@ 0x80
 8001aa0:	042d      	lsls	r5, r5, #16
 8001aa2:	432c      	orrs	r4, r5
 8001aa4:	e695      	b.n	80017d2 <__aeabi_dadd+0x17a>
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	4655      	mov	r5, sl
 8001aaa:	3920      	subs	r1, #32
 8001aac:	40cd      	lsrs	r5, r1
 8001aae:	46a9      	mov	r9, r5
 8001ab0:	2a20      	cmp	r2, #32
 8001ab2:	d006      	beq.n	8001ac2 <__aeabi_dadd+0x46a>
 8001ab4:	2140      	movs	r1, #64	@ 0x40
 8001ab6:	4653      	mov	r3, sl
 8001ab8:	1a8a      	subs	r2, r1, r2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	4662      	mov	r2, ip
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	4694      	mov	ip, r2
 8001ac2:	4665      	mov	r5, ip
 8001ac4:	1e6b      	subs	r3, r5, #1
 8001ac6:	419d      	sbcs	r5, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	431d      	orrs	r5, r3
 8001acc:	e612      	b.n	80016f4 <__aeabi_dadd+0x9c>
 8001ace:	0021      	movs	r1, r4
 8001ad0:	4301      	orrs	r1, r0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dadd+0x47e>
 8001ad4:	e0c4      	b.n	8001c60 <__aeabi_dadd+0x608>
 8001ad6:	1e51      	subs	r1, r2, #1
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d100      	bne.n	8001ade <__aeabi_dadd+0x486>
 8001adc:	e0fb      	b.n	8001cd6 <__aeabi_dadd+0x67e>
 8001ade:	4d8d      	ldr	r5, [pc, #564]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001ae0:	42aa      	cmp	r2, r5
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dadd+0x48e>
 8001ae4:	e0b5      	b.n	8001c52 <__aeabi_dadd+0x5fa>
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	2938      	cmp	r1, #56	@ 0x38
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dadd+0x496>
 8001aec:	e741      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001aee:	000a      	movs	r2, r1
 8001af0:	e72f      	b.n	8001952 <__aeabi_dadd+0x2fa>
 8001af2:	4c89      	ldr	r4, [pc, #548]	@ (8001d18 <__aeabi_dadd+0x6c0>)
 8001af4:	1aff      	subs	r7, r7, r3
 8001af6:	4014      	ands	r4, r2
 8001af8:	0762      	lsls	r2, r4, #29
 8001afa:	08e4      	lsrs	r4, r4, #3
 8001afc:	e76a      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001afe:	4a85      	ldr	r2, [pc, #532]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001b00:	4291      	cmp	r1, r2
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dadd+0x4ae>
 8001b04:	e0e3      	b.n	8001cce <__aeabi_dadd+0x676>
 8001b06:	4663      	mov	r3, ip
 8001b08:	18c2      	adds	r2, r0, r3
 8001b0a:	4282      	cmp	r2, r0
 8001b0c:	4180      	sbcs	r0, r0
 8001b0e:	0023      	movs	r3, r4
 8001b10:	4240      	negs	r0, r0
 8001b12:	4453      	add	r3, sl
 8001b14:	181b      	adds	r3, r3, r0
 8001b16:	07dd      	lsls	r5, r3, #31
 8001b18:	085c      	lsrs	r4, r3, #1
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	0852      	lsrs	r2, r2, #1
 8001b1e:	4315      	orrs	r5, r2
 8001b20:	000f      	movs	r7, r1
 8001b22:	402b      	ands	r3, r5
 8001b24:	e700      	b.n	8001928 <__aeabi_dadd+0x2d0>
 8001b26:	4663      	mov	r3, ip
 8001b28:	1a1d      	subs	r5, r3, r0
 8001b2a:	45ac      	cmp	ip, r5
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	4653      	mov	r3, sl
 8001b30:	4252      	negs	r2, r2
 8001b32:	1b1c      	subs	r4, r3, r4
 8001b34:	000e      	movs	r6, r1
 8001b36:	4688      	mov	r8, r1
 8001b38:	1aa4      	subs	r4, r4, r2
 8001b3a:	e5e5      	b.n	8001708 <__aeabi_dadd+0xb0>
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_dadd+0x4ea>
 8001b40:	e091      	b.n	8001c66 <__aeabi_dadd+0x60e>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d138      	bne.n	8001bb8 <__aeabi_dadd+0x560>
 8001b46:	2480      	movs	r4, #128	@ 0x80
 8001b48:	2600      	movs	r6, #0
 8001b4a:	0324      	lsls	r4, r4, #12
 8001b4c:	e756      	b.n	80019fc <__aeabi_dadd+0x3a4>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	18c5      	adds	r5, r0, r3
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4454      	add	r4, sl
 8001b58:	4240      	negs	r0, r0
 8001b5a:	1824      	adds	r4, r4, r0
 8001b5c:	2701      	movs	r7, #1
 8001b5e:	0223      	lsls	r3, r4, #8
 8001b60:	d400      	bmi.n	8001b64 <__aeabi_dadd+0x50c>
 8001b62:	e6df      	b.n	8001924 <__aeabi_dadd+0x2cc>
 8001b64:	2702      	movs	r7, #2
 8001b66:	e687      	b.n	8001878 <__aeabi_dadd+0x220>
 8001b68:	4663      	mov	r3, ip
 8001b6a:	1ac5      	subs	r5, r0, r3
 8001b6c:	42a8      	cmp	r0, r5
 8001b6e:	4180      	sbcs	r0, r0
 8001b70:	4653      	mov	r3, sl
 8001b72:	4240      	negs	r0, r0
 8001b74:	1ae4      	subs	r4, r4, r3
 8001b76:	2701      	movs	r7, #1
 8001b78:	1a24      	subs	r4, r4, r0
 8001b7a:	e5c0      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	08c0      	lsrs	r0, r0, #3
 8001b80:	4302      	orrs	r2, r0
 8001b82:	08e4      	lsrs	r4, r4, #3
 8001b84:	e736      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001b86:	0011      	movs	r1, r2
 8001b88:	4653      	mov	r3, sl
 8001b8a:	3920      	subs	r1, #32
 8001b8c:	40cb      	lsrs	r3, r1
 8001b8e:	4699      	mov	r9, r3
 8001b90:	2a20      	cmp	r2, #32
 8001b92:	d006      	beq.n	8001ba2 <__aeabi_dadd+0x54a>
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4653      	mov	r3, sl
 8001b98:	1a8a      	subs	r2, r1, r2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	4694      	mov	ip, r2
 8001ba2:	4665      	mov	r5, ip
 8001ba4:	1e6b      	subs	r3, r5, #1
 8001ba6:	419d      	sbcs	r5, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	431d      	orrs	r5, r3
 8001bac:	e659      	b.n	8001862 <__aeabi_dadd+0x20a>
 8001bae:	0762      	lsls	r2, r4, #29
 8001bb0:	08c0      	lsrs	r0, r0, #3
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	08e4      	lsrs	r4, r4, #3
 8001bb6:	e70d      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001bb8:	4653      	mov	r3, sl
 8001bba:	075a      	lsls	r2, r3, #29
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	08d8      	lsrs	r0, r3, #3
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e714      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001bca:	0015      	movs	r5, r2
 8001bcc:	0026      	movs	r6, r4
 8001bce:	3d20      	subs	r5, #32
 8001bd0:	40ee      	lsrs	r6, r5
 8001bd2:	2a20      	cmp	r2, #32
 8001bd4:	d003      	beq.n	8001bde <__aeabi_dadd+0x586>
 8001bd6:	2540      	movs	r5, #64	@ 0x40
 8001bd8:	1aaa      	subs	r2, r5, r2
 8001bda:	4094      	lsls	r4, r2
 8001bdc:	4320      	orrs	r0, r4
 8001bde:	1e42      	subs	r2, r0, #1
 8001be0:	4190      	sbcs	r0, r2
 8001be2:	0005      	movs	r5, r0
 8001be4:	4335      	orrs	r5, r6
 8001be6:	e606      	b.n	80017f6 <__aeabi_dadd+0x19e>
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d07c      	beq.n	8001ce6 <__aeabi_dadd+0x68e>
 8001bec:	4662      	mov	r2, ip
 8001bee:	4653      	mov	r3, sl
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dadd+0x5a0>
 8001bf6:	e6fa      	b.n	80019ee <__aeabi_dadd+0x396>
 8001bf8:	0762      	lsls	r2, r4, #29
 8001bfa:	4310      	orrs	r0, r2
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	08e4      	lsrs	r4, r4, #3
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	4214      	tst	r4, r2
 8001c04:	d008      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c06:	08d9      	lsrs	r1, r3, #3
 8001c08:	4211      	tst	r1, r2
 8001c0a:	d105      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	08d8      	lsrs	r0, r3, #3
 8001c10:	4653      	mov	r3, sl
 8001c12:	000c      	movs	r4, r1
 8001c14:	075b      	lsls	r3, r3, #29
 8001c16:	4318      	orrs	r0, r3
 8001c18:	0f42      	lsrs	r2, r0, #29
 8001c1a:	00c0      	lsls	r0, r0, #3
 8001c1c:	08c0      	lsrs	r0, r0, #3
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	4302      	orrs	r2, r0
 8001c22:	e6e7      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dadd+0x5d2>
 8001c28:	e72d      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	08d8      	lsrs	r0, r3, #3
 8001c2e:	4653      	mov	r3, sl
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	000e      	movs	r6, r1
 8001c34:	4302      	orrs	r2, r0
 8001c36:	08dc      	lsrs	r4, r3, #3
 8001c38:	e6cc      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	1a1d      	subs	r5, r3, r0
 8001c3e:	45ac      	cmp	ip, r5
 8001c40:	4192      	sbcs	r2, r2
 8001c42:	4653      	mov	r3, sl
 8001c44:	4252      	negs	r2, r2
 8001c46:	1b1c      	subs	r4, r3, r4
 8001c48:	000e      	movs	r6, r1
 8001c4a:	4688      	mov	r8, r1
 8001c4c:	1aa4      	subs	r4, r4, r2
 8001c4e:	3701      	adds	r7, #1
 8001c50:	e555      	b.n	80016fe <__aeabi_dadd+0xa6>
 8001c52:	4663      	mov	r3, ip
 8001c54:	08d9      	lsrs	r1, r3, #3
 8001c56:	4653      	mov	r3, sl
 8001c58:	075a      	lsls	r2, r3, #29
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	08dc      	lsrs	r4, r3, #3
 8001c5e:	e6c9      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001c60:	4660      	mov	r0, ip
 8001c62:	4654      	mov	r4, sl
 8001c64:	e6d4      	b.n	8001a10 <__aeabi_dadd+0x3b8>
 8001c66:	08c0      	lsrs	r0, r0, #3
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dadd+0x616>
 8001c6c:	e6bf      	b.n	80019ee <__aeabi_dadd+0x396>
 8001c6e:	0762      	lsls	r2, r4, #29
 8001c70:	4310      	orrs	r0, r2
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	08e4      	lsrs	r4, r4, #3
 8001c76:	0312      	lsls	r2, r2, #12
 8001c78:	4214      	tst	r4, r2
 8001c7a:	d0cd      	beq.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c7c:	08dd      	lsrs	r5, r3, #3
 8001c7e:	4215      	tst	r5, r2
 8001c80:	d1ca      	bne.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c82:	4663      	mov	r3, ip
 8001c84:	08d8      	lsrs	r0, r3, #3
 8001c86:	4653      	mov	r3, sl
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	000e      	movs	r6, r1
 8001c8c:	002c      	movs	r4, r5
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	e7c2      	b.n	8001c18 <__aeabi_dadd+0x5c0>
 8001c92:	4663      	mov	r3, ip
 8001c94:	08d9      	lsrs	r1, r3, #3
 8001c96:	4653      	mov	r3, sl
 8001c98:	075a      	lsls	r2, r3, #29
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	08dc      	lsrs	r4, r3, #3
 8001c9e:	e699      	b.n	80019d4 <__aeabi_dadd+0x37c>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	075a      	lsls	r2, r3, #29
 8001ca8:	000e      	movs	r6, r1
 8001caa:	4302      	orrs	r2, r0
 8001cac:	08dc      	lsrs	r4, r3, #3
 8001cae:	e6a1      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0027      	movs	r7, r4
 8001cb4:	3920      	subs	r1, #32
 8001cb6:	40cf      	lsrs	r7, r1
 8001cb8:	2a20      	cmp	r2, #32
 8001cba:	d003      	beq.n	8001cc4 <__aeabi_dadd+0x66c>
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	1a8a      	subs	r2, r1, r2
 8001cc0:	4094      	lsls	r4, r2
 8001cc2:	4320      	orrs	r0, r4
 8001cc4:	1e42      	subs	r2, r0, #1
 8001cc6:	4190      	sbcs	r0, r2
 8001cc8:	0005      	movs	r5, r0
 8001cca:	433d      	orrs	r5, r7
 8001ccc:	e651      	b.n	8001972 <__aeabi_dadd+0x31a>
 8001cce:	000c      	movs	r4, r1
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	e558      	b.n	8001788 <__aeabi_dadd+0x130>
 8001cd6:	4460      	add	r0, ip
 8001cd8:	4560      	cmp	r0, ip
 8001cda:	4192      	sbcs	r2, r2
 8001cdc:	4454      	add	r4, sl
 8001cde:	4252      	negs	r2, r2
 8001ce0:	0005      	movs	r5, r0
 8001ce2:	18a4      	adds	r4, r4, r2
 8001ce4:	e73a      	b.n	8001b5c <__aeabi_dadd+0x504>
 8001ce6:	4653      	mov	r3, sl
 8001ce8:	075a      	lsls	r2, r3, #29
 8001cea:	4663      	mov	r3, ip
 8001cec:	08d9      	lsrs	r1, r3, #3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	08dc      	lsrs	r4, r3, #3
 8001cf4:	e67e      	b.n	80019f4 <__aeabi_dadd+0x39c>
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	432a      	orrs	r2, r5
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dadd+0x6a8>
 8001cfe:	e6ab      	b.n	8001a58 <__aeabi_dadd+0x400>
 8001d00:	e6c1      	b.n	8001a86 <__aeabi_dadd+0x42e>
 8001d02:	2120      	movs	r1, #32
 8001d04:	2500      	movs	r5, #0
 8001d06:	1a09      	subs	r1, r1, r0
 8001d08:	e519      	b.n	800173e <__aeabi_dadd+0xe6>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4c01      	ldr	r4, [pc, #4]	@ (8001d14 <__aeabi_dadd+0x6bc>)
 8001d10:	e53a      	b.n	8001788 <__aeabi_dadd+0x130>
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	000007ff 	.word	0x000007ff
 8001d18:	ff7fffff 	.word	0xff7fffff
 8001d1c:	000007fe 	.word	0x000007fe

08001d20 <__aeabi_ddiv>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	46de      	mov	lr, fp
 8001d24:	4645      	mov	r5, r8
 8001d26:	4657      	mov	r7, sl
 8001d28:	464e      	mov	r6, r9
 8001d2a:	b5e0      	push	{r5, r6, r7, lr}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	030b      	lsls	r3, r1, #12
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	469b      	mov	fp, r3
 8001d38:	0fca      	lsrs	r2, r1, #31
 8001d3a:	004b      	lsls	r3, r1, #1
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	4680      	mov	r8, r0
 8001d40:	0d5b      	lsrs	r3, r3, #21
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	d100      	bne.n	8001d48 <__aeabi_ddiv+0x28>
 8001d46:	e16a      	b.n	800201e <__aeabi_ddiv+0x2fe>
 8001d48:	4ad4      	ldr	r2, [pc, #848]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x30>
 8001d4e:	e18c      	b.n	800206a <__aeabi_ddiv+0x34a>
 8001d50:	4659      	mov	r1, fp
 8001d52:	0f42      	lsrs	r2, r0, #29
 8001d54:	00c9      	lsls	r1, r1, #3
 8001d56:	430a      	orrs	r2, r1
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	0409      	lsls	r1, r1, #16
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	00c2      	lsls	r2, r0, #3
 8001d60:	4690      	mov	r8, r2
 8001d62:	4acf      	ldr	r2, [pc, #828]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001d64:	4689      	mov	r9, r1
 8001d66:	4692      	mov	sl, r2
 8001d68:	449a      	add	sl, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9e00      	ldr	r6, [sp, #0]
 8001d72:	9f01      	ldr	r7, [sp, #4]
 8001d74:	033b      	lsls	r3, r7, #12
 8001d76:	0b1b      	lsrs	r3, r3, #12
 8001d78:	469b      	mov	fp, r3
 8001d7a:	007b      	lsls	r3, r7, #1
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0d5b      	lsrs	r3, r3, #21
 8001d80:	0ffd      	lsrs	r5, r7, #31
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x68>
 8001d86:	e128      	b.n	8001fda <__aeabi_ddiv+0x2ba>
 8001d88:	4ac4      	ldr	r2, [pc, #784]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x70>
 8001d8e:	e177      	b.n	8002080 <__aeabi_ddiv+0x360>
 8001d90:	4659      	mov	r1, fp
 8001d92:	0f72      	lsrs	r2, r6, #29
 8001d94:	00c9      	lsls	r1, r1, #3
 8001d96:	430a      	orrs	r2, r1
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	0409      	lsls	r1, r1, #16
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	468b      	mov	fp, r1
 8001da0:	49bf      	ldr	r1, [pc, #764]	@ (80020a0 <__aeabi_ddiv+0x380>)
 8001da2:	00f2      	lsls	r2, r6, #3
 8001da4:	468c      	mov	ip, r1
 8001da6:	4651      	mov	r1, sl
 8001da8:	4463      	add	r3, ip
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	469a      	mov	sl, r3
 8001dae:	2300      	movs	r3, #0
 8001db0:	9e02      	ldr	r6, [sp, #8]
 8001db2:	406e      	eors	r6, r5
 8001db4:	2c0f      	cmp	r4, #15
 8001db6:	d827      	bhi.n	8001e08 <__aeabi_ddiv+0xe8>
 8001db8:	49ba      	ldr	r1, [pc, #744]	@ (80020a4 <__aeabi_ddiv+0x384>)
 8001dba:	00a4      	lsls	r4, r4, #2
 8001dbc:	5909      	ldr	r1, [r1, r4]
 8001dbe:	468f      	mov	pc, r1
 8001dc0:	46cb      	mov	fp, r9
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d016      	beq.n	8001dfa <__aeabi_ddiv+0xda>
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0xb2>
 8001dd0:	e2a6      	b.n	8002320 <__aeabi_ddiv+0x600>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0xb8>
 8001dd6:	e0df      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	4690      	mov	r8, r2
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	4323      	orrs	r3, r4
 8001de4:	07f6      	lsls	r6, r6, #31
 8001de6:	4333      	orrs	r3, r6
 8001de8:	4640      	mov	r0, r8
 8001dea:	0019      	movs	r1, r3
 8001dec:	b007      	add	sp, #28
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4690      	mov	r8, r2
 8001e00:	4ba6      	ldr	r3, [pc, #664]	@ (800209c <__aeabi_ddiv+0x37c>)
 8001e02:	e7ed      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001e04:	002e      	movs	r6, r5
 8001e06:	e7df      	b.n	8001dc8 <__aeabi_ddiv+0xa8>
 8001e08:	45cb      	cmp	fp, r9
 8001e0a:	d200      	bcs.n	8001e0e <__aeabi_ddiv+0xee>
 8001e0c:	e1d4      	b.n	80021b8 <__aeabi_ddiv+0x498>
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0xf2>
 8001e10:	e1cf      	b.n	80021b2 <__aeabi_ddiv+0x492>
 8001e12:	2301      	movs	r3, #1
 8001e14:	425b      	negs	r3, r3
 8001e16:	469c      	mov	ip, r3
 8001e18:	4644      	mov	r4, r8
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	2700      	movs	r7, #0
 8001e1e:	44e2      	add	sl, ip
 8001e20:	465b      	mov	r3, fp
 8001e22:	0e15      	lsrs	r5, r2, #24
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	431d      	orrs	r5, r3
 8001e28:	0c19      	lsrs	r1, r3, #16
 8001e2a:	042b      	lsls	r3, r5, #16
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	9500      	str	r5, [sp, #0]
 8001e30:	0c1d      	lsrs	r5, r3, #16
 8001e32:	4691      	mov	r9, r2
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9503      	str	r5, [sp, #12]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	436a      	muls	r2, r5
 8001e40:	040b      	lsls	r3, r1, #16
 8001e42:	0c21      	lsrs	r1, r4, #16
 8001e44:	4680      	mov	r8, r0
 8001e46:	4319      	orrs	r1, r3
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d909      	bls.n	8001e60 <__aeabi_ddiv+0x140>
 8001e4c:	9d00      	ldr	r5, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	46ac      	mov	ip, r5
 8001e52:	425b      	negs	r3, r3
 8001e54:	4461      	add	r1, ip
 8001e56:	469c      	mov	ip, r3
 8001e58:	44e0      	add	r8, ip
 8001e5a:	428d      	cmp	r5, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x140>
 8001e5e:	e1fb      	b.n	8002258 <__aeabi_ddiv+0x538>
 8001e60:	1a88      	subs	r0, r1, r2
 8001e62:	9902      	ldr	r1, [sp, #8]
 8001e64:	f7fe f9f2 	bl	800024c <__aeabi_uidivmod>
 8001e68:	9a03      	ldr	r2, [sp, #12]
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	4342      	muls	r2, r0
 8001e6e:	0409      	lsls	r1, r1, #16
 8001e70:	0c24      	lsrs	r4, r4, #16
 8001e72:	0003      	movs	r3, r0
 8001e74:	430c      	orrs	r4, r1
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d906      	bls.n	8001e88 <__aeabi_ddiv+0x168>
 8001e7a:	9900      	ldr	r1, [sp, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4464      	add	r4, ip
 8001e82:	42a1      	cmp	r1, r4
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x168>
 8001e86:	e1e1      	b.n	800224c <__aeabi_ddiv+0x52c>
 8001e88:	1aa0      	subs	r0, r4, r2
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	0412      	lsls	r2, r2, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	4693      	mov	fp, r2
 8001e92:	464b      	mov	r3, r9
 8001e94:	4659      	mov	r1, fp
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	001d      	movs	r5, r3
 8001e9a:	9304      	str	r3, [sp, #16]
 8001e9c:	040b      	lsls	r3, r1, #16
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	0409      	lsls	r1, r1, #16
 8001ea2:	0c09      	lsrs	r1, r1, #16
 8001ea4:	000c      	movs	r4, r1
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	435c      	muls	r4, r3
 8001eaa:	0c12      	lsrs	r2, r2, #16
 8001eac:	436b      	muls	r3, r5
 8001eae:	4688      	mov	r8, r1
 8001eb0:	4351      	muls	r1, r2
 8001eb2:	436a      	muls	r2, r5
 8001eb4:	0c25      	lsrs	r5, r4, #16
 8001eb6:	46ac      	mov	ip, r5
 8001eb8:	185b      	adds	r3, r3, r1
 8001eba:	4463      	add	r3, ip
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d903      	bls.n	8001ec8 <__aeabi_ddiv+0x1a8>
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4462      	add	r2, ip
 8001ec8:	0c19      	lsrs	r1, r3, #16
 8001eca:	0424      	lsls	r4, r4, #16
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c24      	lsrs	r4, r4, #16
 8001ed0:	188a      	adds	r2, r1, r2
 8001ed2:	191c      	adds	r4, r3, r4
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	d302      	bcc.n	8001ede <__aeabi_ddiv+0x1be>
 8001ed8:	d116      	bne.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001eda:	42a7      	cmp	r7, r4
 8001edc:	d214      	bcs.n	8001f08 <__aeabi_ddiv+0x1e8>
 8001ede:	465b      	mov	r3, fp
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	444f      	add	r7, r9
 8001ee6:	9305      	str	r3, [sp, #20]
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	419b      	sbcs	r3, r3
 8001eec:	46ac      	mov	ip, r5
 8001eee:	425b      	negs	r3, r3
 8001ef0:	4463      	add	r3, ip
 8001ef2:	18c0      	adds	r0, r0, r3
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d300      	bcc.n	8001efa <__aeabi_ddiv+0x1da>
 8001ef8:	e1a1      	b.n	800223e <__aeabi_ddiv+0x51e>
 8001efa:	4282      	cmp	r2, r0
 8001efc:	d900      	bls.n	8001f00 <__aeabi_ddiv+0x1e0>
 8001efe:	e1f6      	b.n	80022ee <__aeabi_ddiv+0x5ce>
 8001f00:	d100      	bne.n	8001f04 <__aeabi_ddiv+0x1e4>
 8001f02:	e1f1      	b.n	80022e8 <__aeabi_ddiv+0x5c8>
 8001f04:	9b05      	ldr	r3, [sp, #20]
 8001f06:	469b      	mov	fp, r3
 8001f08:	1b3c      	subs	r4, r7, r4
 8001f0a:	42a7      	cmp	r7, r4
 8001f0c:	41bf      	sbcs	r7, r7
 8001f0e:	9d00      	ldr	r5, [sp, #0]
 8001f10:	1a80      	subs	r0, r0, r2
 8001f12:	427f      	negs	r7, r7
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	4285      	cmp	r5, r0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_ddiv+0x1fc>
 8001f1a:	e1d0      	b.n	80022be <__aeabi_ddiv+0x59e>
 8001f1c:	9902      	ldr	r1, [sp, #8]
 8001f1e:	f7fe f995 	bl	800024c <__aeabi_uidivmod>
 8001f22:	9a03      	ldr	r2, [sp, #12]
 8001f24:	040b      	lsls	r3, r1, #16
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c21      	lsrs	r1, r4, #16
 8001f2a:	0007      	movs	r7, r0
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d900      	bls.n	8001f34 <__aeabi_ddiv+0x214>
 8001f32:	e178      	b.n	8002226 <__aeabi_ddiv+0x506>
 8001f34:	1a88      	subs	r0, r1, r2
 8001f36:	9902      	ldr	r1, [sp, #8]
 8001f38:	f7fe f988 	bl	800024c <__aeabi_uidivmod>
 8001f3c:	9a03      	ldr	r2, [sp, #12]
 8001f3e:	0424      	lsls	r4, r4, #16
 8001f40:	4342      	muls	r2, r0
 8001f42:	0409      	lsls	r1, r1, #16
 8001f44:	0c24      	lsrs	r4, r4, #16
 8001f46:	0003      	movs	r3, r0
 8001f48:	430c      	orrs	r4, r1
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x230>
 8001f4e:	e15d      	b.n	800220c <__aeabi_ddiv+0x4ec>
 8001f50:	4641      	mov	r1, r8
 8001f52:	1aa4      	subs	r4, r4, r2
 8001f54:	043a      	lsls	r2, r7, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	9d04      	ldr	r5, [sp, #16]
 8001f5a:	0413      	lsls	r3, r2, #16
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	4359      	muls	r1, r3
 8001f60:	4647      	mov	r7, r8
 8001f62:	436b      	muls	r3, r5
 8001f64:	469c      	mov	ip, r3
 8001f66:	0c10      	lsrs	r0, r2, #16
 8001f68:	4347      	muls	r7, r0
 8001f6a:	0c0b      	lsrs	r3, r1, #16
 8001f6c:	44bc      	add	ip, r7
 8001f6e:	4463      	add	r3, ip
 8001f70:	4368      	muls	r0, r5
 8001f72:	429f      	cmp	r7, r3
 8001f74:	d903      	bls.n	8001f7e <__aeabi_ddiv+0x25e>
 8001f76:	2580      	movs	r5, #128	@ 0x80
 8001f78:	026d      	lsls	r5, r5, #9
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	4460      	add	r0, ip
 8001f7e:	0c1f      	lsrs	r7, r3, #16
 8001f80:	0409      	lsls	r1, r1, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c09      	lsrs	r1, r1, #16
 8001f86:	183f      	adds	r7, r7, r0
 8001f88:	185b      	adds	r3, r3, r1
 8001f8a:	42bc      	cmp	r4, r7
 8001f8c:	d200      	bcs.n	8001f90 <__aeabi_ddiv+0x270>
 8001f8e:	e102      	b.n	8002196 <__aeabi_ddiv+0x476>
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x274>
 8001f92:	e0fd      	b.n	8002190 <__aeabi_ddiv+0x470>
 8001f94:	2301      	movs	r3, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <__aeabi_ddiv+0x388>)
 8001f9a:	4453      	add	r3, sl
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_ddiv+0x282>
 8001fa0:	e0ae      	b.n	8002100 <__aeabi_ddiv+0x3e0>
 8001fa2:	0751      	lsls	r1, r2, #29
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x288>
 8001fa6:	e198      	b.n	80022da <__aeabi_ddiv+0x5ba>
 8001fa8:	4659      	mov	r1, fp
 8001faa:	01c9      	lsls	r1, r1, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_ddiv+0x29c>
 8001fae:	4659      	mov	r1, fp
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <__aeabi_ddiv+0x38c>)
 8001fb2:	4019      	ands	r1, r3
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	468b      	mov	fp, r1
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4453      	add	r3, sl
 8001fbc:	493c      	ldr	r1, [pc, #240]	@ (80020b0 <__aeabi_ddiv+0x390>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_ddiv+0x2a4>
 8001fc2:	e71a      	b.n	8001dfa <__aeabi_ddiv+0xda>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	465a      	mov	r2, fp
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	0254      	lsls	r4, r2, #9
 8001fd2:	4688      	mov	r8, r1
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	e702      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8001fda:	465a      	mov	r2, fp
 8001fdc:	9b00      	ldr	r3, [sp, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_ddiv+0x2c4>
 8001fe2:	e07e      	b.n	80020e2 <__aeabi_ddiv+0x3c2>
 8001fe4:	465b      	mov	r3, fp
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x2cc>
 8001fea:	e100      	b.n	80021ee <__aeabi_ddiv+0x4ce>
 8001fec:	4658      	mov	r0, fp
 8001fee:	f001 fabb 	bl	8003568 <__clzsi2>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	3a0b      	subs	r2, #11
 8001ff8:	271d      	movs	r7, #29
 8001ffa:	9e00      	ldr	r6, [sp, #0]
 8001ffc:	1aba      	subs	r2, r7, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	4658      	mov	r0, fp
 8002002:	40d6      	lsrs	r6, r2
 8002004:	3908      	subs	r1, #8
 8002006:	4088      	lsls	r0, r1
 8002008:	0032      	movs	r2, r6
 800200a:	4302      	orrs	r2, r0
 800200c:	4693      	mov	fp, r2
 800200e:	9a00      	ldr	r2, [sp, #0]
 8002010:	408a      	lsls	r2, r1
 8002012:	4928      	ldr	r1, [pc, #160]	@ (80020b4 <__aeabi_ddiv+0x394>)
 8002014:	4453      	add	r3, sl
 8002016:	468a      	mov	sl, r1
 8002018:	449a      	add	sl, r3
 800201a:	2300      	movs	r3, #0
 800201c:	e6c8      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800201e:	465b      	mov	r3, fp
 8002020:	4303      	orrs	r3, r0
 8002022:	4699      	mov	r9, r3
 8002024:	d056      	beq.n	80020d4 <__aeabi_ddiv+0x3b4>
 8002026:	465b      	mov	r3, fp
 8002028:	2b00      	cmp	r3, #0
 800202a:	d100      	bne.n	800202e <__aeabi_ddiv+0x30e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_ddiv+0x4aa>
 800202e:	4658      	mov	r0, fp
 8002030:	f001 fa9a 	bl	8003568 <__clzsi2>
 8002034:	230b      	movs	r3, #11
 8002036:	425b      	negs	r3, r3
 8002038:	469c      	mov	ip, r3
 800203a:	0002      	movs	r2, r0
 800203c:	4484      	add	ip, r0
 800203e:	4666      	mov	r6, ip
 8002040:	231d      	movs	r3, #29
 8002042:	1b9b      	subs	r3, r3, r6
 8002044:	0026      	movs	r6, r4
 8002046:	0011      	movs	r1, r2
 8002048:	4658      	mov	r0, fp
 800204a:	40de      	lsrs	r6, r3
 800204c:	3908      	subs	r1, #8
 800204e:	4088      	lsls	r0, r1
 8002050:	0033      	movs	r3, r6
 8002052:	4303      	orrs	r3, r0
 8002054:	4699      	mov	r9, r3
 8002056:	0023      	movs	r3, r4
 8002058:	408b      	lsls	r3, r1
 800205a:	4698      	mov	r8, r3
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <__aeabi_ddiv+0x398>)
 800205e:	2400      	movs	r4, #0
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	469a      	mov	sl, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	e682      	b.n	8001d70 <__aeabi_ddiv+0x50>
 800206a:	465a      	mov	r2, fp
 800206c:	4302      	orrs	r2, r0
 800206e:	4691      	mov	r9, r2
 8002070:	d12a      	bne.n	80020c8 <__aeabi_ddiv+0x3a8>
 8002072:	2200      	movs	r2, #0
 8002074:	469a      	mov	sl, r3
 8002076:	2302      	movs	r3, #2
 8002078:	4690      	mov	r8, r2
 800207a:	2408      	movs	r4, #8
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	e677      	b.n	8001d70 <__aeabi_ddiv+0x50>
 8002080:	465a      	mov	r2, fp
 8002082:	9b00      	ldr	r3, [sp, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <__aeabi_ddiv+0x39c>)
 8002088:	469c      	mov	ip, r3
 800208a:	44e2      	add	sl, ip
 800208c:	2a00      	cmp	r2, #0
 800208e:	d117      	bne.n	80020c0 <__aeabi_ddiv+0x3a0>
 8002090:	2302      	movs	r3, #2
 8002092:	431c      	orrs	r4, r3
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3302      	adds	r3, #2
 800209a:	e689      	b.n	8001db0 <__aeabi_ddiv+0x90>
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	fffffc01 	.word	0xfffffc01
 80020a4:	08013a7c 	.word	0x08013a7c
 80020a8:	000003ff 	.word	0x000003ff
 80020ac:	feffffff 	.word	0xfeffffff
 80020b0:	000007fe 	.word	0x000007fe
 80020b4:	000003f3 	.word	0x000003f3
 80020b8:	fffffc0d 	.word	0xfffffc0d
 80020bc:	fffff801 	.word	0xfffff801
 80020c0:	2303      	movs	r3, #3
 80020c2:	0032      	movs	r2, r6
 80020c4:	431c      	orrs	r4, r3
 80020c6:	e673      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020c8:	469a      	mov	sl, r3
 80020ca:	2303      	movs	r3, #3
 80020cc:	46d9      	mov	r9, fp
 80020ce:	240c      	movs	r4, #12
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	e64d      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020d4:	2300      	movs	r3, #0
 80020d6:	4698      	mov	r8, r3
 80020d8:	469a      	mov	sl, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	2404      	movs	r4, #4
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	e646      	b.n	8001d70 <__aeabi_ddiv+0x50>
 80020e2:	2301      	movs	r3, #1
 80020e4:	431c      	orrs	r4, r3
 80020e6:	2300      	movs	r3, #0
 80020e8:	469b      	mov	fp, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	e660      	b.n	8001db0 <__aeabi_ddiv+0x90>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	4698      	mov	r8, r3
 80020f4:	2600      	movs	r6, #0
 80020f6:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <__aeabi_ddiv+0x620>)
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	e671      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4252      	negs	r2, r2
 8002100:	2101      	movs	r1, #1
 8002102:	1ac9      	subs	r1, r1, r3
 8002104:	2938      	cmp	r1, #56	@ 0x38
 8002106:	dd00      	ble.n	800210a <__aeabi_ddiv+0x3ea>
 8002108:	e666      	b.n	8001dd8 <__aeabi_ddiv+0xb8>
 800210a:	291f      	cmp	r1, #31
 800210c:	dc00      	bgt.n	8002110 <__aeabi_ddiv+0x3f0>
 800210e:	e0ab      	b.n	8002268 <__aeabi_ddiv+0x548>
 8002110:	201f      	movs	r0, #31
 8002112:	4240      	negs	r0, r0
 8002114:	1ac3      	subs	r3, r0, r3
 8002116:	4658      	mov	r0, fp
 8002118:	40d8      	lsrs	r0, r3
 800211a:	0003      	movs	r3, r0
 800211c:	2920      	cmp	r1, #32
 800211e:	d004      	beq.n	800212a <__aeabi_ddiv+0x40a>
 8002120:	4658      	mov	r0, fp
 8002122:	4988      	ldr	r1, [pc, #544]	@ (8002344 <__aeabi_ddiv+0x624>)
 8002124:	4451      	add	r1, sl
 8002126:	4088      	lsls	r0, r1
 8002128:	4302      	orrs	r2, r0
 800212a:	1e51      	subs	r1, r2, #1
 800212c:	418a      	sbcs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	2307      	movs	r3, #7
 8002132:	0019      	movs	r1, r3
 8002134:	2400      	movs	r4, #0
 8002136:	4011      	ands	r1, r2
 8002138:	4213      	tst	r3, r2
 800213a:	d00c      	beq.n	8002156 <__aeabi_ddiv+0x436>
 800213c:	230f      	movs	r3, #15
 800213e:	4013      	ands	r3, r2
 8002140:	2b04      	cmp	r3, #4
 8002142:	d100      	bne.n	8002146 <__aeabi_ddiv+0x426>
 8002144:	e0f9      	b.n	800233a <__aeabi_ddiv+0x61a>
 8002146:	1d11      	adds	r1, r2, #4
 8002148:	4291      	cmp	r1, r2
 800214a:	419b      	sbcs	r3, r3
 800214c:	000a      	movs	r2, r1
 800214e:	425b      	negs	r3, r3
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	0b1c      	lsrs	r4, r3, #12
 8002156:	08d2      	lsrs	r2, r2, #3
 8002158:	430a      	orrs	r2, r1
 800215a:	4690      	mov	r8, r2
 800215c:	2300      	movs	r3, #0
 800215e:	e63f      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002160:	2480      	movs	r4, #128	@ 0x80
 8002162:	464b      	mov	r3, r9
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	4223      	tst	r3, r4
 8002168:	d009      	beq.n	800217e <__aeabi_ddiv+0x45e>
 800216a:	465b      	mov	r3, fp
 800216c:	4223      	tst	r3, r4
 800216e:	d106      	bne.n	800217e <__aeabi_ddiv+0x45e>
 8002170:	431c      	orrs	r4, r3
 8002172:	0324      	lsls	r4, r4, #12
 8002174:	002e      	movs	r6, r5
 8002176:	4690      	mov	r8, r2
 8002178:	4b71      	ldr	r3, [pc, #452]	@ (8002340 <__aeabi_ddiv+0x620>)
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	e630      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 800217e:	2480      	movs	r4, #128	@ 0x80
 8002180:	464b      	mov	r3, r9
 8002182:	0324      	lsls	r4, r4, #12
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	9e02      	ldr	r6, [sp, #8]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <__aeabi_ddiv+0x620>)
 800218c:	0b24      	lsrs	r4, r4, #12
 800218e:	e627      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <__aeabi_ddiv+0x476>
 8002194:	e700      	b.n	8001f98 <__aeabi_ddiv+0x278>
 8002196:	9800      	ldr	r0, [sp, #0]
 8002198:	1e51      	subs	r1, r2, #1
 800219a:	4684      	mov	ip, r0
 800219c:	4464      	add	r4, ip
 800219e:	4284      	cmp	r4, r0
 80021a0:	d200      	bcs.n	80021a4 <__aeabi_ddiv+0x484>
 80021a2:	e084      	b.n	80022ae <__aeabi_ddiv+0x58e>
 80021a4:	42bc      	cmp	r4, r7
 80021a6:	d200      	bcs.n	80021aa <__aeabi_ddiv+0x48a>
 80021a8:	e0ae      	b.n	8002308 <__aeabi_ddiv+0x5e8>
 80021aa:	d100      	bne.n	80021ae <__aeabi_ddiv+0x48e>
 80021ac:	e0c1      	b.n	8002332 <__aeabi_ddiv+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	e6f0      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80021b2:	4542      	cmp	r2, r8
 80021b4:	d900      	bls.n	80021b8 <__aeabi_ddiv+0x498>
 80021b6:	e62c      	b.n	8001e12 <__aeabi_ddiv+0xf2>
 80021b8:	464b      	mov	r3, r9
 80021ba:	07dc      	lsls	r4, r3, #31
 80021bc:	0858      	lsrs	r0, r3, #1
 80021be:	4643      	mov	r3, r8
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	431c      	orrs	r4, r3
 80021c4:	4643      	mov	r3, r8
 80021c6:	07df      	lsls	r7, r3, #31
 80021c8:	e62a      	b.n	8001e20 <__aeabi_ddiv+0x100>
 80021ca:	f001 f9cd 	bl	8003568 <__clzsi2>
 80021ce:	2315      	movs	r3, #21
 80021d0:	469c      	mov	ip, r3
 80021d2:	4484      	add	ip, r0
 80021d4:	0002      	movs	r2, r0
 80021d6:	4663      	mov	r3, ip
 80021d8:	3220      	adds	r2, #32
 80021da:	2b1c      	cmp	r3, #28
 80021dc:	dc00      	bgt.n	80021e0 <__aeabi_ddiv+0x4c0>
 80021de:	e72e      	b.n	800203e <__aeabi_ddiv+0x31e>
 80021e0:	0023      	movs	r3, r4
 80021e2:	3808      	subs	r0, #8
 80021e4:	4083      	lsls	r3, r0
 80021e6:	4699      	mov	r9, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	4698      	mov	r8, r3
 80021ec:	e736      	b.n	800205c <__aeabi_ddiv+0x33c>
 80021ee:	f001 f9bb 	bl	8003568 <__clzsi2>
 80021f2:	0002      	movs	r2, r0
 80021f4:	0003      	movs	r3, r0
 80021f6:	3215      	adds	r2, #21
 80021f8:	3320      	adds	r3, #32
 80021fa:	2a1c      	cmp	r2, #28
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_ddiv+0x4e0>
 80021fe:	e6fb      	b.n	8001ff8 <__aeabi_ddiv+0x2d8>
 8002200:	9900      	ldr	r1, [sp, #0]
 8002202:	3808      	subs	r0, #8
 8002204:	4081      	lsls	r1, r0
 8002206:	2200      	movs	r2, #0
 8002208:	468b      	mov	fp, r1
 800220a:	e702      	b.n	8002012 <__aeabi_ddiv+0x2f2>
 800220c:	9900      	ldr	r1, [sp, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	468c      	mov	ip, r1
 8002212:	4464      	add	r4, ip
 8002214:	42a1      	cmp	r1, r4
 8002216:	d900      	bls.n	800221a <__aeabi_ddiv+0x4fa>
 8002218:	e69a      	b.n	8001f50 <__aeabi_ddiv+0x230>
 800221a:	42a2      	cmp	r2, r4
 800221c:	d800      	bhi.n	8002220 <__aeabi_ddiv+0x500>
 800221e:	e697      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002220:	1e83      	subs	r3, r0, #2
 8002222:	4464      	add	r4, ip
 8002224:	e694      	b.n	8001f50 <__aeabi_ddiv+0x230>
 8002226:	46ac      	mov	ip, r5
 8002228:	4461      	add	r1, ip
 800222a:	3f01      	subs	r7, #1
 800222c:	428d      	cmp	r5, r1
 800222e:	d900      	bls.n	8002232 <__aeabi_ddiv+0x512>
 8002230:	e680      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002232:	428a      	cmp	r2, r1
 8002234:	d800      	bhi.n	8002238 <__aeabi_ddiv+0x518>
 8002236:	e67d      	b.n	8001f34 <__aeabi_ddiv+0x214>
 8002238:	1e87      	subs	r7, r0, #2
 800223a:	4461      	add	r1, ip
 800223c:	e67a      	b.n	8001f34 <__aeabi_ddiv+0x214>
 800223e:	4285      	cmp	r5, r0
 8002240:	d000      	beq.n	8002244 <__aeabi_ddiv+0x524>
 8002242:	e65f      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 8002244:	45b9      	cmp	r9, r7
 8002246:	d900      	bls.n	800224a <__aeabi_ddiv+0x52a>
 8002248:	e65c      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 800224a:	e656      	b.n	8001efa <__aeabi_ddiv+0x1da>
 800224c:	42a2      	cmp	r2, r4
 800224e:	d800      	bhi.n	8002252 <__aeabi_ddiv+0x532>
 8002250:	e61a      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002252:	1e83      	subs	r3, r0, #2
 8002254:	4464      	add	r4, ip
 8002256:	e617      	b.n	8001e88 <__aeabi_ddiv+0x168>
 8002258:	428a      	cmp	r2, r1
 800225a:	d800      	bhi.n	800225e <__aeabi_ddiv+0x53e>
 800225c:	e600      	b.n	8001e60 <__aeabi_ddiv+0x140>
 800225e:	46ac      	mov	ip, r5
 8002260:	1e83      	subs	r3, r0, #2
 8002262:	4698      	mov	r8, r3
 8002264:	4461      	add	r1, ip
 8002266:	e5fb      	b.n	8001e60 <__aeabi_ddiv+0x140>
 8002268:	4837      	ldr	r0, [pc, #220]	@ (8002348 <__aeabi_ddiv+0x628>)
 800226a:	0014      	movs	r4, r2
 800226c:	4450      	add	r0, sl
 800226e:	4082      	lsls	r2, r0
 8002270:	465b      	mov	r3, fp
 8002272:	0017      	movs	r7, r2
 8002274:	4083      	lsls	r3, r0
 8002276:	40cc      	lsrs	r4, r1
 8002278:	1e7a      	subs	r2, r7, #1
 800227a:	4197      	sbcs	r7, r2
 800227c:	4323      	orrs	r3, r4
 800227e:	433b      	orrs	r3, r7
 8002280:	001a      	movs	r2, r3
 8002282:	465b      	mov	r3, fp
 8002284:	40cb      	lsrs	r3, r1
 8002286:	0751      	lsls	r1, r2, #29
 8002288:	d009      	beq.n	800229e <__aeabi_ddiv+0x57e>
 800228a:	210f      	movs	r1, #15
 800228c:	4011      	ands	r1, r2
 800228e:	2904      	cmp	r1, #4
 8002290:	d005      	beq.n	800229e <__aeabi_ddiv+0x57e>
 8002292:	1d11      	adds	r1, r2, #4
 8002294:	4291      	cmp	r1, r2
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	189b      	adds	r3, r3, r2
 800229c:	000a      	movs	r2, r1
 800229e:	0219      	lsls	r1, r3, #8
 80022a0:	d400      	bmi.n	80022a4 <__aeabi_ddiv+0x584>
 80022a2:	e755      	b.n	8002150 <__aeabi_ddiv+0x430>
 80022a4:	2200      	movs	r2, #0
 80022a6:	2301      	movs	r3, #1
 80022a8:	2400      	movs	r4, #0
 80022aa:	4690      	mov	r8, r2
 80022ac:	e598      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 80022ae:	000a      	movs	r2, r1
 80022b0:	42bc      	cmp	r4, r7
 80022b2:	d000      	beq.n	80022b6 <__aeabi_ddiv+0x596>
 80022b4:	e66e      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022b6:	454b      	cmp	r3, r9
 80022b8:	d000      	beq.n	80022bc <__aeabi_ddiv+0x59c>
 80022ba:	e66b      	b.n	8001f94 <__aeabi_ddiv+0x274>
 80022bc:	e66c      	b.n	8001f98 <__aeabi_ddiv+0x278>
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <__aeabi_ddiv+0x62c>)
 80022c0:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <__aeabi_ddiv+0x630>)
 80022c2:	4453      	add	r3, sl
 80022c4:	4592      	cmp	sl, r2
 80022c6:	da00      	bge.n	80022ca <__aeabi_ddiv+0x5aa>
 80022c8:	e718      	b.n	80020fc <__aeabi_ddiv+0x3dc>
 80022ca:	2101      	movs	r1, #1
 80022cc:	4249      	negs	r1, r1
 80022ce:	1d0a      	adds	r2, r1, #4
 80022d0:	428a      	cmp	r2, r1
 80022d2:	4189      	sbcs	r1, r1
 80022d4:	4249      	negs	r1, r1
 80022d6:	448b      	add	fp, r1
 80022d8:	e666      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022da:	210f      	movs	r1, #15
 80022dc:	4011      	ands	r1, r2
 80022de:	2904      	cmp	r1, #4
 80022e0:	d100      	bne.n	80022e4 <__aeabi_ddiv+0x5c4>
 80022e2:	e661      	b.n	8001fa8 <__aeabi_ddiv+0x288>
 80022e4:	0011      	movs	r1, r2
 80022e6:	e7f2      	b.n	80022ce <__aeabi_ddiv+0x5ae>
 80022e8:	42bc      	cmp	r4, r7
 80022ea:	d800      	bhi.n	80022ee <__aeabi_ddiv+0x5ce>
 80022ec:	e60a      	b.n	8001f04 <__aeabi_ddiv+0x1e4>
 80022ee:	2302      	movs	r3, #2
 80022f0:	425b      	negs	r3, r3
 80022f2:	469c      	mov	ip, r3
 80022f4:	9900      	ldr	r1, [sp, #0]
 80022f6:	444f      	add	r7, r9
 80022f8:	454f      	cmp	r7, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	44e3      	add	fp, ip
 80022fe:	468c      	mov	ip, r1
 8002300:	425b      	negs	r3, r3
 8002302:	4463      	add	r3, ip
 8002304:	18c0      	adds	r0, r0, r3
 8002306:	e5ff      	b.n	8001f08 <__aeabi_ddiv+0x1e8>
 8002308:	4649      	mov	r1, r9
 800230a:	9d00      	ldr	r5, [sp, #0]
 800230c:	0048      	lsls	r0, r1, #1
 800230e:	4548      	cmp	r0, r9
 8002310:	4189      	sbcs	r1, r1
 8002312:	46ac      	mov	ip, r5
 8002314:	4249      	negs	r1, r1
 8002316:	4461      	add	r1, ip
 8002318:	4681      	mov	r9, r0
 800231a:	3a02      	subs	r2, #2
 800231c:	1864      	adds	r4, r4, r1
 800231e:	e7c7      	b.n	80022b0 <__aeabi_ddiv+0x590>
 8002320:	2480      	movs	r4, #128	@ 0x80
 8002322:	465b      	mov	r3, fp
 8002324:	0324      	lsls	r4, r4, #12
 8002326:	431c      	orrs	r4, r3
 8002328:	0324      	lsls	r4, r4, #12
 800232a:	4690      	mov	r8, r2
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__aeabi_ddiv+0x620>)
 800232e:	0b24      	lsrs	r4, r4, #12
 8002330:	e556      	b.n	8001de0 <__aeabi_ddiv+0xc0>
 8002332:	4599      	cmp	r9, r3
 8002334:	d3e8      	bcc.n	8002308 <__aeabi_ddiv+0x5e8>
 8002336:	000a      	movs	r2, r1
 8002338:	e7bd      	b.n	80022b6 <__aeabi_ddiv+0x596>
 800233a:	2300      	movs	r3, #0
 800233c:	e708      	b.n	8002150 <__aeabi_ddiv+0x430>
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff
 8002344:	0000043e 	.word	0x0000043e
 8002348:	0000041e 	.word	0x0000041e
 800234c:	000003ff 	.word	0x000003ff
 8002350:	fffffc02 	.word	0xfffffc02

08002354 <__eqdf2>:
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	4657      	mov	r7, sl
 8002358:	46de      	mov	lr, fp
 800235a:	464e      	mov	r6, r9
 800235c:	4645      	mov	r5, r8
 800235e:	b5e0      	push	{r5, r6, r7, lr}
 8002360:	000d      	movs	r5, r1
 8002362:	0004      	movs	r4, r0
 8002364:	0fe8      	lsrs	r0, r5, #31
 8002366:	4683      	mov	fp, r0
 8002368:	0309      	lsls	r1, r1, #12
 800236a:	0fd8      	lsrs	r0, r3, #31
 800236c:	0b09      	lsrs	r1, r1, #12
 800236e:	4682      	mov	sl, r0
 8002370:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <__eqdf2+0x84>)
 8002372:	468c      	mov	ip, r1
 8002374:	031f      	lsls	r7, r3, #12
 8002376:	0069      	lsls	r1, r5, #1
 8002378:	005e      	lsls	r6, r3, #1
 800237a:	0d49      	lsrs	r1, r1, #21
 800237c:	0b3f      	lsrs	r7, r7, #12
 800237e:	0d76      	lsrs	r6, r6, #21
 8002380:	4281      	cmp	r1, r0
 8002382:	d018      	beq.n	80023b6 <__eqdf2+0x62>
 8002384:	4286      	cmp	r6, r0
 8002386:	d00f      	beq.n	80023a8 <__eqdf2+0x54>
 8002388:	2001      	movs	r0, #1
 800238a:	42b1      	cmp	r1, r6
 800238c:	d10d      	bne.n	80023aa <__eqdf2+0x56>
 800238e:	45bc      	cmp	ip, r7
 8002390:	d10b      	bne.n	80023aa <__eqdf2+0x56>
 8002392:	4294      	cmp	r4, r2
 8002394:	d109      	bne.n	80023aa <__eqdf2+0x56>
 8002396:	45d3      	cmp	fp, sl
 8002398:	d01c      	beq.n	80023d4 <__eqdf2+0x80>
 800239a:	2900      	cmp	r1, #0
 800239c:	d105      	bne.n	80023aa <__eqdf2+0x56>
 800239e:	4660      	mov	r0, ip
 80023a0:	4320      	orrs	r0, r4
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e000      	b.n	80023aa <__eqdf2+0x56>
 80023a8:	2001      	movs	r0, #1
 80023aa:	bcf0      	pop	{r4, r5, r6, r7}
 80023ac:	46bb      	mov	fp, r7
 80023ae:	46b2      	mov	sl, r6
 80023b0:	46a9      	mov	r9, r5
 80023b2:	46a0      	mov	r8, r4
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b6:	2001      	movs	r0, #1
 80023b8:	428e      	cmp	r6, r1
 80023ba:	d1f6      	bne.n	80023aa <__eqdf2+0x56>
 80023bc:	4661      	mov	r1, ip
 80023be:	4339      	orrs	r1, r7
 80023c0:	000f      	movs	r7, r1
 80023c2:	4317      	orrs	r7, r2
 80023c4:	4327      	orrs	r7, r4
 80023c6:	d1f0      	bne.n	80023aa <__eqdf2+0x56>
 80023c8:	465b      	mov	r3, fp
 80023ca:	4652      	mov	r2, sl
 80023cc:	1a98      	subs	r0, r3, r2
 80023ce:	1e43      	subs	r3, r0, #1
 80023d0:	4198      	sbcs	r0, r3
 80023d2:	e7ea      	b.n	80023aa <__eqdf2+0x56>
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7e8      	b.n	80023aa <__eqdf2+0x56>
 80023d8:	000007ff 	.word	0x000007ff

080023dc <__gedf2>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	4657      	mov	r7, sl
 80023e0:	464e      	mov	r6, r9
 80023e2:	4645      	mov	r5, r8
 80023e4:	46de      	mov	lr, fp
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	000d      	movs	r5, r1
 80023ea:	030f      	lsls	r7, r1, #12
 80023ec:	0b39      	lsrs	r1, r7, #12
 80023ee:	b083      	sub	sp, #12
 80023f0:	0004      	movs	r4, r0
 80023f2:	4680      	mov	r8, r0
 80023f4:	9101      	str	r1, [sp, #4]
 80023f6:	0058      	lsls	r0, r3, #1
 80023f8:	0fe9      	lsrs	r1, r5, #31
 80023fa:	4f31      	ldr	r7, [pc, #196]	@ (80024c0 <__gedf2+0xe4>)
 80023fc:	0d40      	lsrs	r0, r0, #21
 80023fe:	468c      	mov	ip, r1
 8002400:	006e      	lsls	r6, r5, #1
 8002402:	0319      	lsls	r1, r3, #12
 8002404:	4682      	mov	sl, r0
 8002406:	4691      	mov	r9, r2
 8002408:	0d76      	lsrs	r6, r6, #21
 800240a:	0b09      	lsrs	r1, r1, #12
 800240c:	0fd8      	lsrs	r0, r3, #31
 800240e:	42be      	cmp	r6, r7
 8002410:	d01f      	beq.n	8002452 <__gedf2+0x76>
 8002412:	45ba      	cmp	sl, r7
 8002414:	d00f      	beq.n	8002436 <__gedf2+0x5a>
 8002416:	2e00      	cmp	r6, #0
 8002418:	d12f      	bne.n	800247a <__gedf2+0x9e>
 800241a:	4655      	mov	r5, sl
 800241c:	9e01      	ldr	r6, [sp, #4]
 800241e:	4334      	orrs	r4, r6
 8002420:	2d00      	cmp	r5, #0
 8002422:	d127      	bne.n	8002474 <__gedf2+0x98>
 8002424:	430a      	orrs	r2, r1
 8002426:	d03a      	beq.n	800249e <__gedf2+0xc2>
 8002428:	2c00      	cmp	r4, #0
 800242a:	d145      	bne.n	80024b8 <__gedf2+0xdc>
 800242c:	2800      	cmp	r0, #0
 800242e:	d11a      	bne.n	8002466 <__gedf2+0x8a>
 8002430:	2001      	movs	r0, #1
 8002432:	4240      	negs	r0, r0
 8002434:	e017      	b.n	8002466 <__gedf2+0x8a>
 8002436:	4311      	orrs	r1, r2
 8002438:	d13b      	bne.n	80024b2 <__gedf2+0xd6>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d102      	bne.n	8002444 <__gedf2+0x68>
 800243e:	9f01      	ldr	r7, [sp, #4]
 8002440:	4327      	orrs	r7, r4
 8002442:	d0f3      	beq.n	800242c <__gedf2+0x50>
 8002444:	4584      	cmp	ip, r0
 8002446:	d109      	bne.n	800245c <__gedf2+0x80>
 8002448:	4663      	mov	r3, ip
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <__gedf2+0x54>
 800244e:	4660      	mov	r0, ip
 8002450:	e009      	b.n	8002466 <__gedf2+0x8a>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d12c      	bne.n	80024b2 <__gedf2+0xd6>
 8002458:	45b2      	cmp	sl, r6
 800245a:	d024      	beq.n	80024a6 <__gedf2+0xca>
 800245c:	4663      	mov	r3, ip
 800245e:	2002      	movs	r0, #2
 8002460:	3b01      	subs	r3, #1
 8002462:	4018      	ands	r0, r3
 8002464:	3801      	subs	r0, #1
 8002466:	b003      	add	sp, #12
 8002468:	bcf0      	pop	{r4, r5, r6, r7}
 800246a:	46bb      	mov	fp, r7
 800246c:	46b2      	mov	sl, r6
 800246e:	46a9      	mov	r9, r5
 8002470:	46a0      	mov	r8, r4
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0d9      	beq.n	800242c <__gedf2+0x50>
 8002478:	e7e4      	b.n	8002444 <__gedf2+0x68>
 800247a:	4654      	mov	r4, sl
 800247c:	2c00      	cmp	r4, #0
 800247e:	d0ed      	beq.n	800245c <__gedf2+0x80>
 8002480:	4584      	cmp	ip, r0
 8002482:	d1eb      	bne.n	800245c <__gedf2+0x80>
 8002484:	4556      	cmp	r6, sl
 8002486:	dce9      	bgt.n	800245c <__gedf2+0x80>
 8002488:	dbde      	blt.n	8002448 <__gedf2+0x6c>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	428b      	cmp	r3, r1
 800248e:	d8e5      	bhi.n	800245c <__gedf2+0x80>
 8002490:	d1da      	bne.n	8002448 <__gedf2+0x6c>
 8002492:	45c8      	cmp	r8, r9
 8002494:	d8e2      	bhi.n	800245c <__gedf2+0x80>
 8002496:	2000      	movs	r0, #0
 8002498:	45c8      	cmp	r8, r9
 800249a:	d2e4      	bcs.n	8002466 <__gedf2+0x8a>
 800249c:	e7d4      	b.n	8002448 <__gedf2+0x6c>
 800249e:	2000      	movs	r0, #0
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0e0      	beq.n	8002466 <__gedf2+0x8a>
 80024a4:	e7da      	b.n	800245c <__gedf2+0x80>
 80024a6:	4311      	orrs	r1, r2
 80024a8:	d103      	bne.n	80024b2 <__gedf2+0xd6>
 80024aa:	4584      	cmp	ip, r0
 80024ac:	d1d6      	bne.n	800245c <__gedf2+0x80>
 80024ae:	2000      	movs	r0, #0
 80024b0:	e7d9      	b.n	8002466 <__gedf2+0x8a>
 80024b2:	2002      	movs	r0, #2
 80024b4:	4240      	negs	r0, r0
 80024b6:	e7d6      	b.n	8002466 <__gedf2+0x8a>
 80024b8:	4584      	cmp	ip, r0
 80024ba:	d0e6      	beq.n	800248a <__gedf2+0xae>
 80024bc:	e7ce      	b.n	800245c <__gedf2+0x80>
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff

080024c4 <__ledf2>:
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	4657      	mov	r7, sl
 80024c8:	464e      	mov	r6, r9
 80024ca:	4645      	mov	r5, r8
 80024cc:	46de      	mov	lr, fp
 80024ce:	b5e0      	push	{r5, r6, r7, lr}
 80024d0:	000d      	movs	r5, r1
 80024d2:	030f      	lsls	r7, r1, #12
 80024d4:	0004      	movs	r4, r0
 80024d6:	4680      	mov	r8, r0
 80024d8:	0fe8      	lsrs	r0, r5, #31
 80024da:	0b39      	lsrs	r1, r7, #12
 80024dc:	4684      	mov	ip, r0
 80024de:	b083      	sub	sp, #12
 80024e0:	0058      	lsls	r0, r3, #1
 80024e2:	4f30      	ldr	r7, [pc, #192]	@ (80025a4 <__ledf2+0xe0>)
 80024e4:	0d40      	lsrs	r0, r0, #21
 80024e6:	9101      	str	r1, [sp, #4]
 80024e8:	031e      	lsls	r6, r3, #12
 80024ea:	0069      	lsls	r1, r5, #1
 80024ec:	4682      	mov	sl, r0
 80024ee:	4691      	mov	r9, r2
 80024f0:	0d49      	lsrs	r1, r1, #21
 80024f2:	0b36      	lsrs	r6, r6, #12
 80024f4:	0fd8      	lsrs	r0, r3, #31
 80024f6:	42b9      	cmp	r1, r7
 80024f8:	d020      	beq.n	800253c <__ledf2+0x78>
 80024fa:	45ba      	cmp	sl, r7
 80024fc:	d00f      	beq.n	800251e <__ledf2+0x5a>
 80024fe:	2900      	cmp	r1, #0
 8002500:	d12b      	bne.n	800255a <__ledf2+0x96>
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	430c      	orrs	r4, r1
 8002506:	4651      	mov	r1, sl
 8002508:	2900      	cmp	r1, #0
 800250a:	d137      	bne.n	800257c <__ledf2+0xb8>
 800250c:	4332      	orrs	r2, r6
 800250e:	d038      	beq.n	8002582 <__ledf2+0xbe>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d144      	bne.n	800259e <__ledf2+0xda>
 8002514:	2800      	cmp	r0, #0
 8002516:	d119      	bne.n	800254c <__ledf2+0x88>
 8002518:	2001      	movs	r0, #1
 800251a:	4240      	negs	r0, r0
 800251c:	e016      	b.n	800254c <__ledf2+0x88>
 800251e:	4316      	orrs	r6, r2
 8002520:	d113      	bne.n	800254a <__ledf2+0x86>
 8002522:	2900      	cmp	r1, #0
 8002524:	d102      	bne.n	800252c <__ledf2+0x68>
 8002526:	9f01      	ldr	r7, [sp, #4]
 8002528:	4327      	orrs	r7, r4
 800252a:	d0f3      	beq.n	8002514 <__ledf2+0x50>
 800252c:	4584      	cmp	ip, r0
 800252e:	d020      	beq.n	8002572 <__ledf2+0xae>
 8002530:	4663      	mov	r3, ip
 8002532:	2002      	movs	r0, #2
 8002534:	3b01      	subs	r3, #1
 8002536:	4018      	ands	r0, r3
 8002538:	3801      	subs	r0, #1
 800253a:	e007      	b.n	800254c <__ledf2+0x88>
 800253c:	9f01      	ldr	r7, [sp, #4]
 800253e:	4327      	orrs	r7, r4
 8002540:	d103      	bne.n	800254a <__ledf2+0x86>
 8002542:	458a      	cmp	sl, r1
 8002544:	d1f4      	bne.n	8002530 <__ledf2+0x6c>
 8002546:	4316      	orrs	r6, r2
 8002548:	d01f      	beq.n	800258a <__ledf2+0xc6>
 800254a:	2002      	movs	r0, #2
 800254c:	b003      	add	sp, #12
 800254e:	bcf0      	pop	{r4, r5, r6, r7}
 8002550:	46bb      	mov	fp, r7
 8002552:	46b2      	mov	sl, r6
 8002554:	46a9      	mov	r9, r5
 8002556:	46a0      	mov	r8, r4
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	4654      	mov	r4, sl
 800255c:	2c00      	cmp	r4, #0
 800255e:	d0e7      	beq.n	8002530 <__ledf2+0x6c>
 8002560:	4584      	cmp	ip, r0
 8002562:	d1e5      	bne.n	8002530 <__ledf2+0x6c>
 8002564:	4551      	cmp	r1, sl
 8002566:	dce3      	bgt.n	8002530 <__ledf2+0x6c>
 8002568:	db03      	blt.n	8002572 <__ledf2+0xae>
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	42b3      	cmp	r3, r6
 800256e:	d8df      	bhi.n	8002530 <__ledf2+0x6c>
 8002570:	d00f      	beq.n	8002592 <__ledf2+0xce>
 8002572:	4663      	mov	r3, ip
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0cf      	beq.n	8002518 <__ledf2+0x54>
 8002578:	4660      	mov	r0, ip
 800257a:	e7e7      	b.n	800254c <__ledf2+0x88>
 800257c:	2c00      	cmp	r4, #0
 800257e:	d0c9      	beq.n	8002514 <__ledf2+0x50>
 8002580:	e7d4      	b.n	800252c <__ledf2+0x68>
 8002582:	2000      	movs	r0, #0
 8002584:	2c00      	cmp	r4, #0
 8002586:	d0e1      	beq.n	800254c <__ledf2+0x88>
 8002588:	e7d2      	b.n	8002530 <__ledf2+0x6c>
 800258a:	4584      	cmp	ip, r0
 800258c:	d1d0      	bne.n	8002530 <__ledf2+0x6c>
 800258e:	2000      	movs	r0, #0
 8002590:	e7dc      	b.n	800254c <__ledf2+0x88>
 8002592:	45c8      	cmp	r8, r9
 8002594:	d8cc      	bhi.n	8002530 <__ledf2+0x6c>
 8002596:	2000      	movs	r0, #0
 8002598:	45c8      	cmp	r8, r9
 800259a:	d2d7      	bcs.n	800254c <__ledf2+0x88>
 800259c:	e7e9      	b.n	8002572 <__ledf2+0xae>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d0e3      	beq.n	800256a <__ledf2+0xa6>
 80025a2:	e7c5      	b.n	8002530 <__ledf2+0x6c>
 80025a4:	000007ff 	.word	0x000007ff

080025a8 <__aeabi_dmul>:
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	4657      	mov	r7, sl
 80025ac:	46de      	mov	lr, fp
 80025ae:	464e      	mov	r6, r9
 80025b0:	4645      	mov	r5, r8
 80025b2:	b5e0      	push	{r5, r6, r7, lr}
 80025b4:	001f      	movs	r7, r3
 80025b6:	030b      	lsls	r3, r1, #12
 80025b8:	0b1b      	lsrs	r3, r3, #12
 80025ba:	0016      	movs	r6, r2
 80025bc:	469a      	mov	sl, r3
 80025be:	0fca      	lsrs	r2, r1, #31
 80025c0:	004b      	lsls	r3, r1, #1
 80025c2:	0004      	movs	r4, r0
 80025c4:	4693      	mov	fp, r2
 80025c6:	b087      	sub	sp, #28
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	d100      	bne.n	80025ce <__aeabi_dmul+0x26>
 80025cc:	e0d5      	b.n	800277a <__aeabi_dmul+0x1d2>
 80025ce:	4abb      	ldr	r2, [pc, #748]	@ (80028bc <__aeabi_dmul+0x314>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dmul+0x2e>
 80025d4:	e0f8      	b.n	80027c8 <__aeabi_dmul+0x220>
 80025d6:	4651      	mov	r1, sl
 80025d8:	0f42      	lsrs	r2, r0, #29
 80025da:	00c9      	lsls	r1, r1, #3
 80025dc:	430a      	orrs	r2, r1
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	0409      	lsls	r1, r1, #16
 80025e2:	4311      	orrs	r1, r2
 80025e4:	00c2      	lsls	r2, r0, #3
 80025e6:	4691      	mov	r9, r2
 80025e8:	4ab5      	ldr	r2, [pc, #724]	@ (80028c0 <__aeabi_dmul+0x318>)
 80025ea:	468a      	mov	sl, r1
 80025ec:	189d      	adds	r5, r3, r2
 80025ee:	2300      	movs	r3, #0
 80025f0:	4698      	mov	r8, r3
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	033c      	lsls	r4, r7, #12
 80025f6:	007b      	lsls	r3, r7, #1
 80025f8:	0ffa      	lsrs	r2, r7, #31
 80025fa:	0030      	movs	r0, r6
 80025fc:	0b24      	lsrs	r4, r4, #12
 80025fe:	0d5b      	lsrs	r3, r3, #21
 8002600:	9200      	str	r2, [sp, #0]
 8002602:	d100      	bne.n	8002606 <__aeabi_dmul+0x5e>
 8002604:	e096      	b.n	8002734 <__aeabi_dmul+0x18c>
 8002606:	4aad      	ldr	r2, [pc, #692]	@ (80028bc <__aeabi_dmul+0x314>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d031      	beq.n	8002670 <__aeabi_dmul+0xc8>
 800260c:	0f72      	lsrs	r2, r6, #29
 800260e:	00e4      	lsls	r4, r4, #3
 8002610:	4322      	orrs	r2, r4
 8002612:	2480      	movs	r4, #128	@ 0x80
 8002614:	0424      	lsls	r4, r4, #16
 8002616:	4314      	orrs	r4, r2
 8002618:	4aa9      	ldr	r2, [pc, #676]	@ (80028c0 <__aeabi_dmul+0x318>)
 800261a:	00f0      	lsls	r0, r6, #3
 800261c:	4694      	mov	ip, r2
 800261e:	4463      	add	r3, ip
 8002620:	195b      	adds	r3, r3, r5
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	4642      	mov	r2, r8
 8002628:	2600      	movs	r6, #0
 800262a:	2a0a      	cmp	r2, #10
 800262c:	dc42      	bgt.n	80026b4 <__aeabi_dmul+0x10c>
 800262e:	465a      	mov	r2, fp
 8002630:	9900      	ldr	r1, [sp, #0]
 8002632:	404a      	eors	r2, r1
 8002634:	4693      	mov	fp, r2
 8002636:	4642      	mov	r2, r8
 8002638:	2a02      	cmp	r2, #2
 800263a:	dc32      	bgt.n	80026a2 <__aeabi_dmul+0xfa>
 800263c:	3a01      	subs	r2, #1
 800263e:	2a01      	cmp	r2, #1
 8002640:	d900      	bls.n	8002644 <__aeabi_dmul+0x9c>
 8002642:	e149      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002644:	2e02      	cmp	r6, #2
 8002646:	d100      	bne.n	800264a <__aeabi_dmul+0xa2>
 8002648:	e0ca      	b.n	80027e0 <__aeabi_dmul+0x238>
 800264a:	2e01      	cmp	r6, #1
 800264c:	d13d      	bne.n	80026ca <__aeabi_dmul+0x122>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	0010      	movs	r0, r2
 8002656:	465a      	mov	r2, fp
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	4323      	orrs	r3, r4
 800265c:	07d2      	lsls	r2, r2, #31
 800265e:	4313      	orrs	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	b007      	add	sp, #28
 8002664:	bcf0      	pop	{r4, r5, r6, r7}
 8002666:	46bb      	mov	fp, r7
 8002668:	46b2      	mov	sl, r6
 800266a:	46a9      	mov	r9, r5
 800266c:	46a0      	mov	r8, r4
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	4b92      	ldr	r3, [pc, #584]	@ (80028bc <__aeabi_dmul+0x314>)
 8002672:	4326      	orrs	r6, r4
 8002674:	18eb      	adds	r3, r5, r3
 8002676:	2e00      	cmp	r6, #0
 8002678:	d100      	bne.n	800267c <__aeabi_dmul+0xd4>
 800267a:	e0bb      	b.n	80027f4 <__aeabi_dmul+0x24c>
 800267c:	2203      	movs	r2, #3
 800267e:	4641      	mov	r1, r8
 8002680:	4311      	orrs	r1, r2
 8002682:	465a      	mov	r2, fp
 8002684:	4688      	mov	r8, r1
 8002686:	9900      	ldr	r1, [sp, #0]
 8002688:	404a      	eors	r2, r1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	0109      	lsls	r1, r1, #4
 800268e:	468c      	mov	ip, r1
 8002690:	0029      	movs	r1, r5
 8002692:	4461      	add	r1, ip
 8002694:	9101      	str	r1, [sp, #4]
 8002696:	4641      	mov	r1, r8
 8002698:	290a      	cmp	r1, #10
 800269a:	dd00      	ble.n	800269e <__aeabi_dmul+0xf6>
 800269c:	e233      	b.n	8002b06 <__aeabi_dmul+0x55e>
 800269e:	4693      	mov	fp, r2
 80026a0:	2603      	movs	r6, #3
 80026a2:	4642      	mov	r2, r8
 80026a4:	2701      	movs	r7, #1
 80026a6:	4097      	lsls	r7, r2
 80026a8:	21a6      	movs	r1, #166	@ 0xa6
 80026aa:	003a      	movs	r2, r7
 80026ac:	00c9      	lsls	r1, r1, #3
 80026ae:	400a      	ands	r2, r1
 80026b0:	420f      	tst	r7, r1
 80026b2:	d031      	beq.n	8002718 <__aeabi_dmul+0x170>
 80026b4:	9e02      	ldr	r6, [sp, #8]
 80026b6:	2e02      	cmp	r6, #2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dmul+0x114>
 80026ba:	e235      	b.n	8002b28 <__aeabi_dmul+0x580>
 80026bc:	2e03      	cmp	r6, #3
 80026be:	d100      	bne.n	80026c2 <__aeabi_dmul+0x11a>
 80026c0:	e1d2      	b.n	8002a68 <__aeabi_dmul+0x4c0>
 80026c2:	4654      	mov	r4, sl
 80026c4:	4648      	mov	r0, r9
 80026c6:	2e01      	cmp	r6, #1
 80026c8:	d0c1      	beq.n	800264e <__aeabi_dmul+0xa6>
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	4b7d      	ldr	r3, [pc, #500]	@ (80028c4 <__aeabi_dmul+0x31c>)
 80026ce:	4694      	mov	ip, r2
 80026d0:	4463      	add	r3, ip
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dc00      	bgt.n	80026d8 <__aeabi_dmul+0x130>
 80026d6:	e0c0      	b.n	800285a <__aeabi_dmul+0x2b2>
 80026d8:	0742      	lsls	r2, r0, #29
 80026da:	d009      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026dc:	220f      	movs	r2, #15
 80026de:	4002      	ands	r2, r0
 80026e0:	2a04      	cmp	r2, #4
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dmul+0x148>
 80026e4:	1d02      	adds	r2, r0, #4
 80026e6:	4282      	cmp	r2, r0
 80026e8:	4180      	sbcs	r0, r0
 80026ea:	4240      	negs	r0, r0
 80026ec:	1824      	adds	r4, r4, r0
 80026ee:	0010      	movs	r0, r2
 80026f0:	01e2      	lsls	r2, r4, #7
 80026f2:	d506      	bpl.n	8002702 <__aeabi_dmul+0x15a>
 80026f4:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <__aeabi_dmul+0x320>)
 80026f6:	9a01      	ldr	r2, [sp, #4]
 80026f8:	401c      	ands	r4, r3
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	4694      	mov	ip, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4463      	add	r3, ip
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <__aeabi_dmul+0x324>)
 8002704:	4293      	cmp	r3, r2
 8002706:	dc6b      	bgt.n	80027e0 <__aeabi_dmul+0x238>
 8002708:	0762      	lsls	r2, r4, #29
 800270a:	08c0      	lsrs	r0, r0, #3
 800270c:	0264      	lsls	r4, r4, #9
 800270e:	055b      	lsls	r3, r3, #21
 8002710:	4302      	orrs	r2, r0
 8002712:	0b24      	lsrs	r4, r4, #12
 8002714:	0d5b      	lsrs	r3, r3, #21
 8002716:	e79d      	b.n	8002654 <__aeabi_dmul+0xac>
 8002718:	2190      	movs	r1, #144	@ 0x90
 800271a:	0089      	lsls	r1, r1, #2
 800271c:	420f      	tst	r7, r1
 800271e:	d163      	bne.n	80027e8 <__aeabi_dmul+0x240>
 8002720:	2288      	movs	r2, #136	@ 0x88
 8002722:	423a      	tst	r2, r7
 8002724:	d100      	bne.n	8002728 <__aeabi_dmul+0x180>
 8002726:	e0d7      	b.n	80028d8 <__aeabi_dmul+0x330>
 8002728:	9b00      	ldr	r3, [sp, #0]
 800272a:	46a2      	mov	sl, r4
 800272c:	469b      	mov	fp, r3
 800272e:	4681      	mov	r9, r0
 8002730:	9602      	str	r6, [sp, #8]
 8002732:	e7bf      	b.n	80026b4 <__aeabi_dmul+0x10c>
 8002734:	0023      	movs	r3, r4
 8002736:	4333      	orrs	r3, r6
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x194>
 800273a:	e07f      	b.n	800283c <__aeabi_dmul+0x294>
 800273c:	2c00      	cmp	r4, #0
 800273e:	d100      	bne.n	8002742 <__aeabi_dmul+0x19a>
 8002740:	e1ad      	b.n	8002a9e <__aeabi_dmul+0x4f6>
 8002742:	0020      	movs	r0, r4
 8002744:	f000 ff10 	bl	8003568 <__clzsi2>
 8002748:	0002      	movs	r2, r0
 800274a:	0003      	movs	r3, r0
 800274c:	3a0b      	subs	r2, #11
 800274e:	201d      	movs	r0, #29
 8002750:	0019      	movs	r1, r3
 8002752:	1a82      	subs	r2, r0, r2
 8002754:	0030      	movs	r0, r6
 8002756:	3908      	subs	r1, #8
 8002758:	40d0      	lsrs	r0, r2
 800275a:	408c      	lsls	r4, r1
 800275c:	4304      	orrs	r4, r0
 800275e:	0030      	movs	r0, r6
 8002760:	4088      	lsls	r0, r1
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <__aeabi_dmul+0x328>)
 8002764:	1aeb      	subs	r3, r5, r3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2600      	movs	r6, #0
 8002772:	2a0a      	cmp	r2, #10
 8002774:	dc00      	bgt.n	8002778 <__aeabi_dmul+0x1d0>
 8002776:	e75a      	b.n	800262e <__aeabi_dmul+0x86>
 8002778:	e79c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800277a:	4653      	mov	r3, sl
 800277c:	4303      	orrs	r3, r0
 800277e:	4699      	mov	r9, r3
 8002780:	d054      	beq.n	800282c <__aeabi_dmul+0x284>
 8002782:	4653      	mov	r3, sl
 8002784:	2b00      	cmp	r3, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dmul+0x1e2>
 8002788:	e177      	b.n	8002a7a <__aeabi_dmul+0x4d2>
 800278a:	4650      	mov	r0, sl
 800278c:	f000 feec 	bl	8003568 <__clzsi2>
 8002790:	230b      	movs	r3, #11
 8002792:	425b      	negs	r3, r3
 8002794:	469c      	mov	ip, r3
 8002796:	0002      	movs	r2, r0
 8002798:	4484      	add	ip, r0
 800279a:	0011      	movs	r1, r2
 800279c:	4650      	mov	r0, sl
 800279e:	3908      	subs	r1, #8
 80027a0:	4088      	lsls	r0, r1
 80027a2:	231d      	movs	r3, #29
 80027a4:	4680      	mov	r8, r0
 80027a6:	4660      	mov	r0, ip
 80027a8:	1a1b      	subs	r3, r3, r0
 80027aa:	0020      	movs	r0, r4
 80027ac:	40d8      	lsrs	r0, r3
 80027ae:	0003      	movs	r3, r0
 80027b0:	4640      	mov	r0, r8
 80027b2:	4303      	orrs	r3, r0
 80027b4:	469a      	mov	sl, r3
 80027b6:	0023      	movs	r3, r4
 80027b8:	408b      	lsls	r3, r1
 80027ba:	4699      	mov	r9, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	4d44      	ldr	r5, [pc, #272]	@ (80028d0 <__aeabi_dmul+0x328>)
 80027c0:	4698      	mov	r8, r3
 80027c2:	1aad      	subs	r5, r5, r2
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	e715      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027c8:	4652      	mov	r2, sl
 80027ca:	4302      	orrs	r2, r0
 80027cc:	4691      	mov	r9, r2
 80027ce:	d126      	bne.n	800281e <__aeabi_dmul+0x276>
 80027d0:	2200      	movs	r2, #0
 80027d2:	001d      	movs	r5, r3
 80027d4:	2302      	movs	r3, #2
 80027d6:	4692      	mov	sl, r2
 80027d8:	3208      	adds	r2, #8
 80027da:	4690      	mov	r8, r2
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	e709      	b.n	80025f4 <__aeabi_dmul+0x4c>
 80027e0:	2400      	movs	r4, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <__aeabi_dmul+0x314>)
 80027e6:	e735      	b.n	8002654 <__aeabi_dmul+0xac>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2480      	movs	r4, #128	@ 0x80
 80027ec:	469b      	mov	fp, r3
 80027ee:	0324      	lsls	r4, r4, #12
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <__aeabi_dmul+0x314>)
 80027f2:	e72f      	b.n	8002654 <__aeabi_dmul+0xac>
 80027f4:	2202      	movs	r2, #2
 80027f6:	4641      	mov	r1, r8
 80027f8:	4311      	orrs	r1, r2
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	4694      	mov	ip, r2
 8002800:	002a      	movs	r2, r5
 8002802:	4462      	add	r2, ip
 8002804:	4688      	mov	r8, r1
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	290a      	cmp	r1, #10
 800280a:	dd00      	ble.n	800280e <__aeabi_dmul+0x266>
 800280c:	e752      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800280e:	465a      	mov	r2, fp
 8002810:	2000      	movs	r0, #0
 8002812:	9900      	ldr	r1, [sp, #0]
 8002814:	0004      	movs	r4, r0
 8002816:	404a      	eors	r2, r1
 8002818:	4693      	mov	fp, r2
 800281a:	2602      	movs	r6, #2
 800281c:	e70b      	b.n	8002636 <__aeabi_dmul+0x8e>
 800281e:	220c      	movs	r2, #12
 8002820:	001d      	movs	r5, r3
 8002822:	2303      	movs	r3, #3
 8002824:	4681      	mov	r9, r0
 8002826:	4690      	mov	r8, r2
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	e6e3      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800282c:	2300      	movs	r3, #0
 800282e:	469a      	mov	sl, r3
 8002830:	3304      	adds	r3, #4
 8002832:	4698      	mov	r8, r3
 8002834:	3b03      	subs	r3, #3
 8002836:	2500      	movs	r5, #0
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	e6db      	b.n	80025f4 <__aeabi_dmul+0x4c>
 800283c:	4642      	mov	r2, r8
 800283e:	3301      	adds	r3, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	002b      	movs	r3, r5
 8002844:	4690      	mov	r8, r2
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	4642      	mov	r2, r8
 800284c:	2400      	movs	r4, #0
 800284e:	2000      	movs	r0, #0
 8002850:	2601      	movs	r6, #1
 8002852:	2a0a      	cmp	r2, #10
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dmul+0x2b0>
 8002856:	e6ea      	b.n	800262e <__aeabi_dmul+0x86>
 8002858:	e72c      	b.n	80026b4 <__aeabi_dmul+0x10c>
 800285a:	2201      	movs	r2, #1
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	2a38      	cmp	r2, #56	@ 0x38
 8002860:	dd00      	ble.n	8002864 <__aeabi_dmul+0x2bc>
 8002862:	e6f4      	b.n	800264e <__aeabi_dmul+0xa6>
 8002864:	2a1f      	cmp	r2, #31
 8002866:	dc00      	bgt.n	800286a <__aeabi_dmul+0x2c2>
 8002868:	e12a      	b.n	8002ac0 <__aeabi_dmul+0x518>
 800286a:	211f      	movs	r1, #31
 800286c:	4249      	negs	r1, r1
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	0021      	movs	r1, r4
 8002872:	40d9      	lsrs	r1, r3
 8002874:	000b      	movs	r3, r1
 8002876:	2a20      	cmp	r2, #32
 8002878:	d005      	beq.n	8002886 <__aeabi_dmul+0x2de>
 800287a:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <__aeabi_dmul+0x32c>)
 800287c:	9d01      	ldr	r5, [sp, #4]
 800287e:	4694      	mov	ip, r2
 8002880:	4465      	add	r5, ip
 8002882:	40ac      	lsls	r4, r5
 8002884:	4320      	orrs	r0, r4
 8002886:	1e42      	subs	r2, r0, #1
 8002888:	4190      	sbcs	r0, r2
 800288a:	4318      	orrs	r0, r3
 800288c:	2307      	movs	r3, #7
 800288e:	0019      	movs	r1, r3
 8002890:	2400      	movs	r4, #0
 8002892:	4001      	ands	r1, r0
 8002894:	4203      	tst	r3, r0
 8002896:	d00c      	beq.n	80028b2 <__aeabi_dmul+0x30a>
 8002898:	230f      	movs	r3, #15
 800289a:	4003      	ands	r3, r0
 800289c:	2b04      	cmp	r3, #4
 800289e:	d100      	bne.n	80028a2 <__aeabi_dmul+0x2fa>
 80028a0:	e140      	b.n	8002b24 <__aeabi_dmul+0x57c>
 80028a2:	1d03      	adds	r3, r0, #4
 80028a4:	4283      	cmp	r3, r0
 80028a6:	41a4      	sbcs	r4, r4
 80028a8:	0018      	movs	r0, r3
 80028aa:	4264      	negs	r4, r4
 80028ac:	0761      	lsls	r1, r4, #29
 80028ae:	0264      	lsls	r4, r4, #9
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	08c2      	lsrs	r2, r0, #3
 80028b4:	2300      	movs	r3, #0
 80028b6:	430a      	orrs	r2, r1
 80028b8:	e6cc      	b.n	8002654 <__aeabi_dmul+0xac>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000007ff 	.word	0x000007ff
 80028c0:	fffffc01 	.word	0xfffffc01
 80028c4:	000003ff 	.word	0x000003ff
 80028c8:	feffffff 	.word	0xfeffffff
 80028cc:	000007fe 	.word	0x000007fe
 80028d0:	fffffc0d 	.word	0xfffffc0d
 80028d4:	0000043e 	.word	0x0000043e
 80028d8:	4649      	mov	r1, r9
 80028da:	464a      	mov	r2, r9
 80028dc:	0409      	lsls	r1, r1, #16
 80028de:	0c09      	lsrs	r1, r1, #16
 80028e0:	000d      	movs	r5, r1
 80028e2:	0c16      	lsrs	r6, r2, #16
 80028e4:	0c02      	lsrs	r2, r0, #16
 80028e6:	0400      	lsls	r0, r0, #16
 80028e8:	0c00      	lsrs	r0, r0, #16
 80028ea:	4345      	muls	r5, r0
 80028ec:	46ac      	mov	ip, r5
 80028ee:	0005      	movs	r5, r0
 80028f0:	4375      	muls	r5, r6
 80028f2:	46a8      	mov	r8, r5
 80028f4:	0015      	movs	r5, r2
 80028f6:	000f      	movs	r7, r1
 80028f8:	4375      	muls	r5, r6
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	9502      	str	r5, [sp, #8]
 80028fe:	002a      	movs	r2, r5
 8002900:	9d00      	ldr	r5, [sp, #0]
 8002902:	436f      	muls	r7, r5
 8002904:	4665      	mov	r5, ip
 8002906:	0c2d      	lsrs	r5, r5, #16
 8002908:	46a9      	mov	r9, r5
 800290a:	4447      	add	r7, r8
 800290c:	444f      	add	r7, r9
 800290e:	45b8      	cmp	r8, r7
 8002910:	d905      	bls.n	800291e <__aeabi_dmul+0x376>
 8002912:	0015      	movs	r5, r2
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0252      	lsls	r2, r2, #9
 8002918:	4690      	mov	r8, r2
 800291a:	4445      	add	r5, r8
 800291c:	9502      	str	r5, [sp, #8]
 800291e:	0c3d      	lsrs	r5, r7, #16
 8002920:	9503      	str	r5, [sp, #12]
 8002922:	4665      	mov	r5, ip
 8002924:	042d      	lsls	r5, r5, #16
 8002926:	043f      	lsls	r7, r7, #16
 8002928:	0c2d      	lsrs	r5, r5, #16
 800292a:	46ac      	mov	ip, r5
 800292c:	003d      	movs	r5, r7
 800292e:	4465      	add	r5, ip
 8002930:	9504      	str	r5, [sp, #16]
 8002932:	0c25      	lsrs	r5, r4, #16
 8002934:	0424      	lsls	r4, r4, #16
 8002936:	0c24      	lsrs	r4, r4, #16
 8002938:	46ac      	mov	ip, r5
 800293a:	0025      	movs	r5, r4
 800293c:	4375      	muls	r5, r6
 800293e:	46a8      	mov	r8, r5
 8002940:	4665      	mov	r5, ip
 8002942:	000f      	movs	r7, r1
 8002944:	4369      	muls	r1, r5
 8002946:	4441      	add	r1, r8
 8002948:	4689      	mov	r9, r1
 800294a:	4367      	muls	r7, r4
 800294c:	0c39      	lsrs	r1, r7, #16
 800294e:	4449      	add	r1, r9
 8002950:	436e      	muls	r6, r5
 8002952:	4588      	cmp	r8, r1
 8002954:	d903      	bls.n	800295e <__aeabi_dmul+0x3b6>
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	0252      	lsls	r2, r2, #9
 800295a:	4690      	mov	r8, r2
 800295c:	4446      	add	r6, r8
 800295e:	0c0d      	lsrs	r5, r1, #16
 8002960:	46a8      	mov	r8, r5
 8002962:	0035      	movs	r5, r6
 8002964:	4445      	add	r5, r8
 8002966:	9505      	str	r5, [sp, #20]
 8002968:	9d03      	ldr	r5, [sp, #12]
 800296a:	043f      	lsls	r7, r7, #16
 800296c:	46a8      	mov	r8, r5
 800296e:	0c3f      	lsrs	r7, r7, #16
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	19c9      	adds	r1, r1, r7
 8002974:	4488      	add	r8, r1
 8002976:	4645      	mov	r5, r8
 8002978:	9503      	str	r5, [sp, #12]
 800297a:	4655      	mov	r5, sl
 800297c:	042e      	lsls	r6, r5, #16
 800297e:	0c36      	lsrs	r6, r6, #16
 8002980:	0c2f      	lsrs	r7, r5, #16
 8002982:	0035      	movs	r5, r6
 8002984:	4345      	muls	r5, r0
 8002986:	4378      	muls	r0, r7
 8002988:	4681      	mov	r9, r0
 800298a:	0038      	movs	r0, r7
 800298c:	46a8      	mov	r8, r5
 800298e:	0c2d      	lsrs	r5, r5, #16
 8002990:	46aa      	mov	sl, r5
 8002992:	9a00      	ldr	r2, [sp, #0]
 8002994:	4350      	muls	r0, r2
 8002996:	4372      	muls	r2, r6
 8002998:	444a      	add	r2, r9
 800299a:	4452      	add	r2, sl
 800299c:	4591      	cmp	r9, r2
 800299e:	d903      	bls.n	80029a8 <__aeabi_dmul+0x400>
 80029a0:	2580      	movs	r5, #128	@ 0x80
 80029a2:	026d      	lsls	r5, r5, #9
 80029a4:	46a9      	mov	r9, r5
 80029a6:	4448      	add	r0, r9
 80029a8:	0c15      	lsrs	r5, r2, #16
 80029aa:	46a9      	mov	r9, r5
 80029ac:	4645      	mov	r5, r8
 80029ae:	042d      	lsls	r5, r5, #16
 80029b0:	0c2d      	lsrs	r5, r5, #16
 80029b2:	46a8      	mov	r8, r5
 80029b4:	4665      	mov	r5, ip
 80029b6:	437d      	muls	r5, r7
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	4448      	add	r0, r9
 80029bc:	4490      	add	r8, r2
 80029be:	46a9      	mov	r9, r5
 80029c0:	0032      	movs	r2, r6
 80029c2:	4665      	mov	r5, ip
 80029c4:	4362      	muls	r2, r4
 80029c6:	436e      	muls	r6, r5
 80029c8:	437c      	muls	r4, r7
 80029ca:	0c17      	lsrs	r7, r2, #16
 80029cc:	1936      	adds	r6, r6, r4
 80029ce:	19bf      	adds	r7, r7, r6
 80029d0:	42bc      	cmp	r4, r7
 80029d2:	d903      	bls.n	80029dc <__aeabi_dmul+0x434>
 80029d4:	2480      	movs	r4, #128	@ 0x80
 80029d6:	0264      	lsls	r4, r4, #9
 80029d8:	46a4      	mov	ip, r4
 80029da:	44e1      	add	r9, ip
 80029dc:	9c02      	ldr	r4, [sp, #8]
 80029de:	9e03      	ldr	r6, [sp, #12]
 80029e0:	46a4      	mov	ip, r4
 80029e2:	9d05      	ldr	r5, [sp, #20]
 80029e4:	4466      	add	r6, ip
 80029e6:	428e      	cmp	r6, r1
 80029e8:	4189      	sbcs	r1, r1
 80029ea:	46ac      	mov	ip, r5
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	043c      	lsls	r4, r7, #16
 80029f0:	0c12      	lsrs	r2, r2, #16
 80029f2:	18a2      	adds	r2, r4, r2
 80029f4:	4462      	add	r2, ip
 80029f6:	4249      	negs	r1, r1
 80029f8:	1854      	adds	r4, r2, r1
 80029fa:	4446      	add	r6, r8
 80029fc:	46a4      	mov	ip, r4
 80029fe:	4546      	cmp	r6, r8
 8002a00:	41a4      	sbcs	r4, r4
 8002a02:	4682      	mov	sl, r0
 8002a04:	4264      	negs	r4, r4
 8002a06:	46a0      	mov	r8, r4
 8002a08:	42aa      	cmp	r2, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	458c      	cmp	ip, r1
 8002a0e:	4189      	sbcs	r1, r1
 8002a10:	44e2      	add	sl, ip
 8002a12:	44d0      	add	r8, sl
 8002a14:	4249      	negs	r1, r1
 8002a16:	4252      	negs	r2, r2
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	45a0      	cmp	r8, r4
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4582      	cmp	sl, r0
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	4264      	negs	r4, r4
 8002a24:	4249      	negs	r1, r1
 8002a26:	430c      	orrs	r4, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	0c3f      	lsrs	r7, r7, #16
 8002a2c:	19d2      	adds	r2, r2, r7
 8002a2e:	1912      	adds	r2, r2, r4
 8002a30:	0dcc      	lsrs	r4, r1, #23
 8002a32:	9904      	ldr	r1, [sp, #16]
 8002a34:	0270      	lsls	r0, r6, #9
 8002a36:	4308      	orrs	r0, r1
 8002a38:	1e41      	subs	r1, r0, #1
 8002a3a:	4188      	sbcs	r0, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	444a      	add	r2, r9
 8002a40:	0df6      	lsrs	r6, r6, #23
 8002a42:	0252      	lsls	r2, r2, #9
 8002a44:	4330      	orrs	r0, r6
 8002a46:	0249      	lsls	r1, r1, #9
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	01d2      	lsls	r2, r2, #7
 8002a4e:	d535      	bpl.n	8002abc <__aeabi_dmul+0x514>
 8002a50:	2201      	movs	r2, #1
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4002      	ands	r2, r0
 8002a56:	4313      	orrs	r3, r2
 8002a58:	07e0      	lsls	r0, r4, #31
 8002a5a:	4318      	orrs	r0, r3
 8002a5c:	0864      	lsrs	r4, r4, #1
 8002a5e:	e634      	b.n	80026ca <__aeabi_dmul+0x122>
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	46a2      	mov	sl, r4
 8002a64:	469b      	mov	fp, r3
 8002a66:	4681      	mov	r9, r0
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	0324      	lsls	r4, r4, #12
 8002a6e:	431c      	orrs	r4, r3
 8002a70:	0324      	lsls	r4, r4, #12
 8002a72:	464a      	mov	r2, r9
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002a76:	0b24      	lsrs	r4, r4, #12
 8002a78:	e5ec      	b.n	8002654 <__aeabi_dmul+0xac>
 8002a7a:	f000 fd75 	bl	8003568 <__clzsi2>
 8002a7e:	2315      	movs	r3, #21
 8002a80:	469c      	mov	ip, r3
 8002a82:	4484      	add	ip, r0
 8002a84:	0002      	movs	r2, r0
 8002a86:	4663      	mov	r3, ip
 8002a88:	3220      	adds	r2, #32
 8002a8a:	2b1c      	cmp	r3, #28
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x4e8>
 8002a8e:	e684      	b.n	800279a <__aeabi_dmul+0x1f2>
 8002a90:	2300      	movs	r3, #0
 8002a92:	4699      	mov	r9, r3
 8002a94:	0023      	movs	r3, r4
 8002a96:	3808      	subs	r0, #8
 8002a98:	4083      	lsls	r3, r0
 8002a9a:	469a      	mov	sl, r3
 8002a9c:	e68e      	b.n	80027bc <__aeabi_dmul+0x214>
 8002a9e:	f000 fd63 	bl	8003568 <__clzsi2>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3215      	adds	r2, #21
 8002aa8:	3320      	adds	r3, #32
 8002aaa:	2a1c      	cmp	r2, #28
 8002aac:	dc00      	bgt.n	8002ab0 <__aeabi_dmul+0x508>
 8002aae:	e64e      	b.n	800274e <__aeabi_dmul+0x1a6>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	0034      	movs	r4, r6
 8002ab4:	3a08      	subs	r2, #8
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4094      	lsls	r4, r2
 8002aba:	e652      	b.n	8002762 <__aeabi_dmul+0x1ba>
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	e604      	b.n	80026ca <__aeabi_dmul+0x122>
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <__aeabi_dmul+0x58c>)
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	469c      	mov	ip, r3
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	9d01      	ldr	r5, [sp, #4]
 8002aca:	40d3      	lsrs	r3, r2
 8002acc:	4465      	add	r5, ip
 8002ace:	40a9      	lsls	r1, r5
 8002ad0:	4319      	orrs	r1, r3
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	40ab      	lsls	r3, r5
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	4183      	sbcs	r3, r0
 8002ada:	4319      	orrs	r1, r3
 8002adc:	0008      	movs	r0, r1
 8002ade:	40d4      	lsrs	r4, r2
 8002ae0:	074b      	lsls	r3, r1, #29
 8002ae2:	d009      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d005      	beq.n	8002af8 <__aeabi_dmul+0x550>
 8002aec:	1d0b      	adds	r3, r1, #4
 8002aee:	428b      	cmp	r3, r1
 8002af0:	4180      	sbcs	r0, r0
 8002af2:	4240      	negs	r0, r0
 8002af4:	1824      	adds	r4, r4, r0
 8002af6:	0018      	movs	r0, r3
 8002af8:	0223      	lsls	r3, r4, #8
 8002afa:	d400      	bmi.n	8002afe <__aeabi_dmul+0x556>
 8002afc:	e6d6      	b.n	80028ac <__aeabi_dmul+0x304>
 8002afe:	2301      	movs	r3, #1
 8002b00:	2400      	movs	r4, #0
 8002b02:	2200      	movs	r2, #0
 8002b04:	e5a6      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b06:	290f      	cmp	r1, #15
 8002b08:	d1aa      	bne.n	8002a60 <__aeabi_dmul+0x4b8>
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	421a      	tst	r2, r3
 8002b12:	d0a9      	beq.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b14:	421c      	tst	r4, r3
 8002b16:	d1a7      	bne.n	8002a68 <__aeabi_dmul+0x4c0>
 8002b18:	431c      	orrs	r4, r3
 8002b1a:	9b00      	ldr	r3, [sp, #0]
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	469b      	mov	fp, r3
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b22:	e597      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b24:	2400      	movs	r4, #0
 8002b26:	e6c1      	b.n	80028ac <__aeabi_dmul+0x304>
 8002b28:	2400      	movs	r4, #0
 8002b2a:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <__aeabi_dmul+0x588>)
 8002b2c:	0022      	movs	r2, r4
 8002b2e:	e591      	b.n	8002654 <__aeabi_dmul+0xac>
 8002b30:	000007ff 	.word	0x000007ff
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_dsub>:
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	464e      	mov	r6, r9
 8002b3c:	4645      	mov	r5, r8
 8002b3e:	46de      	mov	lr, fp
 8002b40:	4657      	mov	r7, sl
 8002b42:	b5e0      	push	{r5, r6, r7, lr}
 8002b44:	b085      	sub	sp, #20
 8002b46:	9000      	str	r0, [sp, #0]
 8002b48:	9101      	str	r1, [sp, #4]
 8002b4a:	030c      	lsls	r4, r1, #12
 8002b4c:	004f      	lsls	r7, r1, #1
 8002b4e:	0fce      	lsrs	r6, r1, #31
 8002b50:	0a61      	lsrs	r1, r4, #9
 8002b52:	9c00      	ldr	r4, [sp, #0]
 8002b54:	46b0      	mov	r8, r6
 8002b56:	0f64      	lsrs	r4, r4, #29
 8002b58:	430c      	orrs	r4, r1
 8002b5a:	9900      	ldr	r1, [sp, #0]
 8002b5c:	0d7f      	lsrs	r7, r7, #21
 8002b5e:	00c8      	lsls	r0, r1, #3
 8002b60:	0011      	movs	r1, r2
 8002b62:	001a      	movs	r2, r3
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	469c      	mov	ip, r3
 8002b68:	9100      	str	r1, [sp, #0]
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	0051      	lsls	r1, r2, #1
 8002b6e:	0d4b      	lsrs	r3, r1, #21
 8002b70:	4699      	mov	r9, r3
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	9d00      	ldr	r5, [sp, #0]
 8002b76:	0fd9      	lsrs	r1, r3, #31
 8002b78:	4663      	mov	r3, ip
 8002b7a:	0f6a      	lsrs	r2, r5, #29
 8002b7c:	0a5b      	lsrs	r3, r3, #9
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	00ea      	lsls	r2, r5, #3
 8002b82:	4694      	mov	ip, r2
 8002b84:	4693      	mov	fp, r2
 8002b86:	4ac1      	ldr	r2, [pc, #772]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002b88:	9003      	str	r0, [sp, #12]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	4591      	cmp	r9, r2
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x5a>
 8002b90:	e0cd      	b.n	8002d2e <__aeabi_dsub+0x1f6>
 8002b92:	2501      	movs	r5, #1
 8002b94:	4069      	eors	r1, r5
 8002b96:	464d      	mov	r5, r9
 8002b98:	1b7d      	subs	r5, r7, r5
 8002b9a:	46aa      	mov	sl, r5
 8002b9c:	428e      	cmp	r6, r1
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x6a>
 8002ba0:	e080      	b.n	8002ca4 <__aeabi_dsub+0x16c>
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	dc00      	bgt.n	8002ba8 <__aeabi_dsub+0x70>
 8002ba6:	e335      	b.n	8003214 <__aeabi_dsub+0x6dc>
 8002ba8:	4649      	mov	r1, r9
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x78>
 8002bae:	e0df      	b.n	8002d70 <__aeabi_dsub+0x238>
 8002bb0:	4297      	cmp	r7, r2
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x7e>
 8002bb4:	e194      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	2501      	movs	r5, #1
 8002bba:	2a38      	cmp	r2, #56	@ 0x38
 8002bbc:	dc19      	bgt.n	8002bf2 <__aeabi_dsub+0xba>
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	9b02      	ldr	r3, [sp, #8]
 8002bc2:	0412      	lsls	r2, r2, #16
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	4652      	mov	r2, sl
 8002bca:	2a1f      	cmp	r2, #31
 8002bcc:	dd00      	ble.n	8002bd0 <__aeabi_dsub+0x98>
 8002bce:	e1e3      	b.n	8002f98 <__aeabi_dsub+0x460>
 8002bd0:	4653      	mov	r3, sl
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	4661      	mov	r1, ip
 8002bd6:	9d02      	ldr	r5, [sp, #8]
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	4095      	lsls	r5, r2
 8002bdc:	40d9      	lsrs	r1, r3
 8002bde:	430d      	orrs	r5, r1
 8002be0:	4661      	mov	r1, ip
 8002be2:	4091      	lsls	r1, r2
 8002be4:	000a      	movs	r2, r1
 8002be6:	1e51      	subs	r1, r2, #1
 8002be8:	418a      	sbcs	r2, r1
 8002bea:	4315      	orrs	r5, r2
 8002bec:	9a02      	ldr	r2, [sp, #8]
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	1aa4      	subs	r4, r4, r2
 8002bf2:	1b45      	subs	r5, r0, r5
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	4180      	sbcs	r0, r0
 8002bf8:	4240      	negs	r0, r0
 8002bfa:	1a24      	subs	r4, r4, r0
 8002bfc:	0223      	lsls	r3, r4, #8
 8002bfe:	d400      	bmi.n	8002c02 <__aeabi_dsub+0xca>
 8002c00:	e13d      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002c02:	0264      	lsls	r4, r4, #9
 8002c04:	0a64      	lsrs	r4, r4, #9
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0xd4>
 8002c0a:	e147      	b.n	8002e9c <__aeabi_dsub+0x364>
 8002c0c:	0020      	movs	r0, r4
 8002c0e:	f000 fcab 	bl	8003568 <__clzsi2>
 8002c12:	0003      	movs	r3, r0
 8002c14:	3b08      	subs	r3, #8
 8002c16:	2120      	movs	r1, #32
 8002c18:	0028      	movs	r0, r5
 8002c1a:	1aca      	subs	r2, r1, r3
 8002c1c:	40d0      	lsrs	r0, r2
 8002c1e:	409c      	lsls	r4, r3
 8002c20:	0002      	movs	r2, r0
 8002c22:	409d      	lsls	r5, r3
 8002c24:	4322      	orrs	r2, r4
 8002c26:	429f      	cmp	r7, r3
 8002c28:	dd00      	ble.n	8002c2c <__aeabi_dsub+0xf4>
 8002c2a:	e177      	b.n	8002f1c <__aeabi_dsub+0x3e4>
 8002c2c:	1bd8      	subs	r0, r3, r7
 8002c2e:	3001      	adds	r0, #1
 8002c30:	1a09      	subs	r1, r1, r0
 8002c32:	002c      	movs	r4, r5
 8002c34:	408d      	lsls	r5, r1
 8002c36:	40c4      	lsrs	r4, r0
 8002c38:	1e6b      	subs	r3, r5, #1
 8002c3a:	419d      	sbcs	r5, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	40c2      	lsrs	r2, r0
 8002c40:	408b      	lsls	r3, r1
 8002c42:	4325      	orrs	r5, r4
 8002c44:	2700      	movs	r7, #0
 8002c46:	0014      	movs	r4, r2
 8002c48:	431d      	orrs	r5, r3
 8002c4a:	076b      	lsls	r3, r5, #29
 8002c4c:	d009      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c4e:	230f      	movs	r3, #15
 8002c50:	402b      	ands	r3, r5
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d005      	beq.n	8002c62 <__aeabi_dsub+0x12a>
 8002c56:	1d2b      	adds	r3, r5, #4
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	41ad      	sbcs	r5, r5
 8002c5c:	426d      	negs	r5, r5
 8002c5e:	1964      	adds	r4, r4, r5
 8002c60:	001d      	movs	r5, r3
 8002c62:	0223      	lsls	r3, r4, #8
 8002c64:	d400      	bmi.n	8002c68 <__aeabi_dsub+0x130>
 8002c66:	e140      	b.n	8002eea <__aeabi_dsub+0x3b2>
 8002c68:	4a88      	ldr	r2, [pc, #544]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002c6a:	3701      	adds	r7, #1
 8002c6c:	4297      	cmp	r7, r2
 8002c6e:	d100      	bne.n	8002c72 <__aeabi_dsub+0x13a>
 8002c70:	e101      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002c72:	2601      	movs	r6, #1
 8002c74:	4643      	mov	r3, r8
 8002c76:	4986      	ldr	r1, [pc, #536]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002c78:	08ed      	lsrs	r5, r5, #3
 8002c7a:	4021      	ands	r1, r4
 8002c7c:	074a      	lsls	r2, r1, #29
 8002c7e:	432a      	orrs	r2, r5
 8002c80:	057c      	lsls	r4, r7, #21
 8002c82:	024d      	lsls	r5, r1, #9
 8002c84:	0b2d      	lsrs	r5, r5, #12
 8002c86:	0d64      	lsrs	r4, r4, #21
 8002c88:	401e      	ands	r6, r3
 8002c8a:	0524      	lsls	r4, r4, #20
 8002c8c:	432c      	orrs	r4, r5
 8002c8e:	07f6      	lsls	r6, r6, #31
 8002c90:	4334      	orrs	r4, r6
 8002c92:	0010      	movs	r0, r2
 8002c94:	0021      	movs	r1, r4
 8002c96:	b005      	add	sp, #20
 8002c98:	bcf0      	pop	{r4, r5, r6, r7}
 8002c9a:	46bb      	mov	fp, r7
 8002c9c:	46b2      	mov	sl, r6
 8002c9e:	46a9      	mov	r9, r5
 8002ca0:	46a0      	mov	r8, r4
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	dc00      	bgt.n	8002caa <__aeabi_dsub+0x172>
 8002ca8:	e2d0      	b.n	800324c <__aeabi_dsub+0x714>
 8002caa:	4649      	mov	r1, r9
 8002cac:	2900      	cmp	r1, #0
 8002cae:	d000      	beq.n	8002cb2 <__aeabi_dsub+0x17a>
 8002cb0:	e0d4      	b.n	8002e5c <__aeabi_dsub+0x324>
 8002cb2:	4661      	mov	r1, ip
 8002cb4:	9b02      	ldr	r3, [sp, #8]
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x184>
 8002cba:	e12b      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002cbc:	1e69      	subs	r1, r5, #1
 8002cbe:	2d01      	cmp	r5, #1
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x18c>
 8002cc2:	e1d9      	b.n	8003078 <__aeabi_dsub+0x540>
 8002cc4:	4295      	cmp	r5, r2
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x192>
 8002cc8:	e10a      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002cca:	2501      	movs	r5, #1
 8002ccc:	2938      	cmp	r1, #56	@ 0x38
 8002cce:	dc17      	bgt.n	8002d00 <__aeabi_dsub+0x1c8>
 8002cd0:	468a      	mov	sl, r1
 8002cd2:	4653      	mov	r3, sl
 8002cd4:	2b1f      	cmp	r3, #31
 8002cd6:	dd00      	ble.n	8002cda <__aeabi_dsub+0x1a2>
 8002cd8:	e1e7      	b.n	80030aa <__aeabi_dsub+0x572>
 8002cda:	2220      	movs	r2, #32
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	4661      	mov	r1, ip
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	001d      	movs	r5, r3
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	4663      	mov	r3, ip
 8002cec:	4093      	lsls	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	430d      	orrs	r5, r1
 8002cf2:	1e51      	subs	r1, r2, #1
 8002cf4:	418a      	sbcs	r2, r1
 8002cf6:	4653      	mov	r3, sl
 8002cf8:	4315      	orrs	r5, r2
 8002cfa:	9a02      	ldr	r2, [sp, #8]
 8002cfc:	40da      	lsrs	r2, r3
 8002cfe:	18a4      	adds	r4, r4, r2
 8002d00:	182d      	adds	r5, r5, r0
 8002d02:	4285      	cmp	r5, r0
 8002d04:	4180      	sbcs	r0, r0
 8002d06:	4240      	negs	r0, r0
 8002d08:	1824      	adds	r4, r4, r0
 8002d0a:	0223      	lsls	r3, r4, #8
 8002d0c:	d400      	bmi.n	8002d10 <__aeabi_dsub+0x1d8>
 8002d0e:	e0b6      	b.n	8002e7e <__aeabi_dsub+0x346>
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d12:	3701      	adds	r7, #1
 8002d14:	429f      	cmp	r7, r3
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x1e2>
 8002d18:	e0ad      	b.n	8002e76 <__aeabi_dsub+0x33e>
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <__aeabi_dsub+0x358>)
 8002d1e:	086a      	lsrs	r2, r5, #1
 8002d20:	401c      	ands	r4, r3
 8002d22:	4029      	ands	r1, r5
 8002d24:	430a      	orrs	r2, r1
 8002d26:	07e5      	lsls	r5, r4, #31
 8002d28:	4315      	orrs	r5, r2
 8002d2a:	0864      	lsrs	r4, r4, #1
 8002d2c:	e78d      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002d2e:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <__aeabi_dsub+0x35c>)
 8002d30:	9b02      	ldr	r3, [sp, #8]
 8002d32:	4692      	mov	sl, r2
 8002d34:	4662      	mov	r2, ip
 8002d36:	44ba      	add	sl, r7
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	d02c      	beq.n	8002d96 <__aeabi_dsub+0x25e>
 8002d3c:	428e      	cmp	r6, r1
 8002d3e:	d02e      	beq.n	8002d9e <__aeabi_dsub+0x266>
 8002d40:	4652      	mov	r2, sl
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d060      	beq.n	8002e08 <__aeabi_dsub+0x2d0>
 8002d46:	2f00      	cmp	r7, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x214>
 8002d4a:	e0db      	b.n	8002f04 <__aeabi_dsub+0x3cc>
 8002d4c:	4663      	mov	r3, ip
 8002d4e:	000e      	movs	r6, r1
 8002d50:	9c02      	ldr	r4, [sp, #8]
 8002d52:	08d8      	lsrs	r0, r3, #3
 8002d54:	0762      	lsls	r2, r4, #29
 8002d56:	4302      	orrs	r2, r0
 8002d58:	08e4      	lsrs	r4, r4, #3
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x22a>
 8002d60:	e254      	b.n	800320c <__aeabi_dsub+0x6d4>
 8002d62:	2580      	movs	r5, #128	@ 0x80
 8002d64:	032d      	lsls	r5, r5, #12
 8002d66:	4325      	orrs	r5, r4
 8002d68:	032d      	lsls	r5, r5, #12
 8002d6a:	4c48      	ldr	r4, [pc, #288]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002d6c:	0b2d      	lsrs	r5, r5, #12
 8002d6e:	e78c      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002d70:	4661      	mov	r1, ip
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4319      	orrs	r1, r3
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x242>
 8002d78:	e0cc      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002d7a:	0029      	movs	r1, r5
 8002d7c:	3901      	subs	r1, #1
 8002d7e:	2d01      	cmp	r5, #1
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x24c>
 8002d82:	e188      	b.n	8003096 <__aeabi_dsub+0x55e>
 8002d84:	4295      	cmp	r5, r2
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x252>
 8002d88:	e0aa      	b.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002d8a:	2501      	movs	r5, #1
 8002d8c:	2938      	cmp	r1, #56	@ 0x38
 8002d8e:	dd00      	ble.n	8002d92 <__aeabi_dsub+0x25a>
 8002d90:	e72f      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002d92:	468a      	mov	sl, r1
 8002d94:	e718      	b.n	8002bc8 <__aeabi_dsub+0x90>
 8002d96:	2201      	movs	r2, #1
 8002d98:	4051      	eors	r1, r2
 8002d9a:	428e      	cmp	r6, r1
 8002d9c:	d1d0      	bne.n	8002d40 <__aeabi_dsub+0x208>
 8002d9e:	4653      	mov	r3, sl
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x26e>
 8002da4:	e0be      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x274>
 8002daa:	e138      	b.n	800301e <__aeabi_dsub+0x4e6>
 8002dac:	46ca      	mov	sl, r9
 8002dae:	0022      	movs	r2, r4
 8002db0:	4302      	orrs	r2, r0
 8002db2:	d100      	bne.n	8002db6 <__aeabi_dsub+0x27e>
 8002db4:	e1e2      	b.n	800317c <__aeabi_dsub+0x644>
 8002db6:	4653      	mov	r3, sl
 8002db8:	1e59      	subs	r1, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x288>
 8002dbe:	e20d      	b.n	80031dc <__aeabi_dsub+0x6a4>
 8002dc0:	4a32      	ldr	r2, [pc, #200]	@ (8002e8c <__aeabi_dsub+0x354>)
 8002dc2:	4592      	cmp	sl, r2
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x290>
 8002dc6:	e1d2      	b.n	800316e <__aeabi_dsub+0x636>
 8002dc8:	2701      	movs	r7, #1
 8002dca:	2938      	cmp	r1, #56	@ 0x38
 8002dcc:	dc13      	bgt.n	8002df6 <__aeabi_dsub+0x2be>
 8002dce:	291f      	cmp	r1, #31
 8002dd0:	dd00      	ble.n	8002dd4 <__aeabi_dsub+0x29c>
 8002dd2:	e1ee      	b.n	80031b2 <__aeabi_dsub+0x67a>
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	1a52      	subs	r2, r2, r1
 8002dda:	0025      	movs	r5, r4
 8002ddc:	0007      	movs	r7, r0
 8002dde:	469a      	mov	sl, r3
 8002de0:	40cc      	lsrs	r4, r1
 8002de2:	4090      	lsls	r0, r2
 8002de4:	4095      	lsls	r5, r2
 8002de6:	40cf      	lsrs	r7, r1
 8002de8:	44a2      	add	sl, r4
 8002dea:	1e42      	subs	r2, r0, #1
 8002dec:	4190      	sbcs	r0, r2
 8002dee:	4653      	mov	r3, sl
 8002df0:	432f      	orrs	r7, r5
 8002df2:	4307      	orrs	r7, r0
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	003d      	movs	r5, r7
 8002df8:	4465      	add	r5, ip
 8002dfa:	4565      	cmp	r5, ip
 8002dfc:	4192      	sbcs	r2, r2
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	4252      	negs	r2, r2
 8002e02:	464f      	mov	r7, r9
 8002e04:	18d4      	adds	r4, r2, r3
 8002e06:	e780      	b.n	8002d0a <__aeabi_dsub+0x1d2>
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <__aeabi_dsub+0x360>)
 8002e0a:	1c7d      	adds	r5, r7, #1
 8002e0c:	4215      	tst	r5, r2
 8002e0e:	d000      	beq.n	8002e12 <__aeabi_dsub+0x2da>
 8002e10:	e0aa      	b.n	8002f68 <__aeabi_dsub+0x430>
 8002e12:	4662      	mov	r2, ip
 8002e14:	0025      	movs	r5, r4
 8002e16:	9b02      	ldr	r3, [sp, #8]
 8002e18:	4305      	orrs	r5, r0
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	2f00      	cmp	r7, #0
 8002e1e:	d000      	beq.n	8002e22 <__aeabi_dsub+0x2ea>
 8002e20:	e0f5      	b.n	800300e <__aeabi_dsub+0x4d6>
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d100      	bne.n	8002e28 <__aeabi_dsub+0x2f0>
 8002e26:	e16b      	b.n	8003100 <__aeabi_dsub+0x5c8>
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x2f6>
 8002e2c:	e152      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002e2e:	4663      	mov	r3, ip
 8002e30:	1ac5      	subs	r5, r0, r3
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	1ae2      	subs	r2, r4, r3
 8002e36:	42a8      	cmp	r0, r5
 8002e38:	419b      	sbcs	r3, r3
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	d400      	bmi.n	8002e44 <__aeabi_dsub+0x30c>
 8002e42:	e1d5      	b.n	80031f0 <__aeabi_dsub+0x6b8>
 8002e44:	4663      	mov	r3, ip
 8002e46:	1a1d      	subs	r5, r3, r0
 8002e48:	45ac      	cmp	ip, r5
 8002e4a:	4192      	sbcs	r2, r2
 8002e4c:	2601      	movs	r6, #1
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	4252      	negs	r2, r2
 8002e52:	1b1c      	subs	r4, r3, r4
 8002e54:	4688      	mov	r8, r1
 8002e56:	1aa4      	subs	r4, r4, r2
 8002e58:	400e      	ands	r6, r1
 8002e5a:	e6f6      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002e5c:	4297      	cmp	r7, r2
 8002e5e:	d03f      	beq.n	8002ee0 <__aeabi_dsub+0x3a8>
 8002e60:	4652      	mov	r2, sl
 8002e62:	2501      	movs	r5, #1
 8002e64:	2a38      	cmp	r2, #56	@ 0x38
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0x332>
 8002e68:	e74a      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	9b02      	ldr	r3, [sp, #8]
 8002e6e:	0412      	lsls	r2, r2, #16
 8002e70:	4313      	orrs	r3, r2
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	e72d      	b.n	8002cd2 <__aeabi_dsub+0x19a>
 8002e76:	003c      	movs	r4, r7
 8002e78:	2500      	movs	r5, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	e705      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	402b      	ands	r3, r5
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d000      	beq.n	8002e88 <__aeabi_dsub+0x350>
 8002e86:	e6e2      	b.n	8002c4e <__aeabi_dsub+0x116>
 8002e88:	e06b      	b.n	8002f62 <__aeabi_dsub+0x42a>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	000007ff 	.word	0x000007ff
 8002e90:	ff7fffff 	.word	0xff7fffff
 8002e94:	fffff801 	.word	0xfffff801
 8002e98:	000007fe 	.word	0x000007fe
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f000 fb63 	bl	8003568 <__clzsi2>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	2b1f      	cmp	r3, #31
 8002ea8:	dc00      	bgt.n	8002eac <__aeabi_dsub+0x374>
 8002eaa:	e6b4      	b.n	8002c16 <__aeabi_dsub+0xde>
 8002eac:	002a      	movs	r2, r5
 8002eae:	3808      	subs	r0, #8
 8002eb0:	4082      	lsls	r2, r0
 8002eb2:	429f      	cmp	r7, r3
 8002eb4:	dd00      	ble.n	8002eb8 <__aeabi_dsub+0x380>
 8002eb6:	e0b9      	b.n	800302c <__aeabi_dsub+0x4f4>
 8002eb8:	1bdb      	subs	r3, r3, r7
 8002eba:	1c58      	adds	r0, r3, #1
 8002ebc:	281f      	cmp	r0, #31
 8002ebe:	dc00      	bgt.n	8002ec2 <__aeabi_dsub+0x38a>
 8002ec0:	e1a0      	b.n	8003204 <__aeabi_dsub+0x6cc>
 8002ec2:	0015      	movs	r5, r2
 8002ec4:	3b1f      	subs	r3, #31
 8002ec6:	40dd      	lsrs	r5, r3
 8002ec8:	2820      	cmp	r0, #32
 8002eca:	d005      	beq.n	8002ed8 <__aeabi_dsub+0x3a0>
 8002ecc:	2340      	movs	r3, #64	@ 0x40
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	1e53      	subs	r3, r2, #1
 8002ed4:	419a      	sbcs	r2, r3
 8002ed6:	4315      	orrs	r5, r2
 8002ed8:	2307      	movs	r3, #7
 8002eda:	2700      	movs	r7, #0
 8002edc:	402b      	ands	r3, r5
 8002ede:	e7d0      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8002ee0:	08c0      	lsrs	r0, r0, #3
 8002ee2:	0762      	lsls	r2, r4, #29
 8002ee4:	4302      	orrs	r2, r0
 8002ee6:	08e4      	lsrs	r4, r4, #3
 8002ee8:	e737      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002eea:	08ea      	lsrs	r2, r5, #3
 8002eec:	0763      	lsls	r3, r4, #29
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	4bd3      	ldr	r3, [pc, #844]	@ (8003240 <__aeabi_dsub+0x708>)
 8002ef2:	08e4      	lsrs	r4, r4, #3
 8002ef4:	429f      	cmp	r7, r3
 8002ef6:	d100      	bne.n	8002efa <__aeabi_dsub+0x3c2>
 8002ef8:	e72f      	b.n	8002d5a <__aeabi_dsub+0x222>
 8002efa:	0324      	lsls	r4, r4, #12
 8002efc:	0b25      	lsrs	r5, r4, #12
 8002efe:	057c      	lsls	r4, r7, #21
 8002f00:	0d64      	lsrs	r4, r4, #21
 8002f02:	e6c2      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f04:	46ca      	mov	sl, r9
 8002f06:	0022      	movs	r2, r4
 8002f08:	4302      	orrs	r2, r0
 8002f0a:	d158      	bne.n	8002fbe <__aeabi_dsub+0x486>
 8002f0c:	4663      	mov	r3, ip
 8002f0e:	000e      	movs	r6, r1
 8002f10:	9c02      	ldr	r4, [sp, #8]
 8002f12:	9303      	str	r3, [sp, #12]
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	4657      	mov	r7, sl
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	e7e7      	b.n	8002eec <__aeabi_dsub+0x3b4>
 8002f1c:	4cc9      	ldr	r4, [pc, #804]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f1e:	1aff      	subs	r7, r7, r3
 8002f20:	4014      	ands	r4, r2
 8002f22:	e692      	b.n	8002c4a <__aeabi_dsub+0x112>
 8002f24:	4dc8      	ldr	r5, [pc, #800]	@ (8003248 <__aeabi_dsub+0x710>)
 8002f26:	1c7a      	adds	r2, r7, #1
 8002f28:	422a      	tst	r2, r5
 8002f2a:	d000      	beq.n	8002f2e <__aeabi_dsub+0x3f6>
 8002f2c:	e084      	b.n	8003038 <__aeabi_dsub+0x500>
 8002f2e:	0022      	movs	r2, r4
 8002f30:	4302      	orrs	r2, r0
 8002f32:	2f00      	cmp	r7, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x400>
 8002f36:	e0ef      	b.n	8003118 <__aeabi_dsub+0x5e0>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x406>
 8002f3c:	e0e5      	b.n	800310a <__aeabi_dsub+0x5d2>
 8002f3e:	4662      	mov	r2, ip
 8002f40:	9902      	ldr	r1, [sp, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	d100      	bne.n	8002f48 <__aeabi_dsub+0x410>
 8002f46:	e0c5      	b.n	80030d4 <__aeabi_dsub+0x59c>
 8002f48:	4663      	mov	r3, ip
 8002f4a:	18c5      	adds	r5, r0, r3
 8002f4c:	468c      	mov	ip, r1
 8002f4e:	4285      	cmp	r5, r0
 8002f50:	4180      	sbcs	r0, r0
 8002f52:	4464      	add	r4, ip
 8002f54:	4240      	negs	r0, r0
 8002f56:	1824      	adds	r4, r4, r0
 8002f58:	0223      	lsls	r3, r4, #8
 8002f5a:	d502      	bpl.n	8002f62 <__aeabi_dsub+0x42a>
 8002f5c:	4bb9      	ldr	r3, [pc, #740]	@ (8003244 <__aeabi_dsub+0x70c>)
 8002f5e:	3701      	adds	r7, #1
 8002f60:	401c      	ands	r4, r3
 8002f62:	46ba      	mov	sl, r7
 8002f64:	9503      	str	r5, [sp, #12]
 8002f66:	e7d5      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8002f68:	4662      	mov	r2, ip
 8002f6a:	1a85      	subs	r5, r0, r2
 8002f6c:	42a8      	cmp	r0, r5
 8002f6e:	4192      	sbcs	r2, r2
 8002f70:	4252      	negs	r2, r2
 8002f72:	4691      	mov	r9, r2
 8002f74:	9b02      	ldr	r3, [sp, #8]
 8002f76:	1ae3      	subs	r3, r4, r3
 8002f78:	001a      	movs	r2, r3
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	0013      	movs	r3, r2
 8002f80:	4691      	mov	r9, r2
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	d46c      	bmi.n	8003060 <__aeabi_dsub+0x528>
 8002f86:	464a      	mov	r2, r9
 8002f88:	464c      	mov	r4, r9
 8002f8a:	432a      	orrs	r2, r5
 8002f8c:	d000      	beq.n	8002f90 <__aeabi_dsub+0x458>
 8002f8e:	e63a      	b.n	8002c06 <__aeabi_dsub+0xce>
 8002f90:	2600      	movs	r6, #0
 8002f92:	2400      	movs	r4, #0
 8002f94:	2500      	movs	r5, #0
 8002f96:	e678      	b.n	8002c8a <__aeabi_dsub+0x152>
 8002f98:	9902      	ldr	r1, [sp, #8]
 8002f9a:	4653      	mov	r3, sl
 8002f9c:	000d      	movs	r5, r1
 8002f9e:	3a20      	subs	r2, #32
 8002fa0:	40d5      	lsrs	r5, r2
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d006      	beq.n	8002fb4 <__aeabi_dsub+0x47c>
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	000b      	movs	r3, r1
 8002fac:	4093      	lsls	r3, r2
 8002fae:	4662      	mov	r2, ip
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	4693      	mov	fp, r2
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	4193      	sbcs	r3, r2
 8002fba:	431d      	orrs	r5, r3
 8002fbc:	e619      	b.n	8002bf2 <__aeabi_dsub+0xba>
 8002fbe:	4653      	mov	r3, sl
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d100      	bne.n	8002fc8 <__aeabi_dsub+0x490>
 8002fc6:	e0c6      	b.n	8003156 <__aeabi_dsub+0x61e>
 8002fc8:	4e9d      	ldr	r6, [pc, #628]	@ (8003240 <__aeabi_dsub+0x708>)
 8002fca:	45b2      	cmp	sl, r6
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x498>
 8002fce:	e6bd      	b.n	8002d4c <__aeabi_dsub+0x214>
 8002fd0:	4688      	mov	r8, r1
 8002fd2:	000e      	movs	r6, r1
 8002fd4:	2501      	movs	r5, #1
 8002fd6:	2a38      	cmp	r2, #56	@ 0x38
 8002fd8:	dc10      	bgt.n	8002ffc <__aeabi_dsub+0x4c4>
 8002fda:	2a1f      	cmp	r2, #31
 8002fdc:	dc7f      	bgt.n	80030de <__aeabi_dsub+0x5a6>
 8002fde:	2120      	movs	r1, #32
 8002fe0:	0025      	movs	r5, r4
 8002fe2:	1a89      	subs	r1, r1, r2
 8002fe4:	0007      	movs	r7, r0
 8002fe6:	4088      	lsls	r0, r1
 8002fe8:	408d      	lsls	r5, r1
 8002fea:	40d7      	lsrs	r7, r2
 8002fec:	40d4      	lsrs	r4, r2
 8002fee:	1e41      	subs	r1, r0, #1
 8002ff0:	4188      	sbcs	r0, r1
 8002ff2:	9b02      	ldr	r3, [sp, #8]
 8002ff4:	433d      	orrs	r5, r7
 8002ff6:	1b1b      	subs	r3, r3, r4
 8002ff8:	4305      	orrs	r5, r0
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1b55      	subs	r5, r2, r5
 8003000:	45ac      	cmp	ip, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	9b02      	ldr	r3, [sp, #8]
 8003006:	4252      	negs	r2, r2
 8003008:	464f      	mov	r7, r9
 800300a:	1a9c      	subs	r4, r3, r2
 800300c:	e5f6      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800300e:	2d00      	cmp	r5, #0
 8003010:	d000      	beq.n	8003014 <__aeabi_dsub+0x4dc>
 8003012:	e0b7      	b.n	8003184 <__aeabi_dsub+0x64c>
 8003014:	2a00      	cmp	r2, #0
 8003016:	d100      	bne.n	800301a <__aeabi_dsub+0x4e2>
 8003018:	e0f0      	b.n	80031fc <__aeabi_dsub+0x6c4>
 800301a:	2601      	movs	r6, #1
 800301c:	400e      	ands	r6, r1
 800301e:	4663      	mov	r3, ip
 8003020:	9802      	ldr	r0, [sp, #8]
 8003022:	08d9      	lsrs	r1, r3, #3
 8003024:	0742      	lsls	r2, r0, #29
 8003026:	430a      	orrs	r2, r1
 8003028:	08c4      	lsrs	r4, r0, #3
 800302a:	e696      	b.n	8002d5a <__aeabi_dsub+0x222>
 800302c:	4c85      	ldr	r4, [pc, #532]	@ (8003244 <__aeabi_dsub+0x70c>)
 800302e:	1aff      	subs	r7, r7, r3
 8003030:	4014      	ands	r4, r2
 8003032:	0762      	lsls	r2, r4, #29
 8003034:	08e4      	lsrs	r4, r4, #3
 8003036:	e760      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003038:	4981      	ldr	r1, [pc, #516]	@ (8003240 <__aeabi_dsub+0x708>)
 800303a:	428a      	cmp	r2, r1
 800303c:	d100      	bne.n	8003040 <__aeabi_dsub+0x508>
 800303e:	e0c9      	b.n	80031d4 <__aeabi_dsub+0x69c>
 8003040:	4663      	mov	r3, ip
 8003042:	18c1      	adds	r1, r0, r3
 8003044:	4281      	cmp	r1, r0
 8003046:	4180      	sbcs	r0, r0
 8003048:	9b02      	ldr	r3, [sp, #8]
 800304a:	4240      	negs	r0, r0
 800304c:	18e3      	adds	r3, r4, r3
 800304e:	181b      	adds	r3, r3, r0
 8003050:	07dd      	lsls	r5, r3, #31
 8003052:	085c      	lsrs	r4, r3, #1
 8003054:	2307      	movs	r3, #7
 8003056:	0849      	lsrs	r1, r1, #1
 8003058:	430d      	orrs	r5, r1
 800305a:	0017      	movs	r7, r2
 800305c:	402b      	ands	r3, r5
 800305e:	e710      	b.n	8002e82 <__aeabi_dsub+0x34a>
 8003060:	4663      	mov	r3, ip
 8003062:	1a1d      	subs	r5, r3, r0
 8003064:	45ac      	cmp	ip, r5
 8003066:	4192      	sbcs	r2, r2
 8003068:	2601      	movs	r6, #1
 800306a:	9b02      	ldr	r3, [sp, #8]
 800306c:	4252      	negs	r2, r2
 800306e:	1b1c      	subs	r4, r3, r4
 8003070:	4688      	mov	r8, r1
 8003072:	1aa4      	subs	r4, r4, r2
 8003074:	400e      	ands	r6, r1
 8003076:	e5c6      	b.n	8002c06 <__aeabi_dsub+0xce>
 8003078:	4663      	mov	r3, ip
 800307a:	18c5      	adds	r5, r0, r3
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	4285      	cmp	r5, r0
 8003080:	4180      	sbcs	r0, r0
 8003082:	469c      	mov	ip, r3
 8003084:	4240      	negs	r0, r0
 8003086:	4464      	add	r4, ip
 8003088:	1824      	adds	r4, r4, r0
 800308a:	2701      	movs	r7, #1
 800308c:	0223      	lsls	r3, r4, #8
 800308e:	d400      	bmi.n	8003092 <__aeabi_dsub+0x55a>
 8003090:	e6f5      	b.n	8002e7e <__aeabi_dsub+0x346>
 8003092:	2702      	movs	r7, #2
 8003094:	e641      	b.n	8002d1a <__aeabi_dsub+0x1e2>
 8003096:	4663      	mov	r3, ip
 8003098:	1ac5      	subs	r5, r0, r3
 800309a:	42a8      	cmp	r0, r5
 800309c:	4180      	sbcs	r0, r0
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	4240      	negs	r0, r0
 80030a2:	1ae4      	subs	r4, r4, r3
 80030a4:	2701      	movs	r7, #1
 80030a6:	1a24      	subs	r4, r4, r0
 80030a8:	e5a8      	b.n	8002bfc <__aeabi_dsub+0xc4>
 80030aa:	9d02      	ldr	r5, [sp, #8]
 80030ac:	4652      	mov	r2, sl
 80030ae:	002b      	movs	r3, r5
 80030b0:	3a20      	subs	r2, #32
 80030b2:	40d3      	lsrs	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	4653      	mov	r3, sl
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d006      	beq.n	80030ca <__aeabi_dsub+0x592>
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	002b      	movs	r3, r5
 80030c2:	4093      	lsls	r3, r2
 80030c4:	4662      	mov	r2, ip
 80030c6:	431a      	orrs	r2, r3
 80030c8:	4693      	mov	fp, r2
 80030ca:	465d      	mov	r5, fp
 80030cc:	1e6b      	subs	r3, r5, #1
 80030ce:	419d      	sbcs	r5, r3
 80030d0:	430d      	orrs	r5, r1
 80030d2:	e615      	b.n	8002d00 <__aeabi_dsub+0x1c8>
 80030d4:	0762      	lsls	r2, r4, #29
 80030d6:	08c0      	lsrs	r0, r0, #3
 80030d8:	4302      	orrs	r2, r0
 80030da:	08e4      	lsrs	r4, r4, #3
 80030dc:	e70d      	b.n	8002efa <__aeabi_dsub+0x3c2>
 80030de:	0011      	movs	r1, r2
 80030e0:	0027      	movs	r7, r4
 80030e2:	3920      	subs	r1, #32
 80030e4:	40cf      	lsrs	r7, r1
 80030e6:	2a20      	cmp	r2, #32
 80030e8:	d005      	beq.n	80030f6 <__aeabi_dsub+0x5be>
 80030ea:	2140      	movs	r1, #64	@ 0x40
 80030ec:	1a8a      	subs	r2, r1, r2
 80030ee:	4094      	lsls	r4, r2
 80030f0:	0025      	movs	r5, r4
 80030f2:	4305      	orrs	r5, r0
 80030f4:	9503      	str	r5, [sp, #12]
 80030f6:	9d03      	ldr	r5, [sp, #12]
 80030f8:	1e6a      	subs	r2, r5, #1
 80030fa:	4195      	sbcs	r5, r2
 80030fc:	433d      	orrs	r5, r7
 80030fe:	e77d      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 8003100:	2a00      	cmp	r2, #0
 8003102:	d100      	bne.n	8003106 <__aeabi_dsub+0x5ce>
 8003104:	e744      	b.n	8002f90 <__aeabi_dsub+0x458>
 8003106:	2601      	movs	r6, #1
 8003108:	400e      	ands	r6, r1
 800310a:	4663      	mov	r3, ip
 800310c:	08d9      	lsrs	r1, r3, #3
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	075a      	lsls	r2, r3, #29
 8003112:	430a      	orrs	r2, r1
 8003114:	08dc      	lsrs	r4, r3, #3
 8003116:	e6f0      	b.n	8002efa <__aeabi_dsub+0x3c2>
 8003118:	2a00      	cmp	r2, #0
 800311a:	d028      	beq.n	800316e <__aeabi_dsub+0x636>
 800311c:	4662      	mov	r2, ip
 800311e:	9f02      	ldr	r7, [sp, #8]
 8003120:	08c0      	lsrs	r0, r0, #3
 8003122:	433a      	orrs	r2, r7
 8003124:	d100      	bne.n	8003128 <__aeabi_dsub+0x5f0>
 8003126:	e6dc      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 8003128:	0762      	lsls	r2, r4, #29
 800312a:	4310      	orrs	r0, r2
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	08e4      	lsrs	r4, r4, #3
 8003130:	0312      	lsls	r2, r2, #12
 8003132:	4214      	tst	r4, r2
 8003134:	d009      	beq.n	800314a <__aeabi_dsub+0x612>
 8003136:	08fd      	lsrs	r5, r7, #3
 8003138:	4215      	tst	r5, r2
 800313a:	d106      	bne.n	800314a <__aeabi_dsub+0x612>
 800313c:	4663      	mov	r3, ip
 800313e:	2601      	movs	r6, #1
 8003140:	002c      	movs	r4, r5
 8003142:	08d8      	lsrs	r0, r3, #3
 8003144:	077b      	lsls	r3, r7, #29
 8003146:	4318      	orrs	r0, r3
 8003148:	400e      	ands	r6, r1
 800314a:	0f42      	lsrs	r2, r0, #29
 800314c:	00c0      	lsls	r0, r0, #3
 800314e:	08c0      	lsrs	r0, r0, #3
 8003150:	0752      	lsls	r2, r2, #29
 8003152:	4302      	orrs	r2, r0
 8003154:	e601      	b.n	8002d5a <__aeabi_dsub+0x222>
 8003156:	4663      	mov	r3, ip
 8003158:	1a1d      	subs	r5, r3, r0
 800315a:	45ac      	cmp	ip, r5
 800315c:	4192      	sbcs	r2, r2
 800315e:	9b02      	ldr	r3, [sp, #8]
 8003160:	4252      	negs	r2, r2
 8003162:	1b1c      	subs	r4, r3, r4
 8003164:	000e      	movs	r6, r1
 8003166:	4688      	mov	r8, r1
 8003168:	2701      	movs	r7, #1
 800316a:	1aa4      	subs	r4, r4, r2
 800316c:	e546      	b.n	8002bfc <__aeabi_dsub+0xc4>
 800316e:	4663      	mov	r3, ip
 8003170:	08d9      	lsrs	r1, r3, #3
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	075a      	lsls	r2, r3, #29
 8003176:	430a      	orrs	r2, r1
 8003178:	08dc      	lsrs	r4, r3, #3
 800317a:	e5ee      	b.n	8002d5a <__aeabi_dsub+0x222>
 800317c:	4663      	mov	r3, ip
 800317e:	9c02      	ldr	r4, [sp, #8]
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	e6c7      	b.n	8002f14 <__aeabi_dsub+0x3dc>
 8003184:	08c0      	lsrs	r0, r0, #3
 8003186:	2a00      	cmp	r2, #0
 8003188:	d100      	bne.n	800318c <__aeabi_dsub+0x654>
 800318a:	e6aa      	b.n	8002ee2 <__aeabi_dsub+0x3aa>
 800318c:	0762      	lsls	r2, r4, #29
 800318e:	4310      	orrs	r0, r2
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	08e4      	lsrs	r4, r4, #3
 8003194:	0312      	lsls	r2, r2, #12
 8003196:	4214      	tst	r4, r2
 8003198:	d0d7      	beq.n	800314a <__aeabi_dsub+0x612>
 800319a:	9f02      	ldr	r7, [sp, #8]
 800319c:	08fd      	lsrs	r5, r7, #3
 800319e:	4215      	tst	r5, r2
 80031a0:	d1d3      	bne.n	800314a <__aeabi_dsub+0x612>
 80031a2:	4663      	mov	r3, ip
 80031a4:	2601      	movs	r6, #1
 80031a6:	08d8      	lsrs	r0, r3, #3
 80031a8:	077b      	lsls	r3, r7, #29
 80031aa:	002c      	movs	r4, r5
 80031ac:	4318      	orrs	r0, r3
 80031ae:	400e      	ands	r6, r1
 80031b0:	e7cb      	b.n	800314a <__aeabi_dsub+0x612>
 80031b2:	000a      	movs	r2, r1
 80031b4:	0027      	movs	r7, r4
 80031b6:	3a20      	subs	r2, #32
 80031b8:	40d7      	lsrs	r7, r2
 80031ba:	2920      	cmp	r1, #32
 80031bc:	d005      	beq.n	80031ca <__aeabi_dsub+0x692>
 80031be:	2240      	movs	r2, #64	@ 0x40
 80031c0:	1a52      	subs	r2, r2, r1
 80031c2:	4094      	lsls	r4, r2
 80031c4:	0025      	movs	r5, r4
 80031c6:	4305      	orrs	r5, r0
 80031c8:	9503      	str	r5, [sp, #12]
 80031ca:	9d03      	ldr	r5, [sp, #12]
 80031cc:	1e6a      	subs	r2, r5, #1
 80031ce:	4195      	sbcs	r5, r2
 80031d0:	432f      	orrs	r7, r5
 80031d2:	e610      	b.n	8002df6 <__aeabi_dsub+0x2be>
 80031d4:	0014      	movs	r4, r2
 80031d6:	2500      	movs	r5, #0
 80031d8:	2200      	movs	r2, #0
 80031da:	e556      	b.n	8002c8a <__aeabi_dsub+0x152>
 80031dc:	9b02      	ldr	r3, [sp, #8]
 80031de:	4460      	add	r0, ip
 80031e0:	4699      	mov	r9, r3
 80031e2:	4560      	cmp	r0, ip
 80031e4:	4192      	sbcs	r2, r2
 80031e6:	444c      	add	r4, r9
 80031e8:	4252      	negs	r2, r2
 80031ea:	0005      	movs	r5, r0
 80031ec:	18a4      	adds	r4, r4, r2
 80031ee:	e74c      	b.n	800308a <__aeabi_dsub+0x552>
 80031f0:	001a      	movs	r2, r3
 80031f2:	001c      	movs	r4, r3
 80031f4:	432a      	orrs	r2, r5
 80031f6:	d000      	beq.n	80031fa <__aeabi_dsub+0x6c2>
 80031f8:	e6b3      	b.n	8002f62 <__aeabi_dsub+0x42a>
 80031fa:	e6c9      	b.n	8002f90 <__aeabi_dsub+0x458>
 80031fc:	2480      	movs	r4, #128	@ 0x80
 80031fe:	2600      	movs	r6, #0
 8003200:	0324      	lsls	r4, r4, #12
 8003202:	e5ae      	b.n	8002d62 <__aeabi_dsub+0x22a>
 8003204:	2120      	movs	r1, #32
 8003206:	2500      	movs	r5, #0
 8003208:	1a09      	subs	r1, r1, r0
 800320a:	e517      	b.n	8002c3c <__aeabi_dsub+0x104>
 800320c:	2200      	movs	r2, #0
 800320e:	2500      	movs	r5, #0
 8003210:	4c0b      	ldr	r4, [pc, #44]	@ (8003240 <__aeabi_dsub+0x708>)
 8003212:	e53a      	b.n	8002c8a <__aeabi_dsub+0x152>
 8003214:	2d00      	cmp	r5, #0
 8003216:	d100      	bne.n	800321a <__aeabi_dsub+0x6e2>
 8003218:	e5f6      	b.n	8002e08 <__aeabi_dsub+0x2d0>
 800321a:	464b      	mov	r3, r9
 800321c:	1bda      	subs	r2, r3, r7
 800321e:	4692      	mov	sl, r2
 8003220:	2f00      	cmp	r7, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x6ee>
 8003224:	e66f      	b.n	8002f06 <__aeabi_dsub+0x3ce>
 8003226:	2a38      	cmp	r2, #56	@ 0x38
 8003228:	dc05      	bgt.n	8003236 <__aeabi_dsub+0x6fe>
 800322a:	2680      	movs	r6, #128	@ 0x80
 800322c:	0436      	lsls	r6, r6, #16
 800322e:	4334      	orrs	r4, r6
 8003230:	4688      	mov	r8, r1
 8003232:	000e      	movs	r6, r1
 8003234:	e6d1      	b.n	8002fda <__aeabi_dsub+0x4a2>
 8003236:	4688      	mov	r8, r1
 8003238:	000e      	movs	r6, r1
 800323a:	2501      	movs	r5, #1
 800323c:	e6de      	b.n	8002ffc <__aeabi_dsub+0x4c4>
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	000007ff 	.word	0x000007ff
 8003244:	ff7fffff 	.word	0xff7fffff
 8003248:	000007fe 	.word	0x000007fe
 800324c:	2d00      	cmp	r5, #0
 800324e:	d100      	bne.n	8003252 <__aeabi_dsub+0x71a>
 8003250:	e668      	b.n	8002f24 <__aeabi_dsub+0x3ec>
 8003252:	464b      	mov	r3, r9
 8003254:	1bd9      	subs	r1, r3, r7
 8003256:	2f00      	cmp	r7, #0
 8003258:	d101      	bne.n	800325e <__aeabi_dsub+0x726>
 800325a:	468a      	mov	sl, r1
 800325c:	e5a7      	b.n	8002dae <__aeabi_dsub+0x276>
 800325e:	2701      	movs	r7, #1
 8003260:	2938      	cmp	r1, #56	@ 0x38
 8003262:	dd00      	ble.n	8003266 <__aeabi_dsub+0x72e>
 8003264:	e5c7      	b.n	8002df6 <__aeabi_dsub+0x2be>
 8003266:	2280      	movs	r2, #128	@ 0x80
 8003268:	0412      	lsls	r2, r2, #16
 800326a:	4314      	orrs	r4, r2
 800326c:	e5af      	b.n	8002dce <__aeabi_dsub+0x296>
 800326e:	46c0      	nop			@ (mov r8, r8)

08003270 <__aeabi_dcmpun>:
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	46c6      	mov	lr, r8
 8003274:	031e      	lsls	r6, r3, #12
 8003276:	0b36      	lsrs	r6, r6, #12
 8003278:	46b0      	mov	r8, r6
 800327a:	4e0d      	ldr	r6, [pc, #52]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 800327c:	030c      	lsls	r4, r1, #12
 800327e:	004d      	lsls	r5, r1, #1
 8003280:	005f      	lsls	r7, r3, #1
 8003282:	b500      	push	{lr}
 8003284:	0b24      	lsrs	r4, r4, #12
 8003286:	0d6d      	lsrs	r5, r5, #21
 8003288:	0d7f      	lsrs	r7, r7, #21
 800328a:	42b5      	cmp	r5, r6
 800328c:	d00b      	beq.n	80032a6 <__aeabi_dcmpun+0x36>
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__aeabi_dcmpun+0x40>)
 8003290:	2000      	movs	r0, #0
 8003292:	428f      	cmp	r7, r1
 8003294:	d104      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 8003296:	4646      	mov	r6, r8
 8003298:	4316      	orrs	r6, r2
 800329a:	0030      	movs	r0, r6
 800329c:	1e43      	subs	r3, r0, #1
 800329e:	4198      	sbcs	r0, r3
 80032a0:	bc80      	pop	{r7}
 80032a2:	46b8      	mov	r8, r7
 80032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a6:	4304      	orrs	r4, r0
 80032a8:	2001      	movs	r0, #1
 80032aa:	2c00      	cmp	r4, #0
 80032ac:	d1f8      	bne.n	80032a0 <__aeabi_dcmpun+0x30>
 80032ae:	e7ee      	b.n	800328e <__aeabi_dcmpun+0x1e>
 80032b0:	000007ff 	.word	0x000007ff

080032b4 <__aeabi_d2iz>:
 80032b4:	000b      	movs	r3, r1
 80032b6:	0002      	movs	r2, r0
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d16      	ldr	r5, [pc, #88]	@ (8003314 <__aeabi_d2iz+0x60>)
 80032bc:	030c      	lsls	r4, r1, #12
 80032be:	b082      	sub	sp, #8
 80032c0:	0049      	lsls	r1, r1, #1
 80032c2:	2000      	movs	r0, #0
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	0b24      	lsrs	r4, r4, #12
 80032ca:	0d49      	lsrs	r1, r1, #21
 80032cc:	0fde      	lsrs	r6, r3, #31
 80032ce:	42a9      	cmp	r1, r5
 80032d0:	dd04      	ble.n	80032dc <__aeabi_d2iz+0x28>
 80032d2:	4811      	ldr	r0, [pc, #68]	@ (8003318 <__aeabi_d2iz+0x64>)
 80032d4:	4281      	cmp	r1, r0
 80032d6:	dd03      	ble.n	80032e0 <__aeabi_d2iz+0x2c>
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <__aeabi_d2iz+0x68>)
 80032da:	18f0      	adds	r0, r6, r3
 80032dc:	b002      	add	sp, #8
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	2080      	movs	r0, #128	@ 0x80
 80032e2:	0340      	lsls	r0, r0, #13
 80032e4:	4320      	orrs	r0, r4
 80032e6:	4c0e      	ldr	r4, [pc, #56]	@ (8003320 <__aeabi_d2iz+0x6c>)
 80032e8:	1a64      	subs	r4, r4, r1
 80032ea:	2c1f      	cmp	r4, #31
 80032ec:	dd08      	ble.n	8003300 <__aeabi_d2iz+0x4c>
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <__aeabi_d2iz+0x70>)
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	40d8      	lsrs	r0, r3
 80032f4:	0003      	movs	r3, r0
 80032f6:	4258      	negs	r0, r3
 80032f8:	2e00      	cmp	r6, #0
 80032fa:	d1ef      	bne.n	80032dc <__aeabi_d2iz+0x28>
 80032fc:	0018      	movs	r0, r3
 80032fe:	e7ed      	b.n	80032dc <__aeabi_d2iz+0x28>
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <__aeabi_d2iz+0x74>)
 8003302:	9a00      	ldr	r2, [sp, #0]
 8003304:	469c      	mov	ip, r3
 8003306:	0003      	movs	r3, r0
 8003308:	4461      	add	r1, ip
 800330a:	408b      	lsls	r3, r1
 800330c:	40e2      	lsrs	r2, r4
 800330e:	4313      	orrs	r3, r2
 8003310:	e7f1      	b.n	80032f6 <__aeabi_d2iz+0x42>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	000003fe 	.word	0x000003fe
 8003318:	0000041d 	.word	0x0000041d
 800331c:	7fffffff 	.word	0x7fffffff
 8003320:	00000433 	.word	0x00000433
 8003324:	00000413 	.word	0x00000413
 8003328:	fffffbed 	.word	0xfffffbed

0800332c <__aeabi_i2d>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2800      	cmp	r0, #0
 8003330:	d016      	beq.n	8003360 <__aeabi_i2d+0x34>
 8003332:	17c3      	asrs	r3, r0, #31
 8003334:	18c5      	adds	r5, r0, r3
 8003336:	405d      	eors	r5, r3
 8003338:	0fc4      	lsrs	r4, r0, #31
 800333a:	0028      	movs	r0, r5
 800333c:	f000 f914 	bl	8003568 <__clzsi2>
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <__aeabi_i2d+0x58>)
 8003342:	1a1b      	subs	r3, r3, r0
 8003344:	055b      	lsls	r3, r3, #21
 8003346:	0d5b      	lsrs	r3, r3, #21
 8003348:	280a      	cmp	r0, #10
 800334a:	dc14      	bgt.n	8003376 <__aeabi_i2d+0x4a>
 800334c:	0002      	movs	r2, r0
 800334e:	002e      	movs	r6, r5
 8003350:	3215      	adds	r2, #21
 8003352:	4096      	lsls	r6, r2
 8003354:	220b      	movs	r2, #11
 8003356:	1a12      	subs	r2, r2, r0
 8003358:	40d5      	lsrs	r5, r2
 800335a:	032d      	lsls	r5, r5, #12
 800335c:	0b2d      	lsrs	r5, r5, #12
 800335e:	e003      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003360:	2400      	movs	r4, #0
 8003362:	2300      	movs	r3, #0
 8003364:	2500      	movs	r5, #0
 8003366:	2600      	movs	r6, #0
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	432b      	orrs	r3, r5
 800336c:	07e4      	lsls	r4, r4, #31
 800336e:	4323      	orrs	r3, r4
 8003370:	0030      	movs	r0, r6
 8003372:	0019      	movs	r1, r3
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	380b      	subs	r0, #11
 8003378:	4085      	lsls	r5, r0
 800337a:	032d      	lsls	r5, r5, #12
 800337c:	2600      	movs	r6, #0
 800337e:	0b2d      	lsrs	r5, r5, #12
 8003380:	e7f2      	b.n	8003368 <__aeabi_i2d+0x3c>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	0000041e 	.word	0x0000041e

08003388 <__aeabi_ui2d>:
 8003388:	b510      	push	{r4, lr}
 800338a:	1e04      	subs	r4, r0, #0
 800338c:	d010      	beq.n	80033b0 <__aeabi_ui2d+0x28>
 800338e:	f000 f8eb 	bl	8003568 <__clzsi2>
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <__aeabi_ui2d+0x44>)
 8003394:	1a1b      	subs	r3, r3, r0
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	0d5b      	lsrs	r3, r3, #21
 800339a:	280a      	cmp	r0, #10
 800339c:	dc0f      	bgt.n	80033be <__aeabi_ui2d+0x36>
 800339e:	220b      	movs	r2, #11
 80033a0:	0021      	movs	r1, r4
 80033a2:	1a12      	subs	r2, r2, r0
 80033a4:	40d1      	lsrs	r1, r2
 80033a6:	3015      	adds	r0, #21
 80033a8:	030a      	lsls	r2, r1, #12
 80033aa:	4084      	lsls	r4, r0
 80033ac:	0b12      	lsrs	r2, r2, #12
 80033ae:	e001      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2200      	movs	r2, #0
 80033b4:	051b      	lsls	r3, r3, #20
 80033b6:	4313      	orrs	r3, r2
 80033b8:	0020      	movs	r0, r4
 80033ba:	0019      	movs	r1, r3
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	0022      	movs	r2, r4
 80033c0:	380b      	subs	r0, #11
 80033c2:	4082      	lsls	r2, r0
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	2400      	movs	r4, #0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e7f3      	b.n	80033b4 <__aeabi_ui2d+0x2c>
 80033cc:	0000041e 	.word	0x0000041e

080033d0 <__aeabi_f2d>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	0242      	lsls	r2, r0, #9
 80033d4:	0043      	lsls	r3, r0, #1
 80033d6:	0fc4      	lsrs	r4, r0, #31
 80033d8:	20fe      	movs	r0, #254	@ 0xfe
 80033da:	0e1b      	lsrs	r3, r3, #24
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	0a55      	lsrs	r5, r2, #9
 80033e0:	4208      	tst	r0, r1
 80033e2:	d00c      	beq.n	80033fe <__aeabi_f2d+0x2e>
 80033e4:	21e0      	movs	r1, #224	@ 0xe0
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	468c      	mov	ip, r1
 80033ea:	076d      	lsls	r5, r5, #29
 80033ec:	0b12      	lsrs	r2, r2, #12
 80033ee:	4463      	add	r3, ip
 80033f0:	051b      	lsls	r3, r3, #20
 80033f2:	4313      	orrs	r3, r2
 80033f4:	07e4      	lsls	r4, r4, #31
 80033f6:	4323      	orrs	r3, r4
 80033f8:	0028      	movs	r0, r5
 80033fa:	0019      	movs	r1, r3
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <__aeabi_f2d+0x5c>
 8003402:	2d00      	cmp	r5, #0
 8003404:	d01b      	beq.n	800343e <__aeabi_f2d+0x6e>
 8003406:	0028      	movs	r0, r5
 8003408:	f000 f8ae 	bl	8003568 <__clzsi2>
 800340c:	280a      	cmp	r0, #10
 800340e:	dc1c      	bgt.n	800344a <__aeabi_f2d+0x7a>
 8003410:	230b      	movs	r3, #11
 8003412:	002a      	movs	r2, r5
 8003414:	1a1b      	subs	r3, r3, r0
 8003416:	40da      	lsrs	r2, r3
 8003418:	0003      	movs	r3, r0
 800341a:	3315      	adds	r3, #21
 800341c:	409d      	lsls	r5, r3
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <__aeabi_f2d+0x88>)
 8003420:	0312      	lsls	r2, r2, #12
 8003422:	1a1b      	subs	r3, r3, r0
 8003424:	055b      	lsls	r3, r3, #21
 8003426:	0b12      	lsrs	r2, r2, #12
 8003428:	0d5b      	lsrs	r3, r3, #21
 800342a:	e7e1      	b.n	80033f0 <__aeabi_f2d+0x20>
 800342c:	2d00      	cmp	r5, #0
 800342e:	d009      	beq.n	8003444 <__aeabi_f2d+0x74>
 8003430:	0b13      	lsrs	r3, r2, #12
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	431a      	orrs	r2, r3
 8003438:	076d      	lsls	r5, r5, #29
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <__aeabi_f2d+0x8c>)
 800343c:	e7d8      	b.n	80033f0 <__aeabi_f2d+0x20>
 800343e:	2300      	movs	r3, #0
 8003440:	2200      	movs	r2, #0
 8003442:	e7d5      	b.n	80033f0 <__aeabi_f2d+0x20>
 8003444:	2200      	movs	r2, #0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <__aeabi_f2d+0x8c>)
 8003448:	e7d2      	b.n	80033f0 <__aeabi_f2d+0x20>
 800344a:	0003      	movs	r3, r0
 800344c:	002a      	movs	r2, r5
 800344e:	3b0b      	subs	r3, #11
 8003450:	409a      	lsls	r2, r3
 8003452:	2500      	movs	r5, #0
 8003454:	e7e3      	b.n	800341e <__aeabi_f2d+0x4e>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	00000389 	.word	0x00000389
 800345c:	000007ff 	.word	0x000007ff

08003460 <__aeabi_d2f>:
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	004b      	lsls	r3, r1, #1
 8003464:	030f      	lsls	r7, r1, #12
 8003466:	0d5b      	lsrs	r3, r3, #21
 8003468:	4c3b      	ldr	r4, [pc, #236]	@ (8003558 <__aeabi_d2f+0xf8>)
 800346a:	0f45      	lsrs	r5, r0, #29
 800346c:	b083      	sub	sp, #12
 800346e:	0a7f      	lsrs	r7, r7, #9
 8003470:	1c5e      	adds	r6, r3, #1
 8003472:	432f      	orrs	r7, r5
 8003474:	9000      	str	r0, [sp, #0]
 8003476:	9101      	str	r1, [sp, #4]
 8003478:	0fca      	lsrs	r2, r1, #31
 800347a:	00c5      	lsls	r5, r0, #3
 800347c:	4226      	tst	r6, r4
 800347e:	d00b      	beq.n	8003498 <__aeabi_d2f+0x38>
 8003480:	4936      	ldr	r1, [pc, #216]	@ (800355c <__aeabi_d2f+0xfc>)
 8003482:	185c      	adds	r4, r3, r1
 8003484:	2cfe      	cmp	r4, #254	@ 0xfe
 8003486:	dd13      	ble.n	80034b0 <__aeabi_d2f+0x50>
 8003488:	20ff      	movs	r0, #255	@ 0xff
 800348a:	2300      	movs	r3, #0
 800348c:	05c0      	lsls	r0, r0, #23
 800348e:	4318      	orrs	r0, r3
 8003490:	07d2      	lsls	r2, r2, #31
 8003492:	4310      	orrs	r0, r2
 8003494:	b003      	add	sp, #12
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <__aeabi_d2f+0x42>
 800349c:	2000      	movs	r0, #0
 800349e:	2300      	movs	r3, #0
 80034a0:	e7f4      	b.n	800348c <__aeabi_d2f+0x2c>
 80034a2:	433d      	orrs	r5, r7
 80034a4:	d0f0      	beq.n	8003488 <__aeabi_d2f+0x28>
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	03db      	lsls	r3, r3, #15
 80034aa:	20ff      	movs	r0, #255	@ 0xff
 80034ac:	433b      	orrs	r3, r7
 80034ae:	e7ed      	b.n	800348c <__aeabi_d2f+0x2c>
 80034b0:	2c00      	cmp	r4, #0
 80034b2:	dd14      	ble.n	80034de <__aeabi_d2f+0x7e>
 80034b4:	9b00      	ldr	r3, [sp, #0]
 80034b6:	00ff      	lsls	r7, r7, #3
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	4183      	sbcs	r3, r0
 80034be:	0f69      	lsrs	r1, r5, #29
 80034c0:	433b      	orrs	r3, r7
 80034c2:	430b      	orrs	r3, r1
 80034c4:	0759      	lsls	r1, r3, #29
 80034c6:	d041      	beq.n	800354c <__aeabi_d2f+0xec>
 80034c8:	210f      	movs	r1, #15
 80034ca:	4019      	ands	r1, r3
 80034cc:	2904      	cmp	r1, #4
 80034ce:	d028      	beq.n	8003522 <__aeabi_d2f+0xc2>
 80034d0:	3304      	adds	r3, #4
 80034d2:	0159      	lsls	r1, r3, #5
 80034d4:	d525      	bpl.n	8003522 <__aeabi_d2f+0xc2>
 80034d6:	3401      	adds	r4, #1
 80034d8:	2300      	movs	r3, #0
 80034da:	b2e0      	uxtb	r0, r4
 80034dc:	e7d6      	b.n	800348c <__aeabi_d2f+0x2c>
 80034de:	0021      	movs	r1, r4
 80034e0:	3117      	adds	r1, #23
 80034e2:	dbdb      	blt.n	800349c <__aeabi_d2f+0x3c>
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	201e      	movs	r0, #30
 80034e8:	0409      	lsls	r1, r1, #16
 80034ea:	4339      	orrs	r1, r7
 80034ec:	1b00      	subs	r0, r0, r4
 80034ee:	281f      	cmp	r0, #31
 80034f0:	dd1b      	ble.n	800352a <__aeabi_d2f+0xca>
 80034f2:	2602      	movs	r6, #2
 80034f4:	4276      	negs	r6, r6
 80034f6:	1b34      	subs	r4, r6, r4
 80034f8:	000e      	movs	r6, r1
 80034fa:	40e6      	lsrs	r6, r4
 80034fc:	0034      	movs	r4, r6
 80034fe:	2820      	cmp	r0, #32
 8003500:	d004      	beq.n	800350c <__aeabi_d2f+0xac>
 8003502:	4817      	ldr	r0, [pc, #92]	@ (8003560 <__aeabi_d2f+0x100>)
 8003504:	4684      	mov	ip, r0
 8003506:	4463      	add	r3, ip
 8003508:	4099      	lsls	r1, r3
 800350a:	430d      	orrs	r5, r1
 800350c:	002b      	movs	r3, r5
 800350e:	1e59      	subs	r1, r3, #1
 8003510:	418b      	sbcs	r3, r1
 8003512:	4323      	orrs	r3, r4
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d015      	beq.n	8003544 <__aeabi_d2f+0xe4>
 8003518:	210f      	movs	r1, #15
 800351a:	2400      	movs	r4, #0
 800351c:	4019      	ands	r1, r3
 800351e:	2904      	cmp	r1, #4
 8003520:	d117      	bne.n	8003552 <__aeabi_d2f+0xf2>
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	b2e0      	uxtb	r0, r4
 8003528:	e7b0      	b.n	800348c <__aeabi_d2f+0x2c>
 800352a:	4c0e      	ldr	r4, [pc, #56]	@ (8003564 <__aeabi_d2f+0x104>)
 800352c:	191c      	adds	r4, r3, r4
 800352e:	002b      	movs	r3, r5
 8003530:	40a5      	lsls	r5, r4
 8003532:	40c3      	lsrs	r3, r0
 8003534:	40a1      	lsls	r1, r4
 8003536:	1e68      	subs	r0, r5, #1
 8003538:	4185      	sbcs	r5, r0
 800353a:	4329      	orrs	r1, r5
 800353c:	430b      	orrs	r3, r1
 800353e:	2400      	movs	r4, #0
 8003540:	0759      	lsls	r1, r3, #29
 8003542:	d1c1      	bne.n	80034c8 <__aeabi_d2f+0x68>
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	2000      	movs	r0, #0
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	e79f      	b.n	800348c <__aeabi_d2f+0x2c>
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2e0      	uxtb	r0, r4
 8003550:	e79c      	b.n	800348c <__aeabi_d2f+0x2c>
 8003552:	3304      	adds	r3, #4
 8003554:	e7e5      	b.n	8003522 <__aeabi_d2f+0xc2>
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	000007fe 	.word	0x000007fe
 800355c:	fffffc80 	.word	0xfffffc80
 8003560:	fffffca2 	.word	0xfffffca2
 8003564:	fffffc82 	.word	0xfffffc82

08003568 <__clzsi2>:
 8003568:	211c      	movs	r1, #28
 800356a:	2301      	movs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4298      	cmp	r0, r3
 8003570:	d301      	bcc.n	8003576 <__clzsi2+0xe>
 8003572:	0c00      	lsrs	r0, r0, #16
 8003574:	3910      	subs	r1, #16
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	4298      	cmp	r0, r3
 800357a:	d301      	bcc.n	8003580 <__clzsi2+0x18>
 800357c:	0a00      	lsrs	r0, r0, #8
 800357e:	3908      	subs	r1, #8
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0x22>
 8003586:	0900      	lsrs	r0, r0, #4
 8003588:	3904      	subs	r1, #4
 800358a:	a202      	add	r2, pc, #8	@ (adr r2, 8003594 <__clzsi2+0x2c>)
 800358c:	5c10      	ldrb	r0, [r2, r0]
 800358e:	1840      	adds	r0, r0, r1
 8003590:	4770      	bx	lr
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	02020304 	.word	0x02020304
 8003598:	01010101 	.word	0x01010101
	...

080035a4 <__clzdi2>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d103      	bne.n	80035b2 <__clzdi2+0xe>
 80035aa:	f7ff ffdd 	bl	8003568 <__clzsi2>
 80035ae:	3020      	adds	r0, #32
 80035b0:	e002      	b.n	80035b8 <__clzdi2+0x14>
 80035b2:	0008      	movs	r0, r1
 80035b4:	f7ff ffd8 	bl	8003568 <__clzsi2>
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)

080035bc <MAX30102_Init>:
 * @brief  Initializes the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    // Reset the MAX30102
    MAX30102_Reset(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f864 	bl	8003694 <MAX30102_Reset>

    // Wait for the reset to complete
    HAL_Delay(100);
 80035cc:	2064      	movs	r0, #100	@ 0x64
 80035ce:	f001 fdc7 	bl	8005160 <HAL_Delay>
    MAX30102_ReadRegister(hi2c, MAX30102_REG_INTR_STATUS_1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2100      	movs	r1, #0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f8e6 	bl	80037a8 <MAX30102_ReadRegister>
     MAX30102_ReadRegister(hi2c, MAX30102_REG_INTR_STATUS_2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2101      	movs	r1, #1
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 f8e1 	bl	80037a8 <MAX30102_ReadRegister>

    // Set the mode to SpO2 mode
    MAX30102_SetMode(hi2c, MAX30102_MODE_SPO2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2103      	movs	r1, #3
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f860 	bl	80036b0 <MAX30102_SetMode>

    // Configure SpO2 sensor parameters
    MAX30102_SetSpO2Config(hi2c, MAX30102_SPO2_PW_411, MAX30102_SPO2_ADC_RGE_2048, MAX30102_SPO2_SR_400);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	2303      	movs	r3, #3
 80035f4:	2200      	movs	r2, #0
 80035f6:	2103      	movs	r1, #3
 80035f8:	f000 f86c 	bl	80036d4 <MAX30102_SetSpO2Config>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_INTR_ENABLE_2, MAX30102_REG_INTR_ENABLE_2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	2103      	movs	r1, #3
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f8b1 	bl	800376a <MAX30102_WriteRegister>




    // Set the LED pulse amplitudes (adjust according to your requirements)
    MAX30102_SetLedPulseAmplitude(hi2c, MAX30100_LED_CURRENT_11MA , MAX30100_LED_CURRENT_11MA );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2203      	movs	r2, #3
 800360c:	2103      	movs	r1, #3
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f88d 	bl	800372e <MAX30102_SetLedPulseAmplitude>


    // Additional sensor configurations can go here
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <MAX30102_ReadFifo>:
 * @param  hi2c: I2C handle
 * @param  data: pointer to MAX30102_Data structure to store the results
 * @retval None
 */
void MAX30102_ReadFifo(I2C_HandleTypeDef *hi2c, MAX30102_Data *data)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af04      	add	r7, sp, #16
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
    uint8_t fifoData[6];

    // Read 6 bytes from the FIFO_DATA register
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, MAX30102_REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, fifoData, 6, HAL_MAX_DELAY);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	2301      	movs	r3, #1
 800362a:	425b      	negs	r3, r3
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	2306      	movs	r3, #6
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2408      	movs	r4, #8
 8003634:	193b      	adds	r3, r7, r4
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	2207      	movs	r2, #7
 800363c:	21ae      	movs	r1, #174	@ 0xae
 800363e:	f002 f9dd 	bl	80059fc <HAL_I2C_Mem_Read>

    // Combine the bytes to form 16-bit values for Red and IR data
    data->red = (fifoData[0] << 16) | (fifoData[1] << 8) | fifoData[2];
 8003642:	0021      	movs	r1, r4
 8003644:	187b      	adds	r3, r7, r1
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	b21a      	sxth	r2, r3
 800364c:	187b      	adds	r3, r7, r1
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b21b      	sxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b21a      	sxth	r2, r3
 8003658:	187b      	adds	r3, r7, r1
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	b21b      	sxth	r3, r3
 800365e:	4313      	orrs	r3, r2
 8003660:	b21b      	sxth	r3, r3
 8003662:	b29a      	uxth	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	801a      	strh	r2, [r3, #0]
    data->ir = (fifoData[3] << 16) | (fifoData[4] << 8) | fifoData[5];
 8003668:	187b      	adds	r3, r7, r1
 800366a:	78db      	ldrb	r3, [r3, #3]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	b21a      	sxth	r2, r3
 8003670:	187b      	adds	r3, r7, r1
 8003672:	791b      	ldrb	r3, [r3, #4]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21a      	sxth	r2, r3
 800367c:	187b      	adds	r3, r7, r1
 800367e:	795b      	ldrb	r3, [r3, #5]
 8003680:	b21b      	sxth	r3, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	b21b      	sxth	r3, r3
 8003686:	b29a      	uxth	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	805a      	strh	r2, [r3, #2]
}
 800368c:	46c0      	nop			@ (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b005      	add	sp, #20
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <MAX30102_Reset>:
 * @brief  Resets the MAX30102 sensor
 * @param  hi2c: I2C handle
 * @retval None
 */
void MAX30102_Reset(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    // Write 0x40 to the MODE_CONFIG register to reset the device
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, 0x40);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	2109      	movs	r1, #9
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f861 	bl	800376a <MAX30102_WriteRegister>
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <MAX30102_SetMode>:
 * @param  hi2c: I2C handle
 * @param  mode: Desired mode (e.g., MAX30102_MODE_SPO2, MAX30102_MODE_HR_ONLY)
 * @retval None
 */
void MAX30102_SetMode(I2C_HandleTypeDef *hi2c, uint8_t mode)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	000a      	movs	r2, r1
 80036ba:	1cfb      	adds	r3, r7, #3
 80036bc:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_MODE_CONFIG, mode);
 80036be:	1cfb      	adds	r3, r7, #3
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2109      	movs	r1, #9
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f84f 	bl	800376a <MAX30102_WriteRegister>
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <MAX30102_SetSpO2Config>:
 * @param  adc_rge: ADC range (e.g., MAX30102_SPO2_ADC_RGE_4096)
 * @param  sr: Sample rate (e.g., MAX30102_SPO2_SR_100)
 * @retval None
 */
void MAX30102_SetSpO2Config(I2C_HandleTypeDef *hi2c, uint8_t led_pw, uint8_t adc_rge, uint8_t sr)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	000c      	movs	r4, r1
 80036de:	0010      	movs	r0, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	1c22      	adds	r2, r4, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	1cbb      	adds	r3, r7, #2
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	1c7b      	adds	r3, r7, #1
 80036f0:	1c0a      	adds	r2, r1, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    uint8_t config = (adc_rge << 5) | (sr << 2) | led_pw;
 80036f4:	1cbb      	adds	r3, r7, #2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	b25a      	sxtb	r2, r3
 80036fc:	1c7b      	adds	r3, r7, #1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	b25b      	sxtb	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	b25a      	sxtb	r2, r3
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b25a      	sxtb	r2, r3
 8003712:	210f      	movs	r1, #15
 8003714:	187b      	adds	r3, r7, r1
 8003716:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_SPO2_CONFIG, config);
 8003718:	187b      	adds	r3, r7, r1
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	210a      	movs	r1, #10
 8003720:	0018      	movs	r0, r3
 8003722:	f000 f822 	bl	800376a <MAX30102_WriteRegister>
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b005      	add	sp, #20
 800372c:	bd90      	pop	{r4, r7, pc}

0800372e <MAX30102_SetLedPulseAmplitude>:
 * @param  led1_pa: Pulse amplitude for LED1 (Red)
 * @param  led2_pa: Pulse amplitude for LED2 (IR)
 * @retval None
 */
void MAX30102_SetLedPulseAmplitude(I2C_HandleTypeDef *hi2c, uint8_t led1_pa, uint8_t led2_pa)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	0008      	movs	r0, r1
 8003738:	0011      	movs	r1, r2
 800373a:	1cfb      	adds	r3, r7, #3
 800373c:	1c02      	adds	r2, r0, #0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	1c0a      	adds	r2, r1, #0
 8003744:	701a      	strb	r2, [r3, #0]
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED1_PA, led1_pa);
 8003746:	1cfb      	adds	r3, r7, #3
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	210c      	movs	r1, #12
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f80b 	bl	800376a <MAX30102_WriteRegister>
    MAX30102_WriteRegister(hi2c, MAX30102_REG_LED2_PA, led2_pa);
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	210d      	movs	r1, #13
 800375c:	0018      	movs	r0, r3
 800375e:	f000 f804 	bl	800376a <MAX30102_WriteRegister>
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <MAX30102_WriteRegister>:
 * @param  reg: Register address
 * @param  value: Value to write
 * @retval None
 */
void MAX30102_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af04      	add	r7, sp, #16
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	0008      	movs	r0, r1
 8003774:	0011      	movs	r1, r2
 8003776:	1cfb      	adds	r3, r7, #3
 8003778:	1c02      	adds	r2, r0, #0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	1cbb      	adds	r3, r7, #2
 800377e:	1c0a      	adds	r2, r1, #0
 8003780:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8003782:	1cfb      	adds	r3, r7, #3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b29a      	uxth	r2, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	2301      	movs	r3, #1
 800378c:	425b      	negs	r3, r3
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2301      	movs	r3, #1
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	1cbb      	adds	r3, r7, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	21ae      	movs	r1, #174	@ 0xae
 800379c:	f002 f800 	bl	80057a0 <HAL_I2C_Mem_Write>
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <MAX30102_ReadRegister>:
 * @param  hi2c: I2C handle
 * @param  reg: Register address
 * @retval Register value
 */
uint8_t MAX30102_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b089      	sub	sp, #36	@ 0x24
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	000a      	movs	r2, r1
 80037b2:	1cfb      	adds	r3, r7, #3
 80037b4:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 80037b6:	210f      	movs	r1, #15
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(hi2c, MAX30102_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80037be:	1cfb      	adds	r3, r7, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	2301      	movs	r3, #1
 80037c8:	425b      	negs	r3, r3
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	2301      	movs	r3, #1
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	000c      	movs	r4, r1
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	21ae      	movs	r1, #174	@ 0xae
 80037da:	f002 f90f 	bl	80059fc <HAL_I2C_Mem_Read>
    return value;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b005      	add	sp, #20
 80037e8:	bd90      	pop	{r4, r7, pc}
	...

080037ec <MAX30102_ReadTemperature>:
    }
    return spo2;
}

float MAX30102_ReadTemperature(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    // Enable temperature conversion
    MAX30102_WriteRegister(hi2c, MAX30102_REG_TEMP_CONFIG, 0x01);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	2121      	movs	r1, #33	@ 0x21
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff ffb5 	bl	800376a <MAX30102_WriteRegister>

    // Wait for the temperature conversion to complete
    HAL_Delay(30);
 8003800:	201e      	movs	r0, #30
 8003802:	f001 fcad 	bl	8005160 <HAL_Delay>

    // Read the integer part of the temperature
    uint8_t temp_int = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_INT);
 8003806:	250f      	movs	r5, #15
 8003808:	197c      	adds	r4, r7, r5
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	211f      	movs	r1, #31
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff ffca 	bl	80037a8 <MAX30102_ReadRegister>
 8003814:	0003      	movs	r3, r0
 8003816:	7023      	strb	r3, [r4, #0]

    // Read the fractional part of the temperature
    uint8_t temp_frac = MAX30102_ReadRegister(hi2c, MAX30102_REG_TEMP_FRAC);
 8003818:	260e      	movs	r6, #14
 800381a:	19bc      	adds	r4, r7, r6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2120      	movs	r1, #32
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ffc1 	bl	80037a8 <MAX30102_ReadRegister>
 8003826:	0003      	movs	r3, r0
 8003828:	7023      	strb	r3, [r4, #0]

    // Combine the integer and fractional parts
    float temperature = temp_int + (temp_frac * 0.0625);
 800382a:	197b      	adds	r3, r7, r5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fd7c 	bl	800332c <__aeabi_i2d>
 8003834:	0004      	movs	r4, r0
 8003836:	000d      	movs	r5, r1
 8003838:	19bb      	adds	r3, r7, r6
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fd75 	bl	800332c <__aeabi_i2d>
 8003842:	2200      	movs	r2, #0
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <MAX30102_ReadTemperature+0x84>)
 8003846:	f7fe feaf 	bl	80025a8 <__aeabi_dmul>
 800384a:	0002      	movs	r2, r0
 800384c:	000b      	movs	r3, r1
 800384e:	0020      	movs	r0, r4
 8003850:	0029      	movs	r1, r5
 8003852:	f7fd ff01 	bl	8001658 <__aeabi_dadd>
 8003856:	0002      	movs	r2, r0
 8003858:	000b      	movs	r3, r1
 800385a:	0010      	movs	r0, r2
 800385c:	0019      	movs	r1, r3
 800385e:	f7ff fdff 	bl	8003460 <__aeabi_d2f>
 8003862:	1c03      	adds	r3, r0, #0
 8003864:	60bb      	str	r3, [r7, #8]

    return temperature;
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	1c18      	adds	r0, r3, #0
 800386a:	46bd      	mov	sp, r7
 800386c:	b005      	add	sp, #20
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003870:	3fb00000 	.word	0x3fb00000

08003874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a06      	ldr	r2, [pc, #24]	@ (800389c <vApplicationGetIdleTaskMemory+0x28>)
 8003884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a05      	ldr	r2, [pc, #20]	@ (80038a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800388a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	20000210 	.word	0x20000210
 80038a0:	20000264 	.word	0x20000264

080038a4 <MinMaxAvgStatistic_Init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

/* Initialize the Statistic block */
void MinMaxAvgStatistic_Init(MinMaxAvgStatistic* stat) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a07      	ldr	r2, [pc, #28]	@ (80038cc <MinMaxAvgStatistic_Init+0x28>)
 80038b0:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <MinMaxAvgStatistic_Init+0x28>)
 80038b6:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	7fc00000 	.word	0x7fc00000

080038d0 <MinMaxAvgStatistic_Process>:

/* Add value to the statistic */
void MinMaxAvgStatistic_Process(MinMaxAvgStatistic* stat, float value) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    stat->min = isnan(stat->min) ? value : fminf(stat->min, value);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1c19      	adds	r1, r3, #0
 80038e0:	1c18      	adds	r0, r3, #0
 80038e2:	f7fd fdf5 	bl	80014d0 <__aeabi_fcmpun>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d108      	bne.n	80038fc <MinMaxAvgStatistic_Process+0x2c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	1c11      	adds	r1, r2, #0
 80038f2:	1c18      	adds	r0, r3, #0
 80038f4:	f00f fd07 	bl	8013306 <fminf>
 80038f8:	1c02      	adds	r2, r0, #0
 80038fa:	e000      	b.n	80038fe <MinMaxAvgStatistic_Process+0x2e>
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
    stat->max = isnan(stat->max) ? value : fmaxf(stat->max, value);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	1c19      	adds	r1, r3, #0
 8003908:	1c18      	adds	r0, r3, #0
 800390a:	f7fd fde1 	bl	80014d0 <__aeabi_fcmpun>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d108      	bne.n	8003924 <MinMaxAvgStatistic_Process+0x54>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	1c11      	adds	r1, r2, #0
 800391a:	1c18      	adds	r0, r3, #0
 800391c:	f00f fcdd 	bl	80132da <fmaxf>
 8003920:	1c02      	adds	r2, r0, #0
 8003922:	e000      	b.n	8003926 <MinMaxAvgStatistic_Process+0x56>
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	605a      	str	r2, [r3, #4]
    stat->sum += value;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	1c18      	adds	r0, r3, #0
 8003932:	f7fc ff7b 	bl	800082c <__aeabi_fadd>
 8003936:	1c03      	adds	r3, r0, #0
 8003938:	1c1a      	adds	r2, r3, #0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]
    stat->count++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}

08003950 <MinMaxAvgStatistic_Reset>:

/* Reset the statistic block */
void MinMaxAvgStatistic_Reset(MinMaxAvgStatistic* stat) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a07      	ldr	r2, [pc, #28]	@ (8003978 <MinMaxAvgStatistic_Reset+0x28>)
 800395c:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a05      	ldr	r2, [pc, #20]	@ (8003978 <MinMaxAvgStatistic_Reset+0x28>)
 8003962:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}
 8003978:	7fc00000 	.word	0x7fc00000

0800397c <MinMaxAvgStatistic_Minimum>:

/* Get the minimum value */
float MinMaxAvgStatistic_Minimum(const MinMaxAvgStatistic* stat) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    return stat->min;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	1c18      	adds	r0, r3, #0
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <MinMaxAvgStatistic_Maximum>:

/* Get the maximum value */
float MinMaxAvgStatistic_Maximum(const MinMaxAvgStatistic* stat) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    return stat->max;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
}
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <MinMaxAvgStatistic_Average>:

/* Get the average value */
float MinMaxAvgStatistic_Average(const MinMaxAvgStatistic* stat) {
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
    return stat->sum / stat->count;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689c      	ldr	r4, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fd fdc1 	bl	800153c <__aeabi_i2f>
 80039ba:	1c03      	adds	r3, r0, #0
 80039bc:	1c19      	adds	r1, r3, #0
 80039be:	1c20      	adds	r0, r4, #0
 80039c0:	f7fd f8be 	bl	8000b40 <__aeabi_fdiv>
 80039c4:	1c03      	adds	r3, r0, #0
}
 80039c6:	1c18      	adds	r0, r3, #0
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b003      	add	sp, #12
 80039cc:	bd90      	pop	{r4, r7, pc}
	...

080039d0 <HighPassFilter_Init>:
    float last_filter_value;
    float last_raw_value;
} HighPassFilter;

/* Initialize High Pass Filter with samples */
void HighPassFilter_Init(HighPassFilter* filter, float samples) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	4817      	ldr	r0, [pc, #92]	@ (8003a3c <HighPassFilter_Init+0x6c>)
 80039de:	f7fd f8af 	bl	8000b40 <__aeabi_fdiv>
 80039e2:	1c03      	adds	r3, r0, #0
 80039e4:	1c18      	adds	r0, r3, #0
 80039e6:	f00f fc47 	bl	8013278 <expf>
 80039ea:	1c02      	adds	r2, r0, #0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	21fe      	movs	r1, #254	@ 0xfe
 80039f6:	0589      	lsls	r1, r1, #22
 80039f8:	1c18      	adds	r0, r3, #0
 80039fa:	f7fc ff17 	bl	800082c <__aeabi_fadd>
 80039fe:	1c03      	adds	r3, r0, #0
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	05c9      	lsls	r1, r1, #23
 8003a04:	1c18      	adds	r0, r3, #0
 8003a06:	f7fd f89b 	bl	8000b40 <__aeabi_fdiv>
 8003a0a:	1c03      	adds	r3, r0, #0
 8003a0c:	1c1a      	adds	r2, r3, #0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]
    filter->kA1 = -(filter->kA0);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2280      	movs	r2, #128	@ 0x80
 8003a18:	0612      	lsls	r2, r2, #24
 8003a1a:	405a      	eors	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a05      	ldr	r2, [pc, #20]	@ (8003a40 <HighPassFilter_Init+0x70>)
 8003a2c:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a03      	ldr	r2, [pc, #12]	@ (8003a40 <HighPassFilter_Init+0x70>)
 8003a32:	615a      	str	r2, [r3, #20]
}
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	bf800000 	.word	0xbf800000
 8003a40:	7fc00000 	.word	0x7fc00000

08003a44 <HighPassFilter_InitWithCutoff>:

/* Initialize High Pass Filter with cutoff and sampling frequency */
void HighPassFilter_InitWithCutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
    HighPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fcbd 	bl	80033d0 <__aeabi_f2d>
 8003a56:	0004      	movs	r4, r0
 8003a58:	000d      	movs	r5, r1
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1c19      	adds	r1, r3, #0
 8003a5e:	1c18      	adds	r0, r3, #0
 8003a60:	f7fc fee4 	bl	800082c <__aeabi_fadd>
 8003a64:	1c03      	adds	r3, r0, #0
 8003a66:	1c18      	adds	r0, r3, #0
 8003a68:	f7ff fcb2 	bl	80033d0 <__aeabi_f2d>
 8003a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa0 <HighPassFilter_InitWithCutoff+0x5c>)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <HighPassFilter_InitWithCutoff+0x60>)
 8003a70:	f7fe fd9a 	bl	80025a8 <__aeabi_dmul>
 8003a74:	0002      	movs	r2, r0
 8003a76:	000b      	movs	r3, r1
 8003a78:	0020      	movs	r0, r4
 8003a7a:	0029      	movs	r1, r5
 8003a7c:	f7fe f950 	bl	8001d20 <__aeabi_ddiv>
 8003a80:	0002      	movs	r2, r0
 8003a82:	000b      	movs	r3, r1
 8003a84:	0010      	movs	r0, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	f7ff fcea 	bl	8003460 <__aeabi_d2f>
 8003a8c:	1c02      	adds	r2, r0, #0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1c11      	adds	r1, r2, #0
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7ff ff9c 	bl	80039d0 <HighPassFilter_Init>
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	54442d18 	.word	0x54442d18
 8003aa4:	400921fb 	.word	0x400921fb

08003aa8 <HighPassFilter_Reset>:
    filter->last_raw_value = value;
    return filter->last_filter_value;
}

/* Reset High Pass Filter */
void HighPassFilter_Reset(HighPassFilter* filter) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = NAN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <HighPassFilter_Reset+0x1c>)
 8003ab4:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = NAN;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a02      	ldr	r2, [pc, #8]	@ (8003ac4 <HighPassFilter_Reset+0x1c>)
 8003aba:	611a      	str	r2, [r3, #16]
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	7fc00000 	.word	0x7fc00000

08003ac8 <LowPassFilter_Init>:
    float kB1;
    float last_value;
} LowPassFilter;

/* Initialize Low Pass Filter with samples */
void LowPassFilter_Init(LowPassFilter* filter, float samples) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    filter->kX = expf(-1 / samples);
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	480f      	ldr	r0, [pc, #60]	@ (8003b14 <LowPassFilter_Init+0x4c>)
 8003ad6:	f7fd f833 	bl	8000b40 <__aeabi_fdiv>
 8003ada:	1c03      	adds	r3, r0, #0
 8003adc:	1c18      	adds	r0, r3, #0
 8003ade:	f00f fbcb 	bl	8013278 <expf>
 8003ae2:	1c02      	adds	r2, r0, #0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1c19      	adds	r1, r3, #0
 8003aee:	20fe      	movs	r0, #254	@ 0xfe
 8003af0:	0580      	lsls	r0, r0, #22
 8003af2:	f7fd fb49 	bl	8001188 <__aeabi_fsub>
 8003af6:	1c03      	adds	r3, r0, #0
 8003af8:	1c1a      	adds	r2, r3, #0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a03      	ldr	r2, [pc, #12]	@ (8003b18 <LowPassFilter_Init+0x50>)
 8003b0a:	60da      	str	r2, [r3, #12]
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	bf800000 	.word	0xbf800000
 8003b18:	7fc00000 	.word	0x7fc00000

08003b1c <LowPassFilter_InitWithCutoff>:

/* Initialize Low Pass Filter with cutoff and sampling frequency */
void LowPassFilter_InitWithCutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
    LowPassFilter_Init(filter, sampling_frequency / (cutoff * 2 * PI));
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fc51 	bl	80033d0 <__aeabi_f2d>
 8003b2e:	0004      	movs	r4, r0
 8003b30:	000d      	movs	r5, r1
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1c19      	adds	r1, r3, #0
 8003b36:	1c18      	adds	r0, r3, #0
 8003b38:	f7fc fe78 	bl	800082c <__aeabi_fadd>
 8003b3c:	1c03      	adds	r3, r0, #0
 8003b3e:	1c18      	adds	r0, r3, #0
 8003b40:	f7ff fc46 	bl	80033d0 <__aeabi_f2d>
 8003b44:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <LowPassFilter_InitWithCutoff+0x5c>)
 8003b46:	4b0d      	ldr	r3, [pc, #52]	@ (8003b7c <LowPassFilter_InitWithCutoff+0x60>)
 8003b48:	f7fe fd2e 	bl	80025a8 <__aeabi_dmul>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	000b      	movs	r3, r1
 8003b50:	0020      	movs	r0, r4
 8003b52:	0029      	movs	r1, r5
 8003b54:	f7fe f8e4 	bl	8001d20 <__aeabi_ddiv>
 8003b58:	0002      	movs	r2, r0
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	f7ff fc7e 	bl	8003460 <__aeabi_d2f>
 8003b64:	1c02      	adds	r2, r0, #0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1c11      	adds	r1, r2, #0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff ffac 	bl	8003ac8 <LowPassFilter_Init>
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bdb0      	pop	{r4, r5, r7, pc}
 8003b78:	54442d18 	.word	0x54442d18
 8003b7c:	400921fb 	.word	0x400921fb

08003b80 <LowPassFilter_Process>:

/* Apply Low Pass Filter */
float LowPassFilter_Process(LowPassFilter* filter, float value) {
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  if (isnan(filter->last_value)) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	1c19      	adds	r1, r3, #0
 8003b90:	1c18      	adds	r0, r3, #0
 8003b92:	f7fd fc9d 	bl	80014d0 <__aeabi_fcmpun>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d003      	beq.n	8003ba2 <LowPassFilter_Process+0x22>
       filter->last_value = value;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e018      	b.n	8003bd4 <LowPassFilter_Process+0x54>
   } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	1c18      	adds	r0, r3, #0
 8003baa:	f7fd f9af 	bl	8000f0c <__aeabi_fmul>
 8003bae:	1c03      	adds	r3, r0, #0
 8003bb0:	1c1c      	adds	r4, r3, #0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	1c19      	adds	r1, r3, #0
 8003bbc:	1c10      	adds	r0, r2, #0
 8003bbe:	f7fd f9a5 	bl	8000f0c <__aeabi_fmul>
 8003bc2:	1c03      	adds	r3, r0, #0
 8003bc4:	1c19      	adds	r1, r3, #0
 8003bc6:	1c20      	adds	r0, r4, #0
 8003bc8:	f7fc fe30 	bl	800082c <__aeabi_fadd>
 8003bcc:	1c03      	adds	r3, r0, #0
 8003bce:	1c1a      	adds	r2, r3, #0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
   }
    return filter->last_value;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
}
 8003bd8:	1c18      	adds	r0, r3, #0
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd90      	pop	{r4, r7, pc}

08003be0 <LowPassFilter_Reset>:

/* Reset Low Pass Filter */
void LowPassFilter_Reset(LowPassFilter* filter) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    filter->last_value = NAN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a03      	ldr	r2, [pc, #12]	@ (8003bf8 <LowPassFilter_Reset+0x18>)
 8003bec:	60da      	str	r2, [r3, #12]
}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	7fc00000 	.word	0x7fc00000

08003bfc <Differentiator_Init>:
    float sampling_frequency;
    float last_value;
} Differentiator;

/* Initialize Differentiator */
void Differentiator_Init(Differentiator* diff, float sampling_frequency) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
    diff->sampling_frequency = sampling_frequency;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a03      	ldr	r2, [pc, #12]	@ (8003c1c <Differentiator_Init+0x20>)
 8003c10:	605a      	str	r2, [r3, #4]
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	7fc00000 	.word	0x7fc00000

08003c20 <Differentiator_Process>:

/* Apply Differentiator */
float Differentiator_Process(Differentiator* diff, float value) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
    if (isnan(diff->last_value)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	1c19      	adds	r1, r3, #0
 8003c30:	1c18      	adds	r0, r3, #0
 8003c32:	f7fd fc4d 	bl	80014d0 <__aeabi_fcmpun>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d004      	beq.n	8003c44 <Differentiator_Process+0x24>
        diff->last_value = value;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
        return 0.0;  // No change in the first iteration
 8003c40:	2300      	movs	r3, #0
 8003c42:	e013      	b.n	8003c6c <Differentiator_Process+0x4c>
    }
    float result = (value - diff->last_value) * diff->sampling_frequency;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	1c19      	adds	r1, r3, #0
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f7fd fa9c 	bl	8001188 <__aeabi_fsub>
 8003c50:	1c03      	adds	r3, r0, #0
 8003c52:	1c1a      	adds	r2, r3, #0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1c19      	adds	r1, r3, #0
 8003c5a:	1c10      	adds	r0, r2, #0
 8003c5c:	f7fd f956 	bl	8000f0c <__aeabi_fmul>
 8003c60:	1c03      	adds	r3, r0, #0
 8003c62:	60fb      	str	r3, [r7, #12]
    diff->last_value = value;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	605a      	str	r2, [r3, #4]
    return result;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	1c18      	adds	r0, r3, #0
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <Differentiator_Reset>:

/* Reset Differentiator */
void Differentiator_Reset(Differentiator* diff) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    diff->last_value = NAN;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a03      	ldr	r2, [pc, #12]	@ (8003c8c <Differentiator_Reset+0x18>)
 8003c80:	605a      	str	r2, [r3, #4]
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	7fc00000 	.word	0x7fc00000

08003c90 <MovingAverageFilter_Init>:
    int buffer_size;
    float* values;
} MovingAverageFilter;

/* Initialize Moving Average Filter */
void MovingAverageFilter_Init(MovingAverageFilter* filter, float* buffer, int buffer_size) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
    filter->index = 0;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    filter->values = buffer;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	60da      	str	r2, [r3, #12]
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b004      	add	sp, #16
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <MovingAverageFilter_Process>:

/* Apply Moving Average Filter */
float MovingAverageFilter_Process(MovingAverageFilter* filter, float value) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    filter->values[filter->index] = value;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	18d3      	adds	r3, r2, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
    filter->index = (filter->index + 1) % filter->buffer_size;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	0010      	movs	r0, r2
 8003ce4:	f7fc fb9c 	bl	8000420 <__aeabi_idivmod>
 8003ce8:	000b      	movs	r3, r1
 8003cea:	001a      	movs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
    if (filter->count < filter->buffer_size) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	da04      	bge.n	8003d06 <MovingAverageFilter_Process+0x4a>
        filter->count++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	605a      	str	r2, [r3, #4]
    }

    float sum = 0.0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	e00e      	b.n	8003d2e <MovingAverageFilter_Process+0x72>
        sum += filter->values[i];
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	18d3      	adds	r3, r2, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c19      	adds	r1, r3, #0
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fc fd84 	bl	800082c <__aeabi_fadd>
 8003d24:	1c03      	adds	r3, r0, #0
 8003d26:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->count; i++) {
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dbeb      	blt.n	8003d10 <MovingAverageFilter_Process+0x54>
    }
    return sum / filter->count;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7fd fbfd 	bl	800153c <__aeabi_i2f>
 8003d42:	1c03      	adds	r3, r0, #0
 8003d44:	1c19      	adds	r1, r3, #0
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7fc fefa 	bl	8000b40 <__aeabi_fdiv>
 8003d4c:	1c03      	adds	r3, r0, #0
}
 8003d4e:	1c18      	adds	r0, r3, #0
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <MovingAverageFilter_Reset>:

/* Reset Moving Average Filter */
void MovingAverageFilter_Reset(MovingAverageFilter* filter) {
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
    filter->index = 0;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <send_uart>:
static void MX_SPI2_Init(void);

LowPassFilter low_pass_filter_red;
LowPassFilter low_pass_filter_ir;

void send_uart(char *message) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    if (huart2.Instance != NULL) {
 8003d7c:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <send_uart+0x30>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <send_uart+0x28>
        HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fc f9be 	bl	8000108 <strlen>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	2301      	movs	r3, #1
 8003d92:	425b      	negs	r3, r3
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4803      	ldr	r0, [pc, #12]	@ (8003da4 <send_uart+0x30>)
 8003d98:	f004 f9a8 	bl	80080ec <HAL_UART_Transmit>
    }
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000970 	.word	0x20000970

08003da8 <log_data_to_sd>:


// SD Card Logging Function
// SD Card Logging Function with Improved Mounting
void log_data_to_sd(char *message) {
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b095      	sub	sp, #84	@ 0x54
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    if (osMutexWait(sdCardMutex, osWaitForever) != osOK) {
 8003db0:	4b64      	ldr	r3, [pc, #400]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4252      	negs	r2, r2
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f008 fafa 	bl	800c3b4 <osMutexWait>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d004      	beq.n	8003dce <log_data_to_sd+0x26>
        send_uart("Failed to acquire SD card mutex.\n\r");
 8003dc4:	4b60      	ldr	r3, [pc, #384]	@ (8003f48 <log_data_to_sd+0x1a0>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff ffd4 	bl	8003d74 <send_uart>
        return;
 8003dcc:	e0b7      	b.n	8003f3e <log_data_to_sd+0x196>
    }

    // Initialize the log file if not done already
    if (!log_file_initialized) {
 8003dce:	4b5f      	ldr	r3, [pc, #380]	@ (8003f4c <log_data_to_sd+0x1a4>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4053      	eors	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d060      	beq.n	8003e9e <log_data_to_sd+0xf6>
        send_uart("Mounting SD card and clearing log file...\n\r");
 8003ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <log_data_to_sd+0x1a8>)
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff ffc8 	bl	8003d74 <send_uart>
        fres = f_mount(&FatFs, "", 1);
 8003de4:	495b      	ldr	r1, [pc, #364]	@ (8003f54 <log_data_to_sd+0x1ac>)
 8003de6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <log_data_to_sd+0x1b0>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	0018      	movs	r0, r3
 8003dec:	f007 fbfe 	bl	800b5ec <f_mount>
 8003df0:	0003      	movs	r3, r0
 8003df2:	001a      	movs	r2, r3
 8003df4:	4b59      	ldr	r3, [pc, #356]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003df6:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 8003df8:	4b58      	ldr	r3, [pc, #352]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d011      	beq.n	8003e24 <log_data_to_sd+0x7c>
            char errorMsg[64];
            snprintf(errorMsg, sizeof(errorMsg), "SD card mount failed: %d\n\r", fres);
 8003e00:	4b56      	ldr	r3, [pc, #344]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4a56      	ldr	r2, [pc, #344]	@ (8003f60 <log_data_to_sd+0x1b8>)
 8003e06:	240c      	movs	r4, #12
 8003e08:	1938      	adds	r0, r7, r4
 8003e0a:	2140      	movs	r1, #64	@ 0x40
 8003e0c:	f00b fce6 	bl	800f7dc <sniprintf>
            send_uart(errorMsg);
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff ffae 	bl	8003d74 <send_uart>
            osMutexRelease(sdCardMutex);
 8003e18:	4b4a      	ldr	r3, [pc, #296]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f008 fb13 	bl	800c448 <osMutexRelease>
 8003e22:	e08c      	b.n	8003f3e <log_data_to_sd+0x196>
            return;
        }

        // Delete existing log file to start fresh
        fres = f_unlink("log.txt");
 8003e24:	4b4f      	ldr	r3, [pc, #316]	@ (8003f64 <log_data_to_sd+0x1bc>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f008 f8ba 	bl	800bfa0 <f_unlink>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	001a      	movs	r2, r3
 8003e30:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e32:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK && fres != FR_NO_FILE) {
 8003e34:	4b49      	ldr	r3, [pc, #292]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <log_data_to_sd+0xb0>
 8003e3c:	4b47      	ldr	r3, [pc, #284]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d009      	beq.n	8003e58 <log_data_to_sd+0xb0>
            send_uart("Failed to delete old log file.\n\r");
 8003e44:	4b48      	ldr	r3, [pc, #288]	@ (8003f68 <log_data_to_sd+0x1c0>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff ff94 	bl	8003d74 <send_uart>
            osMutexRelease(sdCardMutex);
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f008 faf9 	bl	800c448 <osMutexRelease>
            return;
 8003e56:	e072      	b.n	8003f3e <log_data_to_sd+0x196>
        }

        // Create a new log file
        fres = f_open(&fil, "log.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8003e58:	4942      	ldr	r1, [pc, #264]	@ (8003f64 <log_data_to_sd+0x1bc>)
 8003e5a:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003e5c:	220a      	movs	r2, #10
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f007 fc2c 	bl	800b6bc <f_open>
 8003e64:	0003      	movs	r3, r0
 8003e66:	001a      	movs	r2, r3
 8003e68:	4b3c      	ldr	r3, [pc, #240]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e6a:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <log_data_to_sd+0xe0>
            send_uart("Failed to create new log file.\n\r");
 8003e74:	4b3e      	ldr	r3, [pc, #248]	@ (8003f70 <log_data_to_sd+0x1c8>)
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff ff7c 	bl	8003d74 <send_uart>
            osMutexRelease(sdCardMutex);
 8003e7c:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f008 fae1 	bl	800c448 <osMutexRelease>
            return;
 8003e86:	e05a      	b.n	8003f3e <log_data_to_sd+0x196>
        }
        send_uart("Log file initialized.\n\r");
 8003e88:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <log_data_to_sd+0x1cc>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7ff ff72 	bl	8003d74 <send_uart>
        f_close(&fil);
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003e92:	0018      	movs	r0, r3
 8003e94:	f008 f84b 	bl	800bf2e <f_close>
        log_file_initialized = true;
 8003e98:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <log_data_to_sd+0x1a4>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
    }

    // Skip logging if message is empty
    if (message == NULL || strlen(message) == 0) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <log_data_to_sd+0x104>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <log_data_to_sd+0x118>
        send_uart("Empty message, skipping logging.\n\r");
 8003eac:	4b32      	ldr	r3, [pc, #200]	@ (8003f78 <log_data_to_sd+0x1d0>)
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff60 	bl	8003d74 <send_uart>
        osMutexRelease(sdCardMutex);
 8003eb4:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f008 fac5 	bl	800c448 <osMutexRelease>
        return;
 8003ebe:	e03e      	b.n	8003f3e <log_data_to_sd+0x196>
    }

    // Open the log file in append mode
    fres = f_open(&fil, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 8003ec0:	4928      	ldr	r1, [pc, #160]	@ (8003f64 <log_data_to_sd+0x1bc>)
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003ec4:	2232      	movs	r2, #50	@ 0x32
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f007 fbf8 	bl	800b6bc <f_open>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	001a      	movs	r2, r3
 8003ed0:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003ed2:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8003ed4:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <log_data_to_sd+0x148>
        send_uart("Failed to open log file for appending.\n\r");
 8003edc:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <log_data_to_sd+0x1d4>)
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7ff ff48 	bl	8003d74 <send_uart>
        osMutexRelease(sdCardMutex);
 8003ee4:	4b17      	ldr	r3, [pc, #92]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f008 faad 	bl	800c448 <osMutexRelease>
        return;
 8003eee:	e026      	b.n	8003f3e <log_data_to_sd+0x196>
    }

    // Write the message to the log file
    UINT bytesWritten;
    fres = f_write(&fil, message, strlen(message), &bytesWritten);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fc f908 	bl	8000108 <strlen>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	234c      	movs	r3, #76	@ 0x4c
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	481a      	ldr	r0, [pc, #104]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003f02:	f007 fdd6 	bl	800bab2 <f_write>
 8003f06:	0003      	movs	r3, r0
 8003f08:	001a      	movs	r2, r3
 8003f0a:	4b14      	ldr	r3, [pc, #80]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003f0c:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK || bytesWritten == 0) {
 8003f0e:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <log_data_to_sd+0x1b4>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <log_data_to_sd+0x174>
 8003f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <log_data_to_sd+0x17c>
        send_uart("Failed to write to log file.\n\r");
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <log_data_to_sd+0x1d8>)
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7ff ff28 	bl	8003d74 <send_uart>
    }

    f_sync(&fil);
 8003f24:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f007 ff6c 	bl	800be04 <f_sync>
    f_close(&fil);
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <log_data_to_sd+0x1c4>)
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f007 fffd 	bl	800bf2e <f_close>
    osMutexRelease(sdCardMutex);
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <log_data_to_sd+0x19c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f008 fa85 	bl	800c448 <osMutexRelease>
}
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b015      	add	sp, #84	@ 0x54
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	200008dc 	.word	0x200008dc
 8003f48:	080135a8 	.word	0x080135a8
 8003f4c:	200008c9 	.word	0x200008c9
 8003f50:	080135cc 	.word	0x080135cc
 8003f54:	080135f8 	.word	0x080135f8
 8003f58:	20000464 	.word	0x20000464
 8003f5c:	200008c8 	.word	0x200008c8
 8003f60:	080135fc 	.word	0x080135fc
 8003f64:	08013618 	.word	0x08013618
 8003f68:	08013620 	.word	0x08013620
 8003f6c:	20000698 	.word	0x20000698
 8003f70:	08013644 	.word	0x08013644
 8003f74:	08013668 	.word	0x08013668
 8003f78:	08013680 	.word	0x08013680
 8003f7c:	080136a4 	.word	0x080136a4
 8003f80:	080136d0 	.word	0x080136d0

08003f84 <init_filters>:





void init_filters(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
    HighPassFilter_InitWithCutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8003f88:	21fc      	movs	r1, #252	@ 0xfc
 8003f8a:	0589      	lsls	r1, r1, #22
 8003f8c:	4a16      	ldr	r2, [pc, #88]	@ (8003fe8 <init_filters+0x64>)
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <init_filters+0x68>)
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fd57 	bl	8003a44 <HighPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_red, kLowPassCutoff, kSamplingFrequency);
 8003f96:	4916      	ldr	r1, [pc, #88]	@ (8003ff0 <init_filters+0x6c>)
 8003f98:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <init_filters+0x64>)
 8003f9a:	4b16      	ldr	r3, [pc, #88]	@ (8003ff4 <init_filters+0x70>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fdbd 	bl	8003b1c <LowPassFilter_InitWithCutoff>
    LowPassFilter_InitWithCutoff(&low_pass_filter_ir, kLowPassCutoff, kSamplingFrequency);
 8003fa2:	4913      	ldr	r1, [pc, #76]	@ (8003ff0 <init_filters+0x6c>)
 8003fa4:	4a10      	ldr	r2, [pc, #64]	@ (8003fe8 <init_filters+0x64>)
 8003fa6:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <init_filters+0x74>)
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff fdb7 	bl	8003b1c <LowPassFilter_InitWithCutoff>
    Differentiator_Init(&differentiator, kSamplingFrequency);
 8003fae:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe8 <init_filters+0x64>)
 8003fb0:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <init_filters+0x78>)
 8003fb2:	1c11      	adds	r1, r2, #0
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff fe21 	bl	8003bfc <Differentiator_Init>

    static float average_buffer_bpm[K_AVERAGING_SAMPLES];
    static float average_buffer_spo2[K_AVERAGING_SAMPLES];
    MovingAverageFilter_Init(&averager_bpm, average_buffer_bpm, K_AVERAGING_SAMPLES);
 8003fba:	4911      	ldr	r1, [pc, #68]	@ (8004000 <init_filters+0x7c>)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <init_filters+0x80>)
 8003fbe:	2264      	movs	r2, #100	@ 0x64
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff fe65 	bl	8003c90 <MovingAverageFilter_Init>
    MovingAverageFilter_Init(&averager_spo2, average_buffer_spo2, K_AVERAGING_SAMPLES);
 8003fc6:	4910      	ldr	r1, [pc, #64]	@ (8004008 <init_filters+0x84>)
 8003fc8:	4b10      	ldr	r3, [pc, #64]	@ (800400c <init_filters+0x88>)
 8003fca:	2264      	movs	r2, #100	@ 0x64
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff fe5f 	bl	8003c90 <MovingAverageFilter_Init>

    MinMaxAvgStatistic_Init(&stat_red);
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <init_filters+0x8c>)
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fc65 	bl	80038a4 <MinMaxAvgStatistic_Init>
    MinMaxAvgStatistic_Init(&stat_ir);
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <init_filters+0x90>)
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fc61 	bl	80038a4 <MinMaxAvgStatistic_Init>
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	43c80000 	.word	0x43c80000
 8003fec:	2000094c 	.word	0x2000094c
 8003ff0:	40400000 	.word	0x40400000
 8003ff4:	200008e4 	.word	0x200008e4
 8003ff8:	200008f4 	.word	0x200008f4
 8003ffc:	20000904 	.word	0x20000904
 8004000:	20000b08 	.word	0x20000b08
 8004004:	2000090c 	.word	0x2000090c
 8004008:	20000c98 	.word	0x20000c98
 800400c:	2000091c 	.word	0x2000091c
 8004010:	2000092c 	.word	0x2000092c
 8004014:	2000093c 	.word	0x2000093c

08004018 <SensorTask>:



// Sensor Task
// Sensor Task
void SensorTask(void const *argument) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    send_uart("SensorTask started\r\n");
 8004020:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <SensorTask+0x44>)
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fea6 	bl	8003d74 <send_uart>
    MAX30102_Init(&hi2c1);
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <SensorTask+0x48>)
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fac6 	bl	80035bc <MAX30102_Init>

    while (1) {
       // MAX30102_Data sensorData;
        MAX30102_ReadFifo(&hi2c1, &sensorData);
 8004030:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <SensorTask+0x4c>)
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <SensorTask+0x48>)
 8004034:	0011      	movs	r1, r2
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff faf0 	bl	800361c <MAX30102_ReadFifo>
//        char rawMessage[64];
//        snprintf(rawMessage, sizeof(rawMessage), "Raw Red: %d, Raw IR: %d\r\n", (int)sensorData.red, (int)sensorData.ir);
       // send_uart(rawMessage);

        // Send data to processing task
        if (osSemaphoreRelease(dataReadySemaphore) == osOK) {
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <SensorTask+0x50>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0018      	movs	r0, r3
 8004042:	f008 fab1 	bl	800c5a8 <osSemaphoreRelease>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d1f2      	bne.n	8004030 <SensorTask+0x18>
            osMessagePut(dataQueue, (uint32_t)&sensorData, osWaitForever);
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <SensorTask+0x54>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4905      	ldr	r1, [pc, #20]	@ (8004064 <SensorTask+0x4c>)
 8004050:	2201      	movs	r2, #1
 8004052:	4252      	negs	r2, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f008 fb15 	bl	800c684 <osMessagePut>
        MAX30102_ReadFifo(&hi2c1, &sensorData);
 800405a:	e7e9      	b.n	8004030 <SensorTask+0x18>
 800405c:	080136f0 	.word	0x080136f0
 8004060:	200009f8 	.word	0x200009f8
 8004064:	2000096c 	.word	0x2000096c
 8004068:	200008d8 	.word	0x200008d8
 800406c:	200008e0 	.word	0x200008e0

08004070 <ProcessingTask>:



// Processing Task
// Processing Task
void ProcessingTask(void const *argument) {
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b0ae      	sub	sp, #184	@ 0xb8
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
    send_uart("ProcessingTask started\r\n");
 8004078:	4bb4      	ldr	r3, [pc, #720]	@ (800434c <ProcessingTask+0x2dc>)
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fe7a 	bl	8003d74 <send_uart>

    while (1) {
        osSemaphoreWait(dataReadySemaphore, osWaitForever);
 8004080:	4bb3      	ldr	r3, [pc, #716]	@ (8004350 <ProcessingTask+0x2e0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	4252      	negs	r2, r2
 8004088:	0011      	movs	r1, r2
 800408a:	0018      	movs	r0, r3
 800408c:	f008 fa42 	bl	800c514 <osSemaphoreWait>

        // Check if temperature interrupt flag is set
        if (temp_interrupt_flag) {
 8004090:	4bb0      	ldr	r3, [pc, #704]	@ (8004354 <ProcessingTask+0x2e4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d024      	beq.n	80040e4 <ProcessingTask+0x74>
            temp_interrupt_flag = false;
 800409a:	4bae      	ldr	r3, [pc, #696]	@ (8004354 <ProcessingTask+0x2e4>)
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
            HAL_Delay(30);
 80040a0:	201e      	movs	r0, #30
 80040a2:	f001 f85d 	bl	8005160 <HAL_Delay>
            float temperature = MAX30102_ReadTemperature(&hi2c1);
 80040a6:	4bac      	ldr	r3, [pc, #688]	@ (8004358 <ProcessingTask+0x2e8>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff fb9f 	bl	80037ec <MAX30102_ReadTemperature>
 80040ae:	1c03      	adds	r3, r0, #0
 80040b0:	22a4      	movs	r2, #164	@ 0xa4
 80040b2:	18b9      	adds	r1, r7, r2
 80040b4:	600b      	str	r3, [r1, #0]
            char temp_message[64];
            snprintf(temp_message, sizeof(temp_message), "Temperature: %.2f°C\r\n", temperature);
 80040b6:	18bb      	adds	r3, r7, r2
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f7ff f989 	bl	80033d0 <__aeabi_f2d>
 80040be:	0002      	movs	r2, r0
 80040c0:	000b      	movs	r3, r1
 80040c2:	49a6      	ldr	r1, [pc, #664]	@ (800435c <ProcessingTask+0x2ec>)
 80040c4:	240c      	movs	r4, #12
 80040c6:	1938      	adds	r0, r7, r4
 80040c8:	9200      	str	r2, [sp, #0]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	000a      	movs	r2, r1
 80040ce:	2140      	movs	r1, #64	@ 0x40
 80040d0:	f00b fb84 	bl	800f7dc <sniprintf>
            send_uart(temp_message);
 80040d4:	193b      	adds	r3, r7, r4
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff fe4c 	bl	8003d74 <send_uart>
            log_data_to_sd(temp_message);
 80040dc:	193b      	adds	r3, r7, r4
 80040de:	0018      	movs	r0, r3
 80040e0:	f7ff fe62 	bl	8003da8 <log_data_to_sd>
        }

        // Apply low-pass filters
        float redFiltered = LowPassFilter_Process(&low_pass_filter_red, (float)sensorData.red);
 80040e4:	4b9e      	ldr	r3, [pc, #632]	@ (8004360 <ProcessingTask+0x2f0>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fd fa73 	bl	80015d4 <__aeabi_ui2f>
 80040ee:	1c02      	adds	r2, r0, #0
 80040f0:	4b9c      	ldr	r3, [pc, #624]	@ (8004364 <ProcessingTask+0x2f4>)
 80040f2:	1c11      	adds	r1, r2, #0
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fd43 	bl	8003b80 <LowPassFilter_Process>
 80040fa:	1c03      	adds	r3, r0, #0
 80040fc:	24a0      	movs	r4, #160	@ 0xa0
 80040fe:	193a      	adds	r2, r7, r4
 8004100:	6013      	str	r3, [r2, #0]
        float irFiltered = LowPassFilter_Process(&low_pass_filter_ir, (float)sensorData.ir);
 8004102:	4b97      	ldr	r3, [pc, #604]	@ (8004360 <ProcessingTask+0x2f0>)
 8004104:	885b      	ldrh	r3, [r3, #2]
 8004106:	0018      	movs	r0, r3
 8004108:	f7fd fa64 	bl	80015d4 <__aeabi_ui2f>
 800410c:	1c02      	adds	r2, r0, #0
 800410e:	4b96      	ldr	r3, [pc, #600]	@ (8004368 <ProcessingTask+0x2f8>)
 8004110:	1c11      	adds	r1, r2, #0
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fd34 	bl	8003b80 <LowPassFilter_Process>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	259c      	movs	r5, #156	@ 0x9c
 800411c:	197a      	adds	r2, r7, r5
 800411e:	6013      	str	r3, [r2, #0]

        // Debug filter outputs
        if (redFiltered <= 0.0f || irFiltered <= 0.0f) {
 8004120:	2100      	movs	r1, #0
 8004122:	193b      	adds	r3, r7, r4
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	f7fc f9db 	bl	80004e0 <__aeabi_fcmple>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d106      	bne.n	800413c <ProcessingTask+0xcc>
 800412e:	2100      	movs	r1, #0
 8004130:	197b      	adds	r3, r7, r5
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	f7fc f9d4 	bl	80004e0 <__aeabi_fcmple>
 8004138:	1e03      	subs	r3, r0, #0
 800413a:	d006      	beq.n	800414a <ProcessingTask+0xda>
            send_uart("Invalid filtered values. Resetting filters.\r\n");
 800413c:	4b8b      	ldr	r3, [pc, #556]	@ (800436c <ProcessingTask+0x2fc>)
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff fe18 	bl	8003d74 <send_uart>
            reset_filters();
 8004144:	f000 fb4e 	bl	80047e4 <reset_filters>
            continue;
 8004148:	e0fe      	b.n	8004348 <ProcessingTask+0x2d8>
        }

        float current_diff = Differentiator_Process(&differentiator, redFiltered);
 800414a:	24a0      	movs	r4, #160	@ 0xa0
 800414c:	193b      	adds	r3, r7, r4
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b87      	ldr	r3, [pc, #540]	@ (8004370 <ProcessingTask+0x300>)
 8004152:	1c11      	adds	r1, r2, #0
 8004154:	0018      	movs	r0, r3
 8004156:	f7ff fd63 	bl	8003c20 <Differentiator_Process>
 800415a:	1c03      	adds	r3, r0, #0
 800415c:	2598      	movs	r5, #152	@ 0x98
 800415e:	197a      	adds	r2, r7, r5
 8004160:	6013      	str	r3, [r2, #0]
        MinMaxAvgStatistic_Process(&stat_red, redFiltered);
 8004162:	193b      	adds	r3, r7, r4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b83      	ldr	r3, [pc, #524]	@ (8004374 <ProcessingTask+0x304>)
 8004168:	1c11      	adds	r1, r2, #0
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff fbb0 	bl	80038d0 <MinMaxAvgStatistic_Process>
        MinMaxAvgStatistic_Process(&stat_ir, irFiltered);
 8004170:	249c      	movs	r4, #156	@ 0x9c
 8004172:	193b      	adds	r3, r7, r4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b80      	ldr	r3, [pc, #512]	@ (8004378 <ProcessingTask+0x308>)
 8004178:	1c11      	adds	r1, r2, #0
 800417a:	0018      	movs	r0, r3
 800417c:	f7ff fba8 	bl	80038d0 <MinMaxAvgStatistic_Process>

        // Heartbeat Detection
        detect_heartbeat(HAL_GetTick(), current_diff, irFiltered);
 8004180:	f000 ffe4 	bl	800514c <HAL_GetTick>
 8004184:	193b      	adds	r3, r7, r4
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	197b      	adds	r3, r7, r5
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1c19      	adds	r1, r3, #0
 800418e:	f000 f907 	bl	80043a0 <detect_heartbeat>

        // BPM Calculation
        uint32_t current_time = HAL_GetTick();
 8004192:	f000 ffdb 	bl	800514c <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	2294      	movs	r2, #148	@ 0x94
 800419a:	18b9      	adds	r1, r7, r2
 800419c:	600b      	str	r3, [r1, #0]
        uint32_t time_diff = current_time - last_heartbeat;
 800419e:	4b77      	ldr	r3, [pc, #476]	@ (800437c <ProcessingTask+0x30c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	18ba      	adds	r2, r7, r2
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2190      	movs	r1, #144	@ 0x90
 80041aa:	187a      	adds	r2, r7, r1
 80041ac:	6013      	str	r3, [r2, #0]
        uint32_t bpm = (time_diff > 500 && time_diff < 2000) ? 60000 / time_diff : 0;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	23fa      	movs	r3, #250	@ 0xfa
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90c      	bls.n	80041d4 <ProcessingTask+0x164>
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	23fa      	movs	r3, #250	@ 0xfa
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d206      	bcs.n	80041d4 <ProcessingTask+0x164>
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	486d      	ldr	r0, [pc, #436]	@ (8004380 <ProcessingTask+0x310>)
 80041cc:	f7fb ffb8 	bl	8000140 <__udivsi3>
 80041d0:	0003      	movs	r3, r0
 80041d2:	e000      	b.n	80041d6 <ProcessingTask+0x166>
 80041d4:	2300      	movs	r3, #0
 80041d6:	22ac      	movs	r2, #172	@ 0xac
 80041d8:	18b9      	adds	r1, r7, r2
 80041da:	600b      	str	r3, [r1, #0]

        // Validate BPM
        if (bpm < 50 || bpm > 150) {
 80041dc:	18bb      	adds	r3, r7, r2
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b31      	cmp	r3, #49	@ 0x31
 80041e2:	d903      	bls.n	80041ec <ProcessingTask+0x17c>
 80041e4:	18bb      	adds	r3, r7, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b96      	cmp	r3, #150	@ 0x96
 80041ea:	d903      	bls.n	80041f4 <ProcessingTask+0x184>
            bpm = 0;  // Discard unrealistic BPM values
 80041ec:	2300      	movs	r3, #0
 80041ee:	22ac      	movs	r2, #172	@ 0xac
 80041f0:	18ba      	adds	r2, r7, r2
 80041f2:	6013      	str	r3, [r2, #0]
        }

        // SpO2 Calculation
        float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 80041f4:	4b5f      	ldr	r3, [pc, #380]	@ (8004374 <ProcessingTask+0x304>)
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7ff fbca 	bl	8003990 <MinMaxAvgStatistic_Maximum>
 80041fc:	1c04      	adds	r4, r0, #0
 80041fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004374 <ProcessingTask+0x304>)
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff fbbb 	bl	800397c <MinMaxAvgStatistic_Minimum>
 8004206:	1c03      	adds	r3, r0, #0
 8004208:	1c19      	adds	r1, r3, #0
 800420a:	1c20      	adds	r0, r4, #0
 800420c:	f7fc ffbc 	bl	8001188 <__aeabi_fsub>
 8004210:	1c03      	adds	r3, r0, #0
 8004212:	1c1c      	adds	r4, r3, #0
                  MinMaxAvgStatistic_Average(&stat_red);
 8004214:	4b57      	ldr	r3, [pc, #348]	@ (8004374 <ProcessingTask+0x304>)
 8004216:	0018      	movs	r0, r3
 8004218:	f7ff fbc4 	bl	80039a4 <MinMaxAvgStatistic_Average>
 800421c:	1c03      	adds	r3, r0, #0
        float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 800421e:	1c19      	adds	r1, r3, #0
 8004220:	1c20      	adds	r0, r4, #0
 8004222:	f7fc fc8d 	bl	8000b40 <__aeabi_fdiv>
 8004226:	1c03      	adds	r3, r0, #0
 8004228:	258c      	movs	r5, #140	@ 0x8c
 800422a:	197a      	adds	r2, r7, r5
 800422c:	6013      	str	r3, [r2, #0]
        r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 800422e:	4b52      	ldr	r3, [pc, #328]	@ (8004378 <ProcessingTask+0x308>)
 8004230:	0018      	movs	r0, r3
 8004232:	f7ff fbad 	bl	8003990 <MinMaxAvgStatistic_Maximum>
 8004236:	1c04      	adds	r4, r0, #0
 8004238:	4b4f      	ldr	r3, [pc, #316]	@ (8004378 <ProcessingTask+0x308>)
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff fb9e 	bl	800397c <MinMaxAvgStatistic_Minimum>
 8004240:	1c03      	adds	r3, r0, #0
 8004242:	1c19      	adds	r1, r3, #0
 8004244:	1c20      	adds	r0, r4, #0
 8004246:	f7fc ff9f 	bl	8001188 <__aeabi_fsub>
 800424a:	1c03      	adds	r3, r0, #0
 800424c:	1c1c      	adds	r4, r3, #0
             MinMaxAvgStatistic_Average(&stat_ir);
 800424e:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <ProcessingTask+0x308>)
 8004250:	0018      	movs	r0, r3
 8004252:	f7ff fba7 	bl	80039a4 <MinMaxAvgStatistic_Average>
 8004256:	1c03      	adds	r3, r0, #0
        r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 8004258:	1c19      	adds	r1, r3, #0
 800425a:	1c20      	adds	r0, r4, #0
 800425c:	f7fc fc70 	bl	8000b40 <__aeabi_fdiv>
 8004260:	1c03      	adds	r3, r0, #0
 8004262:	1c19      	adds	r1, r3, #0
 8004264:	197b      	adds	r3, r7, r5
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	f7fc fc6a 	bl	8000b40 <__aeabi_fdiv>
 800426c:	1c03      	adds	r3, r0, #0
 800426e:	197a      	adds	r2, r7, r5
 8004270:	6013      	str	r3, [r2, #0]

        float spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 8004272:	4b44      	ldr	r3, [pc, #272]	@ (8004384 <ProcessingTask+0x314>)
 8004274:	197a      	adds	r2, r7, r5
 8004276:	6811      	ldr	r1, [r2, #0]
 8004278:	1c18      	adds	r0, r3, #0
 800427a:	f7fc fe47 	bl	8000f0c <__aeabi_fmul>
 800427e:	1c03      	adds	r3, r0, #0
 8004280:	197a      	adds	r2, r7, r5
 8004282:	6811      	ldr	r1, [r2, #0]
 8004284:	1c18      	adds	r0, r3, #0
 8004286:	f7fc fe41 	bl	8000f0c <__aeabi_fmul>
 800428a:	1c03      	adds	r3, r0, #0
 800428c:	1c1c      	adds	r4, r3, #0
 800428e:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <ProcessingTask+0x318>)
 8004290:	197a      	adds	r2, r7, r5
 8004292:	6811      	ldr	r1, [r2, #0]
 8004294:	1c18      	adds	r0, r3, #0
 8004296:	f7fc fe39 	bl	8000f0c <__aeabi_fmul>
 800429a:	1c03      	adds	r3, r0, #0
 800429c:	1c19      	adds	r1, r3, #0
 800429e:	1c20      	adds	r0, r4, #0
 80042a0:	f7fc fac4 	bl	800082c <__aeabi_fadd>
 80042a4:	1c03      	adds	r3, r0, #0
 80042a6:	1c1a      	adds	r2, r3, #0
 80042a8:	4b38      	ldr	r3, [pc, #224]	@ (800438c <ProcessingTask+0x31c>)
 80042aa:	1c19      	adds	r1, r3, #0
 80042ac:	1c10      	adds	r0, r2, #0
 80042ae:	f7fc fabd 	bl	800082c <__aeabi_fadd>
 80042b2:	1c03      	adds	r3, r0, #0
 80042b4:	24a8      	movs	r4, #168	@ 0xa8
 80042b6:	193a      	adds	r2, r7, r4
 80042b8:	6013      	str	r3, [r2, #0]

        // Validate SpO2
        if (isnan(spo2) || spo2 < 80.0f || spo2 > 100.0f) {
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f7fd f905 	bl	80014d0 <__aeabi_fcmpun>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d10d      	bne.n	80042e6 <ProcessingTask+0x276>
 80042ca:	4931      	ldr	r1, [pc, #196]	@ (8004390 <ProcessingTask+0x320>)
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	f7fc f8fc 	bl	80004cc <__aeabi_fcmplt>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d106      	bne.n	80042e6 <ProcessingTask+0x276>
 80042d8:	492e      	ldr	r1, [pc, #184]	@ (8004394 <ProcessingTask+0x324>)
 80042da:	193b      	adds	r3, r7, r4
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	f7fc f909 	bl	80004f4 <__aeabi_fcmpgt>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d003      	beq.n	80042ee <ProcessingTask+0x27e>
            spo2 = 0.0f;
 80042e6:	2300      	movs	r3, #0
 80042e8:	22a8      	movs	r2, #168	@ 0xa8
 80042ea:	18ba      	adds	r2, r7, r2
 80042ec:	6013      	str	r3, [r2, #0]
        }

        // Log Valid Data
        if (bpm != 0 && spo2 != 0.0f) {
 80042ee:	24ac      	movs	r4, #172	@ 0xac
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d023      	beq.n	8004340 <ProcessingTask+0x2d0>
 80042f8:	2100      	movs	r1, #0
 80042fa:	25a8      	movs	r5, #168	@ 0xa8
 80042fc:	197b      	adds	r3, r7, r5
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	f7fc f8de 	bl	80004c0 <__aeabi_fcmpeq>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d11b      	bne.n	8004340 <ProcessingTask+0x2d0>
            char message[128];
            snprintf(message, sizeof(message), "BPM: %lu, SpO2: %.2f%%\r\n", bpm, spo2);
 8004308:	197b      	adds	r3, r7, r5
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	f7ff f860 	bl	80033d0 <__aeabi_f2d>
 8004310:	0002      	movs	r2, r0
 8004312:	000b      	movs	r3, r1
 8004314:	1939      	adds	r1, r7, r4
 8004316:	680c      	ldr	r4, [r1, #0]
 8004318:	491f      	ldr	r1, [pc, #124]	@ (8004398 <ProcessingTask+0x328>)
 800431a:	250c      	movs	r5, #12
 800431c:	1978      	adds	r0, r7, r5
 800431e:	9200      	str	r2, [sp, #0]
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	0023      	movs	r3, r4
 8004324:	000a      	movs	r2, r1
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	f00b fa58 	bl	800f7dc <sniprintf>
            send_uart(message);
 800432c:	002c      	movs	r4, r5
 800432e:	193b      	adds	r3, r7, r4
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff fd1f 	bl	8003d74 <send_uart>
            log_data_to_sd(message);
 8004336:	193b      	adds	r3, r7, r4
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff fd35 	bl	8003da8 <log_data_to_sd>
        if (bpm != 0 && spo2 != 0.0f) {
 800433e:	e003      	b.n	8004348 <ProcessingTask+0x2d8>
        } else {
            send_uart("Skipping invalid BPM or SpO2 log entry.\r\n");
 8004340:	4b16      	ldr	r3, [pc, #88]	@ (800439c <ProcessingTask+0x32c>)
 8004342:	0018      	movs	r0, r3
 8004344:	f7ff fd16 	bl	8003d74 <send_uart>
    while (1) {
 8004348:	e69a      	b.n	8004080 <ProcessingTask+0x10>
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	08013708 	.word	0x08013708
 8004350:	200008d8 	.word	0x200008d8
 8004354:	200008ca 	.word	0x200008ca
 8004358:	200009f8 	.word	0x200009f8
 800435c:	08013724 	.word	0x08013724
 8004360:	2000096c 	.word	0x2000096c
 8004364:	200008e4 	.word	0x200008e4
 8004368:	200008f4 	.word	0x200008f4
 800436c:	0801373c 	.word	0x0801373c
 8004370:	20000904 	.word	0x20000904
 8004374:	2000092c 	.word	0x2000092c
 8004378:	2000093c 	.word	0x2000093c
 800437c:	20000964 	.word	0x20000964
 8004380:	0000ea60 	.word	0x0000ea60
 8004384:	3fcc448f 	.word	0x3fcc448f
 8004388:	c20aa37e 	.word	0xc20aa37e
 800438c:	42e16137 	.word	0x42e16137
 8004390:	42a00000 	.word	0x42a00000
 8004394:	42c80000 	.word	0x42c80000
 8004398:	0801376c 	.word	0x0801376c
 800439c:	08013788 	.word	0x08013788

080043a0 <detect_heartbeat>:
}


char tbuff[100]={0};

void detect_heartbeat(uint32_t current_time, float current_diff, float current_value_ir) {
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b09c      	sub	sp, #112	@ 0x70
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
    if (!isnan(current_diff) && !isnan(last_diff)) {
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68b8      	ldr	r0, [r7, #8]
 80043b0:	f7fd f88e 	bl	80014d0 <__aeabi_fcmpun>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d000      	beq.n	80043ba <detect_heartbeat+0x1a>
 80043b8:	e0eb      	b.n	8004592 <detect_heartbeat+0x1f2>
 80043ba:	4b79      	ldr	r3, [pc, #484]	@ (80045a0 <detect_heartbeat+0x200>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1c19      	adds	r1, r3, #0
 80043c0:	1c18      	adds	r0, r3, #0
 80043c2:	f7fd f885 	bl	80014d0 <__aeabi_fcmpun>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d000      	beq.n	80043cc <detect_heartbeat+0x2c>
 80043ca:	e0e2      	b.n	8004592 <detect_heartbeat+0x1f2>
    	if (last_diff > 0 && current_diff < 0) {
 80043cc:	4b74      	ldr	r3, [pc, #464]	@ (80045a0 <detect_heartbeat+0x200>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2100      	movs	r1, #0
 80043d2:	1c18      	adds	r0, r3, #0
 80043d4:	f7fc f88e 	bl	80004f4 <__aeabi_fcmpgt>
 80043d8:	1e03      	subs	r3, r0, #0
 80043da:	d008      	beq.n	80043ee <detect_heartbeat+0x4e>
 80043dc:	2100      	movs	r1, #0
 80043de:	68b8      	ldr	r0, [r7, #8]
 80043e0:	f7fc f874 	bl	80004cc <__aeabi_fcmplt>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d002      	beq.n	80043ee <detect_heartbeat+0x4e>
            crossed = true;
 80043e8:	4b6e      	ldr	r3, [pc, #440]	@ (80045a4 <detect_heartbeat+0x204>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
        }

        if (crossed && current_diff < kEdgeThreshold) {
 80043ee:	4b6d      	ldr	r3, [pc, #436]	@ (80045a4 <detect_heartbeat+0x204>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d100      	bne.n	80043f8 <detect_heartbeat+0x58>
 80043f6:	e0cc      	b.n	8004592 <detect_heartbeat+0x1f2>
 80043f8:	4b6b      	ldr	r3, [pc, #428]	@ (80045a8 <detect_heartbeat+0x208>)
 80043fa:	1c19      	adds	r1, r3, #0
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f7fc f865 	bl	80004cc <__aeabi_fcmplt>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d100      	bne.n	8004408 <detect_heartbeat+0x68>
 8004406:	e0c4      	b.n	8004592 <detect_heartbeat+0x1f2>
            if (last_heartbeat != 0 && (current_time - last_heartbeat) > 500) {
 8004408:	4b68      	ldr	r3, [pc, #416]	@ (80045ac <detect_heartbeat+0x20c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d100      	bne.n	8004412 <detect_heartbeat+0x72>
 8004410:	e0b7      	b.n	8004582 <detect_heartbeat+0x1e2>
 8004412:	4b66      	ldr	r3, [pc, #408]	@ (80045ac <detect_heartbeat+0x20c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	23fa      	movs	r3, #250	@ 0xfa
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	429a      	cmp	r2, r3
 8004420:	d800      	bhi.n	8004424 <detect_heartbeat+0x84>
 8004422:	e0ae      	b.n	8004582 <detect_heartbeat+0x1e2>
                uint32_t bpm = 60000 / (current_time - last_heartbeat);
 8004424:	4b61      	ldr	r3, [pc, #388]	@ (80045ac <detect_heartbeat+0x20c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	0019      	movs	r1, r3
 800442e:	4860      	ldr	r0, [pc, #384]	@ (80045b0 <detect_heartbeat+0x210>)
 8004430:	f7fb fe86 	bl	8000140 <__udivsi3>
 8004434:	0003      	movs	r3, r0
 8004436:	667b      	str	r3, [r7, #100]	@ 0x64
                sprintf(tbuff,"\n cal bpm=%ld\n",bpm);
 8004438:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800443a:	495e      	ldr	r1, [pc, #376]	@ (80045b4 <detect_heartbeat+0x214>)
 800443c:	4b5e      	ldr	r3, [pc, #376]	@ (80045b8 <detect_heartbeat+0x218>)
 800443e:	0018      	movs	r0, r3
 8004440:	f00b fa00 	bl	800f844 <siprintf>
                                 send_uart(tbuff);
 8004444:	4b5c      	ldr	r3, [pc, #368]	@ (80045b8 <detect_heartbeat+0x218>)
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fc94 	bl	8003d74 <send_uart>
                if (bpm > 50 && bpm < 150) {
 800444c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800444e:	2b32      	cmp	r3, #50	@ 0x32
 8004450:	d800      	bhi.n	8004454 <detect_heartbeat+0xb4>
 8004452:	e096      	b.n	8004582 <detect_heartbeat+0x1e2>
 8004454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004456:	2b95      	cmp	r3, #149	@ 0x95
 8004458:	d900      	bls.n	800445c <detect_heartbeat+0xbc>
 800445a:	e092      	b.n	8004582 <detect_heartbeat+0x1e2>
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 800445c:	4b57      	ldr	r3, [pc, #348]	@ (80045bc <detect_heartbeat+0x21c>)
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff fa96 	bl	8003990 <MinMaxAvgStatistic_Maximum>
 8004464:	1c04      	adds	r4, r0, #0
 8004466:	4b55      	ldr	r3, [pc, #340]	@ (80045bc <detect_heartbeat+0x21c>)
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff fa87 	bl	800397c <MinMaxAvgStatistic_Minimum>
 800446e:	1c03      	adds	r3, r0, #0
 8004470:	1c19      	adds	r1, r3, #0
 8004472:	1c20      	adds	r0, r4, #0
 8004474:	f7fc fe88 	bl	8001188 <__aeabi_fsub>
 8004478:	1c03      	adds	r3, r0, #0
 800447a:	1c1c      	adds	r4, r3, #0
                              MinMaxAvgStatistic_Average(&stat_red);
 800447c:	4b4f      	ldr	r3, [pc, #316]	@ (80045bc <detect_heartbeat+0x21c>)
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff fa90 	bl	80039a4 <MinMaxAvgStatistic_Average>
 8004484:	1c03      	adds	r3, r0, #0
                    float r = (MinMaxAvgStatistic_Maximum(&stat_red) - MinMaxAvgStatistic_Minimum(&stat_red)) /
 8004486:	1c19      	adds	r1, r3, #0
 8004488:	1c20      	adds	r0, r4, #0
 800448a:	f7fc fb59 	bl	8000b40 <__aeabi_fdiv>
 800448e:	1c03      	adds	r3, r0, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <detect_heartbeat+0x220>)
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fa7b 	bl	8003990 <MinMaxAvgStatistic_Maximum>
 800449a:	1c04      	adds	r4, r0, #0
 800449c:	4b48      	ldr	r3, [pc, #288]	@ (80045c0 <detect_heartbeat+0x220>)
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff fa6c 	bl	800397c <MinMaxAvgStatistic_Minimum>
 80044a4:	1c03      	adds	r3, r0, #0
 80044a6:	1c19      	adds	r1, r3, #0
 80044a8:	1c20      	adds	r0, r4, #0
 80044aa:	f7fc fe6d 	bl	8001188 <__aeabi_fsub>
 80044ae:	1c03      	adds	r3, r0, #0
 80044b0:	1c1c      	adds	r4, r3, #0
                         MinMaxAvgStatistic_Average(&stat_ir);
 80044b2:	4b43      	ldr	r3, [pc, #268]	@ (80045c0 <detect_heartbeat+0x220>)
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff fa75 	bl	80039a4 <MinMaxAvgStatistic_Average>
 80044ba:	1c03      	adds	r3, r0, #0
                    r /= (MinMaxAvgStatistic_Maximum(&stat_ir) - MinMaxAvgStatistic_Minimum(&stat_ir)) /
 80044bc:	1c19      	adds	r1, r3, #0
 80044be:	1c20      	adds	r0, r4, #0
 80044c0:	f7fc fb3e 	bl	8000b40 <__aeabi_fdiv>
 80044c4:	1c03      	adds	r3, r0, #0
 80044c6:	1c19      	adds	r1, r3, #0
 80044c8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80044ca:	f7fc fb39 	bl	8000b40 <__aeabi_fdiv>
 80044ce:	1c03      	adds	r3, r0, #0
 80044d0:	663b      	str	r3, [r7, #96]	@ 0x60

                    float spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <detect_heartbeat+0x224>)
 80044d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80044d6:	1c18      	adds	r0, r3, #0
 80044d8:	f7fc fd18 	bl	8000f0c <__aeabi_fmul>
 80044dc:	1c03      	adds	r3, r0, #0
 80044de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80044e0:	1c18      	adds	r0, r3, #0
 80044e2:	f7fc fd13 	bl	8000f0c <__aeabi_fmul>
 80044e6:	1c03      	adds	r3, r0, #0
 80044e8:	1c1c      	adds	r4, r3, #0
 80044ea:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <detect_heartbeat+0x228>)
 80044ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80044ee:	1c18      	adds	r0, r3, #0
 80044f0:	f7fc fd0c 	bl	8000f0c <__aeabi_fmul>
 80044f4:	1c03      	adds	r3, r0, #0
 80044f6:	1c19      	adds	r1, r3, #0
 80044f8:	1c20      	adds	r0, r4, #0
 80044fa:	f7fc f997 	bl	800082c <__aeabi_fadd>
 80044fe:	1c03      	adds	r3, r0, #0
 8004500:	1c1a      	adds	r2, r3, #0
 8004502:	4b32      	ldr	r3, [pc, #200]	@ (80045cc <detect_heartbeat+0x22c>)
 8004504:	1c19      	adds	r1, r3, #0
 8004506:	1c10      	adds	r0, r2, #0
 8004508:	f7fc f990 	bl	800082c <__aeabi_fadd>
 800450c:	1c03      	adds	r3, r0, #0
 800450e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    spo2 = fmaxf(0, fminf(100, spo2));
 8004510:	4a2f      	ldr	r2, [pc, #188]	@ (80045d0 <detect_heartbeat+0x230>)
 8004512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004514:	1c11      	adds	r1, r2, #0
 8004516:	1c18      	adds	r0, r3, #0
 8004518:	f00e fef5 	bl	8013306 <fminf>
 800451c:	1c03      	adds	r3, r0, #0
 800451e:	2200      	movs	r2, #0
 8004520:	1c11      	adds	r1, r2, #0
 8004522:	1c18      	adds	r0, r3, #0
 8004524:	f00e fed9 	bl	80132da <fmaxf>
 8004528:	1c03      	adds	r3, r0, #0
 800452a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                    char message[64];
                    int average_bpm = MovingAverageFilter_Process(&averager_bpm, bpm);
 800452c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800452e:	f7fd f851 	bl	80015d4 <__aeabi_ui2f>
 8004532:	1c02      	adds	r2, r0, #0
 8004534:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <detect_heartbeat+0x234>)
 8004536:	1c11      	adds	r1, r2, #0
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fbbf 	bl	8003cbc <MovingAverageFilter_Process>
 800453e:	1c03      	adds	r3, r0, #0
 8004540:	1c18      	adds	r0, r3, #0
 8004542:	f7fc ffdb 	bl	80014fc <__aeabi_f2iz>
 8004546:	0003      	movs	r3, r0
 8004548:	65bb      	str	r3, [r7, #88]	@ 0x58
                    float average_spo2 = MovingAverageFilter_Process(&averager_spo2, spo2);
 800454a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800454c:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <detect_heartbeat+0x238>)
 800454e:	1c11      	adds	r1, r2, #0
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff fbb3 	bl	8003cbc <MovingAverageFilter_Process>
 8004556:	1c03      	adds	r3, r0, #0
 8004558:	657b      	str	r3, [r7, #84]	@ 0x54

                    snprintf(message, sizeof(message), "Heart Rate: %d bpm, SpO2: %.2f%%\n\r", average_bpm, average_spo2);
 800455a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800455c:	f7fe ff38 	bl	80033d0 <__aeabi_f2d>
 8004560:	0002      	movs	r2, r0
 8004562:	000b      	movs	r3, r1
 8004564:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8004566:	491d      	ldr	r1, [pc, #116]	@ (80045dc <detect_heartbeat+0x23c>)
 8004568:	2514      	movs	r5, #20
 800456a:	1978      	adds	r0, r7, r5
 800456c:	9200      	str	r2, [sp, #0]
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	0023      	movs	r3, r4
 8004572:	000a      	movs	r2, r1
 8004574:	2140      	movs	r1, #64	@ 0x40
 8004576:	f00b f931 	bl	800f7dc <sniprintf>
                    send_uart(message);
 800457a:	197b      	adds	r3, r7, r5
 800457c:	0018      	movs	r0, r3
 800457e:	f7ff fbf9 	bl	8003d74 <send_uart>
                }
            }
            last_heartbeat = current_time;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <detect_heartbeat+0x20c>)
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]
            crossed = false;
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <detect_heartbeat+0x204>)
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
            reset_filters();
 800458e:	f000 f929 	bl	80047e4 <reset_filters>
        }
    }
    last_diff = current_diff;
 8004592:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <detect_heartbeat+0x200>)
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	601a      	str	r2, [r3, #0]
}
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b01a      	add	sp, #104	@ 0x68
 800459e:	bdb0      	pop	{r4, r5, r7, pc}
 80045a0:	20000000 	.word	0x20000000
 80045a4:	20000968 	.word	0x20000968
 80045a8:	c2c80000 	.word	0xc2c80000
 80045ac:	20000964 	.word	0x20000964
 80045b0:	0000ea60 	.word	0x0000ea60
 80045b4:	080137b4 	.word	0x080137b4
 80045b8:	20000aa4 	.word	0x20000aa4
 80045bc:	2000092c 	.word	0x2000092c
 80045c0:	2000093c 	.word	0x2000093c
 80045c4:	3fcc448f 	.word	0x3fcc448f
 80045c8:	c20aa37e 	.word	0xc20aa37e
 80045cc:	42e16137 	.word	0x42e16137
 80045d0:	42c80000 	.word	0x42c80000
 80045d4:	2000090c 	.word	0x2000090c
 80045d8:	2000091c 	.word	0x2000091c
 80045dc:	080137c4 	.word	0x080137c4

080045e0 <LoggingTask>:


// Logging Task
// Logging Task
void LoggingTask(void const *argument) {
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    send_uart("LoggingTask started\r\n");
 80045e8:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <LoggingTask+0x3c>)
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7ff fbc2 	bl	8003d74 <send_uart>

    while (1) {
        osEvent event = osMessageGet(dataQueue, osWaitForever);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <LoggingTask+0x40>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	2408      	movs	r4, #8
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	2201      	movs	r2, #1
 80045fa:	4252      	negs	r2, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f008 f87d 	bl	800c6fc <osMessageGet>
        if (event.status == osEventMessage) {
 8004602:	0022      	movs	r2, r4
 8004604:	18bb      	adds	r3, r7, r2
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b10      	cmp	r3, #16
 800460a:	d1f1      	bne.n	80045f0 <LoggingTask+0x10>
            char *logMessage = (char *)event.value.p;
 800460c:	18bb      	adds	r3, r7, r2
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]
            log_data_to_sd(logMessage);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff fbc7 	bl	8003da8 <log_data_to_sd>
    while (1) {
 800461a:	e7e9      	b.n	80045f0 <LoggingTask+0x10>
 800461c:	080137e8 	.word	0x080137e8
 8004620:	200008e0 	.word	0x200008e0

08004624 <main>:




// Main Function
int main(void) {
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b09e      	sub	sp, #120	@ 0x78
 8004628:	af00      	add	r7, sp, #0
    HAL_Init();
 800462a:	f000 fd5d 	bl	80050e8 <HAL_Init>
    SystemClock_Config();
 800462e:	f000 f90f 	bl	8004850 <SystemClock_Config>
    MX_GPIO_Init();
 8004632:	f000 fa35 	bl	8004aa0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8004636:	f000 f98b 	bl	8004950 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 800463a:	f000 fa01 	bl	8004a40 <MX_USART2_UART_Init>
    MX_SPI2_Init();
 800463e:	f000 f9c7 	bl	80049d0 <MX_SPI2_Init>
   // MX_RTC_Init();
    MX_FATFS_Init();
 8004642:	f004 fabb 	bl	8008bbc <MX_FATFS_Init>
    init_filters();
 8004646:	f7ff fc9d 	bl	8003f84 <init_filters>




    // Initialize CMSIS-RTOS components
    osSemaphoreDef(dataReadySemaphore);
 800464a:	2170      	movs	r1, #112	@ 0x70
 800464c:	187b      	adds	r3, r7, r1
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2200      	movs	r2, #0
 8004656:	605a      	str	r2, [r3, #4]
    dataReadySemaphore = osSemaphoreCreate(osSemaphore(dataReadySemaphore), 1);
 8004658:	187b      	adds	r3, r7, r1
 800465a:	2101      	movs	r1, #1
 800465c:	0018      	movs	r0, r3
 800465e:	f007 ff25 	bl	800c4ac <osSemaphoreCreate>
 8004662:	0002      	movs	r2, r0
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <main+0x120>)
 8004666:	601a      	str	r2, [r3, #0]
    if (dataReadySemaphore == NULL) {
 8004668:	4b36      	ldr	r3, [pc, #216]	@ (8004744 <main+0x120>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <main+0x56>
        send_uart("Failed to create dataReadySemaphore\r\n");
 8004670:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <main+0x124>)
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff fb7e 	bl	8003d74 <send_uart>
 8004678:	e003      	b.n	8004682 <main+0x5e>
    } else {
        send_uart("dataReadySemaphore created successfully\r\n");
 800467a:	4b34      	ldr	r3, [pc, #208]	@ (800474c <main+0x128>)
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff fb79 	bl	8003d74 <send_uart>
    }
    osMutexDef(sdCardMutex);
 8004682:	2168      	movs	r1, #104	@ 0x68
 8004684:	187b      	adds	r3, r7, r1
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
    sdCardMutex = osMutexCreate(osMutex(sdCardMutex));
 8004690:	187b      	adds	r3, r7, r1
 8004692:	0018      	movs	r0, r3
 8004694:	f007 fe76 	bl	800c384 <osMutexCreate>
 8004698:	0002      	movs	r2, r0
 800469a:	4b2d      	ldr	r3, [pc, #180]	@ (8004750 <main+0x12c>)
 800469c:	601a      	str	r2, [r3, #0]

    osMessageQDef(dataQueue, QUEUE_SIZE, uint32_t);
 800469e:	2558      	movs	r5, #88	@ 0x58
 80046a0:	197b      	adds	r3, r7, r5
 80046a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <main+0x130>)
 80046a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046a6:	c313      	stmia	r3!, {r0, r1, r4}
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	601a      	str	r2, [r3, #0]
    dataQueue = osMessageCreate(osMessageQ(dataQueue), NULL);
 80046ac:	197b      	adds	r3, r7, r5
 80046ae:	2100      	movs	r1, #0
 80046b0:	0018      	movs	r0, r3
 80046b2:	f007 ffbe 	bl	800c632 <osMessageCreate>
 80046b6:	0002      	movs	r2, r0
 80046b8:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <main+0x134>)
 80046ba:	601a      	str	r2, [r3, #0]

    // Create tasks
    osThreadDef(SensorTask, SensorTask, osPriorityNormal, 0, 256);
 80046bc:	253c      	movs	r5, #60	@ 0x3c
 80046be:	197b      	adds	r3, r7, r5
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <main+0x138>)
 80046c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046c4:	c313      	stmia	r3!, {r0, r1, r4}
 80046c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046c8:	c313      	stmia	r3!, {r0, r1, r4}
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	601a      	str	r2, [r3, #0]
    sensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80046ce:	197b      	adds	r3, r7, r5
 80046d0:	2100      	movs	r1, #0
 80046d2:	0018      	movs	r0, r3
 80046d4:	f007 fe09 	bl	800c2ea <osThreadCreate>
 80046d8:	0002      	movs	r2, r0
 80046da:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <main+0x13c>)
 80046dc:	601a      	str	r2, [r3, #0]

    osThreadDef(ProcessingTask, ProcessingTask, osPriorityAboveNormal, 0, 512);
 80046de:	2520      	movs	r5, #32
 80046e0:	197b      	adds	r3, r7, r5
 80046e2:	4a20      	ldr	r2, [pc, #128]	@ (8004764 <main+0x140>)
 80046e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046e6:	c313      	stmia	r3!, {r0, r1, r4}
 80046e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046ea:	c313      	stmia	r3!, {r0, r1, r4}
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	601a      	str	r2, [r3, #0]
    processingTaskHandle = osThreadCreate(osThread(ProcessingTask), NULL);
 80046f0:	197b      	adds	r3, r7, r5
 80046f2:	2100      	movs	r1, #0
 80046f4:	0018      	movs	r0, r3
 80046f6:	f007 fdf8 	bl	800c2ea <osThreadCreate>
 80046fa:	0002      	movs	r2, r0
 80046fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <main+0x144>)
 80046fe:	601a      	str	r2, [r3, #0]
    if (processingTaskHandle == NULL) {
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <main+0x144>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <main+0xee>
        send_uart("Failed to create ProcessingTask\r\n");
 8004708:	4b18      	ldr	r3, [pc, #96]	@ (800476c <main+0x148>)
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff fb32 	bl	8003d74 <send_uart>
 8004710:	e003      	b.n	800471a <main+0xf6>
    } else {
        send_uart("ProcessingTask created successfully\r\n");
 8004712:	4b17      	ldr	r3, [pc, #92]	@ (8004770 <main+0x14c>)
 8004714:	0018      	movs	r0, r3
 8004716:	f7ff fb2d 	bl	8003d74 <send_uart>
    }
    osThreadDef(LoggingTask, LoggingTask, osPriorityLow, 0, 512);
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <main+0x150>)
 800471e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004720:	c313      	stmia	r3!, {r0, r1, r4}
 8004722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004724:	c313      	stmia	r3!, {r0, r1, r4}
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	601a      	str	r2, [r3, #0]
    loggingTaskHandle = osThreadCreate(osThread(LoggingTask), NULL);
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	2100      	movs	r1, #0
 800472e:	0018      	movs	r0, r3
 8004730:	f007 fddb 	bl	800c2ea <osThreadCreate>
 8004734:	0002      	movs	r2, r0
 8004736:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <main+0x154>)
 8004738:	601a      	str	r2, [r3, #0]

    // Start the scheduler
    osKernelStart();
 800473a:	f007 fdce 	bl	800c2da <osKernelStart>

    // Infinite loop (should never reach here)
    while (1) {}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	e7fd      	b.n	800473e <main+0x11a>
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	200008d8 	.word	0x200008d8
 8004748:	08013820 	.word	0x08013820
 800474c:	08013848 	.word	0x08013848
 8004750:	200008dc 	.word	0x200008dc
 8004754:	080138c0 	.word	0x080138c0
 8004758:	200008e0 	.word	0x200008e0
 800475c:	080138dc 	.word	0x080138dc
 8004760:	200008cc 	.word	0x200008cc
 8004764:	08013908 	.word	0x08013908
 8004768:	200008d0 	.word	0x200008d0
 800476c:	08013874 	.word	0x08013874
 8004770:	08013898 	.word	0x08013898
 8004774:	08013930 	.word	0x08013930
 8004778:	200008d4 	.word	0x200008d4

0800477c <HAL_GPIO_EXTI_Callback>:
}


//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	0002      	movs	r2, r0
 8004784:	1dbb      	adds	r3, r7, #6
 8004786:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == temp_Pin) {
 8004788:	1dbb      	adds	r3, r7, #6
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	429a      	cmp	r2, r3
 8004792:	d10c      	bne.n	80047ae <HAL_GPIO_EXTI_Callback+0x32>
        send_uart("Temperature interrupt triggered.\n\r");
 8004794:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <HAL_GPIO_EXTI_Callback+0x54>)
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff faec 	bl	8003d74 <send_uart>
        temp_interrupt_flag = true;
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <HAL_GPIO_EXTI_Callback+0x58>)
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(dataReadySemaphore);
 80047a2:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f007 fefe 	bl	800c5a8 <osSemaphoreRelease>
    } else if (GPIO_Pin == GPIO_PIN_13) {
        stop_logging_flag = true;
        send_uart("Logging and calculations stopped by button press.\n\r");
    }
}
 80047ac:	e00c      	b.n	80047c8 <HAL_GPIO_EXTI_Callback+0x4c>
    } else if (GPIO_Pin == GPIO_PIN_13) {
 80047ae:	1dbb      	adds	r3, r7, #6
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d106      	bne.n	80047c8 <HAL_GPIO_EXTI_Callback+0x4c>
        stop_logging_flag = true;
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <HAL_GPIO_EXTI_Callback+0x60>)
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
        send_uart("Logging and calculations stopped by button press.\n\r");
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7ff fad6 	bl	8003d74 <send_uart>
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0801394c 	.word	0x0801394c
 80047d4:	200008ca 	.word	0x200008ca
 80047d8:	200008d8 	.word	0x200008d8
 80047dc:	200008cb 	.word	0x200008cb
 80047e0:	08013970 	.word	0x08013970

080047e4 <reset_filters>:
//    MinMaxAvgStatistic_Init(&stat_ir);
//}
//
//
//// Reset Filters
void reset_filters(void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
    HighPassFilter_Reset(&high_pass_filter);
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <reset_filters+0x4c>)
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7ff f95c 	bl	8003aa8 <HighPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_red);
 80047f0:	4b10      	ldr	r3, [pc, #64]	@ (8004834 <reset_filters+0x50>)
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff f9f4 	bl	8003be0 <LowPassFilter_Reset>
    LowPassFilter_Reset(&low_pass_filter_ir);
 80047f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <reset_filters+0x54>)
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff f9f0 	bl	8003be0 <LowPassFilter_Reset>
    Differentiator_Reset(&differentiator);
 8004800:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <reset_filters+0x58>)
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff fa36 	bl	8003c74 <Differentiator_Reset>
    MovingAverageFilter_Reset(&averager_bpm);
 8004808:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <reset_filters+0x5c>)
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff faa3 	bl	8003d56 <MovingAverageFilter_Reset>
    MovingAverageFilter_Reset(&averager_spo2);
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <reset_filters+0x60>)
 8004812:	0018      	movs	r0, r3
 8004814:	f7ff fa9f 	bl	8003d56 <MovingAverageFilter_Reset>
    MinMaxAvgStatistic_Reset(&stat_red);
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <reset_filters+0x64>)
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff f898 	bl	8003950 <MinMaxAvgStatistic_Reset>
    MinMaxAvgStatistic_Reset(&stat_ir);
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <reset_filters+0x68>)
 8004822:	0018      	movs	r0, r3
 8004824:	f7ff f894 	bl	8003950 <MinMaxAvgStatistic_Reset>
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	2000094c 	.word	0x2000094c
 8004834:	200008e4 	.word	0x200008e4
 8004838:	200008f4 	.word	0x200008f4
 800483c:	20000904 	.word	0x20000904
 8004840:	2000090c 	.word	0x2000090c
 8004844:	2000091c 	.word	0x2000091c
 8004848:	2000092c 	.word	0x2000092c
 800484c:	2000093c 	.word	0x2000093c

08004850 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b09f      	sub	sp, #124	@ 0x7c
 8004854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004856:	2440      	movs	r4, #64	@ 0x40
 8004858:	193b      	adds	r3, r7, r4
 800485a:	0018      	movs	r0, r3
 800485c:	2338      	movs	r3, #56	@ 0x38
 800485e:	001a      	movs	r2, r3
 8004860:	2100      	movs	r1, #0
 8004862:	f00b f85b 	bl	800f91c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004866:	232c      	movs	r3, #44	@ 0x2c
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	0018      	movs	r0, r3
 800486c:	2314      	movs	r3, #20
 800486e:	001a      	movs	r2, r3
 8004870:	2100      	movs	r1, #0
 8004872:	f00b f853 	bl	800f91c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	0018      	movs	r0, r3
 800487a:	2328      	movs	r3, #40	@ 0x28
 800487c:	001a      	movs	r2, r3
 800487e:	2100      	movs	r1, #0
 8004880:	f00b f84c 	bl	800f91c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004884:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <SystemClock_Config+0xf4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <SystemClock_Config+0xf8>)
 800488a:	401a      	ands	r2, r3
 800488c:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <SystemClock_Config+0xf4>)
 800488e:	2180      	movs	r1, #128	@ 0x80
 8004890:	0109      	lsls	r1, r1, #4
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004896:	f001 fd6f 	bl	8006378 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <SystemClock_Config+0xfc>)
 800489c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489e:	4b2b      	ldr	r3, [pc, #172]	@ (800494c <SystemClock_Config+0xfc>)
 80048a0:	4929      	ldr	r1, [pc, #164]	@ (8004948 <SystemClock_Config+0xf8>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	2214      	movs	r2, #20
 80048aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	2280      	movs	r2, #128	@ 0x80
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80048b4:	0021      	movs	r1, r4
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	2201      	movs	r2, #1
 80048ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	2200      	movs	r2, #0
 80048c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	22a0      	movs	r2, #160	@ 0xa0
 80048c6:	0212      	lsls	r2, r2, #8
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	2200      	movs	r2, #0
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	0018      	movs	r0, r3
 80048d4:	f001 fd5e 	bl	8006394 <HAL_RCC_OscConfig>
 80048d8:	1e03      	subs	r3, r0, #0
 80048da:	d001      	beq.n	80048e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80048dc:	f000 f97a 	bl	8004bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048e0:	212c      	movs	r1, #44	@ 0x2c
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	220f      	movs	r2, #15
 80048e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048ee:	187b      	adds	r3, r7, r1
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004900:	187b      	adds	r3, r7, r1
 8004902:	2100      	movs	r1, #0
 8004904:	0018      	movs	r0, r3
 8004906:	f002 f919 	bl	8006b3c <HAL_RCC_ClockConfig>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800490e:	f000 f961 	bl	8004bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	222a      	movs	r2, #42	@ 0x2a
 8004916:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	0252      	lsls	r2, r2, #9
 800492a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	0018      	movs	r0, r3
 8004930:	f002 fb5a 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8004934:	1e03      	subs	r3, r0, #0
 8004936:	d001      	beq.n	800493c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8004938:	f000 f94c 	bl	8004bd4 <Error_Handler>
  }
}
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b01f      	add	sp, #124	@ 0x7c
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	40007000 	.word	0x40007000
 8004948:	ffffe7ff 	.word	0xffffe7ff
 800494c:	40021000 	.word	0x40021000

08004950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004954:	4b1c      	ldr	r3, [pc, #112]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004956:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <MX_I2C1_Init+0x7c>)
 8004958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800495a:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <MX_I2C1_Init+0x78>)
 800495c:	22c1      	movs	r2, #193	@ 0xc1
 800495e:	00d2      	lsls	r2, r2, #3
 8004960:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004962:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004968:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <MX_I2C1_Init+0x78>)
 800496a:	2201      	movs	r2, #1
 800496c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800496e:	4b16      	ldr	r3, [pc, #88]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004974:	4b14      	ldr	r3, [pc, #80]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004976:	2200      	movs	r2, #0
 8004978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800497a:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <MX_I2C1_Init+0x78>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004980:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <MX_I2C1_Init+0x78>)
 8004988:	2200      	movs	r2, #0
 800498a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800498c:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <MX_I2C1_Init+0x78>)
 800498e:	0018      	movs	r0, r3
 8004990:	f000 fe70 	bl	8005674 <HAL_I2C_Init>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d001      	beq.n	800499c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004998:	f000 f91c 	bl	8004bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800499c:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <MX_I2C1_Init+0x78>)
 800499e:	2100      	movs	r1, #0
 80049a0:	0018      	movs	r0, r3
 80049a2:	f001 fc51 	bl	8006248 <HAL_I2CEx_ConfigAnalogFilter>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d001      	beq.n	80049ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80049aa:	f000 f913 	bl	8004bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <MX_I2C1_Init+0x78>)
 80049b0:	2100      	movs	r1, #0
 80049b2:	0018      	movs	r0, r3
 80049b4:	f001 fc94 	bl	80062e0 <HAL_I2CEx_ConfigDigitalFilter>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d001      	beq.n	80049c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80049bc:	f000 f90a 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80049c0:	46c0      	nop			@ (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	200009f8 	.word	0x200009f8
 80049cc:	40005400 	.word	0x40005400

080049d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80049d4:	4b18      	ldr	r3, [pc, #96]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049d6:	4a19      	ldr	r2, [pc, #100]	@ (8004a3c <MX_SPI2_Init+0x6c>)
 80049d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80049da:	4b17      	ldr	r3, [pc, #92]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049dc:	2282      	movs	r2, #130	@ 0x82
 80049de:	0052      	lsls	r2, r2, #1
 80049e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80049e2:	4b15      	ldr	r3, [pc, #84]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80049e8:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ee:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049f4:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80049fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <MX_SPI2_Init+0x68>)
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	02d2      	lsls	r2, r2, #11
 8004a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a04:	2230      	movs	r2, #48	@ 0x30
 8004a06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a14:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a1a:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a20:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <MX_SPI2_Init+0x68>)
 8004a22:	0018      	movs	r0, r3
 8004a24:	f002 fc7e 	bl	8007324 <HAL_SPI_Init>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a2c:	f000 f8d2 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a30:	46c0      	nop			@ (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	20000a4c 	.word	0x20000a4c
 8004a3c:	40003800 	.word	0x40003800

08004a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a44:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a46:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <MX_USART2_UART_Init+0x5c>)
 8004a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a4a:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a4c:	22e1      	movs	r2, #225	@ 0xe1
 8004a4e:	0252      	lsls	r2, r2, #9
 8004a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a52:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a66:	220c      	movs	r2, #12
 8004a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a70:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a76:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <MX_USART2_UART_Init+0x58>)
 8004a84:	0018      	movs	r0, r3
 8004a86:	f003 fadd 	bl	8008044 <HAL_UART_Init>
 8004a8a:	1e03      	subs	r3, r0, #0
 8004a8c:	d001      	beq.n	8004a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004a8e:	f000 f8a1 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000970 	.word	0x20000970
 8004a9c:	40004400 	.word	0x40004400

08004aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b08b      	sub	sp, #44	@ 0x2c
 8004aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa6:	2414      	movs	r4, #20
 8004aa8:	193b      	adds	r3, r7, r4
 8004aaa:	0018      	movs	r0, r3
 8004aac:	2314      	movs	r3, #20
 8004aae:	001a      	movs	r2, r3
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f00a ff33 	bl	800f91c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004abc:	2104      	movs	r1, #4
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ac2:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ace:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad2:	4b35      	ldr	r3, [pc, #212]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ada:	4b33      	ldr	r3, [pc, #204]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	2280      	movs	r2, #128	@ 0x80
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	4b30      	ldr	r3, [pc, #192]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004af2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	2201      	movs	r2, #1
 8004af8:	4013      	ands	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b02:	4b29      	ldr	r3, [pc, #164]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004b04:	2102      	movs	r1, #2
 8004b06:	430a      	orrs	r2, r1
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ba8 <MX_GPIO_Init+0x108>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004b16:	23a0      	movs	r3, #160	@ 0xa0
 8004b18:	05db      	lsls	r3, r3, #23
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 fd6e 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	2280      	movs	r2, #128	@ 0x80
 8004b28:	0192      	lsls	r2, r2, #6
 8004b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b2c:	193b      	adds	r3, r7, r4
 8004b2e:	2284      	movs	r2, #132	@ 0x84
 8004b30:	0392      	lsls	r2, r2, #14
 8004b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	193b      	adds	r3, r7, r4
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <MX_GPIO_Init+0x10c>)
 8004b3e:	0019      	movs	r1, r3
 8004b40:	0010      	movs	r0, r2
 8004b42:	f000 fbdf 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	2220      	movs	r2, #32
 8004b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	2201      	movs	r2, #1
 8004b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b58:	193b      	adds	r3, r7, r4
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004b5e:	193a      	adds	r2, r7, r4
 8004b60:	23a0      	movs	r3, #160	@ 0xa0
 8004b62:	05db      	lsls	r3, r3, #23
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fbcc 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 8004b6c:	0021      	movs	r1, r4
 8004b6e:	187b      	adds	r3, r7, r1
 8004b70:	2280      	movs	r2, #128	@ 0x80
 8004b72:	0052      	lsls	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	2284      	movs	r2, #132	@ 0x84
 8004b7a:	0392      	lsls	r2, r2, #14
 8004b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	2201      	movs	r2, #1
 8004b82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb0 <MX_GPIO_Init+0x110>)
 8004b88:	0019      	movs	r1, r3
 8004b8a:	0010      	movs	r0, r2
 8004b8c:	f000 fbba 	bl	8005304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2103      	movs	r1, #3
 8004b94:	2007      	movs	r0, #7
 8004b96:	f000 fb8f 	bl	80052b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004b9a:	2007      	movs	r0, #7
 8004b9c:	f000 fba1 	bl	80052e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b00b      	add	sp, #44	@ 0x2c
 8004ba6:	bd90      	pop	{r4, r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	50000800 	.word	0x50000800
 8004bb0:	50000400 	.word	0x50000400

08004bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	05db      	lsls	r3, r3, #23
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004bc8:	f000 faae 	bl	8005128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd8:	b672      	cpsid	i
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    while (1) {
        send_uart("System Error\r\n");
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <Error_Handler+0x20>)
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7ff f8c8 	bl	8003d74 <send_uart>
        HAL_Delay(1000);
 8004be4:	23fa      	movs	r3, #250	@ 0xfa
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 fab9 	bl	8005160 <HAL_Delay>
        send_uart("System Error\r\n");
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	e7f4      	b.n	8004bdc <Error_Handler+0x8>
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	080139a4 	.word	0x080139a4

08004bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_MspInit+0x34>)
 8004bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c00:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <HAL_MspInit+0x34>)
 8004c02:	2101      	movs	r1, #1
 8004c04:	430a      	orrs	r2, r1
 8004c06:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <HAL_MspInit+0x34>)
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c0c:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <HAL_MspInit+0x34>)
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	0549      	lsls	r1, r1, #21
 8004c12:	430a      	orrs	r2, r1
 8004c14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004c16:	2302      	movs	r3, #2
 8004c18:	425b      	negs	r3, r3
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2103      	movs	r1, #3
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 fb4a 	bl	80052b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	40021000 	.word	0x40021000

08004c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c38:	240c      	movs	r4, #12
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	2314      	movs	r3, #20
 8004c40:	001a      	movs	r2, r3
 8004c42:	2100      	movs	r1, #0
 8004c44:	f00a fe6a 	bl	800f91c <memset>
  if(hi2c->Instance==I2C1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_I2C_MspInit+0x80>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d12a      	bne.n	8004ca8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c52:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <HAL_I2C_MspInit+0x84>)
 8004c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <HAL_I2C_MspInit+0x84>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c5e:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <HAL_I2C_MspInit+0x84>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	2201      	movs	r2, #1
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c6a:	193b      	adds	r3, r7, r4
 8004c6c:	22c0      	movs	r2, #192	@ 0xc0
 8004c6e:	00d2      	lsls	r2, r2, #3
 8004c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c72:	0021      	movs	r1, r4
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2212      	movs	r2, #18
 8004c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2203      	movs	r2, #3
 8004c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	2206      	movs	r2, #6
 8004c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	187a      	adds	r2, r7, r1
 8004c8e:	23a0      	movs	r3, #160	@ 0xa0
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 fb35 	bl	8005304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_I2C_MspInit+0x84>)
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9e:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_I2C_MspInit+0x84>)
 8004ca0:	2180      	movs	r1, #128	@ 0x80
 8004ca2:	0389      	lsls	r1, r1, #14
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004ca8:	46c0      	nop			@ (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b009      	add	sp, #36	@ 0x24
 8004cae:	bd90      	pop	{r4, r7, pc}
 8004cb0:	40005400 	.word	0x40005400
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b089      	sub	sp, #36	@ 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	240c      	movs	r4, #12
 8004cc2:	193b      	adds	r3, r7, r4
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	2314      	movs	r3, #20
 8004cc8:	001a      	movs	r2, r3
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f00a fe26 	bl	800f91c <memset>
  if(hspi->Instance==SPI2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <HAL_SPI_MspInit+0x80>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d129      	bne.n	8004d2e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004cda:	4b18      	ldr	r3, [pc, #96]	@ (8004d3c <HAL_SPI_MspInit+0x84>)
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cde:	4b17      	ldr	r3, [pc, #92]	@ (8004d3c <HAL_SPI_MspInit+0x84>)
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	01c9      	lsls	r1, r1, #7
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce8:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <HAL_SPI_MspInit+0x84>)
 8004cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cec:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <HAL_SPI_MspInit+0x84>)
 8004cee:	2102      	movs	r1, #2
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <HAL_SPI_MspInit+0x84>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = cs_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d00:	193b      	adds	r3, r7, r4
 8004d02:	22f0      	movs	r2, #240	@ 0xf0
 8004d04:	0212      	lsls	r2, r2, #8
 8004d06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d08:	0021      	movs	r1, r4
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	2203      	movs	r2, #3
 8004d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	4a06      	ldr	r2, [pc, #24]	@ (8004d40 <HAL_SPI_MspInit+0x88>)
 8004d26:	0019      	movs	r1, r3
 8004d28:	0010      	movs	r0, r2
 8004d2a:	f000 faeb 	bl	8005304 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b009      	add	sp, #36	@ 0x24
 8004d34:	bd90      	pop	{r4, r7, pc}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	40003800 	.word	0x40003800
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	50000400 	.word	0x50000400

08004d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b089      	sub	sp, #36	@ 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4c:	240c      	movs	r4, #12
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	0018      	movs	r0, r3
 8004d52:	2314      	movs	r3, #20
 8004d54:	001a      	movs	r2, r3
 8004d56:	2100      	movs	r1, #0
 8004d58:	f00a fde0 	bl	800f91c <memset>
  if(huart->Instance==USART2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_UART_MspInit+0x80>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d129      	bne.n	8004dba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d66:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <HAL_UART_MspInit+0x84>)
 8004d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d6a:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <HAL_UART_MspInit+0x84>)
 8004d6c:	2180      	movs	r1, #128	@ 0x80
 8004d6e:	0289      	lsls	r1, r1, #10
 8004d70:	430a      	orrs	r2, r1
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d74:	4b14      	ldr	r3, [pc, #80]	@ (8004dc8 <HAL_UART_MspInit+0x84>)
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_UART_MspInit+0x84>)
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d80:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_UART_MspInit+0x84>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	2201      	movs	r2, #1
 8004d86:	4013      	ands	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d8c:	0021      	movs	r1, r4
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	220c      	movs	r2, #12
 8004d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	2202      	movs	r2, #2
 8004d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	187b      	adds	r3, r7, r1
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	2203      	movs	r2, #3
 8004da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	2204      	movs	r2, #4
 8004daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dac:	187a      	adds	r2, r7, r1
 8004dae:	23a0      	movs	r3, #160	@ 0xa0
 8004db0:	05db      	lsls	r3, r3, #23
 8004db2:	0011      	movs	r1, r2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 faa5 	bl	8005304 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b009      	add	sp, #36	@ 0x24
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40021000 	.word	0x40021000

08004dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b08c      	sub	sp, #48	@ 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	0019      	movs	r1, r3
 8004dda:	200f      	movs	r0, #15
 8004ddc:	f000 fa6c 	bl	80052b8 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004de0:	200f      	movs	r0, #15
 8004de2:	f000 fa7e 	bl	80052e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004de6:	4b32      	ldr	r3, [pc, #200]	@ (8004eb0 <HAL_InitTick+0xe4>)
 8004de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <HAL_InitTick+0xe4>)
 8004dec:	2101      	movs	r1, #1
 8004dee:	430a      	orrs	r2, r1
 8004df0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004df2:	2308      	movs	r3, #8
 8004df4:	18fa      	adds	r2, r7, r3
 8004df6:	240c      	movs	r4, #12
 8004df8:	193b      	adds	r3, r7, r4
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f002 f8c1 	bl	8006f84 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e0e:	f002 f88d 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8004e12:	0003      	movs	r3, r0
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e16:	e004      	b.n	8004e22 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e18:	f002 f888 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e24:	4923      	ldr	r1, [pc, #140]	@ (8004eb4 <HAL_InitTick+0xe8>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7fb f98a 	bl	8000140 <__udivsi3>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004e32:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e34:	2280      	movs	r2, #128	@ 0x80
 8004e36:	05d2      	lsls	r2, r2, #23
 8004e38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <HAL_InitTick+0xf0>)
 8004e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8004e52:	252b      	movs	r5, #43	@ 0x2b
 8004e54:	197c      	adds	r4, r7, r5
 8004e56:	4b18      	ldr	r3, [pc, #96]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f002 fef3 	bl	8007c44 <HAL_TIM_Base_Init>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004e62:	197b      	adds	r3, r7, r5
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11b      	bne.n	8004ea2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004e6a:	197c      	adds	r4, r7, r5
 8004e6c:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_InitTick+0xec>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f002 ff30 	bl	8007cd4 <HAL_TIM_Base_Start_IT>
 8004e74:	0003      	movs	r3, r0
 8004e76:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004e78:	197b      	adds	r3, r7, r5
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d110      	bne.n	8004ea2 <HAL_InitTick+0xd6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d809      	bhi.n	8004e9a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	200f      	movs	r0, #15
 8004e8e:	f000 fa13 	bl	80052b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_InitTick+0xf4>)
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e003      	b.n	8004ea2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8004e9a:	232b      	movs	r3, #43	@ 0x2b
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004ea2:	232b      	movs	r3, #43	@ 0x2b
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b00c      	add	sp, #48	@ 0x30
 8004eae:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	000f4240 	.word	0x000f4240
 8004eb8:	20000e28 	.word	0x20000e28
 8004ebc:	000003e7 	.word	0x000003e7
 8004ec0:	20000008 	.word	0x20000008

08004ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ec8:	46c0      	nop			@ (mov r8, r8)
 8004eca:	e7fd      	b.n	8004ec8 <NMI_Handler+0x4>

08004ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	e7fd      	b.n	8004ed0 <HardFault_Handler+0x4>

08004ed4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(temp_Pin);
 8004ed8:	2380      	movs	r3, #128	@ 0x80
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fbad 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fba8 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ef8:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <TIM2_IRQHandler+0x14>)
 8004efa:	0018      	movs	r0, r3
 8004efc:	f002 ff3c 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	20000e28 	.word	0x20000e28

08004f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  return 1;
 8004f10:	2301      	movs	r3, #1
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_kill>:

int _kill(int pid, int sig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f22:	f00a fd55 	bl	800f9d0 <__errno>
 8004f26:	0003      	movs	r3, r0
 8004f28:	2216      	movs	r2, #22
 8004f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	425b      	negs	r3, r3
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_exit>:

void _exit (int status)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f40:	2301      	movs	r3, #1
 8004f42:	425a      	negs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0011      	movs	r1, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff ffe5 	bl	8004f18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	e7fd      	b.n	8004f4e <_exit+0x16>

08004f52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e00a      	b.n	8004f7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f64:	e000      	b.n	8004f68 <_read+0x16>
 8004f66:	bf00      	nop
 8004f68:	0001      	movs	r1, r0
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	60ba      	str	r2, [r7, #8]
 8004f70:	b2ca      	uxtb	r2, r1
 8004f72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3301      	adds	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	dbf0      	blt.n	8004f64 <_read+0x12>
  }

  return len;
 8004f82:	687b      	ldr	r3, [r7, #4]
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b006      	add	sp, #24
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e009      	b.n	8004fb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	60ba      	str	r2, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	e000      	b.n	8004fac <_write+0x20>
 8004faa:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	dbf1      	blt.n	8004f9e <_write+0x12>
  }
  return len;
 8004fba:	687b      	ldr	r3, [r7, #4]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b006      	add	sp, #24
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_close>:

int _close(int file)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	425b      	negs	r3, r3
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	0192      	lsls	r2, r2, #6
 8004fe8:	605a      	str	r2, [r3, #4]
  return 0;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <_isatty>:

int _isatty(int file)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ffc:	2301      	movs	r3, #1
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b002      	add	sp, #8
 8005004:	bd80      	pop	{r7, pc}

08005006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b004      	add	sp, #16
 800501a:	bd80      	pop	{r7, pc}

0800501c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005024:	4a14      	ldr	r2, [pc, #80]	@ (8005078 <_sbrk+0x5c>)
 8005026:	4b15      	ldr	r3, [pc, #84]	@ (800507c <_sbrk+0x60>)
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005030:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <_sbrk+0x64>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <_sbrk+0x64>)
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <_sbrk+0x68>)
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800503e:	4b10      	ldr	r3, [pc, #64]	@ (8005080 <_sbrk+0x64>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	18d3      	adds	r3, r2, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d207      	bcs.n	800505c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800504c:	f00a fcc0 	bl	800f9d0 <__errno>
 8005050:	0003      	movs	r3, r0
 8005052:	220c      	movs	r2, #12
 8005054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005056:	2301      	movs	r3, #1
 8005058:	425b      	negs	r3, r3
 800505a:	e009      	b.n	8005070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800505c:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <_sbrk+0x64>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005062:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <_sbrk+0x64>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	18d2      	adds	r2, r2, r3
 800506a:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <_sbrk+0x64>)
 800506c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b006      	add	sp, #24
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20005000 	.word	0x20005000
 800507c:	00000400 	.word	0x00000400
 8005080:	20000e68 	.word	0x20000e68
 8005084:	20004988 	.word	0x20004988

08005088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800508c:	46c0      	nop			@ (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005094:	480d      	ldr	r0, [pc, #52]	@ (80050cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005098:	f7ff fff6 	bl	8005088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800509c:	480c      	ldr	r0, [pc, #48]	@ (80050d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800509e:	490d      	ldr	r1, [pc, #52]	@ (80050d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050a0:	4a0d      	ldr	r2, [pc, #52]	@ (80050d8 <LoopForever+0xe>)
  movs r3, #0
 80050a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050a4:	e002      	b.n	80050ac <LoopCopyDataInit>

080050a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050aa:	3304      	adds	r3, #4

080050ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b0:	d3f9      	bcc.n	80050a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050b2:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80050b4:	4c0a      	ldr	r4, [pc, #40]	@ (80050e0 <LoopForever+0x16>)
  movs r3, #0
 80050b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050b8:	e001      	b.n	80050be <LoopFillZerobss>

080050ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050bc:	3204      	adds	r2, #4

080050be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c0:	d3fb      	bcc.n	80050ba <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80050c2:	f00a fc8b 	bl	800f9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050c6:	f7ff faad 	bl	8004624 <main>

080050ca <LoopForever>:

LoopForever:
    b LoopForever
 80050ca:	e7fe      	b.n	80050ca <LoopForever>
   ldr   r0, =_estack
 80050cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80050d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050d4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80050d8:	08014000 	.word	0x08014000
  ldr r2, =_sbss
 80050dc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80050e0:	20004988 	.word	0x20004988

080050e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050e4:	e7fe      	b.n	80050e4 <ADC1_COMP_IRQHandler>
	...

080050e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_Init+0x3c>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <HAL_Init+0x3c>)
 80050fa:	2140      	movs	r1, #64	@ 0x40
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005100:	2003      	movs	r0, #3
 8005102:	f7ff fe63 	bl	8004dcc <HAL_InitTick>
 8005106:	1e03      	subs	r3, r0, #0
 8005108:	d003      	beq.n	8005112 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800510a:	1dfb      	adds	r3, r7, #7
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e001      	b.n	8005116 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005112:	f7ff fd71 	bl	8004bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005116:	1dfb      	adds	r3, r7, #7
 8005118:	781b      	ldrb	r3, [r3, #0]
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b002      	add	sp, #8
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	40022000 	.word	0x40022000

08005128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_IncTick+0x1c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	001a      	movs	r2, r3
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_IncTick+0x20>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	18d2      	adds	r2, r2, r3
 8005138:	4b03      	ldr	r3, [pc, #12]	@ (8005148 <HAL_IncTick+0x20>)
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	46c0      	nop			@ (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	2000000c 	.word	0x2000000c
 8005148:	20000e6c 	.word	0x20000e6c

0800514c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  return uwTick;
 8005150:	4b02      	ldr	r3, [pc, #8]	@ (800515c <HAL_GetTick+0x10>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	20000e6c 	.word	0x20000e6c

08005160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005168:	f7ff fff0 	bl	800514c <HAL_GetTick>
 800516c:	0003      	movs	r3, r0
 800516e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	d005      	beq.n	8005186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <HAL_Delay+0x44>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	001a      	movs	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	189b      	adds	r3, r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	f7ff ffe0 	bl	800514c <HAL_GetTick>
 800518c:	0002      	movs	r2, r0
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	429a      	cmp	r2, r3
 8005196:	d8f7      	bhi.n	8005188 <HAL_Delay+0x28>
  {
  }
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b004      	add	sp, #16
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	2000000c 	.word	0x2000000c

080051a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	0002      	movs	r2, r0
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051b4:	1dfb      	adds	r3, r7, #7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80051ba:	d809      	bhi.n	80051d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	001a      	movs	r2, r3
 80051c2:	231f      	movs	r3, #31
 80051c4:	401a      	ands	r2, r3
 80051c6:	4b04      	ldr	r3, [pc, #16]	@ (80051d8 <__NVIC_EnableIRQ+0x30>)
 80051c8:	2101      	movs	r1, #1
 80051ca:	4091      	lsls	r1, r2
 80051cc:	000a      	movs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]
  }
}
 80051d0:	46c0      	nop			@ (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000e100 	.word	0xe000e100

080051dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	0002      	movs	r2, r0
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	1dfb      	adds	r3, r7, #7
 80051e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80051f0:	d828      	bhi.n	8005244 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051f2:	4a2f      	ldr	r2, [pc, #188]	@ (80052b0 <__NVIC_SetPriority+0xd4>)
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	33c0      	adds	r3, #192	@ 0xc0
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	589b      	ldr	r3, [r3, r2]
 8005202:	1dfa      	adds	r2, r7, #7
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	0011      	movs	r1, r2
 8005208:	2203      	movs	r2, #3
 800520a:	400a      	ands	r2, r1
 800520c:	00d2      	lsls	r2, r2, #3
 800520e:	21ff      	movs	r1, #255	@ 0xff
 8005210:	4091      	lsls	r1, r2
 8005212:	000a      	movs	r2, r1
 8005214:	43d2      	mvns	r2, r2
 8005216:	401a      	ands	r2, r3
 8005218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	22ff      	movs	r2, #255	@ 0xff
 8005220:	401a      	ands	r2, r3
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	0018      	movs	r0, r3
 8005228:	2303      	movs	r3, #3
 800522a:	4003      	ands	r3, r0
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005230:	481f      	ldr	r0, [pc, #124]	@ (80052b0 <__NVIC_SetPriority+0xd4>)
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b25b      	sxtb	r3, r3
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	430a      	orrs	r2, r1
 800523c:	33c0      	adds	r3, #192	@ 0xc0
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005242:	e031      	b.n	80052a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005244:	4a1b      	ldr	r2, [pc, #108]	@ (80052b4 <__NVIC_SetPriority+0xd8>)
 8005246:	1dfb      	adds	r3, r7, #7
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	0019      	movs	r1, r3
 800524c:	230f      	movs	r3, #15
 800524e:	400b      	ands	r3, r1
 8005250:	3b08      	subs	r3, #8
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3306      	adds	r3, #6
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	3304      	adds	r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	1dfa      	adds	r2, r7, #7
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	0011      	movs	r1, r2
 8005264:	2203      	movs	r2, #3
 8005266:	400a      	ands	r2, r1
 8005268:	00d2      	lsls	r2, r2, #3
 800526a:	21ff      	movs	r1, #255	@ 0xff
 800526c:	4091      	lsls	r1, r2
 800526e:	000a      	movs	r2, r1
 8005270:	43d2      	mvns	r2, r2
 8005272:	401a      	ands	r2, r3
 8005274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	22ff      	movs	r2, #255	@ 0xff
 800527c:	401a      	ands	r2, r3
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	0018      	movs	r0, r3
 8005284:	2303      	movs	r3, #3
 8005286:	4003      	ands	r3, r0
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800528c:	4809      	ldr	r0, [pc, #36]	@ (80052b4 <__NVIC_SetPriority+0xd8>)
 800528e:	1dfb      	adds	r3, r7, #7
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	001c      	movs	r4, r3
 8005294:	230f      	movs	r3, #15
 8005296:	4023      	ands	r3, r4
 8005298:	3b08      	subs	r3, #8
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	430a      	orrs	r2, r1
 800529e:	3306      	adds	r3, #6
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	18c3      	adds	r3, r0, r3
 80052a4:	3304      	adds	r3, #4
 80052a6:	601a      	str	r2, [r3, #0]
}
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b003      	add	sp, #12
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	e000e100 	.word	0xe000e100
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	210f      	movs	r1, #15
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	1c02      	adds	r2, r0, #0
 80052c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	0011      	movs	r1, r2
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7ff ff81 	bl	80051dc <__NVIC_SetPriority>
}
 80052da:	46c0      	nop			@ (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	0002      	movs	r2, r0
 80052ea:	1dfb      	adds	r3, r7, #7
 80052ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ee:	1dfb      	adds	r3, r7, #7
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff ff57 	bl	80051a8 <__NVIC_EnableIRQ>
}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b002      	add	sp, #8
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800531a:	e155      	b.n	80055c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2101      	movs	r1, #1
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4091      	lsls	r1, r2
 8005326:	000a      	movs	r2, r1
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d100      	bne.n	8005334 <HAL_GPIO_Init+0x30>
 8005332:	e146      	b.n	80055c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	4013      	ands	r3, r2
 800533c:	2b01      	cmp	r3, #1
 800533e:	d005      	beq.n	800534c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005348:	2b02      	cmp	r3, #2
 800534a:	d130      	bne.n	80053ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2203      	movs	r2, #3
 8005358:	409a      	lsls	r2, r3
 800535a:	0013      	movs	r3, r2
 800535c:	43da      	mvns	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4013      	ands	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	409a      	lsls	r2, r3
 800536e:	0013      	movs	r3, r2
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005382:	2201      	movs	r2, #1
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	409a      	lsls	r2, r3
 8005388:	0013      	movs	r3, r2
 800538a:	43da      	mvns	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	2201      	movs	r2, #1
 800539a:	401a      	ands	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	409a      	lsls	r2, r3
 80053a0:	0013      	movs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d017      	beq.n	80053ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	409a      	lsls	r2, r3
 80053c8:	0013      	movs	r3, r2
 80053ca:	43da      	mvns	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	409a      	lsls	r2, r3
 80053dc:	0013      	movs	r3, r2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2203      	movs	r2, #3
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d123      	bne.n	800543e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	08da      	lsrs	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	58d3      	ldr	r3, [r2, r3]
 8005402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2207      	movs	r2, #7
 8005408:	4013      	ands	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	220f      	movs	r2, #15
 800540e:	409a      	lsls	r2, r3
 8005410:	0013      	movs	r3, r2
 8005412:	43da      	mvns	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2107      	movs	r1, #7
 8005422:	400b      	ands	r3, r1
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	409a      	lsls	r2, r3
 8005428:	0013      	movs	r3, r2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	08da      	lsrs	r2, r3, #3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3208      	adds	r2, #8
 8005438:	0092      	lsls	r2, r2, #2
 800543a:	6939      	ldr	r1, [r7, #16]
 800543c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2203      	movs	r2, #3
 800544a:	409a      	lsls	r2, r3
 800544c:	0013      	movs	r3, r2
 800544e:	43da      	mvns	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4013      	ands	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2203      	movs	r2, #3
 800545c:	401a      	ands	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	0013      	movs	r3, r2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	23c0      	movs	r3, #192	@ 0xc0
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <HAL_GPIO_Init+0x17c>
 800547e:	e0a0      	b.n	80055c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005480:	4b57      	ldr	r3, [pc, #348]	@ (80055e0 <HAL_GPIO_Init+0x2dc>)
 8005482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005484:	4b56      	ldr	r3, [pc, #344]	@ (80055e0 <HAL_GPIO_Init+0x2dc>)
 8005486:	2101      	movs	r1, #1
 8005488:	430a      	orrs	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800548c:	4a55      	ldr	r2, [pc, #340]	@ (80055e4 <HAL_GPIO_Init+0x2e0>)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	3302      	adds	r3, #2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	589b      	ldr	r3, [r3, r2]
 8005498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2203      	movs	r2, #3
 800549e:	4013      	ands	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	220f      	movs	r2, #15
 80054a4:	409a      	lsls	r2, r3
 80054a6:	0013      	movs	r3, r2
 80054a8:	43da      	mvns	r2, r3
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	23a0      	movs	r3, #160	@ 0xa0
 80054b4:	05db      	lsls	r3, r3, #23
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d01f      	beq.n	80054fa <HAL_GPIO_Init+0x1f6>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a4a      	ldr	r2, [pc, #296]	@ (80055e8 <HAL_GPIO_Init+0x2e4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d019      	beq.n	80054f6 <HAL_GPIO_Init+0x1f2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a49      	ldr	r2, [pc, #292]	@ (80055ec <HAL_GPIO_Init+0x2e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_GPIO_Init+0x1ee>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a48      	ldr	r2, [pc, #288]	@ (80055f0 <HAL_GPIO_Init+0x2ec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00d      	beq.n	80054ee <HAL_GPIO_Init+0x1ea>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a47      	ldr	r2, [pc, #284]	@ (80055f4 <HAL_GPIO_Init+0x2f0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <HAL_GPIO_Init+0x1e6>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a46      	ldr	r2, [pc, #280]	@ (80055f8 <HAL_GPIO_Init+0x2f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <HAL_GPIO_Init+0x1e2>
 80054e2:	2305      	movs	r3, #5
 80054e4:	e00a      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054e6:	2306      	movs	r3, #6
 80054e8:	e008      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e004      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e002      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054fa:	2300      	movs	r3, #0
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	2103      	movs	r1, #3
 8005500:	400a      	ands	r2, r1
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	4093      	lsls	r3, r2
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800550c:	4935      	ldr	r1, [pc, #212]	@ (80055e4 <HAL_GPIO_Init+0x2e0>)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800551a:	4b38      	ldr	r3, [pc, #224]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	43da      	mvns	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	035b      	lsls	r3, r3, #13
 8005532:	4013      	ands	r3, r2
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800553e:	4b2f      	ldr	r3, [pc, #188]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005544:	4b2d      	ldr	r3, [pc, #180]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43da      	mvns	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	2380      	movs	r3, #128	@ 0x80
 800555a:	039b      	lsls	r3, r3, #14
 800555c:	4013      	ands	r3, r2
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005568:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800556e:	4b23      	ldr	r3, [pc, #140]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43da      	mvns	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	2380      	movs	r3, #128	@ 0x80
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	4013      	ands	r3, r2
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005592:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005598:	4b18      	ldr	r3, [pc, #96]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43da      	mvns	r2, r3
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	025b      	lsls	r3, r3, #9
 80055b0:	4013      	ands	r3, r2
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80055bc:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <HAL_GPIO_Init+0x2f8>)
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	3301      	adds	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	40da      	lsrs	r2, r3
 80055d0:	1e13      	subs	r3, r2, #0
 80055d2:	d000      	beq.n	80055d6 <HAL_GPIO_Init+0x2d2>
 80055d4:	e6a2      	b.n	800531c <HAL_GPIO_Init+0x18>
  }
}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	46c0      	nop			@ (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b006      	add	sp, #24
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40010000 	.word	0x40010000
 80055e8:	50000400 	.word	0x50000400
 80055ec:	50000800 	.word	0x50000800
 80055f0:	50000c00 	.word	0x50000c00
 80055f4:	50001000 	.word	0x50001000
 80055f8:	50001c00 	.word	0x50001c00
 80055fc:	40010400 	.word	0x40010400

08005600 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	0008      	movs	r0, r1
 800560a:	0011      	movs	r1, r2
 800560c:	1cbb      	adds	r3, r7, #2
 800560e:	1c02      	adds	r2, r0, #0
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	1c7b      	adds	r3, r7, #1
 8005614:	1c0a      	adds	r2, r1, #0
 8005616:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005618:	1c7b      	adds	r3, r7, #1
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005620:	1cbb      	adds	r3, r7, #2
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005628:	e003      	b.n	8005632 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800562a:	1cbb      	adds	r3, r7, #2
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b002      	add	sp, #8
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	0002      	movs	r2, r0
 8005644:	1dbb      	adds	r3, r7, #6
 8005646:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005648:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	1dba      	adds	r2, r7, #6
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	4013      	ands	r3, r2
 8005652:	d008      	beq.n	8005666 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005656:	1dba      	adds	r2, r7, #6
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800565c:	1dbb      	adds	r3, r7, #6
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff f88b 	bl	800477c <HAL_GPIO_EXTI_Callback>
  }
}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	b002      	add	sp, #8
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	40010400 	.word	0x40010400

08005674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e082      	b.n	800578c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2241      	movs	r2, #65	@ 0x41
 800568a:	5c9b      	ldrb	r3, [r3, r2]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	2100      	movs	r1, #0
 8005698:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f7ff fac7 	bl	8004c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2241      	movs	r2, #65	@ 0x41
 80056a6:	2124      	movs	r1, #36	@ 0x24
 80056a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2101      	movs	r1, #1
 80056b6:	438a      	bics	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4934      	ldr	r1, [pc, #208]	@ (8005794 <HAL_I2C_Init+0x120>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4931      	ldr	r1, [pc, #196]	@ (8005798 <HAL_I2C_Init+0x124>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d108      	bne.n	80056f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2180      	movs	r1, #128	@ 0x80
 80056ea:	0209      	lsls	r1, r1, #8
 80056ec:	430a      	orrs	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e007      	b.n	8005702 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2184      	movs	r1, #132	@ 0x84
 80056fc:	0209      	lsls	r1, r1, #8
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d104      	bne.n	8005714 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2280      	movs	r2, #128	@ 0x80
 8005710:	0112      	lsls	r2, r2, #4
 8005712:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	491f      	ldr	r1, [pc, #124]	@ (800579c <HAL_I2C_Init+0x128>)
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	491a      	ldr	r1, [pc, #104]	@ (8005798 <HAL_I2C_Init+0x124>)
 8005730:	400a      	ands	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	431a      	orrs	r2, r3
 800573e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69d9      	ldr	r1, [r3, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2101      	movs	r1, #1
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2241      	movs	r2, #65	@ 0x41
 8005778:	2120      	movs	r1, #32
 800577a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2242      	movs	r2, #66	@ 0x42
 8005786:	2100      	movs	r1, #0
 8005788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	0018      	movs	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	b002      	add	sp, #8
 8005792:	bd80      	pop	{r7, pc}
 8005794:	f0ffffff 	.word	0xf0ffffff
 8005798:	ffff7fff 	.word	0xffff7fff
 800579c:	02008000 	.word	0x02008000

080057a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b089      	sub	sp, #36	@ 0x24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	000c      	movs	r4, r1
 80057aa:	0010      	movs	r0, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	230a      	movs	r3, #10
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	1c22      	adds	r2, r4, #0
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	2308      	movs	r3, #8
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	1c02      	adds	r2, r0, #0
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	1dbb      	adds	r3, r7, #6
 80057c0:	1c0a      	adds	r2, r1, #0
 80057c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2241      	movs	r2, #65	@ 0x41
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d000      	beq.n	80057d2 <HAL_I2C_Mem_Write+0x32>
 80057d0:	e10c      	b.n	80059ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_I2C_Mem_Write+0x42>
 80057d8:	232c      	movs	r3, #44	@ 0x2c
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2280      	movs	r2, #128	@ 0x80
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0ff      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2240      	movs	r2, #64	@ 0x40
 80057f2:	5c9b      	ldrb	r3, [r3, r2]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_I2C_Mem_Write+0x5c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0f8      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2240      	movs	r2, #64	@ 0x40
 8005800:	2101      	movs	r1, #1
 8005802:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005804:	f7ff fca2 	bl	800514c <HAL_GetTick>
 8005808:	0003      	movs	r3, r0
 800580a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	0219      	lsls	r1, r3, #8
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	2319      	movs	r3, #25
 8005818:	2201      	movs	r2, #1
 800581a:	f000 fb0b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0e3      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2241      	movs	r2, #65	@ 0x41
 800582a:	2121      	movs	r1, #33	@ 0x21
 800582c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2242      	movs	r2, #66	@ 0x42
 8005832:	2140      	movs	r1, #64	@ 0x40
 8005834:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005840:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	222c      	movs	r2, #44	@ 0x2c
 8005846:	18ba      	adds	r2, r7, r2
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005852:	1dbb      	adds	r3, r7, #6
 8005854:	881c      	ldrh	r4, [r3, #0]
 8005856:	2308      	movs	r3, #8
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	881a      	ldrh	r2, [r3, #0]
 800585c:	230a      	movs	r3, #10
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	8819      	ldrh	r1, [r3, #0]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	0023      	movs	r3, r4
 800586e:	f000 f9f9 	bl	8005c64 <I2C_RequestMemoryWrite>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d005      	beq.n	8005882 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2240      	movs	r2, #64	@ 0x40
 800587a:	2100      	movs	r1, #0
 800587c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0b5      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	2bff      	cmp	r3, #255	@ 0xff
 800588a:	d911      	bls.n	80058b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	22ff      	movs	r2, #255	@ 0xff
 8005890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005896:	b2da      	uxtb	r2, r3
 8005898:	2380      	movs	r3, #128	@ 0x80
 800589a:	045c      	lsls	r4, r3, #17
 800589c:	230a      	movs	r3, #10
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	8819      	ldrh	r1, [r3, #0]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	2300      	movs	r3, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	0023      	movs	r3, r4
 80058aa:	f000 fc93 	bl	80061d4 <I2C_TransferConfig>
 80058ae:	e012      	b.n	80058d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	2380      	movs	r3, #128	@ 0x80
 80058c2:	049c      	lsls	r4, r3, #18
 80058c4:	230a      	movs	r3, #10
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	8819      	ldrh	r1, [r3, #0]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	0023      	movs	r3, r4
 80058d2:	f000 fc7f 	bl	80061d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 faf7 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e081      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03a      	beq.n	800599a <HAL_I2C_Mem_Write+0x1fa>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d136      	bne.n	800599a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800592c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0013      	movs	r3, r2
 8005936:	2200      	movs	r2, #0
 8005938:	2180      	movs	r1, #128	@ 0x80
 800593a:	f000 fa7b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e053      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	2bff      	cmp	r3, #255	@ 0xff
 800594e:	d911      	bls.n	8005974 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	22ff      	movs	r2, #255	@ 0xff
 8005954:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	045c      	lsls	r4, r3, #17
 8005960:	230a      	movs	r3, #10
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	8819      	ldrh	r1, [r3, #0]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	0023      	movs	r3, r4
 800596e:	f000 fc31 	bl	80061d4 <I2C_TransferConfig>
 8005972:	e012      	b.n	800599a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	049c      	lsls	r4, r3, #18
 8005988:	230a      	movs	r3, #10
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	8819      	ldrh	r1, [r3, #0]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	0023      	movs	r3, r4
 8005996:	f000 fc1d 	bl	80061d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d198      	bne.n	80058d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fad6 	bl	8005f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80059b0:	1e03      	subs	r3, r0, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01a      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2220      	movs	r2, #32
 80059be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	490b      	ldr	r1, [pc, #44]	@ (80059f8 <HAL_I2C_Mem_Write+0x258>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2241      	movs	r2, #65	@ 0x41
 80059d4:	2120      	movs	r1, #32
 80059d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2242      	movs	r2, #66	@ 0x42
 80059dc:	2100      	movs	r1, #0
 80059de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	2100      	movs	r1, #0
 80059e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e000      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b007      	add	sp, #28
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	fe00e800 	.word	0xfe00e800

080059fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b089      	sub	sp, #36	@ 0x24
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	000c      	movs	r4, r1
 8005a06:	0010      	movs	r0, r2
 8005a08:	0019      	movs	r1, r3
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	1c22      	adds	r2, r4, #0
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	2308      	movs	r3, #8
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	1c02      	adds	r2, r0, #0
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	1dbb      	adds	r3, r7, #6
 8005a1c:	1c0a      	adds	r2, r1, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2241      	movs	r2, #65	@ 0x41
 8005a24:	5c9b      	ldrb	r3, [r3, r2]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d000      	beq.n	8005a2e <HAL_I2C_Mem_Read+0x32>
 8005a2c:	e110      	b.n	8005c50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_I2C_Mem_Read+0x42>
 8005a34:	232c      	movs	r3, #44	@ 0x2c
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2280      	movs	r2, #128	@ 0x80
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e103      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2240      	movs	r2, #64	@ 0x40
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_I2C_Mem_Read+0x5c>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e0fc      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2240      	movs	r2, #64	@ 0x40
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a60:	f7ff fb74 	bl	800514c <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a68:	2380      	movs	r3, #128	@ 0x80
 8005a6a:	0219      	lsls	r1, r3, #8
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	2319      	movs	r3, #25
 8005a74:	2201      	movs	r2, #1
 8005a76:	f000 f9dd 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	1e03      	subs	r3, r0, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0e7      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2241      	movs	r2, #65	@ 0x41
 8005a86:	2122      	movs	r1, #34	@ 0x22
 8005a88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2242      	movs	r2, #66	@ 0x42
 8005a8e:	2140      	movs	r1, #64	@ 0x40
 8005a90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	222c      	movs	r2, #44	@ 0x2c
 8005aa2:	18ba      	adds	r2, r7, r2
 8005aa4:	8812      	ldrh	r2, [r2, #0]
 8005aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	881c      	ldrh	r4, [r3, #0]
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	881a      	ldrh	r2, [r3, #0]
 8005ab8:	230a      	movs	r3, #10
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	8819      	ldrh	r1, [r3, #0]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	0023      	movs	r3, r4
 8005aca:	f000 f92f 	bl	8005d2c <I2C_RequestMemoryRead>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2240      	movs	r2, #64	@ 0x40
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0b9      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2bff      	cmp	r3, #255	@ 0xff
 8005ae6:	d911      	bls.n	8005b0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	22ff      	movs	r2, #255	@ 0xff
 8005aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	045c      	lsls	r4, r3, #17
 8005af8:	230a      	movs	r3, #10
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	8819      	ldrh	r1, [r3, #0]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4b56      	ldr	r3, [pc, #344]	@ (8005c5c <HAL_I2C_Mem_Read+0x260>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	0023      	movs	r3, r4
 8005b06:	f000 fb65 	bl	80061d4 <I2C_TransferConfig>
 8005b0a:	e012      	b.n	8005b32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	049c      	lsls	r4, r3, #18
 8005b20:	230a      	movs	r3, #10
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	8819      	ldrh	r1, [r3, #0]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	4b4c      	ldr	r3, [pc, #304]	@ (8005c5c <HAL_I2C_Mem_Read+0x260>)
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	0023      	movs	r3, r4
 8005b2e:	f000 fb51 	bl	80061d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0013      	movs	r3, r2
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2104      	movs	r1, #4
 8005b40:	f000 f978 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e082      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03a      	beq.n	8005bfe <HAL_I2C_Mem_Read+0x202>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d136      	bne.n	8005bfe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0013      	movs	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2180      	movs	r1, #128	@ 0x80
 8005b9e:	f000 f949 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	1e03      	subs	r3, r0, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e053      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2bff      	cmp	r3, #255	@ 0xff
 8005bb2:	d911      	bls.n	8005bd8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	22ff      	movs	r2, #255	@ 0xff
 8005bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	045c      	lsls	r4, r3, #17
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	8819      	ldrh	r1, [r3, #0]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	0023      	movs	r3, r4
 8005bd2:	f000 faff 	bl	80061d4 <I2C_TransferConfig>
 8005bd6:	e012      	b.n	8005bfe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	049c      	lsls	r4, r3, #18
 8005bec:	230a      	movs	r3, #10
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	8819      	ldrh	r1, [r3, #0]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	f000 faeb 	bl	80061d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d194      	bne.n	8005b32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f9a4 	bl	8005f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c14:	1e03      	subs	r3, r0, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01a      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2220      	movs	r2, #32
 8005c22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	490c      	ldr	r1, [pc, #48]	@ (8005c60 <HAL_I2C_Mem_Read+0x264>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2241      	movs	r2, #65	@ 0x41
 8005c38:	2120      	movs	r1, #32
 8005c3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2242      	movs	r2, #66	@ 0x42
 8005c40:	2100      	movs	r1, #0
 8005c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	@ 0x40
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b007      	add	sp, #28
 8005c58:	bd90      	pop	{r4, r7, pc}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	80002400 	.word	0x80002400
 8005c60:	fe00e800 	.word	0xfe00e800

08005c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	000c      	movs	r4, r1
 8005c6e:	0010      	movs	r0, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	250a      	movs	r5, #10
 8005c74:	197b      	adds	r3, r7, r5
 8005c76:	1c22      	adds	r2, r4, #0
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	1c02      	adds	r2, r0, #0
 8005c80:	801a      	strh	r2, [r3, #0]
 8005c82:	1dbb      	adds	r3, r7, #6
 8005c84:	1c0a      	adds	r2, r1, #0
 8005c86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c88:	1dbb      	adds	r3, r7, #6
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	045c      	lsls	r4, r3, #17
 8005c92:	197b      	adds	r3, r7, r5
 8005c94:	8819      	ldrh	r1, [r3, #0]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <I2C_RequestMemoryWrite+0xc4>)
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0023      	movs	r3, r4
 8005c9e:	f000 fa99 	bl	80061d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f911 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e033      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d107      	bne.n	8005cce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ccc:	e019      	b.n	8005d02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cce:	2308      	movs	r3, #8
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce2:	6a39      	ldr	r1, [r7, #32]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f8f2 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d001      	beq.n	8005cf4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e014      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	0013      	movs	r3, r2
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	@ 0x80
 8005d10:	f000 f890 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b004      	add	sp, #16
 8005d24:	bdb0      	pop	{r4, r5, r7, pc}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	80002000 	.word	0x80002000

08005d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	000c      	movs	r4, r1
 8005d36:	0010      	movs	r0, r2
 8005d38:	0019      	movs	r1, r3
 8005d3a:	250a      	movs	r5, #10
 8005d3c:	197b      	adds	r3, r7, r5
 8005d3e:	1c22      	adds	r2, r4, #0
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	2308      	movs	r3, #8
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	1c02      	adds	r2, r0, #0
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	1dbb      	adds	r3, r7, #6
 8005d4c:	1c0a      	adds	r2, r1, #0
 8005d4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d50:	1dbb      	adds	r3, r7, #6
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	197b      	adds	r3, r7, r5
 8005d58:	8819      	ldrh	r1, [r3, #0]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	4b23      	ldr	r3, [pc, #140]	@ (8005dec <I2C_RequestMemoryRead+0xc0>)
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	f000 fa37 	bl	80061d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d68:	6a39      	ldr	r1, [r7, #32]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 f8af 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d72:	1e03      	subs	r3, r0, #0
 8005d74:	d001      	beq.n	8005d7a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e033      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d7a:	1dbb      	adds	r3, r7, #6
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d82:	2308      	movs	r3, #8
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d90:	e019      	b.n	8005dc6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d92:	2308      	movs	r3, #8
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f890 	bl	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d001      	beq.n	8005db8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e014      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005db8:	2308      	movs	r3, #8
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	0013      	movs	r3, r2
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2140      	movs	r1, #64	@ 0x40
 8005dd4:	f000 f82e 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d001      	beq.n	8005de0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b004      	add	sp, #16
 8005de8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	80002000 	.word	0x80002000

08005df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d103      	bne.n	8005e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d007      	beq.n	8005e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2101      	movs	r1, #1
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
  }
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e44:	e030      	b.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d02d      	beq.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7ff f97e 	bl	800514c <HAL_GetTick>
 8005e50:	0002      	movs	r2, r0
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d122      	bne.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	425a      	negs	r2, r3
 8005e72:	4153      	adcs	r3, r2
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	001a      	movs	r2, r3
 8005e78:	1dfb      	adds	r3, r7, #7
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d113      	bne.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e84:	2220      	movs	r2, #32
 8005e86:	431a      	orrs	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2241      	movs	r2, #65	@ 0x41
 8005e90:	2120      	movs	r1, #32
 8005e92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2242      	movs	r2, #66	@ 0x42
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2240      	movs	r2, #64	@ 0x40
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e00f      	b.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	425a      	negs	r2, r3
 8005eb8:	4153      	adcs	r3, r2
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	001a      	movs	r2, r3
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d0bf      	beq.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b004      	add	sp, #16
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005edc:	e032      	b.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 f87d 	bl	8005fe4 <I2C_IsErrorOccurred>
 8005eea:	1e03      	subs	r3, r0, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e030      	b.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	d025      	beq.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7ff f928 	bl	800514c <HAL_GetTick>
 8005efc:	0002      	movs	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d11a      	bne.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2202      	movs	r2, #2
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d013      	beq.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	2220      	movs	r2, #32
 8005f22:	431a      	orrs	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2241      	movs	r2, #65	@ 0x41
 8005f2c:	2120      	movs	r1, #32
 8005f2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2242      	movs	r2, #66	@ 0x42
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2240      	movs	r2, #64	@ 0x40
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e007      	b.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d1c5      	bne.n	8005ede <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b004      	add	sp, #16
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f68:	e02f      	b.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f837 	bl	8005fe4 <I2C_IsErrorOccurred>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d001      	beq.n	8005f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e02d      	b.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7ff f8e5 	bl	800514c <HAL_GetTick>
 8005f82:	0002      	movs	r2, r0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11a      	bne.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d013      	beq.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2241      	movs	r2, #65	@ 0x41
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2242      	movs	r2, #66	@ 0x42
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2240      	movs	r2, #64	@ 0x40
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e007      	b.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d1c8      	bne.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	0018      	movs	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b004      	add	sp, #16
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	@ 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2327      	movs	r3, #39	@ 0x27
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2210      	movs	r2, #16
 800600c:	4013      	ands	r3, r2
 800600e:	d100      	bne.n	8006012 <I2C_IsErrorOccurred+0x2e>
 8006010:	e079      	b.n	8006106 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2210      	movs	r2, #16
 8006018:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800601a:	e057      	b.n	80060cc <I2C_IsErrorOccurred+0xe8>
 800601c:	2227      	movs	r2, #39	@ 0x27
 800601e:	18bb      	adds	r3, r7, r2
 8006020:	18ba      	adds	r2, r7, r2
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3301      	adds	r3, #1
 800602a:	d04f      	beq.n	80060cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800602c:	f7ff f88e 	bl	800514c <HAL_GetTick>
 8006030:	0002      	movs	r2, r0
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <I2C_IsErrorOccurred+0x5e>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d144      	bne.n	80060cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	2380      	movs	r3, #128	@ 0x80
 800604a:	01db      	lsls	r3, r3, #7
 800604c:	4013      	ands	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006050:	2013      	movs	r0, #19
 8006052:	183b      	adds	r3, r7, r0
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	2142      	movs	r1, #66	@ 0x42
 8006058:	5c52      	ldrb	r2, [r2, r1]
 800605a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	2380      	movs	r3, #128	@ 0x80
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	401a      	ands	r2, r3
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	429a      	cmp	r2, r3
 800606e:	d126      	bne.n	80060be <I2C_IsErrorOccurred+0xda>
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	2380      	movs	r3, #128	@ 0x80
 8006074:	01db      	lsls	r3, r3, #7
 8006076:	429a      	cmp	r2, r3
 8006078:	d021      	beq.n	80060be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800607a:	183b      	adds	r3, r7, r0
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b20      	cmp	r3, #32
 8006080:	d01d      	beq.n	80060be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	01c9      	lsls	r1, r1, #7
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006094:	f7ff f85a 	bl	800514c <HAL_GetTick>
 8006098:	0003      	movs	r3, r0
 800609a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800609c:	e00f      	b.n	80060be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800609e:	f7ff f855 	bl	800514c <HAL_GetTick>
 80060a2:	0002      	movs	r2, r0
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b19      	cmp	r3, #25
 80060aa:	d908      	bls.n	80060be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2220      	movs	r2, #32
 80060b0:	4313      	orrs	r3, r2
 80060b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060b4:	2327      	movs	r3, #39	@ 0x27
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]

              break;
 80060bc:	e006      	b.n	80060cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2220      	movs	r2, #32
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d1e8      	bne.n	800609e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2220      	movs	r2, #32
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d004      	beq.n	80060e4 <I2C_IsErrorOccurred+0x100>
 80060da:	2327      	movs	r3, #39	@ 0x27
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d09b      	beq.n	800601c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060e4:	2327      	movs	r3, #39	@ 0x27
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2220      	movs	r2, #32
 80060f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	2204      	movs	r2, #4
 80060fa:	4313      	orrs	r3, r2
 80060fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060fe:	2327      	movs	r3, #39	@ 0x27
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	2380      	movs	r3, #128	@ 0x80
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4013      	ands	r3, r2
 8006116:	d00c      	beq.n	8006132 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2201      	movs	r2, #1
 800611c:	4313      	orrs	r3, r2
 800611e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2280      	movs	r2, #128	@ 0x80
 8006126:	0052      	lsls	r2, r2, #1
 8006128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800612a:	2327      	movs	r3, #39	@ 0x27
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	2380      	movs	r3, #128	@ 0x80
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4013      	ands	r3, r2
 800613a:	d00c      	beq.n	8006156 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2208      	movs	r2, #8
 8006140:	4313      	orrs	r3, r2
 8006142:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2280      	movs	r2, #128	@ 0x80
 800614a:	00d2      	lsls	r2, r2, #3
 800614c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800614e:	2327      	movs	r3, #39	@ 0x27
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	2380      	movs	r3, #128	@ 0x80
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4013      	ands	r3, r2
 800615e:	d00c      	beq.n	800617a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2202      	movs	r2, #2
 8006164:	4313      	orrs	r3, r2
 8006166:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006172:	2327      	movs	r3, #39	@ 0x27
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800617a:	2327      	movs	r3, #39	@ 0x27
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01d      	beq.n	80061c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0018      	movs	r0, r3
 8006188:	f7ff fe32 	bl	8005df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	490e      	ldr	r1, [pc, #56]	@ (80061d0 <I2C_IsErrorOccurred+0x1ec>)
 8006198:	400a      	ands	r2, r1
 800619a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2241      	movs	r2, #65	@ 0x41
 80061ac:	2120      	movs	r1, #32
 80061ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2242      	movs	r2, #66	@ 0x42
 80061b4:	2100      	movs	r1, #0
 80061b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2240      	movs	r2, #64	@ 0x40
 80061bc:	2100      	movs	r1, #0
 80061be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80061c0:	2327      	movs	r3, #39	@ 0x27
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	781b      	ldrb	r3, [r3, #0]
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b00a      	add	sp, #40	@ 0x28
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	fe00e800 	.word	0xfe00e800

080061d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	0008      	movs	r0, r1
 80061de:	0011      	movs	r1, r2
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	240a      	movs	r4, #10
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	1c02      	adds	r2, r0, #0
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	2009      	movs	r0, #9
 80061ec:	183b      	adds	r3, r7, r0
 80061ee:	1c0a      	adds	r2, r1, #0
 80061f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061f2:	193b      	adds	r3, r7, r4
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	059b      	lsls	r3, r3, #22
 80061f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	0419      	lsls	r1, r3, #16
 8006200:	23ff      	movs	r3, #255	@ 0xff
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006206:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	4313      	orrs	r3, r2
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621e:	0d51      	lsrs	r1, r2, #21
 8006220:	2280      	movs	r2, #128	@ 0x80
 8006222:	00d2      	lsls	r2, r2, #3
 8006224:	400a      	ands	r2, r1
 8006226:	4907      	ldr	r1, [pc, #28]	@ (8006244 <I2C_TransferConfig+0x70>)
 8006228:	430a      	orrs	r2, r1
 800622a:	43d2      	mvns	r2, r2
 800622c:	401a      	ands	r2, r3
 800622e:	0011      	movs	r1, r2
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	46bd      	mov	sp, r7
 800623e:	b007      	add	sp, #28
 8006240:	bd90      	pop	{r4, r7, pc}
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	03ff63ff 	.word	0x03ff63ff

08006248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2241      	movs	r2, #65	@ 0x41
 8006256:	5c9b      	ldrb	r3, [r3, r2]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b20      	cmp	r3, #32
 800625c:	d138      	bne.n	80062d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2240      	movs	r2, #64	@ 0x40
 8006262:	5c9b      	ldrb	r3, [r3, r2]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006268:	2302      	movs	r3, #2
 800626a:	e032      	b.n	80062d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2240      	movs	r2, #64	@ 0x40
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2241      	movs	r2, #65	@ 0x41
 8006278:	2124      	movs	r1, #36	@ 0x24
 800627a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2101      	movs	r1, #1
 8006288:	438a      	bics	r2, r1
 800628a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4911      	ldr	r1, [pc, #68]	@ (80062dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006298:	400a      	ands	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6819      	ldr	r1, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2101      	movs	r1, #1
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2241      	movs	r2, #65	@ 0x41
 80062c0:	2120      	movs	r1, #32
 80062c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2240      	movs	r2, #64	@ 0x40
 80062c8:	2100      	movs	r1, #0
 80062ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e000      	b.n	80062d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b002      	add	sp, #8
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	ffffefff 	.word	0xffffefff

080062e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2241      	movs	r2, #65	@ 0x41
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d139      	bne.n	800636a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2240      	movs	r2, #64	@ 0x40
 80062fa:	5c9b      	ldrb	r3, [r3, r2]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006300:	2302      	movs	r3, #2
 8006302:	e033      	b.n	800636c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	2101      	movs	r1, #1
 800630a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2241      	movs	r2, #65	@ 0x41
 8006310:	2124      	movs	r1, #36	@ 0x24
 8006312:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2101      	movs	r1, #1
 8006320:	438a      	bics	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2101      	movs	r1, #1
 8006352:	430a      	orrs	r2, r1
 8006354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2241      	movs	r2, #65	@ 0x41
 800635a:	2120      	movs	r1, #32
 800635c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2240      	movs	r2, #64	@ 0x40
 8006362:	2100      	movs	r1, #0
 8006364:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800636a:	2302      	movs	r3, #2
  }
}
 800636c:	0018      	movs	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	b004      	add	sp, #16
 8006372:	bd80      	pop	{r7, pc}
 8006374:	fffff0ff 	.word	0xfffff0ff

08006378 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800637c:	4b04      	ldr	r3, [pc, #16]	@ (8006390 <HAL_PWR_EnableBkUpAccess+0x18>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b03      	ldr	r3, [pc, #12]	@ (8006390 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006382:	2180      	movs	r1, #128	@ 0x80
 8006384:	0049      	lsls	r1, r1, #1
 8006386:	430a      	orrs	r2, r1
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40007000 	.word	0x40007000

08006394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006394:	b5b0      	push	{r4, r5, r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f000 fbbf 	bl	8006b26 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a8:	4bc9      	ldr	r3, [pc, #804]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	220c      	movs	r2, #12
 80063ae:	4013      	ands	r3, r2
 80063b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063b2:	4bc7      	ldr	r3, [pc, #796]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	2380      	movs	r3, #128	@ 0x80
 80063b8:	025b      	lsls	r3, r3, #9
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2201      	movs	r2, #1
 80063c4:	4013      	ands	r3, r2
 80063c6:	d100      	bne.n	80063ca <HAL_RCC_OscConfig+0x36>
 80063c8:	e07e      	b.n	80064c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d007      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d112      	bne.n	80063fc <HAL_RCC_OscConfig+0x68>
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	025b      	lsls	r3, r3, #9
 80063dc:	429a      	cmp	r2, r3
 80063de:	d10d      	bne.n	80063fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	4bbb      	ldr	r3, [pc, #748]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	2380      	movs	r3, #128	@ 0x80
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	4013      	ands	r3, r2
 80063ea:	d100      	bne.n	80063ee <HAL_RCC_OscConfig+0x5a>
 80063ec:	e06b      	b.n	80064c6 <HAL_RCC_OscConfig+0x132>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d167      	bne.n	80064c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f000 fb95 	bl	8006b26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	2380      	movs	r3, #128	@ 0x80
 8006402:	025b      	lsls	r3, r3, #9
 8006404:	429a      	cmp	r2, r3
 8006406:	d107      	bne.n	8006418 <HAL_RCC_OscConfig+0x84>
 8006408:	4bb1      	ldr	r3, [pc, #708]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4bb0      	ldr	r3, [pc, #704]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	0249      	lsls	r1, r1, #9
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e027      	b.n	8006468 <HAL_RCC_OscConfig+0xd4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	23a0      	movs	r3, #160	@ 0xa0
 800641e:	02db      	lsls	r3, r3, #11
 8006420:	429a      	cmp	r2, r3
 8006422:	d10e      	bne.n	8006442 <HAL_RCC_OscConfig+0xae>
 8006424:	4baa      	ldr	r3, [pc, #680]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4ba9      	ldr	r3, [pc, #676]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	02c9      	lsls	r1, r1, #11
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	4ba7      	ldr	r3, [pc, #668]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4ba6      	ldr	r3, [pc, #664]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006438:	2180      	movs	r1, #128	@ 0x80
 800643a:	0249      	lsls	r1, r1, #9
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e012      	b.n	8006468 <HAL_RCC_OscConfig+0xd4>
 8006442:	4ba3      	ldr	r3, [pc, #652]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4ba2      	ldr	r3, [pc, #648]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006448:	49a2      	ldr	r1, [pc, #648]	@ (80066d4 <HAL_RCC_OscConfig+0x340>)
 800644a:	400a      	ands	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	4ba0      	ldr	r3, [pc, #640]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	2380      	movs	r3, #128	@ 0x80
 8006454:	025b      	lsls	r3, r3, #9
 8006456:	4013      	ands	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4b9c      	ldr	r3, [pc, #624]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b9b      	ldr	r3, [pc, #620]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006462:	499d      	ldr	r1, [pc, #628]	@ (80066d8 <HAL_RCC_OscConfig+0x344>)
 8006464:	400a      	ands	r2, r1
 8006466:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d015      	beq.n	800649c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fe fe6c 	bl	800514c <HAL_GetTick>
 8006474:	0003      	movs	r3, r0
 8006476:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006478:	e009      	b.n	800648e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800647a:	f7fe fe67 	bl	800514c <HAL_GetTick>
 800647e:	0002      	movs	r2, r0
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b64      	cmp	r3, #100	@ 0x64
 8006486:	d902      	bls.n	800648e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	f000 fb4c 	bl	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800648e:	4b90      	ldr	r3, [pc, #576]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	4013      	ands	r3, r2
 8006498:	d0ef      	beq.n	800647a <HAL_RCC_OscConfig+0xe6>
 800649a:	e015      	b.n	80064c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fe fe56 	bl	800514c <HAL_GetTick>
 80064a0:	0003      	movs	r3, r0
 80064a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a6:	f7fe fe51 	bl	800514c <HAL_GetTick>
 80064aa:	0002      	movs	r2, r0
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b64      	cmp	r3, #100	@ 0x64
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e336      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064b8:	4b85      	ldr	r3, [pc, #532]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	4013      	ands	r3, r2
 80064c2:	d1f0      	bne.n	80064a6 <HAL_RCC_OscConfig+0x112>
 80064c4:	e000      	b.n	80064c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2202      	movs	r2, #2
 80064ce:	4013      	ands	r3, r2
 80064d0:	d100      	bne.n	80064d4 <HAL_RCC_OscConfig+0x140>
 80064d2:	e099      	b.n	8006608 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	2220      	movs	r2, #32
 80064de:	4013      	ands	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80064e2:	4b7b      	ldr	r3, [pc, #492]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b7a      	ldr	r3, [pc, #488]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80064e8:	2120      	movs	r1, #32
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2220      	movs	r2, #32
 80064f2:	4393      	bics	r3, r2
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b0c      	cmp	r3, #12
 8006500:	d13e      	bne.n	8006580 <HAL_RCC_OscConfig+0x1ec>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d13b      	bne.n	8006580 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006508:	4b71      	ldr	r3, [pc, #452]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2204      	movs	r2, #4
 800650e:	4013      	ands	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_RCC_OscConfig+0x188>
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e304      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651c:	4b6c      	ldr	r3, [pc, #432]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4a6e      	ldr	r2, [pc, #440]	@ (80066dc <HAL_RCC_OscConfig+0x348>)
 8006522:	4013      	ands	r3, r2
 8006524:	0019      	movs	r1, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	4b68      	ldr	r3, [pc, #416]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006532:	4b67      	ldr	r3, [pc, #412]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2209      	movs	r2, #9
 8006538:	4393      	bics	r3, r2
 800653a:	0019      	movs	r1, r3
 800653c:	4b64      	ldr	r3, [pc, #400]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006544:	f000 fc42 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006548:	0001      	movs	r1, r0
 800654a:	4b61      	ldr	r3, [pc, #388]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	220f      	movs	r2, #15
 8006552:	4013      	ands	r3, r2
 8006554:	4a62      	ldr	r2, [pc, #392]	@ (80066e0 <HAL_RCC_OscConfig+0x34c>)
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	000a      	movs	r2, r1
 800655a:	40da      	lsrs	r2, r3
 800655c:	4b61      	ldr	r3, [pc, #388]	@ (80066e4 <HAL_RCC_OscConfig+0x350>)
 800655e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006560:	4b61      	ldr	r3, [pc, #388]	@ (80066e8 <HAL_RCC_OscConfig+0x354>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2513      	movs	r5, #19
 8006566:	197c      	adds	r4, r7, r5
 8006568:	0018      	movs	r0, r3
 800656a:	f7fe fc2f 	bl	8004dcc <HAL_InitTick>
 800656e:	0003      	movs	r3, r0
 8006570:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006572:	197b      	adds	r3, r7, r5
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d046      	beq.n	8006608 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800657a:	197b      	adds	r3, r7, r5
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	e2d2      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d027      	beq.n	80065d6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006586:	4b52      	ldr	r3, [pc, #328]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2209      	movs	r2, #9
 800658c:	4393      	bics	r3, r2
 800658e:	0019      	movs	r1, r3
 8006590:	4b4f      	ldr	r3, [pc, #316]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006598:	f7fe fdd8 	bl	800514c <HAL_GetTick>
 800659c:	0003      	movs	r3, r0
 800659e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a2:	f7fe fdd3 	bl	800514c <HAL_GetTick>
 80065a6:	0002      	movs	r2, r0
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e2b8      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b4:	4b46      	ldr	r3, [pc, #280]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2204      	movs	r2, #4
 80065ba:	4013      	ands	r3, r2
 80065bc:	d0f1      	beq.n	80065a2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b44      	ldr	r3, [pc, #272]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4a46      	ldr	r2, [pc, #280]	@ (80066dc <HAL_RCC_OscConfig+0x348>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	0019      	movs	r1, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	021a      	lsls	r2, r3, #8
 80065ce:	4b40      	ldr	r3, [pc, #256]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
 80065d4:	e018      	b.n	8006608 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d6:	4b3e      	ldr	r3, [pc, #248]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b3d      	ldr	r3, [pc, #244]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80065dc:	2101      	movs	r1, #1
 80065de:	438a      	bics	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e2:	f7fe fdb3 	bl	800514c <HAL_GetTick>
 80065e6:	0003      	movs	r3, r0
 80065e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ec:	f7fe fdae 	bl	800514c <HAL_GetTick>
 80065f0:	0002      	movs	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e293      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065fe:	4b34      	ldr	r3, [pc, #208]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	4013      	ands	r3, r2
 8006606:	d1f1      	bne.n	80065ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2210      	movs	r2, #16
 800660e:	4013      	ands	r3, r2
 8006610:	d100      	bne.n	8006614 <HAL_RCC_OscConfig+0x280>
 8006612:	e0a2      	b.n	800675a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d140      	bne.n	800669c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800661a:	4b2d      	ldr	r3, [pc, #180]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	2380      	movs	r3, #128	@ 0x80
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4013      	ands	r3, r2
 8006624:	d005      	beq.n	8006632 <HAL_RCC_OscConfig+0x29e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e279      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006632:	4b27      	ldr	r3, [pc, #156]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	4a2d      	ldr	r2, [pc, #180]	@ (80066ec <HAL_RCC_OscConfig+0x358>)
 8006638:	4013      	ands	r3, r2
 800663a:	0019      	movs	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006640:	4b23      	ldr	r3, [pc, #140]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006646:	4b22      	ldr	r3, [pc, #136]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	0a19      	lsrs	r1, r3, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	061a      	lsls	r2, r3, #24
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	0b5b      	lsrs	r3, r3, #13
 8006660:	3301      	adds	r3, #1
 8006662:	2280      	movs	r2, #128	@ 0x80
 8006664:	0212      	lsls	r2, r2, #8
 8006666:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	210f      	movs	r1, #15
 8006670:	400b      	ands	r3, r1
 8006672:	491b      	ldr	r1, [pc, #108]	@ (80066e0 <HAL_RCC_OscConfig+0x34c>)
 8006674:	5ccb      	ldrb	r3, [r1, r3]
 8006676:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006678:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <HAL_RCC_OscConfig+0x350>)
 800667a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800667c:	4b1a      	ldr	r3, [pc, #104]	@ (80066e8 <HAL_RCC_OscConfig+0x354>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2513      	movs	r5, #19
 8006682:	197c      	adds	r4, r7, r5
 8006684:	0018      	movs	r0, r3
 8006686:	f7fe fba1 	bl	8004dcc <HAL_InitTick>
 800668a:	0003      	movs	r3, r0
 800668c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800668e:	197b      	adds	r3, r7, r5
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d061      	beq.n	800675a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006696:	197b      	adds	r3, r7, r5
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	e244      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d040      	beq.n	8006726 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066a4:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <HAL_RCC_OscConfig+0x33c>)
 80066aa:	2180      	movs	r1, #128	@ 0x80
 80066ac:	0049      	lsls	r1, r1, #1
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fe fd4b 	bl	800514c <HAL_GetTick>
 80066b6:	0003      	movs	r3, r0
 80066b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80066ba:	e019      	b.n	80066f0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066bc:	f7fe fd46 	bl	800514c <HAL_GetTick>
 80066c0:	0002      	movs	r2, r0
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d912      	bls.n	80066f0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e22b      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	40021000 	.word	0x40021000
 80066d4:	fffeffff 	.word	0xfffeffff
 80066d8:	fffbffff 	.word	0xfffbffff
 80066dc:	ffffe0ff 	.word	0xffffe0ff
 80066e0:	08013abc 	.word	0x08013abc
 80066e4:	20000004 	.word	0x20000004
 80066e8:	20000008 	.word	0x20000008
 80066ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80066f0:	4bca      	ldr	r3, [pc, #808]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4013      	ands	r3, r2
 80066fa:	d0df      	beq.n	80066bc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066fc:	4bc7      	ldr	r3, [pc, #796]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4ac7      	ldr	r2, [pc, #796]	@ (8006a20 <HAL_RCC_OscConfig+0x68c>)
 8006702:	4013      	ands	r3, r2
 8006704:	0019      	movs	r1, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800670a:	4bc4      	ldr	r3, [pc, #784]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006710:	4bc2      	ldr	r3, [pc, #776]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	0a19      	lsrs	r1, r3, #8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	061a      	lsls	r2, r3, #24
 800671e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	e019      	b.n	800675a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006726:	4bbd      	ldr	r3, [pc, #756]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4bbc      	ldr	r3, [pc, #752]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800672c:	49bd      	ldr	r1, [pc, #756]	@ (8006a24 <HAL_RCC_OscConfig+0x690>)
 800672e:	400a      	ands	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006732:	f7fe fd0b 	bl	800514c <HAL_GetTick>
 8006736:	0003      	movs	r3, r0
 8006738:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800673c:	f7fe fd06 	bl	800514c <HAL_GetTick>
 8006740:	0002      	movs	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1eb      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800674e:	4bb3      	ldr	r3, [pc, #716]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	2380      	movs	r3, #128	@ 0x80
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4013      	ands	r3, r2
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2208      	movs	r2, #8
 8006760:	4013      	ands	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d019      	beq.n	80067a0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676c:	4bab      	ldr	r3, [pc, #684]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800676e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006770:	4baa      	ldr	r3, [pc, #680]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006772:	2101      	movs	r1, #1
 8006774:	430a      	orrs	r2, r1
 8006776:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fe fce8 	bl	800514c <HAL_GetTick>
 800677c:	0003      	movs	r3, r0
 800677e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006782:	f7fe fce3 	bl	800514c <HAL_GetTick>
 8006786:	0002      	movs	r2, r0
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1c8      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006794:	4ba1      	ldr	r3, [pc, #644]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006798:	2202      	movs	r2, #2
 800679a:	4013      	ands	r3, r2
 800679c:	d0f1      	beq.n	8006782 <HAL_RCC_OscConfig+0x3ee>
 800679e:	e018      	b.n	80067d2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a0:	4b9e      	ldr	r3, [pc, #632]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067a4:	4b9d      	ldr	r3, [pc, #628]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067a6:	2101      	movs	r1, #1
 80067a8:	438a      	bics	r2, r1
 80067aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ac:	f7fe fcce 	bl	800514c <HAL_GetTick>
 80067b0:	0003      	movs	r3, r0
 80067b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b6:	f7fe fcc9 	bl	800514c <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e1ae      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067c8:	4b94      	ldr	r3, [pc, #592]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	2202      	movs	r2, #2
 80067ce:	4013      	ands	r3, r2
 80067d0:	d1f1      	bne.n	80067b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2204      	movs	r2, #4
 80067d8:	4013      	ands	r3, r2
 80067da:	d100      	bne.n	80067de <HAL_RCC_OscConfig+0x44a>
 80067dc:	e0ae      	b.n	800693c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067de:	2023      	movs	r0, #35	@ 0x23
 80067e0:	183b      	adds	r3, r7, r0
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ea:	2380      	movs	r3, #128	@ 0x80
 80067ec:	055b      	lsls	r3, r3, #21
 80067ee:	4013      	ands	r3, r2
 80067f0:	d109      	bne.n	8006806 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	4b8a      	ldr	r3, [pc, #552]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067f6:	4b89      	ldr	r3, [pc, #548]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80067f8:	2180      	movs	r1, #128	@ 0x80
 80067fa:	0549      	lsls	r1, r1, #21
 80067fc:	430a      	orrs	r2, r1
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006800:	183b      	adds	r3, r7, r0
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006806:	4b88      	ldr	r3, [pc, #544]	@ (8006a28 <HAL_RCC_OscConfig+0x694>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	2380      	movs	r3, #128	@ 0x80
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	4013      	ands	r3, r2
 8006810:	d11a      	bne.n	8006848 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006812:	4b85      	ldr	r3, [pc, #532]	@ (8006a28 <HAL_RCC_OscConfig+0x694>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b84      	ldr	r3, [pc, #528]	@ (8006a28 <HAL_RCC_OscConfig+0x694>)
 8006818:	2180      	movs	r1, #128	@ 0x80
 800681a:	0049      	lsls	r1, r1, #1
 800681c:	430a      	orrs	r2, r1
 800681e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006820:	f7fe fc94 	bl	800514c <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800682a:	f7fe fc8f 	bl	800514c <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b64      	cmp	r3, #100	@ 0x64
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e174      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a28 <HAL_RCC_OscConfig+0x694>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	4013      	ands	r3, r2
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	429a      	cmp	r2, r3
 8006852:	d107      	bne.n	8006864 <HAL_RCC_OscConfig+0x4d0>
 8006854:	4b71      	ldr	r3, [pc, #452]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006858:	4b70      	ldr	r3, [pc, #448]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800685a:	2180      	movs	r1, #128	@ 0x80
 800685c:	0049      	lsls	r1, r1, #1
 800685e:	430a      	orrs	r2, r1
 8006860:	651a      	str	r2, [r3, #80]	@ 0x50
 8006862:	e031      	b.n	80068c8 <HAL_RCC_OscConfig+0x534>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <HAL_RCC_OscConfig+0x4f2>
 800686c:	4b6b      	ldr	r3, [pc, #428]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800686e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006870:	4b6a      	ldr	r3, [pc, #424]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006872:	496c      	ldr	r1, [pc, #432]	@ (8006a24 <HAL_RCC_OscConfig+0x690>)
 8006874:	400a      	ands	r2, r1
 8006876:	651a      	str	r2, [r3, #80]	@ 0x50
 8006878:	4b68      	ldr	r3, [pc, #416]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800687a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800687c:	4b67      	ldr	r3, [pc, #412]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800687e:	496b      	ldr	r1, [pc, #428]	@ (8006a2c <HAL_RCC_OscConfig+0x698>)
 8006880:	400a      	ands	r2, r1
 8006882:	651a      	str	r2, [r3, #80]	@ 0x50
 8006884:	e020      	b.n	80068c8 <HAL_RCC_OscConfig+0x534>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	23a0      	movs	r3, #160	@ 0xa0
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	429a      	cmp	r2, r3
 8006890:	d10e      	bne.n	80068b0 <HAL_RCC_OscConfig+0x51c>
 8006892:	4b62      	ldr	r3, [pc, #392]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006896:	4b61      	ldr	r3, [pc, #388]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006898:	2180      	movs	r1, #128	@ 0x80
 800689a:	00c9      	lsls	r1, r1, #3
 800689c:	430a      	orrs	r2, r1
 800689e:	651a      	str	r2, [r3, #80]	@ 0x50
 80068a0:	4b5e      	ldr	r3, [pc, #376]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068a4:	4b5d      	ldr	r3, [pc, #372]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068a6:	2180      	movs	r1, #128	@ 0x80
 80068a8:	0049      	lsls	r1, r1, #1
 80068aa:	430a      	orrs	r2, r1
 80068ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0x534>
 80068b0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068b4:	4b59      	ldr	r3, [pc, #356]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068b6:	495b      	ldr	r1, [pc, #364]	@ (8006a24 <HAL_RCC_OscConfig+0x690>)
 80068b8:	400a      	ands	r2, r1
 80068ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80068bc:	4b57      	ldr	r3, [pc, #348]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068c0:	4b56      	ldr	r3, [pc, #344]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068c2:	495a      	ldr	r1, [pc, #360]	@ (8006a2c <HAL_RCC_OscConfig+0x698>)
 80068c4:	400a      	ands	r2, r1
 80068c6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d0:	f7fe fc3c 	bl	800514c <HAL_GetTick>
 80068d4:	0003      	movs	r3, r0
 80068d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d8:	e009      	b.n	80068ee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fe fc37 	bl	800514c <HAL_GetTick>
 80068de:	0002      	movs	r2, r0
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	4a52      	ldr	r2, [pc, #328]	@ (8006a30 <HAL_RCC_OscConfig+0x69c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e11b      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ee:	4b4b      	ldr	r3, [pc, #300]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80068f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4013      	ands	r3, r2
 80068f8:	d0ef      	beq.n	80068da <HAL_RCC_OscConfig+0x546>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068fc:	f7fe fc26 	bl	800514c <HAL_GetTick>
 8006900:	0003      	movs	r3, r0
 8006902:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006904:	e009      	b.n	800691a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006906:	f7fe fc21 	bl	800514c <HAL_GetTick>
 800690a:	0002      	movs	r2, r0
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	4a47      	ldr	r2, [pc, #284]	@ (8006a30 <HAL_RCC_OscConfig+0x69c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e105      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800691a:	4b40      	ldr	r3, [pc, #256]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800691c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800691e:	2380      	movs	r3, #128	@ 0x80
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4013      	ands	r3, r2
 8006924:	d1ef      	bne.n	8006906 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006926:	2323      	movs	r3, #35	@ 0x23
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006930:	4b3a      	ldr	r3, [pc, #232]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006934:	4b39      	ldr	r3, [pc, #228]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006936:	493f      	ldr	r1, [pc, #252]	@ (8006a34 <HAL_RCC_OscConfig+0x6a0>)
 8006938:	400a      	ands	r2, r1
 800693a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2220      	movs	r2, #32
 8006942:	4013      	ands	r3, r2
 8006944:	d049      	beq.n	80069da <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d026      	beq.n	800699c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800694e:	4b33      	ldr	r3, [pc, #204]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	4b32      	ldr	r3, [pc, #200]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006954:	2101      	movs	r1, #1
 8006956:	430a      	orrs	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	4b30      	ldr	r3, [pc, #192]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800695c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800695e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006960:	2101      	movs	r1, #1
 8006962:	430a      	orrs	r2, r1
 8006964:	635a      	str	r2, [r3, #52]	@ 0x34
 8006966:	4b34      	ldr	r3, [pc, #208]	@ (8006a38 <HAL_RCC_OscConfig+0x6a4>)
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <HAL_RCC_OscConfig+0x6a4>)
 800696c:	2180      	movs	r1, #128	@ 0x80
 800696e:	0189      	lsls	r1, r1, #6
 8006970:	430a      	orrs	r2, r1
 8006972:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006974:	f7fe fbea 	bl	800514c <HAL_GetTick>
 8006978:	0003      	movs	r3, r0
 800697a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800697e:	f7fe fbe5 	bl	800514c <HAL_GetTick>
 8006982:	0002      	movs	r2, r0
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e0ca      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006990:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2202      	movs	r2, #2
 8006996:	4013      	ands	r3, r2
 8006998:	d0f1      	beq.n	800697e <HAL_RCC_OscConfig+0x5ea>
 800699a:	e01e      	b.n	80069da <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800699c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80069a2:	2101      	movs	r1, #1
 80069a4:	438a      	bics	r2, r1
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	4b23      	ldr	r3, [pc, #140]	@ (8006a38 <HAL_RCC_OscConfig+0x6a4>)
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	4b22      	ldr	r3, [pc, #136]	@ (8006a38 <HAL_RCC_OscConfig+0x6a4>)
 80069ae:	4923      	ldr	r1, [pc, #140]	@ (8006a3c <HAL_RCC_OscConfig+0x6a8>)
 80069b0:	400a      	ands	r2, r1
 80069b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fe fbca 	bl	800514c <HAL_GetTick>
 80069b8:	0003      	movs	r3, r0
 80069ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069be:	f7fe fbc5 	bl	800514c <HAL_GetTick>
 80069c2:	0002      	movs	r2, r0
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e0aa      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069d0:	4b12      	ldr	r3, [pc, #72]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2202      	movs	r2, #2
 80069d6:	4013      	ands	r3, r2
 80069d8:	d1f1      	bne.n	80069be <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <HAL_RCC_OscConfig+0x650>
 80069e2:	e09f      	b.n	8006b24 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	d100      	bne.n	80069ec <HAL_RCC_OscConfig+0x658>
 80069ea:	e078      	b.n	8006ade <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d159      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f4:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <HAL_RCC_OscConfig+0x688>)
 80069fa:	4911      	ldr	r1, [pc, #68]	@ (8006a40 <HAL_RCC_OscConfig+0x6ac>)
 80069fc:	400a      	ands	r2, r1
 80069fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a00:	f7fe fba4 	bl	800514c <HAL_GetTick>
 8006a04:	0003      	movs	r3, r0
 8006a06:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a08:	e01c      	b.n	8006a44 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0a:	f7fe fb9f 	bl	800514c <HAL_GetTick>
 8006a0e:	0002      	movs	r2, r0
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d915      	bls.n	8006a44 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e084      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	ffff1fff 	.word	0xffff1fff
 8006a24:	fffffeff 	.word	0xfffffeff
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	fffffbff 	.word	0xfffffbff
 8006a30:	00001388 	.word	0x00001388
 8006a34:	efffffff 	.word	0xefffffff
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	ffffdfff 	.word	0xffffdfff
 8006a40:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a44:	4b3a      	ldr	r3, [pc, #232]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	049b      	lsls	r3, r3, #18
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d1dc      	bne.n	8006a0a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a50:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4a37      	ldr	r2, [pc, #220]	@ (8006b34 <HAL_RCC_OscConfig+0x7a0>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	4b31      	ldr	r3, [pc, #196]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a70:	4b2f      	ldr	r3, [pc, #188]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b2e      	ldr	r3, [pc, #184]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a76:	2180      	movs	r1, #128	@ 0x80
 8006a78:	0449      	lsls	r1, r1, #17
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7e:	f7fe fb65 	bl	800514c <HAL_GetTick>
 8006a82:	0003      	movs	r3, r0
 8006a84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fe fb60 	bl	800514c <HAL_GetTick>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e045      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006a9a:	4b25      	ldr	r3, [pc, #148]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	2380      	movs	r3, #128	@ 0x80
 8006aa0:	049b      	lsls	r3, r3, #18
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x6f4>
 8006aa6:	e03d      	b.n	8006b24 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa8:	4b21      	ldr	r3, [pc, #132]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b20      	ldr	r3, [pc, #128]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006aae:	4922      	ldr	r1, [pc, #136]	@ (8006b38 <HAL_RCC_OscConfig+0x7a4>)
 8006ab0:	400a      	ands	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fe fb4a 	bl	800514c <HAL_GetTick>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abe:	f7fe fb45 	bl	800514c <HAL_GetTick>
 8006ac2:	0002      	movs	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e02a      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006ad0:	4b17      	ldr	r3, [pc, #92]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	2380      	movs	r3, #128	@ 0x80
 8006ad6:	049b      	lsls	r3, r3, #18
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCC_OscConfig+0x72a>
 8006adc:	e022      	b.n	8006b24 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e01d      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006aea:	4b11      	ldr	r3, [pc, #68]	@ (8006b30 <HAL_RCC_OscConfig+0x79c>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	2380      	movs	r3, #128	@ 0x80
 8006af4:	025b      	lsls	r3, r3, #9
 8006af6:	401a      	ands	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d10f      	bne.n	8006b20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	23f0      	movs	r3, #240	@ 0xf0
 8006b04:	039b      	lsls	r3, r3, #14
 8006b06:	401a      	ands	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d107      	bne.n	8006b20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	23c0      	movs	r3, #192	@ 0xc0
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	401a      	ands	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b00a      	add	sp, #40	@ 0x28
 8006b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	40021000 	.word	0x40021000
 8006b34:	ff02ffff 	.word	0xff02ffff
 8006b38:	feffffff 	.word	0xfeffffff

08006b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b3c:	b5b0      	push	{r4, r5, r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e128      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b50:	4b96      	ldr	r3, [pc, #600]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d91e      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b93      	ldr	r3, [pc, #588]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	4393      	bics	r3, r2
 8006b66:	0019      	movs	r1, r3
 8006b68:	4b90      	ldr	r3, [pc, #576]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b70:	f7fe faec 	bl	800514c <HAL_GetTick>
 8006b74:	0003      	movs	r3, r0
 8006b76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b78:	e009      	b.n	8006b8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7a:	f7fe fae7 	bl	800514c <HAL_GetTick>
 8006b7e:	0002      	movs	r2, r0
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	4a8a      	ldr	r2, [pc, #552]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e109      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8e:	4b87      	ldr	r3, [pc, #540]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4013      	ands	r3, r2
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d1ee      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba6:	4b83      	ldr	r3, [pc, #524]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	22f0      	movs	r2, #240	@ 0xf0
 8006bac:	4393      	bics	r3, r2
 8006bae:	0019      	movs	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	4b7f      	ldr	r3, [pc, #508]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d100      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0x8a>
 8006bc4:	e089      	b.n	8006cda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d107      	bne.n	8006bde <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bce:	4b79      	ldr	r3, [pc, #484]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d120      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0e1      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d107      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006be6:	4b73      	ldr	r3, [pc, #460]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	2380      	movs	r3, #128	@ 0x80
 8006bec:	049b      	lsls	r3, r3, #18
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d114      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0d5      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2204      	movs	r2, #4
 8006c04:	4013      	ands	r3, r2
 8006c06:	d109      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0ca      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006c0c:	4b69      	ldr	r3, [pc, #420]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	2380      	movs	r3, #128	@ 0x80
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4013      	ands	r3, r2
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0c2      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c1c:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2203      	movs	r2, #3
 8006c22:	4393      	bics	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4b62      	ldr	r3, [pc, #392]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c30:	f7fe fa8c 	bl	800514c <HAL_GetTick>
 8006c34:	0003      	movs	r3, r0
 8006c36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d111      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c40:	e009      	b.n	8006c56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c42:	f7fe fa83 	bl	800514c <HAL_GetTick>
 8006c46:	0002      	movs	r2, r0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	4a58      	ldr	r2, [pc, #352]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0a5      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c56:	4b57      	ldr	r3, [pc, #348]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d1ef      	bne.n	8006c42 <HAL_RCC_ClockConfig+0x106>
 8006c62:	e03a      	b.n	8006cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d111      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c6c:	e009      	b.n	8006c82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c6e:	f7fe fa6d 	bl	800514c <HAL_GetTick>
 8006c72:	0002      	movs	r2, r0
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	4a4d      	ldr	r2, [pc, #308]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e08f      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c82:	4b4c      	ldr	r3, [pc, #304]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	220c      	movs	r2, #12
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d1ef      	bne.n	8006c6e <HAL_RCC_ClockConfig+0x132>
 8006c8e:	e024      	b.n	8006cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d11b      	bne.n	8006cd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c98:	e009      	b.n	8006cae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c9a:	f7fe fa57 	bl	800514c <HAL_GetTick>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e079      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cae:	4b41      	ldr	r3, [pc, #260]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	220c      	movs	r2, #12
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d1ef      	bne.n	8006c9a <HAL_RCC_ClockConfig+0x15e>
 8006cba:	e00e      	b.n	8006cda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fe fa46 	bl	800514c <HAL_GetTick>
 8006cc0:	0002      	movs	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e068      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006cd0:	4b38      	ldr	r3, [pc, #224]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	220c      	movs	r2, #12
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cda:	4b34      	ldr	r3, [pc, #208]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d21e      	bcs.n	8006d26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce8:	4b30      	ldr	r3, [pc, #192]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2201      	movs	r2, #1
 8006cee:	4393      	bics	r3, r2
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cfa:	f7fe fa27 	bl	800514c <HAL_GetTick>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	e009      	b.n	8006d18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d04:	f7fe fa22 	bl	800514c <HAL_GetTick>
 8006d08:	0002      	movs	r2, r0
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	4a28      	ldr	r2, [pc, #160]	@ (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e044      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d18:	4b24      	ldr	r3, [pc, #144]	@ (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4013      	ands	r3, r2
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d1ee      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d30:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4a20      	ldr	r2, [pc, #128]	@ (8006db8 <HAL_RCC_ClockConfig+0x27c>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	0019      	movs	r1, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006d40:	430a      	orrs	r2, r1
 8006d42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d4e:	4b19      	ldr	r3, [pc, #100]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	4a1a      	ldr	r2, [pc, #104]	@ (8006dbc <HAL_RCC_ClockConfig+0x280>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	0019      	movs	r1, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	00da      	lsls	r2, r3, #3
 8006d5e:	4b15      	ldr	r3, [pc, #84]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006d60:	430a      	orrs	r2, r1
 8006d62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d64:	f000 f832 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006d68:	0001      	movs	r1, r0
 8006d6a:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <HAL_RCC_ClockConfig+0x278>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	220f      	movs	r2, #15
 8006d72:	4013      	ands	r3, r2
 8006d74:	4a12      	ldr	r2, [pc, #72]	@ (8006dc0 <HAL_RCC_ClockConfig+0x284>)
 8006d76:	5cd3      	ldrb	r3, [r2, r3]
 8006d78:	000a      	movs	r2, r1
 8006d7a:	40da      	lsrs	r2, r3
 8006d7c:	4b11      	ldr	r3, [pc, #68]	@ (8006dc4 <HAL_RCC_ClockConfig+0x288>)
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d80:	4b11      	ldr	r3, [pc, #68]	@ (8006dc8 <HAL_RCC_ClockConfig+0x28c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	250b      	movs	r5, #11
 8006d86:	197c      	adds	r4, r7, r5
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7fe f81f 	bl	8004dcc <HAL_InitTick>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006d92:	197b      	adds	r3, r7, r5
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006d9a:	197b      	adds	r3, r7, r5
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	e000      	b.n	8006da2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	0018      	movs	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b004      	add	sp, #16
 8006da8:	bdb0      	pop	{r4, r5, r7, pc}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	40022000 	.word	0x40022000
 8006db0:	00001388 	.word	0x00001388
 8006db4:	40021000 	.word	0x40021000
 8006db8:	fffff8ff 	.word	0xfffff8ff
 8006dbc:	ffffc7ff 	.word	0xffffc7ff
 8006dc0:	08013abc 	.word	0x08013abc
 8006dc4:	20000004 	.word	0x20000004
 8006dc8:	20000008 	.word	0x20000008

08006dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dcc:	b5b0      	push	{r4, r5, r7, lr}
 8006dce:	b08e      	sub	sp, #56	@ 0x38
 8006dd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dda:	230c      	movs	r3, #12
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	d014      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x40>
 8006de2:	d900      	bls.n	8006de6 <HAL_RCC_GetSysClockFreq+0x1a>
 8006de4:	e07b      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0x112>
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d002      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0x24>
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d00b      	beq.n	8006e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dee:	e076      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006df0:	4b44      	ldr	r3, [pc, #272]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2210      	movs	r2, #16
 8006df6:	4013      	ands	r3, r2
 8006df8:	d002      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006dfa:	4b43      	ldr	r3, [pc, #268]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006dfc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006dfe:	e07c      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006e00:	4b42      	ldr	r3, [pc, #264]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x140>)
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006e04:	e079      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e06:	4b42      	ldr	r3, [pc, #264]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x144>)
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006e0a:	e076      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0e:	0c9a      	lsrs	r2, r3, #18
 8006e10:	230f      	movs	r3, #15
 8006e12:	401a      	ands	r2, r3
 8006e14:	4b3f      	ldr	r3, [pc, #252]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x148>)
 8006e16:	5c9b      	ldrb	r3, [r3, r2]
 8006e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	0d9a      	lsrs	r2, r3, #22
 8006e1e:	2303      	movs	r3, #3
 8006e20:	4013      	ands	r3, r2
 8006e22:	3301      	adds	r3, #1
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e26:	4b37      	ldr	r3, [pc, #220]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	2380      	movs	r3, #128	@ 0x80
 8006e2c:	025b      	lsls	r3, r3, #9
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d01a      	beq.n	8006e68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	4a35      	ldr	r2, [pc, #212]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x144>)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	69b8      	ldr	r0, [r7, #24]
 8006e40:	69f9      	ldr	r1, [r7, #28]
 8006e42:	f7f9 fb8b 	bl	800055c <__aeabi_lmul>
 8006e46:	0002      	movs	r2, r0
 8006e48:	000b      	movs	r3, r1
 8006e4a:	0010      	movs	r0, r2
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f7f9 fb5f 	bl	800051c <__aeabi_uldivmod>
 8006e5e:	0002      	movs	r2, r0
 8006e60:	000b      	movs	r3, r1
 8006e62:	0013      	movs	r3, r2
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e66:	e037      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006e68:	4b26      	ldr	r3, [pc, #152]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d01a      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	4a23      	ldr	r2, [pc, #140]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	68b8      	ldr	r0, [r7, #8]
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	f7f9 fb6b 	bl	800055c <__aeabi_lmul>
 8006e86:	0002      	movs	r2, r0
 8006e88:	000b      	movs	r3, r1
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f7f9 fb3f 	bl	800051c <__aeabi_uldivmod>
 8006e9e:	0002      	movs	r2, r0
 8006ea0:	000b      	movs	r3, r1
 8006ea2:	0013      	movs	r3, r2
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea6:	e017      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	0018      	movs	r0, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	0019      	movs	r1, r3
 8006eb0:	4a16      	ldr	r2, [pc, #88]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x140>)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f7f9 fb52 	bl	800055c <__aeabi_lmul>
 8006eb8:	0002      	movs	r2, r0
 8006eba:	000b      	movs	r3, r1
 8006ebc:	0010      	movs	r0, r2
 8006ebe:	0019      	movs	r1, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	001c      	movs	r4, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	001d      	movs	r5, r3
 8006ec8:	0022      	movs	r2, r4
 8006eca:	002b      	movs	r3, r5
 8006ecc:	f7f9 fb26 	bl	800051c <__aeabi_uldivmod>
 8006ed0:	0002      	movs	r2, r0
 8006ed2:	000b      	movs	r3, r1
 8006ed4:	0013      	movs	r3, r2
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eda:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006edc:	e00d      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	0b5b      	lsrs	r3, r3, #13
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	3301      	adds	r3, #1
 8006eee:	2280      	movs	r2, #128	@ 0x80
 8006ef0:	0212      	lsls	r2, r2, #8
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	0013      	movs	r3, r2
 8006ef6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006ef8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b00e      	add	sp, #56	@ 0x38
 8006f02:	bdb0      	pop	{r4, r5, r7, pc}
 8006f04:	40021000 	.word	0x40021000
 8006f08:	003d0900 	.word	0x003d0900
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	007a1200 	.word	0x007a1200
 8006f14:	08013ad4 	.word	0x08013ad4

08006f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	20000004 	.word	0x20000004

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f30:	f7ff fff2 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f34:	0001      	movs	r1, r0
 8006f36:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	2207      	movs	r2, #7
 8006f3e:	4013      	ands	r3, r2
 8006f40:	4a04      	ldr	r2, [pc, #16]	@ (8006f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	40d9      	lsrs	r1, r3
 8006f46:	000b      	movs	r3, r1
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	40021000 	.word	0x40021000
 8006f54:	08013acc 	.word	0x08013acc

08006f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f5c:	f7ff ffdc 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f60:	0001      	movs	r1, r0
 8006f62:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	0adb      	lsrs	r3, r3, #11
 8006f68:	2207      	movs	r2, #7
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	4a04      	ldr	r2, [pc, #16]	@ (8006f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f6e:	5cd3      	ldrb	r3, [r2, r3]
 8006f70:	40d9      	lsrs	r1, r3
 8006f72:	000b      	movs	r3, r1
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	08013acc 	.word	0x08013acc

08006f84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	220f      	movs	r2, #15
 8006f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f94:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2203      	movs	r2, #3
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	22f0      	movs	r2, #240	@ 0xf0
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	23e0      	movs	r3, #224	@ 0xe0
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	401a      	ands	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006fba:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	08da      	lsrs	r2, r3, #3
 8006fc0:	23e0      	movs	r3, #224	@ 0xe0
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	401a      	ands	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006fca:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <HAL_RCC_GetClockConfig+0x60>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	401a      	ands	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	40022000 	.word	0x40022000

08006fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006ff0:	2317      	movs	r3, #23
 8006ff2:	18fb      	adds	r3, r7, r3
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	4013      	ands	r3, r2
 8007000:	d106      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	2380      	movs	r3, #128	@ 0x80
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	4013      	ands	r3, r2
 800700c:	d100      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800700e:	e104      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007010:	4bb9      	ldr	r3, [pc, #740]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	055b      	lsls	r3, r3, #21
 8007018:	4013      	ands	r3, r2
 800701a:	d10a      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800701c:	4bb6      	ldr	r3, [pc, #728]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800701e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007020:	4bb5      	ldr	r3, [pc, #724]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007022:	2180      	movs	r1, #128	@ 0x80
 8007024:	0549      	lsls	r1, r1, #21
 8007026:	430a      	orrs	r2, r1
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800702a:	2317      	movs	r3, #23
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	2201      	movs	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007032:	4bb2      	ldr	r3, [pc, #712]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	2380      	movs	r3, #128	@ 0x80
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	4013      	ands	r3, r2
 800703c:	d11a      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800703e:	4baf      	ldr	r3, [pc, #700]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4bae      	ldr	r3, [pc, #696]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007044:	2180      	movs	r1, #128	@ 0x80
 8007046:	0049      	lsls	r1, r1, #1
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800704c:	f7fe f87e 	bl	800514c <HAL_GetTick>
 8007050:	0003      	movs	r3, r0
 8007052:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007056:	f7fe f879 	bl	800514c <HAL_GetTick>
 800705a:	0002      	movs	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b64      	cmp	r3, #100	@ 0x64
 8007062:	d901      	bls.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e143      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007068:	4ba4      	ldr	r3, [pc, #656]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4013      	ands	r3, r2
 8007072:	d0f0      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007074:	4ba0      	ldr	r3, [pc, #640]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	23c0      	movs	r3, #192	@ 0xc0
 800707a:	039b      	lsls	r3, r3, #14
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	23c0      	movs	r3, #192	@ 0xc0
 8007086:	039b      	lsls	r3, r3, #14
 8007088:	4013      	ands	r3, r2
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d107      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	23c0      	movs	r3, #192	@ 0xc0
 8007096:	039b      	lsls	r3, r3, #14
 8007098:	4013      	ands	r3, r2
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d013      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	23c0      	movs	r3, #192	@ 0xc0
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	401a      	ands	r2, r3
 80070aa:	23c0      	movs	r3, #192	@ 0xc0
 80070ac:	029b      	lsls	r3, r3, #10
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070b2:	4b91      	ldr	r3, [pc, #580]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	2380      	movs	r3, #128	@ 0x80
 80070b8:	029b      	lsls	r3, r3, #10
 80070ba:	401a      	ands	r2, r3
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d101      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e113      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80070c8:	4b8b      	ldr	r3, [pc, #556]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070cc:	23c0      	movs	r3, #192	@ 0xc0
 80070ce:	029b      	lsls	r3, r3, #10
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d049      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	23c0      	movs	r3, #192	@ 0xc0
 80070e0:	029b      	lsls	r3, r3, #10
 80070e2:	4013      	ands	r3, r2
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d004      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2220      	movs	r2, #32
 80070f0:	4013      	ands	r3, r2
 80070f2:	d10d      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	23c0      	movs	r3, #192	@ 0xc0
 80070fa:	029b      	lsls	r3, r3, #10
 80070fc:	4013      	ands	r3, r2
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	429a      	cmp	r2, r3
 8007102:	d034      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	4013      	ands	r3, r2
 800710e:	d02e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007110:	4b79      	ldr	r3, [pc, #484]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007114:	4a7a      	ldr	r2, [pc, #488]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007116:	4013      	ands	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800711a:	4b77      	ldr	r3, [pc, #476]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800711c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800711e:	4b76      	ldr	r3, [pc, #472]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007120:	2180      	movs	r1, #128	@ 0x80
 8007122:	0309      	lsls	r1, r1, #12
 8007124:	430a      	orrs	r2, r1
 8007126:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007128:	4b73      	ldr	r3, [pc, #460]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800712a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800712c:	4b72      	ldr	r3, [pc, #456]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800712e:	4975      	ldr	r1, [pc, #468]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007130:	400a      	ands	r2, r1
 8007132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007134:	4b70      	ldr	r3, [pc, #448]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	2380      	movs	r3, #128	@ 0x80
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4013      	ands	r3, r2
 8007142:	d014      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fe f802 	bl	800514c <HAL_GetTick>
 8007148:	0003      	movs	r3, r0
 800714a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800714c:	e009      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800714e:	f7fd fffd 	bl	800514c <HAL_GetTick>
 8007152:	0002      	movs	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	4a6b      	ldr	r2, [pc, #428]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e0c6      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007162:	4b65      	ldr	r3, [pc, #404]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007166:	2380      	movs	r3, #128	@ 0x80
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4013      	ands	r3, r2
 800716c:	d0ef      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	2380      	movs	r3, #128	@ 0x80
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	4013      	ands	r3, r2
 8007178:	d01f      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	23c0      	movs	r3, #192	@ 0xc0
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	401a      	ands	r2, r3
 8007184:	23c0      	movs	r3, #192	@ 0xc0
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	429a      	cmp	r2, r3
 800718a:	d10c      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800718c:	4b5a      	ldr	r3, [pc, #360]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5e      	ldr	r2, [pc, #376]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007192:	4013      	ands	r3, r2
 8007194:	0019      	movs	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	23c0      	movs	r3, #192	@ 0xc0
 800719c:	039b      	lsls	r3, r3, #14
 800719e:	401a      	ands	r2, r3
 80071a0:	4b55      	ldr	r3, [pc, #340]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071a2:	430a      	orrs	r2, r1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	4b54      	ldr	r3, [pc, #336]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	23c0      	movs	r3, #192	@ 0xc0
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	401a      	ands	r2, r3
 80071b4:	4b50      	ldr	r3, [pc, #320]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071b6:	430a      	orrs	r2, r1
 80071b8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2220      	movs	r2, #32
 80071c0:	4013      	ands	r3, r2
 80071c2:	d01f      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	23c0      	movs	r3, #192	@ 0xc0
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	401a      	ands	r2, r3
 80071ce:	23c0      	movs	r3, #192	@ 0xc0
 80071d0:	029b      	lsls	r3, r3, #10
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80071d6:	4b48      	ldr	r3, [pc, #288]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a4c      	ldr	r2, [pc, #304]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80071dc:	4013      	ands	r3, r2
 80071de:	0019      	movs	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	23c0      	movs	r3, #192	@ 0xc0
 80071e6:	039b      	lsls	r3, r3, #14
 80071e8:	401a      	ands	r2, r3
 80071ea:	4b43      	ldr	r3, [pc, #268]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071ec:	430a      	orrs	r2, r1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	4b41      	ldr	r3, [pc, #260]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071f2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	23c0      	movs	r3, #192	@ 0xc0
 80071fa:	029b      	lsls	r3, r3, #10
 80071fc:	401a      	ands	r2, r3
 80071fe:	4b3e      	ldr	r3, [pc, #248]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007200:	430a      	orrs	r2, r1
 8007202:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007204:	2317      	movs	r3, #23
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d105      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720e:	4b3a      	ldr	r3, [pc, #232]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007212:	4b39      	ldr	r3, [pc, #228]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007214:	493e      	ldr	r1, [pc, #248]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007216:	400a      	ands	r2, r1
 8007218:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	4013      	ands	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007224:	4b34      	ldr	r3, [pc, #208]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	2203      	movs	r2, #3
 800722a:	4393      	bics	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	4b31      	ldr	r3, [pc, #196]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007234:	430a      	orrs	r2, r1
 8007236:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2202      	movs	r2, #2
 800723e:	4013      	ands	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007242:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007246:	220c      	movs	r2, #12
 8007248:	4393      	bics	r3, r2
 800724a:	0019      	movs	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	4b29      	ldr	r3, [pc, #164]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007252:	430a      	orrs	r2, r1
 8007254:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2204      	movs	r2, #4
 800725c:	4013      	ands	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007260:	4b25      	ldr	r3, [pc, #148]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007264:	4a2b      	ldr	r2, [pc, #172]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007266:	4013      	ands	r3, r2
 8007268:	0019      	movs	r1, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695a      	ldr	r2, [r3, #20]
 800726e:	4b22      	ldr	r3, [pc, #136]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007270:	430a      	orrs	r2, r1
 8007272:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2208      	movs	r2, #8
 800727a:	4013      	ands	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007282:	4a25      	ldr	r2, [pc, #148]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007284:	4013      	ands	r3, r2
 8007286:	0019      	movs	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699a      	ldr	r2, [r3, #24]
 800728c:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800728e:	430a      	orrs	r2, r1
 8007290:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	2380      	movs	r3, #128	@ 0x80
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4013      	ands	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800729e:	4b16      	ldr	r3, [pc, #88]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a2:	4a17      	ldr	r2, [pc, #92]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	0019      	movs	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072ae:	430a      	orrs	r2, r1
 80072b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2240      	movs	r2, #64	@ 0x40
 80072b8:	4013      	ands	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c0:	4a16      	ldr	r2, [pc, #88]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	0019      	movs	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072cc:	430a      	orrs	r2, r1
 80072ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2280      	movs	r2, #128	@ 0x80
 80072d6:	4013      	ands	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80072da:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072de:	4a10      	ldr	r2, [pc, #64]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80072ea:	430a      	orrs	r2, r1
 80072ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b006      	add	sp, #24
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40021000 	.word	0x40021000
 80072fc:	40007000 	.word	0x40007000
 8007300:	fffcffff 	.word	0xfffcffff
 8007304:	fff7ffff 	.word	0xfff7ffff
 8007308:	00001388 	.word	0x00001388
 800730c:	ffcfffff 	.word	0xffcfffff
 8007310:	efffffff 	.word	0xefffffff
 8007314:	fffff3ff 	.word	0xfffff3ff
 8007318:	ffffcfff 	.word	0xffffcfff
 800731c:	fbffffff 	.word	0xfbffffff
 8007320:	fff3ffff 	.word	0xfff3ffff

08007324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e083      	b.n	800743e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	2382      	movs	r3, #130	@ 0x82
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	429a      	cmp	r2, r3
 8007348:	d009      	beq.n	800735e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	61da      	str	r2, [r3, #28]
 8007350:	e005      	b.n	800735e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2251      	movs	r2, #81	@ 0x51
 8007368:	5c9b      	ldrb	r3, [r3, r2]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2250      	movs	r2, #80	@ 0x50
 8007374:	2100      	movs	r1, #0
 8007376:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0018      	movs	r0, r3
 800737c:	f7fd fc9c 	bl	8004cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2251      	movs	r2, #81	@ 0x51
 8007384:	2102      	movs	r1, #2
 8007386:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2140      	movs	r1, #64	@ 0x40
 8007394:	438a      	bics	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	2382      	movs	r3, #130	@ 0x82
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	401a      	ands	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6899      	ldr	r1, [r3, #8]
 80073a6:	2384      	movs	r3, #132	@ 0x84
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	400b      	ands	r3, r1
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68d9      	ldr	r1, [r3, #12]
 80073b2:	2380      	movs	r3, #128	@ 0x80
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	400b      	ands	r3, r1
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2102      	movs	r1, #2
 80073c0:	400b      	ands	r3, r1
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	2101      	movs	r1, #1
 80073ca:	400b      	ands	r3, r1
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6999      	ldr	r1, [r3, #24]
 80073d2:	2380      	movs	r3, #128	@ 0x80
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	400b      	ands	r3, r1
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	2138      	movs	r1, #56	@ 0x38
 80073e0:	400b      	ands	r3, r1
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	2180      	movs	r1, #128	@ 0x80
 80073ea:	400b      	ands	r3, r1
 80073ec:	431a      	orrs	r2, r3
 80073ee:	0011      	movs	r1, r2
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073f4:	2380      	movs	r3, #128	@ 0x80
 80073f6:	019b      	lsls	r3, r3, #6
 80073f8:	401a      	ands	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	2204      	movs	r2, #4
 800740a:	4013      	ands	r3, r2
 800740c:	0019      	movs	r1, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	2210      	movs	r2, #16
 8007414:	401a      	ands	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4907      	ldr	r1, [pc, #28]	@ (8007448 <HAL_SPI_Init+0x124>)
 800742a:	400a      	ands	r2, r1
 800742c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2251      	movs	r2, #81	@ 0x51
 8007438:	2101      	movs	r1, #1
 800743a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	0018      	movs	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	b002      	add	sp, #8
 8007444:	bd80      	pop	{r7, pc}
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	fffff7ff 	.word	0xfffff7ff

0800744c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	1dbb      	adds	r3, r7, #6
 800745a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800745c:	231f      	movs	r3, #31
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2250      	movs	r2, #80	@ 0x50
 8007468:	5c9b      	ldrb	r3, [r3, r2]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Transmit+0x26>
 800746e:	2302      	movs	r3, #2
 8007470:	e145      	b.n	80076fe <HAL_SPI_Transmit+0x2b2>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2250      	movs	r2, #80	@ 0x50
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800747a:	f7fd fe67 	bl	800514c <HAL_GetTick>
 800747e:	0003      	movs	r3, r0
 8007480:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007482:	2316      	movs	r3, #22
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	1dba      	adds	r2, r7, #6
 8007488:	8812      	ldrh	r2, [r2, #0]
 800748a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2251      	movs	r2, #81	@ 0x51
 8007490:	5c9b      	ldrb	r3, [r3, r2]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d004      	beq.n	80074a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007498:	231f      	movs	r3, #31
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	2202      	movs	r2, #2
 800749e:	701a      	strb	r2, [r3, #0]
    goto error;
 80074a0:	e126      	b.n	80076f0 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_SPI_Transmit+0x64>
 80074a8:	1dbb      	adds	r3, r7, #6
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80074b0:	231f      	movs	r3, #31
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80074b8:	e11a      	b.n	80076f0 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2251      	movs	r2, #81	@ 0x51
 80074be:	2103      	movs	r1, #3
 80074c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1dba      	adds	r2, r7, #6
 80074d2:	8812      	ldrh	r2, [r2, #0]
 80074d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1dba      	adds	r2, r7, #6
 80074da:	8812      	ldrh	r2, [r2, #0]
 80074dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	2380      	movs	r3, #128	@ 0x80
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	429a      	cmp	r2, r3
 8007506:	d110      	bne.n	800752a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2140      	movs	r1, #64	@ 0x40
 8007514:	438a      	bics	r2, r1
 8007516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2180      	movs	r1, #128	@ 0x80
 8007524:	01c9      	lsls	r1, r1, #7
 8007526:	430a      	orrs	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2240      	movs	r2, #64	@ 0x40
 8007532:	4013      	ands	r3, r2
 8007534:	2b40      	cmp	r3, #64	@ 0x40
 8007536:	d007      	beq.n	8007548 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2140      	movs	r1, #64	@ 0x40
 8007544:	430a      	orrs	r2, r1
 8007546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	429a      	cmp	r2, r3
 8007552:	d152      	bne.n	80075fa <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <HAL_SPI_Transmit+0x11a>
 800755c:	2316      	movs	r3, #22
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d143      	bne.n	80075ee <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	1c9a      	adds	r2, r3, #2
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800758a:	e030      	b.n	80075ee <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2202      	movs	r2, #2
 8007594:	4013      	ands	r3, r2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d112      	bne.n	80075c0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759e:	881a      	ldrh	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	1c9a      	adds	r2, r3, #2
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075be:	e016      	b.n	80075ee <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075c0:	f7fd fdc4 	bl	800514c <HAL_GetTick>
 80075c4:	0002      	movs	r2, r0
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d802      	bhi.n	80075d6 <HAL_SPI_Transmit+0x18a>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	d102      	bne.n	80075dc <HAL_SPI_Transmit+0x190>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80075dc:	231f      	movs	r3, #31
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	2203      	movs	r2, #3
 80075e2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2251      	movs	r2, #81	@ 0x51
 80075e8:	2101      	movs	r1, #1
 80075ea:	5499      	strb	r1, [r3, r2]
          goto error;
 80075ec:	e080      	b.n	80076f0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1c9      	bne.n	800758c <HAL_SPI_Transmit+0x140>
 80075f8:	e053      	b.n	80076a2 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <HAL_SPI_Transmit+0x1c0>
 8007602:	2316      	movs	r3, #22
 8007604:	18fb      	adds	r3, r7, r3
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d145      	bne.n	8007698 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007632:	e031      	b.n	8007698 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2202      	movs	r2, #2
 800763c:	4013      	ands	r3, r2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d113      	bne.n	800766a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007668:	e016      	b.n	8007698 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766a:	f7fd fd6f 	bl	800514c <HAL_GetTick>
 800766e:	0002      	movs	r2, r0
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d802      	bhi.n	8007680 <HAL_SPI_Transmit+0x234>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	d102      	bne.n	8007686 <HAL_SPI_Transmit+0x23a>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d108      	bne.n	8007698 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8007686:	231f      	movs	r3, #31
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2203      	movs	r2, #3
 800768c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2251      	movs	r2, #81	@ 0x51
 8007692:	2101      	movs	r1, #1
 8007694:	5499      	strb	r1, [r3, r2]
          goto error;
 8007696:	e02b      	b.n	80076f0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1c8      	bne.n	8007634 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	0018      	movs	r0, r3
 80076aa:	f000 fa85 	bl	8007bb8 <SPI_EndRxTxTransaction>
 80076ae:	1e03      	subs	r3, r0, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80076de:	231f      	movs	r3, #31
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	2201      	movs	r2, #1
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e003      	b.n	80076f0 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2251      	movs	r2, #81	@ 0x51
 80076ec:	2101      	movs	r1, #1
 80076ee:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2250      	movs	r2, #80	@ 0x50
 80076f4:	2100      	movs	r1, #0
 80076f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80076f8:	231f      	movs	r3, #31
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	781b      	ldrb	r3, [r3, #0]
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b008      	add	sp, #32
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b08c      	sub	sp, #48	@ 0x30
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	001a      	movs	r2, r3
 8007714:	1cbb      	adds	r3, r7, #2
 8007716:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800771c:	232b      	movs	r3, #43	@ 0x2b
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2250      	movs	r2, #80	@ 0x50
 8007728:	5c9b      	ldrb	r3, [r3, r2]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x2c>
 800772e:	2302      	movs	r3, #2
 8007730:	e1b0      	b.n	8007a94 <HAL_SPI_TransmitReceive+0x38e>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2250      	movs	r2, #80	@ 0x50
 8007736:	2101      	movs	r1, #1
 8007738:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800773a:	f7fd fd07 	bl	800514c <HAL_GetTick>
 800773e:	0003      	movs	r3, r0
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007742:	2023      	movs	r0, #35	@ 0x23
 8007744:	183b      	adds	r3, r7, r0
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	2151      	movs	r1, #81	@ 0x51
 800774a:	5c52      	ldrb	r2, [r2, r1]
 800774c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007754:	231a      	movs	r3, #26
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	1cba      	adds	r2, r7, #2
 800775a:	8812      	ldrh	r2, [r2, #0]
 800775c:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800775e:	183b      	adds	r3, r7, r0
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d011      	beq.n	800778a <HAL_SPI_TransmitReceive+0x84>
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	2382      	movs	r3, #130	@ 0x82
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	429a      	cmp	r2, r3
 800776e:	d107      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x7a>
 8007778:	183b      	adds	r3, r7, r0
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b04      	cmp	r3, #4
 800777e:	d004      	beq.n	800778a <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007780:	232b      	movs	r3, #43	@ 0x2b
 8007782:	18fb      	adds	r3, r7, r3
 8007784:	2202      	movs	r2, #2
 8007786:	701a      	strb	r2, [r3, #0]
    goto error;
 8007788:	e17d      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <HAL_SPI_TransmitReceive+0x98>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_SPI_TransmitReceive+0x98>
 8007796:	1cbb      	adds	r3, r7, #2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800779e:	232b      	movs	r3, #43	@ 0x2b
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80077a6:	e16e      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2251      	movs	r2, #81	@ 0x51
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d003      	beq.n	80077bc <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2251      	movs	r2, #81	@ 0x51
 80077b8:	2105      	movs	r1, #5
 80077ba:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1cba      	adds	r2, r7, #2
 80077cc:	8812      	ldrh	r2, [r2, #0]
 80077ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	1cba      	adds	r2, r7, #2
 80077d4:	8812      	ldrh	r2, [r2, #0]
 80077d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1cba      	adds	r2, r7, #2
 80077e2:	8812      	ldrh	r2, [r2, #0]
 80077e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1cba      	adds	r2, r7, #2
 80077ea:	8812      	ldrh	r2, [r2, #0]
 80077ec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2240      	movs	r2, #64	@ 0x40
 8007802:	4013      	ands	r3, r2
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	d007      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2140      	movs	r1, #64	@ 0x40
 8007814:	430a      	orrs	r2, r1
 8007816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	429a      	cmp	r2, r3
 8007822:	d000      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x120>
 8007824:	e07f      	b.n	8007926 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_SPI_TransmitReceive+0x134>
 800782e:	231a      	movs	r3, #26
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d000      	beq.n	800783a <HAL_SPI_TransmitReceive+0x134>
 8007838:	e06a      	b.n	8007910 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	881a      	ldrh	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784a:	1c9a      	adds	r2, r3, #2
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800785e:	e057      	b.n	8007910 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2202      	movs	r2, #2
 8007868:	4013      	ands	r3, r2
 800786a:	2b02      	cmp	r3, #2
 800786c:	d11b      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x1a0>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d016      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0x1a0>
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d113      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007882:	881a      	ldrh	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	1c9a      	adds	r2, r3, #2
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2201      	movs	r2, #1
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d119      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x1e2>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	b292      	uxth	r2, r2
 80078ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	1c9a      	adds	r2, r3, #2
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078e8:	f7fd fc30 	bl	800514c <HAL_GetTick>
 80078ec:	0002      	movs	r2, r0
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d80b      	bhi.n	8007910 <HAL_SPI_TransmitReceive+0x20a>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	3301      	adds	r3, #1
 80078fc:	d008      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80078fe:	232b      	movs	r3, #43	@ 0x2b
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	2203      	movs	r2, #3
 8007904:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2251      	movs	r2, #81	@ 0x51
 800790a:	2101      	movs	r1, #1
 800790c:	5499      	strb	r1, [r3, r2]
        goto error;
 800790e:	e0ba      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1a2      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x15a>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d19d      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x15a>
 8007924:	e083      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_SPI_TransmitReceive+0x234>
 800792e:	231a      	movs	r3, #26
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d000      	beq.n	800793a <HAL_SPI_TransmitReceive+0x234>
 8007938:	e06f      	b.n	8007a1a <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007960:	e05b      	b.n	8007a1a <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2202      	movs	r2, #2
 800796a:	4013      	ands	r3, r2
 800796c:	2b02      	cmp	r3, #2
 800796e:	d11c      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x2a4>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d017      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x2a4>
 800797a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d114      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2201      	movs	r2, #1
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d119      	bne.n	80079ec <HAL_SPI_TransmitReceive+0x2e6>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d014      	beq.n	80079ec <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e8:	2301      	movs	r3, #1
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079ec:	f7fd fbae 	bl	800514c <HAL_GetTick>
 80079f0:	0002      	movs	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d802      	bhi.n	8007a02 <HAL_SPI_TransmitReceive+0x2fc>
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	3301      	adds	r3, #1
 8007a00:	d102      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x302>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d108      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8007a08:	232b      	movs	r3, #43	@ 0x2b
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2251      	movs	r2, #81	@ 0x51
 8007a14:	2101      	movs	r1, #1
 8007a16:	5499      	strb	r1, [r3, r2]
        goto error;
 8007a18:	e035      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d19e      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x25c>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d199      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f000 f8bf 	bl	8007bb8 <SPI_EndRxTxTransaction>
 8007a3a:	1e03      	subs	r3, r0, #0
 8007a3c:	d007      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8007a3e:	232b      	movs	r3, #43	@ 0x2b
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	2201      	movs	r2, #1
 8007a44:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007a4c:	e01b      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8007a74:	232b      	movs	r3, #43	@ 0x2b
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	2201      	movs	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e003      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2251      	movs	r2, #81	@ 0x51
 8007a82:	2101      	movs	r1, #1
 8007a84:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2250      	movs	r2, #80	@ 0x50
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a8e:	232b      	movs	r3, #43	@ 0x2b
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	781b      	ldrb	r3, [r3, #0]
}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b00c      	add	sp, #48	@ 0x30
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aac:	f7fd fb4e 	bl	800514c <HAL_GetTick>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007abc:	f7fd fb46 	bl	800514c <HAL_GetTick>
 8007ac0:	0003      	movs	r3, r0
 8007ac2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8007bb0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	015b      	lsls	r3, r3, #5
 8007aca:	0d1b      	lsrs	r3, r3, #20
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	4353      	muls	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ad2:	e058      	b.n	8007b86 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	d055      	beq.n	8007b86 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ada:	f7fd fb37 	bl	800514c <HAL_GetTick>
 8007ade:	0002      	movs	r2, r0
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d902      	bls.n	8007af0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d142      	bne.n	8007b76 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	21e0      	movs	r1, #224	@ 0xe0
 8007afc:	438a      	bics	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	2382      	movs	r3, #130	@ 0x82
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d113      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	2380      	movs	r3, #128	@ 0x80
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d005      	beq.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	2380      	movs	r3, #128	@ 0x80
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d107      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2140      	movs	r1, #64	@ 0x40
 8007b30:	438a      	bics	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b38:	2380      	movs	r3, #128	@ 0x80
 8007b3a:	019b      	lsls	r3, r3, #6
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d110      	bne.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	491a      	ldr	r1, [pc, #104]	@ (8007bb4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b4c:	400a      	ands	r2, r1
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2180      	movs	r1, #128	@ 0x80
 8007b5c:	0189      	lsls	r1, r1, #6
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2251      	movs	r2, #81	@ 0x51
 8007b66:	2101      	movs	r1, #1
 8007b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2250      	movs	r2, #80	@ 0x50
 8007b6e:	2100      	movs	r1, #0
 8007b70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e017      	b.n	8007ba6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	425a      	negs	r2, r3
 8007b96:	4153      	adcs	r3, r2
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	001a      	movs	r2, r3
 8007b9c:	1dfb      	adds	r3, r7, #7
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d197      	bne.n	8007ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b008      	add	sp, #32
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	20000004 	.word	0x20000004
 8007bb4:	ffffdfff 	.word	0xffffdfff

08007bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c3c <SPI_EndRxTxTransaction+0x84>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	491d      	ldr	r1, [pc, #116]	@ (8007c40 <SPI_EndRxTxTransaction+0x88>)
 8007bca:	0018      	movs	r0, r3
 8007bcc:	f7f8 fab8 	bl	8000140 <__udivsi3>
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	0013      	movs	r3, r2
 8007bd6:	015b      	lsls	r3, r3, #5
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	2382      	movs	r3, #130	@ 0x82
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d112      	bne.n	8007c14 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2180      	movs	r1, #128	@ 0x80
 8007bfc:	f7ff ff4e 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8007c00:	1e03      	subs	r3, r0, #0
 8007c02:	d016      	beq.n	8007c32 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c08:	2220      	movs	r2, #32
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e00f      	b.n	8007c34 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2280      	movs	r2, #128	@ 0x80
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d0f2      	beq.n	8007c14 <SPI_EndRxTxTransaction+0x5c>
 8007c2e:	e000      	b.n	8007c32 <SPI_EndRxTxTransaction+0x7a>
        break;
 8007c30:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	0018      	movs	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b006      	add	sp, #24
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000004 	.word	0x20000004
 8007c40:	016e3600 	.word	0x016e3600

08007c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e032      	b.n	8007cbc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2239      	movs	r2, #57	@ 0x39
 8007c5a:	5c9b      	ldrb	r3, [r3, r2]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d107      	bne.n	8007c72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2238      	movs	r2, #56	@ 0x38
 8007c66:	2100      	movs	r1, #0
 8007c68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f000 f829 	bl	8007cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2239      	movs	r2, #57	@ 0x39
 8007c76:	2102      	movs	r1, #2
 8007c78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	0019      	movs	r1, r3
 8007c84:	0010      	movs	r0, r2
 8007c86:	f000 f97f 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	223e      	movs	r2, #62	@ 0x3e
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	223a      	movs	r2, #58	@ 0x3a
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	223b      	movs	r2, #59	@ 0x3b
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	5499      	strb	r1, [r3, r2]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	223c      	movs	r2, #60	@ 0x3c
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	223d      	movs	r2, #61	@ 0x3d
 8007cae:	2101      	movs	r1, #1
 8007cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2239      	movs	r2, #57	@ 0x39
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b002      	add	sp, #8
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007ccc:	46c0      	nop			@ (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2239      	movs	r2, #57	@ 0x39
 8007ce0:	5c9b      	ldrb	r3, [r3, r2]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e03b      	b.n	8007d64 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2239      	movs	r2, #57	@ 0x39
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2101      	movs	r1, #1
 8007d00:	430a      	orrs	r2, r1
 8007d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	2380      	movs	r3, #128	@ 0x80
 8007d0a:	05db      	lsls	r3, r3, #23
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d00e      	beq.n	8007d2e <HAL_TIM_Base_Start_IT+0x5a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <HAL_TIM_Base_Start_IT+0x98>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d009      	beq.n	8007d2e <HAL_TIM_Base_Start_IT+0x5a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a14      	ldr	r2, [pc, #80]	@ (8007d70 <HAL_TIM_Base_Start_IT+0x9c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d004      	beq.n	8007d2e <HAL_TIM_Base_Start_IT+0x5a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a12      	ldr	r2, [pc, #72]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xa0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d111      	bne.n	8007d52 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2207      	movs	r2, #7
 8007d36:	4013      	ands	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d010      	beq.n	8007d62 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d50:	e007      	b.n	8007d62 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	0018      	movs	r0, r3
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b004      	add	sp, #16
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40010800 	.word	0x40010800
 8007d74:	40011400 	.word	0x40011400

08007d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2202      	movs	r2, #2
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d124      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2202      	movs	r2, #2
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d11d      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2203      	movs	r2, #3
 8007da2:	4252      	negs	r2, r2
 8007da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2203      	movs	r2, #3
 8007db4:	4013      	ands	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f8cc 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007dc0:	e007      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f000 f8bf 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f8cb 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2204      	movs	r2, #4
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d125      	bne.n	8007e32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2204      	movs	r2, #4
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d11e      	bne.n	8007e32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2205      	movs	r2, #5
 8007dfa:	4252      	negs	r2, r2
 8007dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	23c0      	movs	r3, #192	@ 0xc0
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4013      	ands	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	0018      	movs	r0, r3
 8007e16:	f000 f89f 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007e1a:	e007      	b.n	8007e2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 f892 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	0018      	movs	r0, r3
 8007e28:	f000 f89e 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d124      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2208      	movs	r2, #8
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d11d      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2209      	movs	r2, #9
 8007e54:	4252      	negs	r2, r2
 8007e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	2203      	movs	r2, #3
 8007e66:	4013      	ands	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f873 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007e72:	e007      	b.n	8007e84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 f866 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f000 f872 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2210      	movs	r2, #16
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d125      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b10      	cmp	r3, #16
 8007ea4:	d11e      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2211      	movs	r2, #17
 8007eac:	4252      	negs	r2, r2
 8007eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	23c0      	movs	r3, #192	@ 0xc0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f000 f846 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007ecc:	e007      	b.n	8007ede <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f000 f839 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 f845 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2201      	movs	r2, #1
 8007eec:	4013      	ands	r3, r2
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10f      	bne.n	8007f12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d108      	bne.n	8007f12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2202      	movs	r2, #2
 8007f06:	4252      	negs	r2, r2
 8007f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7fc fe51 	bl	8004bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2240      	movs	r2, #64	@ 0x40
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b40      	cmp	r3, #64	@ 0x40
 8007f1e:	d10f      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2240      	movs	r2, #64	@ 0x40
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d108      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2241      	movs	r2, #65	@ 0x41
 8007f34:	4252      	negs	r2, r2
 8007f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 f81c 	bl	8007f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f40:	46c0      	nop			@ (mov r8, r8)
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b002      	add	sp, #8
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f50:	46c0      	nop			@ (mov r8, r8)
 8007f52:	46bd      	mov	sp, r7
 8007f54:	b002      	add	sp, #8
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f60:	46c0      	nop			@ (mov r8, r8)
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f70:	46c0      	nop			@ (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b002      	add	sp, #8
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f80:	46c0      	nop			@ (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	2380      	movs	r3, #128	@ 0x80
 8007f9c:	05db      	lsls	r3, r3, #23
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d00b      	beq.n	8007fba <TIM_Base_SetConfig+0x32>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a23      	ldr	r2, [pc, #140]	@ (8008034 <TIM_Base_SetConfig+0xac>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d007      	beq.n	8007fba <TIM_Base_SetConfig+0x32>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a22      	ldr	r2, [pc, #136]	@ (8008038 <TIM_Base_SetConfig+0xb0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d003      	beq.n	8007fba <TIM_Base_SetConfig+0x32>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a21      	ldr	r2, [pc, #132]	@ (800803c <TIM_Base_SetConfig+0xb4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d108      	bne.n	8007fcc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2270      	movs	r2, #112	@ 0x70
 8007fbe:	4393      	bics	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	2380      	movs	r3, #128	@ 0x80
 8007fd0:	05db      	lsls	r3, r3, #23
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d00b      	beq.n	8007fee <TIM_Base_SetConfig+0x66>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a16      	ldr	r2, [pc, #88]	@ (8008034 <TIM_Base_SetConfig+0xac>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_Base_SetConfig+0x66>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a15      	ldr	r2, [pc, #84]	@ (8008038 <TIM_Base_SetConfig+0xb0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_Base_SetConfig+0x66>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a14      	ldr	r2, [pc, #80]	@ (800803c <TIM_Base_SetConfig+0xb4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d108      	bne.n	8008000 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a13      	ldr	r2, [pc, #76]	@ (8008040 <TIM_Base_SetConfig+0xb8>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2280      	movs	r2, #128	@ 0x80
 8008004:	4393      	bics	r3, r2
 8008006:	001a      	movs	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	615a      	str	r2, [r3, #20]
}
 800802c:	46c0      	nop			@ (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b004      	add	sp, #16
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40000400 	.word	0x40000400
 8008038:	40010800 	.word	0x40010800
 800803c:	40011400 	.word	0x40011400
 8008040:	fffffcff 	.word	0xfffffcff

08008044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e044      	b.n	80080e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2278      	movs	r2, #120	@ 0x78
 8008062:	2100      	movs	r1, #0
 8008064:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	0018      	movs	r0, r3
 800806a:	f7fc fe6b 	bl	8004d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2224      	movs	r2, #36	@ 0x24
 8008072:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2101      	movs	r1, #1
 8008080:	438a      	bics	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	0018      	movs	r0, r3
 8008088:	f000 f8d0 	bl	800822c <UART_SetConfig>
 800808c:	0003      	movs	r3, r0
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e024      	b.n	80080e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	0018      	movs	r0, r3
 80080a2:	f000 fb61 	bl	8008768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	490d      	ldr	r1, [pc, #52]	@ (80080e8 <HAL_UART_Init+0xa4>)
 80080b2:	400a      	ands	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	212a      	movs	r1, #42	@ 0x2a
 80080c2:	438a      	bics	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2101      	movs	r1, #1
 80080d2:	430a      	orrs	r2, r1
 80080d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	0018      	movs	r0, r3
 80080da:	f000 fbf9 	bl	80088d0 <UART_CheckIdleState>
 80080de:	0003      	movs	r3, r0
}
 80080e0:	0018      	movs	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b002      	add	sp, #8
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	ffffb7ff 	.word	0xffffb7ff

080080ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	@ 0x28
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	1dbb      	adds	r3, r7, #6
 80080fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008100:	2b20      	cmp	r3, #32
 8008102:	d000      	beq.n	8008106 <HAL_UART_Transmit+0x1a>
 8008104:	e08c      	b.n	8008220 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_UART_Transmit+0x28>
 800810c:	1dbb      	adds	r3, r7, #6
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e084      	b.n	8008222 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	2380      	movs	r3, #128	@ 0x80
 800811e:	015b      	lsls	r3, r3, #5
 8008120:	429a      	cmp	r2, r3
 8008122:	d109      	bne.n	8008138 <HAL_UART_Transmit+0x4c>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d105      	bne.n	8008138 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2201      	movs	r2, #1
 8008130:	4013      	ands	r3, r2
 8008132:	d001      	beq.n	8008138 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e074      	b.n	8008222 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2284      	movs	r2, #132	@ 0x84
 800813c:	2100      	movs	r1, #0
 800813e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2221      	movs	r2, #33	@ 0x21
 8008144:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008146:	f7fd f801 	bl	800514c <HAL_GetTick>
 800814a:	0003      	movs	r3, r0
 800814c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	1dba      	adds	r2, r7, #6
 8008152:	2150      	movs	r1, #80	@ 0x50
 8008154:	8812      	ldrh	r2, [r2, #0]
 8008156:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1dba      	adds	r2, r7, #6
 800815c:	2152      	movs	r1, #82	@ 0x52
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	015b      	lsls	r3, r3, #5
 800816a:	429a      	cmp	r2, r3
 800816c:	d108      	bne.n	8008180 <HAL_UART_Transmit+0x94>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d104      	bne.n	8008180 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	e003      	b.n	8008188 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008184:	2300      	movs	r3, #0
 8008186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008188:	e02f      	b.n	80081ea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	0013      	movs	r3, r2
 8008194:	2200      	movs	r2, #0
 8008196:	2180      	movs	r1, #128	@ 0x80
 8008198:	f000 fc42 	bl	8008a20 <UART_WaitOnFlagUntilTimeout>
 800819c:	1e03      	subs	r3, r0, #0
 800819e:	d004      	beq.n	80081aa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2220      	movs	r2, #32
 80081a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e03b      	b.n	8008222 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	001a      	movs	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	05d2      	lsls	r2, r2, #23
 80081bc:	0dd2      	lsrs	r2, r2, #23
 80081be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	3302      	adds	r3, #2
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	e007      	b.n	80081d8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	3301      	adds	r3, #1
 80081d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2252      	movs	r2, #82	@ 0x52
 80081dc:	5a9b      	ldrh	r3, [r3, r2]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b299      	uxth	r1, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2252      	movs	r2, #82	@ 0x52
 80081e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2252      	movs	r2, #82	@ 0x52
 80081ee:	5a9b      	ldrh	r3, [r3, r2]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1c9      	bne.n	800818a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	0013      	movs	r3, r2
 8008200:	2200      	movs	r2, #0
 8008202:	2140      	movs	r1, #64	@ 0x40
 8008204:	f000 fc0c 	bl	8008a20 <UART_WaitOnFlagUntilTimeout>
 8008208:	1e03      	subs	r3, r0, #0
 800820a:	d004      	beq.n	8008216 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e005      	b.n	8008222 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	e000      	b.n	8008222 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008220:	2302      	movs	r3, #2
  }
}
 8008222:	0018      	movs	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	b008      	add	sp, #32
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b08e      	sub	sp, #56	@ 0x38
 8008230:	af00      	add	r7, sp, #0
 8008232:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008234:	231a      	movs	r3, #26
 8008236:	2218      	movs	r2, #24
 8008238:	189b      	adds	r3, r3, r2
 800823a:	19db      	adds	r3, r3, r7
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	431a      	orrs	r2, r3
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	431a      	orrs	r2, r3
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	4313      	orrs	r3, r2
 8008256:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4ac3      	ldr	r2, [pc, #780]	@ (800856c <UART_SetConfig+0x340>)
 8008260:	4013      	ands	r3, r2
 8008262:	0019      	movs	r1, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800826a:	430a      	orrs	r2, r1
 800826c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4abe      	ldr	r2, [pc, #760]	@ (8008570 <UART_SetConfig+0x344>)
 8008276:	4013      	ands	r3, r2
 8008278:	0019      	movs	r1, r3
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4ab8      	ldr	r2, [pc, #736]	@ (8008574 <UART_SetConfig+0x348>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800829c:	4313      	orrs	r3, r2
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	4ab4      	ldr	r2, [pc, #720]	@ (8008578 <UART_SetConfig+0x34c>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	0019      	movs	r1, r3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082b2:	430a      	orrs	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4ab0      	ldr	r2, [pc, #704]	@ (800857c <UART_SetConfig+0x350>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d131      	bne.n	8008324 <UART_SetConfig+0xf8>
 80082c0:	4baf      	ldr	r3, [pc, #700]	@ (8008580 <UART_SetConfig+0x354>)
 80082c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c4:	2203      	movs	r2, #3
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d01d      	beq.n	8008308 <UART_SetConfig+0xdc>
 80082cc:	d823      	bhi.n	8008316 <UART_SetConfig+0xea>
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d00c      	beq.n	80082ec <UART_SetConfig+0xc0>
 80082d2:	d820      	bhi.n	8008316 <UART_SetConfig+0xea>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <UART_SetConfig+0xb2>
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d00e      	beq.n	80082fa <UART_SetConfig+0xce>
 80082dc:	e01b      	b.n	8008316 <UART_SetConfig+0xea>
 80082de:	231b      	movs	r3, #27
 80082e0:	2218      	movs	r2, #24
 80082e2:	189b      	adds	r3, r3, r2
 80082e4:	19db      	adds	r3, r3, r7
 80082e6:	2201      	movs	r2, #1
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	e0b4      	b.n	8008456 <UART_SetConfig+0x22a>
 80082ec:	231b      	movs	r3, #27
 80082ee:	2218      	movs	r2, #24
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	19db      	adds	r3, r3, r7
 80082f4:	2202      	movs	r2, #2
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	e0ad      	b.n	8008456 <UART_SetConfig+0x22a>
 80082fa:	231b      	movs	r3, #27
 80082fc:	2218      	movs	r2, #24
 80082fe:	189b      	adds	r3, r3, r2
 8008300:	19db      	adds	r3, r3, r7
 8008302:	2204      	movs	r2, #4
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	e0a6      	b.n	8008456 <UART_SetConfig+0x22a>
 8008308:	231b      	movs	r3, #27
 800830a:	2218      	movs	r2, #24
 800830c:	189b      	adds	r3, r3, r2
 800830e:	19db      	adds	r3, r3, r7
 8008310:	2208      	movs	r2, #8
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e09f      	b.n	8008456 <UART_SetConfig+0x22a>
 8008316:	231b      	movs	r3, #27
 8008318:	2218      	movs	r2, #24
 800831a:	189b      	adds	r3, r3, r2
 800831c:	19db      	adds	r3, r3, r7
 800831e:	2210      	movs	r2, #16
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e098      	b.n	8008456 <UART_SetConfig+0x22a>
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a96      	ldr	r2, [pc, #600]	@ (8008584 <UART_SetConfig+0x358>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d131      	bne.n	8008392 <UART_SetConfig+0x166>
 800832e:	4b94      	ldr	r3, [pc, #592]	@ (8008580 <UART_SetConfig+0x354>)
 8008330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008332:	220c      	movs	r2, #12
 8008334:	4013      	ands	r3, r2
 8008336:	2b0c      	cmp	r3, #12
 8008338:	d01d      	beq.n	8008376 <UART_SetConfig+0x14a>
 800833a:	d823      	bhi.n	8008384 <UART_SetConfig+0x158>
 800833c:	2b08      	cmp	r3, #8
 800833e:	d00c      	beq.n	800835a <UART_SetConfig+0x12e>
 8008340:	d820      	bhi.n	8008384 <UART_SetConfig+0x158>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <UART_SetConfig+0x120>
 8008346:	2b04      	cmp	r3, #4
 8008348:	d00e      	beq.n	8008368 <UART_SetConfig+0x13c>
 800834a:	e01b      	b.n	8008384 <UART_SetConfig+0x158>
 800834c:	231b      	movs	r3, #27
 800834e:	2218      	movs	r2, #24
 8008350:	189b      	adds	r3, r3, r2
 8008352:	19db      	adds	r3, r3, r7
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e07d      	b.n	8008456 <UART_SetConfig+0x22a>
 800835a:	231b      	movs	r3, #27
 800835c:	2218      	movs	r2, #24
 800835e:	189b      	adds	r3, r3, r2
 8008360:	19db      	adds	r3, r3, r7
 8008362:	2202      	movs	r2, #2
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e076      	b.n	8008456 <UART_SetConfig+0x22a>
 8008368:	231b      	movs	r3, #27
 800836a:	2218      	movs	r2, #24
 800836c:	189b      	adds	r3, r3, r2
 800836e:	19db      	adds	r3, r3, r7
 8008370:	2204      	movs	r2, #4
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e06f      	b.n	8008456 <UART_SetConfig+0x22a>
 8008376:	231b      	movs	r3, #27
 8008378:	2218      	movs	r2, #24
 800837a:	189b      	adds	r3, r3, r2
 800837c:	19db      	adds	r3, r3, r7
 800837e:	2208      	movs	r2, #8
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	e068      	b.n	8008456 <UART_SetConfig+0x22a>
 8008384:	231b      	movs	r3, #27
 8008386:	2218      	movs	r2, #24
 8008388:	189b      	adds	r3, r3, r2
 800838a:	19db      	adds	r3, r3, r7
 800838c:	2210      	movs	r2, #16
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e061      	b.n	8008456 <UART_SetConfig+0x22a>
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a7c      	ldr	r2, [pc, #496]	@ (8008588 <UART_SetConfig+0x35c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d106      	bne.n	80083aa <UART_SetConfig+0x17e>
 800839c:	231b      	movs	r3, #27
 800839e:	2218      	movs	r2, #24
 80083a0:	189b      	adds	r3, r3, r2
 80083a2:	19db      	adds	r3, r3, r7
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	e055      	b.n	8008456 <UART_SetConfig+0x22a>
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a77      	ldr	r2, [pc, #476]	@ (800858c <UART_SetConfig+0x360>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d106      	bne.n	80083c2 <UART_SetConfig+0x196>
 80083b4:	231b      	movs	r3, #27
 80083b6:	2218      	movs	r2, #24
 80083b8:	189b      	adds	r3, r3, r2
 80083ba:	19db      	adds	r3, r3, r7
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e049      	b.n	8008456 <UART_SetConfig+0x22a>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a6b      	ldr	r2, [pc, #428]	@ (8008574 <UART_SetConfig+0x348>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d13e      	bne.n	800844a <UART_SetConfig+0x21e>
 80083cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008580 <UART_SetConfig+0x354>)
 80083ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d0:	23c0      	movs	r3, #192	@ 0xc0
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4013      	ands	r3, r2
 80083d6:	22c0      	movs	r2, #192	@ 0xc0
 80083d8:	0112      	lsls	r2, r2, #4
 80083da:	4293      	cmp	r3, r2
 80083dc:	d027      	beq.n	800842e <UART_SetConfig+0x202>
 80083de:	22c0      	movs	r2, #192	@ 0xc0
 80083e0:	0112      	lsls	r2, r2, #4
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d82a      	bhi.n	800843c <UART_SetConfig+0x210>
 80083e6:	2280      	movs	r2, #128	@ 0x80
 80083e8:	0112      	lsls	r2, r2, #4
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d011      	beq.n	8008412 <UART_SetConfig+0x1e6>
 80083ee:	2280      	movs	r2, #128	@ 0x80
 80083f0:	0112      	lsls	r2, r2, #4
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d822      	bhi.n	800843c <UART_SetConfig+0x210>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <UART_SetConfig+0x1d8>
 80083fa:	2280      	movs	r2, #128	@ 0x80
 80083fc:	00d2      	lsls	r2, r2, #3
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00e      	beq.n	8008420 <UART_SetConfig+0x1f4>
 8008402:	e01b      	b.n	800843c <UART_SetConfig+0x210>
 8008404:	231b      	movs	r3, #27
 8008406:	2218      	movs	r2, #24
 8008408:	189b      	adds	r3, r3, r2
 800840a:	19db      	adds	r3, r3, r7
 800840c:	2200      	movs	r2, #0
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e021      	b.n	8008456 <UART_SetConfig+0x22a>
 8008412:	231b      	movs	r3, #27
 8008414:	2218      	movs	r2, #24
 8008416:	189b      	adds	r3, r3, r2
 8008418:	19db      	adds	r3, r3, r7
 800841a:	2202      	movs	r2, #2
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	e01a      	b.n	8008456 <UART_SetConfig+0x22a>
 8008420:	231b      	movs	r3, #27
 8008422:	2218      	movs	r2, #24
 8008424:	189b      	adds	r3, r3, r2
 8008426:	19db      	adds	r3, r3, r7
 8008428:	2204      	movs	r2, #4
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e013      	b.n	8008456 <UART_SetConfig+0x22a>
 800842e:	231b      	movs	r3, #27
 8008430:	2218      	movs	r2, #24
 8008432:	189b      	adds	r3, r3, r2
 8008434:	19db      	adds	r3, r3, r7
 8008436:	2208      	movs	r2, #8
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e00c      	b.n	8008456 <UART_SetConfig+0x22a>
 800843c:	231b      	movs	r3, #27
 800843e:	2218      	movs	r2, #24
 8008440:	189b      	adds	r3, r3, r2
 8008442:	19db      	adds	r3, r3, r7
 8008444:	2210      	movs	r2, #16
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e005      	b.n	8008456 <UART_SetConfig+0x22a>
 800844a:	231b      	movs	r3, #27
 800844c:	2218      	movs	r2, #24
 800844e:	189b      	adds	r3, r3, r2
 8008450:	19db      	adds	r3, r3, r7
 8008452:	2210      	movs	r2, #16
 8008454:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a46      	ldr	r2, [pc, #280]	@ (8008574 <UART_SetConfig+0x348>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d000      	beq.n	8008462 <UART_SetConfig+0x236>
 8008460:	e09a      	b.n	8008598 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008462:	231b      	movs	r3, #27
 8008464:	2218      	movs	r2, #24
 8008466:	189b      	adds	r3, r3, r2
 8008468:	19db      	adds	r3, r3, r7
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d01d      	beq.n	80084ac <UART_SetConfig+0x280>
 8008470:	dc20      	bgt.n	80084b4 <UART_SetConfig+0x288>
 8008472:	2b04      	cmp	r3, #4
 8008474:	d015      	beq.n	80084a2 <UART_SetConfig+0x276>
 8008476:	dc1d      	bgt.n	80084b4 <UART_SetConfig+0x288>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <UART_SetConfig+0x256>
 800847c:	2b02      	cmp	r3, #2
 800847e:	d005      	beq.n	800848c <UART_SetConfig+0x260>
 8008480:	e018      	b.n	80084b4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fe fd53 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8008486:	0003      	movs	r3, r0
 8008488:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800848a:	e01c      	b.n	80084c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800848c:	4b3c      	ldr	r3, [pc, #240]	@ (8008580 <UART_SetConfig+0x354>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2210      	movs	r2, #16
 8008492:	4013      	ands	r3, r2
 8008494:	d002      	beq.n	800849c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008496:	4b3e      	ldr	r3, [pc, #248]	@ (8008590 <UART_SetConfig+0x364>)
 8008498:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800849a:	e014      	b.n	80084c6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800849c:	4b3d      	ldr	r3, [pc, #244]	@ (8008594 <UART_SetConfig+0x368>)
 800849e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80084a0:	e011      	b.n	80084c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084a2:	f7fe fc93 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80084a6:	0003      	movs	r3, r0
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80084aa:	e00c      	b.n	80084c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80084b2:	e008      	b.n	80084c6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80084b8:	231a      	movs	r3, #26
 80084ba:	2218      	movs	r2, #24
 80084bc:	189b      	adds	r3, r3, r2
 80084be:	19db      	adds	r3, r3, r7
 80084c0:	2201      	movs	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]
        break;
 80084c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d100      	bne.n	80084ce <UART_SetConfig+0x2a2>
 80084cc:	e133      	b.n	8008736 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	0013      	movs	r3, r2
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084da:	429a      	cmp	r2, r3
 80084dc:	d305      	bcc.n	80084ea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80084e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d906      	bls.n	80084f8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80084ea:	231a      	movs	r3, #26
 80084ec:	2218      	movs	r2, #24
 80084ee:	189b      	adds	r3, r3, r2
 80084f0:	19db      	adds	r3, r3, r7
 80084f2:	2201      	movs	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e11e      	b.n	8008736 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	6939      	ldr	r1, [r7, #16]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	000b      	movs	r3, r1
 8008506:	0e1b      	lsrs	r3, r3, #24
 8008508:	0010      	movs	r0, r2
 800850a:	0205      	lsls	r5, r0, #8
 800850c:	431d      	orrs	r5, r3
 800850e:	000b      	movs	r3, r1
 8008510:	021c      	lsls	r4, r3, #8
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	1900      	adds	r0, r0, r4
 8008524:	4169      	adcs	r1, r5
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	2300      	movs	r3, #0
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f7f7 fff2 	bl	800051c <__aeabi_uldivmod>
 8008538:	0002      	movs	r2, r0
 800853a:	000b      	movs	r3, r1
 800853c:	0013      	movs	r3, r2
 800853e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008542:	23c0      	movs	r3, #192	@ 0xc0
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	429a      	cmp	r2, r3
 8008548:	d309      	bcc.n	800855e <UART_SetConfig+0x332>
 800854a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	035b      	lsls	r3, r3, #13
 8008550:	429a      	cmp	r2, r3
 8008552:	d204      	bcs.n	800855e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800855a:	60da      	str	r2, [r3, #12]
 800855c:	e0eb      	b.n	8008736 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800855e:	231a      	movs	r3, #26
 8008560:	2218      	movs	r2, #24
 8008562:	189b      	adds	r3, r3, r2
 8008564:	19db      	adds	r3, r3, r7
 8008566:	2201      	movs	r2, #1
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	e0e4      	b.n	8008736 <UART_SetConfig+0x50a>
 800856c:	efff69f3 	.word	0xefff69f3
 8008570:	ffffcfff 	.word	0xffffcfff
 8008574:	40004800 	.word	0x40004800
 8008578:	fffff4ff 	.word	0xfffff4ff
 800857c:	40013800 	.word	0x40013800
 8008580:	40021000 	.word	0x40021000
 8008584:	40004400 	.word	0x40004400
 8008588:	40004c00 	.word	0x40004c00
 800858c:	40005000 	.word	0x40005000
 8008590:	003d0900 	.word	0x003d0900
 8008594:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	69da      	ldr	r2, [r3, #28]
 800859c:	2380      	movs	r3, #128	@ 0x80
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d000      	beq.n	80085a6 <UART_SetConfig+0x37a>
 80085a4:	e070      	b.n	8008688 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80085a6:	231b      	movs	r3, #27
 80085a8:	2218      	movs	r2, #24
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	19db      	adds	r3, r3, r7
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d822      	bhi.n	80085fa <UART_SetConfig+0x3ce>
 80085b4:	009a      	lsls	r2, r3, #2
 80085b6:	4b67      	ldr	r3, [pc, #412]	@ (8008754 <UART_SetConfig+0x528>)
 80085b8:	18d3      	adds	r3, r2, r3
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085be:	f7fe fcb5 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 80085c2:	0003      	movs	r3, r0
 80085c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085c6:	e021      	b.n	800860c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fe fcc6 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 80085cc:	0003      	movs	r3, r0
 80085ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085d0:	e01c      	b.n	800860c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d2:	4b61      	ldr	r3, [pc, #388]	@ (8008758 <UART_SetConfig+0x52c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2210      	movs	r2, #16
 80085d8:	4013      	ands	r3, r2
 80085da:	d002      	beq.n	80085e2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80085dc:	4b5f      	ldr	r3, [pc, #380]	@ (800875c <UART_SetConfig+0x530>)
 80085de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085e0:	e014      	b.n	800860c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80085e2:	4b5f      	ldr	r3, [pc, #380]	@ (8008760 <UART_SetConfig+0x534>)
 80085e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085e6:	e011      	b.n	800860c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e8:	f7fe fbf0 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80085ec:	0003      	movs	r3, r0
 80085ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085f0:	e00c      	b.n	800860c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f2:	2380      	movs	r3, #128	@ 0x80
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085f8:	e008      	b.n	800860c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80085fe:	231a      	movs	r3, #26
 8008600:	2218      	movs	r2, #24
 8008602:	189b      	adds	r3, r3, r2
 8008604:	19db      	adds	r3, r3, r7
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
        break;
 800860a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800860c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d100      	bne.n	8008614 <UART_SetConfig+0x3e8>
 8008612:	e090      	b.n	8008736 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	005a      	lsls	r2, r3, #1
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	18d2      	adds	r2, r2, r3
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	0019      	movs	r1, r3
 8008626:	0010      	movs	r0, r2
 8008628:	f7f7 fd8a 	bl	8000140 <__udivsi3>
 800862c:	0003      	movs	r3, r0
 800862e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008632:	2b0f      	cmp	r3, #15
 8008634:	d921      	bls.n	800867a <UART_SetConfig+0x44e>
 8008636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008638:	2380      	movs	r3, #128	@ 0x80
 800863a:	025b      	lsls	r3, r3, #9
 800863c:	429a      	cmp	r2, r3
 800863e:	d21c      	bcs.n	800867a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	b29a      	uxth	r2, r3
 8008644:	200e      	movs	r0, #14
 8008646:	2418      	movs	r4, #24
 8008648:	1903      	adds	r3, r0, r4
 800864a:	19db      	adds	r3, r3, r7
 800864c:	210f      	movs	r1, #15
 800864e:	438a      	bics	r2, r1
 8008650:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	b29b      	uxth	r3, r3
 8008658:	2207      	movs	r2, #7
 800865a:	4013      	ands	r3, r2
 800865c:	b299      	uxth	r1, r3
 800865e:	1903      	adds	r3, r0, r4
 8008660:	19db      	adds	r3, r3, r7
 8008662:	1902      	adds	r2, r0, r4
 8008664:	19d2      	adds	r2, r2, r7
 8008666:	8812      	ldrh	r2, [r2, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	1902      	adds	r2, r0, r4
 8008672:	19d2      	adds	r2, r2, r7
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	60da      	str	r2, [r3, #12]
 8008678:	e05d      	b.n	8008736 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800867a:	231a      	movs	r3, #26
 800867c:	2218      	movs	r2, #24
 800867e:	189b      	adds	r3, r3, r2
 8008680:	19db      	adds	r3, r3, r7
 8008682:	2201      	movs	r2, #1
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	e056      	b.n	8008736 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008688:	231b      	movs	r3, #27
 800868a:	2218      	movs	r2, #24
 800868c:	189b      	adds	r3, r3, r2
 800868e:	19db      	adds	r3, r3, r7
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b08      	cmp	r3, #8
 8008694:	d822      	bhi.n	80086dc <UART_SetConfig+0x4b0>
 8008696:	009a      	lsls	r2, r3, #2
 8008698:	4b32      	ldr	r3, [pc, #200]	@ (8008764 <UART_SetConfig+0x538>)
 800869a:	18d3      	adds	r3, r2, r3
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a0:	f7fe fc44 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 80086a4:	0003      	movs	r3, r0
 80086a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80086a8:	e021      	b.n	80086ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086aa:	f7fe fc55 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 80086ae:	0003      	movs	r3, r0
 80086b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80086b2:	e01c      	b.n	80086ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b4:	4b28      	ldr	r3, [pc, #160]	@ (8008758 <UART_SetConfig+0x52c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2210      	movs	r2, #16
 80086ba:	4013      	ands	r3, r2
 80086bc:	d002      	beq.n	80086c4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80086be:	4b27      	ldr	r3, [pc, #156]	@ (800875c <UART_SetConfig+0x530>)
 80086c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086c2:	e014      	b.n	80086ee <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b26      	ldr	r3, [pc, #152]	@ (8008760 <UART_SetConfig+0x534>)
 80086c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80086c8:	e011      	b.n	80086ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fe fb7f 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80086ce:	0003      	movs	r3, r0
 80086d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80086d2:	e00c      	b.n	80086ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80086da:	e008      	b.n	80086ee <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80086e0:	231a      	movs	r3, #26
 80086e2:	2218      	movs	r2, #24
 80086e4:	189b      	adds	r3, r3, r2
 80086e6:	19db      	adds	r3, r3, r7
 80086e8:	2201      	movs	r2, #1
 80086ea:	701a      	strb	r2, [r3, #0]
        break;
 80086ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d020      	beq.n	8008736 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	085a      	lsrs	r2, r3, #1
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	18d2      	adds	r2, r2, r3
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	0019      	movs	r1, r3
 8008704:	0010      	movs	r0, r2
 8008706:	f7f7 fd1b 	bl	8000140 <__udivsi3>
 800870a:	0003      	movs	r3, r0
 800870c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	2b0f      	cmp	r3, #15
 8008712:	d90a      	bls.n	800872a <UART_SetConfig+0x4fe>
 8008714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008716:	2380      	movs	r3, #128	@ 0x80
 8008718:	025b      	lsls	r3, r3, #9
 800871a:	429a      	cmp	r2, r3
 800871c:	d205      	bcs.n	800872a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	b29a      	uxth	r2, r3
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e005      	b.n	8008736 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800872a:	231a      	movs	r3, #26
 800872c:	2218      	movs	r2, #24
 800872e:	189b      	adds	r3, r3, r2
 8008730:	19db      	adds	r3, r3, r7
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2200      	movs	r2, #0
 800873a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2200      	movs	r2, #0
 8008740:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008742:	231a      	movs	r3, #26
 8008744:	2218      	movs	r2, #24
 8008746:	189b      	adds	r3, r3, r2
 8008748:	19db      	adds	r3, r3, r7
 800874a:	781b      	ldrb	r3, [r3, #0]
}
 800874c:	0018      	movs	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	b00e      	add	sp, #56	@ 0x38
 8008752:	bdb0      	pop	{r4, r5, r7, pc}
 8008754:	08013ae0 	.word	0x08013ae0
 8008758:	40021000 	.word	0x40021000
 800875c:	003d0900 	.word	0x003d0900
 8008760:	00f42400 	.word	0x00f42400
 8008764:	08013b04 	.word	0x08013b04

08008768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008774:	2201      	movs	r2, #1
 8008776:	4013      	ands	r3, r2
 8008778:	d00b      	beq.n	8008792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4a4a      	ldr	r2, [pc, #296]	@ (80088ac <UART_AdvFeatureConfig+0x144>)
 8008782:	4013      	ands	r3, r2
 8008784:	0019      	movs	r1, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008796:	2202      	movs	r2, #2
 8008798:	4013      	ands	r3, r2
 800879a:	d00b      	beq.n	80087b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4a43      	ldr	r2, [pc, #268]	@ (80088b0 <UART_AdvFeatureConfig+0x148>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	0019      	movs	r1, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	2204      	movs	r2, #4
 80087ba:	4013      	ands	r3, r2
 80087bc:	d00b      	beq.n	80087d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	4a3b      	ldr	r2, [pc, #236]	@ (80088b4 <UART_AdvFeatureConfig+0x14c>)
 80087c6:	4013      	ands	r3, r2
 80087c8:	0019      	movs	r1, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	2208      	movs	r2, #8
 80087dc:	4013      	ands	r3, r2
 80087de:	d00b      	beq.n	80087f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4a34      	ldr	r2, [pc, #208]	@ (80088b8 <UART_AdvFeatureConfig+0x150>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	0019      	movs	r1, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	2210      	movs	r2, #16
 80087fe:	4013      	ands	r3, r2
 8008800:	d00b      	beq.n	800881a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	4a2c      	ldr	r2, [pc, #176]	@ (80088bc <UART_AdvFeatureConfig+0x154>)
 800880a:	4013      	ands	r3, r2
 800880c:	0019      	movs	r1, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881e:	2220      	movs	r2, #32
 8008820:	4013      	ands	r3, r2
 8008822:	d00b      	beq.n	800883c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	4a25      	ldr	r2, [pc, #148]	@ (80088c0 <UART_AdvFeatureConfig+0x158>)
 800882c:	4013      	ands	r3, r2
 800882e:	0019      	movs	r1, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	2240      	movs	r2, #64	@ 0x40
 8008842:	4013      	ands	r3, r2
 8008844:	d01d      	beq.n	8008882 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	4a1d      	ldr	r2, [pc, #116]	@ (80088c4 <UART_AdvFeatureConfig+0x15c>)
 800884e:	4013      	ands	r3, r2
 8008850:	0019      	movs	r1, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008862:	2380      	movs	r3, #128	@ 0x80
 8008864:	035b      	lsls	r3, r3, #13
 8008866:	429a      	cmp	r2, r3
 8008868:	d10b      	bne.n	8008882 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a15      	ldr	r2, [pc, #84]	@ (80088c8 <UART_AdvFeatureConfig+0x160>)
 8008872:	4013      	ands	r3, r2
 8008874:	0019      	movs	r1, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008886:	2280      	movs	r2, #128	@ 0x80
 8008888:	4013      	ands	r3, r2
 800888a:	d00b      	beq.n	80088a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4a0e      	ldr	r2, [pc, #56]	@ (80088cc <UART_AdvFeatureConfig+0x164>)
 8008894:	4013      	ands	r3, r2
 8008896:	0019      	movs	r1, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	605a      	str	r2, [r3, #4]
  }
}
 80088a4:	46c0      	nop			@ (mov r8, r8)
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b002      	add	sp, #8
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	fffdffff 	.word	0xfffdffff
 80088b0:	fffeffff 	.word	0xfffeffff
 80088b4:	fffbffff 	.word	0xfffbffff
 80088b8:	ffff7fff 	.word	0xffff7fff
 80088bc:	ffffefff 	.word	0xffffefff
 80088c0:	ffffdfff 	.word	0xffffdfff
 80088c4:	ffefffff 	.word	0xffefffff
 80088c8:	ff9fffff 	.word	0xff9fffff
 80088cc:	fff7ffff 	.word	0xfff7ffff

080088d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b092      	sub	sp, #72	@ 0x48
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2284      	movs	r2, #132	@ 0x84
 80088dc:	2100      	movs	r1, #0
 80088de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088e0:	f7fc fc34 	bl	800514c <HAL_GetTick>
 80088e4:	0003      	movs	r3, r0
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2208      	movs	r2, #8
 80088f0:	4013      	ands	r3, r2
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d12c      	bne.n	8008950 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f8:	2280      	movs	r2, #128	@ 0x80
 80088fa:	0391      	lsls	r1, r2, #14
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4a46      	ldr	r2, [pc, #280]	@ (8008a18 <UART_CheckIdleState+0x148>)
 8008900:	9200      	str	r2, [sp, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	f000 f88c 	bl	8008a20 <UART_WaitOnFlagUntilTimeout>
 8008908:	1e03      	subs	r3, r0, #0
 800890a:	d021      	beq.n	8008950 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890c:	f3ef 8310 	mrs	r3, PRIMASK
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008916:	2301      	movs	r3, #1
 8008918:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	f383 8810 	msr	PRIMASK, r3
}
 8008920:	46c0      	nop			@ (mov r8, r8)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2180      	movs	r1, #128	@ 0x80
 800892e:	438a      	bics	r2, r1
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	f383 8810 	msr	PRIMASK, r3
}
 800893c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2278      	movs	r2, #120	@ 0x78
 8008948:	2100      	movs	r1, #0
 800894a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e05f      	b.n	8008a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2204      	movs	r2, #4
 8008958:	4013      	ands	r3, r2
 800895a:	2b04      	cmp	r3, #4
 800895c:	d146      	bne.n	80089ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008960:	2280      	movs	r2, #128	@ 0x80
 8008962:	03d1      	lsls	r1, r2, #15
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4a2c      	ldr	r2, [pc, #176]	@ (8008a18 <UART_CheckIdleState+0x148>)
 8008968:	9200      	str	r2, [sp, #0]
 800896a:	2200      	movs	r2, #0
 800896c:	f000 f858 	bl	8008a20 <UART_WaitOnFlagUntilTimeout>
 8008970:	1e03      	subs	r3, r0, #0
 8008972:	d03b      	beq.n	80089ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008974:	f3ef 8310 	mrs	r3, PRIMASK
 8008978:	60fb      	str	r3, [r7, #12]
  return(result);
 800897a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
 800897e:	2301      	movs	r3, #1
 8008980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f383 8810 	msr	PRIMASK, r3
}
 8008988:	46c0      	nop			@ (mov r8, r8)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4921      	ldr	r1, [pc, #132]	@ (8008a1c <UART_CheckIdleState+0x14c>)
 8008996:	400a      	ands	r2, r1
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a6:	f3ef 8310 	mrs	r3, PRIMASK
 80089aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80089ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b0:	2301      	movs	r3, #1
 80089b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f383 8810 	msr	PRIMASK, r3
}
 80089ba:	46c0      	nop			@ (mov r8, r8)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2101      	movs	r1, #1
 80089c8:	438a      	bics	r2, r1
 80089ca:	609a      	str	r2, [r3, #8]
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	f383 8810 	msr	PRIMASK, r3
}
 80089d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2280      	movs	r2, #128	@ 0x80
 80089dc:	2120      	movs	r1, #32
 80089de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2278      	movs	r2, #120	@ 0x78
 80089e4:	2100      	movs	r1, #0
 80089e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e011      	b.n	8008a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2280      	movs	r2, #128	@ 0x80
 80089f6:	2120      	movs	r1, #32
 80089f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2278      	movs	r2, #120	@ 0x78
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	0018      	movs	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b010      	add	sp, #64	@ 0x40
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	01ffffff 	.word	0x01ffffff
 8008a1c:	fffffedf 	.word	0xfffffedf

08008a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	1dfb      	adds	r3, r7, #7
 8008a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a30:	e04b      	b.n	8008aca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3301      	adds	r3, #1
 8008a36:	d048      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a38:	f7fc fb88 	bl	800514c <HAL_GetTick>
 8008a3c:	0002      	movs	r2, r0
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d302      	bcc.n	8008a4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e04b      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	d035      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	2208      	movs	r2, #8
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d111      	bne.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	0018      	movs	r0, r3
 8008a78:	f000 f83c 	bl	8008af4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2284      	movs	r2, #132	@ 0x84
 8008a80:	2108      	movs	r1, #8
 8008a82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2278      	movs	r2, #120	@ 0x78
 8008a88:	2100      	movs	r1, #0
 8008a8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e02c      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	2380      	movs	r3, #128	@ 0x80
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	2380      	movs	r3, #128	@ 0x80
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d112      	bne.n	8008aca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2280      	movs	r2, #128	@ 0x80
 8008aaa:	0112      	lsls	r2, r2, #4
 8008aac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f000 f81f 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2284      	movs	r2, #132	@ 0x84
 8008aba:	2120      	movs	r1, #32
 8008abc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2278      	movs	r2, #120	@ 0x78
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e00f      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	425a      	negs	r2, r3
 8008ada:	4153      	adcs	r3, r2
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	001a      	movs	r2, r3
 8008ae0:	1dfb      	adds	r3, r7, #7
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d0a4      	beq.n	8008a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b004      	add	sp, #16
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	@ 0x38
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008afc:	f3ef 8310 	mrs	r3, PRIMASK
 8008b00:	617b      	str	r3, [r7, #20]
  return(result);
 8008b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b06:	2301      	movs	r3, #1
 8008b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f383 8810 	msr	PRIMASK, r3
}
 8008b10:	46c0      	nop			@ (mov r8, r8)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4926      	ldr	r1, [pc, #152]	@ (8008bb8 <UART_EndRxTransfer+0xc4>)
 8008b1e:	400a      	ands	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f383 8810 	msr	PRIMASK, r3
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b32:	623b      	str	r3, [r7, #32]
  return(result);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b38:	2301      	movs	r3, #1
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	f383 8810 	msr	PRIMASK, r3
}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	438a      	bics	r2, r1
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d118      	bne.n	8008b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b72:	2301      	movs	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f383 8810 	msr	PRIMASK, r3
}
 8008b7c:	46c0      	nop			@ (mov r8, r8)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2110      	movs	r1, #16
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	2120      	movs	r1, #32
 8008ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b00e      	add	sp, #56	@ 0x38
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	fffffedf 	.word	0xfffffedf

08008bbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008bc0:	4a06      	ldr	r2, [pc, #24]	@ (8008bdc <MX_FATFS_Init+0x20>)
 8008bc2:	4b07      	ldr	r3, [pc, #28]	@ (8008be0 <MX_FATFS_Init+0x24>)
 8008bc4:	0011      	movs	r1, r2
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f003 fb00 	bl	800c1cc <FATFS_LinkDriver>
 8008bcc:	0003      	movs	r3, r0
 8008bce:	001a      	movs	r2, r3
 8008bd0:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <MX_FATFS_Init+0x28>)
 8008bd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008bd4:	46c0      	nop			@ (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	20000e74 	.word	0x20000e74
 8008be0:	20000010 	.word	0x20000010
 8008be4:	20000e70 	.word	0x20000e70

08008be8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008bec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008bee:	0018      	movs	r0, r3
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	0002      	movs	r2, r0
 8008bfc:	1dfb      	adds	r3, r7, #7
 8008bfe:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008c00:	1dfb      	adds	r3, r7, #7
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f000 fa1d 	bl	8009044 <USER_SPI_initialize>
 8008c0a:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END INIT */
}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b002      	add	sp, #8
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	1dfb      	adds	r3, r7, #7
 8008c1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008c20:	1dfb      	adds	r3, r7, #7
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	0018      	movs	r0, r3
 8008c26:	f000 fb25 	bl	8009274 <USER_SPI_status>
 8008c2a:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END STATUS */
}
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b002      	add	sp, #8
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008c34:	b5b0      	push	{r4, r5, r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	250f      	movs	r5, #15
 8008c42:	197b      	adds	r3, r7, r5
 8008c44:	1c02      	adds	r2, r0, #0
 8008c46:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008c48:	683c      	ldr	r4, [r7, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	197b      	adds	r3, r7, r5
 8008c50:	7818      	ldrb	r0, [r3, #0]
 8008c52:	0023      	movs	r3, r4
 8008c54:	f000 fb24 	bl	80092a0 <USER_SPI_read>
 8008c58:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b004      	add	sp, #16
 8008c60:	bdb0      	pop	{r4, r5, r7, pc}

08008c62 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c62:	b5b0      	push	{r4, r5, r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	250f      	movs	r5, #15
 8008c70:	197b      	adds	r3, r7, r5
 8008c72:	1c02      	adds	r2, r0, #0
 8008c74:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008c76:	683c      	ldr	r4, [r7, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	197b      	adds	r3, r7, r5
 8008c7e:	7818      	ldrb	r0, [r3, #0]
 8008c80:	0023      	movs	r3, r4
 8008c82:	f000 fb79 	bl	8009378 <USER_SPI_write>
 8008c86:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8008c88:	0018      	movs	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	b004      	add	sp, #16
 8008c8e:	bdb0      	pop	{r4, r5, r7, pc}

08008c90 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	603a      	str	r2, [r7, #0]
 8008c98:	1dfb      	adds	r3, r7, #7
 8008c9a:	1c02      	adds	r2, r0, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	1dbb      	adds	r3, r7, #6
 8008ca0:	1c0a      	adds	r2, r1, #0
 8008ca2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	1dbb      	adds	r3, r7, #6
 8008ca8:	7819      	ldrb	r1, [r3, #0]
 8008caa:	1dfb      	adds	r3, r7, #7
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f000 fbe2 	bl	8009478 <USER_SPI_ioctl>
 8008cb4:	0003      	movs	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b002      	add	sp, #8
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008cc8:	f7fc fa40 	bl	800514c <HAL_GetTick>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	4b04      	ldr	r3, [pc, #16]	@ (8008ce0 <SPI_Timer_On+0x20>)
 8008cd0:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008cd2:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <SPI_Timer_On+0x24>)
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
}
 8008cd8:	46c0      	nop			@ (mov r8, r8)
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000e7c 	.word	0x20000e7c
 8008ce4:	20000e80 	.word	0x20000e80

08008ce8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008cec:	f7fc fa2e 	bl	800514c <HAL_GetTick>
 8008cf0:	0002      	movs	r2, r0
 8008cf2:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <SPI_Timer_Status+0x24>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <SPI_Timer_Status+0x28>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	419b      	sbcs	r3, r3
 8008d00:	425b      	negs	r3, r3
 8008d02:	b2db      	uxtb	r3, r3
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	20000e7c 	.word	0x20000e7c
 8008d10:	20000e80 	.word	0x20000e80

08008d14 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	0002      	movs	r2, r0
 8008d1c:	1dfb      	adds	r3, r7, #7
 8008d1e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008d20:	240f      	movs	r4, #15
 8008d22:	193a      	adds	r2, r7, r4
 8008d24:	1df9      	adds	r1, r7, #7
 8008d26:	4806      	ldr	r0, [pc, #24]	@ (8008d40 <xchg_spi+0x2c>)
 8008d28:	2332      	movs	r3, #50	@ 0x32
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f7fe fcea 	bl	8007706 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008d32:	193b      	adds	r3, r7, r4
 8008d34:	781b      	ldrb	r3, [r3, #0]
}
 8008d36:	0018      	movs	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	b005      	add	sp, #20
 8008d3c:	bd90      	pop	{r4, r7, pc}
 8008d3e:	46c0      	nop			@ (mov r8, r8)
 8008d40:	20000a4c 	.word	0x20000a4c

08008d44 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e00a      	b.n	8008d6a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	18d4      	adds	r4, r2, r3
 8008d5a:	20ff      	movs	r0, #255	@ 0xff
 8008d5c:	f7ff ffda 	bl	8008d14 <xchg_spi>
 8008d60:	0003      	movs	r3, r0
 8008d62:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3301      	adds	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3f0      	bcc.n	8008d54 <rcvr_spi_multi+0x10>
	}
}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	46c0      	nop			@ (mov r8, r8)
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b005      	add	sp, #20
 8008d7a:	bd90      	pop	{r4, r7, pc}

08008d7c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	//HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buff, btx, HAL_MAX_DELAY);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	425b      	negs	r3, r3
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4803      	ldr	r0, [pc, #12]	@ (8008da0 <xmit_spi_multi+0x24>)
 8008d92:	f7fe fb5b 	bl	800744c <HAL_SPI_Transmit>

}
 8008d96:	46c0      	nop			@ (mov r8, r8)
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	20000a4c 	.word	0x20000a4c

08008da4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008da4:	b5b0      	push	{r4, r5, r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008dac:	f7fc f9ce 	bl	800514c <HAL_GetTick>
 8008db0:	0003      	movs	r3, r0
 8008db2:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008db8:	250f      	movs	r5, #15
 8008dba:	197c      	adds	r4, r7, r5
 8008dbc:	20ff      	movs	r0, #255	@ 0xff
 8008dbe:	f7ff ffa9 	bl	8008d14 <xchg_spi>
 8008dc2:	0003      	movs	r3, r0
 8008dc4:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008dc6:	197b      	adds	r3, r7, r5
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2bff      	cmp	r3, #255	@ 0xff
 8008dcc:	d007      	beq.n	8008dde <wait_ready+0x3a>
 8008dce:	f7fc f9bd 	bl	800514c <HAL_GetTick>
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d8ec      	bhi.n	8008db8 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8008dde:	230f      	movs	r3, #15
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	3bff      	subs	r3, #255	@ 0xff
 8008de6:	425a      	negs	r2, r3
 8008de8:	4153      	adcs	r3, r2
 8008dea:	b2db      	uxtb	r3, r3
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b006      	add	sp, #24
 8008df2:	bdb0      	pop	{r4, r5, r7, pc}

08008df4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	015b      	lsls	r3, r3, #5
 8008dfc:	4805      	ldr	r0, [pc, #20]	@ (8008e14 <despiselect+0x20>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	0019      	movs	r1, r3
 8008e02:	f7fc fbfd 	bl	8005600 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008e06:	20ff      	movs	r0, #255	@ 0xff
 8008e08:	f7ff ff84 	bl	8008d14 <xchg_spi>

}
 8008e0c:	46c0      	nop			@ (mov r8, r8)
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	46c0      	nop			@ (mov r8, r8)
 8008e14:	50000400 	.word	0x50000400

08008e18 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	015b      	lsls	r3, r3, #5
 8008e20:	480b      	ldr	r0, [pc, #44]	@ (8008e50 <spiselect+0x38>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	0019      	movs	r1, r3
 8008e26:	f7fc fbeb 	bl	8005600 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008e2a:	20ff      	movs	r0, #255	@ 0xff
 8008e2c:	f7ff ff72 	bl	8008d14 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008e30:	23fa      	movs	r3, #250	@ 0xfa
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7ff ffb5 	bl	8008da4 <wait_ready>
 8008e3a:	1e03      	subs	r3, r0, #0
 8008e3c:	d001      	beq.n	8008e42 <spiselect+0x2a>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e002      	b.n	8008e48 <spiselect+0x30>

	despiselect();
 8008e42:	f7ff ffd7 	bl	8008df4 <despiselect>
	return 0;	/* Timeout */
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	0018      	movs	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	46c0      	nop			@ (mov r8, r8)
 8008e50:	50000400 	.word	0x50000400

08008e54 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008e54:	b5b0      	push	{r4, r5, r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008e5e:	20c8      	movs	r0, #200	@ 0xc8
 8008e60:	f7ff ff2e 	bl	8008cc0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008e64:	250f      	movs	r5, #15
 8008e66:	197c      	adds	r4, r7, r5
 8008e68:	20ff      	movs	r0, #255	@ 0xff
 8008e6a:	f7ff ff53 	bl	8008d14 <xchg_spi>
 8008e6e:	0003      	movs	r3, r0
 8008e70:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008e72:	197b      	adds	r3, r7, r5
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2bff      	cmp	r3, #255	@ 0xff
 8008e78:	d103      	bne.n	8008e82 <rcvr_datablock+0x2e>
 8008e7a:	f7ff ff35 	bl	8008ce8 <SPI_Timer_Status>
 8008e7e:	1e03      	subs	r3, r0, #0
 8008e80:	d1f0      	bne.n	8008e64 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008e82:	230f      	movs	r3, #15
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2bfe      	cmp	r3, #254	@ 0xfe
 8008e8a:	d001      	beq.n	8008e90 <rcvr_datablock+0x3c>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e00c      	b.n	8008eaa <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	0011      	movs	r1, r2
 8008e96:	0018      	movs	r0, r3
 8008e98:	f7ff ff54 	bl	8008d44 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008e9c:	20ff      	movs	r0, #255	@ 0xff
 8008e9e:	f7ff ff39 	bl	8008d14 <xchg_spi>
 8008ea2:	20ff      	movs	r0, #255	@ 0xff
 8008ea4:	f7ff ff36 	bl	8008d14 <xchg_spi>

	return 1;						/* Function succeeded */
 8008ea8:	2301      	movs	r3, #1
}
 8008eaa:	0018      	movs	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	b004      	add	sp, #16
 8008eb0:	bdb0      	pop	{r4, r5, r7, pc}

08008eb2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008eb2:	b5b0      	push	{r4, r5, r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	000a      	movs	r2, r1
 8008ebc:	1cfb      	adds	r3, r7, #3
 8008ebe:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008ec0:	23fa      	movs	r3, #250	@ 0xfa
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f7ff ff6d 	bl	8008da4 <wait_ready>
 8008eca:	1e03      	subs	r3, r0, #0
 8008ecc:	d101      	bne.n	8008ed2 <xmit_datablock+0x20>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e025      	b.n	8008f1e <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8008ed2:	1cfb      	adds	r3, r7, #3
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7ff ff1c 	bl	8008d14 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008edc:	1cfb      	adds	r3, r7, #3
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2bfd      	cmp	r3, #253	@ 0xfd
 8008ee2:	d01b      	beq.n	8008f1c <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008ee4:	2380      	movs	r3, #128	@ 0x80
 8008ee6:	009a      	lsls	r2, r3, #2
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	0011      	movs	r1, r2
 8008eec:	0018      	movs	r0, r3
 8008eee:	f7ff ff45 	bl	8008d7c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008ef2:	20ff      	movs	r0, #255	@ 0xff
 8008ef4:	f7ff ff0e 	bl	8008d14 <xchg_spi>
 8008ef8:	20ff      	movs	r0, #255	@ 0xff
 8008efa:	f7ff ff0b 	bl	8008d14 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008efe:	250f      	movs	r5, #15
 8008f00:	197c      	adds	r4, r7, r5
 8008f02:	20ff      	movs	r0, #255	@ 0xff
 8008f04:	f7ff ff06 	bl	8008d14 <xchg_spi>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f0c:	197b      	adds	r3, r7, r5
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	221f      	movs	r2, #31
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	d001      	beq.n	8008f1c <xmit_datablock+0x6a>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e000      	b.n	8008f1e <xmit_datablock+0x6c>
	}
	return 1;
 8008f1c:	2301      	movs	r3, #1
}
 8008f1e:	0018      	movs	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b004      	add	sp, #16
 8008f24:	bdb0      	pop	{r4, r5, r7, pc}

08008f26 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008f26:	b5b0      	push	{r4, r5, r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	0002      	movs	r2, r0
 8008f2e:	6039      	str	r1, [r7, #0]
 8008f30:	1dfb      	adds	r3, r7, #7
 8008f32:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008f34:	1dfb      	adds	r3, r7, #7
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	b25b      	sxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da15      	bge.n	8008f6a <send_cmd+0x44>
		cmd &= 0x7F;
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	1dfa      	adds	r2, r7, #7
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	217f      	movs	r1, #127	@ 0x7f
 8008f46:	400a      	ands	r2, r1
 8008f48:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8008f4a:	250e      	movs	r5, #14
 8008f4c:	197c      	adds	r4, r7, r5
 8008f4e:	2100      	movs	r1, #0
 8008f50:	2037      	movs	r0, #55	@ 0x37
 8008f52:	f7ff ffe8 	bl	8008f26 <send_cmd>
 8008f56:	0003      	movs	r3, r0
 8008f58:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8008f5a:	002a      	movs	r2, r5
 8008f5c:	18bb      	adds	r3, r7, r2
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d902      	bls.n	8008f6a <send_cmd+0x44>
 8008f64:	18bb      	adds	r3, r7, r2
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	e067      	b.n	800903a <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008f6a:	1dfb      	adds	r3, r7, #7
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b0c      	cmp	r3, #12
 8008f70:	d007      	beq.n	8008f82 <send_cmd+0x5c>
		despiselect();
 8008f72:	f7ff ff3f 	bl	8008df4 <despiselect>
		if (!spiselect()) return 0xFF;
 8008f76:	f7ff ff4f 	bl	8008e18 <spiselect>
 8008f7a:	1e03      	subs	r3, r0, #0
 8008f7c:	d101      	bne.n	8008f82 <send_cmd+0x5c>
 8008f7e:	23ff      	movs	r3, #255	@ 0xff
 8008f80:	e05b      	b.n	800903a <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008f82:	1dfb      	adds	r3, r7, #7
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2240      	movs	r2, #64	@ 0x40
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f7ff fec1 	bl	8008d14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	0e1b      	lsrs	r3, r3, #24
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f7ff febb 	bl	8008d14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7ff feb5 	bl	8008d14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7ff feaf 	bl	8008d14 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff feaa 	bl	8008d14 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008fc0:	210f      	movs	r1, #15
 8008fc2:	187b      	adds	r3, r7, r1
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008fc8:	1dfb      	adds	r3, r7, #7
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <send_cmd+0xb0>
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	2295      	movs	r2, #149	@ 0x95
 8008fd4:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008fd6:	1dfb      	adds	r3, r7, #7
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d103      	bne.n	8008fe6 <send_cmd+0xc0>
 8008fde:	230f      	movs	r3, #15
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	2287      	movs	r2, #135	@ 0x87
 8008fe4:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8008fe6:	230f      	movs	r3, #15
 8008fe8:	18fb      	adds	r3, r7, r3
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	0018      	movs	r0, r3
 8008fee:	f7ff fe91 	bl	8008d14 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008ff2:	1dfb      	adds	r3, r7, #7
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b0c      	cmp	r3, #12
 8008ff8:	d102      	bne.n	8009000 <send_cmd+0xda>
 8008ffa:	20ff      	movs	r0, #255	@ 0xff
 8008ffc:	f7ff fe8a 	bl	8008d14 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009000:	230f      	movs	r3, #15
 8009002:	18fb      	adds	r3, r7, r3
 8009004:	220a      	movs	r2, #10
 8009006:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8009008:	250e      	movs	r5, #14
 800900a:	197c      	adds	r4, r7, r5
 800900c:	20ff      	movs	r0, #255	@ 0xff
 800900e:	f7ff fe81 	bl	8008d14 <xchg_spi>
 8009012:	0003      	movs	r3, r0
 8009014:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8009016:	197b      	adds	r3, r7, r5
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	b25b      	sxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	da09      	bge.n	8009034 <send_cmd+0x10e>
 8009020:	210f      	movs	r1, #15
 8009022:	187b      	adds	r3, r7, r1
 8009024:	187a      	adds	r2, r7, r1
 8009026:	7812      	ldrb	r2, [r2, #0]
 8009028:	3a01      	subs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	187b      	adds	r3, r7, r1
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e9      	bne.n	8009008 <send_cmd+0xe2>

	return res;							/* Return received response */
 8009034:	230e      	movs	r3, #14
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	781b      	ldrb	r3, [r3, #0]
}
 800903a:	0018      	movs	r0, r3
 800903c:	46bd      	mov	sp, r7
 800903e:	b004      	add	sp, #16
 8009040:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009044 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009044:	b5b0      	push	{r4, r5, r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	0002      	movs	r2, r0
 800904c:	1dfb      	adds	r3, r7, #7
 800904e:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <USER_SPI_initialize+0x18>
 8009058:	2301      	movs	r3, #1
 800905a:	e100      	b.n	800925e <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800905c:	4b82      	ldr	r3, [pc, #520]	@ (8009268 <USER_SPI_initialize+0x224>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	001a      	movs	r2, r3
 8009064:	2302      	movs	r3, #2
 8009066:	4013      	ands	r3, r2
 8009068:	d003      	beq.n	8009072 <USER_SPI_initialize+0x2e>
 800906a:	4b7f      	ldr	r3, [pc, #508]	@ (8009268 <USER_SPI_initialize+0x224>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	e0f5      	b.n	800925e <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8009072:	4b7e      	ldr	r3, [pc, #504]	@ (800926c <USER_SPI_initialize+0x228>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2238      	movs	r2, #56	@ 0x38
 800907a:	4393      	bics	r3, r2
 800907c:	001a      	movs	r2, r3
 800907e:	4b7b      	ldr	r3, [pc, #492]	@ (800926c <USER_SPI_initialize+0x228>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2130      	movs	r1, #48	@ 0x30
 8009084:	430a      	orrs	r2, r1
 8009086:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009088:	230f      	movs	r3, #15
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	220a      	movs	r2, #10
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	e008      	b.n	80090a4 <USER_SPI_initialize+0x60>
 8009092:	20ff      	movs	r0, #255	@ 0xff
 8009094:	f7ff fe3e 	bl	8008d14 <xchg_spi>
 8009098:	210f      	movs	r1, #15
 800909a:	187b      	adds	r3, r7, r1
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	3a01      	subs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	240f      	movs	r4, #15
 80090a6:	193b      	adds	r3, r7, r4
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1f1      	bne.n	8009092 <USER_SPI_initialize+0x4e>

	ty = 0;
 80090ae:	230d      	movs	r3, #13
 80090b0:	18fb      	adds	r3, r7, r3
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80090b6:	2100      	movs	r1, #0
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7ff ff34 	bl	8008f26 <send_cmd>
 80090be:	0003      	movs	r3, r0
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d000      	beq.n	80090c6 <USER_SPI_initialize+0x82>
 80090c4:	e0a6      	b.n	8009214 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80090c6:	23fa      	movs	r3, #250	@ 0xfa
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7ff fdf8 	bl	8008cc0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80090d0:	23d5      	movs	r3, #213	@ 0xd5
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	0019      	movs	r1, r3
 80090d6:	2008      	movs	r0, #8
 80090d8:	f7ff ff25 	bl	8008f26 <send_cmd>
 80090dc:	0003      	movs	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d162      	bne.n	80091a8 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80090e2:	193b      	adds	r3, r7, r4
 80090e4:	2200      	movs	r2, #0
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	e00f      	b.n	800910a <USER_SPI_initialize+0xc6>
 80090ea:	250f      	movs	r5, #15
 80090ec:	197b      	adds	r3, r7, r5
 80090ee:	781c      	ldrb	r4, [r3, #0]
 80090f0:	20ff      	movs	r0, #255	@ 0xff
 80090f2:	f7ff fe0f 	bl	8008d14 <xchg_spi>
 80090f6:	0003      	movs	r3, r0
 80090f8:	001a      	movs	r2, r3
 80090fa:	2308      	movs	r3, #8
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	551a      	strb	r2, [r3, r4]
 8009100:	197b      	adds	r3, r7, r5
 8009102:	781a      	ldrb	r2, [r3, #0]
 8009104:	197b      	adds	r3, r7, r5
 8009106:	3201      	adds	r2, #1
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	230f      	movs	r3, #15
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d9ea      	bls.n	80090ea <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009114:	2208      	movs	r2, #8
 8009116:	18bb      	adds	r3, r7, r2
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d000      	beq.n	8009120 <USER_SPI_initialize+0xdc>
 800911e:	e079      	b.n	8009214 <USER_SPI_initialize+0x1d0>
 8009120:	18bb      	adds	r3, r7, r2
 8009122:	78db      	ldrb	r3, [r3, #3]
 8009124:	2baa      	cmp	r3, #170	@ 0xaa
 8009126:	d000      	beq.n	800912a <USER_SPI_initialize+0xe6>
 8009128:	e074      	b.n	8009214 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	f7ff fddc 	bl	8008ce8 <SPI_Timer_Status>
 8009130:	1e03      	subs	r3, r0, #0
 8009132:	d007      	beq.n	8009144 <USER_SPI_initialize+0x100>
 8009134:	2380      	movs	r3, #128	@ 0x80
 8009136:	05db      	lsls	r3, r3, #23
 8009138:	0019      	movs	r1, r3
 800913a:	20a9      	movs	r0, #169	@ 0xa9
 800913c:	f7ff fef3 	bl	8008f26 <send_cmd>
 8009140:	1e03      	subs	r3, r0, #0
 8009142:	d1f3      	bne.n	800912c <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009144:	f7ff fdd0 	bl	8008ce8 <SPI_Timer_Status>
 8009148:	1e03      	subs	r3, r0, #0
 800914a:	d063      	beq.n	8009214 <USER_SPI_initialize+0x1d0>
 800914c:	2100      	movs	r1, #0
 800914e:	203a      	movs	r0, #58	@ 0x3a
 8009150:	f7ff fee9 	bl	8008f26 <send_cmd>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d15d      	bne.n	8009214 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009158:	230f      	movs	r3, #15
 800915a:	18fb      	adds	r3, r7, r3
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
 8009160:	e00f      	b.n	8009182 <USER_SPI_initialize+0x13e>
 8009162:	250f      	movs	r5, #15
 8009164:	197b      	adds	r3, r7, r5
 8009166:	781c      	ldrb	r4, [r3, #0]
 8009168:	20ff      	movs	r0, #255	@ 0xff
 800916a:	f7ff fdd3 	bl	8008d14 <xchg_spi>
 800916e:	0003      	movs	r3, r0
 8009170:	001a      	movs	r2, r3
 8009172:	2308      	movs	r3, #8
 8009174:	18fb      	adds	r3, r7, r3
 8009176:	551a      	strb	r2, [r3, r4]
 8009178:	197b      	adds	r3, r7, r5
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	197b      	adds	r3, r7, r5
 800917e:	3201      	adds	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	230f      	movs	r3, #15
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d9ea      	bls.n	8009162 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800918c:	2308      	movs	r3, #8
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	001a      	movs	r2, r3
 8009194:	2340      	movs	r3, #64	@ 0x40
 8009196:	4013      	ands	r3, r2
 8009198:	d001      	beq.n	800919e <USER_SPI_initialize+0x15a>
 800919a:	220c      	movs	r2, #12
 800919c:	e000      	b.n	80091a0 <USER_SPI_initialize+0x15c>
 800919e:	2204      	movs	r2, #4
 80091a0:	230d      	movs	r3, #13
 80091a2:	18fb      	adds	r3, r7, r3
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	e035      	b.n	8009214 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80091a8:	2100      	movs	r1, #0
 80091aa:	20a9      	movs	r0, #169	@ 0xa9
 80091ac:	f7ff febb 	bl	8008f26 <send_cmd>
 80091b0:	0003      	movs	r3, r0
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d808      	bhi.n	80091c8 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80091b6:	230d      	movs	r3, #13
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	2202      	movs	r2, #2
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	230e      	movs	r3, #14
 80091c0:	18fb      	adds	r3, r7, r3
 80091c2:	22a9      	movs	r2, #169	@ 0xa9
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e007      	b.n	80091d8 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80091c8:	230d      	movs	r3, #13
 80091ca:	18fb      	adds	r3, r7, r3
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	230e      	movs	r3, #14
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	2201      	movs	r2, #1
 80091d6:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80091d8:	46c0      	nop			@ (mov r8, r8)
 80091da:	f7ff fd85 	bl	8008ce8 <SPI_Timer_Status>
 80091de:	1e03      	subs	r3, r0, #0
 80091e0:	d008      	beq.n	80091f4 <USER_SPI_initialize+0x1b0>
 80091e2:	230e      	movs	r3, #14
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2100      	movs	r1, #0
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7ff fe9b 	bl	8008f26 <send_cmd>
 80091f0:	1e03      	subs	r3, r0, #0
 80091f2:	d1f2      	bne.n	80091da <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80091f4:	f7ff fd78 	bl	8008ce8 <SPI_Timer_Status>
 80091f8:	1e03      	subs	r3, r0, #0
 80091fa:	d007      	beq.n	800920c <USER_SPI_initialize+0x1c8>
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	0019      	movs	r1, r3
 8009202:	2010      	movs	r0, #16
 8009204:	f7ff fe8f 	bl	8008f26 <send_cmd>
 8009208:	1e03      	subs	r3, r0, #0
 800920a:	d003      	beq.n	8009214 <USER_SPI_initialize+0x1d0>
				ty = 0;
 800920c:	230d      	movs	r3, #13
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8009214:	4b16      	ldr	r3, [pc, #88]	@ (8009270 <USER_SPI_initialize+0x22c>)
 8009216:	240d      	movs	r4, #13
 8009218:	193a      	adds	r2, r7, r4
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	701a      	strb	r2, [r3, #0]
	despiselect();
 800921e:	f7ff fde9 	bl	8008df4 <despiselect>

	if (ty) {			/* OK */
 8009222:	193b      	adds	r3, r7, r4
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d013      	beq.n	8009252 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 800922a:	4b10      	ldr	r3, [pc, #64]	@ (800926c <USER_SPI_initialize+0x228>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2238      	movs	r2, #56	@ 0x38
 8009232:	4393      	bics	r3, r2
 8009234:	001a      	movs	r2, r3
 8009236:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <USER_SPI_initialize+0x228>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2110      	movs	r1, #16
 800923c:	430a      	orrs	r2, r1
 800923e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009240:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <USER_SPI_initialize+0x224>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2201      	movs	r2, #1
 8009248:	4393      	bics	r3, r2
 800924a:	b2da      	uxtb	r2, r3
 800924c:	4b06      	ldr	r3, [pc, #24]	@ (8009268 <USER_SPI_initialize+0x224>)
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	e002      	b.n	8009258 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009252:	4b05      	ldr	r3, [pc, #20]	@ (8009268 <USER_SPI_initialize+0x224>)
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009258:	4b03      	ldr	r3, [pc, #12]	@ (8009268 <USER_SPI_initialize+0x224>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
}
 800925e:	0018      	movs	r0, r3
 8009260:	46bd      	mov	sp, r7
 8009262:	b004      	add	sp, #16
 8009264:	bdb0      	pop	{r4, r5, r7, pc}
 8009266:	46c0      	nop			@ (mov r8, r8)
 8009268:	20000024 	.word	0x20000024
 800926c:	20000a4c 	.word	0x20000a4c
 8009270:	20000e78 	.word	0x20000e78

08009274 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	0002      	movs	r2, r0
 800927c:	1dfb      	adds	r3, r7, #7
 800927e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009280:	1dfb      	adds	r3, r7, #7
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <USER_SPI_status+0x18>
 8009288:	2301      	movs	r3, #1
 800928a:	e002      	b.n	8009292 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <USER_SPI_status+0x28>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b002      	add	sp, #8
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	20000024 	.word	0x20000024

080092a0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	210f      	movs	r1, #15
 80092ae:	187b      	adds	r3, r7, r1
 80092b0:	1c02      	adds	r2, r0, #0
 80092b2:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80092b4:	187b      	adds	r3, r7, r1
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <USER_SPI_read+0x22>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <USER_SPI_read+0x26>
 80092c2:	2304      	movs	r3, #4
 80092c4:	e04f      	b.n	8009366 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80092c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009370 <USER_SPI_read+0xd0>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	001a      	movs	r2, r3
 80092ce:	2301      	movs	r3, #1
 80092d0:	4013      	ands	r3, r2
 80092d2:	d001      	beq.n	80092d8 <USER_SPI_read+0x38>
 80092d4:	2303      	movs	r3, #3
 80092d6:	e046      	b.n	8009366 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80092d8:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <USER_SPI_read+0xd4>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	001a      	movs	r2, r3
 80092de:	2308      	movs	r3, #8
 80092e0:	4013      	ands	r3, r2
 80092e2:	d102      	bne.n	80092ea <USER_SPI_read+0x4a>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d112      	bne.n	8009316 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	0019      	movs	r1, r3
 80092f4:	2011      	movs	r0, #17
 80092f6:	f7ff fe16 	bl	8008f26 <send_cmd>
 80092fa:	1e03      	subs	r3, r0, #0
 80092fc:	d12d      	bne.n	800935a <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 80092fe:	2380      	movs	r3, #128	@ 0x80
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	0011      	movs	r1, r2
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff fda4 	bl	8008e54 <rcvr_datablock>
 800930c:	1e03      	subs	r3, r0, #0
 800930e:	d024      	beq.n	800935a <USER_SPI_read+0xba>
			count = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	e021      	b.n	800935a <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	0019      	movs	r1, r3
 800931a:	2012      	movs	r0, #18
 800931c:	f7ff fe03 	bl	8008f26 <send_cmd>
 8009320:	1e03      	subs	r3, r0, #0
 8009322:	d11a      	bne.n	800935a <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009324:	2380      	movs	r3, #128	@ 0x80
 8009326:	009a      	lsls	r2, r3, #2
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f7ff fd91 	bl	8008e54 <rcvr_datablock>
 8009332:	1e03      	subs	r3, r0, #0
 8009334:	d00c      	beq.n	8009350 <USER_SPI_read+0xb0>
				buff += 512;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2280      	movs	r2, #128	@ 0x80
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	4694      	mov	ip, r2
 800933e:	4463      	add	r3, ip
 8009340:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	3b01      	subs	r3, #1
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1ea      	bne.n	8009324 <USER_SPI_read+0x84>
 800934e:	e000      	b.n	8009352 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8009350:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009352:	2100      	movs	r1, #0
 8009354:	200c      	movs	r0, #12
 8009356:	f7ff fde6 	bl	8008f26 <send_cmd>
		}
	}
	despiselect();
 800935a:	f7ff fd4b 	bl	8008df4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	4193      	sbcs	r3, r2
 8009364:	b2db      	uxtb	r3, r3
}
 8009366:	0018      	movs	r0, r3
 8009368:	46bd      	mov	sp, r7
 800936a:	b004      	add	sp, #16
 800936c:	bd80      	pop	{r7, pc}
 800936e:	46c0      	nop			@ (mov r8, r8)
 8009370:	20000024 	.word	0x20000024
 8009374:	20000e78 	.word	0x20000e78

08009378 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	210f      	movs	r1, #15
 8009386:	187b      	adds	r3, r7, r1
 8009388:	1c02      	adds	r2, r0, #0
 800938a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800938c:	187b      	adds	r3, r7, r1
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <USER_SPI_write+0x22>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <USER_SPI_write+0x26>
 800939a:	2304      	movs	r3, #4
 800939c:	e063      	b.n	8009466 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800939e:	4b34      	ldr	r3, [pc, #208]	@ (8009470 <USER_SPI_write+0xf8>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	001a      	movs	r2, r3
 80093a6:	2301      	movs	r3, #1
 80093a8:	4013      	ands	r3, r2
 80093aa:	d001      	beq.n	80093b0 <USER_SPI_write+0x38>
 80093ac:	2303      	movs	r3, #3
 80093ae:	e05a      	b.n	8009466 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80093b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009470 <USER_SPI_write+0xf8>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	001a      	movs	r2, r3
 80093b8:	2304      	movs	r3, #4
 80093ba:	4013      	ands	r3, r2
 80093bc:	d001      	beq.n	80093c2 <USER_SPI_write+0x4a>
 80093be:	2302      	movs	r3, #2
 80093c0:	e051      	b.n	8009466 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80093c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009474 <USER_SPI_write+0xfc>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	001a      	movs	r2, r3
 80093c8:	2308      	movs	r3, #8
 80093ca:	4013      	ands	r3, r2
 80093cc:	d102      	bne.n	80093d4 <USER_SPI_write+0x5c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	025b      	lsls	r3, r3, #9
 80093d2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d110      	bne.n	80093fc <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	0019      	movs	r1, r3
 80093de:	2018      	movs	r0, #24
 80093e0:	f7ff fda1 	bl	8008f26 <send_cmd>
 80093e4:	1e03      	subs	r3, r0, #0
 80093e6:	d138      	bne.n	800945a <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	21fe      	movs	r1, #254	@ 0xfe
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7ff fd60 	bl	8008eb2 <xmit_datablock>
 80093f2:	1e03      	subs	r3, r0, #0
 80093f4:	d031      	beq.n	800945a <USER_SPI_write+0xe2>
			count = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	e02e      	b.n	800945a <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80093fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009474 <USER_SPI_write+0xfc>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	001a      	movs	r2, r3
 8009402:	2306      	movs	r3, #6
 8009404:	4013      	ands	r3, r2
 8009406:	d004      	beq.n	8009412 <USER_SPI_write+0x9a>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	0019      	movs	r1, r3
 800940c:	2097      	movs	r0, #151	@ 0x97
 800940e:	f7ff fd8a 	bl	8008f26 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0019      	movs	r1, r3
 8009416:	2019      	movs	r0, #25
 8009418:	f7ff fd85 	bl	8008f26 <send_cmd>
 800941c:	1e03      	subs	r3, r0, #0
 800941e:	d11c      	bne.n	800945a <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	21fc      	movs	r1, #252	@ 0xfc
 8009424:	0018      	movs	r0, r3
 8009426:	f7ff fd44 	bl	8008eb2 <xmit_datablock>
 800942a:	1e03      	subs	r3, r0, #0
 800942c:	d00c      	beq.n	8009448 <USER_SPI_write+0xd0>
				buff += 512;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2280      	movs	r2, #128	@ 0x80
 8009432:	0092      	lsls	r2, r2, #2
 8009434:	4694      	mov	ip, r2
 8009436:	4463      	add	r3, ip
 8009438:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	3b01      	subs	r3, #1
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1ec      	bne.n	8009420 <USER_SPI_write+0xa8>
 8009446:	e000      	b.n	800944a <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009448:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800944a:	21fd      	movs	r1, #253	@ 0xfd
 800944c:	2000      	movs	r0, #0
 800944e:	f7ff fd30 	bl	8008eb2 <xmit_datablock>
 8009452:	1e03      	subs	r3, r0, #0
 8009454:	d101      	bne.n	800945a <USER_SPI_write+0xe2>
 8009456:	2301      	movs	r3, #1
 8009458:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800945a:	f7ff fccb 	bl	8008df4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	4193      	sbcs	r3, r2
 8009464:	b2db      	uxtb	r3, r3
}
 8009466:	0018      	movs	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	b004      	add	sp, #16
 800946c:	bd80      	pop	{r7, pc}
 800946e:	46c0      	nop			@ (mov r8, r8)
 8009470:	20000024 	.word	0x20000024
 8009474:	20000e78 	.word	0x20000e78

08009478 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b08d      	sub	sp, #52	@ 0x34
 800947c:	af00      	add	r7, sp, #0
 800947e:	603a      	str	r2, [r7, #0]
 8009480:	1dfb      	adds	r3, r7, #7
 8009482:	1c02      	adds	r2, r0, #0
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	1dbb      	adds	r3, r7, #6
 8009488:	1c0a      	adds	r2, r1, #0
 800948a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800948c:	1dfb      	adds	r3, r7, #7
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <USER_SPI_ioctl+0x20>
 8009494:	2304      	movs	r3, #4
 8009496:	e178      	b.n	800978a <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009498:	4bbe      	ldr	r3, [pc, #760]	@ (8009794 <USER_SPI_ioctl+0x31c>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	001a      	movs	r2, r3
 80094a0:	2301      	movs	r3, #1
 80094a2:	4013      	ands	r3, r2
 80094a4:	d001      	beq.n	80094aa <USER_SPI_ioctl+0x32>
 80094a6:	2303      	movs	r3, #3
 80094a8:	e16f      	b.n	800978a <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 80094aa:	232f      	movs	r3, #47	@ 0x2f
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80094b2:	1dbb      	adds	r3, r7, #6
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d100      	bne.n	80094bc <USER_SPI_ioctl+0x44>
 80094ba:	e100      	b.n	80096be <USER_SPI_ioctl+0x246>
 80094bc:	dd00      	ble.n	80094c0 <USER_SPI_ioctl+0x48>
 80094be:	e14d      	b.n	800975c <USER_SPI_ioctl+0x2e4>
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d100      	bne.n	80094c6 <USER_SPI_ioctl+0x4e>
 80094c4:	e074      	b.n	80095b0 <USER_SPI_ioctl+0x138>
 80094c6:	dd00      	ble.n	80094ca <USER_SPI_ioctl+0x52>
 80094c8:	e148      	b.n	800975c <USER_SPI_ioctl+0x2e4>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <USER_SPI_ioctl+0x5c>
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d00a      	beq.n	80094e8 <USER_SPI_ioctl+0x70>
 80094d2:	e143      	b.n	800975c <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80094d4:	f7ff fca0 	bl	8008e18 <spiselect>
 80094d8:	1e03      	subs	r3, r0, #0
 80094da:	d100      	bne.n	80094de <USER_SPI_ioctl+0x66>
 80094dc:	e143      	b.n	8009766 <USER_SPI_ioctl+0x2ee>
 80094de:	232f      	movs	r3, #47	@ 0x2f
 80094e0:	18fb      	adds	r3, r7, r3
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
		break;
 80094e6:	e13e      	b.n	8009766 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80094e8:	2100      	movs	r1, #0
 80094ea:	2009      	movs	r0, #9
 80094ec:	f7ff fd1b 	bl	8008f26 <send_cmd>
 80094f0:	1e03      	subs	r3, r0, #0
 80094f2:	d000      	beq.n	80094f6 <USER_SPI_ioctl+0x7e>
 80094f4:	e139      	b.n	800976a <USER_SPI_ioctl+0x2f2>
 80094f6:	240c      	movs	r4, #12
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	2110      	movs	r1, #16
 80094fc:	0018      	movs	r0, r3
 80094fe:	f7ff fca9 	bl	8008e54 <rcvr_datablock>
 8009502:	1e03      	subs	r3, r0, #0
 8009504:	d100      	bne.n	8009508 <USER_SPI_ioctl+0x90>
 8009506:	e130      	b.n	800976a <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009508:	0020      	movs	r0, r4
 800950a:	183b      	adds	r3, r7, r0
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	099b      	lsrs	r3, r3, #6
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b01      	cmp	r3, #1
 8009514:	d115      	bne.n	8009542 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009516:	183b      	adds	r3, r7, r0
 8009518:	7a5b      	ldrb	r3, [r3, #9]
 800951a:	001a      	movs	r2, r3
 800951c:	183b      	adds	r3, r7, r0
 800951e:	7a1b      	ldrb	r3, [r3, #8]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	18d3      	adds	r3, r2, r3
 8009524:	0019      	movs	r1, r3
 8009526:	183b      	adds	r3, r7, r0
 8009528:	79db      	ldrb	r3, [r3, #7]
 800952a:	041a      	lsls	r2, r3, #16
 800952c:	23fc      	movs	r3, #252	@ 0xfc
 800952e:	039b      	lsls	r3, r3, #14
 8009530:	4013      	ands	r3, r2
 8009532:	18cb      	adds	r3, r1, r3
 8009534:	3301      	adds	r3, #1
 8009536:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	029a      	lsls	r2, r3, #10
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e031      	b.n	80095a6 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009542:	200c      	movs	r0, #12
 8009544:	183b      	adds	r3, r7, r0
 8009546:	795b      	ldrb	r3, [r3, #5]
 8009548:	220f      	movs	r2, #15
 800954a:	4013      	ands	r3, r2
 800954c:	b2da      	uxtb	r2, r3
 800954e:	183b      	adds	r3, r7, r0
 8009550:	7a9b      	ldrb	r3, [r3, #10]
 8009552:	09db      	lsrs	r3, r3, #7
 8009554:	b2db      	uxtb	r3, r3
 8009556:	18d3      	adds	r3, r2, r3
 8009558:	b2da      	uxtb	r2, r3
 800955a:	183b      	adds	r3, r7, r0
 800955c:	7a5b      	ldrb	r3, [r3, #9]
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2106      	movs	r1, #6
 8009564:	400b      	ands	r3, r1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	18d3      	adds	r3, r2, r3
 800956a:	b2da      	uxtb	r2, r3
 800956c:	242e      	movs	r4, #46	@ 0x2e
 800956e:	193b      	adds	r3, r7, r4
 8009570:	3202      	adds	r2, #2
 8009572:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009574:	183b      	adds	r3, r7, r0
 8009576:	7a1b      	ldrb	r3, [r3, #8]
 8009578:	099b      	lsrs	r3, r3, #6
 800957a:	b2db      	uxtb	r3, r3
 800957c:	001a      	movs	r2, r3
 800957e:	183b      	adds	r3, r7, r0
 8009580:	79db      	ldrb	r3, [r3, #7]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	18d2      	adds	r2, r2, r3
 8009586:	183b      	adds	r3, r7, r0
 8009588:	799b      	ldrb	r3, [r3, #6]
 800958a:	0299      	lsls	r1, r3, #10
 800958c:	23c0      	movs	r3, #192	@ 0xc0
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	400b      	ands	r3, r1
 8009592:	18d3      	adds	r3, r2, r3
 8009594:	3301      	adds	r3, #1
 8009596:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009598:	193b      	adds	r3, r7, r4
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	3b09      	subs	r3, #9
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	409a      	lsls	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80095a6:	232f      	movs	r3, #47	@ 0x2f
 80095a8:	18fb      	adds	r3, r7, r3
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80095ae:	e0dc      	b.n	800976a <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80095b0:	4b79      	ldr	r3, [pc, #484]	@ (8009798 <USER_SPI_ioctl+0x320>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	001a      	movs	r2, r3
 80095b6:	2304      	movs	r3, #4
 80095b8:	4013      	ands	r3, r2
 80095ba:	d035      	beq.n	8009628 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80095bc:	2100      	movs	r1, #0
 80095be:	208d      	movs	r0, #141	@ 0x8d
 80095c0:	f7ff fcb1 	bl	8008f26 <send_cmd>
 80095c4:	1e03      	subs	r3, r0, #0
 80095c6:	d000      	beq.n	80095ca <USER_SPI_ioctl+0x152>
 80095c8:	e0d1      	b.n	800976e <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80095ca:	20ff      	movs	r0, #255	@ 0xff
 80095cc:	f7ff fba2 	bl	8008d14 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80095d0:	230c      	movs	r3, #12
 80095d2:	18fb      	adds	r3, r7, r3
 80095d4:	2110      	movs	r1, #16
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff fc3c 	bl	8008e54 <rcvr_datablock>
 80095dc:	1e03      	subs	r3, r0, #0
 80095de:	d100      	bne.n	80095e2 <USER_SPI_ioctl+0x16a>
 80095e0:	e0c5      	b.n	800976e <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80095e2:	232e      	movs	r3, #46	@ 0x2e
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	2230      	movs	r2, #48	@ 0x30
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e008      	b.n	80095fe <USER_SPI_ioctl+0x186>
 80095ec:	20ff      	movs	r0, #255	@ 0xff
 80095ee:	f7ff fb91 	bl	8008d14 <xchg_spi>
 80095f2:	212e      	movs	r1, #46	@ 0x2e
 80095f4:	187b      	adds	r3, r7, r1
 80095f6:	781a      	ldrb	r2, [r3, #0]
 80095f8:	187b      	adds	r3, r7, r1
 80095fa:	3a01      	subs	r2, #1
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	232e      	movs	r3, #46	@ 0x2e
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f1      	bne.n	80095ec <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009608:	230c      	movs	r3, #12
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	7a9b      	ldrb	r3, [r3, #10]
 800960e:	091b      	lsrs	r3, r3, #4
 8009610:	b2db      	uxtb	r3, r3
 8009612:	001a      	movs	r2, r3
 8009614:	2310      	movs	r3, #16
 8009616:	4093      	lsls	r3, r2
 8009618:	001a      	movs	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800961e:	232f      	movs	r3, #47	@ 0x2f
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009626:	e0a2      	b.n	800976e <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009628:	2100      	movs	r1, #0
 800962a:	2009      	movs	r0, #9
 800962c:	f7ff fc7b 	bl	8008f26 <send_cmd>
 8009630:	1e03      	subs	r3, r0, #0
 8009632:	d000      	beq.n	8009636 <USER_SPI_ioctl+0x1be>
 8009634:	e09b      	b.n	800976e <USER_SPI_ioctl+0x2f6>
 8009636:	240c      	movs	r4, #12
 8009638:	193b      	adds	r3, r7, r4
 800963a:	2110      	movs	r1, #16
 800963c:	0018      	movs	r0, r3
 800963e:	f7ff fc09 	bl	8008e54 <rcvr_datablock>
 8009642:	1e03      	subs	r3, r0, #0
 8009644:	d100      	bne.n	8009648 <USER_SPI_ioctl+0x1d0>
 8009646:	e092      	b.n	800976e <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009648:	4b53      	ldr	r3, [pc, #332]	@ (8009798 <USER_SPI_ioctl+0x320>)
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	001a      	movs	r2, r3
 800964e:	2302      	movs	r3, #2
 8009650:	4013      	ands	r3, r2
 8009652:	d016      	beq.n	8009682 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009654:	0021      	movs	r1, r4
 8009656:	187b      	adds	r3, r7, r1
 8009658:	7a9b      	ldrb	r3, [r3, #10]
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	227e      	movs	r2, #126	@ 0x7e
 800965e:	4013      	ands	r3, r2
 8009660:	187a      	adds	r2, r7, r1
 8009662:	7ad2      	ldrb	r2, [r2, #11]
 8009664:	09d2      	lsrs	r2, r2, #7
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	189b      	adds	r3, r3, r2
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	187b      	adds	r3, r7, r1
 800966e:	7b5b      	ldrb	r3, [r3, #13]
 8009670:	099b      	lsrs	r3, r3, #6
 8009672:	b2db      	uxtb	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	409a      	lsls	r2, r3
 8009678:	0013      	movs	r3, r2
 800967a:	001a      	movs	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e018      	b.n	80096b4 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009682:	210c      	movs	r1, #12
 8009684:	187b      	adds	r3, r7, r1
 8009686:	7a9b      	ldrb	r3, [r3, #10]
 8009688:	109b      	asrs	r3, r3, #2
 800968a:	b29b      	uxth	r3, r3
 800968c:	001a      	movs	r2, r3
 800968e:	231f      	movs	r3, #31
 8009690:	4013      	ands	r3, r2
 8009692:	3301      	adds	r3, #1
 8009694:	0008      	movs	r0, r1
 8009696:	187a      	adds	r2, r7, r1
 8009698:	7ad2      	ldrb	r2, [r2, #11]
 800969a:	00d2      	lsls	r2, r2, #3
 800969c:	2118      	movs	r1, #24
 800969e:	400a      	ands	r2, r1
 80096a0:	1839      	adds	r1, r7, r0
 80096a2:	7ac9      	ldrb	r1, [r1, #11]
 80096a4:	0949      	lsrs	r1, r1, #5
 80096a6:	b2c9      	uxtb	r1, r1
 80096a8:	1852      	adds	r2, r2, r1
 80096aa:	3201      	adds	r2, #1
 80096ac:	4353      	muls	r3, r2
 80096ae:	001a      	movs	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80096b4:	232f      	movs	r3, #47	@ 0x2f
 80096b6:	18fb      	adds	r3, r7, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
		break;
 80096bc:	e057      	b.n	800976e <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80096be:	4b36      	ldr	r3, [pc, #216]	@ (8009798 <USER_SPI_ioctl+0x320>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	001a      	movs	r2, r3
 80096c4:	2306      	movs	r3, #6
 80096c6:	4013      	ands	r3, r2
 80096c8:	d053      	beq.n	8009772 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80096ca:	240c      	movs	r4, #12
 80096cc:	193a      	adds	r2, r7, r4
 80096ce:	1dfb      	adds	r3, r7, #7
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	210b      	movs	r1, #11
 80096d4:	0018      	movs	r0, r3
 80096d6:	f7ff fecf 	bl	8009478 <USER_SPI_ioctl>
 80096da:	1e03      	subs	r3, r0, #0
 80096dc:	d14b      	bne.n	8009776 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80096de:	193b      	adds	r3, r7, r4
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	099b      	lsrs	r3, r3, #6
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d105      	bne.n	80096f6 <USER_SPI_ioctl+0x27e>
 80096ea:	193b      	adds	r3, r7, r4
 80096ec:	7a9b      	ldrb	r3, [r3, #10]
 80096ee:	001a      	movs	r2, r3
 80096f0:	2340      	movs	r3, #64	@ 0x40
 80096f2:	4013      	ands	r3, r2
 80096f4:	d041      	beq.n	800977a <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	623b      	str	r3, [r7, #32]
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009706:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <USER_SPI_ioctl+0x320>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	001a      	movs	r2, r3
 800970c:	2308      	movs	r3, #8
 800970e:	4013      	ands	r3, r2
 8009710:	d105      	bne.n	800971e <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	025b      	lsls	r3, r3, #9
 8009716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971a:	025b      	lsls	r3, r3, #9
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009720:	0019      	movs	r1, r3
 8009722:	2020      	movs	r0, #32
 8009724:	f7ff fbff 	bl	8008f26 <send_cmd>
 8009728:	1e03      	subs	r3, r0, #0
 800972a:	d128      	bne.n	800977e <USER_SPI_ioctl+0x306>
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	0019      	movs	r1, r3
 8009730:	2021      	movs	r0, #33	@ 0x21
 8009732:	f7ff fbf8 	bl	8008f26 <send_cmd>
 8009736:	1e03      	subs	r3, r0, #0
 8009738:	d121      	bne.n	800977e <USER_SPI_ioctl+0x306>
 800973a:	2100      	movs	r1, #0
 800973c:	2026      	movs	r0, #38	@ 0x26
 800973e:	f7ff fbf2 	bl	8008f26 <send_cmd>
 8009742:	1e03      	subs	r3, r0, #0
 8009744:	d11b      	bne.n	800977e <USER_SPI_ioctl+0x306>
 8009746:	4b15      	ldr	r3, [pc, #84]	@ (800979c <USER_SPI_ioctl+0x324>)
 8009748:	0018      	movs	r0, r3
 800974a:	f7ff fb2b 	bl	8008da4 <wait_ready>
 800974e:	1e03      	subs	r3, r0, #0
 8009750:	d015      	beq.n	800977e <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009752:	232f      	movs	r3, #47	@ 0x2f
 8009754:	18fb      	adds	r3, r7, r3
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
		}
		break;
 800975a:	e010      	b.n	800977e <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 800975c:	232f      	movs	r3, #47	@ 0x2f
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	2204      	movs	r2, #4
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	e00c      	b.n	8009780 <USER_SPI_ioctl+0x308>
		break;
 8009766:	46c0      	nop			@ (mov r8, r8)
 8009768:	e00a      	b.n	8009780 <USER_SPI_ioctl+0x308>
		break;
 800976a:	46c0      	nop			@ (mov r8, r8)
 800976c:	e008      	b.n	8009780 <USER_SPI_ioctl+0x308>
		break;
 800976e:	46c0      	nop			@ (mov r8, r8)
 8009770:	e006      	b.n	8009780 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009772:	46c0      	nop			@ (mov r8, r8)
 8009774:	e004      	b.n	8009780 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009776:	46c0      	nop			@ (mov r8, r8)
 8009778:	e002      	b.n	8009780 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800977a:	46c0      	nop			@ (mov r8, r8)
 800977c:	e000      	b.n	8009780 <USER_SPI_ioctl+0x308>
		break;
 800977e:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8009780:	f7ff fb38 	bl	8008df4 <despiselect>

	return res;
 8009784:	232f      	movs	r3, #47	@ 0x2f
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	781b      	ldrb	r3, [r3, #0]
}
 800978a:	0018      	movs	r0, r3
 800978c:	46bd      	mov	sp, r7
 800978e:	b00d      	add	sp, #52	@ 0x34
 8009790:	bd90      	pop	{r4, r7, pc}
 8009792:	46c0      	nop			@ (mov r8, r8)
 8009794:	20000024 	.word	0x20000024
 8009798:	20000e78 	.word	0x20000e78
 800979c:	00007530 	.word	0x00007530

080097a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80097a0:	b5b0      	push	{r4, r5, r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	0002      	movs	r2, r0
 80097a8:	1dfb      	adds	r3, r7, #7
 80097aa:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80097ac:	1dfb      	adds	r3, r7, #7
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	4a0b      	ldr	r2, [pc, #44]	@ (80097e0 <disk_status+0x40>)
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	3304      	adds	r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	1dfa      	adds	r2, r7, #7
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	4907      	ldr	r1, [pc, #28]	@ (80097e0 <disk_status+0x40>)
 80097c2:	188a      	adds	r2, r1, r2
 80097c4:	7a12      	ldrb	r2, [r2, #8]
 80097c6:	250f      	movs	r5, #15
 80097c8:	197c      	adds	r4, r7, r5
 80097ca:	0010      	movs	r0, r2
 80097cc:	4798      	blx	r3
 80097ce:	0003      	movs	r3, r0
 80097d0:	7023      	strb	r3, [r4, #0]
  return stat;
 80097d2:	197b      	adds	r3, r7, r5
 80097d4:	781b      	ldrb	r3, [r3, #0]
}
 80097d6:	0018      	movs	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	b004      	add	sp, #16
 80097dc:	bdb0      	pop	{r4, r5, r7, pc}
 80097de:	46c0      	nop			@ (mov r8, r8)
 80097e0:	20000eac 	.word	0x20000eac

080097e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80097e4:	b590      	push	{r4, r7, lr}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	0002      	movs	r2, r0
 80097ec:	1dfb      	adds	r3, r7, #7
 80097ee:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80097f0:	200f      	movs	r0, #15
 80097f2:	183b      	adds	r3, r7, r0
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80097f8:	1dfb      	adds	r3, r7, #7
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	4a10      	ldr	r2, [pc, #64]	@ (8009840 <disk_initialize+0x5c>)
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d116      	bne.n	8009832 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8009804:	1dfb      	adds	r3, r7, #7
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4a0d      	ldr	r2, [pc, #52]	@ (8009840 <disk_initialize+0x5c>)
 800980a:	2101      	movs	r1, #1
 800980c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800980e:	1dfb      	adds	r3, r7, #7
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	4a0b      	ldr	r2, [pc, #44]	@ (8009840 <disk_initialize+0x5c>)
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	18d3      	adds	r3, r2, r3
 8009818:	3304      	adds	r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	1dfa      	adds	r2, r7, #7
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	4907      	ldr	r1, [pc, #28]	@ (8009840 <disk_initialize+0x5c>)
 8009824:	188a      	adds	r2, r1, r2
 8009826:	7a12      	ldrb	r2, [r2, #8]
 8009828:	183c      	adds	r4, r7, r0
 800982a:	0010      	movs	r0, r2
 800982c:	4798      	blx	r3
 800982e:	0003      	movs	r3, r0
 8009830:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8009832:	230f      	movs	r3, #15
 8009834:	18fb      	adds	r3, r7, r3
 8009836:	781b      	ldrb	r3, [r3, #0]
}
 8009838:	0018      	movs	r0, r3
 800983a:	46bd      	mov	sp, r7
 800983c:	b005      	add	sp, #20
 800983e:	bd90      	pop	{r4, r7, pc}
 8009840:	20000eac 	.word	0x20000eac

08009844 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	210f      	movs	r1, #15
 8009852:	187b      	adds	r3, r7, r1
 8009854:	1c02      	adds	r2, r0, #0
 8009856:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009858:	187b      	adds	r3, r7, r1
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4a0c      	ldr	r2, [pc, #48]	@ (8009890 <disk_read+0x4c>)
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	18d3      	adds	r3, r2, r3
 8009862:	3304      	adds	r3, #4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689d      	ldr	r5, [r3, #8]
 8009868:	187b      	adds	r3, r7, r1
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	4a08      	ldr	r2, [pc, #32]	@ (8009890 <disk_read+0x4c>)
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	7a18      	ldrb	r0, [r3, #8]
 8009872:	2617      	movs	r6, #23
 8009874:	19bc      	adds	r4, r7, r6
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	47a8      	blx	r5
 800987e:	0003      	movs	r3, r0
 8009880:	7023      	strb	r3, [r4, #0]
  return res;
 8009882:	19bb      	adds	r3, r7, r6
 8009884:	781b      	ldrb	r3, [r3, #0]
}
 8009886:	0018      	movs	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	b007      	add	sp, #28
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	20000eac 	.word	0x20000eac

08009894 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	210f      	movs	r1, #15
 80098a2:	187b      	adds	r3, r7, r1
 80098a4:	1c02      	adds	r2, r0, #0
 80098a6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80098a8:	187b      	adds	r3, r7, r1
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	4a0c      	ldr	r2, [pc, #48]	@ (80098e0 <disk_write+0x4c>)
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	18d3      	adds	r3, r2, r3
 80098b2:	3304      	adds	r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68dd      	ldr	r5, [r3, #12]
 80098b8:	187b      	adds	r3, r7, r1
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4a08      	ldr	r2, [pc, #32]	@ (80098e0 <disk_write+0x4c>)
 80098be:	18d3      	adds	r3, r2, r3
 80098c0:	7a18      	ldrb	r0, [r3, #8]
 80098c2:	2617      	movs	r6, #23
 80098c4:	19bc      	adds	r4, r7, r6
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	47a8      	blx	r5
 80098ce:	0003      	movs	r3, r0
 80098d0:	7023      	strb	r3, [r4, #0]
  return res;
 80098d2:	19bb      	adds	r3, r7, r6
 80098d4:	781b      	ldrb	r3, [r3, #0]
}
 80098d6:	0018      	movs	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	b007      	add	sp, #28
 80098dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	20000eac 	.word	0x20000eac

080098e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80098e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	603a      	str	r2, [r7, #0]
 80098ec:	1dfb      	adds	r3, r7, #7
 80098ee:	1c02      	adds	r2, r0, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	1dbb      	adds	r3, r7, #6
 80098f4:	1c0a      	adds	r2, r1, #0
 80098f6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80098f8:	1dfb      	adds	r3, r7, #7
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009930 <disk_ioctl+0x4c>)
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	18d3      	adds	r3, r2, r3
 8009902:	3304      	adds	r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	1dfa      	adds	r2, r7, #7
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	4908      	ldr	r1, [pc, #32]	@ (8009930 <disk_ioctl+0x4c>)
 800990e:	188a      	adds	r2, r1, r2
 8009910:	7a10      	ldrb	r0, [r2, #8]
 8009912:	260f      	movs	r6, #15
 8009914:	19bc      	adds	r4, r7, r6
 8009916:	683d      	ldr	r5, [r7, #0]
 8009918:	1dba      	adds	r2, r7, #6
 800991a:	7811      	ldrb	r1, [r2, #0]
 800991c:	002a      	movs	r2, r5
 800991e:	4798      	blx	r3
 8009920:	0003      	movs	r3, r0
 8009922:	7023      	strb	r3, [r4, #0]
  return res;
 8009924:	19bb      	adds	r3, r7, r6
 8009926:	781b      	ldrb	r3, [r3, #0]
}
 8009928:	0018      	movs	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	b005      	add	sp, #20
 800992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009930:	20000eac 	.word	0x20000eac

08009934 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3301      	adds	r3, #1
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	210e      	movs	r1, #14
 8009944:	187b      	adds	r3, r7, r1
 8009946:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8009948:	187b      	adds	r3, r7, r1
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	b21a      	sxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	b21b      	sxth	r3, r3
 8009956:	4313      	orrs	r3, r2
 8009958:	b21a      	sxth	r2, r3
 800995a:	187b      	adds	r3, r7, r1
 800995c:	801a      	strh	r2, [r3, #0]
	return rv;
 800995e:	187b      	adds	r3, r7, r1
 8009960:	881b      	ldrh	r3, [r3, #0]
}
 8009962:	0018      	movs	r0, r3
 8009964:	46bd      	mov	sp, r7
 8009966:	b004      	add	sp, #16
 8009968:	bd80      	pop	{r7, pc}

0800996a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3303      	adds	r3, #3
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	3202      	adds	r2, #2
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	3201      	adds	r2, #1
 8009990:	7812      	ldrb	r2, [r2, #0]
 8009992:	4313      	orrs	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	7812      	ldrb	r2, [r2, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
	return rv;
 80099a2:	68fb      	ldr	r3, [r7, #12]
}
 80099a4:	0018      	movs	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b004      	add	sp, #16
 80099aa:	bd80      	pop	{r7, pc}

080099ac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	000a      	movs	r2, r1
 80099b6:	1cbb      	adds	r3, r7, #2
 80099b8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	1cba      	adds	r2, r7, #2
 80099c2:	8812      	ldrh	r2, [r2, #0]
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	1cbb      	adds	r3, r7, #2
 80099ca:	1cba      	adds	r2, r7, #2
 80099cc:	8812      	ldrh	r2, [r2, #0]
 80099ce:	0a12      	lsrs	r2, r2, #8
 80099d0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	1cba      	adds	r2, r7, #2
 80099da:	8812      	ldrh	r2, [r2, #0]
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	701a      	strb	r2, [r3, #0]
}
 80099e0:	46c0      	nop			@ (mov r8, r8)
 80099e2:	46bd      	mov	sp, r7
 80099e4:	b002      	add	sp, #8
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	0a1b      	lsrs	r3, r3, #8
 8009a02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	607a      	str	r2, [r7, #4]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	0a1b      	lsrs	r3, r3, #8
 8009a26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
}
 8009a34:	46c0      	nop			@ (mov r8, r8)
 8009a36:	46bd      	mov	sp, r7
 8009a38:	b002      	add	sp, #8
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	1c53      	adds	r3, r2, #1
 8009a5a:	613b      	str	r3, [r7, #16]
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	1c59      	adds	r1, r3, #1
 8009a60:	6179      	str	r1, [r7, #20]
 8009a62:	7812      	ldrb	r2, [r2, #0]
 8009a64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f1      	bne.n	8009a56 <mem_cpy+0x1a>
	}
}
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b006      	add	sp, #24
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b086      	sub	sp, #24
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	617a      	str	r2, [r7, #20]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f3      	bne.n	8009a8a <mem_set+0x10>
}
 8009aa2:	46c0      	nop			@ (mov r8, r8)
 8009aa4:	46c0      	nop			@ (mov r8, r8)
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b006      	add	sp, #24
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	61fa      	str	r2, [r7, #28]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	0019      	movs	r1, r3
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	61ba      	str	r2, [r7, #24]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	1acb      	subs	r3, r1, r3
 8009ad8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <mem_cmp+0x40>
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0eb      	beq.n	8009ac4 <mem_cmp+0x18>

	return r;
 8009aec:	697b      	ldr	r3, [r7, #20]
}
 8009aee:	0018      	movs	r0, r3
 8009af0:	46bd      	mov	sp, r7
 8009af2:	b008      	add	sp, #32
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b00:	e002      	b.n	8009b08 <chk_chr+0x12>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3301      	adds	r3, #1
 8009b06:	607b      	str	r3, [r7, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <chk_chr+0x26>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	001a      	movs	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d1f2      	bne.n	8009b02 <chk_chr+0xc>
	return *str;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
}
 8009b20:	0018      	movs	r0, r3
 8009b22:	46bd      	mov	sp, r7
 8009b24:	b002      	add	sp, #8
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d008      	beq.n	8009b48 <lock_fs+0x20>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f002 fb84 	bl	800c248 <ff_req_grant>
 8009b40:	1e03      	subs	r3, r0, #0
 8009b42:	d001      	beq.n	8009b48 <lock_fs+0x20>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <lock_fs+0x22>
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	b002      	add	sp, #8
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	000a      	movs	r2, r1
 8009b5c:	1cfb      	adds	r3, r7, #3
 8009b5e:	701a      	strb	r2, [r3, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d010      	beq.n	8009b88 <unlock_fs+0x36>
 8009b66:	1cfb      	adds	r3, r7, #3
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b0c      	cmp	r3, #12
 8009b6c:	d00c      	beq.n	8009b88 <unlock_fs+0x36>
 8009b6e:	1cfb      	adds	r3, r7, #3
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b0b      	cmp	r3, #11
 8009b74:	d008      	beq.n	8009b88 <unlock_fs+0x36>
 8009b76:	1cfb      	adds	r3, r7, #3
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b0f      	cmp	r3, #15
 8009b7c:	d004      	beq.n	8009b88 <unlock_fs+0x36>
		ff_rel_grant(fs->sobj);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	0018      	movs	r0, r3
 8009b84:	f002 fb76 	bl	800c274 <ff_rel_grant>
	}
}
 8009b88:	46c0      	nop			@ (mov r8, r8)
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b002      	add	sp, #8
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	e027      	b.n	8009bf4 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8009ba4:	4b25      	ldr	r3, [pc, #148]	@ (8009c3c <chk_lock+0xac>)
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	0112      	lsls	r2, r2, #4
 8009baa:	58d3      	ldr	r3, [r2, r3]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01c      	beq.n	8009bea <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bb0:	4b22      	ldr	r3, [pc, #136]	@ (8009c3c <chk_lock+0xac>)
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	0112      	lsls	r2, r2, #4
 8009bb6:	58d2      	ldr	r2, [r2, r3]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d116      	bne.n	8009bee <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8009bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c3c <chk_lock+0xac>)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	18d3      	adds	r3, r2, r3
 8009bc8:	3304      	adds	r3, #4
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d10c      	bne.n	8009bee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8009bd4:	4a19      	ldr	r2, [pc, #100]	@ (8009c3c <chk_lock+0xac>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	18d3      	adds	r3, r2, r3
 8009bdc:	3308      	adds	r3, #8
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d102      	bne.n	8009bee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8009be8:	e007      	b.n	8009bfa <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8009bea:	2301      	movs	r3, #1
 8009bec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d9d4      	bls.n	8009ba4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d109      	bne.n	8009c14 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <chk_lock+0x7c>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d101      	bne.n	8009c10 <chk_lock+0x80>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	e011      	b.n	8009c34 <chk_lock+0xa4>
 8009c10:	2312      	movs	r3, #18
 8009c12:	e00f      	b.n	8009c34 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <chk_lock+0x9e>
 8009c1a:	4a08      	ldr	r2, [pc, #32]	@ (8009c3c <chk_lock+0xac>)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	18d3      	adds	r3, r2, r3
 8009c22:	330c      	adds	r3, #12
 8009c24:	881a      	ldrh	r2, [r3, #0]
 8009c26:	2380      	movs	r3, #128	@ 0x80
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d101      	bne.n	8009c32 <chk_lock+0xa2>
 8009c2e:	2310      	movs	r3, #16
 8009c30:	e000      	b.n	8009c34 <chk_lock+0xa4>
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	0018      	movs	r0, r3
 8009c36:	46bd      	mov	sp, r7
 8009c38:	b004      	add	sp, #16
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000e8c 	.word	0x20000e8c

08009c40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c46:	2300      	movs	r3, #0
 8009c48:	607b      	str	r3, [r7, #4]
 8009c4a:	e002      	b.n	8009c52 <enq_lock+0x12>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d805      	bhi.n	8009c64 <enq_lock+0x24>
 8009c58:	4b07      	ldr	r3, [pc, #28]	@ (8009c78 <enq_lock+0x38>)
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	0112      	lsls	r2, r2, #4
 8009c5e:	58d3      	ldr	r3, [r2, r3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1f3      	bne.n	8009c4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3b02      	subs	r3, #2
 8009c68:	1e5a      	subs	r2, r3, #1
 8009c6a:	4193      	sbcs	r3, r2
 8009c6c:	b2db      	uxtb	r3, r3
}
 8009c6e:	0018      	movs	r0, r3
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b002      	add	sp, #8
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	46c0      	nop			@ (mov r8, r8)
 8009c78:	20000e8c 	.word	0x20000e8c

08009c7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e01e      	b.n	8009cca <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8009c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8009d8c <inc_lock+0x110>)
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	0112      	lsls	r2, r2, #4
 8009c92:	58d2      	ldr	r2, [r2, r3]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d113      	bne.n	8009cc4 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8009c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8009d8c <inc_lock+0x110>)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	18d3      	adds	r3, r2, r3
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d109      	bne.n	8009cc4 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8009cb0:	4a36      	ldr	r2, [pc, #216]	@ (8009d8c <inc_lock+0x110>)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	18d3      	adds	r3, r2, r3
 8009cb8:	3308      	adds	r3, #8
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d006      	beq.n	8009cd2 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d9dd      	bls.n	8009c8c <inc_lock+0x10>
 8009cd0:	e000      	b.n	8009cd4 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8009cd2:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d130      	bne.n	8009d3c <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	e002      	b.n	8009ce6 <inc_lock+0x6a>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d805      	bhi.n	8009cf8 <inc_lock+0x7c>
 8009cec:	4b27      	ldr	r3, [pc, #156]	@ (8009d8c <inc_lock+0x110>)
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	0112      	lsls	r2, r2, #4
 8009cf2:	58d3      	ldr	r3, [r2, r3]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f3      	bne.n	8009ce0 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d101      	bne.n	8009d02 <inc_lock+0x86>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e03f      	b.n	8009d82 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6819      	ldr	r1, [r3, #0]
 8009d06:	4b21      	ldr	r3, [pc, #132]	@ (8009d8c <inc_lock+0x110>)
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	0112      	lsls	r2, r2, #4
 8009d0c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	491e      	ldr	r1, [pc, #120]	@ (8009d8c <inc_lock+0x110>)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	18cb      	adds	r3, r1, r3
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695a      	ldr	r2, [r3, #20]
 8009d22:	491a      	ldr	r1, [pc, #104]	@ (8009d8c <inc_lock+0x110>)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	18cb      	adds	r3, r1, r3
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d2e:	4a17      	ldr	r2, [pc, #92]	@ (8009d8c <inc_lock+0x110>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	330c      	adds	r3, #12
 8009d38:	2200      	movs	r2, #0
 8009d3a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <inc_lock+0xda>
 8009d42:	4a12      	ldr	r2, [pc, #72]	@ (8009d8c <inc_lock+0x110>)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	011b      	lsls	r3, r3, #4
 8009d48:	18d3      	adds	r3, r2, r3
 8009d4a:	330c      	adds	r3, #12
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <inc_lock+0xda>
 8009d52:	2300      	movs	r3, #0
 8009d54:	e015      	b.n	8009d82 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d108      	bne.n	8009d6e <inc_lock+0xf2>
 8009d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8009d8c <inc_lock+0x110>)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	18d3      	adds	r3, r2, r3
 8009d64:	330c      	adds	r3, #12
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	e001      	b.n	8009d72 <inc_lock+0xf6>
 8009d6e:	2380      	movs	r3, #128	@ 0x80
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4906      	ldr	r1, [pc, #24]	@ (8009d8c <inc_lock+0x110>)
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	0112      	lsls	r2, r2, #4
 8009d78:	188a      	adds	r2, r1, r2
 8009d7a:	320c      	adds	r2, #12
 8009d7c:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3301      	adds	r3, #1
}
 8009d82:	0018      	movs	r0, r3
 8009d84:	46bd      	mov	sp, r7
 8009d86:	b004      	add	sp, #16
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	20000e8c 	.word	0x20000e8c

08009d90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d832      	bhi.n	8009e0a <dec_lock+0x7a>
		n = Files[i].ctr;
 8009da4:	200e      	movs	r0, #14
 8009da6:	183b      	adds	r3, r7, r0
 8009da8:	491d      	ldr	r1, [pc, #116]	@ (8009e20 <dec_lock+0x90>)
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	0112      	lsls	r2, r2, #4
 8009dae:	188a      	adds	r2, r1, r2
 8009db0:	320c      	adds	r2, #12
 8009db2:	8812      	ldrh	r2, [r2, #0]
 8009db4:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009db6:	183b      	adds	r3, r7, r0
 8009db8:	881a      	ldrh	r2, [r3, #0]
 8009dba:	2380      	movs	r3, #128	@ 0x80
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d102      	bne.n	8009dc8 <dec_lock+0x38>
 8009dc2:	183b      	adds	r3, r7, r0
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009dc8:	210e      	movs	r1, #14
 8009dca:	187b      	adds	r3, r7, r1
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <dec_lock+0x4c>
 8009dd2:	187b      	adds	r3, r7, r1
 8009dd4:	881a      	ldrh	r2, [r3, #0]
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	3a01      	subs	r2, #1
 8009dda:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8009ddc:	4a10      	ldr	r2, [pc, #64]	@ (8009e20 <dec_lock+0x90>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	18d3      	adds	r3, r2, r3
 8009de4:	330c      	adds	r3, #12
 8009de6:	210e      	movs	r1, #14
 8009de8:	187a      	adds	r2, r7, r1
 8009dea:	8812      	ldrh	r2, [r2, #0]
 8009dec:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009dee:	187b      	adds	r3, r7, r1
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d104      	bne.n	8009e00 <dec_lock+0x70>
 8009df6:	4b0a      	ldr	r3, [pc, #40]	@ (8009e20 <dec_lock+0x90>)
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	0112      	lsls	r2, r2, #4
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8009e00:	230d      	movs	r3, #13
 8009e02:	18fb      	adds	r3, r7, r3
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
 8009e08:	e003      	b.n	8009e12 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e0a:	230d      	movs	r3, #13
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	2202      	movs	r2, #2
 8009e10:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8009e12:	230d      	movs	r3, #13
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	781b      	ldrb	r3, [r3, #0]
}
 8009e18:	0018      	movs	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b004      	add	sp, #16
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000e8c 	.word	0x20000e8c

08009e24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e00e      	b.n	8009e50 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e32:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <clear_lock+0x3c>)
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	0112      	lsls	r2, r2, #4
 8009e38:	58d3      	ldr	r3, [r2, r3]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d104      	bne.n	8009e4a <clear_lock+0x26>
 8009e40:	4b07      	ldr	r3, [pc, #28]	@ (8009e60 <clear_lock+0x3c>)
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	0112      	lsls	r2, r2, #4
 8009e46:	2100      	movs	r1, #0
 8009e48:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d9ed      	bls.n	8009e32 <clear_lock+0xe>
	}
}
 8009e56:	46c0      	nop			@ (mov r8, r8)
 8009e58:	46c0      	nop			@ (mov r8, r8)
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b004      	add	sp, #16
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000e8c 	.word	0x20000e8c

08009e64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e6c:	240f      	movs	r4, #15
 8009e6e:	193b      	adds	r3, r7, r4
 8009e70:	2200      	movs	r2, #0
 8009e72:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	78db      	ldrb	r3, [r3, #3]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d034      	beq.n	8009ee6 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7858      	ldrb	r0, [r3, #1]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3334      	adds	r3, #52	@ 0x34
 8009e8a:	0019      	movs	r1, r3
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f7ff fd00 	bl	8009894 <disk_write>
 8009e94:	1e03      	subs	r3, r0, #0
 8009e96:	d003      	beq.n	8009ea0 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8009e98:	193b      	adds	r3, r7, r4
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	701a      	strb	r2, [r3, #0]
 8009e9e:	e022      	b.n	8009ee6 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	1ad2      	subs	r2, r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d217      	bcs.n	8009ee6 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	789b      	ldrb	r3, [r3, #2]
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	e010      	b.n	8009ee0 <sync_window+0x7c>
					wsect += fs->fsize;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	18d3      	adds	r3, r2, r3
 8009ec6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7858      	ldrb	r0, [r3, #1]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3334      	adds	r3, #52	@ 0x34
 8009ed0:	0019      	movs	r1, r3
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f7ff fcdd 	bl	8009894 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d8eb      	bhi.n	8009ebe <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8009ee6:	230f      	movs	r3, #15
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	781b      	ldrb	r3, [r3, #0]
}
 8009eec:	0018      	movs	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b007      	add	sp, #28
 8009ef2:	bd90      	pop	{r4, r7, pc}

08009ef4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ef4:	b5b0      	push	{r4, r5, r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009efe:	250f      	movs	r5, #15
 8009f00:	197b      	adds	r3, r7, r5
 8009f02:	2200      	movs	r2, #0
 8009f04:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d01f      	beq.n	8009f50 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f10:	197c      	adds	r4, r7, r5
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	0018      	movs	r0, r3
 8009f16:	f7ff ffa5 	bl	8009e64 <sync_window>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f1e:	002c      	movs	r4, r5
 8009f20:	193b      	adds	r3, r7, r4
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d113      	bne.n	8009f50 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7858      	ldrb	r0, [r3, #1]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3334      	adds	r3, #52	@ 0x34
 8009f30:	0019      	movs	r1, r3
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	2301      	movs	r3, #1
 8009f36:	f7ff fc85 	bl	8009844 <disk_read>
 8009f3a:	1e03      	subs	r3, r0, #0
 8009f3c:	d005      	beq.n	8009f4a <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f3e:	2301      	movs	r3, #1
 8009f40:	425b      	negs	r3, r3
 8009f42:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f44:	193b      	adds	r3, r7, r4
 8009f46:	2201      	movs	r2, #1
 8009f48:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8009f50:	230f      	movs	r3, #15
 8009f52:	18fb      	adds	r3, r7, r3
 8009f54:	781b      	ldrb	r3, [r3, #0]
}
 8009f56:	0018      	movs	r0, r3
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	b004      	add	sp, #16
 8009f5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f60:	b5b0      	push	{r4, r5, r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f68:	250f      	movs	r5, #15
 8009f6a:	197c      	adds	r4, r7, r5
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f7ff ff78 	bl	8009e64 <sync_window>
 8009f74:	0003      	movs	r3, r0
 8009f76:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009f78:	197b      	adds	r3, r7, r5
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d15d      	bne.n	800a03c <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d14c      	bne.n	800a022 <sync_fs+0xc2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	791b      	ldrb	r3, [r3, #4]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d148      	bne.n	800a022 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3334      	adds	r3, #52	@ 0x34
 8009f94:	2280      	movs	r2, #128	@ 0x80
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	2100      	movs	r1, #0
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7ff fd6d 	bl	8009a7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3334      	adds	r3, #52	@ 0x34
 8009fa4:	33ff      	adds	r3, #255	@ 0xff
 8009fa6:	33ff      	adds	r3, #255	@ 0xff
 8009fa8:	4a28      	ldr	r2, [pc, #160]	@ (800a04c <sync_fs+0xec>)
 8009faa:	0011      	movs	r1, r2
 8009fac:	0018      	movs	r0, r3
 8009fae:	f7ff fcfd 	bl	80099ac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3334      	adds	r3, #52	@ 0x34
 8009fb6:	4a26      	ldr	r2, [pc, #152]	@ (800a050 <sync_fs+0xf0>)
 8009fb8:	0011      	movs	r1, r2
 8009fba:	0018      	movs	r0, r3
 8009fbc:	f7ff fd14 	bl	80099e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3334      	adds	r3, #52	@ 0x34
 8009fc4:	33e5      	adds	r3, #229	@ 0xe5
 8009fc6:	33ff      	adds	r3, #255	@ 0xff
 8009fc8:	4a22      	ldr	r2, [pc, #136]	@ (800a054 <sync_fs+0xf4>)
 8009fca:	0011      	movs	r1, r2
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7ff fd0b 	bl	80099e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3334      	adds	r3, #52	@ 0x34
 8009fd6:	33e9      	adds	r3, #233	@ 0xe9
 8009fd8:	33ff      	adds	r3, #255	@ 0xff
 8009fda:	001a      	movs	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	0019      	movs	r1, r3
 8009fe2:	0010      	movs	r0, r2
 8009fe4:	f7ff fd00 	bl	80099e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3334      	adds	r3, #52	@ 0x34
 8009fec:	33ed      	adds	r3, #237	@ 0xed
 8009fee:	33ff      	adds	r3, #255	@ 0xff
 8009ff0:	001a      	movs	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	0019      	movs	r1, r3
 8009ff8:	0010      	movs	r0, r2
 8009ffa:	f7ff fcf5 	bl	80099e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7858      	ldrb	r0, [r3, #1]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3334      	adds	r3, #52	@ 0x34
 800a010:	0019      	movs	r1, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a016:	2301      	movs	r3, #1
 800a018:	f7ff fc3c 	bl	8009894 <disk_write>
			fs->fsi_flag = 0;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	2200      	movs	r2, #0
 800a028:	2100      	movs	r1, #0
 800a02a:	0018      	movs	r0, r3
 800a02c:	f7ff fc5a 	bl	80098e4 <disk_ioctl>
 800a030:	1e03      	subs	r3, r0, #0
 800a032:	d003      	beq.n	800a03c <sync_fs+0xdc>
 800a034:	230f      	movs	r3, #15
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2201      	movs	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800a03c:	230f      	movs	r3, #15
 800a03e:	18fb      	adds	r3, r7, r3
 800a040:	781b      	ldrb	r3, [r3, #0]
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b004      	add	sp, #16
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	46c0      	nop			@ (mov r8, r8)
 800a04c:	0000aa55 	.word	0x0000aa55
 800a050:	41615252 	.word	0x41615252
 800a054:	61417272 	.word	0x61417272

0800a058 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	3b02      	subs	r3, #2
 800a066:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	3b02      	subs	r3, #2
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d301      	bcc.n	800a078 <clust2sect+0x20>
 800a074:	2300      	movs	r3, #0
 800a076:	e007      	b.n	800a088 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	895b      	ldrh	r3, [r3, #10]
 800a07c:	001a      	movs	r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	435a      	muls	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a086:	18d3      	adds	r3, r2, r3
}
 800a088:	0018      	movs	r0, r3
 800a08a:	46bd      	mov	sp, r7
 800a08c:	b002      	add	sp, #8
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d904      	bls.n	800a0b0 <get_fat+0x20>
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d302      	bcc.n	800a0b6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e091      	b.n	800a1da <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	425b      	negs	r3, r3
 800a0ba:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d063      	beq.n	800a18c <get_fat+0xfc>
 800a0c4:	dd00      	ble.n	800a0c8 <get_fat+0x38>
 800a0c6:	e07e      	b.n	800a1c6 <get_fat+0x136>
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d002      	beq.n	800a0d2 <get_fat+0x42>
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d042      	beq.n	800a156 <get_fat+0xc6>
 800a0d0:	e079      	b.n	800a1c6 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	085b      	lsrs	r3, r3, #1
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	18d3      	adds	r3, r2, r3
 800a0de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	0a5b      	lsrs	r3, r3, #9
 800a0e8:	18d2      	adds	r2, r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	0011      	movs	r1, r2
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f7ff ff00 	bl	8009ef4 <move_window>
 800a0f4:	1e03      	subs	r3, r0, #0
 800a0f6:	d169      	bne.n	800a1cc <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	60fa      	str	r2, [r7, #12]
 800a0fe:	05db      	lsls	r3, r3, #23
 800a100:	0ddb      	lsrs	r3, r3, #23
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	2134      	movs	r1, #52	@ 0x34
 800a106:	18d3      	adds	r3, r2, r3
 800a108:	185b      	adds	r3, r3, r1
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	0a5b      	lsrs	r3, r3, #9
 800a116:	18d2      	adds	r2, r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	0011      	movs	r1, r2
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7ff fee9 	bl	8009ef4 <move_window>
 800a122:	1e03      	subs	r3, r0, #0
 800a124:	d154      	bne.n	800a1d0 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	05db      	lsls	r3, r3, #23
 800a12a:	0ddb      	lsrs	r3, r3, #23
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	2134      	movs	r1, #52	@ 0x34
 800a130:	18d3      	adds	r3, r2, r3
 800a132:	185b      	adds	r3, r3, r1
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2201      	movs	r2, #1
 800a142:	4013      	ands	r3, r2
 800a144:	d002      	beq.n	800a14c <get_fat+0xbc>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	091b      	lsrs	r3, r3, #4
 800a14a:	e002      	b.n	800a152 <get_fat+0xc2>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	051b      	lsls	r3, r3, #20
 800a150:	0d1b      	lsrs	r3, r3, #20
 800a152:	617b      	str	r3, [r7, #20]
			break;
 800a154:	e041      	b.n	800a1da <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	18d2      	adds	r2, r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	0011      	movs	r1, r2
 800a164:	0018      	movs	r0, r3
 800a166:	f7ff fec5 	bl	8009ef4 <move_window>
 800a16a:	1e03      	subs	r3, r0, #0
 800a16c:	d132      	bne.n	800a1d4 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	3334      	adds	r3, #52	@ 0x34
 800a172:	001a      	movs	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	0059      	lsls	r1, r3, #1
 800a178:	23ff      	movs	r3, #255	@ 0xff
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	400b      	ands	r3, r1
 800a17e:	18d3      	adds	r3, r2, r3
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff fbd7 	bl	8009934 <ld_word>
 800a186:	0003      	movs	r3, r0
 800a188:	617b      	str	r3, [r7, #20]
			break;
 800a18a:	e026      	b.n	800a1da <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	09db      	lsrs	r3, r3, #7
 800a194:	18d2      	adds	r2, r2, r3
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	0011      	movs	r1, r2
 800a19a:	0018      	movs	r0, r3
 800a19c:	f7ff feaa 	bl	8009ef4 <move_window>
 800a1a0:	1e03      	subs	r3, r0, #0
 800a1a2:	d119      	bne.n	800a1d8 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	3334      	adds	r3, #52	@ 0x34
 800a1a8:	001a      	movs	r2, r3
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	0099      	lsls	r1, r3, #2
 800a1ae:	23fe      	movs	r3, #254	@ 0xfe
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	400b      	ands	r3, r1
 800a1b4:	18d3      	adds	r3, r2, r3
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff fbd7 	bl	800996a <ld_dword>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	091b      	lsrs	r3, r3, #4
 800a1c2:	617b      	str	r3, [r7, #20]
			break;
 800a1c4:	e009      	b.n	800a1da <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	617b      	str	r3, [r7, #20]
 800a1ca:	e006      	b.n	800a1da <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1cc:	46c0      	nop			@ (mov r8, r8)
 800a1ce:	e004      	b.n	800a1da <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1d0:	46c0      	nop			@ (mov r8, r8)
 800a1d2:	e002      	b.n	800a1da <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1d4:	46c0      	nop			@ (mov r8, r8)
 800a1d6:	e000      	b.n	800a1da <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1d8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	0018      	movs	r0, r3
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b006      	add	sp, #24
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a1e4:	b5b0      	push	{r4, r5, r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a1f0:	231f      	movs	r3, #31
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d800      	bhi.n	800a200 <put_fat+0x1c>
 800a1fe:	e0eb      	b.n	800a3d8 <put_fat+0x1f4>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d300      	bcc.n	800a20c <put_fat+0x28>
 800a20a:	e0e5      	b.n	800a3d8 <put_fat+0x1f4>
		switch (fs->fs_type) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b03      	cmp	r3, #3
 800a212:	d100      	bne.n	800a216 <put_fat+0x32>
 800a214:	e0a1      	b.n	800a35a <put_fat+0x176>
 800a216:	dd00      	ble.n	800a21a <put_fat+0x36>
 800a218:	e0de      	b.n	800a3d8 <put_fat+0x1f4>
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d003      	beq.n	800a226 <put_fat+0x42>
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d100      	bne.n	800a224 <put_fat+0x40>
 800a222:	e075      	b.n	800a310 <put_fat+0x12c>
 800a224:	e0d8      	b.n	800a3d8 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	085b      	lsrs	r3, r3, #1
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	18d3      	adds	r3, r2, r3
 800a232:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	0a5b      	lsrs	r3, r3, #9
 800a23c:	18d2      	adds	r2, r2, r3
 800a23e:	251f      	movs	r5, #31
 800a240:	197c      	adds	r4, r7, r5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	0011      	movs	r1, r2
 800a246:	0018      	movs	r0, r3
 800a248:	f7ff fe54 	bl	8009ef4 <move_window>
 800a24c:	0003      	movs	r3, r0
 800a24e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a250:	197b      	adds	r3, r7, r5
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d000      	beq.n	800a25a <put_fat+0x76>
 800a258:	e0b7      	b.n	800a3ca <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3334      	adds	r3, #52	@ 0x34
 800a25e:	001a      	movs	r2, r3
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1c59      	adds	r1, r3, #1
 800a264:	61b9      	str	r1, [r7, #24]
 800a266:	05db      	lsls	r3, r3, #23
 800a268:	0ddb      	lsrs	r3, r3, #23
 800a26a:	18d3      	adds	r3, r2, r3
 800a26c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2201      	movs	r2, #1
 800a272:	4013      	ands	r3, r2
 800a274:	d00d      	beq.n	800a292 <put_fat+0xae>
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	220f      	movs	r2, #15
 800a27e:	4013      	ands	r3, r2
 800a280:	b25a      	sxtb	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	b25b      	sxtb	r3, r3
 800a28a:	4313      	orrs	r3, r2
 800a28c:	b25b      	sxtb	r3, r3
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	e001      	b.n	800a296 <put_fat+0xb2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	0a5b      	lsrs	r3, r3, #9
 800a2a8:	18d2      	adds	r2, r2, r3
 800a2aa:	251f      	movs	r5, #31
 800a2ac:	197c      	adds	r4, r7, r5
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	0011      	movs	r1, r2
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f7ff fe1e 	bl	8009ef4 <move_window>
 800a2b8:	0003      	movs	r3, r0
 800a2ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a2bc:	197b      	adds	r3, r7, r5
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d000      	beq.n	800a2c6 <put_fat+0xe2>
 800a2c4:	e083      	b.n	800a3ce <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3334      	adds	r3, #52	@ 0x34
 800a2ca:	001a      	movs	r2, r3
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	05db      	lsls	r3, r3, #23
 800a2d0:	0ddb      	lsrs	r3, r3, #23
 800a2d2:	18d3      	adds	r3, r2, r3
 800a2d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	4013      	ands	r3, r2
 800a2dc:	d003      	beq.n	800a2e6 <put_fat+0x102>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	091b      	lsrs	r3, r3, #4
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	e00e      	b.n	800a304 <put_fat+0x120>
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b25b      	sxtb	r3, r3
 800a2ec:	220f      	movs	r2, #15
 800a2ee:	4393      	bics	r3, r2
 800a2f0:	b25a      	sxtb	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	0a1b      	lsrs	r3, r3, #8
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	210f      	movs	r1, #15
 800a2fa:	400b      	ands	r3, r1
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	4313      	orrs	r3, r2
 800a300:	b25b      	sxtb	r3, r3
 800a302:	b2db      	uxtb	r3, r3
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2201      	movs	r2, #1
 800a30c:	70da      	strb	r2, [r3, #3]
			break;
 800a30e:	e063      	b.n	800a3d8 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	18d2      	adds	r2, r2, r3
 800a31a:	251f      	movs	r5, #31
 800a31c:	197c      	adds	r4, r7, r5
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	0011      	movs	r1, r2
 800a322:	0018      	movs	r0, r3
 800a324:	f7ff fde6 	bl	8009ef4 <move_window>
 800a328:	0003      	movs	r3, r0
 800a32a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a32c:	197b      	adds	r3, r7, r5
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d14e      	bne.n	800a3d2 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3334      	adds	r3, #52	@ 0x34
 800a338:	001a      	movs	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	0059      	lsls	r1, r3, #1
 800a33e:	23ff      	movs	r3, #255	@ 0xff
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	400b      	ands	r3, r1
 800a344:	18d3      	adds	r3, r2, r3
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	b292      	uxth	r2, r2
 800a34a:	0011      	movs	r1, r2
 800a34c:	0018      	movs	r0, r3
 800a34e:	f7ff fb2d 	bl	80099ac <st_word>
			fs->wflag = 1;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	70da      	strb	r2, [r3, #3]
			break;
 800a358:	e03e      	b.n	800a3d8 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	09db      	lsrs	r3, r3, #7
 800a362:	18d2      	adds	r2, r2, r3
 800a364:	251f      	movs	r5, #31
 800a366:	197c      	adds	r4, r7, r5
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	0011      	movs	r1, r2
 800a36c:	0018      	movs	r0, r3
 800a36e:	f7ff fdc1 	bl	8009ef4 <move_window>
 800a372:	0003      	movs	r3, r0
 800a374:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a376:	197b      	adds	r3, r7, r5
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d12b      	bne.n	800a3d6 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	091c      	lsrs	r4, r3, #4
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3334      	adds	r3, #52	@ 0x34
 800a388:	001a      	movs	r2, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	0099      	lsls	r1, r3, #2
 800a38e:	23fe      	movs	r3, #254	@ 0xfe
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	400b      	ands	r3, r1
 800a394:	18d3      	adds	r3, r2, r3
 800a396:	0018      	movs	r0, r3
 800a398:	f7ff fae7 	bl	800996a <ld_dword>
 800a39c:	0003      	movs	r3, r0
 800a39e:	0f1b      	lsrs	r3, r3, #28
 800a3a0:	071b      	lsls	r3, r3, #28
 800a3a2:	4323      	orrs	r3, r4
 800a3a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3334      	adds	r3, #52	@ 0x34
 800a3aa:	001a      	movs	r2, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	0099      	lsls	r1, r3, #2
 800a3b0:	23fe      	movs	r3, #254	@ 0xfe
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	400b      	ands	r3, r1
 800a3b6:	18d3      	adds	r3, r2, r3
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	0011      	movs	r1, r2
 800a3bc:	0018      	movs	r0, r3
 800a3be:	f7ff fb13 	bl	80099e8 <st_dword>
			fs->wflag = 1;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	70da      	strb	r2, [r3, #3]
			break;
 800a3c8:	e006      	b.n	800a3d8 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	e004      	b.n	800a3d8 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	e002      	b.n	800a3d8 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800a3d2:	46c0      	nop			@ (mov r8, r8)
 800a3d4:	e000      	b.n	800a3d8 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800a3d6:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 800a3d8:	231f      	movs	r3, #31
 800a3da:	18fb      	adds	r3, r7, r3
 800a3dc:	781b      	ldrb	r3, [r3, #0]
}
 800a3de:	0018      	movs	r0, r3
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	b008      	add	sp, #32
 800a3e4:	bdb0      	pop	{r4, r5, r7, pc}

0800a3e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a3e6:	b5b0      	push	{r4, r5, r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a3f2:	231f      	movs	r3, #31
 800a3f4:	18fb      	adds	r3, r7, r3
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d904      	bls.n	800a410 <remove_chain+0x2a>
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d301      	bcc.n	800a414 <remove_chain+0x2e>
 800a410:	2302      	movs	r3, #2
 800a412:	e057      	b.n	800a4c4 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d011      	beq.n	800a43e <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a41a:	251f      	movs	r5, #31
 800a41c:	197c      	adds	r4, r7, r5
 800a41e:	2301      	movs	r3, #1
 800a420:	425a      	negs	r2, r3
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	0018      	movs	r0, r3
 800a428:	f7ff fedc 	bl	800a1e4 <put_fat>
 800a42c:	0003      	movs	r3, r0
 800a42e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800a430:	197b      	adds	r3, r7, r5
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <remove_chain+0x58>
 800a438:	197b      	adds	r3, r7, r5
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	e042      	b.n	800a4c4 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	0011      	movs	r1, r2
 800a444:	0018      	movs	r0, r3
 800a446:	f7ff fe23 	bl	800a090 <get_fat>
 800a44a:	0003      	movs	r3, r0
 800a44c:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d035      	beq.n	800a4c0 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <remove_chain+0x78>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e032      	b.n	800a4c4 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	3301      	adds	r3, #1
 800a462:	d101      	bne.n	800a468 <remove_chain+0x82>
 800a464:	2301      	movs	r3, #1
 800a466:	e02d      	b.n	800a4c4 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a468:	251f      	movs	r5, #31
 800a46a:	197c      	adds	r4, r7, r5
 800a46c:	68b9      	ldr	r1, [r7, #8]
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2200      	movs	r2, #0
 800a472:	0018      	movs	r0, r3
 800a474:	f7ff feb6 	bl	800a1e4 <put_fat>
 800a478:	0003      	movs	r3, r0
 800a47a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 800a47c:	197b      	adds	r3, r7, r5
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <remove_chain+0xa4>
 800a484:	197b      	adds	r3, r7, r5
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	e01c      	b.n	800a4c4 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	695a      	ldr	r2, [r3, #20]
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	3b02      	subs	r3, #2
 800a494:	429a      	cmp	r2, r3
 800a496:	d20b      	bcs.n	800a4b0 <remove_chain+0xca>
			fs->free_clst++;
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	791b      	ldrb	r3, [r3, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d3bf      	bcc.n	800a43e <remove_chain+0x58>
 800a4be:	e000      	b.n	800a4c2 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800a4c0:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b008      	add	sp, #32
 800a4ca:	bdb0      	pop	{r4, r5, r7, pc}

0800a4cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4cc:	b5b0      	push	{r4, r5, r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <create_chain+0x2c>
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d31d      	bcc.n	800a534 <create_chain+0x68>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	61bb      	str	r3, [r7, #24]
 800a4fc:	e01a      	b.n	800a534 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	0011      	movs	r1, r2
 800a504:	0018      	movs	r0, r3
 800a506:	f7ff fdc3 	bl	800a090 <get_fat>
 800a50a:	0003      	movs	r3, r0
 800a50c:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d801      	bhi.n	800a518 <create_chain+0x4c>
 800a514:	2301      	movs	r3, #1
 800a516:	e07b      	b.n	800a610 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	d101      	bne.n	800a522 <create_chain+0x56>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	e076      	b.n	800a610 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d201      	bcs.n	800a530 <create_chain+0x64>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	e06f      	b.n	800a610 <create_chain+0x144>
		scl = clst;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	3301      	adds	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	429a      	cmp	r2, r3
 800a546:	d307      	bcc.n	800a558 <create_chain+0x8c>
				ncl = 2;
 800a548:	2302      	movs	r3, #2
 800a54a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	429a      	cmp	r2, r3
 800a552:	d901      	bls.n	800a558 <create_chain+0x8c>
 800a554:	2300      	movs	r3, #0
 800a556:	e05b      	b.n	800a610 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	0011      	movs	r1, r2
 800a55e:	0018      	movs	r0, r3
 800a560:	f7ff fd96 	bl	800a090 <get_fat>
 800a564:	0003      	movs	r3, r0
 800a566:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00d      	beq.n	800a58a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d002      	beq.n	800a57a <create_chain+0xae>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3301      	adds	r3, #1
 800a578:	d101      	bne.n	800a57e <create_chain+0xb2>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	e048      	b.n	800a610 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	429a      	cmp	r2, r3
 800a584:	d1d8      	bne.n	800a538 <create_chain+0x6c>
 800a586:	2300      	movs	r3, #0
 800a588:	e042      	b.n	800a610 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800a58a:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a58c:	2517      	movs	r5, #23
 800a58e:	197c      	adds	r4, r7, r5
 800a590:	2301      	movs	r3, #1
 800a592:	425a      	negs	r2, r3
 800a594:	69f9      	ldr	r1, [r7, #28]
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	0018      	movs	r0, r3
 800a59a:	f7ff fe23 	bl	800a1e4 <put_fat>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800a5a2:	197b      	adds	r3, r7, r5
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <create_chain+0xf6>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d008      	beq.n	800a5c2 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5b0:	197c      	adds	r4, r7, r5
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	f7ff fe13 	bl	800a1e4 <put_fat>
 800a5be:	0003      	movs	r3, r0
 800a5c0:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a5c2:	2317      	movs	r3, #23
 800a5c4:	18fb      	adds	r3, r7, r3
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d116      	bne.n	800a5fa <create_chain+0x12e>
		fs->last_clst = ncl;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	695a      	ldr	r2, [r3, #20]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	3b02      	subs	r3, #2
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d804      	bhi.n	800a5ea <create_chain+0x11e>
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	1e5a      	subs	r2, r3, #1
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	791b      	ldrb	r3, [r3, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	711a      	strb	r2, [r3, #4]
 800a5f8:	e009      	b.n	800a60e <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a5fa:	2317      	movs	r3, #23
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d102      	bne.n	800a60a <create_chain+0x13e>
 800a604:	2301      	movs	r3, #1
 800a606:	425b      	negs	r3, r3
 800a608:	e000      	b.n	800a60c <create_chain+0x140>
 800a60a:	2301      	movs	r3, #1
 800a60c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a60e:	69fb      	ldr	r3, [r7, #28]
}
 800a610:	0018      	movs	r0, r3
 800a612:	46bd      	mov	sp, r7
 800a614:	b008      	add	sp, #32
 800a616:	bdb0      	pop	{r4, r5, r7, pc}

0800a618 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62c:	3304      	adds	r3, #4
 800a62e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	0a5a      	lsrs	r2, r3, #9
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	895b      	ldrh	r3, [r3, #10]
 800a638:	0019      	movs	r1, r3
 800a63a:	0010      	movs	r0, r2
 800a63c:	f7f5 fd80 	bl	8000140 <__udivsi3>
 800a640:	0003      	movs	r3, r0
 800a642:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	613a      	str	r2, [r7, #16]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <clmt_clust+0x40>
 800a654:	2300      	movs	r3, #0
 800a656:	e010      	b.n	800a67a <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d307      	bcc.n	800a670 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	3304      	adds	r3, #4
 800a66c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a66e:	e7e9      	b.n	800a644 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800a670:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	18d3      	adds	r3, r2, r3
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b006      	add	sp, #24
 800a680:	bd80      	pop	{r7, pc}

0800a682 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	2380      	movs	r3, #128	@ 0x80
 800a696:	039b      	lsls	r3, r3, #14
 800a698:	429a      	cmp	r2, r3
 800a69a:	d203      	bcs.n	800a6a4 <dir_sdi+0x22>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	221f      	movs	r2, #31
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	d001      	beq.n	800a6a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	e066      	b.n	800a776 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <dir_sdi+0x46>
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d902      	bls.n	800a6c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10c      	bne.n	800a6e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	095b      	lsrs	r3, r3, #5
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	8912      	ldrh	r2, [r2, #8]
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d301      	bcc.n	800a6de <dir_sdi+0x5c>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e04b      	b.n	800a776 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	61da      	str	r2, [r3, #28]
 800a6e6:	e02c      	b.n	800a742 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	895b      	ldrh	r3, [r3, #10]
 800a6ec:	025b      	lsls	r3, r3, #9
 800a6ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6f0:	e01a      	b.n	800a728 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	0011      	movs	r1, r2
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f7ff fcc9 	bl	800a090 <get_fat>
 800a6fe:	0003      	movs	r3, r0
 800a700:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	3301      	adds	r3, #1
 800a706:	d101      	bne.n	800a70c <dir_sdi+0x8a>
 800a708:	2301      	movs	r3, #1
 800a70a:	e034      	b.n	800a776 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d904      	bls.n	800a71c <dir_sdi+0x9a>
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d301      	bcc.n	800a720 <dir_sdi+0x9e>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e02a      	b.n	800a776 <dir_sdi+0xf4>
			ofs -= csz;
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d2e0      	bcs.n	800a6f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	0011      	movs	r1, r2
 800a736:	0018      	movs	r0, r3
 800a738:	f7ff fc8e 	bl	800a058 <clust2sect>
 800a73c:	0002      	movs	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <dir_sdi+0xd2>
 800a750:	2302      	movs	r3, #2
 800a752:	e010      	b.n	800a776 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69da      	ldr	r2, [r3, #28]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	0a5b      	lsrs	r3, r3, #9
 800a75c:	18d2      	adds	r2, r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	3334      	adds	r3, #52	@ 0x34
 800a766:	001a      	movs	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	05db      	lsls	r3, r3, #23
 800a76c:	0ddb      	lsrs	r3, r3, #23
 800a76e:	18d2      	adds	r2, r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	0018      	movs	r0, r3
 800a778:	46bd      	mov	sp, r7
 800a77a:	b006      	add	sp, #24
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	3320      	adds	r3, #32
 800a794:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d004      	beq.n	800a7a8 <dir_next+0x2a>
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	2380      	movs	r3, #128	@ 0x80
 800a7a2:	039b      	lsls	r3, r3, #14
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d301      	bcc.n	800a7ac <dir_next+0x2e>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	e0ad      	b.n	800a908 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	05db      	lsls	r3, r3, #23
 800a7b0:	0ddb      	lsrs	r3, r3, #23
 800a7b2:	d000      	beq.n	800a7b6 <dir_next+0x38>
 800a7b4:	e09b      	b.n	800a8ee <dir_next+0x170>
		dp->sect++;				/* Next sector */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	095b      	lsrs	r3, r3, #5
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	8912      	ldrh	r2, [r2, #8]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d200      	bcs.n	800a7d6 <dir_next+0x58>
 800a7d4:	e08b      	b.n	800a8ee <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	61da      	str	r2, [r3, #28]
 800a7dc:	2304      	movs	r3, #4
 800a7de:	e093      	b.n	800a908 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	0a5b      	lsrs	r3, r3, #9
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	3a01      	subs	r2, #1
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	d000      	beq.n	800a7f0 <dir_next+0x72>
 800a7ee:	e07e      	b.n	800a8ee <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	0019      	movs	r1, r3
 800a7f8:	0010      	movs	r0, r2
 800a7fa:	f7ff fc49 	bl	800a090 <get_fat>
 800a7fe:	0003      	movs	r3, r0
 800a800:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d801      	bhi.n	800a80c <dir_next+0x8e>
 800a808:	2302      	movs	r3, #2
 800a80a:	e07d      	b.n	800a908 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3301      	adds	r3, #1
 800a810:	d101      	bne.n	800a816 <dir_next+0x98>
 800a812:	2301      	movs	r3, #1
 800a814:	e078      	b.n	800a908 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d35a      	bcc.n	800a8d6 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d104      	bne.n	800a830 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	61da      	str	r2, [r3, #28]
 800a82c:	2304      	movs	r3, #4
 800a82e:	e06b      	b.n	800a908 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	0019      	movs	r1, r3
 800a838:	0010      	movs	r0, r2
 800a83a:	f7ff fe47 	bl	800a4cc <create_chain>
 800a83e:	0003      	movs	r3, r0
 800a840:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <dir_next+0xce>
 800a848:	2307      	movs	r3, #7
 800a84a:	e05d      	b.n	800a908 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <dir_next+0xd8>
 800a852:	2302      	movs	r3, #2
 800a854:	e058      	b.n	800a908 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	3301      	adds	r3, #1
 800a85a:	d101      	bne.n	800a860 <dir_next+0xe2>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e053      	b.n	800a908 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	0018      	movs	r0, r3
 800a864:	f7ff fafe 	bl	8009e64 <sync_window>
 800a868:	1e03      	subs	r3, r0, #0
 800a86a:	d001      	beq.n	800a870 <dir_next+0xf2>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e04b      	b.n	800a908 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3334      	adds	r3, #52	@ 0x34
 800a874:	2280      	movs	r2, #128	@ 0x80
 800a876:	0092      	lsls	r2, r2, #2
 800a878:	2100      	movs	r1, #0
 800a87a:	0018      	movs	r0, r3
 800a87c:	f7ff f8fd 	bl	8009a7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	0011      	movs	r1, r2
 800a88a:	0018      	movs	r0, r3
 800a88c:	f7ff fbe4 	bl	800a058 <clust2sect>
 800a890:	0002      	movs	r2, r0
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	631a      	str	r2, [r3, #48]	@ 0x30
 800a896:	e012      	b.n	800a8be <dir_next+0x140>
						fs->wflag = 1;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f7ff fadf 	bl	8009e64 <sync_window>
 800a8a6:	1e03      	subs	r3, r0, #0
 800a8a8:	d001      	beq.n	800a8ae <dir_next+0x130>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e02c      	b.n	800a908 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	895b      	ldrh	r3, [r3, #10]
 800a8c2:	001a      	movs	r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d3e6      	bcc.n	800a898 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	1ad2      	subs	r2, r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	0011      	movs	r1, r2
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	f7ff fbb8 	bl	800a058 <clust2sect>
 800a8e8:	0002      	movs	r2, r0
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3334      	adds	r3, #52	@ 0x34
 800a8f8:	001a      	movs	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	05db      	lsls	r3, r3, #23
 800a8fe:	0ddb      	lsrs	r3, r3, #23
 800a900:	18d2      	adds	r2, r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	0018      	movs	r0, r3
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b006      	add	sp, #24
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a910:	b5b0      	push	{r4, r5, r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a920:	2517      	movs	r5, #23
 800a922:	197c      	adds	r4, r7, r5
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2100      	movs	r1, #0
 800a928:	0018      	movs	r0, r3
 800a92a:	f7ff feaa 	bl	800a682 <dir_sdi>
 800a92e:	0003      	movs	r3, r0
 800a930:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a932:	197b      	adds	r3, r7, r5
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d133      	bne.n	800a9a2 <dir_alloc+0x92>
		n = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69da      	ldr	r2, [r3, #28]
 800a942:	2517      	movs	r5, #23
 800a944:	197c      	adds	r4, r7, r5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	0011      	movs	r1, r2
 800a94a:	0018      	movs	r0, r3
 800a94c:	f7ff fad2 	bl	8009ef4 <move_window>
 800a950:	0003      	movs	r3, r0
 800a952:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a954:	197b      	adds	r3, r7, r5
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d121      	bne.n	800a9a0 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2be5      	cmp	r3, #229	@ 0xe5
 800a964:	d004      	beq.n	800a970 <dir_alloc+0x60>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d107      	bne.n	800a980 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	3301      	adds	r3, #1
 800a974:	613b      	str	r3, [r7, #16]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d102      	bne.n	800a984 <dir_alloc+0x74>
 800a97e:	e010      	b.n	800a9a2 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a980:	2300      	movs	r3, #0
 800a982:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a984:	2517      	movs	r5, #23
 800a986:	197c      	adds	r4, r7, r5
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2101      	movs	r1, #1
 800a98c:	0018      	movs	r0, r3
 800a98e:	f7ff fef6 	bl	800a77e <dir_next>
 800a992:	0003      	movs	r3, r0
 800a994:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a996:	197b      	adds	r3, r7, r5
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0cf      	beq.n	800a93e <dir_alloc+0x2e>
 800a99e:	e000      	b.n	800a9a2 <dir_alloc+0x92>
			if (res != FR_OK) break;
 800a9a0:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9a2:	2217      	movs	r2, #23
 800a9a4:	18bb      	adds	r3, r7, r2
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d102      	bne.n	800a9b2 <dir_alloc+0xa2>
 800a9ac:	18bb      	adds	r3, r7, r2
 800a9ae:	2207      	movs	r2, #7
 800a9b0:	701a      	strb	r2, [r3, #0]
	return res;
 800a9b2:	2317      	movs	r3, #23
 800a9b4:	18fb      	adds	r3, r7, r3
 800a9b6:	781b      	ldrb	r3, [r3, #0]
}
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	b006      	add	sp, #24
 800a9be:	bdb0      	pop	{r4, r5, r7, pc}

0800a9c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	331a      	adds	r3, #26
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f7fe ffb0 	bl	8009934 <ld_word>
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d109      	bne.n	800a9f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	3314      	adds	r3, #20
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f7fe ffa5 	bl	8009934 <ld_word>
 800a9ea:	0003      	movs	r3, r0
 800a9ec:	041b      	lsls	r3, r3, #16
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
}
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	b004      	add	sp, #16
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	331a      	adds	r3, #26
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	b292      	uxth	r2, r2
 800aa12:	0011      	movs	r1, r2
 800aa14:	0018      	movs	r0, r3
 800aa16:	f7fe ffc9 	bl	80099ac <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d109      	bne.n	800aa36 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	3314      	adds	r3, #20
 800aa26:	001a      	movs	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	0c1b      	lsrs	r3, r3, #16
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	0019      	movs	r1, r3
 800aa30:	0010      	movs	r0, r2
 800aa32:	f7fe ffbb 	bl	80099ac <st_word>
	}
}
 800aa36:	46c0      	nop			@ (mov r8, r8)
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	b004      	add	sp, #16
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aa3e:	b5b0      	push	{r4, r5, r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aa48:	2317      	movs	r3, #23
 800aa4a:	18fb      	adds	r3, r7, r3
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	701a      	strb	r2, [r3, #0]
	FATFS *fs = dp->obj.fs;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aa56:	e051      	b.n	800aafc <dir_read+0xbe>
		res = move_window(fs, dp->sect);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	2517      	movs	r5, #23
 800aa5e:	197c      	adds	r4, r7, r5
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	0011      	movs	r1, r2
 800aa64:	0018      	movs	r0, r3
 800aa66:	f7ff fa45 	bl	8009ef4 <move_window>
 800aa6a:	0003      	movs	r3, r0
 800aa6c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800aa6e:	0029      	movs	r1, r5
 800aa70:	187b      	adds	r3, r7, r1
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d146      	bne.n	800ab06 <dir_read+0xc8>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1a      	ldr	r2, [r3, #32]
 800aa7c:	200f      	movs	r0, #15
 800aa7e:	183b      	adds	r3, r7, r0
 800aa80:	7812      	ldrb	r2, [r2, #0]
 800aa82:	701a      	strb	r2, [r3, #0]
		if (c == 0) {
 800aa84:	183b      	adds	r3, r7, r0
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d103      	bne.n	800aa94 <dir_read+0x56>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aa8c:	187b      	adds	r3, r7, r1
 800aa8e:	2204      	movs	r2, #4
 800aa90:	701a      	strb	r2, [r3, #0]
 800aa92:	e03d      	b.n	800ab10 <dir_read+0xd2>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a1b      	ldr	r3, [r3, #32]
 800aa98:	330b      	adds	r3, #11
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	200e      	movs	r0, #14
 800aa9e:	183b      	adds	r3, r7, r0
 800aaa0:	213f      	movs	r1, #63	@ 0x3f
 800aaa2:	400a      	ands	r2, r1
 800aaa4:	701a      	strb	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	0001      	movs	r1, r0
 800aaaa:	187a      	adds	r2, r7, r1
 800aaac:	7812      	ldrb	r2, [r2, #0]
 800aaae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800aab0:	220f      	movs	r2, #15
 800aab2:	18bb      	adds	r3, r7, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2be5      	cmp	r3, #229	@ 0xe5
 800aab8:	d013      	beq.n	800aae2 <dir_read+0xa4>
 800aaba:	18bb      	adds	r3, r7, r2
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac0:	d00f      	beq.n	800aae2 <dir_read+0xa4>
 800aac2:	187b      	adds	r3, r7, r1
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d00b      	beq.n	800aae2 <dir_read+0xa4>
 800aaca:	187b      	adds	r3, r7, r1
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2220      	movs	r2, #32
 800aad0:	4393      	bics	r3, r2
 800aad2:	3b08      	subs	r3, #8
 800aad4:	425a      	negs	r2, r3
 800aad6:	4153      	adcs	r3, r2
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	001a      	movs	r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d013      	beq.n	800ab0a <dir_read+0xcc>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aae2:	2517      	movs	r5, #23
 800aae4:	197c      	adds	r4, r7, r5
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2100      	movs	r1, #0
 800aaea:	0018      	movs	r0, r3
 800aaec:	f7ff fe47 	bl	800a77e <dir_next>
 800aaf0:	0003      	movs	r3, r0
 800aaf2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800aaf4:	197b      	adds	r3, r7, r5
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d108      	bne.n	800ab0e <dir_read+0xd0>
	while (dp->sect) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1a9      	bne.n	800aa58 <dir_read+0x1a>
 800ab04:	e004      	b.n	800ab10 <dir_read+0xd2>
		if (res != FR_OK) break;
 800ab06:	46c0      	nop			@ (mov r8, r8)
 800ab08:	e002      	b.n	800ab10 <dir_read+0xd2>
				break;
 800ab0a:	46c0      	nop			@ (mov r8, r8)
 800ab0c:	e000      	b.n	800ab10 <dir_read+0xd2>
		if (res != FR_OK) break;
 800ab0e:	46c0      	nop			@ (mov r8, r8)
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ab10:	2317      	movs	r3, #23
 800ab12:	18fb      	adds	r3, r7, r3
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <dir_read+0xe2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	61da      	str	r2, [r3, #28]
	return res;
 800ab20:	2317      	movs	r3, #23
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	781b      	ldrb	r3, [r3, #0]
}
 800ab26:	0018      	movs	r0, r3
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	b006      	add	sp, #24
 800ab2c:	bdb0      	pop	{r4, r5, r7, pc}

0800ab2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab2e:	b5b0      	push	{r4, r5, r7, lr}
 800ab30:	b086      	sub	sp, #24
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab3c:	2517      	movs	r5, #23
 800ab3e:	197c      	adds	r4, r7, r5
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2100      	movs	r1, #0
 800ab44:	0018      	movs	r0, r3
 800ab46:	f7ff fd9c 	bl	800a682 <dir_sdi>
 800ab4a:	0003      	movs	r3, r0
 800ab4c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800ab4e:	197b      	adds	r3, r7, r5
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <dir_find+0x2e>
 800ab56:	197b      	adds	r3, r7, r5
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	e04c      	b.n	800abf6 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	69da      	ldr	r2, [r3, #28]
 800ab60:	2517      	movs	r5, #23
 800ab62:	197c      	adds	r4, r7, r5
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	0011      	movs	r1, r2
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f7ff f9c3 	bl	8009ef4 <move_window>
 800ab6e:	0003      	movs	r3, r0
 800ab70:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800ab72:	0029      	movs	r1, r5
 800ab74:	187b      	adds	r3, r7, r1
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d136      	bne.n	800abea <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a1a      	ldr	r2, [r3, #32]
 800ab80:	200f      	movs	r0, #15
 800ab82:	183b      	adds	r3, r7, r0
 800ab84:	7812      	ldrb	r2, [r2, #0]
 800ab86:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab88:	183b      	adds	r3, r7, r0
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <dir_find+0x6a>
 800ab90:	187b      	adds	r3, r7, r1
 800ab92:	2204      	movs	r2, #4
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	e02b      	b.n	800abf0 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a1b      	ldr	r3, [r3, #32]
 800ab9c:	330b      	adds	r3, #11
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	223f      	movs	r2, #63	@ 0x3f
 800aba2:	4013      	ands	r3, r2
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	330b      	adds	r3, #11
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	001a      	movs	r2, r3
 800abb4:	2308      	movs	r3, #8
 800abb6:	4013      	ands	r3, r2
 800abb8:	d109      	bne.n	800abce <dir_find+0xa0>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a18      	ldr	r0, [r3, #32]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3324      	adds	r3, #36	@ 0x24
 800abc2:	220b      	movs	r2, #11
 800abc4:	0019      	movs	r1, r3
 800abc6:	f7fe ff71 	bl	8009aac <mem_cmp>
 800abca:	1e03      	subs	r3, r0, #0
 800abcc:	d00f      	beq.n	800abee <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800abce:	2517      	movs	r5, #23
 800abd0:	197c      	adds	r4, r7, r5
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2100      	movs	r1, #0
 800abd6:	0018      	movs	r0, r3
 800abd8:	f7ff fdd1 	bl	800a77e <dir_next>
 800abdc:	0003      	movs	r3, r0
 800abde:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800abe0:	197b      	adds	r3, r7, r5
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d0b9      	beq.n	800ab5c <dir_find+0x2e>
 800abe8:	e002      	b.n	800abf0 <dir_find+0xc2>
		if (res != FR_OK) break;
 800abea:	46c0      	nop			@ (mov r8, r8)
 800abec:	e000      	b.n	800abf0 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abee:	46c0      	nop			@ (mov r8, r8)

	return res;
 800abf0:	2317      	movs	r3, #23
 800abf2:	18fb      	adds	r3, r7, r3
 800abf4:	781b      	ldrb	r3, [r3, #0]
}
 800abf6:	0018      	movs	r0, r3
 800abf8:	46bd      	mov	sp, r7
 800abfa:	b006      	add	sp, #24
 800abfc:	bdb0      	pop	{r4, r5, r7, pc}

0800abfe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800abfe:	b5b0      	push	{r4, r5, r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac0c:	250f      	movs	r5, #15
 800ac0e:	197c      	adds	r4, r7, r5
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2101      	movs	r1, #1
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7ff fe7b 	bl	800a910 <dir_alloc>
 800ac1a:	0003      	movs	r3, r0
 800ac1c:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac1e:	197b      	adds	r3, r7, r5
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d11f      	bne.n	800ac66 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69da      	ldr	r2, [r3, #28]
 800ac2a:	197c      	adds	r4, r7, r5
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	0011      	movs	r1, r2
 800ac30:	0018      	movs	r0, r3
 800ac32:	f7ff f95f 	bl	8009ef4 <move_window>
 800ac36:	0003      	movs	r3, r0
 800ac38:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800ac3a:	197b      	adds	r3, r7, r5
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d111      	bne.n	800ac66 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	2220      	movs	r2, #32
 800ac48:	2100      	movs	r1, #0
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7fe ff15 	bl	8009a7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a18      	ldr	r0, [r3, #32]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3324      	adds	r3, #36	@ 0x24
 800ac58:	220b      	movs	r2, #11
 800ac5a:	0019      	movs	r1, r3
 800ac5c:	f7fe feee 	bl	8009a3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2201      	movs	r2, #1
 800ac64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac66:	230f      	movs	r3, #15
 800ac68:	18fb      	adds	r3, r7, r3
 800ac6a:	781b      	ldrb	r3, [r3, #0]
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b004      	add	sp, #16
 800ac72:	bdb0      	pop	{r4, r5, r7, pc}

0800ac74 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ac74:	b5b0      	push	{r4, r5, r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	69da      	ldr	r2, [r3, #28]
 800ac86:	250b      	movs	r5, #11
 800ac88:	197c      	adds	r4, r7, r5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	0011      	movs	r1, r2
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f7ff f930 	bl	8009ef4 <move_window>
 800ac94:	0003      	movs	r3, r0
 800ac96:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800ac98:	197b      	adds	r3, r7, r5
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <dir_remove+0x3a>
		dp->dir[DIR_Name] = DDEM;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	22e5      	movs	r2, #229	@ 0xe5
 800aca6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2201      	movs	r2, #1
 800acac:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800acae:	230b      	movs	r3, #11
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	781b      	ldrb	r3, [r3, #0]
}
 800acb4:	0018      	movs	r0, r3
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b004      	add	sp, #16
 800acba:	bdb0      	pop	{r4, r5, r7, pc}

0800acbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3324      	adds	r3, #36	@ 0x24
 800acd0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	220b      	movs	r2, #11
 800acd6:	2120      	movs	r1, #32
 800acd8:	0018      	movs	r0, r3
 800acda:	f7fe fece 	bl	8009a7a <mem_set>
	si = i = 0; ni = 8;
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	61fb      	str	r3, [r7, #28]
 800ace6:	2308      	movs	r3, #8
 800ace8:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	61fa      	str	r2, [r7, #28]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	18d2      	adds	r2, r2, r3
 800acf4:	211b      	movs	r1, #27
 800acf6:	187b      	adds	r3, r7, r1
 800acf8:	7812      	ldrb	r2, [r2, #0]
 800acfa:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acfc:	000a      	movs	r2, r1
 800acfe:	18bb      	adds	r3, r7, r2
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	d800      	bhi.n	800ad08 <create_name+0x4c>
 800ad06:	e062      	b.n	800adce <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad08:	18bb      	adds	r3, r7, r2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad0e:	d007      	beq.n	800ad20 <create_name+0x64>
 800ad10:	18bb      	adds	r3, r7, r2
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad16:	d110      	bne.n	800ad3a <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad18:	e002      	b.n	800ad20 <create_name+0x64>
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	18d3      	adds	r3, r2, r3
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad2a:	d0f6      	beq.n	800ad1a <create_name+0x5e>
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	18d3      	adds	r3, r2, r3
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad36:	d0f0      	beq.n	800ad1a <create_name+0x5e>
			break;
 800ad38:	e04a      	b.n	800add0 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad3a:	231b      	movs	r3, #27
 800ad3c:	18fb      	adds	r3, r7, r3
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad42:	d003      	beq.n	800ad4c <create_name+0x90>
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d30e      	bcc.n	800ad6a <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b0b      	cmp	r3, #11
 800ad50:	d004      	beq.n	800ad5c <create_name+0xa0>
 800ad52:	231b      	movs	r3, #27
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad5a:	d001      	beq.n	800ad60 <create_name+0xa4>
 800ad5c:	2306      	movs	r3, #6
 800ad5e:	e054      	b.n	800ae0a <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 800ad60:	2308      	movs	r3, #8
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	230b      	movs	r3, #11
 800ad66:	617b      	str	r3, [r7, #20]
			continue;
 800ad68:	e030      	b.n	800adcc <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad6a:	211b      	movs	r1, #27
 800ad6c:	187b      	adds	r3, r7, r1
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b25b      	sxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	da07      	bge.n	800ad86 <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad76:	187b      	adds	r3, r7, r1
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	3b80      	subs	r3, #128	@ 0x80
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	187b      	adds	r3, r7, r1
 800ad80:	4924      	ldr	r1, [pc, #144]	@ (800ae14 <create_name+0x158>)
 800ad82:	5c8a      	ldrb	r2, [r1, r2]
 800ad84:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad86:	231b      	movs	r3, #27
 800ad88:	18fb      	adds	r3, r7, r3
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	4b22      	ldr	r3, [pc, #136]	@ (800ae18 <create_name+0x15c>)
 800ad8e:	0011      	movs	r1, r2
 800ad90:	0018      	movs	r0, r3
 800ad92:	f7fe feb0 	bl	8009af6 <chk_chr>
 800ad96:	1e03      	subs	r3, r0, #0
 800ad98:	d001      	beq.n	800ad9e <create_name+0xe2>
 800ad9a:	2306      	movs	r3, #6
 800ad9c:	e035      	b.n	800ae0a <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad9e:	221b      	movs	r2, #27
 800ada0:	18bb      	adds	r3, r7, r2
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b60      	cmp	r3, #96	@ 0x60
 800ada6:	d908      	bls.n	800adba <create_name+0xfe>
 800ada8:	18bb      	adds	r3, r7, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b7a      	cmp	r3, #122	@ 0x7a
 800adae:	d804      	bhi.n	800adba <create_name+0xfe>
 800adb0:	18bb      	adds	r3, r7, r2
 800adb2:	18ba      	adds	r2, r7, r2
 800adb4:	7812      	ldrb	r2, [r2, #0]
 800adb6:	3a20      	subs	r2, #32
 800adb8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	1c5a      	adds	r2, r3, #1
 800adbe:	613a      	str	r2, [r7, #16]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	18d3      	adds	r3, r2, r3
 800adc4:	221b      	movs	r2, #27
 800adc6:	18ba      	adds	r2, r7, r2
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800adcc:	e78d      	b.n	800acea <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800adce:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	18d2      	adds	r2, r2, r3
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <create_name+0x128>
 800ade0:	2306      	movs	r3, #6
 800ade2:	e012      	b.n	800ae0a <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2be5      	cmp	r3, #229	@ 0xe5
 800adea:	d102      	bne.n	800adf2 <create_name+0x136>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2205      	movs	r2, #5
 800adf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800adf2:	231b      	movs	r3, #27
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d801      	bhi.n	800ae00 <create_name+0x144>
 800adfc:	2204      	movs	r2, #4
 800adfe:	e000      	b.n	800ae02 <create_name+0x146>
 800ae00:	2200      	movs	r2, #0
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	330b      	adds	r3, #11
 800ae06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ae08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b008      	add	sp, #32
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	46c0      	nop			@ (mov r8, r8)
 800ae14:	08013b28 	.word	0x08013b28
 800ae18:	080139b4 	.word	0x080139b4

0800ae1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae1c:	b5b0      	push	{r4, r5, r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae30:	e002      	b.n	800ae38 <follow_path+0x1c>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae3e:	d0f8      	beq.n	800ae32 <follow_path+0x16>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae46:	d0f4      	beq.n	800ae32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b1f      	cmp	r3, #31
 800ae54:	d80d      	bhi.n	800ae72 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	222f      	movs	r2, #47	@ 0x2f
 800ae5a:	2180      	movs	r1, #128	@ 0x80
 800ae5c:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800ae5e:	2317      	movs	r3, #23
 800ae60:	18fc      	adds	r4, r7, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2100      	movs	r1, #0
 800ae66:	0018      	movs	r0, r3
 800ae68:	f7ff fc0b 	bl	800a682 <dir_sdi>
 800ae6c:	0003      	movs	r3, r0
 800ae6e:	7023      	strb	r3, [r4, #0]
 800ae70:	e052      	b.n	800af18 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae72:	2517      	movs	r5, #23
 800ae74:	197c      	adds	r4, r7, r5
 800ae76:	003a      	movs	r2, r7
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0011      	movs	r1, r2
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f7ff ff1d 	bl	800acbc <create_name>
 800ae82:	0003      	movs	r3, r0
 800ae84:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800ae86:	197b      	adds	r3, r7, r5
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d13f      	bne.n	800af0e <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae8e:	197c      	adds	r4, r7, r5
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	0018      	movs	r0, r3
 800ae94:	f7ff fe4b 	bl	800ab2e <dir_find>
 800ae98:	0003      	movs	r3, r0
 800ae9a:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800ae9c:	200b      	movs	r0, #11
 800ae9e:	183b      	adds	r3, r7, r0
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	212f      	movs	r1, #47	@ 0x2f
 800aea4:	5c52      	ldrb	r2, [r2, r1]
 800aea6:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800aea8:	197b      	adds	r3, r7, r5
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00c      	beq.n	800aeca <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aeb0:	197b      	adds	r3, r7, r5
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d12c      	bne.n	800af12 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aeb8:	183b      	adds	r3, r7, r0
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2204      	movs	r2, #4
 800aebe:	4013      	ands	r3, r2
 800aec0:	d127      	bne.n	800af12 <follow_path+0xf6>
 800aec2:	197b      	adds	r3, r7, r5
 800aec4:	2205      	movs	r2, #5
 800aec6:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800aec8:	e023      	b.n	800af12 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aeca:	230b      	movs	r3, #11
 800aecc:	18fb      	adds	r3, r7, r3
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2204      	movs	r2, #4
 800aed2:	4013      	ands	r3, r2
 800aed4:	d11f      	bne.n	800af16 <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	799b      	ldrb	r3, [r3, #6]
 800aeda:	001a      	movs	r2, r3
 800aedc:	2310      	movs	r3, #16
 800aede:	4013      	ands	r3, r2
 800aee0:	d104      	bne.n	800aeec <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800aee2:	2317      	movs	r3, #23
 800aee4:	18fb      	adds	r3, r7, r3
 800aee6:	2205      	movs	r2, #5
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	e015      	b.n	800af18 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3334      	adds	r3, #52	@ 0x34
 800aef0:	001a      	movs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	05db      	lsls	r3, r3, #23
 800aef8:	0ddb      	lsrs	r3, r3, #23
 800aefa:	18d2      	adds	r2, r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	0011      	movs	r1, r2
 800af00:	0018      	movs	r0, r3
 800af02:	f7ff fd5d 	bl	800a9c0 <ld_clust>
 800af06:	0002      	movs	r2, r0
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af0c:	e7b1      	b.n	800ae72 <follow_path+0x56>
			if (res != FR_OK) break;
 800af0e:	46c0      	nop			@ (mov r8, r8)
 800af10:	e002      	b.n	800af18 <follow_path+0xfc>
				break;
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	e000      	b.n	800af18 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af16:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 800af18:	2317      	movs	r3, #23
 800af1a:	18fb      	adds	r3, r7, r3
 800af1c:	781b      	ldrb	r3, [r3, #0]
}
 800af1e:	0018      	movs	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	b006      	add	sp, #24
 800af24:	bdb0      	pop	{r4, r5, r7, pc}

0800af26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b086      	sub	sp, #24
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af2e:	2301      	movs	r3, #1
 800af30:	425b      	negs	r3, r3
 800af32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d031      	beq.n	800afa0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	e002      	b.n	800af4a <get_ldnumber+0x24>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3301      	adds	r3, #1
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d903      	bls.n	800af5a <get_ldnumber+0x34>
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2b3a      	cmp	r3, #58	@ 0x3a
 800af58:	d1f4      	bne.n	800af44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b3a      	cmp	r3, #58	@ 0x3a
 800af60:	d11c      	bne.n	800af9c <get_ldnumber+0x76>
			tp = *path;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	60fa      	str	r2, [r7, #12]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	3b30      	subs	r3, #48	@ 0x30
 800af72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b09      	cmp	r3, #9
 800af78:	d80e      	bhi.n	800af98 <get_ldnumber+0x72>
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d10a      	bne.n	800af98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d107      	bne.n	800af98 <get_ldnumber+0x72>
					vol = (int)i;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	3301      	adds	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	e002      	b.n	800afa2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af9c:	2300      	movs	r3, #0
 800af9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afa0:	693b      	ldr	r3, [r7, #16]
}
 800afa2:	0018      	movs	r0, r3
 800afa4:	46bd      	mov	sp, r7
 800afa6:	b006      	add	sp, #24
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	70da      	strb	r2, [r3, #3]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	4252      	negs	r2, r2
 800afc2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	0011      	movs	r1, r2
 800afca:	0018      	movs	r0, r3
 800afcc:	f7fe ff92 	bl	8009ef4 <move_window>
 800afd0:	1e03      	subs	r3, r0, #0
 800afd2:	d001      	beq.n	800afd8 <check_fs+0x2c>
 800afd4:	2304      	movs	r3, #4
 800afd6:	e037      	b.n	800b048 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3334      	adds	r3, #52	@ 0x34
 800afdc:	33ff      	adds	r3, #255	@ 0xff
 800afde:	33ff      	adds	r3, #255	@ 0xff
 800afe0:	0018      	movs	r0, r3
 800afe2:	f7fe fca7 	bl	8009934 <ld_word>
 800afe6:	0003      	movs	r3, r0
 800afe8:	001a      	movs	r2, r3
 800afea:	4b19      	ldr	r3, [pc, #100]	@ (800b050 <check_fs+0xa4>)
 800afec:	429a      	cmp	r2, r3
 800afee:	d001      	beq.n	800aff4 <check_fs+0x48>
 800aff0:	2303      	movs	r3, #3
 800aff2:	e029      	b.n	800b048 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2234      	movs	r2, #52	@ 0x34
 800aff8:	5c9b      	ldrb	r3, [r3, r2]
 800affa:	2be9      	cmp	r3, #233	@ 0xe9
 800affc:	d009      	beq.n	800b012 <check_fs+0x66>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2234      	movs	r2, #52	@ 0x34
 800b002:	5c9b      	ldrb	r3, [r3, r2]
 800b004:	2beb      	cmp	r3, #235	@ 0xeb
 800b006:	d11e      	bne.n	800b046 <check_fs+0x9a>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2236      	movs	r2, #54	@ 0x36
 800b00c:	5c9b      	ldrb	r3, [r3, r2]
 800b00e:	2b90      	cmp	r3, #144	@ 0x90
 800b010:	d119      	bne.n	800b046 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3334      	adds	r3, #52	@ 0x34
 800b016:	3336      	adds	r3, #54	@ 0x36
 800b018:	0018      	movs	r0, r3
 800b01a:	f7fe fca6 	bl	800996a <ld_dword>
 800b01e:	0003      	movs	r3, r0
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	0a1b      	lsrs	r3, r3, #8
 800b024:	4a0b      	ldr	r2, [pc, #44]	@ (800b054 <check_fs+0xa8>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d101      	bne.n	800b02e <check_fs+0x82>
 800b02a:	2300      	movs	r3, #0
 800b02c:	e00c      	b.n	800b048 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3334      	adds	r3, #52	@ 0x34
 800b032:	3352      	adds	r3, #82	@ 0x52
 800b034:	0018      	movs	r0, r3
 800b036:	f7fe fc98 	bl	800996a <ld_dword>
 800b03a:	0003      	movs	r3, r0
 800b03c:	4a06      	ldr	r2, [pc, #24]	@ (800b058 <check_fs+0xac>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d101      	bne.n	800b046 <check_fs+0x9a>
 800b042:	2300      	movs	r3, #0
 800b044:	e000      	b.n	800b048 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b046:	2302      	movs	r3, #2
}
 800b048:	0018      	movs	r0, r3
 800b04a:	46bd      	mov	sp, r7
 800b04c:	b002      	add	sp, #8
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	0000aa55 	.word	0x0000aa55
 800b054:	00544146 	.word	0x00544146
 800b058:	33544146 	.word	0x33544146

0800b05c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b05c:	b5b0      	push	{r4, r5, r7, lr}
 800b05e:	b096      	sub	sp, #88	@ 0x58
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	1dfb      	adds	r3, r7, #7
 800b068:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	0018      	movs	r0, r3
 800b074:	f7ff ff57 	bl	800af26 <get_ldnumber>
 800b078:	0003      	movs	r3, r0
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da01      	bge.n	800b086 <find_volume+0x2a>
 800b082:	230b      	movs	r3, #11
 800b084:	e250      	b.n	800b528 <find_volume+0x4cc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b086:	4bb6      	ldr	r3, [pc, #728]	@ (800b360 <find_volume+0x304>)
 800b088:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	58d3      	ldr	r3, [r2, r3]
 800b08e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <find_volume+0x3e>
 800b096:	230c      	movs	r3, #12
 800b098:	e246      	b.n	800b528 <find_volume+0x4cc>

	ENTER_FF(fs);						/* Lock the volume */
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	0018      	movs	r0, r3
 800b09e:	f7fe fd43 	bl	8009b28 <lock_fs>
 800b0a2:	1e03      	subs	r3, r0, #0
 800b0a4:	d101      	bne.n	800b0aa <find_volume+0x4e>
 800b0a6:	230f      	movs	r3, #15
 800b0a8:	e23e      	b.n	800b528 <find_volume+0x4cc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0b0:	1dfb      	adds	r3, r7, #7
 800b0b2:	1dfa      	adds	r2, r7, #7
 800b0b4:	7812      	ldrb	r2, [r2, #0]
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	438a      	bics	r2, r1
 800b0ba:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01b      	beq.n	800b0fc <find_volume+0xa0>
		stat = disk_status(fs->drv);
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2537      	movs	r5, #55	@ 0x37
 800b0ca:	197c      	adds	r4, r7, r5
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	f7fe fb67 	bl	80097a0 <disk_status>
 800b0d2:	0003      	movs	r3, r0
 800b0d4:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b0d6:	0029      	movs	r1, r5
 800b0d8:	187b      	adds	r3, r7, r1
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	4013      	ands	r3, r2
 800b0e0:	d10c      	bne.n	800b0fc <find_volume+0xa0>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0e2:	1dfb      	adds	r3, r7, #7
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <find_volume+0x9c>
 800b0ea:	187b      	adds	r3, r7, r1
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2204      	movs	r2, #4
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	d001      	beq.n	800b0f8 <find_volume+0x9c>
				return FR_WRITE_PROTECTED;
 800b0f4:	230a      	movs	r3, #10
 800b0f6:	e217      	b.n	800b528 <find_volume+0x4cc>
			}
			return FR_OK;				/* The file system object is valid */
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e215      	b.n	800b528 <find_volume+0x4cc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b104:	b2da      	uxtb	r2, r3
 800b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b108:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	785b      	ldrb	r3, [r3, #1]
 800b10e:	2537      	movs	r5, #55	@ 0x37
 800b110:	197c      	adds	r4, r7, r5
 800b112:	0018      	movs	r0, r3
 800b114:	f7fe fb66 	bl	80097e4 <disk_initialize>
 800b118:	0003      	movs	r3, r0
 800b11a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b11c:	197b      	adds	r3, r7, r5
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2201      	movs	r2, #1
 800b122:	4013      	ands	r3, r2
 800b124:	d001      	beq.n	800b12a <find_volume+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b126:	2303      	movs	r3, #3
 800b128:	e1fe      	b.n	800b528 <find_volume+0x4cc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b12a:	1dfb      	adds	r3, r7, #7
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d007      	beq.n	800b142 <find_volume+0xe6>
 800b132:	2337      	movs	r3, #55	@ 0x37
 800b134:	18fb      	adds	r3, r7, r3
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2204      	movs	r2, #4
 800b13a:	4013      	ands	r3, r2
 800b13c:	d001      	beq.n	800b142 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 800b13e:	230a      	movs	r3, #10
 800b140:	e1f2      	b.n	800b528 <find_volume+0x4cc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b146:	2557      	movs	r5, #87	@ 0x57
 800b148:	197c      	adds	r4, r7, r5
 800b14a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	0011      	movs	r1, r2
 800b150:	0018      	movs	r0, r3
 800b152:	f7ff ff2b 	bl	800afac <check_fs>
 800b156:	0003      	movs	r3, r0
 800b158:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b15a:	197b      	adds	r3, r7, r5
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d14b      	bne.n	800b1fa <find_volume+0x19e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b162:	2300      	movs	r3, #0
 800b164:	643b      	str	r3, [r7, #64]	@ 0x40
 800b166:	e01d      	b.n	800b1a4 <find_volume+0x148>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	3334      	adds	r3, #52	@ 0x34
 800b16c:	001a      	movs	r2, r3
 800b16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b170:	011b      	lsls	r3, r3, #4
 800b172:	33bf      	adds	r3, #191	@ 0xbf
 800b174:	33ff      	adds	r3, #255	@ 0xff
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	3304      	adds	r3, #4
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <find_volume+0x136>
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	3308      	adds	r3, #8
 800b188:	0018      	movs	r0, r3
 800b18a:	f7fe fbee 	bl	800996a <ld_dword>
 800b18e:	0003      	movs	r3, r0
 800b190:	e000      	b.n	800b194 <find_volume+0x138>
 800b192:	2300      	movs	r3, #0
 800b194:	2214      	movs	r2, #20
 800b196:	18ba      	adds	r2, r7, r2
 800b198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b19a:	0089      	lsls	r1, r1, #2
 800b19c:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d9de      	bls.n	800b168 <find_volume+0x10c>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b1ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <find_volume+0x15e>
 800b1b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b1ba:	2314      	movs	r3, #20
 800b1bc:	18fb      	adds	r3, r7, r3
 800b1be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1c0:	0092      	lsls	r2, r2, #2
 800b1c2:	58d3      	ldr	r3, [r2, r3]
 800b1c4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d008      	beq.n	800b1de <find_volume+0x182>
 800b1cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d0:	0011      	movs	r1, r2
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f7ff feea 	bl	800afac <check_fs>
 800b1d8:	0003      	movs	r3, r0
 800b1da:	001a      	movs	r2, r3
 800b1dc:	e000      	b.n	800b1e0 <find_volume+0x184>
 800b1de:	2203      	movs	r2, #3
 800b1e0:	2157      	movs	r1, #87	@ 0x57
 800b1e2:	187b      	adds	r3, r7, r1
 800b1e4:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1e6:	187b      	adds	r3, r7, r1
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d905      	bls.n	800b1fa <find_volume+0x19e>
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d9df      	bls.n	800b1ba <find_volume+0x15e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1fa:	2357      	movs	r3, #87	@ 0x57
 800b1fc:	18fb      	adds	r3, r7, r3
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b04      	cmp	r3, #4
 800b202:	d101      	bne.n	800b208 <find_volume+0x1ac>
 800b204:	2301      	movs	r3, #1
 800b206:	e18f      	b.n	800b528 <find_volume+0x4cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b208:	2357      	movs	r3, #87	@ 0x57
 800b20a:	18fb      	adds	r3, r7, r3
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d901      	bls.n	800b216 <find_volume+0x1ba>
 800b212:	230d      	movs	r3, #13
 800b214:	e188      	b.n	800b528 <find_volume+0x4cc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	3334      	adds	r3, #52	@ 0x34
 800b21a:	330b      	adds	r3, #11
 800b21c:	0018      	movs	r0, r3
 800b21e:	f7fe fb89 	bl	8009934 <ld_word>
 800b222:	0003      	movs	r3, r0
 800b224:	001a      	movs	r2, r3
 800b226:	2380      	movs	r3, #128	@ 0x80
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d001      	beq.n	800b232 <find_volume+0x1d6>
 800b22e:	230d      	movs	r3, #13
 800b230:	e17a      	b.n	800b528 <find_volume+0x4cc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	3334      	adds	r3, #52	@ 0x34
 800b236:	3316      	adds	r3, #22
 800b238:	0018      	movs	r0, r3
 800b23a:	f7fe fb7b 	bl	8009934 <ld_word>
 800b23e:	0003      	movs	r3, r0
 800b240:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d107      	bne.n	800b258 <find_volume+0x1fc>
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	3334      	adds	r3, #52	@ 0x34
 800b24c:	3324      	adds	r3, #36	@ 0x24
 800b24e:	0018      	movs	r0, r3
 800b250:	f7fe fb8b 	bl	800996a <ld_dword>
 800b254:	0003      	movs	r3, r0
 800b256:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b25c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	2244      	movs	r2, #68	@ 0x44
 800b262:	5c9a      	ldrb	r2, [r3, r2]
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26a:	789b      	ldrb	r3, [r3, #2]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d005      	beq.n	800b27c <find_volume+0x220>
 800b270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b272:	789b      	ldrb	r3, [r3, #2]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d001      	beq.n	800b27c <find_volume+0x220>
 800b278:	230d      	movs	r3, #13
 800b27a:	e155      	b.n	800b528 <find_volume+0x4cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	789b      	ldrb	r3, [r3, #2]
 800b280:	001a      	movs	r2, r3
 800b282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b284:	4353      	muls	r3, r2
 800b286:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	2241      	movs	r2, #65	@ 0x41
 800b28c:	5c9b      	ldrb	r3, [r3, r2]
 800b28e:	001a      	movs	r2, r3
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	895b      	ldrh	r3, [r3, #10]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <find_volume+0x250>
 800b29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29e:	895b      	ldrh	r3, [r3, #10]
 800b2a0:	001a      	movs	r2, r3
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a4:	895b      	ldrh	r3, [r3, #10]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	d001      	beq.n	800b2b0 <find_volume+0x254>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	e13b      	b.n	800b528 <find_volume+0x4cc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	3334      	adds	r3, #52	@ 0x34
 800b2b4:	3311      	adds	r3, #17
 800b2b6:	0018      	movs	r0, r3
 800b2b8:	f7fe fb3c 	bl	8009934 <ld_word>
 800b2bc:	0003      	movs	r3, r0
 800b2be:	001a      	movs	r2, r3
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	220f      	movs	r2, #15
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <find_volume+0x27a>
 800b2d2:	230d      	movs	r3, #13
 800b2d4:	e128      	b.n	800b528 <find_volume+0x4cc>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d8:	3334      	adds	r3, #52	@ 0x34
 800b2da:	3313      	adds	r3, #19
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f7fe fb29 	bl	8009934 <ld_word>
 800b2e2:	0003      	movs	r3, r0
 800b2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d107      	bne.n	800b2fc <find_volume+0x2a0>
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	3334      	adds	r3, #52	@ 0x34
 800b2f0:	3320      	adds	r3, #32
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f7fe fb39 	bl	800996a <ld_dword>
 800b2f8:	0003      	movs	r3, r0
 800b2fa:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	3334      	adds	r3, #52	@ 0x34
 800b300:	330e      	adds	r3, #14
 800b302:	252e      	movs	r5, #46	@ 0x2e
 800b304:	197c      	adds	r4, r7, r5
 800b306:	0018      	movs	r0, r3
 800b308:	f7fe fb14 	bl	8009934 <ld_word>
 800b30c:	0003      	movs	r3, r0
 800b30e:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b310:	197b      	adds	r3, r7, r5
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <find_volume+0x2c0>
 800b318:	230d      	movs	r3, #13
 800b31a:	e105      	b.n	800b528 <find_volume+0x4cc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b31c:	232e      	movs	r3, #46	@ 0x2e
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	881a      	ldrh	r2, [r3, #0]
 800b322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b324:	18d3      	adds	r3, r2, r3
 800b326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b328:	8912      	ldrh	r2, [r2, #8]
 800b32a:	0912      	lsrs	r2, r2, #4
 800b32c:	b292      	uxth	r2, r2
 800b32e:	189b      	adds	r3, r3, r2
 800b330:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b336:	429a      	cmp	r2, r3
 800b338:	d201      	bcs.n	800b33e <find_volume+0x2e2>
 800b33a:	230d      	movs	r3, #13
 800b33c:	e0f4      	b.n	800b528 <find_volume+0x4cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b33e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	1ad2      	subs	r2, r2, r3
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	895b      	ldrh	r3, [r3, #10]
 800b348:	0019      	movs	r1, r3
 800b34a:	0010      	movs	r0, r2
 800b34c:	f7f4 fef8 	bl	8000140 <__udivsi3>
 800b350:	0003      	movs	r3, r0
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d104      	bne.n	800b364 <find_volume+0x308>
 800b35a:	230d      	movs	r3, #13
 800b35c:	e0e4      	b.n	800b528 <find_volume+0x4cc>
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	20000e84 	.word	0x20000e84
		fmt = FS_FAT32;
 800b364:	2157      	movs	r1, #87	@ 0x57
 800b366:	187b      	adds	r3, r7, r1
 800b368:	2203      	movs	r2, #3
 800b36a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	4a70      	ldr	r2, [pc, #448]	@ (800b530 <find_volume+0x4d4>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d802      	bhi.n	800b37a <find_volume+0x31e>
 800b374:	187b      	adds	r3, r7, r1
 800b376:	2202      	movs	r2, #2
 800b378:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	4a6d      	ldr	r2, [pc, #436]	@ (800b534 <find_volume+0x4d8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d803      	bhi.n	800b38a <find_volume+0x32e>
 800b382:	2357      	movs	r3, #87	@ 0x57
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	2201      	movs	r2, #1
 800b388:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	1c9a      	adds	r2, r3, #2
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b396:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b398:	232e      	movs	r3, #46	@ 0x2e
 800b39a:	18fb      	adds	r3, r7, r3
 800b39c:	881a      	ldrh	r2, [r3, #0]
 800b39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3a0:	18d2      	adds	r2, r2, r3
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b3a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	18d2      	adds	r2, r2, r3
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800b3b0:	2357      	movs	r3, #87	@ 0x57
 800b3b2:	18fb      	adds	r3, r7, r3
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d11d      	bne.n	800b3f6 <find_volume+0x39a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	3334      	adds	r3, #52	@ 0x34
 800b3be:	332a      	adds	r3, #42	@ 0x2a
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f7fe fab7 	bl	8009934 <ld_word>
 800b3c6:	1e03      	subs	r3, r0, #0
 800b3c8:	d001      	beq.n	800b3ce <find_volume+0x372>
 800b3ca:	230d      	movs	r3, #13
 800b3cc:	e0ac      	b.n	800b528 <find_volume+0x4cc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d0:	891b      	ldrh	r3, [r3, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <find_volume+0x37e>
 800b3d6:	230d      	movs	r3, #13
 800b3d8:	e0a6      	b.n	800b528 <find_volume+0x4cc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	3334      	adds	r3, #52	@ 0x34
 800b3de:	332c      	adds	r3, #44	@ 0x2c
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f7fe fac2 	bl	800996a <ld_dword>
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ea:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f4:	e020      	b.n	800b438 <find_volume+0x3dc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	891b      	ldrh	r3, [r3, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <find_volume+0x3a6>
 800b3fe:	230d      	movs	r3, #13
 800b400:	e092      	b.n	800b528 <find_volume+0x4cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b408:	18d2      	adds	r2, r2, r3
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b40e:	2357      	movs	r3, #87	@ 0x57
 800b410:	18fb      	adds	r3, r7, r3
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d103      	bne.n	800b420 <find_volume+0x3c4>
 800b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	e00a      	b.n	800b436 <find_volume+0x3da>
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	0013      	movs	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	189b      	adds	r3, r3, r2
 800b42a:	085a      	lsrs	r2, r3, #1
 800b42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	2101      	movs	r1, #1
 800b432:	400b      	ands	r3, r1
 800b434:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b436:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b43e:	493e      	ldr	r1, [pc, #248]	@ (800b538 <find_volume+0x4dc>)
 800b440:	468c      	mov	ip, r1
 800b442:	4463      	add	r3, ip
 800b444:	0a5b      	lsrs	r3, r3, #9
 800b446:	429a      	cmp	r2, r3
 800b448:	d201      	bcs.n	800b44e <find_volume+0x3f2>
 800b44a:	230d      	movs	r3, #13
 800b44c:	e06c      	b.n	800b528 <find_volume+0x4cc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b450:	2201      	movs	r2, #1
 800b452:	4252      	negs	r2, r2
 800b454:	615a      	str	r2, [r3, #20]
 800b456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b458:	695a      	ldr	r2, [r3, #20]
 800b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	2280      	movs	r2, #128	@ 0x80
 800b462:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b464:	2357      	movs	r3, #87	@ 0x57
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d148      	bne.n	800b500 <find_volume+0x4a4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b470:	3334      	adds	r3, #52	@ 0x34
 800b472:	3330      	adds	r3, #48	@ 0x30
 800b474:	0018      	movs	r0, r3
 800b476:	f7fe fa5d 	bl	8009934 <ld_word>
 800b47a:	0003      	movs	r3, r0
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d13f      	bne.n	800b500 <find_volume+0x4a4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b486:	0011      	movs	r1, r2
 800b488:	0018      	movs	r0, r3
 800b48a:	f7fe fd33 	bl	8009ef4 <move_window>
 800b48e:	1e03      	subs	r3, r0, #0
 800b490:	d136      	bne.n	800b500 <find_volume+0x4a4>
		{
			fs->fsi_flag = 0;
 800b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b494:	2200      	movs	r2, #0
 800b496:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	3334      	adds	r3, #52	@ 0x34
 800b49c:	33ff      	adds	r3, #255	@ 0xff
 800b49e:	33ff      	adds	r3, #255	@ 0xff
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f7fe fa47 	bl	8009934 <ld_word>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	001a      	movs	r2, r3
 800b4aa:	4b24      	ldr	r3, [pc, #144]	@ (800b53c <find_volume+0x4e0>)
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d127      	bne.n	800b500 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	3334      	adds	r3, #52	@ 0x34
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	f7fe fa58 	bl	800996a <ld_dword>
 800b4ba:	0003      	movs	r3, r0
 800b4bc:	4a20      	ldr	r2, [pc, #128]	@ (800b540 <find_volume+0x4e4>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d11e      	bne.n	800b500 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	3334      	adds	r3, #52	@ 0x34
 800b4c6:	33e5      	adds	r3, #229	@ 0xe5
 800b4c8:	33ff      	adds	r3, #255	@ 0xff
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	f7fe fa4d 	bl	800996a <ld_dword>
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	4a1c      	ldr	r2, [pc, #112]	@ (800b544 <find_volume+0x4e8>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d113      	bne.n	800b500 <find_volume+0x4a4>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4da:	3334      	adds	r3, #52	@ 0x34
 800b4dc:	33e9      	adds	r3, #233	@ 0xe9
 800b4de:	33ff      	adds	r3, #255	@ 0xff
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f7fe fa42 	bl	800996a <ld_dword>
 800b4e6:	0002      	movs	r2, r0
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	3334      	adds	r3, #52	@ 0x34
 800b4f0:	33ed      	adds	r3, #237	@ 0xed
 800b4f2:	33ff      	adds	r3, #255	@ 0xff
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f7fe fa38 	bl	800996a <ld_dword>
 800b4fa:	0002      	movs	r2, r0
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	2257      	movs	r2, #87	@ 0x57
 800b504:	18ba      	adds	r2, r7, r2
 800b506:	7812      	ldrb	r2, [r2, #0]
 800b508:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b50a:	4b0f      	ldr	r3, [pc, #60]	@ (800b548 <find_volume+0x4ec>)
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	3301      	adds	r3, #1
 800b510:	b29a      	uxth	r2, r3
 800b512:	4b0d      	ldr	r3, [pc, #52]	@ (800b548 <find_volume+0x4ec>)
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	4b0c      	ldr	r3, [pc, #48]	@ (800b548 <find_volume+0x4ec>)
 800b518:	881a      	ldrh	r2, [r3, #0]
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b520:	0018      	movs	r0, r3
 800b522:	f7fe fc7f 	bl	8009e24 <clear_lock>
#endif
	return FR_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	0018      	movs	r0, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b016      	add	sp, #88	@ 0x58
 800b52e:	bdb0      	pop	{r4, r5, r7, pc}
 800b530:	0000fff5 	.word	0x0000fff5
 800b534:	00000ff5 	.word	0x00000ff5
 800b538:	000001ff 	.word	0x000001ff
 800b53c:	0000aa55 	.word	0x0000aa55
 800b540:	41615252 	.word	0x41615252
 800b544:	61417272 	.word	0x61417272
 800b548:	20000e88 	.word	0x20000e88

0800b54c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b54c:	b590      	push	{r4, r7, lr}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b556:	240f      	movs	r4, #15
 800b558:	193b      	adds	r3, r7, r4
 800b55a:	2209      	movs	r2, #9
 800b55c:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d030      	beq.n	800b5c6 <validate+0x7a>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d02c      	beq.n	800b5c6 <validate+0x7a>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d027      	beq.n	800b5c6 <validate+0x7a>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	889a      	ldrh	r2, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	88db      	ldrh	r3, [r3, #6]
 800b580:	429a      	cmp	r2, r3
 800b582:	d120      	bne.n	800b5c6 <validate+0x7a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	0018      	movs	r0, r3
 800b58a:	f7fe facd 	bl	8009b28 <lock_fs>
 800b58e:	1e03      	subs	r3, r0, #0
 800b590:	d015      	beq.n	800b5be <validate+0x72>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	0018      	movs	r0, r3
 800b59a:	f7fe f901 	bl	80097a0 <disk_status>
 800b59e:	0003      	movs	r3, r0
 800b5a0:	001a      	movs	r2, r3
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	d103      	bne.n	800b5b0 <validate+0x64>
				res = FR_OK;
 800b5a8:	193b      	adds	r3, r7, r4
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	e00a      	b.n	800b5c6 <validate+0x7a>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	f7fe facb 	bl	8009b52 <unlock_fs>
 800b5bc:	e003      	b.n	800b5c6 <validate+0x7a>
			}
		} else {
			res = FR_TIMEOUT;
 800b5be:	230f      	movs	r3, #15
 800b5c0:	18fb      	adds	r3, r7, r3
 800b5c2:	220f      	movs	r2, #15
 800b5c4:	701a      	strb	r2, [r3, #0]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b5c6:	230f      	movs	r3, #15
 800b5c8:	18fb      	adds	r3, r7, r3
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <validate+0x8a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	e000      	b.n	800b5d8 <validate+0x8c>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	601a      	str	r2, [r3, #0]
	return res;
 800b5dc:	230f      	movs	r3, #15
 800b5de:	18fb      	adds	r3, r7, r3
 800b5e0:	781b      	ldrb	r3, [r3, #0]
}
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	b005      	add	sp, #20
 800b5e8:	bd90      	pop	{r4, r7, pc}
	...

0800b5ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b5ec:	b5b0      	push	{r4, r5, r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	1dfb      	adds	r3, r7, #7
 800b5f8:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b5fe:	2310      	movs	r3, #16
 800b600:	18fb      	adds	r3, r7, r3
 800b602:	0018      	movs	r0, r3
 800b604:	f7ff fc8f 	bl	800af26 <get_ldnumber>
 800b608:	0003      	movs	r3, r0
 800b60a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	da01      	bge.n	800b616 <f_mount+0x2a>
 800b612:	230b      	movs	r3, #11
 800b614:	e04c      	b.n	800b6b0 <f_mount+0xc4>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b616:	4b28      	ldr	r3, [pc, #160]	@ (800b6b8 <f_mount+0xcc>)
 800b618:	69fa      	ldr	r2, [r7, #28]
 800b61a:	0092      	lsls	r2, r2, #2
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <f_mount+0x5a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	0018      	movs	r0, r3
 800b62a:	f7fe fbfb 	bl	8009e24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	0018      	movs	r0, r3
 800b634:	f000 fdfb 	bl	800c22e <ff_del_syncobj>
 800b638:	1e03      	subs	r3, r0, #0
 800b63a:	d101      	bne.n	800b640 <f_mount+0x54>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e037      	b.n	800b6b0 <f_mount+0xc4>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00e      	beq.n	800b66a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	b2da      	uxtb	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	330c      	adds	r3, #12
 800b65a:	0019      	movs	r1, r3
 800b65c:	0010      	movs	r0, r2
 800b65e:	f000 fdc5 	bl	800c1ec <ff_cre_syncobj>
 800b662:	1e03      	subs	r3, r0, #0
 800b664:	d101      	bne.n	800b66a <f_mount+0x7e>
 800b666:	2302      	movs	r3, #2
 800b668:	e022      	b.n	800b6b0 <f_mount+0xc4>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b66a:	68f9      	ldr	r1, [r7, #12]
 800b66c:	4b12      	ldr	r3, [pc, #72]	@ (800b6b8 <f_mount+0xcc>)
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <f_mount+0x96>
 800b67a:	1dfb      	adds	r3, r7, #7
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d001      	beq.n	800b686 <f_mount+0x9a>
 800b682:	2300      	movs	r3, #0
 800b684:	e014      	b.n	800b6b0 <f_mount+0xc4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b686:	2517      	movs	r5, #23
 800b688:	197c      	adds	r4, r7, r5
 800b68a:	230c      	movs	r3, #12
 800b68c:	18f9      	adds	r1, r7, r3
 800b68e:	2308      	movs	r3, #8
 800b690:	18fb      	adds	r3, r7, r3
 800b692:	2200      	movs	r2, #0
 800b694:	0018      	movs	r0, r3
 800b696:	f7ff fce1 	bl	800b05c <find_volume>
 800b69a:	0003      	movs	r3, r0
 800b69c:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	197b      	adds	r3, r7, r5
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	0019      	movs	r1, r3
 800b6a6:	0010      	movs	r0, r2
 800b6a8:	f7fe fa53 	bl	8009b52 <unlock_fs>
 800b6ac:	197b      	adds	r3, r7, r5
 800b6ae:	781b      	ldrb	r3, [r3, #0]
}
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	b008      	add	sp, #32
 800b6b6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6b8:	20000e84 	.word	0x20000e84

0800b6bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6be:	b099      	sub	sp, #100	@ 0x64
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	1dfb      	adds	r3, r7, #7
 800b6c8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <f_open+0x18>
 800b6d0:	2309      	movs	r3, #9
 800b6d2:	e1ea      	b.n	800baaa <f_open+0x3ee>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b6d4:	1dfb      	adds	r3, r7, #7
 800b6d6:	1dfa      	adds	r2, r7, #7
 800b6d8:	7812      	ldrb	r2, [r2, #0]
 800b6da:	213f      	movs	r1, #63	@ 0x3f
 800b6dc:	400a      	ands	r2, r1
 800b6de:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b6e0:	255f      	movs	r5, #95	@ 0x5f
 800b6e2:	197c      	adds	r4, r7, r5
 800b6e4:	1dfb      	adds	r3, r7, #7
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	18f9      	adds	r1, r7, r3
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	18fb      	adds	r3, r7, r3
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f7ff fcb3 	bl	800b05c <find_volume>
 800b6f6:	0003      	movs	r3, r0
 800b6f8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b6fa:	197b      	adds	r3, r7, r5
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d000      	beq.n	800b704 <f_open+0x48>
 800b702:	e1c0      	b.n	800ba86 <f_open+0x3ca>
		dj.obj.fs = fs;
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	2614      	movs	r6, #20
 800b708:	19bb      	adds	r3, r7, r6
 800b70a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	197c      	adds	r4, r7, r5
 800b710:	19bb      	adds	r3, r7, r6
 800b712:	0011      	movs	r1, r2
 800b714:	0018      	movs	r0, r3
 800b716:	f7ff fb81 	bl	800ae1c <follow_path>
 800b71a:	0003      	movs	r3, r0
 800b71c:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b71e:	0029      	movs	r1, r5
 800b720:	197b      	adds	r3, r7, r5
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d11b      	bne.n	800b760 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b728:	19bb      	adds	r3, r7, r6
 800b72a:	222f      	movs	r2, #47	@ 0x2f
 800b72c:	5c9b      	ldrb	r3, [r3, r2]
 800b72e:	b25b      	sxtb	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	da03      	bge.n	800b73c <f_open+0x80>
				res = FR_INVALID_NAME;
 800b734:	187b      	adds	r3, r7, r1
 800b736:	2206      	movs	r2, #6
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e011      	b.n	800b760 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b73c:	1dfb      	adds	r3, r7, #7
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2201      	movs	r2, #1
 800b742:	429a      	cmp	r2, r3
 800b744:	419b      	sbcs	r3, r3
 800b746:	425b      	negs	r3, r3
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	001a      	movs	r2, r3
 800b74c:	235f      	movs	r3, #95	@ 0x5f
 800b74e:	18fc      	adds	r4, r7, r3
 800b750:	2314      	movs	r3, #20
 800b752:	18fb      	adds	r3, r7, r3
 800b754:	0011      	movs	r1, r2
 800b756:	0018      	movs	r0, r3
 800b758:	f7fe fa1a 	bl	8009b90 <chk_lock>
 800b75c:	0003      	movs	r3, r0
 800b75e:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b760:	1dfb      	adds	r3, r7, #7
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	221c      	movs	r2, #28
 800b766:	4013      	ands	r3, r2
 800b768:	d100      	bne.n	800b76c <f_open+0xb0>
 800b76a:	e096      	b.n	800b89a <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800b76c:	225f      	movs	r2, #95	@ 0x5f
 800b76e:	18bb      	adds	r3, r7, r2
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d01a      	beq.n	800b7ac <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b776:	18bb      	adds	r3, r7, r2
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d10f      	bne.n	800b79e <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b77e:	f7fe fa5f 	bl	8009c40 <enq_lock>
 800b782:	1e03      	subs	r3, r0, #0
 800b784:	d007      	beq.n	800b796 <f_open+0xda>
 800b786:	2314      	movs	r3, #20
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	0018      	movs	r0, r3
 800b78c:	f7ff fa37 	bl	800abfe <dir_register>
 800b790:	0003      	movs	r3, r0
 800b792:	001a      	movs	r2, r3
 800b794:	e000      	b.n	800b798 <f_open+0xdc>
 800b796:	2212      	movs	r2, #18
 800b798:	235f      	movs	r3, #95	@ 0x5f
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b79e:	1dfb      	adds	r3, r7, #7
 800b7a0:	1dfa      	adds	r2, r7, #7
 800b7a2:	7812      	ldrb	r2, [r2, #0]
 800b7a4:	2108      	movs	r1, #8
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	e014      	b.n	800b7d6 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b7ac:	2314      	movs	r3, #20
 800b7ae:	18fb      	adds	r3, r7, r3
 800b7b0:	799b      	ldrb	r3, [r3, #6]
 800b7b2:	001a      	movs	r2, r3
 800b7b4:	2311      	movs	r3, #17
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d004      	beq.n	800b7c4 <f_open+0x108>
					res = FR_DENIED;
 800b7ba:	235f      	movs	r3, #95	@ 0x5f
 800b7bc:	18fb      	adds	r3, r7, r3
 800b7be:	2207      	movs	r2, #7
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e008      	b.n	800b7d6 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b7c4:	1dfb      	adds	r3, r7, #7
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2204      	movs	r2, #4
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	d003      	beq.n	800b7d6 <f_open+0x11a>
 800b7ce:	235f      	movs	r3, #95	@ 0x5f
 800b7d0:	18fb      	adds	r3, r7, r3
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b7d6:	245f      	movs	r4, #95	@ 0x5f
 800b7d8:	193b      	adds	r3, r7, r4
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d000      	beq.n	800b7e2 <f_open+0x126>
 800b7e0:	e07b      	b.n	800b8da <f_open+0x21e>
 800b7e2:	1dfb      	adds	r3, r7, #7
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2208      	movs	r2, #8
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	d100      	bne.n	800b7ee <f_open+0x132>
 800b7ec:	e075      	b.n	800b8da <f_open+0x21e>
				dw = GET_FATTIME();
 800b7ee:	f7fd f9fb 	bl	8008be8 <get_fattime>
 800b7f2:	0003      	movs	r3, r0
 800b7f4:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b7f6:	2514      	movs	r5, #20
 800b7f8:	197b      	adds	r3, r7, r5
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	330e      	adds	r3, #14
 800b7fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b800:	0011      	movs	r1, r2
 800b802:	0018      	movs	r0, r3
 800b804:	f7fe f8f0 	bl	80099e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b808:	197b      	adds	r3, r7, r5
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	3316      	adds	r3, #22
 800b80e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b810:	0011      	movs	r1, r2
 800b812:	0018      	movs	r0, r3
 800b814:	f7fe f8e8 	bl	80099e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b818:	197b      	adds	r3, r7, r5
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	330b      	adds	r3, #11
 800b81e:	2220      	movs	r2, #32
 800b820:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	197b      	adds	r3, r7, r5
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	0019      	movs	r1, r3
 800b82a:	0010      	movs	r0, r2
 800b82c:	f7ff f8c8 	bl	800a9c0 <ld_clust>
 800b830:	0003      	movs	r3, r0
 800b832:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b834:	6938      	ldr	r0, [r7, #16]
 800b836:	197b      	adds	r3, r7, r5
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	2200      	movs	r2, #0
 800b83c:	0019      	movs	r1, r3
 800b83e:	f7ff f8de 	bl	800a9fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b842:	197b      	adds	r3, r7, r5
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	331c      	adds	r3, #28
 800b848:	2100      	movs	r1, #0
 800b84a:	0018      	movs	r0, r3
 800b84c:	f7fe f8cc 	bl	80099e8 <st_dword>
					fs->wflag = 1;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2201      	movs	r2, #1
 800b854:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d03e      	beq.n	800b8da <f_open+0x21e>
						dw = fs->winsect;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b860:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b862:	0026      	movs	r6, r4
 800b864:	193c      	adds	r4, r7, r4
 800b866:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b868:	197b      	adds	r3, r7, r5
 800b86a:	2200      	movs	r2, #0
 800b86c:	0018      	movs	r0, r3
 800b86e:	f7fe fdba 	bl	800a3e6 <remove_chain>
 800b872:	0003      	movs	r3, r0
 800b874:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800b876:	19bb      	adds	r3, r7, r6
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d12d      	bne.n	800b8da <f_open+0x21e>
							res = move_window(fs, dw);
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	19bc      	adds	r4, r7, r6
 800b882:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b884:	0011      	movs	r1, r2
 800b886:	0018      	movs	r0, r3
 800b888:	f7fe fb34 	bl	8009ef4 <move_window>
 800b88c:	0003      	movs	r3, r0
 800b88e:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b894:	3a01      	subs	r2, #1
 800b896:	611a      	str	r2, [r3, #16]
 800b898:	e01f      	b.n	800b8da <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b89a:	215f      	movs	r1, #95	@ 0x5f
 800b89c:	187b      	adds	r3, r7, r1
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d11a      	bne.n	800b8da <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b8a4:	2314      	movs	r3, #20
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	799b      	ldrb	r3, [r3, #6]
 800b8aa:	001a      	movs	r2, r3
 800b8ac:	2310      	movs	r3, #16
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	d003      	beq.n	800b8ba <f_open+0x1fe>
					res = FR_NO_FILE;
 800b8b2:	187b      	adds	r3, r7, r1
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	e00f      	b.n	800b8da <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b8ba:	1dfb      	adds	r3, r7, #7
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	d00a      	beq.n	800b8da <f_open+0x21e>
 800b8c4:	2314      	movs	r3, #20
 800b8c6:	18fb      	adds	r3, r7, r3
 800b8c8:	799b      	ldrb	r3, [r3, #6]
 800b8ca:	001a      	movs	r2, r3
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	d003      	beq.n	800b8da <f_open+0x21e>
						res = FR_DENIED;
 800b8d2:	235f      	movs	r3, #95	@ 0x5f
 800b8d4:	18fb      	adds	r3, r7, r3
 800b8d6:	2207      	movs	r2, #7
 800b8d8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800b8da:	235f      	movs	r3, #95	@ 0x5f
 800b8dc:	18fb      	adds	r3, r7, r3
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d12b      	bne.n	800b93c <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b8e4:	1dfb      	adds	r3, r7, #7
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	d005      	beq.n	800b8fa <f_open+0x23e>
				mode |= FA_MODIFIED;
 800b8ee:	1dfb      	adds	r3, r7, #7
 800b8f0:	1dfa      	adds	r2, r7, #7
 800b8f2:	7812      	ldrb	r2, [r2, #0]
 800b8f4:	2140      	movs	r1, #64	@ 0x40
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b902:	2114      	movs	r1, #20
 800b904:	187b      	adds	r3, r7, r1
 800b906:	6a1a      	ldr	r2, [r3, #32]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b90c:	1dfb      	adds	r3, r7, #7
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2201      	movs	r2, #1
 800b912:	429a      	cmp	r2, r3
 800b914:	419b      	sbcs	r3, r3
 800b916:	425b      	negs	r3, r3
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	001a      	movs	r2, r3
 800b91c:	187b      	adds	r3, r7, r1
 800b91e:	0011      	movs	r1, r2
 800b920:	0018      	movs	r0, r3
 800b922:	f7fe f9ab 	bl	8009c7c <inc_lock>
 800b926:	0002      	movs	r2, r0
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <f_open+0x280>
 800b934:	235f      	movs	r3, #95	@ 0x5f
 800b936:	18fb      	adds	r3, r7, r3
 800b938:	2202      	movs	r2, #2
 800b93a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b93c:	235f      	movs	r3, #95	@ 0x5f
 800b93e:	18fb      	adds	r3, r7, r3
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d000      	beq.n	800b948 <f_open+0x28c>
 800b946:	e09e      	b.n	800ba86 <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	2414      	movs	r4, #20
 800b94c:	193b      	adds	r3, r7, r4
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	0019      	movs	r1, r3
 800b952:	0010      	movs	r0, r2
 800b954:	f7ff f834 	bl	800a9c0 <ld_clust>
 800b958:	0002      	movs	r2, r0
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b95e:	193b      	adds	r3, r7, r4
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	331c      	adds	r3, #28
 800b964:	0018      	movs	r0, r3
 800b966:	f7fe f800 	bl	800996a <ld_dword>
 800b96a:	0002      	movs	r2, r0
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	88da      	ldrh	r2, [r3, #6]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	1dfa      	adds	r2, r7, #7
 800b988:	7812      	ldrb	r2, [r2, #0]
 800b98a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3330      	adds	r3, #48	@ 0x30
 800b9a2:	2280      	movs	r2, #128	@ 0x80
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f7fe f866 	bl	8009a7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b9ae:	1dfb      	adds	r3, r7, #7
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	d066      	beq.n	800ba86 <f_open+0x3ca>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d062      	beq.n	800ba86 <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68da      	ldr	r2, [r3, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	895b      	ldrh	r3, [r3, #10]
 800b9cc:	025b      	lsls	r3, r3, #9
 800b9ce:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9dc:	e019      	b.n	800ba12 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9e2:	0011      	movs	r1, r2
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f7fe fb53 	bl	800a090 <get_fat>
 800b9ea:	0003      	movs	r3, r0
 800b9ec:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b9ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d803      	bhi.n	800b9fc <f_open+0x340>
 800b9f4:	235f      	movs	r3, #95	@ 0x5f
 800b9f6:	18fb      	adds	r3, r7, r3
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b9fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9fe:	3301      	adds	r3, #1
 800ba00:	d103      	bne.n	800ba0a <f_open+0x34e>
 800ba02:	235f      	movs	r3, #95	@ 0x5f
 800ba04:	18fb      	adds	r3, r7, r3
 800ba06:	2201      	movs	r2, #1
 800ba08:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba12:	235f      	movs	r3, #95	@ 0x5f
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <f_open+0x368>
 800ba1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d8dc      	bhi.n	800b9de <f_open+0x322>
				}
				fp->clust = clst;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba2a:	245f      	movs	r4, #95	@ 0x5f
 800ba2c:	193b      	adds	r3, r7, r4
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d128      	bne.n	800ba86 <f_open+0x3ca>
 800ba34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba36:	05db      	lsls	r3, r3, #23
 800ba38:	0ddb      	lsrs	r3, r3, #23
 800ba3a:	d024      	beq.n	800ba86 <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba40:	0011      	movs	r1, r2
 800ba42:	0018      	movs	r0, r3
 800ba44:	f7fe fb08 	bl	800a058 <clust2sect>
 800ba48:	0003      	movs	r3, r0
 800ba4a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d103      	bne.n	800ba5a <f_open+0x39e>
						res = FR_INT_ERR;
 800ba52:	193b      	adds	r3, r7, r4
 800ba54:	2202      	movs	r2, #2
 800ba56:	701a      	strb	r2, [r3, #0]
 800ba58:	e015      	b.n	800ba86 <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ba5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba5c:	0a5a      	lsrs	r2, r3, #9
 800ba5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba60:	18d2      	adds	r2, r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	7858      	ldrb	r0, [r3, #1]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3330      	adds	r3, #48	@ 0x30
 800ba6e:	0019      	movs	r1, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a1a      	ldr	r2, [r3, #32]
 800ba74:	2301      	movs	r3, #1
 800ba76:	f7fd fee5 	bl	8009844 <disk_read>
 800ba7a:	1e03      	subs	r3, r0, #0
 800ba7c:	d003      	beq.n	800ba86 <f_open+0x3ca>
 800ba7e:	235f      	movs	r3, #95	@ 0x5f
 800ba80:	18fb      	adds	r3, r7, r3
 800ba82:	2201      	movs	r2, #1
 800ba84:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ba86:	235f      	movs	r3, #95	@ 0x5f
 800ba88:	18fb      	adds	r3, r7, r3
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <f_open+0x3da>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	245f      	movs	r4, #95	@ 0x5f
 800ba9a:	193b      	adds	r3, r7, r4
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	0019      	movs	r1, r3
 800baa0:	0010      	movs	r0, r2
 800baa2:	f7fe f856 	bl	8009b52 <unlock_fs>
 800baa6:	193b      	adds	r3, r7, r4
 800baa8:	781b      	ldrb	r3, [r3, #0]
}
 800baaa:	0018      	movs	r0, r3
 800baac:	46bd      	mov	sp, r7
 800baae:	b019      	add	sp, #100	@ 0x64
 800bab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bab2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bab2:	b5b0      	push	{r4, r5, r7, lr}
 800bab4:	b08c      	sub	sp, #48	@ 0x30
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
 800babe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	252f      	movs	r5, #47	@ 0x2f
 800bace:	197c      	adds	r4, r7, r5
 800bad0:	2210      	movs	r2, #16
 800bad2:	18ba      	adds	r2, r7, r2
 800bad4:	0011      	movs	r1, r2
 800bad6:	0018      	movs	r0, r3
 800bad8:	f7ff fd38 	bl	800b54c <validate>
 800badc:	0003      	movs	r3, r0
 800bade:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bae0:	197b      	adds	r3, r7, r5
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d107      	bne.n	800baf8 <f_write+0x46>
 800bae8:	197b      	adds	r3, r7, r5
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	7d52      	ldrb	r2, [r2, #21]
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	197b      	adds	r3, r7, r5
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00a      	beq.n	800bb0e <f_write+0x5c>
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	242f      	movs	r4, #47	@ 0x2f
 800bafc:	193b      	adds	r3, r7, r4
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	0019      	movs	r1, r3
 800bb02:	0010      	movs	r0, r2
 800bb04:	f7fe f825 	bl	8009b52 <unlock_fs>
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	e176      	b.n	800bdfc <f_write+0x34a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	7d1b      	ldrb	r3, [r3, #20]
 800bb12:	001a      	movs	r2, r3
 800bb14:	2302      	movs	r3, #2
 800bb16:	4013      	ands	r3, r2
 800bb18:	d106      	bne.n	800bb28 <f_write+0x76>
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	2107      	movs	r1, #7
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f7fe f817 	bl	8009b52 <unlock_fs>
 800bb24:	2307      	movs	r3, #7
 800bb26:	e169      	b.n	800bdfc <f_write+0x34a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	699a      	ldr	r2, [r3, #24]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	18d2      	adds	r2, r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d300      	bcc.n	800bb3a <f_write+0x88>
 800bb38:	e14d      	b.n	800bdd6 <f_write+0x324>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	43db      	mvns	r3, r3
 800bb40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bb42:	e148      	b.n	800bdd6 <f_write+0x324>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	05db      	lsls	r3, r3, #23
 800bb4a:	0ddb      	lsrs	r3, r3, #23
 800bb4c:	d000      	beq.n	800bb50 <f_write+0x9e>
 800bb4e:	e101      	b.n	800bd54 <f_write+0x2a2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	0a5b      	lsrs	r3, r3, #9
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	8952      	ldrh	r2, [r2, #10]
 800bb5a:	3a01      	subs	r2, #1
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d150      	bne.n	800bc08 <f_write+0x156>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10d      	bne.n	800bb8a <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d11e      	bne.n	800bbb8 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f7fe fca4 	bl	800a4cc <create_chain>
 800bb84:	0003      	movs	r3, r0
 800bb86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb88:	e016      	b.n	800bbb8 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d009      	beq.n	800bba6 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	699a      	ldr	r2, [r3, #24]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	0011      	movs	r1, r2
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f7fe fd3c 	bl	800a618 <clmt_clust>
 800bba0:	0003      	movs	r3, r0
 800bba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bba4:	e008      	b.n	800bbb8 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	69db      	ldr	r3, [r3, #28]
 800bbac:	0019      	movs	r1, r3
 800bbae:	0010      	movs	r0, r2
 800bbb0:	f7fe fc8c 	bl	800a4cc <create_chain>
 800bbb4:	0003      	movs	r3, r0
 800bbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d100      	bne.n	800bbc0 <f_write+0x10e>
 800bbbe:	e10f      	b.n	800bde0 <f_write+0x32e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d109      	bne.n	800bbda <f_write+0x128>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2202      	movs	r2, #2
 800bbca:	755a      	strb	r2, [r3, #21]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2102      	movs	r1, #2
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f7fd ffbe 	bl	8009b52 <unlock_fs>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e110      	b.n	800bdfc <f_write+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbdc:	3301      	adds	r3, #1
 800bbde:	d109      	bne.n	800bbf4 <f_write+0x142>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	755a      	strb	r2, [r3, #21]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2101      	movs	r1, #1
 800bbea:	0018      	movs	r0, r3
 800bbec:	f7fd ffb1 	bl	8009b52 <unlock_fs>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e103      	b.n	800bdfc <f_write+0x34a>
				fp->clust = clst;			/* Update current cluster */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbf8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <f_write+0x156>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	7d1b      	ldrb	r3, [r3, #20]
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da1c      	bge.n	800bc4c <f_write+0x19a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	7858      	ldrb	r0, [r3, #1]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3330      	adds	r3, #48	@ 0x30
 800bc1a:	0019      	movs	r1, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a1a      	ldr	r2, [r3, #32]
 800bc20:	2301      	movs	r3, #1
 800bc22:	f7fd fe37 	bl	8009894 <disk_write>
 800bc26:	1e03      	subs	r3, r0, #0
 800bc28:	d009      	beq.n	800bc3e <f_write+0x18c>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	755a      	strb	r2, [r3, #21]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	2101      	movs	r1, #1
 800bc34:	0018      	movs	r0, r3
 800bc36:	f7fd ff8c 	bl	8009b52 <unlock_fs>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e0de      	b.n	800bdfc <f_write+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	7d1b      	ldrb	r3, [r3, #20]
 800bc42:	227f      	movs	r2, #127	@ 0x7f
 800bc44:	4013      	ands	r3, r2
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	0019      	movs	r1, r3
 800bc54:	0010      	movs	r0, r2
 800bc56:	f7fe f9ff 	bl	800a058 <clust2sect>
 800bc5a:	0003      	movs	r3, r0
 800bc5c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <f_write+0x1c6>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2202      	movs	r2, #2
 800bc68:	755a      	strb	r2, [r3, #21]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2102      	movs	r1, #2
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f7fd ff6f 	bl	8009b52 <unlock_fs>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e0c1      	b.n	800bdfc <f_write+0x34a>
			sect += csect;
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	18d3      	adds	r3, r2, r3
 800bc7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	0a5b      	lsrs	r3, r3, #9
 800bc84:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d040      	beq.n	800bd0e <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	18d3      	adds	r3, r2, r3
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	8952      	ldrh	r2, [r2, #10]
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d905      	bls.n	800bca6 <f_write+0x1f4>
					cc = fs->csize - csect;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	895b      	ldrh	r3, [r3, #10]
 800bc9e:	001a      	movs	r2, r3
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	7858      	ldrb	r0, [r3, #1]
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	69f9      	ldr	r1, [r7, #28]
 800bcb0:	f7fd fdf0 	bl	8009894 <disk_write>
 800bcb4:	1e03      	subs	r3, r0, #0
 800bcb6:	d009      	beq.n	800bccc <f_write+0x21a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	755a      	strb	r2, [r3, #21]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f7fd ff45 	bl	8009b52 <unlock_fs>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e097      	b.n	800bdfc <f_write+0x34a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1a      	ldr	r2, [r3, #32]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	6a3a      	ldr	r2, [r7, #32]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d915      	bls.n	800bd06 <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3330      	adds	r3, #48	@ 0x30
 800bcde:	0018      	movs	r0, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a1a      	ldr	r2, [r3, #32]
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	025b      	lsls	r3, r3, #9
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	18d3      	adds	r3, r2, r3
 800bcee:	2280      	movs	r2, #128	@ 0x80
 800bcf0:	0092      	lsls	r2, r2, #2
 800bcf2:	0019      	movs	r1, r3
 800bcf4:	f7fd fea2 	bl	8009a3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	7d1b      	ldrb	r3, [r3, #20]
 800bcfc:	227f      	movs	r2, #127	@ 0x7f
 800bcfe:	4013      	ands	r3, r2
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	025b      	lsls	r3, r3, #9
 800bd0a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bd0c:	e045      	b.n	800bd9a <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d01a      	beq.n	800bd4e <f_write+0x29c>
				fp->fptr < fp->obj.objsize &&
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d214      	bcs.n	800bd4e <f_write+0x29c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	7858      	ldrb	r0, [r3, #1]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3330      	adds	r3, #48	@ 0x30
 800bd2c:	0019      	movs	r1, r3
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	2301      	movs	r3, #1
 800bd32:	f7fd fd87 	bl	8009844 <disk_read>
 800bd36:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800bd38:	d009      	beq.n	800bd4e <f_write+0x29c>
					ABORT(fs, FR_DISK_ERR);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	755a      	strb	r2, [r3, #21]
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2101      	movs	r1, #1
 800bd44:	0018      	movs	r0, r3
 800bd46:	f7fd ff04 	bl	8009b52 <unlock_fs>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e056      	b.n	800bdfc <f_write+0x34a>
			}
#endif
			fp->sect = sect;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	05db      	lsls	r3, r3, #23
 800bd5a:	0ddb      	lsrs	r3, r3, #23
 800bd5c:	2280      	movs	r2, #128	@ 0x80
 800bd5e:	0092      	lsls	r2, r2, #2
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d901      	bls.n	800bd70 <f_write+0x2be>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3330      	adds	r3, #48	@ 0x30
 800bd74:	001a      	movs	r2, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	05db      	lsls	r3, r3, #23
 800bd7c:	0ddb      	lsrs	r3, r3, #23
 800bd7e:	18d3      	adds	r3, r2, r3
 800bd80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd82:	69f9      	ldr	r1, [r7, #28]
 800bd84:	0018      	movs	r0, r3
 800bd86:	f7fd fe59 	bl	8009a3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	7d1b      	ldrb	r3, [r3, #20]
 800bd8e:	2280      	movs	r2, #128	@ 0x80
 800bd90:	4252      	negs	r2, r2
 800bd92:	4313      	orrs	r3, r2
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	18d3      	adds	r3, r2, r3
 800bda0:	61fb      	str	r3, [r7, #28]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda8:	18d2      	adds	r2, r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	619a      	str	r2, [r3, #24]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68d9      	ldr	r1, [r3, #12]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	000b      	movs	r3, r1
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d200      	bcs.n	800bdbe <f_write+0x30c>
 800bdbc:	0013      	movs	r3, r2
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	60d3      	str	r3, [r2, #12]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	18d2      	adds	r2, r2, r3
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d000      	beq.n	800bdde <f_write+0x32c>
 800bddc:	e6b2      	b.n	800bb44 <f_write+0x92>
 800bdde:	e000      	b.n	800bde2 <f_write+0x330>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bde0:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	2240      	movs	r2, #64	@ 0x40
 800bde8:	4313      	orrs	r3, r2
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	f7fd feac 	bl	8009b52 <unlock_fs>
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	b00c      	add	sp, #48	@ 0x30
 800be02:	bdb0      	pop	{r4, r5, r7, pc}

0800be04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be04:	b5b0      	push	{r4, r5, r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2517      	movs	r5, #23
 800be10:	197c      	adds	r4, r7, r5
 800be12:	2208      	movs	r2, #8
 800be14:	18ba      	adds	r2, r7, r2
 800be16:	0011      	movs	r1, r2
 800be18:	0018      	movs	r0, r3
 800be1a:	f7ff fb97 	bl	800b54c <validate>
 800be1e:	0003      	movs	r3, r0
 800be20:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800be22:	197b      	adds	r3, r7, r5
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d173      	bne.n	800bf12 <f_sync+0x10e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	7d1b      	ldrb	r3, [r3, #20]
 800be2e:	001a      	movs	r2, r3
 800be30:	2340      	movs	r3, #64	@ 0x40
 800be32:	4013      	ands	r3, r2
 800be34:	d06d      	beq.n	800bf12 <f_sync+0x10e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7d1b      	ldrb	r3, [r3, #20]
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	da19      	bge.n	800be74 <f_sync+0x70>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	7858      	ldrb	r0, [r3, #1]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3330      	adds	r3, #48	@ 0x30
 800be48:	0019      	movs	r1, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a1a      	ldr	r2, [r3, #32]
 800be4e:	2301      	movs	r3, #1
 800be50:	f7fd fd20 	bl	8009894 <disk_write>
 800be54:	1e03      	subs	r3, r0, #0
 800be56:	d006      	beq.n	800be66 <f_sync+0x62>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2101      	movs	r1, #1
 800be5c:	0018      	movs	r0, r3
 800be5e:	f7fd fe78 	bl	8009b52 <unlock_fs>
 800be62:	2301      	movs	r3, #1
 800be64:	e05f      	b.n	800bf26 <f_sync+0x122>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7d1b      	ldrb	r3, [r3, #20]
 800be6a:	227f      	movs	r2, #127	@ 0x7f
 800be6c:	4013      	ands	r3, r2
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be74:	f7fc feb8 	bl	8008be8 <get_fattime>
 800be78:	0003      	movs	r3, r0
 800be7a:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be82:	2517      	movs	r5, #23
 800be84:	197c      	adds	r4, r7, r5
 800be86:	0019      	movs	r1, r3
 800be88:	0010      	movs	r0, r2
 800be8a:	f7fe f833 	bl	8009ef4 <move_window>
 800be8e:	0003      	movs	r3, r0
 800be90:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800be92:	002c      	movs	r4, r5
 800be94:	193b      	adds	r3, r7, r4
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d13a      	bne.n	800bf12 <f_sync+0x10e>
					dir = fp->dir_ptr;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	330b      	adds	r3, #11
 800bea6:	781a      	ldrb	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	330b      	adds	r3, #11
 800beac:	2120      	movs	r1, #32
 800beae:	430a      	orrs	r2, r1
 800beb0:	b2d2      	uxtb	r2, r2
 800beb2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	0019      	movs	r1, r3
 800bec0:	f7fe fd9d 	bl	800a9fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	331c      	adds	r3, #28
 800bec8:	001a      	movs	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	0019      	movs	r1, r3
 800bed0:	0010      	movs	r0, r2
 800bed2:	f7fd fd89 	bl	80099e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3316      	adds	r3, #22
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	0011      	movs	r1, r2
 800bede:	0018      	movs	r0, r3
 800bee0:	f7fd fd82 	bl	80099e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	3312      	adds	r3, #18
 800bee8:	2100      	movs	r1, #0
 800beea:	0018      	movs	r0, r3
 800beec:	f7fd fd5e 	bl	80099ac <st_word>
					fs->wflag = 1;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2201      	movs	r2, #1
 800bef4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	193c      	adds	r4, r7, r4
 800befa:	0018      	movs	r0, r3
 800befc:	f7fe f830 	bl	8009f60 <sync_fs>
 800bf00:	0003      	movs	r3, r0
 800bf02:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	7d1b      	ldrb	r3, [r3, #20]
 800bf08:	2240      	movs	r2, #64	@ 0x40
 800bf0a:	4393      	bics	r3, r2
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	2417      	movs	r4, #23
 800bf16:	193b      	adds	r3, r7, r4
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	0010      	movs	r0, r2
 800bf1e:	f7fd fe18 	bl	8009b52 <unlock_fs>
 800bf22:	193b      	adds	r3, r7, r4
 800bf24:	781b      	ldrb	r3, [r3, #0]
}
 800bf26:	0018      	movs	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	b006      	add	sp, #24
 800bf2c:	bdb0      	pop	{r4, r5, r7, pc}

0800bf2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bf2e:	b5b0      	push	{r4, r5, r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf36:	250f      	movs	r5, #15
 800bf38:	197c      	adds	r4, r7, r5
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f7ff ff61 	bl	800be04 <f_sync>
 800bf42:	0003      	movs	r3, r0
 800bf44:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800bf46:	197b      	adds	r3, r7, r5
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d121      	bne.n	800bf92 <f_close+0x64>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	197c      	adds	r4, r7, r5
 800bf52:	2208      	movs	r2, #8
 800bf54:	18ba      	adds	r2, r7, r2
 800bf56:	0011      	movs	r1, r2
 800bf58:	0018      	movs	r0, r3
 800bf5a:	f7ff faf7 	bl	800b54c <validate>
 800bf5e:	0003      	movs	r3, r0
 800bf60:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800bf62:	197b      	adds	r3, r7, r5
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d113      	bne.n	800bf92 <f_close+0x64>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	197c      	adds	r4, r7, r5
 800bf70:	0018      	movs	r0, r3
 800bf72:	f7fd ff0d 	bl	8009d90 <dec_lock>
 800bf76:	0003      	movs	r3, r0
 800bf78:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800bf7a:	197b      	adds	r3, r7, r5
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d102      	bne.n	800bf88 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f7fd fde0 	bl	8009b52 <unlock_fs>
#endif
		}
	}
	return res;
 800bf92:	230f      	movs	r3, #15
 800bf94:	18fb      	adds	r3, r7, r3
 800bf96:	781b      	ldrb	r3, [r3, #0]
}
 800bf98:	0018      	movs	r0, r3
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b004      	add	sp, #16
 800bf9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bfa0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa2:	b09f      	sub	sp, #124	@ 0x7c
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bfac:	2577      	movs	r5, #119	@ 0x77
 800bfae:	197c      	adds	r4, r7, r5
 800bfb0:	230c      	movs	r3, #12
 800bfb2:	18f9      	adds	r1, r7, r3
 800bfb4:	1d3b      	adds	r3, r7, #4
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	0018      	movs	r0, r3
 800bfba:	f7ff f84f 	bl	800b05c <find_volume>
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	7023      	strb	r3, [r4, #0]
	dj.obj.fs = fs;
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	2640      	movs	r6, #64	@ 0x40
 800bfc6:	19bb      	adds	r3, r7, r6
 800bfc8:	601a      	str	r2, [r3, #0]
	if (res == FR_OK) {
 800bfca:	197b      	adds	r3, r7, r5
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d000      	beq.n	800bfd4 <f_unlink+0x34>
 800bfd2:	e099      	b.n	800c108 <f_unlink+0x168>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	197c      	adds	r4, r7, r5
 800bfd8:	19bb      	adds	r3, r7, r6
 800bfda:	0011      	movs	r1, r2
 800bfdc:	0018      	movs	r0, r3
 800bfde:	f7fe ff1d 	bl	800ae1c <follow_path>
 800bfe2:	0003      	movs	r3, r0
 800bfe4:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800bfe6:	197b      	adds	r3, r7, r5
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d107      	bne.n	800bffe <f_unlink+0x5e>
 800bfee:	197c      	adds	r4, r7, r5
 800bff0:	19bb      	adds	r3, r7, r6
 800bff2:	2102      	movs	r1, #2
 800bff4:	0018      	movs	r0, r3
 800bff6:	f7fd fdcb 	bl	8009b90 <chk_lock>
 800bffa:	0003      	movs	r3, r0
 800bffc:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800bffe:	2177      	movs	r1, #119	@ 0x77
 800c000:	187b      	adds	r3, r7, r1
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d000      	beq.n	800c00a <f_unlink+0x6a>
 800c008:	e07e      	b.n	800c108 <f_unlink+0x168>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c00a:	2340      	movs	r3, #64	@ 0x40
 800c00c:	18fb      	adds	r3, r7, r3
 800c00e:	222f      	movs	r2, #47	@ 0x2f
 800c010:	5c9b      	ldrb	r3, [r3, r2]
 800c012:	b25b      	sxtb	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	da03      	bge.n	800c020 <f_unlink+0x80>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c018:	187b      	adds	r3, r7, r1
 800c01a:	2206      	movs	r2, #6
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	e00a      	b.n	800c036 <f_unlink+0x96>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c020:	2340      	movs	r3, #64	@ 0x40
 800c022:	18fb      	adds	r3, r7, r3
 800c024:	799b      	ldrb	r3, [r3, #6]
 800c026:	001a      	movs	r2, r3
 800c028:	2301      	movs	r3, #1
 800c02a:	4013      	ands	r3, r2
 800c02c:	d003      	beq.n	800c036 <f_unlink+0x96>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c02e:	2377      	movs	r3, #119	@ 0x77
 800c030:	18fb      	adds	r3, r7, r3
 800c032:	2207      	movs	r2, #7
 800c034:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK) {
 800c036:	2477      	movs	r4, #119	@ 0x77
 800c038:	193b      	adds	r3, r7, r4
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d13a      	bne.n	800c0b6 <f_unlink+0x116>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	2540      	movs	r5, #64	@ 0x40
 800c044:	197b      	adds	r3, r7, r5
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	0019      	movs	r1, r3
 800c04a:	0010      	movs	r0, r2
 800c04c:	f7fe fcb8 	bl	800a9c0 <ld_clust>
 800c050:	0003      	movs	r3, r0
 800c052:	673b      	str	r3, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c054:	197b      	adds	r3, r7, r5
 800c056:	799b      	ldrb	r3, [r3, #6]
 800c058:	001a      	movs	r2, r3
 800c05a:	2310      	movs	r3, #16
 800c05c:	4013      	ands	r3, r2
 800c05e:	d02a      	beq.n	800c0b6 <f_unlink+0x116>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	2610      	movs	r6, #16
 800c064:	19bb      	adds	r3, r7, r6
 800c066:	601a      	str	r2, [r3, #0]
						sdj.obj.sclust = dclst;
 800c068:	19bb      	adds	r3, r7, r6
 800c06a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c06c:	609a      	str	r2, [r3, #8]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c06e:	0025      	movs	r5, r4
 800c070:	197c      	adds	r4, r7, r5
 800c072:	19bb      	adds	r3, r7, r6
 800c074:	2100      	movs	r1, #0
 800c076:	0018      	movs	r0, r3
 800c078:	f7fe fb03 	bl	800a682 <dir_sdi>
 800c07c:	0003      	movs	r3, r0
 800c07e:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800c080:	197b      	adds	r3, r7, r5
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d116      	bne.n	800c0b6 <f_unlink+0x116>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c088:	197c      	adds	r4, r7, r5
 800c08a:	19bb      	adds	r3, r7, r6
 800c08c:	2100      	movs	r1, #0
 800c08e:	0018      	movs	r0, r3
 800c090:	f7fe fcd5 	bl	800aa3e <dir_read>
 800c094:	0003      	movs	r3, r0
 800c096:	7023      	strb	r3, [r4, #0]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c098:	197b      	adds	r3, r7, r5
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <f_unlink+0x106>
 800c0a0:	197b      	adds	r3, r7, r5
 800c0a2:	2207      	movs	r2, #7
 800c0a4:	701a      	strb	r2, [r3, #0]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c0a6:	2277      	movs	r2, #119	@ 0x77
 800c0a8:	18bb      	adds	r3, r7, r2
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d102      	bne.n	800c0b6 <f_unlink+0x116>
 800c0b0:	18bb      	adds	r3, r7, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}
			if (res == FR_OK) {
 800c0b6:	2577      	movs	r5, #119	@ 0x77
 800c0b8:	197b      	adds	r3, r7, r5
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d123      	bne.n	800c108 <f_unlink+0x168>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c0c0:	197c      	adds	r4, r7, r5
 800c0c2:	2640      	movs	r6, #64	@ 0x40
 800c0c4:	19bb      	adds	r3, r7, r6
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f7fe fdd4 	bl	800ac74 <dir_remove>
 800c0cc:	0003      	movs	r3, r0
 800c0ce:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c0d0:	197b      	adds	r3, r7, r5
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <f_unlink+0x150>
 800c0d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d008      	beq.n	800c0f0 <f_unlink+0x150>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c0de:	197c      	adds	r4, r7, r5
 800c0e0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c0e2:	19bb      	adds	r3, r7, r6
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	f7fe f97d 	bl	800a3e6 <remove_chain>
 800c0ec:	0003      	movs	r3, r0
 800c0ee:	7023      	strb	r3, [r4, #0]
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c0f0:	2277      	movs	r2, #119	@ 0x77
 800c0f2:	18bb      	adds	r3, r7, r2
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <f_unlink+0x168>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	18bc      	adds	r4, r7, r2
 800c0fe:	0018      	movs	r0, r3
 800c100:	f7fd ff2e 	bl	8009f60 <sync_fs>
 800c104:	0003      	movs	r3, r0
 800c106:	7023      	strb	r3, [r4, #0]
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	2477      	movs	r4, #119	@ 0x77
 800c10c:	193b      	adds	r3, r7, r4
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	0019      	movs	r1, r3
 800c112:	0010      	movs	r0, r2
 800c114:	f7fd fd1d 	bl	8009b52 <unlock_fs>
 800c118:	193b      	adds	r3, r7, r4
 800c11a:	781b      	ldrb	r3, [r3, #0]
}
 800c11c:	0018      	movs	r0, r3
 800c11e:	46bd      	mov	sp, r7
 800c120:	b01f      	add	sp, #124	@ 0x7c
 800c122:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c124:	b590      	push	{r4, r7, lr}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	1dfb      	adds	r3, r7, #7
 800c130:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800c132:	2417      	movs	r4, #23
 800c134:	193b      	adds	r3, r7, r4
 800c136:	2201      	movs	r2, #1
 800c138:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800c13a:	2016      	movs	r0, #22
 800c13c:	183b      	adds	r3, r7, r0
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800c142:	4b21      	ldr	r3, [pc, #132]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c144:	7a5b      	ldrb	r3, [r3, #9]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d136      	bne.n	800c1ba <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c14c:	4b1e      	ldr	r3, [pc, #120]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c14e:	7a5b      	ldrb	r3, [r3, #9]
 800c150:	b2db      	uxtb	r3, r3
 800c152:	001a      	movs	r2, r3
 800c154:	4b1c      	ldr	r3, [pc, #112]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c156:	2100      	movs	r1, #0
 800c158:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c15a:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c15c:	7a5b      	ldrb	r3, [r3, #9]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	4a19      	ldr	r2, [pc, #100]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	18d3      	adds	r3, r2, r3
 800c166:	3304      	adds	r3, #4
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800c16c:	4b16      	ldr	r3, [pc, #88]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c16e:	7a5b      	ldrb	r3, [r3, #9]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	001a      	movs	r2, r3
 800c174:	4b14      	ldr	r3, [pc, #80]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c176:	189b      	adds	r3, r3, r2
 800c178:	1dfa      	adds	r2, r7, #7
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c17e:	4b12      	ldr	r3, [pc, #72]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c180:	7a5b      	ldrb	r3, [r3, #9]
 800c182:	b2db      	uxtb	r3, r3
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	b2d1      	uxtb	r1, r2
 800c188:	4a0f      	ldr	r2, [pc, #60]	@ (800c1c8 <FATFS_LinkDriverEx+0xa4>)
 800c18a:	7251      	strb	r1, [r2, #9]
 800c18c:	183a      	adds	r2, r7, r0
 800c18e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800c190:	183b      	adds	r3, r7, r0
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	3330      	adds	r3, #48	@ 0x30
 800c196:	b2da      	uxtb	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	223a      	movs	r2, #58	@ 0x3a
 800c1a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	3302      	adds	r3, #2
 800c1a8:	222f      	movs	r2, #47	@ 0x2f
 800c1aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	3303      	adds	r3, #3
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1b4:	193b      	adds	r3, r7, r4
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c1ba:	2317      	movs	r3, #23
 800c1bc:	18fb      	adds	r3, r7, r3
 800c1be:	781b      	ldrb	r3, [r3, #0]
}
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	b007      	add	sp, #28
 800c1c6:	bd90      	pop	{r4, r7, pc}
 800c1c8:	20000eac 	.word	0x20000eac

0800c1cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f7ff ffa1 	bl	800c124 <FATFS_LinkDriverEx>
 800c1e2:	0003      	movs	r3, r0
}
 800c1e4:	0018      	movs	r0, r3
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	b002      	add	sp, #8
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	0002      	movs	r2, r0
 800c1f4:	6039      	str	r1, [r7, #0]
 800c1f6:	1dfb      	adds	r3, r7, #7
 800c1f8:	701a      	strb	r2, [r3, #0]

    int ret;

    osSemaphoreDef(SEM);
 800c1fa:	210c      	movs	r1, #12
 800c1fc:	187b      	adds	r3, r7, r1
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	187b      	adds	r3, r7, r1
 800c204:	2200      	movs	r2, #0
 800c206:	605a      	str	r2, [r3, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	2101      	movs	r1, #1
 800c20c:	0018      	movs	r0, r3
 800c20e:	f000 f94d 	bl	800c4ac <osSemaphoreCreate>
 800c212:	0002      	movs	r2, r0
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	4193      	sbcs	r3, r2
 800c220:	b2db      	uxtb	r3, r3
 800c222:	617b      	str	r3, [r7, #20]

    return ret;
 800c224:	697b      	ldr	r3, [r7, #20]
}
 800c226:	0018      	movs	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	b006      	add	sp, #24
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b082      	sub	sp, #8
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	0018      	movs	r0, r3
 800c23a:	f000 f9e7 	bl	800c60c <osSemaphoreDelete>
    return 1;
 800c23e:	2301      	movs	r3, #1
}
 800c240:	0018      	movs	r0, r3
 800c242:	46bd      	mov	sp, r7
 800c244:	b002      	add	sp, #8
 800c246:	bd80      	pop	{r7, pc}

0800c248 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c254:	23fa      	movs	r3, #250	@ 0xfa
 800c256:	009a      	lsls	r2, r3, #2
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	0011      	movs	r1, r2
 800c25c:	0018      	movs	r0, r3
 800c25e:	f000 f959 	bl	800c514 <osSemaphoreWait>
 800c262:	1e03      	subs	r3, r0, #0
 800c264:	d101      	bne.n	800c26a <ff_req_grant+0x22>
  {
    ret = 1;
 800c266:	2301      	movs	r3, #1
 800c268:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c26a:	68fb      	ldr	r3, [r7, #12]
}
 800c26c:	0018      	movs	r0, r3
 800c26e:	46bd      	mov	sp, r7
 800c270:	b004      	add	sp, #16
 800c272:	bd80      	pop	{r7, pc}

0800c274 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	0018      	movs	r0, r3
 800c280:	f000 f992 	bl	800c5a8 <osSemaphoreRelease>
}
 800c284:	46c0      	nop			@ (mov r8, r8)
 800c286:	46bd      	mov	sp, r7
 800c288:	b002      	add	sp, #8
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	0002      	movs	r2, r0
 800c294:	1dbb      	adds	r3, r7, #6
 800c296:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c298:	2300      	movs	r3, #0
 800c29a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c29c:	1dbb      	adds	r3, r7, #6
 800c29e:	2200      	movs	r2, #0
 800c2a0:	5e9b      	ldrsh	r3, [r3, r2]
 800c2a2:	2b84      	cmp	r3, #132	@ 0x84
 800c2a4:	d006      	beq.n	800c2b4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800c2a6:	1dbb      	adds	r3, r7, #6
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	5e9a      	ldrsh	r2, [r3, r2]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	18d3      	adds	r3, r2, r3
 800c2b0:	3303      	adds	r3, #3
 800c2b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
}
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	b004      	add	sp, #16
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c4:	f3ef 8305 	mrs	r3, IPSR
 800c2c8:	607b      	str	r3, [r7, #4]
  return(result);
 800c2ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c2cc:	1e5a      	subs	r2, r3, #1
 800c2ce:	4193      	sbcs	r3, r2
 800c2d0:	b2db      	uxtb	r3, r3
}
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	b002      	add	sp, #8
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c2de:	f001 fb11 	bl	800d904 <vTaskStartScheduler>
  
  return osOK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c2ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ec:	b089      	sub	sp, #36	@ 0x24
 800c2ee:	af04      	add	r7, sp, #16
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d020      	beq.n	800c33e <osThreadCreate+0x54>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d01c      	beq.n	800c33e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685c      	ldr	r4, [r3, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	691e      	ldr	r6, [r3, #16]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2208      	movs	r2, #8
 800c314:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c316:	0018      	movs	r0, r3
 800c318:	f7ff ffb8 	bl	800c28c <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	695a      	ldr	r2, [r3, #20]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	9201      	str	r2, [sp, #4]
 800c32a:	9000      	str	r0, [sp, #0]
 800c32c:	000b      	movs	r3, r1
 800c32e:	0032      	movs	r2, r6
 800c330:	0029      	movs	r1, r5
 800c332:	0020      	movs	r0, r4
 800c334:	f001 f96c 	bl	800d610 <xTaskCreateStatic>
 800c338:	0003      	movs	r3, r0
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	e01d      	b.n	800c37a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685c      	ldr	r4, [r3, #4]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c34a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2208      	movs	r2, #8
 800c350:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c352:	0018      	movs	r0, r3
 800c354:	f7ff ff9a 	bl	800c28c <makeFreeRtosPriority>
 800c358:	0001      	movs	r1, r0
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	230c      	movs	r3, #12
 800c35e:	18fb      	adds	r3, r7, r3
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	9100      	str	r1, [sp, #0]
 800c364:	0013      	movs	r3, r2
 800c366:	0032      	movs	r2, r6
 800c368:	0029      	movs	r1, r5
 800c36a:	0020      	movs	r0, r4
 800c36c:	f001 f997 	bl	800d69e <xTaskCreate>
 800c370:	0003      	movs	r3, r0
 800c372:	2b01      	cmp	r3, #1
 800c374:	d001      	beq.n	800c37a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	e000      	b.n	800c37c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c37a:	68fb      	ldr	r3, [r7, #12]
}
 800c37c:	0018      	movs	r0, r3
 800c37e:	46bd      	mov	sp, r7
 800c380:	b005      	add	sp, #20
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c384 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	0019      	movs	r1, r3
 800c39a:	2001      	movs	r0, #1
 800c39c:	f000 fbfe 	bl	800cb9c <xQueueCreateMutexStatic>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	e003      	b.n	800c3ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	f000 fbdd 	bl	800cb64 <xQueueCreateMutex>
 800c3aa:	0003      	movs	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c3ac:	0018      	movs	r0, r3
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	b002      	add	sp, #8
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <osMutexWait+0x18>
    return osErrorParameter;
 800c3c8:	2380      	movs	r3, #128	@ 0x80
 800c3ca:	e036      	b.n	800c43a <osMutexWait+0x86>
  }
  
  ticks = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	d103      	bne.n	800c3de <osMutexWait+0x2a>
    ticks = portMAX_DELAY;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	425b      	negs	r3, r3
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	e009      	b.n	800c3f2 <osMutexWait+0x3e>
  }
  else if (millisec != 0) {
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d006      	beq.n	800c3f2 <osMutexWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <osMutexWait+0x3e>
      ticks = 1;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c3f2:	f7ff ff64 	bl	800c2be <inHandlerMode>
 800c3f6:	1e03      	subs	r3, r0, #0
 800c3f8:	d013      	beq.n	800c422 <osMutexWait+0x6e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	18fa      	adds	r2, r7, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2100      	movs	r1, #0
 800c402:	0018      	movs	r0, r3
 800c404:	f000 ff24 	bl	800d250 <xQueueReceiveFromISR>
 800c408:	0003      	movs	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d001      	beq.n	800c412 <osMutexWait+0x5e>
      return osErrorOS;
 800c40e:	23ff      	movs	r3, #255	@ 0xff
 800c410:	e013      	b.n	800c43a <osMutexWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00f      	beq.n	800c438 <osMutexWait+0x84>
 800c418:	4b0a      	ldr	r3, [pc, #40]	@ (800c444 <osMutexWait+0x90>)
 800c41a:	2280      	movs	r2, #128	@ 0x80
 800c41c:	0552      	lsls	r2, r2, #21
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	e00a      	b.n	800c438 <osMutexWait+0x84>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	0011      	movs	r1, r2
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 fe33 	bl	800d094 <xQueueSemaphoreTake>
 800c42e:	0003      	movs	r3, r0
 800c430:	2b01      	cmp	r3, #1
 800c432:	d001      	beq.n	800c438 <osMutexWait+0x84>
    return osErrorOS;
 800c434:	23ff      	movs	r3, #255	@ 0xff
 800c436:	e000      	b.n	800c43a <osMutexWait+0x86>
  }
  
  return osOK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b004      	add	sp, #16
 800c440:	bd80      	pop	{r7, pc}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c450:	2300      	movs	r3, #0
 800c452:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c454:	2300      	movs	r3, #0
 800c456:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c458:	f7ff ff31 	bl	800c2be <inHandlerMode>
 800c45c:	1e03      	subs	r3, r0, #0
 800c45e:	d013      	beq.n	800c488 <osMutexRelease+0x40>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c460:	2308      	movs	r3, #8
 800c462:	18fa      	adds	r2, r7, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	0011      	movs	r1, r2
 800c468:	0018      	movs	r0, r3
 800c46a:	f000 fcf3 	bl	800ce54 <xQueueGiveFromISR>
 800c46e:	0003      	movs	r3, r0
 800c470:	2b01      	cmp	r3, #1
 800c472:	d001      	beq.n	800c478 <osMutexRelease+0x30>
      return osErrorOS;
 800c474:	23ff      	movs	r3, #255	@ 0xff
 800c476:	e013      	b.n	800c4a0 <osMutexRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00f      	beq.n	800c49e <osMutexRelease+0x56>
 800c47e:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <osMutexRelease+0x60>)
 800c480:	2280      	movs	r2, #128	@ 0x80
 800c482:	0552      	lsls	r2, r2, #21
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	e00a      	b.n	800c49e <osMutexRelease+0x56>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	2300      	movs	r3, #0
 800c48c:	2200      	movs	r2, #0
 800c48e:	2100      	movs	r1, #0
 800c490:	f000 fba4 	bl	800cbdc <xQueueGenericSend>
 800c494:	0003      	movs	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d001      	beq.n	800c49e <osMutexRelease+0x56>
  {
    result = osErrorOS;
 800c49a:	23ff      	movs	r3, #255	@ 0xff
 800c49c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c49e:	68fb      	ldr	r3, [r7, #12]
}
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b004      	add	sp, #16
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af02      	add	r7, sp, #8
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00f      	beq.n	800c4de <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d10a      	bne.n	800c4da <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	9200      	str	r2, [sp, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	f000 fa81 	bl	800c9d8 <xQueueGenericCreateStatic>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	e017      	b.n	800c50a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e015      	b.n	800c50a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d111      	bne.n	800c508 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f000 fac6 	bl	800ca7a <xQueueGenericCreate>
 800c4ee:	0003      	movs	r3, r0
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <osSemaphoreCreate+0x58>
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	f000 fb6c 	bl	800cbdc <xQueueGenericSend>
      return sema;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	e000      	b.n	800c50a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c508:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c50a:	0018      	movs	r0, r3
 800c50c:	46bd      	mov	sp, r7
 800c50e:	b004      	add	sp, #16
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c51e:	2300      	movs	r3, #0
 800c520:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c528:	2380      	movs	r3, #128	@ 0x80
 800c52a:	e036      	b.n	800c59a <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	d103      	bne.n	800c53e <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 800c536:	2301      	movs	r3, #1
 800c538:	425b      	negs	r3, r3
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	e009      	b.n	800c552 <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <osSemaphoreWait+0x3e>
      ticks = 1;
 800c54e:	2301      	movs	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c552:	f7ff feb4 	bl	800c2be <inHandlerMode>
 800c556:	1e03      	subs	r3, r0, #0
 800c558:	d013      	beq.n	800c582 <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c55a:	2308      	movs	r3, #8
 800c55c:	18fa      	adds	r2, r7, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2100      	movs	r1, #0
 800c562:	0018      	movs	r0, r3
 800c564:	f000 fe74 	bl	800d250 <xQueueReceiveFromISR>
 800c568:	0003      	movs	r3, r0
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d001      	beq.n	800c572 <osSemaphoreWait+0x5e>
      return osErrorOS;
 800c56e:	23ff      	movs	r3, #255	@ 0xff
 800c570:	e013      	b.n	800c59a <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00f      	beq.n	800c598 <osSemaphoreWait+0x84>
 800c578:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a4 <osSemaphoreWait+0x90>)
 800c57a:	2280      	movs	r2, #128	@ 0x80
 800c57c:	0552      	lsls	r2, r2, #21
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	e00a      	b.n	800c598 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	0011      	movs	r1, r2
 800c588:	0018      	movs	r0, r3
 800c58a:	f000 fd83 	bl	800d094 <xQueueSemaphoreTake>
 800c58e:	0003      	movs	r3, r0
 800c590:	2b01      	cmp	r3, #1
 800c592:	d001      	beq.n	800c598 <osSemaphoreWait+0x84>
    return osErrorOS;
 800c594:	23ff      	movs	r3, #255	@ 0xff
 800c596:	e000      	b.n	800c59a <osSemaphoreWait+0x86>
  }
  
  return osOK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	0018      	movs	r0, r3
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b004      	add	sp, #16
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	46c0      	nop			@ (mov r8, r8)
 800c5a4:	e000ed04 	.word	0xe000ed04

0800c5a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c5b8:	f7ff fe81 	bl	800c2be <inHandlerMode>
 800c5bc:	1e03      	subs	r3, r0, #0
 800c5be:	d013      	beq.n	800c5e8 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	18fa      	adds	r2, r7, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	0011      	movs	r1, r2
 800c5c8:	0018      	movs	r0, r3
 800c5ca:	f000 fc43 	bl	800ce54 <xQueueGiveFromISR>
 800c5ce:	0003      	movs	r3, r0
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d001      	beq.n	800c5d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c5d4:	23ff      	movs	r3, #255	@ 0xff
 800c5d6:	e013      	b.n	800c600 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00f      	beq.n	800c5fe <osSemaphoreRelease+0x56>
 800c5de:	4b0a      	ldr	r3, [pc, #40]	@ (800c608 <osSemaphoreRelease+0x60>)
 800c5e0:	2280      	movs	r2, #128	@ 0x80
 800c5e2:	0552      	lsls	r2, r2, #21
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	e00a      	b.n	800c5fe <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	f000 faf4 	bl	800cbdc <xQueueGenericSend>
 800c5f4:	0003      	movs	r3, r0
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d001      	beq.n	800c5fe <osSemaphoreRelease+0x56>
      result = osErrorOS;
 800c5fa:	23ff      	movs	r3, #255	@ 0xff
 800c5fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
}
 800c600:	0018      	movs	r0, r3
 800c602:	46bd      	mov	sp, r7
 800c604:	b004      	add	sp, #16
 800c606:	bd80      	pop	{r7, pc}
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c614:	f7ff fe53 	bl	800c2be <inHandlerMode>
 800c618:	1e03      	subs	r3, r0, #0
 800c61a:	d001      	beq.n	800c620 <osSemaphoreDelete+0x14>
    return osErrorISR;
 800c61c:	2382      	movs	r3, #130	@ 0x82
 800c61e:	e004      	b.n	800c62a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	0018      	movs	r0, r3
 800c624:	f000 fe79 	bl	800d31a <vQueueDelete>

  return osOK; 
 800c628:	2300      	movs	r3, #0
}
 800c62a:	0018      	movs	r0, r3
 800c62c:	46bd      	mov	sp, r7
 800c62e:	b002      	add	sp, #8
 800c630:	bd80      	pop	{r7, pc}

0800c632 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c632:	b590      	push	{r4, r7, lr}
 800c634:	b085      	sub	sp, #20
 800c636:	af02      	add	r7, sp, #8
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d011      	beq.n	800c668 <osMessageCreate+0x36>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00d      	beq.n	800c668 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6859      	ldr	r1, [r3, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	2400      	movs	r4, #0
 800c65e:	9400      	str	r4, [sp, #0]
 800c660:	f000 f9ba 	bl	800c9d8 <xQueueGenericCreateStatic>
 800c664:	0003      	movs	r3, r0
 800c666:	e008      	b.n	800c67a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	0019      	movs	r1, r3
 800c674:	f000 fa01 	bl	800ca7a <xQueueGenericCreate>
 800c678:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c67a:	0018      	movs	r0, r3
 800c67c:	46bd      	mov	sp, r7
 800c67e:	b003      	add	sp, #12
 800c680:	bd90      	pop	{r4, r7, pc}
	...

0800c684 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <osMessagePut+0x1e>
    ticks = 1;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c6a2:	f7ff fe0c 	bl	800c2be <inHandlerMode>
 800c6a6:	1e03      	subs	r3, r0, #0
 800c6a8:	d014      	beq.n	800c6d4 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c6aa:	2310      	movs	r3, #16
 800c6ac:	18fa      	adds	r2, r7, r3
 800c6ae:	2308      	movs	r3, #8
 800c6b0:	18f9      	adds	r1, r7, r3
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f000 fb59 	bl	800cd6c <xQueueGenericSendFromISR>
 800c6ba:	0003      	movs	r3, r0
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d001      	beq.n	800c6c4 <osMessagePut+0x40>
      return osErrorOS;
 800c6c0:	23ff      	movs	r3, #255	@ 0xff
 800c6c2:	e014      	b.n	800c6ee <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d010      	beq.n	800c6ec <osMessagePut+0x68>
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f8 <osMessagePut+0x74>)
 800c6cc:	2280      	movs	r2, #128	@ 0x80
 800c6ce:	0552      	lsls	r2, r2, #21
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	e00b      	b.n	800c6ec <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	2308      	movs	r3, #8
 800c6d8:	18f9      	adds	r1, r7, r3
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f000 fa7d 	bl	800cbdc <xQueueGenericSend>
 800c6e2:	0003      	movs	r3, r0
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d001      	beq.n	800c6ec <osMessagePut+0x68>
      return osErrorOS;
 800c6e8:	23ff      	movs	r3, #255	@ 0xff
 800c6ea:	e000      	b.n	800c6ee <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	b006      	add	sp, #24
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c6fc:	b590      	push	{r4, r7, lr}
 800c6fe:	b08b      	sub	sp, #44	@ 0x2c
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c708:	2114      	movs	r1, #20
 800c70a:	187b      	adds	r3, r7, r1
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 800c710:	187b      	adds	r3, r7, r1
 800c712:	2200      	movs	r2, #0
 800c714:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d107      	bne.n	800c72c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c71c:	187b      	adds	r3, r7, r1
 800c71e:	2280      	movs	r2, #128	@ 0x80
 800c720:	601a      	str	r2, [r3, #0]
    return event;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	187a      	adds	r2, r7, r1
 800c726:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c728:	c313      	stmia	r3!, {r0, r1, r4}
 800c72a:	e051      	b.n	800c7d0 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 800c72c:	2300      	movs	r3, #0
 800c72e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3301      	adds	r3, #1
 800c738:	d103      	bne.n	800c742 <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 800c73a:	2301      	movs	r3, #1
 800c73c:	425b      	negs	r3, r3
 800c73e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c740:	e009      	b.n	800c756 <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d006      	beq.n	800c756 <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800c74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <osMessageGet+0x5a>
      ticks = 1;
 800c752:	2301      	movs	r3, #1
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c756:	f7ff fdb2 	bl	800c2be <inHandlerMode>
 800c75a:	1e03      	subs	r3, r0, #0
 800c75c:	d01b      	beq.n	800c796 <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c75e:	2320      	movs	r3, #32
 800c760:	18fa      	adds	r2, r7, r3
 800c762:	2414      	movs	r4, #20
 800c764:	193b      	adds	r3, r7, r4
 800c766:	1d19      	adds	r1, r3, #4
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	0018      	movs	r0, r3
 800c76c:	f000 fd70 	bl	800d250 <xQueueReceiveFromISR>
 800c770:	0003      	movs	r3, r0
 800c772:	2b01      	cmp	r3, #1
 800c774:	d103      	bne.n	800c77e <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 800c776:	193b      	adds	r3, r7, r4
 800c778:	2210      	movs	r2, #16
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	e003      	b.n	800c786 <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800c77e:	2314      	movs	r3, #20
 800c780:	18fb      	adds	r3, r7, r3
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01c      	beq.n	800c7c6 <osMessageGet+0xca>
 800c78c:	4b12      	ldr	r3, [pc, #72]	@ (800c7d8 <osMessageGet+0xdc>)
 800c78e:	2280      	movs	r2, #128	@ 0x80
 800c790:	0552      	lsls	r2, r2, #21
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e017      	b.n	800c7c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c798:	2414      	movs	r4, #20
 800c79a:	193b      	adds	r3, r7, r4
 800c79c:	1d19      	adds	r1, r3, #4
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	f000 fbbf 	bl	800cf24 <xQueueReceive>
 800c7a6:	0003      	movs	r3, r0
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d103      	bne.n	800c7b4 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 800c7ac:	193b      	adds	r3, r7, r4
 800c7ae:	2210      	movs	r2, #16
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	e008      	b.n	800c7c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <osMessageGet+0xc2>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	e000      	b.n	800c7c0 <osMessageGet+0xc4>
 800c7be:	2240      	movs	r2, #64	@ 0x40
 800c7c0:	2314      	movs	r3, #20
 800c7c2:	18fb      	adds	r3, r7, r3
 800c7c4:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2214      	movs	r2, #20
 800c7ca:	18ba      	adds	r2, r7, r2
 800c7cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c7ce:	c313      	stmia	r3!, {r0, r1, r4}
}
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	b00b      	add	sp, #44	@ 0x2c
 800c7d6:	bd90      	pop	{r4, r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	001a      	movs	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	4252      	negs	r2, r2
 800c7f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	001a      	movs	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3308      	adds	r3, #8
 800c804:	001a      	movs	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c810:	46c0      	nop			@ (mov r8, r8)
 800c812:	46bd      	mov	sp, r7
 800c814:	b002      	add	sp, #8
 800c816:	bd80      	pop	{r7, pc}

0800c818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c826:	46c0      	nop			@ (mov r8, r8)
 800c828:	46bd      	mov	sp, r7
 800c82a:	b002      	add	sp, #8
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
}
 800c86a:	46c0      	nop			@ (mov r8, r8)
 800c86c:	46bd      	mov	sp, r7
 800c86e:	b004      	add	sp, #16
 800c870:	bd80      	pop	{r7, pc}

0800c872 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	3301      	adds	r3, #1
 800c886:	d103      	bne.n	800c890 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	60fb      	str	r3, [r7, #12]
 800c88e:	e00c      	b.n	800c8aa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3308      	adds	r3, #8
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e002      	b.n	800c89e <vListInsert+0x2c>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d2f6      	bcs.n	800c898 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
}
 800c8d6:	46c0      	nop			@ (mov r8, r8)
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	b004      	add	sp, #16
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	6892      	ldr	r2, [r2, #8]
 800c8f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6852      	ldr	r2, [r2, #4]
 800c8fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	429a      	cmp	r2, r3
 800c908:	d103      	bne.n	800c912 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689a      	ldr	r2, [r3, #8]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	1e5a      	subs	r2, r3, #1
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
}
 800c926:	0018      	movs	r0, r3
 800c928:	46bd      	mov	sp, r7
 800c92a:	b004      	add	sp, #16
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <xQueueGenericReset+0x1a>
 800c942:	b672      	cpsid	i
 800c944:	46c0      	nop			@ (mov r8, r8)
 800c946:	e7fd      	b.n	800c944 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800c948:	f001 fdd2 	bl	800e4f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c958:	434b      	muls	r3, r1
 800c95a:	18d2      	adds	r2, r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c976:	1e59      	subs	r1, r3, #1
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97c:	434b      	muls	r3, r1
 800c97e:	18d2      	adds	r2, r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2244      	movs	r2, #68	@ 0x44
 800c988:	21ff      	movs	r1, #255	@ 0xff
 800c98a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2245      	movs	r2, #69	@ 0x45
 800c990:	21ff      	movs	r1, #255	@ 0xff
 800c992:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10d      	bne.n	800c9b6 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d013      	beq.n	800c9ca <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3310      	adds	r3, #16
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f001 f9b4 	bl	800dd14 <xTaskRemoveFromEventList>
 800c9ac:	1e03      	subs	r3, r0, #0
 800c9ae:	d00c      	beq.n	800c9ca <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9b0:	f001 fd8e 	bl	800e4d0 <vPortYield>
 800c9b4:	e009      	b.n	800c9ca <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3310      	adds	r3, #16
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f7ff ff0e 	bl	800c7dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3324      	adds	r3, #36	@ 0x24
 800c9c4:	0018      	movs	r0, r3
 800c9c6:	f7ff ff09 	bl	800c7dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9ca:	f001 fda3 	bl	800e514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9ce:	2301      	movs	r3, #1
}
 800c9d0:	0018      	movs	r0, r3
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	b004      	add	sp, #16
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9d8:	b590      	push	{r4, r7, lr}
 800c9da:	b089      	sub	sp, #36	@ 0x24
 800c9dc:	af02      	add	r7, sp, #8
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d102      	bne.n	800c9f2 <xQueueGenericCreateStatic+0x1a>
 800c9ec:	b672      	cpsid	i
 800c9ee:	46c0      	nop			@ (mov r8, r8)
 800c9f0:	e7fd      	b.n	800c9ee <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <xQueueGenericCreateStatic+0x26>
 800c9f8:	b672      	cpsid	i
 800c9fa:	46c0      	nop			@ (mov r8, r8)
 800c9fc:	e7fd      	b.n	800c9fa <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <xQueueGenericCreateStatic+0x32>
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <xQueueGenericCreateStatic+0x36>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e000      	b.n	800ca10 <xQueueGenericCreateStatic+0x38>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <xQueueGenericCreateStatic+0x42>
 800ca14:	b672      	cpsid	i
 800ca16:	46c0      	nop			@ (mov r8, r8)
 800ca18:	e7fd      	b.n	800ca16 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <xQueueGenericCreateStatic+0x4e>
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <xQueueGenericCreateStatic+0x52>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <xQueueGenericCreateStatic+0x54>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <xQueueGenericCreateStatic+0x5e>
 800ca30:	b672      	cpsid	i
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	e7fd      	b.n	800ca32 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca36:	2348      	movs	r3, #72	@ 0x48
 800ca38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b48      	cmp	r3, #72	@ 0x48
 800ca3e:	d002      	beq.n	800ca46 <xQueueGenericCreateStatic+0x6e>
 800ca40:	b672      	cpsid	i
 800ca42:	46c0      	nop			@ (mov r8, r8)
 800ca44:	e7fd      	b.n	800ca42 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca46:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00e      	beq.n	800ca70 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2246      	movs	r2, #70	@ 0x46
 800ca56:	2101      	movs	r1, #1
 800ca58:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca5a:	2328      	movs	r3, #40	@ 0x28
 800ca5c:	18fb      	adds	r3, r7, r3
 800ca5e:	781c      	ldrb	r4, [r3, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	0023      	movs	r3, r4
 800ca6c:	f000 f83e 	bl	800caec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca70:	697b      	ldr	r3, [r7, #20]
	}
 800ca72:	0018      	movs	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b007      	add	sp, #28
 800ca78:	bd90      	pop	{r4, r7, pc}

0800ca7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca7a:	b590      	push	{r4, r7, lr}
 800ca7c:	b08b      	sub	sp, #44	@ 0x2c
 800ca7e:	af02      	add	r7, sp, #8
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	1dfb      	adds	r3, r7, #7
 800ca86:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <xQueueGenericCreate+0x1a>
 800ca8e:	b672      	cpsid	i
 800ca90:	46c0      	nop			@ (mov r8, r8)
 800ca92:	e7fd      	b.n	800ca90 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61fb      	str	r3, [r7, #28]
 800ca9e:	e003      	b.n	800caa8 <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	4353      	muls	r3, r2
 800caa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	3348      	adds	r3, #72	@ 0x48
 800caac:	0018      	movs	r0, r3
 800caae:	f001 fdb7 	bl	800e620 <pvPortMalloc>
 800cab2:	0003      	movs	r3, r0
 800cab4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d012      	beq.n	800cae2 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	3348      	adds	r3, #72	@ 0x48
 800cac4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	2246      	movs	r2, #70	@ 0x46
 800caca:	2100      	movs	r1, #0
 800cacc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cace:	1dfb      	adds	r3, r7, #7
 800cad0:	781c      	ldrb	r4, [r3, #0]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	68b9      	ldr	r1, [r7, #8]
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	0023      	movs	r3, r4
 800cade:	f000 f805 	bl	800caec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cae2:	69bb      	ldr	r3, [r7, #24]
	}
 800cae4:	0018      	movs	r0, r3
 800cae6:	46bd      	mov	sp, r7
 800cae8:	b009      	add	sp, #36	@ 0x24
 800caea:	bd90      	pop	{r4, r7, pc}

0800caec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	001a      	movs	r2, r3
 800cafa:	1cfb      	adds	r3, r7, #3
 800cafc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e002      	b.n	800cb12 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	2101      	movs	r1, #1
 800cb22:	0018      	movs	r0, r3
 800cb24:	f7ff ff03 	bl	800c92e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb28:	46c0      	nop			@ (mov r8, r8)
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	b004      	add	sp, #16
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00e      	beq.n	800cb5c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	2300      	movs	r3, #0
 800cb54:	2200      	movs	r2, #0
 800cb56:	2100      	movs	r1, #0
 800cb58:	f000 f840 	bl	800cbdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb5c:	46c0      	nop			@ (mov r8, r8)
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	b002      	add	sp, #8
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	0002      	movs	r2, r0
 800cb6c:	1dfb      	adds	r3, r7, #7
 800cb6e:	701a      	strb	r2, [r3, #0]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb70:	2301      	movs	r3, #1
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb78:	1dfb      	adds	r3, r7, #7
 800cb7a:	781a      	ldrb	r2, [r3, #0]
 800cb7c:	6939      	ldr	r1, [r7, #16]
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	0018      	movs	r0, r3
 800cb82:	f7ff ff7a 	bl	800ca7a <xQueueGenericCreate>
 800cb86:	0003      	movs	r3, r0
 800cb88:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	0018      	movs	r0, r3
 800cb8e:	f7ff ffcf 	bl	800cb30 <prvInitialiseMutex>

		return xNewQueue;
 800cb92:	68fb      	ldr	r3, [r7, #12]
	}
 800cb94:	0018      	movs	r0, r3
 800cb96:	46bd      	mov	sp, r7
 800cb98:	b006      	add	sp, #24
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	0002      	movs	r2, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	1dfb      	adds	r3, r7, #7
 800cba8:	701a      	strb	r2, [r3, #0]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	6939      	ldr	r1, [r7, #16]
 800cbb6:	6978      	ldr	r0, [r7, #20]
 800cbb8:	1dfb      	adds	r3, r7, #7
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	0013      	movs	r3, r2
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f7ff ff09 	bl	800c9d8 <xQueueGenericCreateStatic>
 800cbc6:	0003      	movs	r3, r0
 800cbc8:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	0018      	movs	r0, r3
 800cbce:	f7ff ffaf 	bl	800cb30 <prvInitialiseMutex>

		return xNewQueue;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
	}
 800cbd4:	0018      	movs	r0, r3
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	b006      	add	sp, #24
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08a      	sub	sp, #40	@ 0x28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbea:	2300      	movs	r3, #0
 800cbec:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <xQueueGenericSend+0x22>
 800cbf8:	b672      	cpsid	i
 800cbfa:	46c0      	nop			@ (mov r8, r8)
 800cbfc:	e7fd      	b.n	800cbfa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d103      	bne.n	800cc0c <xQueueGenericSend+0x30>
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <xQueueGenericSend+0x34>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e000      	b.n	800cc12 <xQueueGenericSend+0x36>
 800cc10:	2300      	movs	r3, #0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d102      	bne.n	800cc1c <xQueueGenericSend+0x40>
 800cc16:	b672      	cpsid	i
 800cc18:	46c0      	nop			@ (mov r8, r8)
 800cc1a:	e7fd      	b.n	800cc18 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d103      	bne.n	800cc2a <xQueueGenericSend+0x4e>
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d101      	bne.n	800cc2e <xQueueGenericSend+0x52>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <xQueueGenericSend+0x54>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d102      	bne.n	800cc3a <xQueueGenericSend+0x5e>
 800cc34:	b672      	cpsid	i
 800cc36:	46c0      	nop			@ (mov r8, r8)
 800cc38:	e7fd      	b.n	800cc36 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc3a:	f001 fa03 	bl	800e044 <xTaskGetSchedulerState>
 800cc3e:	1e03      	subs	r3, r0, #0
 800cc40:	d102      	bne.n	800cc48 <xQueueGenericSend+0x6c>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d101      	bne.n	800cc4c <xQueueGenericSend+0x70>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <xQueueGenericSend+0x72>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <xQueueGenericSend+0x7c>
 800cc52:	b672      	cpsid	i
 800cc54:	46c0      	nop			@ (mov r8, r8)
 800cc56:	e7fd      	b.n	800cc54 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc58:	f001 fc4a 	bl	800e4f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d302      	bcc.n	800cc6e <xQueueGenericSend+0x92>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d11e      	bne.n	800ccac <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	0018      	movs	r0, r3
 800cc76:	f000 fb83 	bl	800d380 <prvCopyDataToQueue>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d009      	beq.n	800cc9a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	3324      	adds	r3, #36	@ 0x24
 800cc8a:	0018      	movs	r0, r3
 800cc8c:	f001 f842 	bl	800dd14 <xTaskRemoveFromEventList>
 800cc90:	1e03      	subs	r3, r0, #0
 800cc92:	d007      	beq.n	800cca4 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc94:	f001 fc1c 	bl	800e4d0 <vPortYield>
 800cc98:	e004      	b.n	800cca4 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cca0:	f001 fc16 	bl	800e4d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cca4:	f001 fc36 	bl	800e514 <vPortExitCritical>
				return pdPASS;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e05b      	b.n	800cd64 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccb2:	f001 fc2f 	bl	800e514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e054      	b.n	800cd64 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d106      	bne.n	800ccce <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccc0:	2314      	movs	r3, #20
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f001 f883 	bl	800ddd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccca:	2301      	movs	r3, #1
 800cccc:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccce:	f001 fc21 	bl	800e514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccd2:	f000 fe65 	bl	800d9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccd6:	f001 fc0b 	bl	800e4f0 <vPortEnterCritical>
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	2244      	movs	r2, #68	@ 0x44
 800ccde:	5c9b      	ldrb	r3, [r3, r2]
 800cce0:	b25b      	sxtb	r3, r3
 800cce2:	3301      	adds	r3, #1
 800cce4:	d103      	bne.n	800ccee <xQueueGenericSend+0x112>
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	2244      	movs	r2, #68	@ 0x44
 800ccea:	2100      	movs	r1, #0
 800ccec:	5499      	strb	r1, [r3, r2]
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	2245      	movs	r2, #69	@ 0x45
 800ccf2:	5c9b      	ldrb	r3, [r3, r2]
 800ccf4:	b25b      	sxtb	r3, r3
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	d103      	bne.n	800cd02 <xQueueGenericSend+0x126>
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	2245      	movs	r2, #69	@ 0x45
 800ccfe:	2100      	movs	r1, #0
 800cd00:	5499      	strb	r1, [r3, r2]
 800cd02:	f001 fc07 	bl	800e514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd06:	1d3a      	adds	r2, r7, #4
 800cd08:	2314      	movs	r3, #20
 800cd0a:	18fb      	adds	r3, r7, r3
 800cd0c:	0011      	movs	r1, r2
 800cd0e:	0018      	movs	r0, r3
 800cd10:	f001 f872 	bl	800ddf8 <xTaskCheckForTimeOut>
 800cd14:	1e03      	subs	r3, r0, #0
 800cd16:	d11e      	bne.n	800cd56 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	0018      	movs	r0, r3
 800cd1c:	f000 fc35 	bl	800d58a <prvIsQueueFull>
 800cd20:	1e03      	subs	r3, r0, #0
 800cd22:	d011      	beq.n	800cd48 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	3310      	adds	r3, #16
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	0011      	movs	r1, r2
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	f000 ffd1 	bl	800dcd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	0018      	movs	r0, r3
 800cd36:	f000 fbb4 	bl	800d4a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd3a:	f000 fe3d 	bl	800d9b8 <xTaskResumeAll>
 800cd3e:	1e03      	subs	r3, r0, #0
 800cd40:	d18a      	bne.n	800cc58 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800cd42:	f001 fbc5 	bl	800e4d0 <vPortYield>
 800cd46:	e787      	b.n	800cc58 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f000 fba9 	bl	800d4a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd50:	f000 fe32 	bl	800d9b8 <xTaskResumeAll>
 800cd54:	e780      	b.n	800cc58 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f000 fba2 	bl	800d4a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd5e:	f000 fe2b 	bl	800d9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd64:	0018      	movs	r0, r3
 800cd66:	46bd      	mov	sp, r7
 800cd68:	b00a      	add	sp, #40	@ 0x28
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b089      	sub	sp, #36	@ 0x24
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <xQueueGenericSendFromISR+0x1e>
 800cd84:	b672      	cpsid	i
 800cd86:	46c0      	nop			@ (mov r8, r8)
 800cd88:	e7fd      	b.n	800cd86 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <xQueueGenericSendFromISR+0x2c>
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <xQueueGenericSendFromISR+0x30>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e000      	b.n	800cd9e <xQueueGenericSendFromISR+0x32>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <xQueueGenericSendFromISR+0x3c>
 800cda2:	b672      	cpsid	i
 800cda4:	46c0      	nop			@ (mov r8, r8)
 800cda6:	e7fd      	b.n	800cda4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d103      	bne.n	800cdb6 <xQueueGenericSendFromISR+0x4a>
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <xQueueGenericSendFromISR+0x4e>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <xQueueGenericSendFromISR+0x50>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d102      	bne.n	800cdc6 <xQueueGenericSendFromISR+0x5a>
 800cdc0:	b672      	cpsid	i
 800cdc2:	46c0      	nop			@ (mov r8, r8)
 800cdc4:	e7fd      	b.n	800cdc2 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdc6:	f001 fbbd 	bl	800e544 <ulSetInterruptMaskFromISR>
 800cdca:	0003      	movs	r3, r0
 800cdcc:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d302      	bcc.n	800cde0 <xQueueGenericSendFromISR+0x74>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d12e      	bne.n	800ce3e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cde0:	2413      	movs	r4, #19
 800cde2:	193b      	adds	r3, r7, r4
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	2145      	movs	r1, #69	@ 0x45
 800cde8:	5c52      	ldrb	r2, [r2, r1]
 800cdea:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	0018      	movs	r0, r3
 800cdf4:	f000 fac4 	bl	800d380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdf8:	193b      	adds	r3, r7, r4
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	b25b      	sxtb	r3, r3
 800cdfe:	3301      	adds	r3, #1
 800ce00:	d111      	bne.n	800ce26 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d016      	beq.n	800ce38 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	3324      	adds	r3, #36	@ 0x24
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f000 ff80 	bl	800dd14 <xTaskRemoveFromEventList>
 800ce14:	1e03      	subs	r3, r0, #0
 800ce16:	d00f      	beq.n	800ce38 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00c      	beq.n	800ce38 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	e008      	b.n	800ce38 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce26:	2313      	movs	r3, #19
 800ce28:	18fb      	adds	r3, r7, r3
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	b259      	sxtb	r1, r3
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2245      	movs	r2, #69	@ 0x45
 800ce36:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	61fb      	str	r3, [r7, #28]
		{
 800ce3c:	e001      	b.n	800ce42 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	0018      	movs	r0, r3
 800ce46:	f001 fb83 	bl	800e550 <vClearInterruptMaskFromISR>

	return xReturn;
 800ce4a:	69fb      	ldr	r3, [r7, #28]
}
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	b009      	add	sp, #36	@ 0x24
 800ce52:	bd90      	pop	{r4, r7, pc}

0800ce54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <xQueueGiveFromISR+0x1a>
 800ce68:	b672      	cpsid	i
 800ce6a:	46c0      	nop			@ (mov r8, r8)
 800ce6c:	e7fd      	b.n	800ce6a <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <xQueueGiveFromISR+0x28>
 800ce76:	b672      	cpsid	i
 800ce78:	46c0      	nop			@ (mov r8, r8)
 800ce7a:	e7fd      	b.n	800ce78 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <xQueueGiveFromISR+0x38>
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <xQueueGiveFromISR+0x3c>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <xQueueGiveFromISR+0x3e>
 800ce90:	2300      	movs	r3, #0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d102      	bne.n	800ce9c <xQueueGiveFromISR+0x48>
 800ce96:	b672      	cpsid	i
 800ce98:	46c0      	nop			@ (mov r8, r8)
 800ce9a:	e7fd      	b.n	800ce98 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce9c:	f001 fb52 	bl	800e544 <ulSetInterruptMaskFromISR>
 800cea0:	0003      	movs	r3, r0
 800cea2:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d22c      	bcs.n	800cf0e <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ceb4:	200f      	movs	r0, #15
 800ceb6:	183b      	adds	r3, r7, r0
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	2145      	movs	r1, #69	@ 0x45
 800cebc:	5c52      	ldrb	r2, [r2, r1]
 800cebe:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cec8:	183b      	adds	r3, r7, r0
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	b25b      	sxtb	r3, r3
 800cece:	3301      	adds	r3, #1
 800ced0:	d111      	bne.n	800cef6 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d016      	beq.n	800cf08 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	3324      	adds	r3, #36	@ 0x24
 800cede:	0018      	movs	r0, r3
 800cee0:	f000 ff18 	bl	800dd14 <xTaskRemoveFromEventList>
 800cee4:	1e03      	subs	r3, r0, #0
 800cee6:	d00f      	beq.n	800cf08 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00c      	beq.n	800cf08 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2201      	movs	r2, #1
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	e008      	b.n	800cf08 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cef6:	230f      	movs	r3, #15
 800cef8:	18fb      	adds	r3, r7, r3
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	3301      	adds	r3, #1
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	b259      	sxtb	r1, r3
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	2245      	movs	r2, #69	@ 0x45
 800cf06:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	61fb      	str	r3, [r7, #28]
 800cf0c:	e001      	b.n	800cf12 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	0018      	movs	r0, r3
 800cf16:	f001 fb1b 	bl	800e550 <vClearInterruptMaskFromISR>

	return xReturn;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
}
 800cf1c:	0018      	movs	r0, r3
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	b008      	add	sp, #32
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	@ 0x28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <xQueueReceive+0x20>
 800cf3e:	b672      	cpsid	i
 800cf40:	46c0      	nop			@ (mov r8, r8)
 800cf42:	e7fd      	b.n	800cf40 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d103      	bne.n	800cf52 <xQueueReceive+0x2e>
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <xQueueReceive+0x32>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e000      	b.n	800cf58 <xQueueReceive+0x34>
 800cf56:	2300      	movs	r3, #0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d102      	bne.n	800cf62 <xQueueReceive+0x3e>
 800cf5c:	b672      	cpsid	i
 800cf5e:	46c0      	nop			@ (mov r8, r8)
 800cf60:	e7fd      	b.n	800cf5e <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf62:	f001 f86f 	bl	800e044 <xTaskGetSchedulerState>
 800cf66:	1e03      	subs	r3, r0, #0
 800cf68:	d102      	bne.n	800cf70 <xQueueReceive+0x4c>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <xQueueReceive+0x50>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <xQueueReceive+0x52>
 800cf74:	2300      	movs	r3, #0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d102      	bne.n	800cf80 <xQueueReceive+0x5c>
 800cf7a:	b672      	cpsid	i
 800cf7c:	46c0      	nop			@ (mov r8, r8)
 800cf7e:	e7fd      	b.n	800cf7c <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf80:	f001 fab6 	bl	800e4f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf88:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d01a      	beq.n	800cfc6 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	0011      	movs	r1, r2
 800cf96:	0018      	movs	r0, r3
 800cf98:	f000 fa5d 	bl	800d456 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	1e5a      	subs	r2, r3, #1
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d008      	beq.n	800cfbe <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfac:	6a3b      	ldr	r3, [r7, #32]
 800cfae:	3310      	adds	r3, #16
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f000 feaf 	bl	800dd14 <xTaskRemoveFromEventList>
 800cfb6:	1e03      	subs	r3, r0, #0
 800cfb8:	d001      	beq.n	800cfbe <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfba:	f001 fa89 	bl	800e4d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfbe:	f001 faa9 	bl	800e514 <vPortExitCritical>
				return pdPASS;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e062      	b.n	800d08c <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d103      	bne.n	800cfd4 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfcc:	f001 faa2 	bl	800e514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e05b      	b.n	800d08c <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d106      	bne.n	800cfe8 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfda:	2314      	movs	r3, #20
 800cfdc:	18fb      	adds	r3, r7, r3
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f000 fef6 	bl	800ddd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfe8:	f001 fa94 	bl	800e514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfec:	f000 fcd8 	bl	800d9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cff0:	f001 fa7e 	bl	800e4f0 <vPortEnterCritical>
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	2244      	movs	r2, #68	@ 0x44
 800cff8:	5c9b      	ldrb	r3, [r3, r2]
 800cffa:	b25b      	sxtb	r3, r3
 800cffc:	3301      	adds	r3, #1
 800cffe:	d103      	bne.n	800d008 <xQueueReceive+0xe4>
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	2244      	movs	r2, #68	@ 0x44
 800d004:	2100      	movs	r1, #0
 800d006:	5499      	strb	r1, [r3, r2]
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	2245      	movs	r2, #69	@ 0x45
 800d00c:	5c9b      	ldrb	r3, [r3, r2]
 800d00e:	b25b      	sxtb	r3, r3
 800d010:	3301      	adds	r3, #1
 800d012:	d103      	bne.n	800d01c <xQueueReceive+0xf8>
 800d014:	6a3b      	ldr	r3, [r7, #32]
 800d016:	2245      	movs	r2, #69	@ 0x45
 800d018:	2100      	movs	r1, #0
 800d01a:	5499      	strb	r1, [r3, r2]
 800d01c:	f001 fa7a 	bl	800e514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d020:	1d3a      	adds	r2, r7, #4
 800d022:	2314      	movs	r3, #20
 800d024:	18fb      	adds	r3, r7, r3
 800d026:	0011      	movs	r1, r2
 800d028:	0018      	movs	r0, r3
 800d02a:	f000 fee5 	bl	800ddf8 <xTaskCheckForTimeOut>
 800d02e:	1e03      	subs	r3, r0, #0
 800d030:	d11e      	bne.n	800d070 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	0018      	movs	r0, r3
 800d036:	f000 fa92 	bl	800d55e <prvIsQueueEmpty>
 800d03a:	1e03      	subs	r3, r0, #0
 800d03c:	d011      	beq.n	800d062 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	3324      	adds	r3, #36	@ 0x24
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	0011      	movs	r1, r2
 800d046:	0018      	movs	r0, r3
 800d048:	f000 fe44 	bl	800dcd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	0018      	movs	r0, r3
 800d050:	f000 fa27 	bl	800d4a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d054:	f000 fcb0 	bl	800d9b8 <xTaskResumeAll>
 800d058:	1e03      	subs	r3, r0, #0
 800d05a:	d191      	bne.n	800cf80 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800d05c:	f001 fa38 	bl	800e4d0 <vPortYield>
 800d060:	e78e      	b.n	800cf80 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	0018      	movs	r0, r3
 800d066:	f000 fa1c 	bl	800d4a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d06a:	f000 fca5 	bl	800d9b8 <xTaskResumeAll>
 800d06e:	e787      	b.n	800cf80 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	0018      	movs	r0, r3
 800d074:	f000 fa15 	bl	800d4a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d078:	f000 fc9e 	bl	800d9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	0018      	movs	r0, r3
 800d080:	f000 fa6d 	bl	800d55e <prvIsQueueEmpty>
 800d084:	1e03      	subs	r3, r0, #0
 800d086:	d100      	bne.n	800d08a <xQueueReceive+0x166>
 800d088:	e77a      	b.n	800cf80 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d08a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d08c:	0018      	movs	r0, r3
 800d08e:	46bd      	mov	sp, r7
 800d090:	b00a      	add	sp, #40	@ 0x28
 800d092:	bd80      	pop	{r7, pc}

0800d094 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08a      	sub	sp, #40	@ 0x28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <xQueueSemaphoreTake+0x22>
 800d0b0:	b672      	cpsid	i
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	e7fd      	b.n	800d0b2 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <xQueueSemaphoreTake+0x30>
 800d0be:	b672      	cpsid	i
 800d0c0:	46c0      	nop			@ (mov r8, r8)
 800d0c2:	e7fd      	b.n	800d0c0 <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0c4:	f000 ffbe 	bl	800e044 <xTaskGetSchedulerState>
 800d0c8:	1e03      	subs	r3, r0, #0
 800d0ca:	d102      	bne.n	800d0d2 <xQueueSemaphoreTake+0x3e>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <xQueueSemaphoreTake+0x42>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e000      	b.n	800d0d8 <xQueueSemaphoreTake+0x44>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d102      	bne.n	800d0e2 <xQueueSemaphoreTake+0x4e>
 800d0dc:	b672      	cpsid	i
 800d0de:	46c0      	nop			@ (mov r8, r8)
 800d0e0:	e7fd      	b.n	800d0de <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0e2:	f001 fa05 	bl	800e4f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0ea:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d01d      	beq.n	800d12e <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	1e5a      	subs	r2, r3, #1
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d104      	bne.n	800d10c <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d102:	f001 f8f3 	bl	800e2ec <pvTaskIncrementMutexHeldCount>
 800d106:	0002      	movs	r2, r0
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d008      	beq.n	800d126 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	3310      	adds	r3, #16
 800d118:	0018      	movs	r0, r3
 800d11a:	f000 fdfb 	bl	800dd14 <xTaskRemoveFromEventList>
 800d11e:	1e03      	subs	r3, r0, #0
 800d120:	d001      	beq.n	800d126 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d122:	f001 f9d5 	bl	800e4d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d126:	f001 f9f5 	bl	800e514 <vPortExitCritical>
				return pdPASS;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e08c      	b.n	800d248 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d109      	bne.n	800d148 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <xQueueSemaphoreTake+0xac>
 800d13a:	b672      	cpsid	i
 800d13c:	46c0      	nop			@ (mov r8, r8)
 800d13e:	e7fd      	b.n	800d13c <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d140:	f001 f9e8 	bl	800e514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d144:	2300      	movs	r3, #0
 800d146:	e07f      	b.n	800d248 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d106      	bne.n	800d15c <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d14e:	230c      	movs	r3, #12
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	0018      	movs	r0, r3
 800d154:	f000 fe3c 	bl	800ddd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d158:	2301      	movs	r3, #1
 800d15a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d15c:	f001 f9da 	bl	800e514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d160:	f000 fc1e 	bl	800d9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d164:	f001 f9c4 	bl	800e4f0 <vPortEnterCritical>
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2244      	movs	r2, #68	@ 0x44
 800d16c:	5c9b      	ldrb	r3, [r3, r2]
 800d16e:	b25b      	sxtb	r3, r3
 800d170:	3301      	adds	r3, #1
 800d172:	d103      	bne.n	800d17c <xQueueSemaphoreTake+0xe8>
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2244      	movs	r2, #68	@ 0x44
 800d178:	2100      	movs	r1, #0
 800d17a:	5499      	strb	r1, [r3, r2]
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	2245      	movs	r2, #69	@ 0x45
 800d180:	5c9b      	ldrb	r3, [r3, r2]
 800d182:	b25b      	sxtb	r3, r3
 800d184:	3301      	adds	r3, #1
 800d186:	d103      	bne.n	800d190 <xQueueSemaphoreTake+0xfc>
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2245      	movs	r2, #69	@ 0x45
 800d18c:	2100      	movs	r1, #0
 800d18e:	5499      	strb	r1, [r3, r2]
 800d190:	f001 f9c0 	bl	800e514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d194:	003a      	movs	r2, r7
 800d196:	230c      	movs	r3, #12
 800d198:	18fb      	adds	r3, r7, r3
 800d19a:	0011      	movs	r1, r2
 800d19c:	0018      	movs	r0, r3
 800d19e:	f000 fe2b 	bl	800ddf8 <xTaskCheckForTimeOut>
 800d1a2:	1e03      	subs	r3, r0, #0
 800d1a4:	d12e      	bne.n	800d204 <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f000 f9d8 	bl	800d55e <prvIsQueueEmpty>
 800d1ae:	1e03      	subs	r3, r0, #0
 800d1b0:	d021      	beq.n	800d1f6 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10a      	bne.n	800d1d0 <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 800d1ba:	f001 f999 	bl	800e4f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	0018      	movs	r0, r3
 800d1c4:	f000 ff5a 	bl	800e07c <xTaskPriorityInherit>
 800d1c8:	0003      	movs	r3, r0
 800d1ca:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800d1cc:	f001 f9a2 	bl	800e514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	3324      	adds	r3, #36	@ 0x24
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	0011      	movs	r1, r2
 800d1d8:	0018      	movs	r0, r3
 800d1da:	f000 fd7b 	bl	800dcd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f000 f95e 	bl	800d4a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e6:	f000 fbe7 	bl	800d9b8 <xTaskResumeAll>
 800d1ea:	1e03      	subs	r3, r0, #0
 800d1ec:	d000      	beq.n	800d1f0 <xQueueSemaphoreTake+0x15c>
 800d1ee:	e778      	b.n	800d0e2 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 800d1f0:	f001 f96e 	bl	800e4d0 <vPortYield>
 800d1f4:	e775      	b.n	800d0e2 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f000 f952 	bl	800d4a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1fe:	f000 fbdb 	bl	800d9b8 <xTaskResumeAll>
 800d202:	e76e      	b.n	800d0e2 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	0018      	movs	r0, r3
 800d208:	f000 f94b 	bl	800d4a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d20c:	f000 fbd4 	bl	800d9b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	0018      	movs	r0, r3
 800d214:	f000 f9a3 	bl	800d55e <prvIsQueueEmpty>
 800d218:	1e03      	subs	r3, r0, #0
 800d21a:	d100      	bne.n	800d21e <xQueueSemaphoreTake+0x18a>
 800d21c:	e761      	b.n	800d0e2 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d010      	beq.n	800d246 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 800d224:	f001 f964 	bl	800e4f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	0018      	movs	r0, r3
 800d22c:	f000 f892 	bl	800d354 <prvGetDisinheritPriorityAfterTimeout>
 800d230:	0003      	movs	r3, r0
 800d232:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	0011      	movs	r1, r2
 800d23c:	0018      	movs	r0, r3
 800d23e:	f000 ffe3 	bl	800e208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d242:	f001 f967 	bl	800e514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d246:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d248:	0018      	movs	r0, r3
 800d24a:	46bd      	mov	sp, r7
 800d24c:	b00a      	add	sp, #40	@ 0x28
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d250:	b590      	push	{r4, r7, lr}
 800d252:	b08b      	sub	sp, #44	@ 0x2c
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <xQueueReceiveFromISR+0x1c>
 800d266:	b672      	cpsid	i
 800d268:	46c0      	nop			@ (mov r8, r8)
 800d26a:	e7fd      	b.n	800d268 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <xQueueReceiveFromISR+0x2a>
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <xQueueReceiveFromISR+0x2e>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e000      	b.n	800d280 <xQueueReceiveFromISR+0x30>
 800d27e:	2300      	movs	r3, #0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d102      	bne.n	800d28a <xQueueReceiveFromISR+0x3a>
 800d284:	b672      	cpsid	i
 800d286:	46c0      	nop			@ (mov r8, r8)
 800d288:	e7fd      	b.n	800d286 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d28a:	f001 f95b 	bl	800e544 <ulSetInterruptMaskFromISR>
 800d28e:	0003      	movs	r3, r0
 800d290:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d296:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d032      	beq.n	800d304 <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d29e:	2417      	movs	r4, #23
 800d2a0:	193b      	adds	r3, r7, r4
 800d2a2:	6a3a      	ldr	r2, [r7, #32]
 800d2a4:	2144      	movs	r1, #68	@ 0x44
 800d2a6:	5c52      	ldrb	r2, [r2, r1]
 800d2a8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	0011      	movs	r1, r2
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f000 f8d0 	bl	800d456 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2be:	193b      	adds	r3, r7, r4
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b25b      	sxtb	r3, r3
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	d111      	bne.n	800d2ec <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d016      	beq.n	800d2fe <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	3310      	adds	r3, #16
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f000 fd1d 	bl	800dd14 <xTaskRemoveFromEventList>
 800d2da:	1e03      	subs	r3, r0, #0
 800d2dc:	d00f      	beq.n	800d2fe <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00c      	beq.n	800d2fe <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	e008      	b.n	800d2fe <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2ec:	2317      	movs	r3, #23
 800d2ee:	18fb      	adds	r3, r7, r3
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	b259      	sxtb	r1, r3
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	2244      	movs	r2, #68	@ 0x44
 800d2fc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800d2fe:	2301      	movs	r3, #1
 800d300:	627b      	str	r3, [r7, #36]	@ 0x24
 800d302:	e001      	b.n	800d308 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 800d304:	2300      	movs	r3, #0
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	0018      	movs	r0, r3
 800d30c:	f001 f920 	bl	800e550 <vClearInterruptMaskFromISR>

	return xReturn;
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d312:	0018      	movs	r0, r3
 800d314:	46bd      	mov	sp, r7
 800d316:	b00b      	add	sp, #44	@ 0x2c
 800d318:	bd90      	pop	{r4, r7, pc}

0800d31a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <vQueueDelete+0x18>
 800d32c:	b672      	cpsid	i
 800d32e:	46c0      	nop			@ (mov r8, r8)
 800d330:	e7fd      	b.n	800d32e <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	0018      	movs	r0, r3
 800d336:	f000 f941 	bl	800d5bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2246      	movs	r2, #70	@ 0x46
 800d33e:	5c9b      	ldrb	r3, [r3, r2]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <vQueueDelete+0x32>
		{
			vPortFree( pxQueue );
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	0018      	movs	r0, r3
 800d348:	f001 fa12 	bl	800e770 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d34c:	46c0      	nop			@ (mov r8, r8)
 800d34e:	46bd      	mov	sp, r7
 800d350:	b004      	add	sp, #16
 800d352:	bd80      	pop	{r7, pc}

0800d354 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	d006      	beq.n	800d372 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2207      	movs	r2, #7
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	e001      	b.n	800d376 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d372:	2300      	movs	r3, #0
 800d374:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d376:	68fb      	ldr	r3, [r7, #12]
	}
 800d378:	0018      	movs	r0, r3
 800d37a:	46bd      	mov	sp, r7
 800d37c:	b004      	add	sp, #16
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10e      	bne.n	800d3bc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d14e      	bne.n	800d444 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	0018      	movs	r0, r3
 800d3ac:	f000 fece 	bl	800e14c <xTaskPriorityDisinherit>
 800d3b0:	0003      	movs	r3, r0
 800d3b2:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	609a      	str	r2, [r3, #8]
 800d3ba:	e043      	b.n	800d444 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d119      	bne.n	800d3f6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6858      	ldr	r0, [r3, #4]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	0019      	movs	r1, r3
 800d3ce:	f002 fb37 	bl	800fa40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3da:	18d2      	adds	r2, r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d32b      	bcc.n	800d444 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	605a      	str	r2, [r3, #4]
 800d3f4:	e026      	b.n	800d444 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68d8      	ldr	r0, [r3, #12]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	0019      	movs	r1, r3
 800d402:	f002 fb1d 	bl	800fa40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	68da      	ldr	r2, [r3, #12]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d40e:	425b      	negs	r3, r3
 800d410:	18d2      	adds	r2, r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	68da      	ldr	r2, [r3, #12]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d207      	bcs.n	800d432 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	689a      	ldr	r2, [r3, #8]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d42a:	425b      	negs	r3, r3
 800d42c:	18d2      	adds	r2, r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b02      	cmp	r3, #2
 800d436:	d105      	bne.n	800d444 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	3b01      	subs	r3, #1
 800d442:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d44c:	697b      	ldr	r3, [r7, #20]
}
 800d44e:	0018      	movs	r0, r3
 800d450:	46bd      	mov	sp, r7
 800d452:	b006      	add	sp, #24
 800d454:	bd80      	pop	{r7, pc}

0800d456 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d464:	2b00      	cmp	r3, #0
 800d466:	d018      	beq.n	800d49a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68da      	ldr	r2, [r3, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d470:	18d2      	adds	r2, r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d303      	bcc.n	800d48a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68d9      	ldr	r1, [r3, #12]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	0018      	movs	r0, r3
 800d496:	f002 fad3 	bl	800fa40 <memcpy>
	}
}
 800d49a:	46c0      	nop			@ (mov r8, r8)
 800d49c:	46bd      	mov	sp, r7
 800d49e:	b002      	add	sp, #8
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4aa:	f001 f821 	bl	800e4f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4ae:	230f      	movs	r3, #15
 800d4b0:	18fb      	adds	r3, r7, r3
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	2145      	movs	r1, #69	@ 0x45
 800d4b6:	5c52      	ldrb	r2, [r2, r1]
 800d4b8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ba:	e013      	b.n	800d4e4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d016      	beq.n	800d4f2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3324      	adds	r3, #36	@ 0x24
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	f000 fc23 	bl	800dd14 <xTaskRemoveFromEventList>
 800d4ce:	1e03      	subs	r3, r0, #0
 800d4d0:	d001      	beq.n	800d4d6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4d2:	f000 fce3 	bl	800de9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4d6:	210f      	movs	r1, #15
 800d4d8:	187b      	adds	r3, r7, r1
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	187b      	adds	r3, r7, r1
 800d4e2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4e4:	230f      	movs	r3, #15
 800d4e6:	18fb      	adds	r3, r7, r3
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b25b      	sxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	dce5      	bgt.n	800d4bc <prvUnlockQueue+0x1a>
 800d4f0:	e000      	b.n	800d4f4 <prvUnlockQueue+0x52>
					break;
 800d4f2:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2245      	movs	r2, #69	@ 0x45
 800d4f8:	21ff      	movs	r1, #255	@ 0xff
 800d4fa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800d4fc:	f001 f80a 	bl	800e514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d500:	f000 fff6 	bl	800e4f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d504:	230e      	movs	r3, #14
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	2144      	movs	r1, #68	@ 0x44
 800d50c:	5c52      	ldrb	r2, [r2, r1]
 800d50e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d510:	e013      	b.n	800d53a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d016      	beq.n	800d548 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3310      	adds	r3, #16
 800d51e:	0018      	movs	r0, r3
 800d520:	f000 fbf8 	bl	800dd14 <xTaskRemoveFromEventList>
 800d524:	1e03      	subs	r3, r0, #0
 800d526:	d001      	beq.n	800d52c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800d528:	f000 fcb8 	bl	800de9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d52c:	210e      	movs	r1, #14
 800d52e:	187b      	adds	r3, r7, r1
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	3b01      	subs	r3, #1
 800d534:	b2da      	uxtb	r2, r3
 800d536:	187b      	adds	r3, r7, r1
 800d538:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d53a:	230e      	movs	r3, #14
 800d53c:	18fb      	adds	r3, r7, r3
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	b25b      	sxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	dce5      	bgt.n	800d512 <prvUnlockQueue+0x70>
 800d546:	e000      	b.n	800d54a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800d548:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2244      	movs	r2, #68	@ 0x44
 800d54e:	21ff      	movs	r1, #255	@ 0xff
 800d550:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800d552:	f000 ffdf 	bl	800e514 <vPortExitCritical>
}
 800d556:	46c0      	nop			@ (mov r8, r8)
 800d558:	46bd      	mov	sp, r7
 800d55a:	b004      	add	sp, #16
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d566:	f000 ffc3 	bl	800e4f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d102      	bne.n	800d578 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d572:	2301      	movs	r3, #1
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	e001      	b.n	800d57c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d57c:	f000 ffca 	bl	800e514 <vPortExitCritical>

	return xReturn;
 800d580:	68fb      	ldr	r3, [r7, #12]
}
 800d582:	0018      	movs	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	b004      	add	sp, #16
 800d588:	bd80      	pop	{r7, pc}

0800d58a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d592:	f000 ffad 	bl	800e4f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d102      	bne.n	800d5a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	e001      	b.n	800d5ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5ac:	f000 ffb2 	bl	800e514 <vPortExitCritical>

	return xReturn;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
}
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	b004      	add	sp, #16
 800d5b8:	bd80      	pop	{r7, pc}
	...

0800d5bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	e018      	b.n	800d5fc <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d5ca:	4a10      	ldr	r2, [pc, #64]	@ (800d60c <vQueueUnregisterQueue+0x50>)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	18d3      	adds	r3, r2, r3
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d10c      	bne.n	800d5f6 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d60c <vQueueUnregisterQueue+0x50>)
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	00d2      	lsls	r2, r2, #3
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d5e6:	4a09      	ldr	r2, [pc, #36]	@ (800d60c <vQueueUnregisterQueue+0x50>)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	18d3      	adds	r3, r2, r3
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]
				break;
 800d5f4:	e006      	b.n	800d604 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b07      	cmp	r3, #7
 800d600:	d9e3      	bls.n	800d5ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	46c0      	nop			@ (mov r8, r8)
 800d606:	46bd      	mov	sp, r7
 800d608:	b004      	add	sp, #16
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000eb8 	.word	0x20000eb8

0800d610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b08d      	sub	sp, #52	@ 0x34
 800d614:	af04      	add	r7, sp, #16
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <xTaskCreateStatic+0x1a>
 800d624:	b672      	cpsid	i
 800d626:	46c0      	nop			@ (mov r8, r8)
 800d628:	e7fd      	b.n	800d626 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800d62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <xTaskCreateStatic+0x26>
 800d630:	b672      	cpsid	i
 800d632:	46c0      	nop			@ (mov r8, r8)
 800d634:	e7fd      	b.n	800d632 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d636:	2354      	movs	r3, #84	@ 0x54
 800d638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2b54      	cmp	r3, #84	@ 0x54
 800d63e:	d002      	beq.n	800d646 <xTaskCreateStatic+0x36>
 800d640:	b672      	cpsid	i
 800d642:	46c0      	nop			@ (mov r8, r8)
 800d644:	e7fd      	b.n	800d642 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d646:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d020      	beq.n	800d690 <xTaskCreateStatic+0x80>
 800d64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d650:	2b00      	cmp	r3, #0
 800d652:	d01d      	beq.n	800d690 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d65c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	2251      	movs	r2, #81	@ 0x51
 800d662:	2102      	movs	r1, #2
 800d664:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d666:	683c      	ldr	r4, [r7, #0]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	68b9      	ldr	r1, [r7, #8]
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	2300      	movs	r3, #0
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	2318      	movs	r3, #24
 800d678:	18fb      	adds	r3, r7, r3
 800d67a:	9301      	str	r3, [sp, #4]
 800d67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	0023      	movs	r3, r4
 800d682:	f000 f859 	bl	800d738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	0018      	movs	r0, r3
 800d68a:	f000 f8d7 	bl	800d83c <prvAddNewTaskToReadyList>
 800d68e:	e001      	b.n	800d694 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800d690:	2300      	movs	r3, #0
 800d692:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d694:	69bb      	ldr	r3, [r7, #24]
	}
 800d696:	0018      	movs	r0, r3
 800d698:	46bd      	mov	sp, r7
 800d69a:	b009      	add	sp, #36	@ 0x24
 800d69c:	bd90      	pop	{r4, r7, pc}

0800d69e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d69e:	b590      	push	{r4, r7, lr}
 800d6a0:	b08d      	sub	sp, #52	@ 0x34
 800d6a2:	af04      	add	r7, sp, #16
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	603b      	str	r3, [r7, #0]
 800d6aa:	1dbb      	adds	r3, r7, #6
 800d6ac:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6ae:	1dbb      	adds	r3, r7, #6
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	f000 ffb3 	bl	800e620 <pvPortMalloc>
 800d6ba:	0003      	movs	r3, r0
 800d6bc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d010      	beq.n	800d6e6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6c4:	2054      	movs	r0, #84	@ 0x54
 800d6c6:	f000 ffab 	bl	800e620 <pvPortMalloc>
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d003      	beq.n	800d6dc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6da:	e006      	b.n	800d6ea <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	0018      	movs	r0, r3
 800d6e0:	f001 f846 	bl	800e770 <vPortFree>
 800d6e4:	e001      	b.n	800d6ea <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01a      	beq.n	800d726 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	2251      	movs	r2, #81	@ 0x51
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6f8:	1dbb      	adds	r3, r7, #6
 800d6fa:	881a      	ldrh	r2, [r3, #0]
 800d6fc:	683c      	ldr	r4, [r7, #0]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	2300      	movs	r3, #0
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	9302      	str	r3, [sp, #8]
 800d70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	0023      	movs	r3, r4
 800d714:	f000 f810 	bl	800d738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	0018      	movs	r0, r3
 800d71c:	f000 f88e 	bl	800d83c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d720:	2301      	movs	r3, #1
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	e002      	b.n	800d72c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d726:	2301      	movs	r3, #1
 800d728:	425b      	negs	r3, r3
 800d72a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d72c:	69bb      	ldr	r3, [r7, #24]
	}
 800d72e:	0018      	movs	r0, r3
 800d730:	46bd      	mov	sp, r7
 800d732:	b009      	add	sp, #36	@ 0x24
 800d734:	bd90      	pop	{r4, r7, pc}
	...

0800d738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b086      	sub	sp, #24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	493a      	ldr	r1, [pc, #232]	@ (800d838 <prvInitialiseNewTask+0x100>)
 800d74e:	468c      	mov	ip, r1
 800d750:	4463      	add	r3, ip
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	18d3      	adds	r3, r2, r3
 800d756:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	2207      	movs	r2, #7
 800d75c:	4393      	bics	r3, r2
 800d75e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	2207      	movs	r2, #7
 800d764:	4013      	ands	r3, r2
 800d766:	d002      	beq.n	800d76e <prvInitialiseNewTask+0x36>
 800d768:	b672      	cpsid	i
 800d76a:	46c0      	nop			@ (mov r8, r8)
 800d76c:	e7fd      	b.n	800d76a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d020      	beq.n	800d7b6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d774:	2300      	movs	r3, #0
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	e013      	b.n	800d7a2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	18d3      	adds	r3, r2, r3
 800d780:	7818      	ldrb	r0, [r3, #0]
 800d782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d784:	2134      	movs	r1, #52	@ 0x34
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	18d3      	adds	r3, r2, r3
 800d78a:	185b      	adds	r3, r3, r1
 800d78c:	1c02      	adds	r2, r0, #0
 800d78e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	18d3      	adds	r3, r2, r3
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b0f      	cmp	r3, #15
 800d7a6:	d9e8      	bls.n	800d77a <prvInitialiseNewTask+0x42>
 800d7a8:	e000      	b.n	800d7ac <prvInitialiseNewTask+0x74>
			{
				break;
 800d7aa:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ae:	2243      	movs	r2, #67	@ 0x43
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	5499      	strb	r1, [r3, r2]
 800d7b4:	e003      	b.n	800d7be <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b8:	2234      	movs	r2, #52	@ 0x34
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	2b06      	cmp	r3, #6
 800d7c2:	d901      	bls.n	800d7c8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7c4:	2306      	movs	r3, #6
 800d7c6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ca:	6a3a      	ldr	r2, [r7, #32]
 800d7cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d0:	6a3a      	ldr	r2, [r7, #32]
 800d7d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	3304      	adds	r3, #4
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f7ff f81a 	bl	800c818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	0018      	movs	r0, r3
 800d7ea:	f7ff f815 	bl	800c818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	2207      	movs	r2, #7
 800d7f8:	1ad2      	subs	r2, r2, r3
 800d7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d802:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d806:	2200      	movs	r2, #0
 800d808:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80c:	2250      	movs	r2, #80	@ 0x50
 800d80e:	2100      	movs	r1, #0
 800d810:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68f9      	ldr	r1, [r7, #12]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	0018      	movs	r0, r3
 800d81a:	f000 fdcd 	bl	800e3b8 <pxPortInitialiseStack>
 800d81e:	0002      	movs	r2, r0
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d82e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	46bd      	mov	sp, r7
 800d834:	b006      	add	sp, #24
 800d836:	bd80      	pop	{r7, pc}
 800d838:	3fffffff 	.word	0x3fffffff

0800d83c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d844:	f000 fe54 	bl	800e4f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d848:	4b28      	ldr	r3, [pc, #160]	@ (800d8ec <prvAddNewTaskToReadyList+0xb0>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	4b27      	ldr	r3, [pc, #156]	@ (800d8ec <prvAddNewTaskToReadyList+0xb0>)
 800d850:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d852:	4b27      	ldr	r3, [pc, #156]	@ (800d8f0 <prvAddNewTaskToReadyList+0xb4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d85a:	4b25      	ldr	r3, [pc, #148]	@ (800d8f0 <prvAddNewTaskToReadyList+0xb4>)
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d860:	4b22      	ldr	r3, [pc, #136]	@ (800d8ec <prvAddNewTaskToReadyList+0xb0>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d110      	bne.n	800d88a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d868:	f000 fb32 	bl	800ded0 <prvInitialiseTaskLists>
 800d86c:	e00d      	b.n	800d88a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d86e:	4b21      	ldr	r3, [pc, #132]	@ (800d8f4 <prvAddNewTaskToReadyList+0xb8>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d109      	bne.n	800d88a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d876:	4b1e      	ldr	r3, [pc, #120]	@ (800d8f0 <prvAddNewTaskToReadyList+0xb4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d880:	429a      	cmp	r2, r3
 800d882:	d802      	bhi.n	800d88a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d884:	4b1a      	ldr	r3, [pc, #104]	@ (800d8f0 <prvAddNewTaskToReadyList+0xb4>)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d88a:	4b1b      	ldr	r3, [pc, #108]	@ (800d8f8 <prvAddNewTaskToReadyList+0xbc>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	4b19      	ldr	r3, [pc, #100]	@ (800d8f8 <prvAddNewTaskToReadyList+0xbc>)
 800d892:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d898:	4b18      	ldr	r3, [pc, #96]	@ (800d8fc <prvAddNewTaskToReadyList+0xc0>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d903      	bls.n	800d8a8 <prvAddNewTaskToReadyList+0x6c>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8a4:	4b15      	ldr	r3, [pc, #84]	@ (800d8fc <prvAddNewTaskToReadyList+0xc0>)
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ac:	0013      	movs	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	189b      	adds	r3, r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4a12      	ldr	r2, [pc, #72]	@ (800d900 <prvAddNewTaskToReadyList+0xc4>)
 800d8b6:	189a      	adds	r2, r3, r2
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	0019      	movs	r1, r3
 800d8be:	0010      	movs	r0, r2
 800d8c0:	f7fe ffb5 	bl	800c82e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8c4:	f000 fe26 	bl	800e514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d8f4 <prvAddNewTaskToReadyList+0xb8>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d008      	beq.n	800d8e2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8d0:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <prvAddNewTaskToReadyList+0xb4>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d201      	bcs.n	800d8e2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8de:	f000 fdf7 	bl	800e4d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8e2:	46c0      	nop			@ (mov r8, r8)
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	b002      	add	sp, #8
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	46c0      	nop			@ (mov r8, r8)
 800d8ec:	20000ff8 	.word	0x20000ff8
 800d8f0:	20000ef8 	.word	0x20000ef8
 800d8f4:	20001004 	.word	0x20001004
 800d8f8:	20001014 	.word	0x20001014
 800d8fc:	20001000 	.word	0x20001000
 800d900:	20000efc 	.word	0x20000efc

0800d904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d904:	b590      	push	{r4, r7, lr}
 800d906:	b089      	sub	sp, #36	@ 0x24
 800d908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d912:	003a      	movs	r2, r7
 800d914:	1d39      	adds	r1, r7, #4
 800d916:	2308      	movs	r3, #8
 800d918:	18fb      	adds	r3, r7, r3
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7f5 ffaa 	bl	8003874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d920:	683c      	ldr	r4, [r7, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	4918      	ldr	r1, [pc, #96]	@ (800d988 <vTaskStartScheduler+0x84>)
 800d928:	4818      	ldr	r0, [pc, #96]	@ (800d98c <vTaskStartScheduler+0x88>)
 800d92a:	9202      	str	r2, [sp, #8]
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	2300      	movs	r3, #0
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	2300      	movs	r3, #0
 800d934:	0022      	movs	r2, r4
 800d936:	f7ff fe6b 	bl	800d610 <xTaskCreateStatic>
 800d93a:	0002      	movs	r2, r0
 800d93c:	4b14      	ldr	r3, [pc, #80]	@ (800d990 <vTaskStartScheduler+0x8c>)
 800d93e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d940:	4b13      	ldr	r3, [pc, #76]	@ (800d990 <vTaskStartScheduler+0x8c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d948:	2301      	movs	r3, #1
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	e001      	b.n	800d952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d94e:	2300      	movs	r3, #0
 800d950:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d10d      	bne.n	800d974 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800d958:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d95a:	4b0e      	ldr	r3, [pc, #56]	@ (800d994 <vTaskStartScheduler+0x90>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	4252      	negs	r2, r2
 800d960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d962:	4b0d      	ldr	r3, [pc, #52]	@ (800d998 <vTaskStartScheduler+0x94>)
 800d964:	2201      	movs	r2, #1
 800d966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d968:	4b0c      	ldr	r3, [pc, #48]	@ (800d99c <vTaskStartScheduler+0x98>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d96e:	f000 fd8b 	bl	800e488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d972:	e005      	b.n	800d980 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	d102      	bne.n	800d980 <vTaskStartScheduler+0x7c>
 800d97a:	b672      	cpsid	i
 800d97c:	46c0      	nop			@ (mov r8, r8)
 800d97e:	e7fd      	b.n	800d97c <vTaskStartScheduler+0x78>
}
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	46bd      	mov	sp, r7
 800d984:	b005      	add	sp, #20
 800d986:	bd90      	pop	{r4, r7, pc}
 800d988:	080139f8 	.word	0x080139f8
 800d98c:	0800deb1 	.word	0x0800deb1
 800d990:	2000101c 	.word	0x2000101c
 800d994:	20001018 	.word	0x20001018
 800d998:	20001004 	.word	0x20001004
 800d99c:	20000ffc 	.word	0x20000ffc

0800d9a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d9a4:	4b03      	ldr	r3, [pc, #12]	@ (800d9b4 <vTaskSuspendAll+0x14>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	1c5a      	adds	r2, r3, #1
 800d9aa:	4b02      	ldr	r3, [pc, #8]	@ (800d9b4 <vTaskSuspendAll+0x14>)
 800d9ac:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 800d9ae:	46c0      	nop			@ (mov r8, r8)
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20001020 	.word	0x20001020

0800d9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9c6:	4b3a      	ldr	r3, [pc, #232]	@ (800dab0 <xTaskResumeAll+0xf8>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <xTaskResumeAll+0x1c>
 800d9ce:	b672      	cpsid	i
 800d9d0:	46c0      	nop			@ (mov r8, r8)
 800d9d2:	e7fd      	b.n	800d9d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9d4:	f000 fd8c 	bl	800e4f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9d8:	4b35      	ldr	r3, [pc, #212]	@ (800dab0 <xTaskResumeAll+0xf8>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	1e5a      	subs	r2, r3, #1
 800d9de:	4b34      	ldr	r3, [pc, #208]	@ (800dab0 <xTaskResumeAll+0xf8>)
 800d9e0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9e2:	4b33      	ldr	r3, [pc, #204]	@ (800dab0 <xTaskResumeAll+0xf8>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d15b      	bne.n	800daa2 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9ea:	4b32      	ldr	r3, [pc, #200]	@ (800dab4 <xTaskResumeAll+0xfc>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d057      	beq.n	800daa2 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9f2:	e02f      	b.n	800da54 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f4:	4b30      	ldr	r3, [pc, #192]	@ (800dab8 <xTaskResumeAll+0x100>)
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	3318      	adds	r3, #24
 800da00:	0018      	movs	r0, r3
 800da02:	f7fe ff6c 	bl	800c8de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3304      	adds	r3, #4
 800da0a:	0018      	movs	r0, r3
 800da0c:	f7fe ff67 	bl	800c8de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da14:	4b29      	ldr	r3, [pc, #164]	@ (800dabc <xTaskResumeAll+0x104>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d903      	bls.n	800da24 <xTaskResumeAll+0x6c>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da20:	4b26      	ldr	r3, [pc, #152]	@ (800dabc <xTaskResumeAll+0x104>)
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da28:	0013      	movs	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	189b      	adds	r3, r3, r2
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	4a23      	ldr	r2, [pc, #140]	@ (800dac0 <xTaskResumeAll+0x108>)
 800da32:	189a      	adds	r2, r3, r2
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3304      	adds	r3, #4
 800da38:	0019      	movs	r1, r3
 800da3a:	0010      	movs	r0, r2
 800da3c:	f7fe fef7 	bl	800c82e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da44:	4b1f      	ldr	r3, [pc, #124]	@ (800dac4 <xTaskResumeAll+0x10c>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d302      	bcc.n	800da54 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800da4e:	4b1e      	ldr	r3, [pc, #120]	@ (800dac8 <xTaskResumeAll+0x110>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da54:	4b18      	ldr	r3, [pc, #96]	@ (800dab8 <xTaskResumeAll+0x100>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1cb      	bne.n	800d9f4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da62:	f000 fad1 	bl	800e008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da66:	4b19      	ldr	r3, [pc, #100]	@ (800dacc <xTaskResumeAll+0x114>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00f      	beq.n	800da92 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da72:	f000 f82d 	bl	800dad0 <xTaskIncrementTick>
 800da76:	1e03      	subs	r3, r0, #0
 800da78:	d002      	beq.n	800da80 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800da7a:	4b13      	ldr	r3, [pc, #76]	@ (800dac8 <xTaskResumeAll+0x110>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3b01      	subs	r3, #1
 800da84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1f2      	bne.n	800da72 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 800da8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dacc <xTaskResumeAll+0x114>)
 800da8e:	2200      	movs	r2, #0
 800da90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da92:	4b0d      	ldr	r3, [pc, #52]	@ (800dac8 <xTaskResumeAll+0x110>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d003      	beq.n	800daa2 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da9a:	2301      	movs	r3, #1
 800da9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da9e:	f000 fd17 	bl	800e4d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daa2:	f000 fd37 	bl	800e514 <vPortExitCritical>

	return xAlreadyYielded;
 800daa6:	68bb      	ldr	r3, [r7, #8]
}
 800daa8:	0018      	movs	r0, r3
 800daaa:	46bd      	mov	sp, r7
 800daac:	b004      	add	sp, #16
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	20001020 	.word	0x20001020
 800dab4:	20000ff8 	.word	0x20000ff8
 800dab8:	20000fb8 	.word	0x20000fb8
 800dabc:	20001000 	.word	0x20001000
 800dac0:	20000efc 	.word	0x20000efc
 800dac4:	20000ef8 	.word	0x20000ef8
 800dac8:	2000100c 	.word	0x2000100c
 800dacc:	20001008 	.word	0x20001008

0800dad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dad6:	2300      	movs	r3, #0
 800dad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dada:	4b4a      	ldr	r3, [pc, #296]	@ (800dc04 <xTaskIncrementTick+0x134>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d000      	beq.n	800dae4 <xTaskIncrementTick+0x14>
 800dae2:	e07f      	b.n	800dbe4 <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dae4:	4b48      	ldr	r3, [pc, #288]	@ (800dc08 <xTaskIncrementTick+0x138>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3301      	adds	r3, #1
 800daea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800daec:	4b46      	ldr	r3, [pc, #280]	@ (800dc08 <xTaskIncrementTick+0x138>)
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d118      	bne.n	800db2a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800daf8:	4b44      	ldr	r3, [pc, #272]	@ (800dc0c <xTaskIncrementTick+0x13c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <xTaskIncrementTick+0x38>
 800db02:	b672      	cpsid	i
 800db04:	46c0      	nop			@ (mov r8, r8)
 800db06:	e7fd      	b.n	800db04 <xTaskIncrementTick+0x34>
 800db08:	4b40      	ldr	r3, [pc, #256]	@ (800dc0c <xTaskIncrementTick+0x13c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	4b40      	ldr	r3, [pc, #256]	@ (800dc10 <xTaskIncrementTick+0x140>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	4b3e      	ldr	r3, [pc, #248]	@ (800dc0c <xTaskIncrementTick+0x13c>)
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	4b3e      	ldr	r3, [pc, #248]	@ (800dc10 <xTaskIncrementTick+0x140>)
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	4b3d      	ldr	r3, [pc, #244]	@ (800dc14 <xTaskIncrementTick+0x144>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	1c5a      	adds	r2, r3, #1
 800db22:	4b3c      	ldr	r3, [pc, #240]	@ (800dc14 <xTaskIncrementTick+0x144>)
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	f000 fa6f 	bl	800e008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db2a:	4b3b      	ldr	r3, [pc, #236]	@ (800dc18 <xTaskIncrementTick+0x148>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	429a      	cmp	r2, r3
 800db32:	d349      	bcc.n	800dbc8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db34:	4b35      	ldr	r3, [pc, #212]	@ (800dc0c <xTaskIncrementTick+0x13c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d104      	bne.n	800db48 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db3e:	4b36      	ldr	r3, [pc, #216]	@ (800dc18 <xTaskIncrementTick+0x148>)
 800db40:	2201      	movs	r2, #1
 800db42:	4252      	negs	r2, r2
 800db44:	601a      	str	r2, [r3, #0]
					break;
 800db46:	e03f      	b.n	800dbc8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db48:	4b30      	ldr	r3, [pc, #192]	@ (800dc0c <xTaskIncrementTick+0x13c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d203      	bcs.n	800db68 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db60:	4b2d      	ldr	r3, [pc, #180]	@ (800dc18 <xTaskIncrementTick+0x148>)
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db66:	e02f      	b.n	800dbc8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3304      	adds	r3, #4
 800db6c:	0018      	movs	r0, r3
 800db6e:	f7fe feb6 	bl	800c8de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db76:	2b00      	cmp	r3, #0
 800db78:	d004      	beq.n	800db84 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	3318      	adds	r3, #24
 800db7e:	0018      	movs	r0, r3
 800db80:	f7fe fead 	bl	800c8de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db88:	4b24      	ldr	r3, [pc, #144]	@ (800dc1c <xTaskIncrementTick+0x14c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d903      	bls.n	800db98 <xTaskIncrementTick+0xc8>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db94:	4b21      	ldr	r3, [pc, #132]	@ (800dc1c <xTaskIncrementTick+0x14c>)
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db9c:	0013      	movs	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	189b      	adds	r3, r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4a1e      	ldr	r2, [pc, #120]	@ (800dc20 <xTaskIncrementTick+0x150>)
 800dba6:	189a      	adds	r2, r3, r2
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	0019      	movs	r1, r3
 800dbae:	0010      	movs	r0, r2
 800dbb0:	f7fe fe3d 	bl	800c82e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbb8:	4b1a      	ldr	r3, [pc, #104]	@ (800dc24 <xTaskIncrementTick+0x154>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d3b8      	bcc.n	800db34 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbc6:	e7b5      	b.n	800db34 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbc8:	4b16      	ldr	r3, [pc, #88]	@ (800dc24 <xTaskIncrementTick+0x154>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbce:	4914      	ldr	r1, [pc, #80]	@ (800dc20 <xTaskIncrementTick+0x150>)
 800dbd0:	0013      	movs	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	189b      	adds	r3, r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	585b      	ldr	r3, [r3, r1]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d907      	bls.n	800dbee <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	617b      	str	r3, [r7, #20]
 800dbe2:	e004      	b.n	800dbee <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dbe4:	4b10      	ldr	r3, [pc, #64]	@ (800dc28 <xTaskIncrementTick+0x158>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	1c5a      	adds	r2, r3, #1
 800dbea:	4b0f      	ldr	r3, [pc, #60]	@ (800dc28 <xTaskIncrementTick+0x158>)
 800dbec:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dbee:	4b0f      	ldr	r3, [pc, #60]	@ (800dc2c <xTaskIncrementTick+0x15c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dbfa:	697b      	ldr	r3, [r7, #20]
}
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	b006      	add	sp, #24
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20001020 	.word	0x20001020
 800dc08:	20000ffc 	.word	0x20000ffc
 800dc0c:	20000fb0 	.word	0x20000fb0
 800dc10:	20000fb4 	.word	0x20000fb4
 800dc14:	20001010 	.word	0x20001010
 800dc18:	20001018 	.word	0x20001018
 800dc1c:	20001000 	.word	0x20001000
 800dc20:	20000efc 	.word	0x20000efc
 800dc24:	20000ef8 	.word	0x20000ef8
 800dc28:	20001008 	.word	0x20001008
 800dc2c:	2000100c 	.word	0x2000100c

0800dc30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc36:	4b22      	ldr	r3, [pc, #136]	@ (800dcc0 <vTaskSwitchContext+0x90>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc3e:	4b21      	ldr	r3, [pc, #132]	@ (800dcc4 <vTaskSwitchContext+0x94>)
 800dc40:	2201      	movs	r2, #1
 800dc42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc44:	e038      	b.n	800dcb8 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800dc46:	4b1f      	ldr	r3, [pc, #124]	@ (800dcc4 <vTaskSwitchContext+0x94>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc4c:	4b1e      	ldr	r3, [pc, #120]	@ (800dcc8 <vTaskSwitchContext+0x98>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	607b      	str	r3, [r7, #4]
 800dc52:	e008      	b.n	800dc66 <vTaskSwitchContext+0x36>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d102      	bne.n	800dc60 <vTaskSwitchContext+0x30>
 800dc5a:	b672      	cpsid	i
 800dc5c:	46c0      	nop			@ (mov r8, r8)
 800dc5e:	e7fd      	b.n	800dc5c <vTaskSwitchContext+0x2c>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	607b      	str	r3, [r7, #4]
 800dc66:	4919      	ldr	r1, [pc, #100]	@ (800dccc <vTaskSwitchContext+0x9c>)
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	0013      	movs	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	189b      	adds	r3, r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	585b      	ldr	r3, [r3, r1]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0ed      	beq.n	800dc54 <vTaskSwitchContext+0x24>
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	0013      	movs	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	189b      	adds	r3, r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4a12      	ldr	r2, [pc, #72]	@ (800dccc <vTaskSwitchContext+0x9c>)
 800dc84:	189b      	adds	r3, r3, r2
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	605a      	str	r2, [r3, #4]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	3308      	adds	r3, #8
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d104      	bne.n	800dca8 <vTaskSwitchContext+0x78>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	605a      	str	r2, [r3, #4]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	4b08      	ldr	r3, [pc, #32]	@ (800dcd0 <vTaskSwitchContext+0xa0>)
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	4b05      	ldr	r3, [pc, #20]	@ (800dcc8 <vTaskSwitchContext+0x98>)
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	601a      	str	r2, [r3, #0]
}
 800dcb8:	46c0      	nop			@ (mov r8, r8)
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	b002      	add	sp, #8
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	20001020 	.word	0x20001020
 800dcc4:	2000100c 	.word	0x2000100c
 800dcc8:	20001000 	.word	0x20001000
 800dccc:	20000efc 	.word	0x20000efc
 800dcd0:	20000ef8 	.word	0x20000ef8

0800dcd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d102      	bne.n	800dcea <vTaskPlaceOnEventList+0x16>
 800dce4:	b672      	cpsid	i
 800dce6:	46c0      	nop			@ (mov r8, r8)
 800dce8:	e7fd      	b.n	800dce6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcea:	4b09      	ldr	r3, [pc, #36]	@ (800dd10 <vTaskPlaceOnEventList+0x3c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	3318      	adds	r3, #24
 800dcf0:	001a      	movs	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	0011      	movs	r1, r2
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	f7fe fdbb 	bl	800c872 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2101      	movs	r1, #1
 800dd00:	0018      	movs	r0, r3
 800dd02:	f000 fb05 	bl	800e310 <prvAddCurrentTaskToDelayedList>
}
 800dd06:	46c0      	nop			@ (mov r8, r8)
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	b002      	add	sp, #8
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	46c0      	nop			@ (mov r8, r8)
 800dd10:	20000ef8 	.word	0x20000ef8

0800dd14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d102      	bne.n	800dd30 <xTaskRemoveFromEventList+0x1c>
 800dd2a:	b672      	cpsid	i
 800dd2c:	46c0      	nop			@ (mov r8, r8)
 800dd2e:	e7fd      	b.n	800dd2c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	3318      	adds	r3, #24
 800dd34:	0018      	movs	r0, r3
 800dd36:	f7fe fdd2 	bl	800c8de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd3a:	4b1f      	ldr	r3, [pc, #124]	@ (800ddb8 <xTaskRemoveFromEventList+0xa4>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d11d      	bne.n	800dd7e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	3304      	adds	r3, #4
 800dd46:	0018      	movs	r0, r3
 800dd48:	f7fe fdc9 	bl	800c8de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd50:	4b1a      	ldr	r3, [pc, #104]	@ (800ddbc <xTaskRemoveFromEventList+0xa8>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d903      	bls.n	800dd60 <xTaskRemoveFromEventList+0x4c>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5c:	4b17      	ldr	r3, [pc, #92]	@ (800ddbc <xTaskRemoveFromEventList+0xa8>)
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd64:	0013      	movs	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	189b      	adds	r3, r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4a14      	ldr	r2, [pc, #80]	@ (800ddc0 <xTaskRemoveFromEventList+0xac>)
 800dd6e:	189a      	adds	r2, r3, r2
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	3304      	adds	r3, #4
 800dd74:	0019      	movs	r1, r3
 800dd76:	0010      	movs	r0, r2
 800dd78:	f7fe fd59 	bl	800c82e <vListInsertEnd>
 800dd7c:	e007      	b.n	800dd8e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	3318      	adds	r3, #24
 800dd82:	001a      	movs	r2, r3
 800dd84:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc4 <xTaskRemoveFromEventList+0xb0>)
 800dd86:	0011      	movs	r1, r2
 800dd88:	0018      	movs	r0, r3
 800dd8a:	f7fe fd50 	bl	800c82e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <xTaskRemoveFromEventList+0xb4>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d905      	bls.n	800dda8 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dda0:	4b0a      	ldr	r3, [pc, #40]	@ (800ddcc <xTaskRemoveFromEventList+0xb8>)
 800dda2:	2201      	movs	r2, #1
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	e001      	b.n	800ddac <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800ddac:	68fb      	ldr	r3, [r7, #12]
}
 800ddae:	0018      	movs	r0, r3
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	b004      	add	sp, #16
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	46c0      	nop			@ (mov r8, r8)
 800ddb8:	20001020 	.word	0x20001020
 800ddbc:	20001000 	.word	0x20001000
 800ddc0:	20000efc 	.word	0x20000efc
 800ddc4:	20000fb8 	.word	0x20000fb8
 800ddc8:	20000ef8 	.word	0x20000ef8
 800ddcc:	2000100c 	.word	0x2000100c

0800ddd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddd8:	4b05      	ldr	r3, [pc, #20]	@ (800ddf0 <vTaskInternalSetTimeOutState+0x20>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dde0:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <vTaskInternalSetTimeOutState+0x24>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	605a      	str	r2, [r3, #4]
}
 800dde8:	46c0      	nop			@ (mov r8, r8)
 800ddea:	46bd      	mov	sp, r7
 800ddec:	b002      	add	sp, #8
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	20001010 	.word	0x20001010
 800ddf4:	20000ffc 	.word	0x20000ffc

0800ddf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d102      	bne.n	800de0e <xTaskCheckForTimeOut+0x16>
 800de08:	b672      	cpsid	i
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	e7fd      	b.n	800de0a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <xTaskCheckForTimeOut+0x22>
 800de14:	b672      	cpsid	i
 800de16:	46c0      	nop			@ (mov r8, r8)
 800de18:	e7fd      	b.n	800de16 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 800de1a:	f000 fb69 	bl	800e4f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de1e:	4b1d      	ldr	r3, [pc, #116]	@ (800de94 <xTaskCheckForTimeOut+0x9c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	d102      	bne.n	800de3c <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
 800de3a:	e024      	b.n	800de86 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	4b15      	ldr	r3, [pc, #84]	@ (800de98 <xTaskCheckForTimeOut+0xa0>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	429a      	cmp	r2, r3
 800de46:	d007      	beq.n	800de58 <xTaskCheckForTimeOut+0x60>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d302      	bcc.n	800de58 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de52:	2301      	movs	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e016      	b.n	800de86 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d20c      	bcs.n	800de7c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	0018      	movs	r0, r3
 800de72:	f7ff ffad 	bl	800ddd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de76:	2300      	movs	r3, #0
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e004      	b.n	800de86 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de82:	2301      	movs	r3, #1
 800de84:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800de86:	f000 fb45 	bl	800e514 <vPortExitCritical>

	return xReturn;
 800de8a:	697b      	ldr	r3, [r7, #20]
}
 800de8c:	0018      	movs	r0, r3
 800de8e:	46bd      	mov	sp, r7
 800de90:	b006      	add	sp, #24
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20000ffc 	.word	0x20000ffc
 800de98:	20001010 	.word	0x20001010

0800de9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dea0:	4b02      	ldr	r3, [pc, #8]	@ (800deac <vTaskMissedYield+0x10>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	2000100c 	.word	0x2000100c

0800deb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800deb8:	f000 f84e 	bl	800df58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800debc:	4b03      	ldr	r3, [pc, #12]	@ (800decc <prvIdleTask+0x1c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d9f9      	bls.n	800deb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dec4:	f000 fb04 	bl	800e4d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800dec8:	e7f6      	b.n	800deb8 <prvIdleTask+0x8>
 800deca:	46c0      	nop			@ (mov r8, r8)
 800decc:	20000efc 	.word	0x20000efc

0800ded0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ded6:	2300      	movs	r3, #0
 800ded8:	607b      	str	r3, [r7, #4]
 800deda:	e00c      	b.n	800def6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	0013      	movs	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	189b      	adds	r3, r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4a14      	ldr	r2, [pc, #80]	@ (800df38 <prvInitialiseTaskLists+0x68>)
 800dee8:	189b      	adds	r3, r3, r2
 800deea:	0018      	movs	r0, r3
 800deec:	f7fe fc76 	bl	800c7dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3301      	adds	r3, #1
 800def4:	607b      	str	r3, [r7, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b06      	cmp	r3, #6
 800defa:	d9ef      	bls.n	800dedc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800defc:	4b0f      	ldr	r3, [pc, #60]	@ (800df3c <prvInitialiseTaskLists+0x6c>)
 800defe:	0018      	movs	r0, r3
 800df00:	f7fe fc6c 	bl	800c7dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df04:	4b0e      	ldr	r3, [pc, #56]	@ (800df40 <prvInitialiseTaskLists+0x70>)
 800df06:	0018      	movs	r0, r3
 800df08:	f7fe fc68 	bl	800c7dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df0c:	4b0d      	ldr	r3, [pc, #52]	@ (800df44 <prvInitialiseTaskLists+0x74>)
 800df0e:	0018      	movs	r0, r3
 800df10:	f7fe fc64 	bl	800c7dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df14:	4b0c      	ldr	r3, [pc, #48]	@ (800df48 <prvInitialiseTaskLists+0x78>)
 800df16:	0018      	movs	r0, r3
 800df18:	f7fe fc60 	bl	800c7dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df1c:	4b0b      	ldr	r3, [pc, #44]	@ (800df4c <prvInitialiseTaskLists+0x7c>)
 800df1e:	0018      	movs	r0, r3
 800df20:	f7fe fc5c 	bl	800c7dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df24:	4b0a      	ldr	r3, [pc, #40]	@ (800df50 <prvInitialiseTaskLists+0x80>)
 800df26:	4a05      	ldr	r2, [pc, #20]	@ (800df3c <prvInitialiseTaskLists+0x6c>)
 800df28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df2a:	4b0a      	ldr	r3, [pc, #40]	@ (800df54 <prvInitialiseTaskLists+0x84>)
 800df2c:	4a04      	ldr	r2, [pc, #16]	@ (800df40 <prvInitialiseTaskLists+0x70>)
 800df2e:	601a      	str	r2, [r3, #0]
}
 800df30:	46c0      	nop			@ (mov r8, r8)
 800df32:	46bd      	mov	sp, r7
 800df34:	b002      	add	sp, #8
 800df36:	bd80      	pop	{r7, pc}
 800df38:	20000efc 	.word	0x20000efc
 800df3c:	20000f88 	.word	0x20000f88
 800df40:	20000f9c 	.word	0x20000f9c
 800df44:	20000fb8 	.word	0x20000fb8
 800df48:	20000fcc 	.word	0x20000fcc
 800df4c:	20000fe4 	.word	0x20000fe4
 800df50:	20000fb0 	.word	0x20000fb0
 800df54:	20000fb4 	.word	0x20000fb4

0800df58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df5e:	e01a      	b.n	800df96 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800df60:	f000 fac6 	bl	800e4f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df64:	4b10      	ldr	r3, [pc, #64]	@ (800dfa8 <prvCheckTasksWaitingTermination+0x50>)
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3304      	adds	r3, #4
 800df70:	0018      	movs	r0, r3
 800df72:	f7fe fcb4 	bl	800c8de <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df76:	4b0d      	ldr	r3, [pc, #52]	@ (800dfac <prvCheckTasksWaitingTermination+0x54>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	1e5a      	subs	r2, r3, #1
 800df7c:	4b0b      	ldr	r3, [pc, #44]	@ (800dfac <prvCheckTasksWaitingTermination+0x54>)
 800df7e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df80:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb0 <prvCheckTasksWaitingTermination+0x58>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	1e5a      	subs	r2, r3, #1
 800df86:	4b0a      	ldr	r3, [pc, #40]	@ (800dfb0 <prvCheckTasksWaitingTermination+0x58>)
 800df88:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800df8a:	f000 fac3 	bl	800e514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	0018      	movs	r0, r3
 800df92:	f000 f80f 	bl	800dfb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df96:	4b06      	ldr	r3, [pc, #24]	@ (800dfb0 <prvCheckTasksWaitingTermination+0x58>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e0      	bne.n	800df60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df9e:	46c0      	nop			@ (mov r8, r8)
 800dfa0:	46c0      	nop			@ (mov r8, r8)
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	b002      	add	sp, #8
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000fcc 	.word	0x20000fcc
 800dfac:	20000ff8 	.word	0x20000ff8
 800dfb0:	20000fe0 	.word	0x20000fe0

0800dfb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2251      	movs	r2, #81	@ 0x51
 800dfc0:	5c9b      	ldrb	r3, [r3, r2]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d109      	bne.n	800dfda <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfca:	0018      	movs	r0, r3
 800dfcc:	f000 fbd0 	bl	800e770 <vPortFree>
				vPortFree( pxTCB );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	f000 fbcc 	bl	800e770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfd8:	e011      	b.n	800dffe <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2251      	movs	r2, #81	@ 0x51
 800dfde:	5c9b      	ldrb	r3, [r3, r2]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d104      	bne.n	800dfee <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	0018      	movs	r0, r3
 800dfe8:	f000 fbc2 	bl	800e770 <vPortFree>
	}
 800dfec:	e007      	b.n	800dffe <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2251      	movs	r2, #81	@ 0x51
 800dff2:	5c9b      	ldrb	r3, [r3, r2]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d002      	beq.n	800dffe <prvDeleteTCB+0x4a>
 800dff8:	b672      	cpsid	i
 800dffa:	46c0      	nop			@ (mov r8, r8)
 800dffc:	e7fd      	b.n	800dffa <prvDeleteTCB+0x46>
	}
 800dffe:	46c0      	nop			@ (mov r8, r8)
 800e000:	46bd      	mov	sp, r7
 800e002:	b002      	add	sp, #8
 800e004:	bd80      	pop	{r7, pc}
	...

0800e008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e00e:	4b0b      	ldr	r3, [pc, #44]	@ (800e03c <prvResetNextTaskUnblockTime+0x34>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d104      	bne.n	800e022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e018:	4b09      	ldr	r3, [pc, #36]	@ (800e040 <prvResetNextTaskUnblockTime+0x38>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	4252      	negs	r2, r2
 800e01e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e020:	e008      	b.n	800e034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e022:	4b06      	ldr	r3, [pc, #24]	@ (800e03c <prvResetNextTaskUnblockTime+0x34>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	4b03      	ldr	r3, [pc, #12]	@ (800e040 <prvResetNextTaskUnblockTime+0x38>)
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	46c0      	nop			@ (mov r8, r8)
 800e036:	46bd      	mov	sp, r7
 800e038:	b002      	add	sp, #8
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20000fb0 	.word	0x20000fb0
 800e040:	20001018 	.word	0x20001018

0800e044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e04a:	4b0a      	ldr	r3, [pc, #40]	@ (800e074 <xTaskGetSchedulerState+0x30>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e052:	2301      	movs	r3, #1
 800e054:	607b      	str	r3, [r7, #4]
 800e056:	e008      	b.n	800e06a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e058:	4b07      	ldr	r3, [pc, #28]	@ (800e078 <xTaskGetSchedulerState+0x34>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d102      	bne.n	800e066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e060:	2302      	movs	r3, #2
 800e062:	607b      	str	r3, [r7, #4]
 800e064:	e001      	b.n	800e06a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e066:	2300      	movs	r3, #0
 800e068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e06a:	687b      	ldr	r3, [r7, #4]
	}
 800e06c:	0018      	movs	r0, r3
 800e06e:	46bd      	mov	sp, r7
 800e070:	b002      	add	sp, #8
 800e072:	bd80      	pop	{r7, pc}
 800e074:	20001004 	.word	0x20001004
 800e078:	20001020 	.word	0x20001020

0800e07c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e088:	2300      	movs	r3, #0
 800e08a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d051      	beq.n	800e136 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e096:	4b2a      	ldr	r3, [pc, #168]	@ (800e140 <xTaskPriorityInherit+0xc4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d241      	bcs.n	800e124 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	db06      	blt.n	800e0b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a8:	4b25      	ldr	r3, [pc, #148]	@ (800e140 <xTaskPriorityInherit+0xc4>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ae:	2207      	movs	r2, #7
 800e0b0:	1ad2      	subs	r2, r2, r3
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	6959      	ldr	r1, [r3, #20]
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0be:	0013      	movs	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	189b      	adds	r3, r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e144 <xTaskPriorityInherit+0xc8>)
 800e0c8:	189b      	adds	r3, r3, r2
 800e0ca:	4299      	cmp	r1, r3
 800e0cc:	d122      	bne.n	800e114 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	0018      	movs	r0, r3
 800e0d4:	f7fe fc03 	bl	800c8de <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0d8:	4b19      	ldr	r3, [pc, #100]	@ (800e140 <xTaskPriorityInherit+0xc4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e6:	4b18      	ldr	r3, [pc, #96]	@ (800e148 <xTaskPriorityInherit+0xcc>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d903      	bls.n	800e0f6 <xTaskPriorityInherit+0x7a>
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f2:	4b15      	ldr	r3, [pc, #84]	@ (800e148 <xTaskPriorityInherit+0xcc>)
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0fa:	0013      	movs	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	189b      	adds	r3, r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4a10      	ldr	r2, [pc, #64]	@ (800e144 <xTaskPriorityInherit+0xc8>)
 800e104:	189a      	adds	r2, r3, r2
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	3304      	adds	r3, #4
 800e10a:	0019      	movs	r1, r3
 800e10c:	0010      	movs	r0, r2
 800e10e:	f7fe fb8e 	bl	800c82e <vListInsertEnd>
 800e112:	e004      	b.n	800e11e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e114:	4b0a      	ldr	r3, [pc, #40]	@ (800e140 <xTaskPriorityInherit+0xc4>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e11e:	2301      	movs	r3, #1
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	e008      	b.n	800e136 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e128:	4b05      	ldr	r3, [pc, #20]	@ (800e140 <xTaskPriorityInherit+0xc4>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12e:	429a      	cmp	r2, r3
 800e130:	d201      	bcs.n	800e136 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e132:	2301      	movs	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e136:	68fb      	ldr	r3, [r7, #12]
	}
 800e138:	0018      	movs	r0, r3
 800e13a:	46bd      	mov	sp, r7
 800e13c:	b004      	add	sp, #16
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20000ef8 	.word	0x20000ef8
 800e144:	20000efc 	.word	0x20000efc
 800e148:	20001000 	.word	0x20001000

0800e14c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e158:	2300      	movs	r3, #0
 800e15a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d046      	beq.n	800e1f0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e162:	4b26      	ldr	r3, [pc, #152]	@ (800e1fc <xTaskPriorityDisinherit+0xb0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68ba      	ldr	r2, [r7, #8]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d002      	beq.n	800e172 <xTaskPriorityDisinherit+0x26>
 800e16c:	b672      	cpsid	i
 800e16e:	46c0      	nop			@ (mov r8, r8)
 800e170:	e7fd      	b.n	800e16e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e176:	2b00      	cmp	r3, #0
 800e178:	d102      	bne.n	800e180 <xTaskPriorityDisinherit+0x34>
 800e17a:	b672      	cpsid	i
 800e17c:	46c0      	nop			@ (mov r8, r8)
 800e17e:	e7fd      	b.n	800e17c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e184:	1e5a      	subs	r2, r3, #1
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e192:	429a      	cmp	r2, r3
 800e194:	d02c      	beq.n	800e1f0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d128      	bne.n	800e1f0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f7fe fb9b 	bl	800c8de <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b4:	2207      	movs	r2, #7
 800e1b6:	1ad2      	subs	r2, r2, r3
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800e200 <xTaskPriorityDisinherit+0xb4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d903      	bls.n	800e1d0 <xTaskPriorityDisinherit+0x84>
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e200 <xTaskPriorityDisinherit+0xb4>)
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d4:	0013      	movs	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	189b      	adds	r3, r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4a09      	ldr	r2, [pc, #36]	@ (800e204 <xTaskPriorityDisinherit+0xb8>)
 800e1de:	189a      	adds	r2, r3, r2
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	0019      	movs	r1, r3
 800e1e6:	0010      	movs	r0, r2
 800e1e8:	f7fe fb21 	bl	800c82e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
	}
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	b004      	add	sp, #16
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	46c0      	nop			@ (mov r8, r8)
 800e1fc:	20000ef8 	.word	0x20000ef8
 800e200:	20001000 	.word	0x20001000
 800e204:	20000efc 	.word	0x20000efc

0800e208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e216:	2301      	movs	r3, #1
 800e218:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d05a      	beq.n	800e2d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e224:	2b00      	cmp	r3, #0
 800e226:	d102      	bne.n	800e22e <vTaskPriorityDisinheritAfterTimeout+0x26>
 800e228:	b672      	cpsid	i
 800e22a:	46c0      	nop			@ (mov r8, r8)
 800e22c:	e7fd      	b.n	800e22a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d902      	bls.n	800e23e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	617b      	str	r3, [r7, #20]
 800e23c:	e002      	b.n	800e244 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e242:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e248:	697a      	ldr	r2, [r7, #20]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d043      	beq.n	800e2d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	429a      	cmp	r2, r3
 800e256:	d13e      	bne.n	800e2d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e258:	4b21      	ldr	r3, [pc, #132]	@ (800e2e0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d102      	bne.n	800e268 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800e262:	b672      	cpsid	i
 800e264:	46c0      	nop			@ (mov r8, r8)
 800e266:	e7fd      	b.n	800e264 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	db04      	blt.n	800e286 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2207      	movs	r2, #7
 800e280:	1ad2      	subs	r2, r2, r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	6959      	ldr	r1, [r3, #20]
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	0013      	movs	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	189b      	adds	r3, r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4a13      	ldr	r2, [pc, #76]	@ (800e2e4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800e296:	189b      	adds	r3, r3, r2
 800e298:	4299      	cmp	r1, r3
 800e29a:	d11c      	bne.n	800e2d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	3304      	adds	r3, #4
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	f7fe fb1c 	bl	800c8de <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d903      	bls.n	800e2ba <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e2e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2be:	0013      	movs	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	189b      	adds	r3, r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4a07      	ldr	r2, [pc, #28]	@ (800e2e4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800e2c8:	189a      	adds	r2, r3, r2
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	0019      	movs	r1, r3
 800e2d0:	0010      	movs	r0, r2
 800e2d2:	f7fe faac 	bl	800c82e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2d6:	46c0      	nop			@ (mov r8, r8)
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	b006      	add	sp, #24
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	46c0      	nop			@ (mov r8, r8)
 800e2e0:	20000ef8 	.word	0x20000ef8
 800e2e4:	20000efc 	.word	0x20000efc
 800e2e8:	20001000 	.word	0x20001000

0800e2ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2f0:	4b06      	ldr	r3, [pc, #24]	@ (800e30c <pvTaskIncrementMutexHeldCount+0x20>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d004      	beq.n	800e302 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2f8:	4b04      	ldr	r3, [pc, #16]	@ (800e30c <pvTaskIncrementMutexHeldCount+0x20>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e2fe:	3201      	adds	r2, #1
 800e300:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e302:	4b02      	ldr	r3, [pc, #8]	@ (800e30c <pvTaskIncrementMutexHeldCount+0x20>)
 800e304:	681b      	ldr	r3, [r3, #0]
	}
 800e306:	0018      	movs	r0, r3
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20000ef8 	.word	0x20000ef8

0800e310 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e31a:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e320:	4b20      	ldr	r3, [pc, #128]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3304      	adds	r3, #4
 800e326:	0018      	movs	r0, r3
 800e328:	f7fe fad9 	bl	800c8de <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3301      	adds	r3, #1
 800e330:	d10b      	bne.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d008      	beq.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e338:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	1d1a      	adds	r2, r3, #4
 800e33e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e340:	0011      	movs	r1, r2
 800e342:	0018      	movs	r0, r3
 800e344:	f7fe fa73 	bl	800c82e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e348:	e026      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	18d3      	adds	r3, r2, r3
 800e350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e352:	4b14      	ldr	r3, [pc, #80]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d209      	bcs.n	800e376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e362:	4b12      	ldr	r3, [pc, #72]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	4b0f      	ldr	r3, [pc, #60]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3304      	adds	r3, #4
 800e36c:	0019      	movs	r1, r3
 800e36e:	0010      	movs	r0, r2
 800e370:	f7fe fa7f 	bl	800c872 <vListInsert>
}
 800e374:	e010      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e376:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3304      	adds	r3, #4
 800e380:	0019      	movs	r1, r3
 800e382:	0010      	movs	r0, r2
 800e384:	f7fe fa75 	bl	800c872 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e388:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e392:	4b08      	ldr	r3, [pc, #32]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	601a      	str	r2, [r3, #0]
}
 800e398:	46c0      	nop			@ (mov r8, r8)
 800e39a:	46bd      	mov	sp, r7
 800e39c:	b004      	add	sp, #16
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000ffc 	.word	0x20000ffc
 800e3a4:	20000ef8 	.word	0x20000ef8
 800e3a8:	20000fe4 	.word	0x20000fe4
 800e3ac:	20000fb4 	.word	0x20000fb4
 800e3b0:	20000fb0 	.word	0x20000fb0
 800e3b4:	20001018 	.word	0x20001018

0800e3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3b04      	subs	r3, #4
 800e3c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2280      	movs	r2, #128	@ 0x80
 800e3ce:	0452      	lsls	r2, r2, #17
 800e3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3b04      	subs	r3, #4
 800e3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3b04      	subs	r3, #4
 800e3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3e4:	4a08      	ldr	r2, [pc, #32]	@ (800e408 <pxPortInitialiseStack+0x50>)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3b14      	subs	r3, #20
 800e3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3b20      	subs	r3, #32
 800e3fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
}
 800e3fe:	0018      	movs	r0, r3
 800e400:	46bd      	mov	sp, r7
 800e402:	b004      	add	sp, #16
 800e404:	bd80      	pop	{r7, pc}
 800e406:	46c0      	nop			@ (mov r8, r8)
 800e408:	0800e40d 	.word	0x0800e40d

0800e40c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e412:	2300      	movs	r3, #0
 800e414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e416:	4b08      	ldr	r3, [pc, #32]	@ (800e438 <prvTaskExitError+0x2c>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	d002      	beq.n	800e424 <prvTaskExitError+0x18>
 800e41e:	b672      	cpsid	i
 800e420:	46c0      	nop			@ (mov r8, r8)
 800e422:	e7fd      	b.n	800e420 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e424:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e426:	46c0      	nop			@ (mov r8, r8)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0fc      	beq.n	800e428 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e42e:	46c0      	nop			@ (mov r8, r8)
 800e430:	46c0      	nop			@ (mov r8, r8)
 800e432:	46bd      	mov	sp, r7
 800e434:	b002      	add	sp, #8
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20000028 	.word	0x20000028

0800e43c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e440:	46c0      	nop			@ (mov r8, r8)
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e450 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e450:	4a0b      	ldr	r2, [pc, #44]	@ (800e480 <pxCurrentTCBConst2>)
 800e452:	6813      	ldr	r3, [r2, #0]
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	3020      	adds	r0, #32
 800e458:	f380 8809 	msr	PSP, r0
 800e45c:	2002      	movs	r0, #2
 800e45e:	f380 8814 	msr	CONTROL, r0
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e468:	46ae      	mov	lr, r5
 800e46a:	bc08      	pop	{r3}
 800e46c:	bc04      	pop	{r2}
 800e46e:	b662      	cpsie	i
 800e470:	4718      	bx	r3
 800e472:	46c0      	nop			@ (mov r8, r8)
 800e474:	46c0      	nop			@ (mov r8, r8)
 800e476:	46c0      	nop			@ (mov r8, r8)
 800e478:	46c0      	nop			@ (mov r8, r8)
 800e47a:	46c0      	nop			@ (mov r8, r8)
 800e47c:	46c0      	nop			@ (mov r8, r8)
 800e47e:	46c0      	nop			@ (mov r8, r8)

0800e480 <pxCurrentTCBConst2>:
 800e480:	20000ef8 	.word	0x20000ef8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e484:	46c0      	nop			@ (mov r8, r8)
 800e486:	46c0      	nop			@ (mov r8, r8)

0800e488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e48c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <xPortStartScheduler+0x40>)
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c8 <xPortStartScheduler+0x40>)
 800e492:	21ff      	movs	r1, #255	@ 0xff
 800e494:	0409      	lsls	r1, r1, #16
 800e496:	430a      	orrs	r2, r1
 800e498:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e49a:	4b0b      	ldr	r3, [pc, #44]	@ (800e4c8 <xPortStartScheduler+0x40>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c8 <xPortStartScheduler+0x40>)
 800e4a0:	21ff      	movs	r1, #255	@ 0xff
 800e4a2:	0609      	lsls	r1, r1, #24
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800e4a8:	f000 f898 	bl	800e5dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e4ac:	4b07      	ldr	r3, [pc, #28]	@ (800e4cc <xPortStartScheduler+0x44>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e4b2:	f7ff ffcd 	bl	800e450 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e4b6:	f7ff fbbb 	bl	800dc30 <vTaskSwitchContext>
	prvTaskExitError();
 800e4ba:	f7ff ffa7 	bl	800e40c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	0018      	movs	r0, r3
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	46c0      	nop			@ (mov r8, r8)
 800e4c8:	e000ed20 	.word	0xe000ed20
 800e4cc:	20000028 	.word	0x20000028

0800e4d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e4d4:	4b05      	ldr	r3, [pc, #20]	@ (800e4ec <vPortYield+0x1c>)
 800e4d6:	2280      	movs	r2, #128	@ 0x80
 800e4d8:	0552      	lsls	r2, r2, #21
 800e4da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e4dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e4e0:	f3bf 8f6f 	isb	sy
}
 800e4e4:	46c0      	nop			@ (mov r8, r8)
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	46c0      	nop			@ (mov r8, r8)
 800e4ec:	e000ed04 	.word	0xe000ed04

0800e4f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e4f4:	b672      	cpsid	i
    uxCriticalNesting++;
 800e4f6:	4b06      	ldr	r3, [pc, #24]	@ (800e510 <vPortEnterCritical+0x20>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	4b04      	ldr	r3, [pc, #16]	@ (800e510 <vPortEnterCritical+0x20>)
 800e4fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e500:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e504:	f3bf 8f6f 	isb	sy
}
 800e508:	46c0      	nop			@ (mov r8, r8)
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	46c0      	nop			@ (mov r8, r8)
 800e510:	20000028 	.word	0x20000028

0800e514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e518:	4b09      	ldr	r3, [pc, #36]	@ (800e540 <vPortExitCritical+0x2c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <vPortExitCritical+0x12>
 800e520:	b672      	cpsid	i
 800e522:	46c0      	nop			@ (mov r8, r8)
 800e524:	e7fd      	b.n	800e522 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800e526:	4b06      	ldr	r3, [pc, #24]	@ (800e540 <vPortExitCritical+0x2c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	1e5a      	subs	r2, r3, #1
 800e52c:	4b04      	ldr	r3, [pc, #16]	@ (800e540 <vPortExitCritical+0x2c>)
 800e52e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800e530:	4b03      	ldr	r3, [pc, #12]	@ (800e540 <vPortExitCritical+0x2c>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d100      	bne.n	800e53a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 800e538:	b662      	cpsie	i
    }
}
 800e53a:	46c0      	nop			@ (mov r8, r8)
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	20000028 	.word	0x20000028

0800e544 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e544:	f3ef 8010 	mrs	r0, PRIMASK
 800e548:	b672      	cpsid	i
 800e54a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800e54c:	46c0      	nop			@ (mov r8, r8)
 800e54e:	0018      	movs	r0, r3

0800e550 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e550:	f380 8810 	msr	PRIMASK, r0
 800e554:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800e556:	46c0      	nop			@ (mov r8, r8)
	...

0800e560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e560:	f3ef 8009 	mrs	r0, PSP
 800e564:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a0 <pxCurrentTCBConst>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	3820      	subs	r0, #32
 800e56a:	6010      	str	r0, [r2, #0]
 800e56c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e56e:	4644      	mov	r4, r8
 800e570:	464d      	mov	r5, r9
 800e572:	4656      	mov	r6, sl
 800e574:	465f      	mov	r7, fp
 800e576:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e578:	b508      	push	{r3, lr}
 800e57a:	b672      	cpsid	i
 800e57c:	f7ff fb58 	bl	800dc30 <vTaskSwitchContext>
 800e580:	b662      	cpsie	i
 800e582:	bc0c      	pop	{r2, r3}
 800e584:	6811      	ldr	r1, [r2, #0]
 800e586:	6808      	ldr	r0, [r1, #0]
 800e588:	3010      	adds	r0, #16
 800e58a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e58c:	46a0      	mov	r8, r4
 800e58e:	46a9      	mov	r9, r5
 800e590:	46b2      	mov	sl, r6
 800e592:	46bb      	mov	fp, r7
 800e594:	f380 8809 	msr	PSP, r0
 800e598:	3820      	subs	r0, #32
 800e59a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e59c:	4718      	bx	r3
 800e59e:	46c0      	nop			@ (mov r8, r8)

0800e5a0 <pxCurrentTCBConst>:
 800e5a0:	20000ef8 	.word	0x20000ef8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e5a4:	46c0      	nop			@ (mov r8, r8)
 800e5a6:	46c0      	nop			@ (mov r8, r8)

0800e5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5ae:	f7ff ffc9 	bl	800e544 <ulSetInterruptMaskFromISR>
 800e5b2:	0003      	movs	r3, r0
 800e5b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5b6:	f7ff fa8b 	bl	800dad0 <xTaskIncrementTick>
 800e5ba:	1e03      	subs	r3, r0, #0
 800e5bc:	d003      	beq.n	800e5c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e5be:	4b06      	ldr	r3, [pc, #24]	@ (800e5d8 <SysTick_Handler+0x30>)
 800e5c0:	2280      	movs	r2, #128	@ 0x80
 800e5c2:	0552      	lsls	r2, r2, #21
 800e5c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f7ff ffc1 	bl	800e550 <vClearInterruptMaskFromISR>
}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	b002      	add	sp, #8
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	46c0      	nop			@ (mov r8, r8)
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800e5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e610 <prvSetupTimerInterrupt+0x34>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e614 <prvSetupTimerInterrupt+0x38>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <prvSetupTimerInterrupt+0x3c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	22fa      	movs	r2, #250	@ 0xfa
 800e5f2:	0091      	lsls	r1, r2, #2
 800e5f4:	0018      	movs	r0, r3
 800e5f6:	f7f1 fda3 	bl	8000140 <__udivsi3>
 800e5fa:	0003      	movs	r3, r0
 800e5fc:	001a      	movs	r2, r3
 800e5fe:	4b07      	ldr	r3, [pc, #28]	@ (800e61c <prvSetupTimerInterrupt+0x40>)
 800e600:	3a01      	subs	r2, #1
 800e602:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e604:	4b02      	ldr	r3, [pc, #8]	@ (800e610 <prvSetupTimerInterrupt+0x34>)
 800e606:	2207      	movs	r2, #7
 800e608:	601a      	str	r2, [r3, #0]
}
 800e60a:	46c0      	nop			@ (mov r8, r8)
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	e000e010 	.word	0xe000e010
 800e614:	e000e018 	.word	0xe000e018
 800e618:	20000004 	.word	0x20000004
 800e61c:	e000e014 	.word	0xe000e014

0800e620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e62c:	f7ff f9b8 	bl	800d9a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e630:	4b4a      	ldr	r3, [pc, #296]	@ (800e75c <pvPortMalloc+0x13c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e638:	f000 f8e4 	bl	800e804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e63c:	4b48      	ldr	r3, [pc, #288]	@ (800e760 <pvPortMalloc+0x140>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	4013      	ands	r3, r2
 800e644:	d000      	beq.n	800e648 <pvPortMalloc+0x28>
 800e646:	e07b      	b.n	800e740 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d013      	beq.n	800e676 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800e64e:	2208      	movs	r2, #8
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	189b      	adds	r3, r3, r2
 800e654:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2207      	movs	r2, #7
 800e65a:	4013      	ands	r3, r2
 800e65c:	d00b      	beq.n	800e676 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2207      	movs	r2, #7
 800e662:	4393      	bics	r3, r2
 800e664:	3308      	adds	r3, #8
 800e666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2207      	movs	r2, #7
 800e66c:	4013      	ands	r3, r2
 800e66e:	d002      	beq.n	800e676 <pvPortMalloc+0x56>
 800e670:	b672      	cpsid	i
 800e672:	46c0      	nop			@ (mov r8, r8)
 800e674:	e7fd      	b.n	800e672 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d061      	beq.n	800e740 <pvPortMalloc+0x120>
 800e67c:	4b39      	ldr	r3, [pc, #228]	@ (800e764 <pvPortMalloc+0x144>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d85c      	bhi.n	800e740 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e686:	4b38      	ldr	r3, [pc, #224]	@ (800e768 <pvPortMalloc+0x148>)
 800e688:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800e68a:	4b37      	ldr	r3, [pc, #220]	@ (800e768 <pvPortMalloc+0x148>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e690:	e004      	b.n	800e69c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d903      	bls.n	800e6ae <pvPortMalloc+0x8e>
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1f1      	bne.n	800e692 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e75c <pvPortMalloc+0x13c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d043      	beq.n	800e740 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2208      	movs	r2, #8
 800e6be:	189b      	adds	r3, r3, r2
 800e6c0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	1ad2      	subs	r2, r2, r3
 800e6d2:	2308      	movs	r3, #8
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d917      	bls.n	800e70a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	18d3      	adds	r3, r2, r3
 800e6e0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2207      	movs	r2, #7
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	d002      	beq.n	800e6f0 <pvPortMalloc+0xd0>
 800e6ea:	b672      	cpsid	i
 800e6ec:	46c0      	nop			@ (mov r8, r8)
 800e6ee:	e7fd      	b.n	800e6ec <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	685a      	ldr	r2, [r3, #4]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	1ad2      	subs	r2, r2, r3
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	0018      	movs	r0, r3
 800e706:	f000 f8dd 	bl	800e8c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e70a:	4b16      	ldr	r3, [pc, #88]	@ (800e764 <pvPortMalloc+0x144>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	1ad2      	subs	r2, r2, r3
 800e714:	4b13      	ldr	r3, [pc, #76]	@ (800e764 <pvPortMalloc+0x144>)
 800e716:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e718:	4b12      	ldr	r3, [pc, #72]	@ (800e764 <pvPortMalloc+0x144>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	4b13      	ldr	r3, [pc, #76]	@ (800e76c <pvPortMalloc+0x14c>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	d203      	bcs.n	800e72c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e724:	4b0f      	ldr	r3, [pc, #60]	@ (800e764 <pvPortMalloc+0x144>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	4b10      	ldr	r3, [pc, #64]	@ (800e76c <pvPortMalloc+0x14c>)
 800e72a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	4b0b      	ldr	r3, [pc, #44]	@ (800e760 <pvPortMalloc+0x140>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	431a      	orrs	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e740:	f7ff f93a 	bl	800d9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2207      	movs	r2, #7
 800e748:	4013      	ands	r3, r2
 800e74a:	d002      	beq.n	800e752 <pvPortMalloc+0x132>
 800e74c:	b672      	cpsid	i
 800e74e:	46c0      	nop			@ (mov r8, r8)
 800e750:	e7fd      	b.n	800e74e <pvPortMalloc+0x12e>
	return pvReturn;
 800e752:	68fb      	ldr	r3, [r7, #12]
}
 800e754:	0018      	movs	r0, r3
 800e756:	46bd      	mov	sp, r7
 800e758:	b006      	add	sp, #24
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	2000482c 	.word	0x2000482c
 800e760:	20004838 	.word	0x20004838
 800e764:	20004830 	.word	0x20004830
 800e768:	20004824 	.word	0x20004824
 800e76c:	20004834 	.word	0x20004834

0800e770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d037      	beq.n	800e7f2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e782:	2308      	movs	r3, #8
 800e784:	425b      	negs	r3, r3
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	18d3      	adds	r3, r2, r3
 800e78a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	4b19      	ldr	r3, [pc, #100]	@ (800e7fc <vPortFree+0x8c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4013      	ands	r3, r2
 800e79a:	d102      	bne.n	800e7a2 <vPortFree+0x32>
 800e79c:	b672      	cpsid	i
 800e79e:	46c0      	nop			@ (mov r8, r8)
 800e7a0:	e7fd      	b.n	800e79e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <vPortFree+0x40>
 800e7aa:	b672      	cpsid	i
 800e7ac:	46c0      	nop			@ (mov r8, r8)
 800e7ae:	e7fd      	b.n	800e7ac <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	685a      	ldr	r2, [r3, #4]
 800e7b4:	4b11      	ldr	r3, [pc, #68]	@ (800e7fc <vPortFree+0x8c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	d01a      	beq.n	800e7f2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d116      	bne.n	800e7f2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e7fc <vPortFree+0x8c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	43db      	mvns	r3, r3
 800e7ce:	401a      	ands	r2, r3
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7d4:	f7ff f8e4 	bl	800d9a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	4b08      	ldr	r3, [pc, #32]	@ (800e800 <vPortFree+0x90>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	18d2      	adds	r2, r2, r3
 800e7e2:	4b07      	ldr	r3, [pc, #28]	@ (800e800 <vPortFree+0x90>)
 800e7e4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f000 f86b 	bl	800e8c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e7ee:	f7ff f8e3 	bl	800d9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7f2:	46c0      	nop			@ (mov r8, r8)
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	b004      	add	sp, #16
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	46c0      	nop			@ (mov r8, r8)
 800e7fc:	20004838 	.word	0x20004838
 800e800:	20004830 	.word	0x20004830

0800e804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e80a:	23e0      	movs	r3, #224	@ 0xe0
 800e80c:	019b      	lsls	r3, r3, #6
 800e80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e810:	4b26      	ldr	r3, [pc, #152]	@ (800e8ac <prvHeapInit+0xa8>)
 800e812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2207      	movs	r2, #7
 800e818:	4013      	ands	r3, r2
 800e81a:	d00c      	beq.n	800e836 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	3307      	adds	r3, #7
 800e820:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2207      	movs	r2, #7
 800e826:	4393      	bics	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	1ad2      	subs	r2, r2, r3
 800e830:	4b1e      	ldr	r3, [pc, #120]	@ (800e8ac <prvHeapInit+0xa8>)
 800e832:	18d3      	adds	r3, r2, r3
 800e834:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e83a:	4b1d      	ldr	r3, [pc, #116]	@ (800e8b0 <prvHeapInit+0xac>)
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e840:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b0 <prvHeapInit+0xac>)
 800e842:	2200      	movs	r2, #0
 800e844:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	18d3      	adds	r3, r2, r3
 800e84c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e84e:	2208      	movs	r2, #8
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2207      	movs	r2, #7
 800e85a:	4393      	bics	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	4b14      	ldr	r3, [pc, #80]	@ (800e8b4 <prvHeapInit+0xb0>)
 800e862:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800e864:	4b13      	ldr	r3, [pc, #76]	@ (800e8b4 <prvHeapInit+0xb0>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2200      	movs	r2, #0
 800e86a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e86c:	4b11      	ldr	r3, [pc, #68]	@ (800e8b4 <prvHeapInit+0xb0>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2200      	movs	r2, #0
 800e872:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	1ad2      	subs	r2, r2, r3
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e882:	4b0c      	ldr	r3, [pc, #48]	@ (800e8b4 <prvHeapInit+0xb0>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b8 <prvHeapInit+0xb4>)
 800e890:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	4b09      	ldr	r3, [pc, #36]	@ (800e8bc <prvHeapInit+0xb8>)
 800e898:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e89a:	4b09      	ldr	r3, [pc, #36]	@ (800e8c0 <prvHeapInit+0xbc>)
 800e89c:	2280      	movs	r2, #128	@ 0x80
 800e89e:	0612      	lsls	r2, r2, #24
 800e8a0:	601a      	str	r2, [r3, #0]
}
 800e8a2:	46c0      	nop			@ (mov r8, r8)
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	b004      	add	sp, #16
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	46c0      	nop			@ (mov r8, r8)
 800e8ac:	20001024 	.word	0x20001024
 800e8b0:	20004824 	.word	0x20004824
 800e8b4:	2000482c 	.word	0x2000482c
 800e8b8:	20004834 	.word	0x20004834
 800e8bc:	20004830 	.word	0x20004830
 800e8c0:	20004838 	.word	0x20004838

0800e8c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8cc:	4b27      	ldr	r3, [pc, #156]	@ (800e96c <prvInsertBlockIntoFreeList+0xa8>)
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e002      	b.n	800e8d8 <prvInsertBlockIntoFreeList+0x14>
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d8f7      	bhi.n	800e8d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	18d3      	adds	r3, r2, r3
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d108      	bne.n	800e906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	18d2      	adds	r2, r2, r3
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	18d2      	adds	r2, r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	429a      	cmp	r2, r3
 800e918:	d118      	bne.n	800e94c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	4b14      	ldr	r3, [pc, #80]	@ (800e970 <prvInsertBlockIntoFreeList+0xac>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d00d      	beq.n	800e942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	18d2      	adds	r2, r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	e008      	b.n	800e954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e942:	4b0b      	ldr	r3, [pc, #44]	@ (800e970 <prvInsertBlockIntoFreeList+0xac>)
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	e003      	b.n	800e954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d002      	beq.n	800e962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e962:	46c0      	nop			@ (mov r8, r8)
 800e964:	46bd      	mov	sp, r7
 800e966:	b004      	add	sp, #16
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	46c0      	nop			@ (mov r8, r8)
 800e96c:	20004824 	.word	0x20004824
 800e970:	2000482c 	.word	0x2000482c

0800e974 <__cvt>:
 800e974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e976:	001f      	movs	r7, r3
 800e978:	2300      	movs	r3, #0
 800e97a:	0016      	movs	r6, r2
 800e97c:	b08b      	sub	sp, #44	@ 0x2c
 800e97e:	429f      	cmp	r7, r3
 800e980:	da04      	bge.n	800e98c <__cvt+0x18>
 800e982:	2180      	movs	r1, #128	@ 0x80
 800e984:	0609      	lsls	r1, r1, #24
 800e986:	187b      	adds	r3, r7, r1
 800e988:	001f      	movs	r7, r3
 800e98a:	232d      	movs	r3, #45	@ 0x2d
 800e98c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e98e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e990:	7013      	strb	r3, [r2, #0]
 800e992:	2320      	movs	r3, #32
 800e994:	2203      	movs	r2, #3
 800e996:	439d      	bics	r5, r3
 800e998:	2d46      	cmp	r5, #70	@ 0x46
 800e99a:	d007      	beq.n	800e9ac <__cvt+0x38>
 800e99c:	002b      	movs	r3, r5
 800e99e:	3b45      	subs	r3, #69	@ 0x45
 800e9a0:	4259      	negs	r1, r3
 800e9a2:	414b      	adcs	r3, r1
 800e9a4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e9a6:	3a01      	subs	r2, #1
 800e9a8:	18cb      	adds	r3, r1, r3
 800e9aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9ac:	ab09      	add	r3, sp, #36	@ 0x24
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	ab08      	add	r3, sp, #32
 800e9b2:	9303      	str	r3, [sp, #12]
 800e9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9b6:	9200      	str	r2, [sp, #0]
 800e9b8:	9302      	str	r3, [sp, #8]
 800e9ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9bc:	0032      	movs	r2, r6
 800e9be:	9301      	str	r3, [sp, #4]
 800e9c0:	003b      	movs	r3, r7
 800e9c2:	f001 f8d9 	bl	800fb78 <_dtoa_r>
 800e9c6:	0004      	movs	r4, r0
 800e9c8:	2d47      	cmp	r5, #71	@ 0x47
 800e9ca:	d11b      	bne.n	800ea04 <__cvt+0x90>
 800e9cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e9ce:	07db      	lsls	r3, r3, #31
 800e9d0:	d511      	bpl.n	800e9f6 <__cvt+0x82>
 800e9d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9d4:	18c3      	adds	r3, r0, r3
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2300      	movs	r3, #0
 800e9dc:	0030      	movs	r0, r6
 800e9de:	0039      	movs	r1, r7
 800e9e0:	f7f1 fd34 	bl	800044c <__aeabi_dcmpeq>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d001      	beq.n	800e9ec <__cvt+0x78>
 800e9e8:	9b07      	ldr	r3, [sp, #28]
 800e9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ec:	2230      	movs	r2, #48	@ 0x30
 800e9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f0:	9907      	ldr	r1, [sp, #28]
 800e9f2:	428b      	cmp	r3, r1
 800e9f4:	d320      	bcc.n	800ea38 <__cvt+0xc4>
 800e9f6:	0020      	movs	r0, r4
 800e9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e9fc:	1b1b      	subs	r3, r3, r4
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	b00b      	add	sp, #44	@ 0x2c
 800ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea06:	18c3      	adds	r3, r0, r3
 800ea08:	9307      	str	r3, [sp, #28]
 800ea0a:	2d46      	cmp	r5, #70	@ 0x46
 800ea0c:	d1e4      	bne.n	800e9d8 <__cvt+0x64>
 800ea0e:	7803      	ldrb	r3, [r0, #0]
 800ea10:	2b30      	cmp	r3, #48	@ 0x30
 800ea12:	d10c      	bne.n	800ea2e <__cvt+0xba>
 800ea14:	2200      	movs	r2, #0
 800ea16:	2300      	movs	r3, #0
 800ea18:	0030      	movs	r0, r6
 800ea1a:	0039      	movs	r1, r7
 800ea1c:	f7f1 fd16 	bl	800044c <__aeabi_dcmpeq>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d104      	bne.n	800ea2e <__cvt+0xba>
 800ea24:	2301      	movs	r3, #1
 800ea26:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ea28:	1a9b      	subs	r3, r3, r2
 800ea2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea30:	9a07      	ldr	r2, [sp, #28]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	18d3      	adds	r3, r2, r3
 800ea36:	e7ce      	b.n	800e9d6 <__cvt+0x62>
 800ea38:	1c59      	adds	r1, r3, #1
 800ea3a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea3c:	701a      	strb	r2, [r3, #0]
 800ea3e:	e7d6      	b.n	800e9ee <__cvt+0x7a>

0800ea40 <__exponent>:
 800ea40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea42:	232b      	movs	r3, #43	@ 0x2b
 800ea44:	0005      	movs	r5, r0
 800ea46:	000c      	movs	r4, r1
 800ea48:	b085      	sub	sp, #20
 800ea4a:	7002      	strb	r2, [r0, #0]
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	da01      	bge.n	800ea54 <__exponent+0x14>
 800ea50:	424c      	negs	r4, r1
 800ea52:	3302      	adds	r3, #2
 800ea54:	706b      	strb	r3, [r5, #1]
 800ea56:	2c09      	cmp	r4, #9
 800ea58:	dd2c      	ble.n	800eab4 <__exponent+0x74>
 800ea5a:	ab02      	add	r3, sp, #8
 800ea5c:	1dde      	adds	r6, r3, #7
 800ea5e:	0020      	movs	r0, r4
 800ea60:	210a      	movs	r1, #10
 800ea62:	f7f1 fcdd 	bl	8000420 <__aeabi_idivmod>
 800ea66:	0037      	movs	r7, r6
 800ea68:	3130      	adds	r1, #48	@ 0x30
 800ea6a:	3e01      	subs	r6, #1
 800ea6c:	0020      	movs	r0, r4
 800ea6e:	7031      	strb	r1, [r6, #0]
 800ea70:	210a      	movs	r1, #10
 800ea72:	9401      	str	r4, [sp, #4]
 800ea74:	f7f1 fbee 	bl	8000254 <__divsi3>
 800ea78:	9b01      	ldr	r3, [sp, #4]
 800ea7a:	0004      	movs	r4, r0
 800ea7c:	2b63      	cmp	r3, #99	@ 0x63
 800ea7e:	dcee      	bgt.n	800ea5e <__exponent+0x1e>
 800ea80:	1eba      	subs	r2, r7, #2
 800ea82:	1ca8      	adds	r0, r5, #2
 800ea84:	0001      	movs	r1, r0
 800ea86:	0013      	movs	r3, r2
 800ea88:	3430      	adds	r4, #48	@ 0x30
 800ea8a:	7014      	strb	r4, [r2, #0]
 800ea8c:	ac02      	add	r4, sp, #8
 800ea8e:	3407      	adds	r4, #7
 800ea90:	429c      	cmp	r4, r3
 800ea92:	d80a      	bhi.n	800eaaa <__exponent+0x6a>
 800ea94:	2300      	movs	r3, #0
 800ea96:	42a2      	cmp	r2, r4
 800ea98:	d803      	bhi.n	800eaa2 <__exponent+0x62>
 800ea9a:	3309      	adds	r3, #9
 800ea9c:	aa02      	add	r2, sp, #8
 800ea9e:	189b      	adds	r3, r3, r2
 800eaa0:	1bdb      	subs	r3, r3, r7
 800eaa2:	18c0      	adds	r0, r0, r3
 800eaa4:	1b40      	subs	r0, r0, r5
 800eaa6:	b005      	add	sp, #20
 800eaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaaa:	781c      	ldrb	r4, [r3, #0]
 800eaac:	3301      	adds	r3, #1
 800eaae:	700c      	strb	r4, [r1, #0]
 800eab0:	3101      	adds	r1, #1
 800eab2:	e7eb      	b.n	800ea8c <__exponent+0x4c>
 800eab4:	2330      	movs	r3, #48	@ 0x30
 800eab6:	18e4      	adds	r4, r4, r3
 800eab8:	70ab      	strb	r3, [r5, #2]
 800eaba:	1d28      	adds	r0, r5, #4
 800eabc:	70ec      	strb	r4, [r5, #3]
 800eabe:	e7f1      	b.n	800eaa4 <__exponent+0x64>

0800eac0 <_printf_float>:
 800eac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac2:	b097      	sub	sp, #92	@ 0x5c
 800eac4:	000d      	movs	r5, r1
 800eac6:	920a      	str	r2, [sp, #40]	@ 0x28
 800eac8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800eaca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eacc:	9009      	str	r0, [sp, #36]	@ 0x24
 800eace:	f000 ff2d 	bl	800f92c <_localeconv_r>
 800ead2:	6803      	ldr	r3, [r0, #0]
 800ead4:	0018      	movs	r0, r3
 800ead6:	930d      	str	r3, [sp, #52]	@ 0x34
 800ead8:	f7f1 fb16 	bl	8000108 <strlen>
 800eadc:	2300      	movs	r3, #0
 800eade:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eae0:	9314      	str	r3, [sp, #80]	@ 0x50
 800eae2:	7e2b      	ldrb	r3, [r5, #24]
 800eae4:	2207      	movs	r2, #7
 800eae6:	930c      	str	r3, [sp, #48]	@ 0x30
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	930e      	str	r3, [sp, #56]	@ 0x38
 800eaec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	05c9      	lsls	r1, r1, #23
 800eaf2:	d545      	bpl.n	800eb80 <_printf_float+0xc0>
 800eaf4:	189b      	adds	r3, r3, r2
 800eaf6:	4393      	bics	r3, r2
 800eaf8:	001a      	movs	r2, r3
 800eafa:	3208      	adds	r2, #8
 800eafc:	6022      	str	r2, [r4, #0]
 800eafe:	2201      	movs	r2, #1
 800eb00:	681e      	ldr	r6, [r3, #0]
 800eb02:	685f      	ldr	r7, [r3, #4]
 800eb04:	007b      	lsls	r3, r7, #1
 800eb06:	085b      	lsrs	r3, r3, #1
 800eb08:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb0a:	9610      	str	r6, [sp, #64]	@ 0x40
 800eb0c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800eb0e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800eb10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eb12:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eb14:	4ba7      	ldr	r3, [pc, #668]	@ (800edb4 <_printf_float+0x2f4>)
 800eb16:	4252      	negs	r2, r2
 800eb18:	f7f4 fbaa 	bl	8003270 <__aeabi_dcmpun>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d131      	bne.n	800eb84 <_printf_float+0xc4>
 800eb20:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eb22:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eb24:	2201      	movs	r2, #1
 800eb26:	4ba3      	ldr	r3, [pc, #652]	@ (800edb4 <_printf_float+0x2f4>)
 800eb28:	4252      	negs	r2, r2
 800eb2a:	f7f1 fc9f 	bl	800046c <__aeabi_dcmple>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d128      	bne.n	800eb84 <_printf_float+0xc4>
 800eb32:	2200      	movs	r2, #0
 800eb34:	2300      	movs	r3, #0
 800eb36:	0030      	movs	r0, r6
 800eb38:	0039      	movs	r1, r7
 800eb3a:	f7f1 fc8d 	bl	8000458 <__aeabi_dcmplt>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d003      	beq.n	800eb4a <_printf_float+0x8a>
 800eb42:	002b      	movs	r3, r5
 800eb44:	222d      	movs	r2, #45	@ 0x2d
 800eb46:	3343      	adds	r3, #67	@ 0x43
 800eb48:	701a      	strb	r2, [r3, #0]
 800eb4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb4c:	4f9a      	ldr	r7, [pc, #616]	@ (800edb8 <_printf_float+0x2f8>)
 800eb4e:	2b47      	cmp	r3, #71	@ 0x47
 800eb50:	d900      	bls.n	800eb54 <_printf_float+0x94>
 800eb52:	4f9a      	ldr	r7, [pc, #616]	@ (800edbc <_printf_float+0x2fc>)
 800eb54:	2303      	movs	r3, #3
 800eb56:	2400      	movs	r4, #0
 800eb58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb5a:	612b      	str	r3, [r5, #16]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	439a      	bics	r2, r3
 800eb60:	602a      	str	r2, [r5, #0]
 800eb62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb64:	0029      	movs	r1, r5
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb6c:	aa15      	add	r2, sp, #84	@ 0x54
 800eb6e:	f000 f9e5 	bl	800ef3c <_printf_common>
 800eb72:	3001      	adds	r0, #1
 800eb74:	d000      	beq.n	800eb78 <_printf_float+0xb8>
 800eb76:	e09f      	b.n	800ecb8 <_printf_float+0x1f8>
 800eb78:	2001      	movs	r0, #1
 800eb7a:	4240      	negs	r0, r0
 800eb7c:	b017      	add	sp, #92	@ 0x5c
 800eb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb80:	3307      	adds	r3, #7
 800eb82:	e7b8      	b.n	800eaf6 <_printf_float+0x36>
 800eb84:	0032      	movs	r2, r6
 800eb86:	003b      	movs	r3, r7
 800eb88:	0030      	movs	r0, r6
 800eb8a:	0039      	movs	r1, r7
 800eb8c:	f7f4 fb70 	bl	8003270 <__aeabi_dcmpun>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d00b      	beq.n	800ebac <_printf_float+0xec>
 800eb94:	2f00      	cmp	r7, #0
 800eb96:	da03      	bge.n	800eba0 <_printf_float+0xe0>
 800eb98:	002b      	movs	r3, r5
 800eb9a:	222d      	movs	r2, #45	@ 0x2d
 800eb9c:	3343      	adds	r3, #67	@ 0x43
 800eb9e:	701a      	strb	r2, [r3, #0]
 800eba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba2:	4f87      	ldr	r7, [pc, #540]	@ (800edc0 <_printf_float+0x300>)
 800eba4:	2b47      	cmp	r3, #71	@ 0x47
 800eba6:	d9d5      	bls.n	800eb54 <_printf_float+0x94>
 800eba8:	4f86      	ldr	r7, [pc, #536]	@ (800edc4 <_printf_float+0x304>)
 800ebaa:	e7d3      	b.n	800eb54 <_printf_float+0x94>
 800ebac:	2220      	movs	r2, #32
 800ebae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ebb0:	686b      	ldr	r3, [r5, #4]
 800ebb2:	4394      	bics	r4, r2
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	d146      	bne.n	800ec46 <_printf_float+0x186>
 800ebb8:	3307      	adds	r3, #7
 800ebba:	606b      	str	r3, [r5, #4]
 800ebbc:	2380      	movs	r3, #128	@ 0x80
 800ebbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	9206      	str	r2, [sp, #24]
 800ebca:	aa14      	add	r2, sp, #80	@ 0x50
 800ebcc:	9205      	str	r2, [sp, #20]
 800ebce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ebd0:	a90a      	add	r1, sp, #40	@ 0x28
 800ebd2:	9204      	str	r2, [sp, #16]
 800ebd4:	aa13      	add	r2, sp, #76	@ 0x4c
 800ebd6:	9203      	str	r2, [sp, #12]
 800ebd8:	2223      	movs	r2, #35	@ 0x23
 800ebda:	1852      	adds	r2, r2, r1
 800ebdc:	9202      	str	r2, [sp, #8]
 800ebde:	9301      	str	r3, [sp, #4]
 800ebe0:	686b      	ldr	r3, [r5, #4]
 800ebe2:	0032      	movs	r2, r6
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebe8:	003b      	movs	r3, r7
 800ebea:	f7ff fec3 	bl	800e974 <__cvt>
 800ebee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ebf0:	0007      	movs	r7, r0
 800ebf2:	2c47      	cmp	r4, #71	@ 0x47
 800ebf4:	d12d      	bne.n	800ec52 <_printf_float+0x192>
 800ebf6:	1cd3      	adds	r3, r2, #3
 800ebf8:	db02      	blt.n	800ec00 <_printf_float+0x140>
 800ebfa:	686b      	ldr	r3, [r5, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	dd48      	ble.n	800ec92 <_printf_float+0x1d2>
 800ec00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ec04:	3b02      	subs	r3, #2
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec0a:	0028      	movs	r0, r5
 800ec0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec0e:	3901      	subs	r1, #1
 800ec10:	3050      	adds	r0, #80	@ 0x50
 800ec12:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ec14:	f7ff ff14 	bl	800ea40 <__exponent>
 800ec18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec1a:	0004      	movs	r4, r0
 800ec1c:	1813      	adds	r3, r2, r0
 800ec1e:	612b      	str	r3, [r5, #16]
 800ec20:	2a01      	cmp	r2, #1
 800ec22:	dc02      	bgt.n	800ec2a <_printf_float+0x16a>
 800ec24:	682a      	ldr	r2, [r5, #0]
 800ec26:	07d2      	lsls	r2, r2, #31
 800ec28:	d501      	bpl.n	800ec2e <_printf_float+0x16e>
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	612b      	str	r3, [r5, #16]
 800ec2e:	2323      	movs	r3, #35	@ 0x23
 800ec30:	aa0a      	add	r2, sp, #40	@ 0x28
 800ec32:	189b      	adds	r3, r3, r2
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d100      	bne.n	800ec3c <_printf_float+0x17c>
 800ec3a:	e792      	b.n	800eb62 <_printf_float+0xa2>
 800ec3c:	002b      	movs	r3, r5
 800ec3e:	222d      	movs	r2, #45	@ 0x2d
 800ec40:	3343      	adds	r3, #67	@ 0x43
 800ec42:	701a      	strb	r2, [r3, #0]
 800ec44:	e78d      	b.n	800eb62 <_printf_float+0xa2>
 800ec46:	2c47      	cmp	r4, #71	@ 0x47
 800ec48:	d1b8      	bne.n	800ebbc <_printf_float+0xfc>
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1b6      	bne.n	800ebbc <_printf_float+0xfc>
 800ec4e:	3301      	adds	r3, #1
 800ec50:	e7b3      	b.n	800ebba <_printf_float+0xfa>
 800ec52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec54:	0011      	movs	r1, r2
 800ec56:	2b65      	cmp	r3, #101	@ 0x65
 800ec58:	d9d7      	bls.n	800ec0a <_printf_float+0x14a>
 800ec5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec5c:	2b66      	cmp	r3, #102	@ 0x66
 800ec5e:	d11a      	bne.n	800ec96 <_printf_float+0x1d6>
 800ec60:	686b      	ldr	r3, [r5, #4]
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	dd09      	ble.n	800ec7a <_printf_float+0x1ba>
 800ec66:	612a      	str	r2, [r5, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d102      	bne.n	800ec72 <_printf_float+0x1b2>
 800ec6c:	6829      	ldr	r1, [r5, #0]
 800ec6e:	07c9      	lsls	r1, r1, #31
 800ec70:	d50b      	bpl.n	800ec8a <_printf_float+0x1ca>
 800ec72:	3301      	adds	r3, #1
 800ec74:	189b      	adds	r3, r3, r2
 800ec76:	612b      	str	r3, [r5, #16]
 800ec78:	e007      	b.n	800ec8a <_printf_float+0x1ca>
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d103      	bne.n	800ec86 <_printf_float+0x1c6>
 800ec7e:	2201      	movs	r2, #1
 800ec80:	6829      	ldr	r1, [r5, #0]
 800ec82:	4211      	tst	r1, r2
 800ec84:	d000      	beq.n	800ec88 <_printf_float+0x1c8>
 800ec86:	1c9a      	adds	r2, r3, #2
 800ec88:	612a      	str	r2, [r5, #16]
 800ec8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec8c:	2400      	movs	r4, #0
 800ec8e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ec90:	e7cd      	b.n	800ec2e <_printf_float+0x16e>
 800ec92:	2367      	movs	r3, #103	@ 0x67
 800ec94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ec98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec9a:	4299      	cmp	r1, r3
 800ec9c:	db06      	blt.n	800ecac <_printf_float+0x1ec>
 800ec9e:	682b      	ldr	r3, [r5, #0]
 800eca0:	6129      	str	r1, [r5, #16]
 800eca2:	07db      	lsls	r3, r3, #31
 800eca4:	d5f1      	bpl.n	800ec8a <_printf_float+0x1ca>
 800eca6:	3101      	adds	r1, #1
 800eca8:	6129      	str	r1, [r5, #16]
 800ecaa:	e7ee      	b.n	800ec8a <_printf_float+0x1ca>
 800ecac:	2201      	movs	r2, #1
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	dce0      	bgt.n	800ec74 <_printf_float+0x1b4>
 800ecb2:	1892      	adds	r2, r2, r2
 800ecb4:	1a52      	subs	r2, r2, r1
 800ecb6:	e7dd      	b.n	800ec74 <_printf_float+0x1b4>
 800ecb8:	682a      	ldr	r2, [r5, #0]
 800ecba:	0553      	lsls	r3, r2, #21
 800ecbc:	d408      	bmi.n	800ecd0 <_printf_float+0x210>
 800ecbe:	692b      	ldr	r3, [r5, #16]
 800ecc0:	003a      	movs	r2, r7
 800ecc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ecc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecc6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ecc8:	47a0      	blx	r4
 800ecca:	3001      	adds	r0, #1
 800eccc:	d129      	bne.n	800ed22 <_printf_float+0x262>
 800ecce:	e753      	b.n	800eb78 <_printf_float+0xb8>
 800ecd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecd2:	2b65      	cmp	r3, #101	@ 0x65
 800ecd4:	d800      	bhi.n	800ecd8 <_printf_float+0x218>
 800ecd6:	e0da      	b.n	800ee8e <_printf_float+0x3ce>
 800ecd8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ecda:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2300      	movs	r3, #0
 800ece0:	f7f1 fbb4 	bl	800044c <__aeabi_dcmpeq>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d033      	beq.n	800ed50 <_printf_float+0x290>
 800ece8:	2301      	movs	r3, #1
 800ecea:	4a37      	ldr	r2, [pc, #220]	@ (800edc8 <_printf_float+0x308>)
 800ecec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ecee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ecf2:	47a0      	blx	r4
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	d100      	bne.n	800ecfa <_printf_float+0x23a>
 800ecf8:	e73e      	b.n	800eb78 <_printf_float+0xb8>
 800ecfa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ecfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ecfe:	42b3      	cmp	r3, r6
 800ed00:	db02      	blt.n	800ed08 <_printf_float+0x248>
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	07db      	lsls	r3, r3, #31
 800ed06:	d50c      	bpl.n	800ed22 <_printf_float+0x262>
 800ed08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed12:	47a0      	blx	r4
 800ed14:	2400      	movs	r4, #0
 800ed16:	3001      	adds	r0, #1
 800ed18:	d100      	bne.n	800ed1c <_printf_float+0x25c>
 800ed1a:	e72d      	b.n	800eb78 <_printf_float+0xb8>
 800ed1c:	1e73      	subs	r3, r6, #1
 800ed1e:	42a3      	cmp	r3, r4
 800ed20:	dc0a      	bgt.n	800ed38 <_printf_float+0x278>
 800ed22:	682b      	ldr	r3, [r5, #0]
 800ed24:	079b      	lsls	r3, r3, #30
 800ed26:	d500      	bpl.n	800ed2a <_printf_float+0x26a>
 800ed28:	e105      	b.n	800ef36 <_printf_float+0x476>
 800ed2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ed2c:	68e8      	ldr	r0, [r5, #12]
 800ed2e:	4298      	cmp	r0, r3
 800ed30:	db00      	blt.n	800ed34 <_printf_float+0x274>
 800ed32:	e723      	b.n	800eb7c <_printf_float+0xbc>
 800ed34:	0018      	movs	r0, r3
 800ed36:	e721      	b.n	800eb7c <_printf_float+0xbc>
 800ed38:	002a      	movs	r2, r5
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed40:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ed42:	321a      	adds	r2, #26
 800ed44:	47b8      	blx	r7
 800ed46:	3001      	adds	r0, #1
 800ed48:	d100      	bne.n	800ed4c <_printf_float+0x28c>
 800ed4a:	e715      	b.n	800eb78 <_printf_float+0xb8>
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	e7e5      	b.n	800ed1c <_printf_float+0x25c>
 800ed50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	dc3a      	bgt.n	800edcc <_printf_float+0x30c>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4a1b      	ldr	r2, [pc, #108]	@ (800edc8 <_printf_float+0x308>)
 800ed5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed60:	47a0      	blx	r4
 800ed62:	3001      	adds	r0, #1
 800ed64:	d100      	bne.n	800ed68 <_printf_float+0x2a8>
 800ed66:	e707      	b.n	800eb78 <_printf_float+0xb8>
 800ed68:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ed6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed6c:	4333      	orrs	r3, r6
 800ed6e:	d102      	bne.n	800ed76 <_printf_float+0x2b6>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	07db      	lsls	r3, r3, #31
 800ed74:	d5d5      	bpl.n	800ed22 <_printf_float+0x262>
 800ed76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed80:	47a0      	blx	r4
 800ed82:	2300      	movs	r3, #0
 800ed84:	3001      	adds	r0, #1
 800ed86:	d100      	bne.n	800ed8a <_printf_float+0x2ca>
 800ed88:	e6f6      	b.n	800eb78 <_printf_float+0xb8>
 800ed8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed90:	425b      	negs	r3, r3
 800ed92:	4293      	cmp	r3, r2
 800ed94:	dc01      	bgt.n	800ed9a <_printf_float+0x2da>
 800ed96:	0033      	movs	r3, r6
 800ed98:	e792      	b.n	800ecc0 <_printf_float+0x200>
 800ed9a:	002a      	movs	r2, r5
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eda0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eda2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800eda4:	321a      	adds	r2, #26
 800eda6:	47a0      	blx	r4
 800eda8:	3001      	adds	r0, #1
 800edaa:	d100      	bne.n	800edae <_printf_float+0x2ee>
 800edac:	e6e4      	b.n	800eb78 <_printf_float+0xb8>
 800edae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edb0:	3301      	adds	r3, #1
 800edb2:	e7ea      	b.n	800ed8a <_printf_float+0x2ca>
 800edb4:	7fefffff 	.word	0x7fefffff
 800edb8:	08013ba8 	.word	0x08013ba8
 800edbc:	08013bac 	.word	0x08013bac
 800edc0:	08013bb0 	.word	0x08013bb0
 800edc4:	08013bb4 	.word	0x08013bb4
 800edc8:	08013bb8 	.word	0x08013bb8
 800edcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800edce:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800edd0:	930c      	str	r3, [sp, #48]	@ 0x30
 800edd2:	429e      	cmp	r6, r3
 800edd4:	dd00      	ble.n	800edd8 <_printf_float+0x318>
 800edd6:	001e      	movs	r6, r3
 800edd8:	2e00      	cmp	r6, #0
 800edda:	dc31      	bgt.n	800ee40 <_printf_float+0x380>
 800eddc:	43f3      	mvns	r3, r6
 800edde:	2400      	movs	r4, #0
 800ede0:	17db      	asrs	r3, r3, #31
 800ede2:	4033      	ands	r3, r6
 800ede4:	930e      	str	r3, [sp, #56]	@ 0x38
 800ede6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ede8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edea:	1af3      	subs	r3, r6, r3
 800edec:	42a3      	cmp	r3, r4
 800edee:	dc30      	bgt.n	800ee52 <_printf_float+0x392>
 800edf0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800edf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800edf4:	429a      	cmp	r2, r3
 800edf6:	dc38      	bgt.n	800ee6a <_printf_float+0x3aa>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	07db      	lsls	r3, r3, #31
 800edfc:	d435      	bmi.n	800ee6a <_printf_float+0x3aa>
 800edfe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ee00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee04:	1b9b      	subs	r3, r3, r6
 800ee06:	1b14      	subs	r4, r2, r4
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	dd00      	ble.n	800ee0e <_printf_float+0x34e>
 800ee0c:	001c      	movs	r4, r3
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	dc34      	bgt.n	800ee7c <_printf_float+0x3bc>
 800ee12:	43e3      	mvns	r3, r4
 800ee14:	2600      	movs	r6, #0
 800ee16:	17db      	asrs	r3, r3, #31
 800ee18:	401c      	ands	r4, r3
 800ee1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	1b1b      	subs	r3, r3, r4
 800ee22:	42b3      	cmp	r3, r6
 800ee24:	dc00      	bgt.n	800ee28 <_printf_float+0x368>
 800ee26:	e77c      	b.n	800ed22 <_printf_float+0x262>
 800ee28:	002a      	movs	r2, r5
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ee32:	321a      	adds	r2, #26
 800ee34:	47b8      	blx	r7
 800ee36:	3001      	adds	r0, #1
 800ee38:	d100      	bne.n	800ee3c <_printf_float+0x37c>
 800ee3a:	e69d      	b.n	800eb78 <_printf_float+0xb8>
 800ee3c:	3601      	adds	r6, #1
 800ee3e:	e7ec      	b.n	800ee1a <_printf_float+0x35a>
 800ee40:	0033      	movs	r3, r6
 800ee42:	003a      	movs	r2, r7
 800ee44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ee4a:	47a0      	blx	r4
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	d1c5      	bne.n	800eddc <_printf_float+0x31c>
 800ee50:	e692      	b.n	800eb78 <_printf_float+0xb8>
 800ee52:	002a      	movs	r2, r5
 800ee54:	2301      	movs	r3, #1
 800ee56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee5a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ee5c:	321a      	adds	r2, #26
 800ee5e:	47b0      	blx	r6
 800ee60:	3001      	adds	r0, #1
 800ee62:	d100      	bne.n	800ee66 <_printf_float+0x3a6>
 800ee64:	e688      	b.n	800eb78 <_printf_float+0xb8>
 800ee66:	3401      	adds	r4, #1
 800ee68:	e7bd      	b.n	800ede6 <_printf_float+0x326>
 800ee6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ee74:	47a0      	blx	r4
 800ee76:	3001      	adds	r0, #1
 800ee78:	d1c1      	bne.n	800edfe <_printf_float+0x33e>
 800ee7a:	e67d      	b.n	800eb78 <_printf_float+0xb8>
 800ee7c:	19ba      	adds	r2, r7, r6
 800ee7e:	0023      	movs	r3, r4
 800ee80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee84:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ee86:	47b0      	blx	r6
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d1c2      	bne.n	800ee12 <_printf_float+0x352>
 800ee8c:	e674      	b.n	800eb78 <_printf_float+0xb8>
 800ee8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee90:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	dc02      	bgt.n	800ee9c <_printf_float+0x3dc>
 800ee96:	2301      	movs	r3, #1
 800ee98:	421a      	tst	r2, r3
 800ee9a:	d039      	beq.n	800ef10 <_printf_float+0x450>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	003a      	movs	r2, r7
 800eea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eea4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eea6:	47b0      	blx	r6
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d100      	bne.n	800eeae <_printf_float+0x3ee>
 800eeac:	e664      	b.n	800eb78 <_printf_float+0xb8>
 800eeae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eeb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eeb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eeb6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eeb8:	47b0      	blx	r6
 800eeba:	3001      	adds	r0, #1
 800eebc:	d100      	bne.n	800eec0 <_printf_float+0x400>
 800eebe:	e65b      	b.n	800eb78 <_printf_float+0xb8>
 800eec0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800eec2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800eec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eec6:	2200      	movs	r2, #0
 800eec8:	3b01      	subs	r3, #1
 800eeca:	930c      	str	r3, [sp, #48]	@ 0x30
 800eecc:	2300      	movs	r3, #0
 800eece:	f7f1 fabd 	bl	800044c <__aeabi_dcmpeq>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d11a      	bne.n	800ef0c <_printf_float+0x44c>
 800eed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eed8:	1c7a      	adds	r2, r7, #1
 800eeda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eedc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eede:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eee0:	47b0      	blx	r6
 800eee2:	3001      	adds	r0, #1
 800eee4:	d10e      	bne.n	800ef04 <_printf_float+0x444>
 800eee6:	e647      	b.n	800eb78 <_printf_float+0xb8>
 800eee8:	002a      	movs	r2, r5
 800eeea:	2301      	movs	r3, #1
 800eeec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eeee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eef0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800eef2:	321a      	adds	r2, #26
 800eef4:	47b8      	blx	r7
 800eef6:	3001      	adds	r0, #1
 800eef8:	d100      	bne.n	800eefc <_printf_float+0x43c>
 800eefa:	e63d      	b.n	800eb78 <_printf_float+0xb8>
 800eefc:	3601      	adds	r6, #1
 800eefe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef00:	429e      	cmp	r6, r3
 800ef02:	dbf1      	blt.n	800eee8 <_printf_float+0x428>
 800ef04:	002a      	movs	r2, r5
 800ef06:	0023      	movs	r3, r4
 800ef08:	3250      	adds	r2, #80	@ 0x50
 800ef0a:	e6da      	b.n	800ecc2 <_printf_float+0x202>
 800ef0c:	2600      	movs	r6, #0
 800ef0e:	e7f6      	b.n	800eefe <_printf_float+0x43e>
 800ef10:	003a      	movs	r2, r7
 800ef12:	e7e2      	b.n	800eeda <_printf_float+0x41a>
 800ef14:	002a      	movs	r2, r5
 800ef16:	2301      	movs	r3, #1
 800ef18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ef1e:	3219      	adds	r2, #25
 800ef20:	47b0      	blx	r6
 800ef22:	3001      	adds	r0, #1
 800ef24:	d100      	bne.n	800ef28 <_printf_float+0x468>
 800ef26:	e627      	b.n	800eb78 <_printf_float+0xb8>
 800ef28:	3401      	adds	r4, #1
 800ef2a:	68eb      	ldr	r3, [r5, #12]
 800ef2c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ef2e:	1a9b      	subs	r3, r3, r2
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	dcef      	bgt.n	800ef14 <_printf_float+0x454>
 800ef34:	e6f9      	b.n	800ed2a <_printf_float+0x26a>
 800ef36:	2400      	movs	r4, #0
 800ef38:	e7f7      	b.n	800ef2a <_printf_float+0x46a>
 800ef3a:	46c0      	nop			@ (mov r8, r8)

0800ef3c <_printf_common>:
 800ef3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef3e:	0016      	movs	r6, r2
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	688a      	ldr	r2, [r1, #8]
 800ef44:	690b      	ldr	r3, [r1, #16]
 800ef46:	000c      	movs	r4, r1
 800ef48:	9000      	str	r0, [sp, #0]
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	da00      	bge.n	800ef50 <_printf_common+0x14>
 800ef4e:	0013      	movs	r3, r2
 800ef50:	0022      	movs	r2, r4
 800ef52:	6033      	str	r3, [r6, #0]
 800ef54:	3243      	adds	r2, #67	@ 0x43
 800ef56:	7812      	ldrb	r2, [r2, #0]
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	d001      	beq.n	800ef60 <_printf_common+0x24>
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	6033      	str	r3, [r6, #0]
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	069b      	lsls	r3, r3, #26
 800ef64:	d502      	bpl.n	800ef6c <_printf_common+0x30>
 800ef66:	6833      	ldr	r3, [r6, #0]
 800ef68:	3302      	adds	r3, #2
 800ef6a:	6033      	str	r3, [r6, #0]
 800ef6c:	6822      	ldr	r2, [r4, #0]
 800ef6e:	2306      	movs	r3, #6
 800ef70:	0015      	movs	r5, r2
 800ef72:	401d      	ands	r5, r3
 800ef74:	421a      	tst	r2, r3
 800ef76:	d027      	beq.n	800efc8 <_printf_common+0x8c>
 800ef78:	0023      	movs	r3, r4
 800ef7a:	3343      	adds	r3, #67	@ 0x43
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	1e5a      	subs	r2, r3, #1
 800ef80:	4193      	sbcs	r3, r2
 800ef82:	6822      	ldr	r2, [r4, #0]
 800ef84:	0692      	lsls	r2, r2, #26
 800ef86:	d430      	bmi.n	800efea <_printf_common+0xae>
 800ef88:	0022      	movs	r2, r4
 800ef8a:	9901      	ldr	r1, [sp, #4]
 800ef8c:	9800      	ldr	r0, [sp, #0]
 800ef8e:	9d08      	ldr	r5, [sp, #32]
 800ef90:	3243      	adds	r2, #67	@ 0x43
 800ef92:	47a8      	blx	r5
 800ef94:	3001      	adds	r0, #1
 800ef96:	d025      	beq.n	800efe4 <_printf_common+0xa8>
 800ef98:	2206      	movs	r2, #6
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	2500      	movs	r5, #0
 800ef9e:	4013      	ands	r3, r2
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d105      	bne.n	800efb0 <_printf_common+0x74>
 800efa4:	6833      	ldr	r3, [r6, #0]
 800efa6:	68e5      	ldr	r5, [r4, #12]
 800efa8:	1aed      	subs	r5, r5, r3
 800efaa:	43eb      	mvns	r3, r5
 800efac:	17db      	asrs	r3, r3, #31
 800efae:	401d      	ands	r5, r3
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	6922      	ldr	r2, [r4, #16]
 800efb4:	4293      	cmp	r3, r2
 800efb6:	dd01      	ble.n	800efbc <_printf_common+0x80>
 800efb8:	1a9b      	subs	r3, r3, r2
 800efba:	18ed      	adds	r5, r5, r3
 800efbc:	2600      	movs	r6, #0
 800efbe:	42b5      	cmp	r5, r6
 800efc0:	d120      	bne.n	800f004 <_printf_common+0xc8>
 800efc2:	2000      	movs	r0, #0
 800efc4:	e010      	b.n	800efe8 <_printf_common+0xac>
 800efc6:	3501      	adds	r5, #1
 800efc8:	68e3      	ldr	r3, [r4, #12]
 800efca:	6832      	ldr	r2, [r6, #0]
 800efcc:	1a9b      	subs	r3, r3, r2
 800efce:	42ab      	cmp	r3, r5
 800efd0:	ddd2      	ble.n	800ef78 <_printf_common+0x3c>
 800efd2:	0022      	movs	r2, r4
 800efd4:	2301      	movs	r3, #1
 800efd6:	9901      	ldr	r1, [sp, #4]
 800efd8:	9800      	ldr	r0, [sp, #0]
 800efda:	9f08      	ldr	r7, [sp, #32]
 800efdc:	3219      	adds	r2, #25
 800efde:	47b8      	blx	r7
 800efe0:	3001      	adds	r0, #1
 800efe2:	d1f0      	bne.n	800efc6 <_printf_common+0x8a>
 800efe4:	2001      	movs	r0, #1
 800efe6:	4240      	negs	r0, r0
 800efe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efea:	2030      	movs	r0, #48	@ 0x30
 800efec:	18e1      	adds	r1, r4, r3
 800efee:	3143      	adds	r1, #67	@ 0x43
 800eff0:	7008      	strb	r0, [r1, #0]
 800eff2:	0021      	movs	r1, r4
 800eff4:	1c5a      	adds	r2, r3, #1
 800eff6:	3145      	adds	r1, #69	@ 0x45
 800eff8:	7809      	ldrb	r1, [r1, #0]
 800effa:	18a2      	adds	r2, r4, r2
 800effc:	3243      	adds	r2, #67	@ 0x43
 800effe:	3302      	adds	r3, #2
 800f000:	7011      	strb	r1, [r2, #0]
 800f002:	e7c1      	b.n	800ef88 <_printf_common+0x4c>
 800f004:	0022      	movs	r2, r4
 800f006:	2301      	movs	r3, #1
 800f008:	9901      	ldr	r1, [sp, #4]
 800f00a:	9800      	ldr	r0, [sp, #0]
 800f00c:	9f08      	ldr	r7, [sp, #32]
 800f00e:	321a      	adds	r2, #26
 800f010:	47b8      	blx	r7
 800f012:	3001      	adds	r0, #1
 800f014:	d0e6      	beq.n	800efe4 <_printf_common+0xa8>
 800f016:	3601      	adds	r6, #1
 800f018:	e7d1      	b.n	800efbe <_printf_common+0x82>
	...

0800f01c <_printf_i>:
 800f01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f01e:	b08b      	sub	sp, #44	@ 0x2c
 800f020:	9206      	str	r2, [sp, #24]
 800f022:	000a      	movs	r2, r1
 800f024:	3243      	adds	r2, #67	@ 0x43
 800f026:	9307      	str	r3, [sp, #28]
 800f028:	9005      	str	r0, [sp, #20]
 800f02a:	9203      	str	r2, [sp, #12]
 800f02c:	7e0a      	ldrb	r2, [r1, #24]
 800f02e:	000c      	movs	r4, r1
 800f030:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f032:	2a78      	cmp	r2, #120	@ 0x78
 800f034:	d809      	bhi.n	800f04a <_printf_i+0x2e>
 800f036:	2a62      	cmp	r2, #98	@ 0x62
 800f038:	d80b      	bhi.n	800f052 <_printf_i+0x36>
 800f03a:	2a00      	cmp	r2, #0
 800f03c:	d100      	bne.n	800f040 <_printf_i+0x24>
 800f03e:	e0bc      	b.n	800f1ba <_printf_i+0x19e>
 800f040:	497b      	ldr	r1, [pc, #492]	@ (800f230 <_printf_i+0x214>)
 800f042:	9104      	str	r1, [sp, #16]
 800f044:	2a58      	cmp	r2, #88	@ 0x58
 800f046:	d100      	bne.n	800f04a <_printf_i+0x2e>
 800f048:	e090      	b.n	800f16c <_printf_i+0x150>
 800f04a:	0025      	movs	r5, r4
 800f04c:	3542      	adds	r5, #66	@ 0x42
 800f04e:	702a      	strb	r2, [r5, #0]
 800f050:	e022      	b.n	800f098 <_printf_i+0x7c>
 800f052:	0010      	movs	r0, r2
 800f054:	3863      	subs	r0, #99	@ 0x63
 800f056:	2815      	cmp	r0, #21
 800f058:	d8f7      	bhi.n	800f04a <_printf_i+0x2e>
 800f05a:	f7f1 f867 	bl	800012c <__gnu_thumb1_case_shi>
 800f05e:	0016      	.short	0x0016
 800f060:	fff6001f 	.word	0xfff6001f
 800f064:	fff6fff6 	.word	0xfff6fff6
 800f068:	001ffff6 	.word	0x001ffff6
 800f06c:	fff6fff6 	.word	0xfff6fff6
 800f070:	fff6fff6 	.word	0xfff6fff6
 800f074:	003600a1 	.word	0x003600a1
 800f078:	fff60080 	.word	0xfff60080
 800f07c:	00b2fff6 	.word	0x00b2fff6
 800f080:	0036fff6 	.word	0x0036fff6
 800f084:	fff6fff6 	.word	0xfff6fff6
 800f088:	0084      	.short	0x0084
 800f08a:	0025      	movs	r5, r4
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	3542      	adds	r5, #66	@ 0x42
 800f090:	1d11      	adds	r1, r2, #4
 800f092:	6019      	str	r1, [r3, #0]
 800f094:	6813      	ldr	r3, [r2, #0]
 800f096:	702b      	strb	r3, [r5, #0]
 800f098:	2301      	movs	r3, #1
 800f09a:	e0a0      	b.n	800f1de <_printf_i+0x1c2>
 800f09c:	6818      	ldr	r0, [r3, #0]
 800f09e:	6809      	ldr	r1, [r1, #0]
 800f0a0:	1d02      	adds	r2, r0, #4
 800f0a2:	060d      	lsls	r5, r1, #24
 800f0a4:	d50b      	bpl.n	800f0be <_printf_i+0xa2>
 800f0a6:	6806      	ldr	r6, [r0, #0]
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	da03      	bge.n	800f0b6 <_printf_i+0x9a>
 800f0ae:	232d      	movs	r3, #45	@ 0x2d
 800f0b0:	9a03      	ldr	r2, [sp, #12]
 800f0b2:	4276      	negs	r6, r6
 800f0b4:	7013      	strb	r3, [r2, #0]
 800f0b6:	4b5e      	ldr	r3, [pc, #376]	@ (800f230 <_printf_i+0x214>)
 800f0b8:	270a      	movs	r7, #10
 800f0ba:	9304      	str	r3, [sp, #16]
 800f0bc:	e018      	b.n	800f0f0 <_printf_i+0xd4>
 800f0be:	6806      	ldr	r6, [r0, #0]
 800f0c0:	601a      	str	r2, [r3, #0]
 800f0c2:	0649      	lsls	r1, r1, #25
 800f0c4:	d5f1      	bpl.n	800f0aa <_printf_i+0x8e>
 800f0c6:	b236      	sxth	r6, r6
 800f0c8:	e7ef      	b.n	800f0aa <_printf_i+0x8e>
 800f0ca:	6808      	ldr	r0, [r1, #0]
 800f0cc:	6819      	ldr	r1, [r3, #0]
 800f0ce:	c940      	ldmia	r1!, {r6}
 800f0d0:	0605      	lsls	r5, r0, #24
 800f0d2:	d402      	bmi.n	800f0da <_printf_i+0xbe>
 800f0d4:	0640      	lsls	r0, r0, #25
 800f0d6:	d500      	bpl.n	800f0da <_printf_i+0xbe>
 800f0d8:	b2b6      	uxth	r6, r6
 800f0da:	6019      	str	r1, [r3, #0]
 800f0dc:	4b54      	ldr	r3, [pc, #336]	@ (800f230 <_printf_i+0x214>)
 800f0de:	270a      	movs	r7, #10
 800f0e0:	9304      	str	r3, [sp, #16]
 800f0e2:	2a6f      	cmp	r2, #111	@ 0x6f
 800f0e4:	d100      	bne.n	800f0e8 <_printf_i+0xcc>
 800f0e6:	3f02      	subs	r7, #2
 800f0e8:	0023      	movs	r3, r4
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	3343      	adds	r3, #67	@ 0x43
 800f0ee:	701a      	strb	r2, [r3, #0]
 800f0f0:	6863      	ldr	r3, [r4, #4]
 800f0f2:	60a3      	str	r3, [r4, #8]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	db03      	blt.n	800f100 <_printf_i+0xe4>
 800f0f8:	2104      	movs	r1, #4
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	438a      	bics	r2, r1
 800f0fe:	6022      	str	r2, [r4, #0]
 800f100:	2e00      	cmp	r6, #0
 800f102:	d102      	bne.n	800f10a <_printf_i+0xee>
 800f104:	9d03      	ldr	r5, [sp, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00c      	beq.n	800f124 <_printf_i+0x108>
 800f10a:	9d03      	ldr	r5, [sp, #12]
 800f10c:	0030      	movs	r0, r6
 800f10e:	0039      	movs	r1, r7
 800f110:	f7f1 f89c 	bl	800024c <__aeabi_uidivmod>
 800f114:	9b04      	ldr	r3, [sp, #16]
 800f116:	3d01      	subs	r5, #1
 800f118:	5c5b      	ldrb	r3, [r3, r1]
 800f11a:	702b      	strb	r3, [r5, #0]
 800f11c:	0033      	movs	r3, r6
 800f11e:	0006      	movs	r6, r0
 800f120:	429f      	cmp	r7, r3
 800f122:	d9f3      	bls.n	800f10c <_printf_i+0xf0>
 800f124:	2f08      	cmp	r7, #8
 800f126:	d109      	bne.n	800f13c <_printf_i+0x120>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	07db      	lsls	r3, r3, #31
 800f12c:	d506      	bpl.n	800f13c <_printf_i+0x120>
 800f12e:	6862      	ldr	r2, [r4, #4]
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	429a      	cmp	r2, r3
 800f134:	dc02      	bgt.n	800f13c <_printf_i+0x120>
 800f136:	2330      	movs	r3, #48	@ 0x30
 800f138:	3d01      	subs	r5, #1
 800f13a:	702b      	strb	r3, [r5, #0]
 800f13c:	9b03      	ldr	r3, [sp, #12]
 800f13e:	1b5b      	subs	r3, r3, r5
 800f140:	6123      	str	r3, [r4, #16]
 800f142:	9b07      	ldr	r3, [sp, #28]
 800f144:	0021      	movs	r1, r4
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	9805      	ldr	r0, [sp, #20]
 800f14a:	9b06      	ldr	r3, [sp, #24]
 800f14c:	aa09      	add	r2, sp, #36	@ 0x24
 800f14e:	f7ff fef5 	bl	800ef3c <_printf_common>
 800f152:	3001      	adds	r0, #1
 800f154:	d148      	bne.n	800f1e8 <_printf_i+0x1cc>
 800f156:	2001      	movs	r0, #1
 800f158:	4240      	negs	r0, r0
 800f15a:	b00b      	add	sp, #44	@ 0x2c
 800f15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f15e:	2220      	movs	r2, #32
 800f160:	6809      	ldr	r1, [r1, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	6022      	str	r2, [r4, #0]
 800f166:	2278      	movs	r2, #120	@ 0x78
 800f168:	4932      	ldr	r1, [pc, #200]	@ (800f234 <_printf_i+0x218>)
 800f16a:	9104      	str	r1, [sp, #16]
 800f16c:	0021      	movs	r1, r4
 800f16e:	3145      	adds	r1, #69	@ 0x45
 800f170:	700a      	strb	r2, [r1, #0]
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	6822      	ldr	r2, [r4, #0]
 800f176:	c940      	ldmia	r1!, {r6}
 800f178:	0610      	lsls	r0, r2, #24
 800f17a:	d402      	bmi.n	800f182 <_printf_i+0x166>
 800f17c:	0650      	lsls	r0, r2, #25
 800f17e:	d500      	bpl.n	800f182 <_printf_i+0x166>
 800f180:	b2b6      	uxth	r6, r6
 800f182:	6019      	str	r1, [r3, #0]
 800f184:	07d3      	lsls	r3, r2, #31
 800f186:	d502      	bpl.n	800f18e <_printf_i+0x172>
 800f188:	2320      	movs	r3, #32
 800f18a:	4313      	orrs	r3, r2
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	2e00      	cmp	r6, #0
 800f190:	d001      	beq.n	800f196 <_printf_i+0x17a>
 800f192:	2710      	movs	r7, #16
 800f194:	e7a8      	b.n	800f0e8 <_printf_i+0xcc>
 800f196:	2220      	movs	r2, #32
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	4393      	bics	r3, r2
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	e7f8      	b.n	800f192 <_printf_i+0x176>
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	680d      	ldr	r5, [r1, #0]
 800f1a4:	1d10      	adds	r0, r2, #4
 800f1a6:	6949      	ldr	r1, [r1, #20]
 800f1a8:	6018      	str	r0, [r3, #0]
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	062e      	lsls	r6, r5, #24
 800f1ae:	d501      	bpl.n	800f1b4 <_printf_i+0x198>
 800f1b0:	6019      	str	r1, [r3, #0]
 800f1b2:	e002      	b.n	800f1ba <_printf_i+0x19e>
 800f1b4:	066d      	lsls	r5, r5, #25
 800f1b6:	d5fb      	bpl.n	800f1b0 <_printf_i+0x194>
 800f1b8:	8019      	strh	r1, [r3, #0]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9d03      	ldr	r5, [sp, #12]
 800f1be:	6123      	str	r3, [r4, #16]
 800f1c0:	e7bf      	b.n	800f142 <_printf_i+0x126>
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	1d11      	adds	r1, r2, #4
 800f1c6:	6019      	str	r1, [r3, #0]
 800f1c8:	6815      	ldr	r5, [r2, #0]
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	0028      	movs	r0, r5
 800f1ce:	6862      	ldr	r2, [r4, #4]
 800f1d0:	f000 fc2b 	bl	800fa2a <memchr>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d001      	beq.n	800f1dc <_printf_i+0x1c0>
 800f1d8:	1b40      	subs	r0, r0, r5
 800f1da:	6060      	str	r0, [r4, #4]
 800f1dc:	6863      	ldr	r3, [r4, #4]
 800f1de:	6123      	str	r3, [r4, #16]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	9a03      	ldr	r2, [sp, #12]
 800f1e4:	7013      	strb	r3, [r2, #0]
 800f1e6:	e7ac      	b.n	800f142 <_printf_i+0x126>
 800f1e8:	002a      	movs	r2, r5
 800f1ea:	6923      	ldr	r3, [r4, #16]
 800f1ec:	9906      	ldr	r1, [sp, #24]
 800f1ee:	9805      	ldr	r0, [sp, #20]
 800f1f0:	9d07      	ldr	r5, [sp, #28]
 800f1f2:	47a8      	blx	r5
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	d0ae      	beq.n	800f156 <_printf_i+0x13a>
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	079b      	lsls	r3, r3, #30
 800f1fc:	d415      	bmi.n	800f22a <_printf_i+0x20e>
 800f1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f200:	68e0      	ldr	r0, [r4, #12]
 800f202:	4298      	cmp	r0, r3
 800f204:	daa9      	bge.n	800f15a <_printf_i+0x13e>
 800f206:	0018      	movs	r0, r3
 800f208:	e7a7      	b.n	800f15a <_printf_i+0x13e>
 800f20a:	0022      	movs	r2, r4
 800f20c:	2301      	movs	r3, #1
 800f20e:	9906      	ldr	r1, [sp, #24]
 800f210:	9805      	ldr	r0, [sp, #20]
 800f212:	9e07      	ldr	r6, [sp, #28]
 800f214:	3219      	adds	r2, #25
 800f216:	47b0      	blx	r6
 800f218:	3001      	adds	r0, #1
 800f21a:	d09c      	beq.n	800f156 <_printf_i+0x13a>
 800f21c:	3501      	adds	r5, #1
 800f21e:	68e3      	ldr	r3, [r4, #12]
 800f220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f222:	1a9b      	subs	r3, r3, r2
 800f224:	42ab      	cmp	r3, r5
 800f226:	dcf0      	bgt.n	800f20a <_printf_i+0x1ee>
 800f228:	e7e9      	b.n	800f1fe <_printf_i+0x1e2>
 800f22a:	2500      	movs	r5, #0
 800f22c:	e7f7      	b.n	800f21e <_printf_i+0x202>
 800f22e:	46c0      	nop			@ (mov r8, r8)
 800f230:	08013bba 	.word	0x08013bba
 800f234:	08013bcb 	.word	0x08013bcb

0800f238 <_scanf_float>:
 800f238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23a:	b08b      	sub	sp, #44	@ 0x2c
 800f23c:	0016      	movs	r6, r2
 800f23e:	9003      	str	r0, [sp, #12]
 800f240:	22ae      	movs	r2, #174	@ 0xae
 800f242:	2000      	movs	r0, #0
 800f244:	9307      	str	r3, [sp, #28]
 800f246:	688b      	ldr	r3, [r1, #8]
 800f248:	000c      	movs	r4, r1
 800f24a:	1e59      	subs	r1, r3, #1
 800f24c:	0052      	lsls	r2, r2, #1
 800f24e:	9006      	str	r0, [sp, #24]
 800f250:	4291      	cmp	r1, r2
 800f252:	d905      	bls.n	800f260 <_scanf_float+0x28>
 800f254:	3b5e      	subs	r3, #94	@ 0x5e
 800f256:	3bff      	subs	r3, #255	@ 0xff
 800f258:	9306      	str	r3, [sp, #24]
 800f25a:	235e      	movs	r3, #94	@ 0x5e
 800f25c:	33ff      	adds	r3, #255	@ 0xff
 800f25e:	60a3      	str	r3, [r4, #8]
 800f260:	23f0      	movs	r3, #240	@ 0xf0
 800f262:	6822      	ldr	r2, [r4, #0]
 800f264:	00db      	lsls	r3, r3, #3
 800f266:	4313      	orrs	r3, r2
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	0023      	movs	r3, r4
 800f26c:	2500      	movs	r5, #0
 800f26e:	331c      	adds	r3, #28
 800f270:	001f      	movs	r7, r3
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	9502      	str	r5, [sp, #8]
 800f276:	9509      	str	r5, [sp, #36]	@ 0x24
 800f278:	9508      	str	r5, [sp, #32]
 800f27a:	9501      	str	r5, [sp, #4]
 800f27c:	9505      	str	r5, [sp, #20]
 800f27e:	68a2      	ldr	r2, [r4, #8]
 800f280:	2a00      	cmp	r2, #0
 800f282:	d00a      	beq.n	800f29a <_scanf_float+0x62>
 800f284:	6833      	ldr	r3, [r6, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b4e      	cmp	r3, #78	@ 0x4e
 800f28a:	d844      	bhi.n	800f316 <_scanf_float+0xde>
 800f28c:	0018      	movs	r0, r3
 800f28e:	2b40      	cmp	r3, #64	@ 0x40
 800f290:	d82c      	bhi.n	800f2ec <_scanf_float+0xb4>
 800f292:	382b      	subs	r0, #43	@ 0x2b
 800f294:	b2c1      	uxtb	r1, r0
 800f296:	290e      	cmp	r1, #14
 800f298:	d92a      	bls.n	800f2f0 <_scanf_float+0xb8>
 800f29a:	9b01      	ldr	r3, [sp, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <_scanf_float+0x70>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	4aa6      	ldr	r2, [pc, #664]	@ (800f53c <_scanf_float+0x304>)
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	6023      	str	r3, [r4, #0]
 800f2a8:	9b02      	ldr	r3, [sp, #8]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d900      	bls.n	800f2b2 <_scanf_float+0x7a>
 800f2b0:	e0fe      	b.n	800f4b0 <_scanf_float+0x278>
 800f2b2:	25be      	movs	r5, #190	@ 0xbe
 800f2b4:	006d      	lsls	r5, r5, #1
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	429f      	cmp	r7, r3
 800f2ba:	d900      	bls.n	800f2be <_scanf_float+0x86>
 800f2bc:	e0ee      	b.n	800f49c <_scanf_float+0x264>
 800f2be:	2001      	movs	r0, #1
 800f2c0:	b00b      	add	sp, #44	@ 0x2c
 800f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	3861      	subs	r0, #97	@ 0x61
 800f2c8:	280d      	cmp	r0, #13
 800f2ca:	d8e6      	bhi.n	800f29a <_scanf_float+0x62>
 800f2cc:	f7f0 ff2e 	bl	800012c <__gnu_thumb1_case_shi>
 800f2d0:	ffe50089 	.word	0xffe50089
 800f2d4:	ffe5ffe5 	.word	0xffe5ffe5
 800f2d8:	00a700bb 	.word	0x00a700bb
 800f2dc:	ffe5ffe5 	.word	0xffe5ffe5
 800f2e0:	ffe5008f 	.word	0xffe5008f
 800f2e4:	ffe5ffe5 	.word	0xffe5ffe5
 800f2e8:	006bffe5 	.word	0x006bffe5
 800f2ec:	3841      	subs	r0, #65	@ 0x41
 800f2ee:	e7eb      	b.n	800f2c8 <_scanf_float+0x90>
 800f2f0:	280e      	cmp	r0, #14
 800f2f2:	d8d2      	bhi.n	800f29a <_scanf_float+0x62>
 800f2f4:	f7f0 ff1a 	bl	800012c <__gnu_thumb1_case_shi>
 800f2f8:	ffd1004f 	.word	0xffd1004f
 800f2fc:	009d004f 	.word	0x009d004f
 800f300:	0021ffd1 	.word	0x0021ffd1
 800f304:	00410041 	.word	0x00410041
 800f308:	00410041 	.word	0x00410041
 800f30c:	00410041 	.word	0x00410041
 800f310:	00410041 	.word	0x00410041
 800f314:	0041      	.short	0x0041
 800f316:	2b6e      	cmp	r3, #110	@ 0x6e
 800f318:	d80a      	bhi.n	800f330 <_scanf_float+0xf8>
 800f31a:	2b60      	cmp	r3, #96	@ 0x60
 800f31c:	d8d2      	bhi.n	800f2c4 <_scanf_float+0x8c>
 800f31e:	2b54      	cmp	r3, #84	@ 0x54
 800f320:	d100      	bne.n	800f324 <_scanf_float+0xec>
 800f322:	e081      	b.n	800f428 <_scanf_float+0x1f0>
 800f324:	2b59      	cmp	r3, #89	@ 0x59
 800f326:	d1b8      	bne.n	800f29a <_scanf_float+0x62>
 800f328:	2d07      	cmp	r5, #7
 800f32a:	d1b6      	bne.n	800f29a <_scanf_float+0x62>
 800f32c:	2508      	movs	r5, #8
 800f32e:	e02f      	b.n	800f390 <_scanf_float+0x158>
 800f330:	2b74      	cmp	r3, #116	@ 0x74
 800f332:	d079      	beq.n	800f428 <_scanf_float+0x1f0>
 800f334:	2b79      	cmp	r3, #121	@ 0x79
 800f336:	d0f7      	beq.n	800f328 <_scanf_float+0xf0>
 800f338:	e7af      	b.n	800f29a <_scanf_float+0x62>
 800f33a:	6821      	ldr	r1, [r4, #0]
 800f33c:	05c8      	lsls	r0, r1, #23
 800f33e:	d51c      	bpl.n	800f37a <_scanf_float+0x142>
 800f340:	2380      	movs	r3, #128	@ 0x80
 800f342:	4399      	bics	r1, r3
 800f344:	9b01      	ldr	r3, [sp, #4]
 800f346:	6021      	str	r1, [r4, #0]
 800f348:	3301      	adds	r3, #1
 800f34a:	9301      	str	r3, [sp, #4]
 800f34c:	9b06      	ldr	r3, [sp, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d003      	beq.n	800f35a <_scanf_float+0x122>
 800f352:	3b01      	subs	r3, #1
 800f354:	3201      	adds	r2, #1
 800f356:	9306      	str	r3, [sp, #24]
 800f358:	60a2      	str	r2, [r4, #8]
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	60a3      	str	r3, [r4, #8]
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	3301      	adds	r3, #1
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	6873      	ldr	r3, [r6, #4]
 800f368:	3b01      	subs	r3, #1
 800f36a:	6073      	str	r3, [r6, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dc00      	bgt.n	800f372 <_scanf_float+0x13a>
 800f370:	e08a      	b.n	800f488 <_scanf_float+0x250>
 800f372:	6833      	ldr	r3, [r6, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	6033      	str	r3, [r6, #0]
 800f378:	e781      	b.n	800f27e <_scanf_float+0x46>
 800f37a:	9a02      	ldr	r2, [sp, #8]
 800f37c:	1951      	adds	r1, r2, r5
 800f37e:	2900      	cmp	r1, #0
 800f380:	d000      	beq.n	800f384 <_scanf_float+0x14c>
 800f382:	e78a      	b.n	800f29a <_scanf_float+0x62>
 800f384:	000d      	movs	r5, r1
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	486d      	ldr	r0, [pc, #436]	@ (800f540 <_scanf_float+0x308>)
 800f38a:	9102      	str	r1, [sp, #8]
 800f38c:	4002      	ands	r2, r0
 800f38e:	6022      	str	r2, [r4, #0]
 800f390:	703b      	strb	r3, [r7, #0]
 800f392:	3701      	adds	r7, #1
 800f394:	e7e1      	b.n	800f35a <_scanf_float+0x122>
 800f396:	2180      	movs	r1, #128	@ 0x80
 800f398:	6822      	ldr	r2, [r4, #0]
 800f39a:	420a      	tst	r2, r1
 800f39c:	d100      	bne.n	800f3a0 <_scanf_float+0x168>
 800f39e:	e77c      	b.n	800f29a <_scanf_float+0x62>
 800f3a0:	438a      	bics	r2, r1
 800f3a2:	6022      	str	r2, [r4, #0]
 800f3a4:	e7f4      	b.n	800f390 <_scanf_float+0x158>
 800f3a6:	9a02      	ldr	r2, [sp, #8]
 800f3a8:	2a00      	cmp	r2, #0
 800f3aa:	d10f      	bne.n	800f3cc <_scanf_float+0x194>
 800f3ac:	9a01      	ldr	r2, [sp, #4]
 800f3ae:	2a00      	cmp	r2, #0
 800f3b0:	d10f      	bne.n	800f3d2 <_scanf_float+0x19a>
 800f3b2:	6822      	ldr	r2, [r4, #0]
 800f3b4:	21e0      	movs	r1, #224	@ 0xe0
 800f3b6:	0010      	movs	r0, r2
 800f3b8:	00c9      	lsls	r1, r1, #3
 800f3ba:	4008      	ands	r0, r1
 800f3bc:	4288      	cmp	r0, r1
 800f3be:	d108      	bne.n	800f3d2 <_scanf_float+0x19a>
 800f3c0:	4960      	ldr	r1, [pc, #384]	@ (800f544 <_scanf_float+0x30c>)
 800f3c2:	400a      	ands	r2, r1
 800f3c4:	6022      	str	r2, [r4, #0]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	9202      	str	r2, [sp, #8]
 800f3ca:	e7e1      	b.n	800f390 <_scanf_float+0x158>
 800f3cc:	9a02      	ldr	r2, [sp, #8]
 800f3ce:	2a02      	cmp	r2, #2
 800f3d0:	d058      	beq.n	800f484 <_scanf_float+0x24c>
 800f3d2:	2d01      	cmp	r5, #1
 800f3d4:	d002      	beq.n	800f3dc <_scanf_float+0x1a4>
 800f3d6:	2d04      	cmp	r5, #4
 800f3d8:	d000      	beq.n	800f3dc <_scanf_float+0x1a4>
 800f3da:	e75e      	b.n	800f29a <_scanf_float+0x62>
 800f3dc:	3501      	adds	r5, #1
 800f3de:	b2ed      	uxtb	r5, r5
 800f3e0:	e7d6      	b.n	800f390 <_scanf_float+0x158>
 800f3e2:	9a02      	ldr	r2, [sp, #8]
 800f3e4:	2a01      	cmp	r2, #1
 800f3e6:	d000      	beq.n	800f3ea <_scanf_float+0x1b2>
 800f3e8:	e757      	b.n	800f29a <_scanf_float+0x62>
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	e7ec      	b.n	800f3c8 <_scanf_float+0x190>
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	d110      	bne.n	800f414 <_scanf_float+0x1dc>
 800f3f2:	9a01      	ldr	r2, [sp, #4]
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	d000      	beq.n	800f3fa <_scanf_float+0x1c2>
 800f3f8:	e752      	b.n	800f2a0 <_scanf_float+0x68>
 800f3fa:	6822      	ldr	r2, [r4, #0]
 800f3fc:	21e0      	movs	r1, #224	@ 0xe0
 800f3fe:	0010      	movs	r0, r2
 800f400:	00c9      	lsls	r1, r1, #3
 800f402:	4008      	ands	r0, r1
 800f404:	4288      	cmp	r0, r1
 800f406:	d000      	beq.n	800f40a <_scanf_float+0x1d2>
 800f408:	e11d      	b.n	800f646 <_scanf_float+0x40e>
 800f40a:	494e      	ldr	r1, [pc, #312]	@ (800f544 <_scanf_float+0x30c>)
 800f40c:	3501      	adds	r5, #1
 800f40e:	400a      	ands	r2, r1
 800f410:	6022      	str	r2, [r4, #0]
 800f412:	e7bd      	b.n	800f390 <_scanf_float+0x158>
 800f414:	21fd      	movs	r1, #253	@ 0xfd
 800f416:	1eea      	subs	r2, r5, #3
 800f418:	420a      	tst	r2, r1
 800f41a:	d0df      	beq.n	800f3dc <_scanf_float+0x1a4>
 800f41c:	e73d      	b.n	800f29a <_scanf_float+0x62>
 800f41e:	2d02      	cmp	r5, #2
 800f420:	d000      	beq.n	800f424 <_scanf_float+0x1ec>
 800f422:	e73a      	b.n	800f29a <_scanf_float+0x62>
 800f424:	2503      	movs	r5, #3
 800f426:	e7b3      	b.n	800f390 <_scanf_float+0x158>
 800f428:	2d06      	cmp	r5, #6
 800f42a:	d000      	beq.n	800f42e <_scanf_float+0x1f6>
 800f42c:	e735      	b.n	800f29a <_scanf_float+0x62>
 800f42e:	2507      	movs	r5, #7
 800f430:	e7ae      	b.n	800f390 <_scanf_float+0x158>
 800f432:	6822      	ldr	r2, [r4, #0]
 800f434:	0591      	lsls	r1, r2, #22
 800f436:	d400      	bmi.n	800f43a <_scanf_float+0x202>
 800f438:	e72f      	b.n	800f29a <_scanf_float+0x62>
 800f43a:	4943      	ldr	r1, [pc, #268]	@ (800f548 <_scanf_float+0x310>)
 800f43c:	400a      	ands	r2, r1
 800f43e:	6022      	str	r2, [r4, #0]
 800f440:	9a01      	ldr	r2, [sp, #4]
 800f442:	9205      	str	r2, [sp, #20]
 800f444:	e7a4      	b.n	800f390 <_scanf_float+0x158>
 800f446:	21a0      	movs	r1, #160	@ 0xa0
 800f448:	2080      	movs	r0, #128	@ 0x80
 800f44a:	6822      	ldr	r2, [r4, #0]
 800f44c:	00c9      	lsls	r1, r1, #3
 800f44e:	4011      	ands	r1, r2
 800f450:	00c0      	lsls	r0, r0, #3
 800f452:	4281      	cmp	r1, r0
 800f454:	d006      	beq.n	800f464 <_scanf_float+0x22c>
 800f456:	4202      	tst	r2, r0
 800f458:	d100      	bne.n	800f45c <_scanf_float+0x224>
 800f45a:	e71e      	b.n	800f29a <_scanf_float+0x62>
 800f45c:	9901      	ldr	r1, [sp, #4]
 800f45e:	2900      	cmp	r1, #0
 800f460:	d100      	bne.n	800f464 <_scanf_float+0x22c>
 800f462:	e0f0      	b.n	800f646 <_scanf_float+0x40e>
 800f464:	0591      	lsls	r1, r2, #22
 800f466:	d404      	bmi.n	800f472 <_scanf_float+0x23a>
 800f468:	9901      	ldr	r1, [sp, #4]
 800f46a:	9805      	ldr	r0, [sp, #20]
 800f46c:	9709      	str	r7, [sp, #36]	@ 0x24
 800f46e:	1a09      	subs	r1, r1, r0
 800f470:	9108      	str	r1, [sp, #32]
 800f472:	4934      	ldr	r1, [pc, #208]	@ (800f544 <_scanf_float+0x30c>)
 800f474:	400a      	ands	r2, r1
 800f476:	21c0      	movs	r1, #192	@ 0xc0
 800f478:	0049      	lsls	r1, r1, #1
 800f47a:	430a      	orrs	r2, r1
 800f47c:	6022      	str	r2, [r4, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	9201      	str	r2, [sp, #4]
 800f482:	e785      	b.n	800f390 <_scanf_float+0x158>
 800f484:	2203      	movs	r2, #3
 800f486:	e79f      	b.n	800f3c8 <_scanf_float+0x190>
 800f488:	23c0      	movs	r3, #192	@ 0xc0
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	0031      	movs	r1, r6
 800f48e:	58e3      	ldr	r3, [r4, r3]
 800f490:	9803      	ldr	r0, [sp, #12]
 800f492:	4798      	blx	r3
 800f494:	2800      	cmp	r0, #0
 800f496:	d100      	bne.n	800f49a <_scanf_float+0x262>
 800f498:	e6f1      	b.n	800f27e <_scanf_float+0x46>
 800f49a:	e6fe      	b.n	800f29a <_scanf_float+0x62>
 800f49c:	3f01      	subs	r7, #1
 800f49e:	5963      	ldr	r3, [r4, r5]
 800f4a0:	0032      	movs	r2, r6
 800f4a2:	7839      	ldrb	r1, [r7, #0]
 800f4a4:	9803      	ldr	r0, [sp, #12]
 800f4a6:	4798      	blx	r3
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	6123      	str	r3, [r4, #16]
 800f4ae:	e702      	b.n	800f2b6 <_scanf_float+0x7e>
 800f4b0:	1e6b      	subs	r3, r5, #1
 800f4b2:	2b06      	cmp	r3, #6
 800f4b4:	d80e      	bhi.n	800f4d4 <_scanf_float+0x29c>
 800f4b6:	9702      	str	r7, [sp, #8]
 800f4b8:	2d02      	cmp	r5, #2
 800f4ba:	d920      	bls.n	800f4fe <_scanf_float+0x2c6>
 800f4bc:	1beb      	subs	r3, r5, r7
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	9306      	str	r3, [sp, #24]
 800f4c2:	9b02      	ldr	r3, [sp, #8]
 800f4c4:	9a06      	ldr	r2, [sp, #24]
 800f4c6:	189b      	adds	r3, r3, r2
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d127      	bne.n	800f51e <_scanf_float+0x2e6>
 800f4ce:	3d03      	subs	r5, #3
 800f4d0:	b2ed      	uxtb	r5, r5
 800f4d2:	1b7f      	subs	r7, r7, r5
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	05da      	lsls	r2, r3, #23
 800f4d8:	d553      	bpl.n	800f582 <_scanf_float+0x34a>
 800f4da:	055b      	lsls	r3, r3, #21
 800f4dc:	d536      	bpl.n	800f54c <_scanf_float+0x314>
 800f4de:	25be      	movs	r5, #190	@ 0xbe
 800f4e0:	006d      	lsls	r5, r5, #1
 800f4e2:	9b04      	ldr	r3, [sp, #16]
 800f4e4:	429f      	cmp	r7, r3
 800f4e6:	d800      	bhi.n	800f4ea <_scanf_float+0x2b2>
 800f4e8:	e6e9      	b.n	800f2be <_scanf_float+0x86>
 800f4ea:	3f01      	subs	r7, #1
 800f4ec:	5963      	ldr	r3, [r4, r5]
 800f4ee:	0032      	movs	r2, r6
 800f4f0:	7839      	ldrb	r1, [r7, #0]
 800f4f2:	9803      	ldr	r0, [sp, #12]
 800f4f4:	4798      	blx	r3
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	6123      	str	r3, [r4, #16]
 800f4fc:	e7f1      	b.n	800f4e2 <_scanf_float+0x2aa>
 800f4fe:	25be      	movs	r5, #190	@ 0xbe
 800f500:	006d      	lsls	r5, r5, #1
 800f502:	9b04      	ldr	r3, [sp, #16]
 800f504:	429f      	cmp	r7, r3
 800f506:	d800      	bhi.n	800f50a <_scanf_float+0x2d2>
 800f508:	e6d9      	b.n	800f2be <_scanf_float+0x86>
 800f50a:	3f01      	subs	r7, #1
 800f50c:	5963      	ldr	r3, [r4, r5]
 800f50e:	0032      	movs	r2, r6
 800f510:	7839      	ldrb	r1, [r7, #0]
 800f512:	9803      	ldr	r0, [sp, #12]
 800f514:	4798      	blx	r3
 800f516:	6923      	ldr	r3, [r4, #16]
 800f518:	3b01      	subs	r3, #1
 800f51a:	6123      	str	r3, [r4, #16]
 800f51c:	e7f1      	b.n	800f502 <_scanf_float+0x2ca>
 800f51e:	9b02      	ldr	r3, [sp, #8]
 800f520:	0032      	movs	r2, r6
 800f522:	3b01      	subs	r3, #1
 800f524:	7819      	ldrb	r1, [r3, #0]
 800f526:	9302      	str	r3, [sp, #8]
 800f528:	23be      	movs	r3, #190	@ 0xbe
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	58e3      	ldr	r3, [r4, r3]
 800f52e:	9803      	ldr	r0, [sp, #12]
 800f530:	4798      	blx	r3
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	3b01      	subs	r3, #1
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	e7c3      	b.n	800f4c2 <_scanf_float+0x28a>
 800f53a:	46c0      	nop			@ (mov r8, r8)
 800f53c:	fffffeff 	.word	0xfffffeff
 800f540:	fffffe7f 	.word	0xfffffe7f
 800f544:	fffff87f 	.word	0xfffff87f
 800f548:	fffffd7f 	.word	0xfffffd7f
 800f54c:	6923      	ldr	r3, [r4, #16]
 800f54e:	1e7d      	subs	r5, r7, #1
 800f550:	7829      	ldrb	r1, [r5, #0]
 800f552:	3b01      	subs	r3, #1
 800f554:	6123      	str	r3, [r4, #16]
 800f556:	2965      	cmp	r1, #101	@ 0x65
 800f558:	d00c      	beq.n	800f574 <_scanf_float+0x33c>
 800f55a:	2945      	cmp	r1, #69	@ 0x45
 800f55c:	d00a      	beq.n	800f574 <_scanf_float+0x33c>
 800f55e:	23be      	movs	r3, #190	@ 0xbe
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	58e3      	ldr	r3, [r4, r3]
 800f564:	0032      	movs	r2, r6
 800f566:	9803      	ldr	r0, [sp, #12]
 800f568:	4798      	blx	r3
 800f56a:	6923      	ldr	r3, [r4, #16]
 800f56c:	1ebd      	subs	r5, r7, #2
 800f56e:	3b01      	subs	r3, #1
 800f570:	7829      	ldrb	r1, [r5, #0]
 800f572:	6123      	str	r3, [r4, #16]
 800f574:	23be      	movs	r3, #190	@ 0xbe
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	0032      	movs	r2, r6
 800f57a:	58e3      	ldr	r3, [r4, r3]
 800f57c:	9803      	ldr	r0, [sp, #12]
 800f57e:	4798      	blx	r3
 800f580:	002f      	movs	r7, r5
 800f582:	6821      	ldr	r1, [r4, #0]
 800f584:	2310      	movs	r3, #16
 800f586:	000a      	movs	r2, r1
 800f588:	401a      	ands	r2, r3
 800f58a:	4219      	tst	r1, r3
 800f58c:	d001      	beq.n	800f592 <_scanf_float+0x35a>
 800f58e:	2000      	movs	r0, #0
 800f590:	e696      	b.n	800f2c0 <_scanf_float+0x88>
 800f592:	21c0      	movs	r1, #192	@ 0xc0
 800f594:	703a      	strb	r2, [r7, #0]
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	00c9      	lsls	r1, r1, #3
 800f59a:	400b      	ands	r3, r1
 800f59c:	2180      	movs	r1, #128	@ 0x80
 800f59e:	00c9      	lsls	r1, r1, #3
 800f5a0:	428b      	cmp	r3, r1
 800f5a2:	d11c      	bne.n	800f5de <_scanf_float+0x3a6>
 800f5a4:	9b05      	ldr	r3, [sp, #20]
 800f5a6:	9a01      	ldr	r2, [sp, #4]
 800f5a8:	9905      	ldr	r1, [sp, #20]
 800f5aa:	1a9a      	subs	r2, r3, r2
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	428b      	cmp	r3, r1
 800f5b0:	d121      	bne.n	800f5f6 <_scanf_float+0x3be>
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	9904      	ldr	r1, [sp, #16]
 800f5b6:	9803      	ldr	r0, [sp, #12]
 800f5b8:	f002 fcac 	bl	8011f14 <_strtod_r>
 800f5bc:	9b07      	ldr	r3, [sp, #28]
 800f5be:	6822      	ldr	r2, [r4, #0]
 800f5c0:	0006      	movs	r6, r0
 800f5c2:	000f      	movs	r7, r1
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	0791      	lsls	r1, r2, #30
 800f5c8:	d522      	bpl.n	800f610 <_scanf_float+0x3d8>
 800f5ca:	9907      	ldr	r1, [sp, #28]
 800f5cc:	1d1a      	adds	r2, r3, #4
 800f5ce:	600a      	str	r2, [r1, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	601e      	str	r6, [r3, #0]
 800f5d4:	605f      	str	r7, [r3, #4]
 800f5d6:	68e3      	ldr	r3, [r4, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	60e3      	str	r3, [r4, #12]
 800f5dc:	e7d7      	b.n	800f58e <_scanf_float+0x356>
 800f5de:	9b08      	ldr	r3, [sp, #32]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d0e6      	beq.n	800f5b2 <_scanf_float+0x37a>
 800f5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5e6:	9803      	ldr	r0, [sp, #12]
 800f5e8:	1c59      	adds	r1, r3, #1
 800f5ea:	230a      	movs	r3, #10
 800f5ec:	f002 fd24 	bl	8012038 <_strtol_r>
 800f5f0:	9b08      	ldr	r3, [sp, #32]
 800f5f2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f5f4:	1ac2      	subs	r2, r0, r3
 800f5f6:	0023      	movs	r3, r4
 800f5f8:	3370      	adds	r3, #112	@ 0x70
 800f5fa:	33ff      	adds	r3, #255	@ 0xff
 800f5fc:	429f      	cmp	r7, r3
 800f5fe:	d302      	bcc.n	800f606 <_scanf_float+0x3ce>
 800f600:	0027      	movs	r7, r4
 800f602:	376f      	adds	r7, #111	@ 0x6f
 800f604:	37ff      	adds	r7, #255	@ 0xff
 800f606:	0038      	movs	r0, r7
 800f608:	4910      	ldr	r1, [pc, #64]	@ (800f64c <_scanf_float+0x414>)
 800f60a:	f000 f91b 	bl	800f844 <siprintf>
 800f60e:	e7d0      	b.n	800f5b2 <_scanf_float+0x37a>
 800f610:	1d19      	adds	r1, r3, #4
 800f612:	0752      	lsls	r2, r2, #29
 800f614:	d502      	bpl.n	800f61c <_scanf_float+0x3e4>
 800f616:	9a07      	ldr	r2, [sp, #28]
 800f618:	6011      	str	r1, [r2, #0]
 800f61a:	e7d9      	b.n	800f5d0 <_scanf_float+0x398>
 800f61c:	9a07      	ldr	r2, [sp, #28]
 800f61e:	0030      	movs	r0, r6
 800f620:	6011      	str	r1, [r2, #0]
 800f622:	681d      	ldr	r5, [r3, #0]
 800f624:	0032      	movs	r2, r6
 800f626:	003b      	movs	r3, r7
 800f628:	0039      	movs	r1, r7
 800f62a:	f7f3 fe21 	bl	8003270 <__aeabi_dcmpun>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d004      	beq.n	800f63c <_scanf_float+0x404>
 800f632:	4807      	ldr	r0, [pc, #28]	@ (800f650 <_scanf_float+0x418>)
 800f634:	f000 fa0e 	bl	800fa54 <nanf>
 800f638:	6028      	str	r0, [r5, #0]
 800f63a:	e7cc      	b.n	800f5d6 <_scanf_float+0x39e>
 800f63c:	0030      	movs	r0, r6
 800f63e:	0039      	movs	r1, r7
 800f640:	f7f3 ff0e 	bl	8003460 <__aeabi_d2f>
 800f644:	e7f8      	b.n	800f638 <_scanf_float+0x400>
 800f646:	2300      	movs	r3, #0
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	e62d      	b.n	800f2a8 <_scanf_float+0x70>
 800f64c:	08013bdc 	.word	0x08013bdc
 800f650:	08013f75 	.word	0x08013f75

0800f654 <std>:
 800f654:	2300      	movs	r3, #0
 800f656:	b510      	push	{r4, lr}
 800f658:	0004      	movs	r4, r0
 800f65a:	6003      	str	r3, [r0, #0]
 800f65c:	6043      	str	r3, [r0, #4]
 800f65e:	6083      	str	r3, [r0, #8]
 800f660:	8181      	strh	r1, [r0, #12]
 800f662:	6643      	str	r3, [r0, #100]	@ 0x64
 800f664:	81c2      	strh	r2, [r0, #14]
 800f666:	6103      	str	r3, [r0, #16]
 800f668:	6143      	str	r3, [r0, #20]
 800f66a:	6183      	str	r3, [r0, #24]
 800f66c:	0019      	movs	r1, r3
 800f66e:	2208      	movs	r2, #8
 800f670:	305c      	adds	r0, #92	@ 0x5c
 800f672:	f000 f953 	bl	800f91c <memset>
 800f676:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a4 <std+0x50>)
 800f678:	6224      	str	r4, [r4, #32]
 800f67a:	6263      	str	r3, [r4, #36]	@ 0x24
 800f67c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a8 <std+0x54>)
 800f67e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f680:	4b0a      	ldr	r3, [pc, #40]	@ (800f6ac <std+0x58>)
 800f682:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f684:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b0 <std+0x5c>)
 800f686:	6323      	str	r3, [r4, #48]	@ 0x30
 800f688:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b4 <std+0x60>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d005      	beq.n	800f69a <std+0x46>
 800f68e:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b8 <std+0x64>)
 800f690:	429c      	cmp	r4, r3
 800f692:	d002      	beq.n	800f69a <std+0x46>
 800f694:	4b09      	ldr	r3, [pc, #36]	@ (800f6bc <std+0x68>)
 800f696:	429c      	cmp	r4, r3
 800f698:	d103      	bne.n	800f6a2 <std+0x4e>
 800f69a:	0020      	movs	r0, r4
 800f69c:	3058      	adds	r0, #88	@ 0x58
 800f69e:	f000 f9c1 	bl	800fa24 <__retarget_lock_init_recursive>
 800f6a2:	bd10      	pop	{r4, pc}
 800f6a4:	0800f885 	.word	0x0800f885
 800f6a8:	0800f8ad 	.word	0x0800f8ad
 800f6ac:	0800f8e5 	.word	0x0800f8e5
 800f6b0:	0800f911 	.word	0x0800f911
 800f6b4:	2000483c 	.word	0x2000483c
 800f6b8:	200048a4 	.word	0x200048a4
 800f6bc:	2000490c 	.word	0x2000490c

0800f6c0 <stdio_exit_handler>:
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	4a03      	ldr	r2, [pc, #12]	@ (800f6d0 <stdio_exit_handler+0x10>)
 800f6c4:	4903      	ldr	r1, [pc, #12]	@ (800f6d4 <stdio_exit_handler+0x14>)
 800f6c6:	4804      	ldr	r0, [pc, #16]	@ (800f6d8 <stdio_exit_handler+0x18>)
 800f6c8:	f000 f86c 	bl	800f7a4 <_fwalk_sglue>
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	46c0      	nop			@ (mov r8, r8)
 800f6d0:	2000002c 	.word	0x2000002c
 800f6d4:	08012409 	.word	0x08012409
 800f6d8:	2000003c 	.word	0x2000003c

0800f6dc <cleanup_stdio>:
 800f6dc:	6841      	ldr	r1, [r0, #4]
 800f6de:	4b0b      	ldr	r3, [pc, #44]	@ (800f70c <cleanup_stdio+0x30>)
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	0004      	movs	r4, r0
 800f6e4:	4299      	cmp	r1, r3
 800f6e6:	d001      	beq.n	800f6ec <cleanup_stdio+0x10>
 800f6e8:	f002 fe8e 	bl	8012408 <_fflush_r>
 800f6ec:	68a1      	ldr	r1, [r4, #8]
 800f6ee:	4b08      	ldr	r3, [pc, #32]	@ (800f710 <cleanup_stdio+0x34>)
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	d002      	beq.n	800f6fa <cleanup_stdio+0x1e>
 800f6f4:	0020      	movs	r0, r4
 800f6f6:	f002 fe87 	bl	8012408 <_fflush_r>
 800f6fa:	68e1      	ldr	r1, [r4, #12]
 800f6fc:	4b05      	ldr	r3, [pc, #20]	@ (800f714 <cleanup_stdio+0x38>)
 800f6fe:	4299      	cmp	r1, r3
 800f700:	d002      	beq.n	800f708 <cleanup_stdio+0x2c>
 800f702:	0020      	movs	r0, r4
 800f704:	f002 fe80 	bl	8012408 <_fflush_r>
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	46c0      	nop			@ (mov r8, r8)
 800f70c:	2000483c 	.word	0x2000483c
 800f710:	200048a4 	.word	0x200048a4
 800f714:	2000490c 	.word	0x2000490c

0800f718 <global_stdio_init.part.0>:
 800f718:	b510      	push	{r4, lr}
 800f71a:	4b09      	ldr	r3, [pc, #36]	@ (800f740 <global_stdio_init.part.0+0x28>)
 800f71c:	4a09      	ldr	r2, [pc, #36]	@ (800f744 <global_stdio_init.part.0+0x2c>)
 800f71e:	2104      	movs	r1, #4
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	4809      	ldr	r0, [pc, #36]	@ (800f748 <global_stdio_init.part.0+0x30>)
 800f724:	2200      	movs	r2, #0
 800f726:	f7ff ff95 	bl	800f654 <std>
 800f72a:	2201      	movs	r2, #1
 800f72c:	2109      	movs	r1, #9
 800f72e:	4807      	ldr	r0, [pc, #28]	@ (800f74c <global_stdio_init.part.0+0x34>)
 800f730:	f7ff ff90 	bl	800f654 <std>
 800f734:	2202      	movs	r2, #2
 800f736:	2112      	movs	r1, #18
 800f738:	4805      	ldr	r0, [pc, #20]	@ (800f750 <global_stdio_init.part.0+0x38>)
 800f73a:	f7ff ff8b 	bl	800f654 <std>
 800f73e:	bd10      	pop	{r4, pc}
 800f740:	20004974 	.word	0x20004974
 800f744:	0800f6c1 	.word	0x0800f6c1
 800f748:	2000483c 	.word	0x2000483c
 800f74c:	200048a4 	.word	0x200048a4
 800f750:	2000490c 	.word	0x2000490c

0800f754 <__sfp_lock_acquire>:
 800f754:	b510      	push	{r4, lr}
 800f756:	4802      	ldr	r0, [pc, #8]	@ (800f760 <__sfp_lock_acquire+0xc>)
 800f758:	f000 f965 	bl	800fa26 <__retarget_lock_acquire_recursive>
 800f75c:	bd10      	pop	{r4, pc}
 800f75e:	46c0      	nop			@ (mov r8, r8)
 800f760:	2000497d 	.word	0x2000497d

0800f764 <__sfp_lock_release>:
 800f764:	b510      	push	{r4, lr}
 800f766:	4802      	ldr	r0, [pc, #8]	@ (800f770 <__sfp_lock_release+0xc>)
 800f768:	f000 f95e 	bl	800fa28 <__retarget_lock_release_recursive>
 800f76c:	bd10      	pop	{r4, pc}
 800f76e:	46c0      	nop			@ (mov r8, r8)
 800f770:	2000497d 	.word	0x2000497d

0800f774 <__sinit>:
 800f774:	b510      	push	{r4, lr}
 800f776:	0004      	movs	r4, r0
 800f778:	f7ff ffec 	bl	800f754 <__sfp_lock_acquire>
 800f77c:	6a23      	ldr	r3, [r4, #32]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d002      	beq.n	800f788 <__sinit+0x14>
 800f782:	f7ff ffef 	bl	800f764 <__sfp_lock_release>
 800f786:	bd10      	pop	{r4, pc}
 800f788:	4b04      	ldr	r3, [pc, #16]	@ (800f79c <__sinit+0x28>)
 800f78a:	6223      	str	r3, [r4, #32]
 800f78c:	4b04      	ldr	r3, [pc, #16]	@ (800f7a0 <__sinit+0x2c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1f6      	bne.n	800f782 <__sinit+0xe>
 800f794:	f7ff ffc0 	bl	800f718 <global_stdio_init.part.0>
 800f798:	e7f3      	b.n	800f782 <__sinit+0xe>
 800f79a:	46c0      	nop			@ (mov r8, r8)
 800f79c:	0800f6dd 	.word	0x0800f6dd
 800f7a0:	20004974 	.word	0x20004974

0800f7a4 <_fwalk_sglue>:
 800f7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7a6:	0014      	movs	r4, r2
 800f7a8:	2600      	movs	r6, #0
 800f7aa:	9000      	str	r0, [sp, #0]
 800f7ac:	9101      	str	r1, [sp, #4]
 800f7ae:	68a5      	ldr	r5, [r4, #8]
 800f7b0:	6867      	ldr	r7, [r4, #4]
 800f7b2:	3f01      	subs	r7, #1
 800f7b4:	d504      	bpl.n	800f7c0 <_fwalk_sglue+0x1c>
 800f7b6:	6824      	ldr	r4, [r4, #0]
 800f7b8:	2c00      	cmp	r4, #0
 800f7ba:	d1f8      	bne.n	800f7ae <_fwalk_sglue+0xa>
 800f7bc:	0030      	movs	r0, r6
 800f7be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7c0:	89ab      	ldrh	r3, [r5, #12]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d908      	bls.n	800f7d8 <_fwalk_sglue+0x34>
 800f7c6:	220e      	movs	r2, #14
 800f7c8:	5eab      	ldrsh	r3, [r5, r2]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	d004      	beq.n	800f7d8 <_fwalk_sglue+0x34>
 800f7ce:	0029      	movs	r1, r5
 800f7d0:	9800      	ldr	r0, [sp, #0]
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	4798      	blx	r3
 800f7d6:	4306      	orrs	r6, r0
 800f7d8:	3568      	adds	r5, #104	@ 0x68
 800f7da:	e7ea      	b.n	800f7b2 <_fwalk_sglue+0xe>

0800f7dc <sniprintf>:
 800f7dc:	b40c      	push	{r2, r3}
 800f7de:	b530      	push	{r4, r5, lr}
 800f7e0:	4b17      	ldr	r3, [pc, #92]	@ (800f840 <sniprintf+0x64>)
 800f7e2:	000c      	movs	r4, r1
 800f7e4:	681d      	ldr	r5, [r3, #0]
 800f7e6:	b09d      	sub	sp, #116	@ 0x74
 800f7e8:	2900      	cmp	r1, #0
 800f7ea:	da08      	bge.n	800f7fe <sniprintf+0x22>
 800f7ec:	238b      	movs	r3, #139	@ 0x8b
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	602b      	str	r3, [r5, #0]
 800f7f2:	4240      	negs	r0, r0
 800f7f4:	b01d      	add	sp, #116	@ 0x74
 800f7f6:	bc30      	pop	{r4, r5}
 800f7f8:	bc08      	pop	{r3}
 800f7fa:	b002      	add	sp, #8
 800f7fc:	4718      	bx	r3
 800f7fe:	2382      	movs	r3, #130	@ 0x82
 800f800:	466a      	mov	r2, sp
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	8293      	strh	r3, [r2, #20]
 800f806:	2300      	movs	r3, #0
 800f808:	9002      	str	r0, [sp, #8]
 800f80a:	9006      	str	r0, [sp, #24]
 800f80c:	4299      	cmp	r1, r3
 800f80e:	d000      	beq.n	800f812 <sniprintf+0x36>
 800f810:	1e4b      	subs	r3, r1, #1
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	9307      	str	r3, [sp, #28]
 800f816:	2301      	movs	r3, #1
 800f818:	466a      	mov	r2, sp
 800f81a:	425b      	negs	r3, r3
 800f81c:	82d3      	strh	r3, [r2, #22]
 800f81e:	0028      	movs	r0, r5
 800f820:	ab21      	add	r3, sp, #132	@ 0x84
 800f822:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f824:	a902      	add	r1, sp, #8
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	f002 fc6a 	bl	8012100 <_svfiprintf_r>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	da01      	bge.n	800f834 <sniprintf+0x58>
 800f830:	238b      	movs	r3, #139	@ 0x8b
 800f832:	602b      	str	r3, [r5, #0]
 800f834:	2c00      	cmp	r4, #0
 800f836:	d0dd      	beq.n	800f7f4 <sniprintf+0x18>
 800f838:	2200      	movs	r2, #0
 800f83a:	9b02      	ldr	r3, [sp, #8]
 800f83c:	701a      	strb	r2, [r3, #0]
 800f83e:	e7d9      	b.n	800f7f4 <sniprintf+0x18>
 800f840:	20000038 	.word	0x20000038

0800f844 <siprintf>:
 800f844:	b40e      	push	{r1, r2, r3}
 800f846:	b500      	push	{lr}
 800f848:	490b      	ldr	r1, [pc, #44]	@ (800f878 <siprintf+0x34>)
 800f84a:	b09c      	sub	sp, #112	@ 0x70
 800f84c:	ab1d      	add	r3, sp, #116	@ 0x74
 800f84e:	9002      	str	r0, [sp, #8]
 800f850:	9006      	str	r0, [sp, #24]
 800f852:	9107      	str	r1, [sp, #28]
 800f854:	9104      	str	r1, [sp, #16]
 800f856:	4809      	ldr	r0, [pc, #36]	@ (800f87c <siprintf+0x38>)
 800f858:	4909      	ldr	r1, [pc, #36]	@ (800f880 <siprintf+0x3c>)
 800f85a:	cb04      	ldmia	r3!, {r2}
 800f85c:	9105      	str	r1, [sp, #20]
 800f85e:	6800      	ldr	r0, [r0, #0]
 800f860:	a902      	add	r1, sp, #8
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	f002 fc4c 	bl	8012100 <_svfiprintf_r>
 800f868:	2200      	movs	r2, #0
 800f86a:	9b02      	ldr	r3, [sp, #8]
 800f86c:	701a      	strb	r2, [r3, #0]
 800f86e:	b01c      	add	sp, #112	@ 0x70
 800f870:	bc08      	pop	{r3}
 800f872:	b003      	add	sp, #12
 800f874:	4718      	bx	r3
 800f876:	46c0      	nop			@ (mov r8, r8)
 800f878:	7fffffff 	.word	0x7fffffff
 800f87c:	20000038 	.word	0x20000038
 800f880:	ffff0208 	.word	0xffff0208

0800f884 <__sread>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	000c      	movs	r4, r1
 800f888:	250e      	movs	r5, #14
 800f88a:	5f49      	ldrsh	r1, [r1, r5]
 800f88c:	f000 f878 	bl	800f980 <_read_r>
 800f890:	2800      	cmp	r0, #0
 800f892:	db03      	blt.n	800f89c <__sread+0x18>
 800f894:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f896:	181b      	adds	r3, r3, r0
 800f898:	6563      	str	r3, [r4, #84]	@ 0x54
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	4a02      	ldr	r2, [pc, #8]	@ (800f8a8 <__sread+0x24>)
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	81a3      	strh	r3, [r4, #12]
 800f8a4:	e7f9      	b.n	800f89a <__sread+0x16>
 800f8a6:	46c0      	nop			@ (mov r8, r8)
 800f8a8:	ffffefff 	.word	0xffffefff

0800f8ac <__swrite>:
 800f8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ae:	001f      	movs	r7, r3
 800f8b0:	898b      	ldrh	r3, [r1, #12]
 800f8b2:	0005      	movs	r5, r0
 800f8b4:	000c      	movs	r4, r1
 800f8b6:	0016      	movs	r6, r2
 800f8b8:	05db      	lsls	r3, r3, #23
 800f8ba:	d505      	bpl.n	800f8c8 <__swrite+0x1c>
 800f8bc:	230e      	movs	r3, #14
 800f8be:	5ec9      	ldrsh	r1, [r1, r3]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	2302      	movs	r3, #2
 800f8c4:	f000 f848 	bl	800f958 <_lseek_r>
 800f8c8:	89a3      	ldrh	r3, [r4, #12]
 800f8ca:	4a05      	ldr	r2, [pc, #20]	@ (800f8e0 <__swrite+0x34>)
 800f8cc:	0028      	movs	r0, r5
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	81a3      	strh	r3, [r4, #12]
 800f8d2:	0032      	movs	r2, r6
 800f8d4:	230e      	movs	r3, #14
 800f8d6:	5ee1      	ldrsh	r1, [r4, r3]
 800f8d8:	003b      	movs	r3, r7
 800f8da:	f000 f865 	bl	800f9a8 <_write_r>
 800f8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e0:	ffffefff 	.word	0xffffefff

0800f8e4 <__sseek>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	000c      	movs	r4, r1
 800f8e8:	250e      	movs	r5, #14
 800f8ea:	5f49      	ldrsh	r1, [r1, r5]
 800f8ec:	f000 f834 	bl	800f958 <_lseek_r>
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	1c42      	adds	r2, r0, #1
 800f8f4:	d103      	bne.n	800f8fe <__sseek+0x1a>
 800f8f6:	4a05      	ldr	r2, [pc, #20]	@ (800f90c <__sseek+0x28>)
 800f8f8:	4013      	ands	r3, r2
 800f8fa:	81a3      	strh	r3, [r4, #12]
 800f8fc:	bd70      	pop	{r4, r5, r6, pc}
 800f8fe:	2280      	movs	r2, #128	@ 0x80
 800f900:	0152      	lsls	r2, r2, #5
 800f902:	4313      	orrs	r3, r2
 800f904:	81a3      	strh	r3, [r4, #12]
 800f906:	6560      	str	r0, [r4, #84]	@ 0x54
 800f908:	e7f8      	b.n	800f8fc <__sseek+0x18>
 800f90a:	46c0      	nop			@ (mov r8, r8)
 800f90c:	ffffefff 	.word	0xffffefff

0800f910 <__sclose>:
 800f910:	b510      	push	{r4, lr}
 800f912:	230e      	movs	r3, #14
 800f914:	5ec9      	ldrsh	r1, [r1, r3]
 800f916:	f000 f80d 	bl	800f934 <_close_r>
 800f91a:	bd10      	pop	{r4, pc}

0800f91c <memset>:
 800f91c:	0003      	movs	r3, r0
 800f91e:	1882      	adds	r2, r0, r2
 800f920:	4293      	cmp	r3, r2
 800f922:	d100      	bne.n	800f926 <memset+0xa>
 800f924:	4770      	bx	lr
 800f926:	7019      	strb	r1, [r3, #0]
 800f928:	3301      	adds	r3, #1
 800f92a:	e7f9      	b.n	800f920 <memset+0x4>

0800f92c <_localeconv_r>:
 800f92c:	4800      	ldr	r0, [pc, #0]	@ (800f930 <_localeconv_r+0x4>)
 800f92e:	4770      	bx	lr
 800f930:	20000178 	.word	0x20000178

0800f934 <_close_r>:
 800f934:	2300      	movs	r3, #0
 800f936:	b570      	push	{r4, r5, r6, lr}
 800f938:	4d06      	ldr	r5, [pc, #24]	@ (800f954 <_close_r+0x20>)
 800f93a:	0004      	movs	r4, r0
 800f93c:	0008      	movs	r0, r1
 800f93e:	602b      	str	r3, [r5, #0]
 800f940:	f7f5 fb40 	bl	8004fc4 <_close>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d103      	bne.n	800f950 <_close_r+0x1c>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d000      	beq.n	800f950 <_close_r+0x1c>
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	bd70      	pop	{r4, r5, r6, pc}
 800f952:	46c0      	nop			@ (mov r8, r8)
 800f954:	20004978 	.word	0x20004978

0800f958 <_lseek_r>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	0004      	movs	r4, r0
 800f95c:	0008      	movs	r0, r1
 800f95e:	0011      	movs	r1, r2
 800f960:	001a      	movs	r2, r3
 800f962:	2300      	movs	r3, #0
 800f964:	4d05      	ldr	r5, [pc, #20]	@ (800f97c <_lseek_r+0x24>)
 800f966:	602b      	str	r3, [r5, #0]
 800f968:	f7f5 fb4d 	bl	8005006 <_lseek>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d103      	bne.n	800f978 <_lseek_r+0x20>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d000      	beq.n	800f978 <_lseek_r+0x20>
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	bd70      	pop	{r4, r5, r6, pc}
 800f97a:	46c0      	nop			@ (mov r8, r8)
 800f97c:	20004978 	.word	0x20004978

0800f980 <_read_r>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	0004      	movs	r4, r0
 800f984:	0008      	movs	r0, r1
 800f986:	0011      	movs	r1, r2
 800f988:	001a      	movs	r2, r3
 800f98a:	2300      	movs	r3, #0
 800f98c:	4d05      	ldr	r5, [pc, #20]	@ (800f9a4 <_read_r+0x24>)
 800f98e:	602b      	str	r3, [r5, #0]
 800f990:	f7f5 fadf 	bl	8004f52 <_read>
 800f994:	1c43      	adds	r3, r0, #1
 800f996:	d103      	bne.n	800f9a0 <_read_r+0x20>
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d000      	beq.n	800f9a0 <_read_r+0x20>
 800f99e:	6023      	str	r3, [r4, #0]
 800f9a0:	bd70      	pop	{r4, r5, r6, pc}
 800f9a2:	46c0      	nop			@ (mov r8, r8)
 800f9a4:	20004978 	.word	0x20004978

0800f9a8 <_write_r>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	0004      	movs	r4, r0
 800f9ac:	0008      	movs	r0, r1
 800f9ae:	0011      	movs	r1, r2
 800f9b0:	001a      	movs	r2, r3
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4d05      	ldr	r5, [pc, #20]	@ (800f9cc <_write_r+0x24>)
 800f9b6:	602b      	str	r3, [r5, #0]
 800f9b8:	f7f5 fae8 	bl	8004f8c <_write>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d103      	bne.n	800f9c8 <_write_r+0x20>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d000      	beq.n	800f9c8 <_write_r+0x20>
 800f9c6:	6023      	str	r3, [r4, #0]
 800f9c8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ca:	46c0      	nop			@ (mov r8, r8)
 800f9cc:	20004978 	.word	0x20004978

0800f9d0 <__errno>:
 800f9d0:	4b01      	ldr	r3, [pc, #4]	@ (800f9d8 <__errno+0x8>)
 800f9d2:	6818      	ldr	r0, [r3, #0]
 800f9d4:	4770      	bx	lr
 800f9d6:	46c0      	nop			@ (mov r8, r8)
 800f9d8:	20000038 	.word	0x20000038

0800f9dc <__libc_init_array>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	2600      	movs	r6, #0
 800f9e0:	4c0c      	ldr	r4, [pc, #48]	@ (800fa14 <__libc_init_array+0x38>)
 800f9e2:	4d0d      	ldr	r5, [pc, #52]	@ (800fa18 <__libc_init_array+0x3c>)
 800f9e4:	1b64      	subs	r4, r4, r5
 800f9e6:	10a4      	asrs	r4, r4, #2
 800f9e8:	42a6      	cmp	r6, r4
 800f9ea:	d109      	bne.n	800fa00 <__libc_init_array+0x24>
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	f003 fdcf 	bl	8013590 <_init>
 800f9f2:	4c0a      	ldr	r4, [pc, #40]	@ (800fa1c <__libc_init_array+0x40>)
 800f9f4:	4d0a      	ldr	r5, [pc, #40]	@ (800fa20 <__libc_init_array+0x44>)
 800f9f6:	1b64      	subs	r4, r4, r5
 800f9f8:	10a4      	asrs	r4, r4, #2
 800f9fa:	42a6      	cmp	r6, r4
 800f9fc:	d105      	bne.n	800fa0a <__libc_init_array+0x2e>
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	00b3      	lsls	r3, r6, #2
 800fa02:	58eb      	ldr	r3, [r5, r3]
 800fa04:	4798      	blx	r3
 800fa06:	3601      	adds	r6, #1
 800fa08:	e7ee      	b.n	800f9e8 <__libc_init_array+0xc>
 800fa0a:	00b3      	lsls	r3, r6, #2
 800fa0c:	58eb      	ldr	r3, [r5, r3]
 800fa0e:	4798      	blx	r3
 800fa10:	3601      	adds	r6, #1
 800fa12:	e7f2      	b.n	800f9fa <__libc_init_array+0x1e>
 800fa14:	08013ff8 	.word	0x08013ff8
 800fa18:	08013ff8 	.word	0x08013ff8
 800fa1c:	08013ffc 	.word	0x08013ffc
 800fa20:	08013ff8 	.word	0x08013ff8

0800fa24 <__retarget_lock_init_recursive>:
 800fa24:	4770      	bx	lr

0800fa26 <__retarget_lock_acquire_recursive>:
 800fa26:	4770      	bx	lr

0800fa28 <__retarget_lock_release_recursive>:
 800fa28:	4770      	bx	lr

0800fa2a <memchr>:
 800fa2a:	b2c9      	uxtb	r1, r1
 800fa2c:	1882      	adds	r2, r0, r2
 800fa2e:	4290      	cmp	r0, r2
 800fa30:	d101      	bne.n	800fa36 <memchr+0xc>
 800fa32:	2000      	movs	r0, #0
 800fa34:	4770      	bx	lr
 800fa36:	7803      	ldrb	r3, [r0, #0]
 800fa38:	428b      	cmp	r3, r1
 800fa3a:	d0fb      	beq.n	800fa34 <memchr+0xa>
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	e7f6      	b.n	800fa2e <memchr+0x4>

0800fa40 <memcpy>:
 800fa40:	2300      	movs	r3, #0
 800fa42:	b510      	push	{r4, lr}
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d100      	bne.n	800fa4a <memcpy+0xa>
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	5ccc      	ldrb	r4, [r1, r3]
 800fa4c:	54c4      	strb	r4, [r0, r3]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	e7f8      	b.n	800fa44 <memcpy+0x4>
	...

0800fa54 <nanf>:
 800fa54:	4800      	ldr	r0, [pc, #0]	@ (800fa58 <nanf+0x4>)
 800fa56:	4770      	bx	lr
 800fa58:	7fc00000 	.word	0x7fc00000

0800fa5c <quorem>:
 800fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa5e:	6902      	ldr	r2, [r0, #16]
 800fa60:	690f      	ldr	r7, [r1, #16]
 800fa62:	b087      	sub	sp, #28
 800fa64:	0006      	movs	r6, r0
 800fa66:	000b      	movs	r3, r1
 800fa68:	2000      	movs	r0, #0
 800fa6a:	9102      	str	r1, [sp, #8]
 800fa6c:	42ba      	cmp	r2, r7
 800fa6e:	db6d      	blt.n	800fb4c <quorem+0xf0>
 800fa70:	3f01      	subs	r7, #1
 800fa72:	00bc      	lsls	r4, r7, #2
 800fa74:	3314      	adds	r3, #20
 800fa76:	9305      	str	r3, [sp, #20]
 800fa78:	191b      	adds	r3, r3, r4
 800fa7a:	9303      	str	r3, [sp, #12]
 800fa7c:	0033      	movs	r3, r6
 800fa7e:	3314      	adds	r3, #20
 800fa80:	191c      	adds	r4, r3, r4
 800fa82:	9301      	str	r3, [sp, #4]
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	9304      	str	r3, [sp, #16]
 800fa88:	9b03      	ldr	r3, [sp, #12]
 800fa8a:	9804      	ldr	r0, [sp, #16]
 800fa8c:	681d      	ldr	r5, [r3, #0]
 800fa8e:	3501      	adds	r5, #1
 800fa90:	0029      	movs	r1, r5
 800fa92:	f7f0 fb55 	bl	8000140 <__udivsi3>
 800fa96:	9b04      	ldr	r3, [sp, #16]
 800fa98:	9000      	str	r0, [sp, #0]
 800fa9a:	42ab      	cmp	r3, r5
 800fa9c:	d32b      	bcc.n	800faf6 <quorem+0x9a>
 800fa9e:	9b05      	ldr	r3, [sp, #20]
 800faa0:	9d01      	ldr	r5, [sp, #4]
 800faa2:	469c      	mov	ip, r3
 800faa4:	2300      	movs	r3, #0
 800faa6:	9305      	str	r3, [sp, #20]
 800faa8:	9304      	str	r3, [sp, #16]
 800faaa:	4662      	mov	r2, ip
 800faac:	ca08      	ldmia	r2!, {r3}
 800faae:	6828      	ldr	r0, [r5, #0]
 800fab0:	4694      	mov	ip, r2
 800fab2:	9a00      	ldr	r2, [sp, #0]
 800fab4:	b299      	uxth	r1, r3
 800fab6:	4351      	muls	r1, r2
 800fab8:	9a05      	ldr	r2, [sp, #20]
 800faba:	0c1b      	lsrs	r3, r3, #16
 800fabc:	1889      	adds	r1, r1, r2
 800fabe:	9a00      	ldr	r2, [sp, #0]
 800fac0:	4353      	muls	r3, r2
 800fac2:	0c0a      	lsrs	r2, r1, #16
 800fac4:	189b      	adds	r3, r3, r2
 800fac6:	0c1a      	lsrs	r2, r3, #16
 800fac8:	b289      	uxth	r1, r1
 800faca:	9205      	str	r2, [sp, #20]
 800facc:	b282      	uxth	r2, r0
 800face:	1a52      	subs	r2, r2, r1
 800fad0:	9904      	ldr	r1, [sp, #16]
 800fad2:	0c00      	lsrs	r0, r0, #16
 800fad4:	1852      	adds	r2, r2, r1
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	1411      	asrs	r1, r2, #16
 800fada:	1ac3      	subs	r3, r0, r3
 800fadc:	185b      	adds	r3, r3, r1
 800fade:	1419      	asrs	r1, r3, #16
 800fae0:	b292      	uxth	r2, r2
 800fae2:	041b      	lsls	r3, r3, #16
 800fae4:	431a      	orrs	r2, r3
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	9104      	str	r1, [sp, #16]
 800faea:	c504      	stmia	r5!, {r2}
 800faec:	4563      	cmp	r3, ip
 800faee:	d2dc      	bcs.n	800faaa <quorem+0x4e>
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d030      	beq.n	800fb58 <quorem+0xfc>
 800faf6:	0030      	movs	r0, r6
 800faf8:	9902      	ldr	r1, [sp, #8]
 800fafa:	f001 fa11 	bl	8010f20 <__mcmp>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	db23      	blt.n	800fb4a <quorem+0xee>
 800fb02:	0034      	movs	r4, r6
 800fb04:	2500      	movs	r5, #0
 800fb06:	9902      	ldr	r1, [sp, #8]
 800fb08:	3414      	adds	r4, #20
 800fb0a:	3114      	adds	r1, #20
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	c901      	ldmia	r1!, {r0}
 800fb10:	9302      	str	r3, [sp, #8]
 800fb12:	466b      	mov	r3, sp
 800fb14:	891b      	ldrh	r3, [r3, #8]
 800fb16:	b282      	uxth	r2, r0
 800fb18:	1a9a      	subs	r2, r3, r2
 800fb1a:	9b02      	ldr	r3, [sp, #8]
 800fb1c:	1952      	adds	r2, r2, r5
 800fb1e:	0c00      	lsrs	r0, r0, #16
 800fb20:	0c1b      	lsrs	r3, r3, #16
 800fb22:	1a1b      	subs	r3, r3, r0
 800fb24:	1410      	asrs	r0, r2, #16
 800fb26:	181b      	adds	r3, r3, r0
 800fb28:	141d      	asrs	r5, r3, #16
 800fb2a:	b292      	uxth	r2, r2
 800fb2c:	041b      	lsls	r3, r3, #16
 800fb2e:	431a      	orrs	r2, r3
 800fb30:	9b03      	ldr	r3, [sp, #12]
 800fb32:	c404      	stmia	r4!, {r2}
 800fb34:	428b      	cmp	r3, r1
 800fb36:	d2e9      	bcs.n	800fb0c <quorem+0xb0>
 800fb38:	9a01      	ldr	r2, [sp, #4]
 800fb3a:	00bb      	lsls	r3, r7, #2
 800fb3c:	18d3      	adds	r3, r2, r3
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	2a00      	cmp	r2, #0
 800fb42:	d013      	beq.n	800fb6c <quorem+0x110>
 800fb44:	9b00      	ldr	r3, [sp, #0]
 800fb46:	3301      	adds	r3, #1
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	9800      	ldr	r0, [sp, #0]
 800fb4c:	b007      	add	sp, #28
 800fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb50:	6823      	ldr	r3, [r4, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d104      	bne.n	800fb60 <quorem+0x104>
 800fb56:	3f01      	subs	r7, #1
 800fb58:	9b01      	ldr	r3, [sp, #4]
 800fb5a:	3c04      	subs	r4, #4
 800fb5c:	42a3      	cmp	r3, r4
 800fb5e:	d3f7      	bcc.n	800fb50 <quorem+0xf4>
 800fb60:	6137      	str	r7, [r6, #16]
 800fb62:	e7c8      	b.n	800faf6 <quorem+0x9a>
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	d104      	bne.n	800fb74 <quorem+0x118>
 800fb6a:	3f01      	subs	r7, #1
 800fb6c:	9a01      	ldr	r2, [sp, #4]
 800fb6e:	3b04      	subs	r3, #4
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d3f7      	bcc.n	800fb64 <quorem+0x108>
 800fb74:	6137      	str	r7, [r6, #16]
 800fb76:	e7e5      	b.n	800fb44 <quorem+0xe8>

0800fb78 <_dtoa_r>:
 800fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb7a:	0014      	movs	r4, r2
 800fb7c:	001d      	movs	r5, r3
 800fb7e:	69c6      	ldr	r6, [r0, #28]
 800fb80:	b09d      	sub	sp, #116	@ 0x74
 800fb82:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb84:	950b      	str	r5, [sp, #44]	@ 0x2c
 800fb86:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800fb88:	9003      	str	r0, [sp, #12]
 800fb8a:	2e00      	cmp	r6, #0
 800fb8c:	d10f      	bne.n	800fbae <_dtoa_r+0x36>
 800fb8e:	2010      	movs	r0, #16
 800fb90:	f000 fe30 	bl	80107f4 <malloc>
 800fb94:	9b03      	ldr	r3, [sp, #12]
 800fb96:	1e02      	subs	r2, r0, #0
 800fb98:	61d8      	str	r0, [r3, #28]
 800fb9a:	d104      	bne.n	800fba6 <_dtoa_r+0x2e>
 800fb9c:	21ef      	movs	r1, #239	@ 0xef
 800fb9e:	4bc7      	ldr	r3, [pc, #796]	@ (800febc <_dtoa_r+0x344>)
 800fba0:	48c7      	ldr	r0, [pc, #796]	@ (800fec0 <_dtoa_r+0x348>)
 800fba2:	f002 fc99 	bl	80124d8 <__assert_func>
 800fba6:	6046      	str	r6, [r0, #4]
 800fba8:	6086      	str	r6, [r0, #8]
 800fbaa:	6006      	str	r6, [r0, #0]
 800fbac:	60c6      	str	r6, [r0, #12]
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	6819      	ldr	r1, [r3, #0]
 800fbb4:	2900      	cmp	r1, #0
 800fbb6:	d00b      	beq.n	800fbd0 <_dtoa_r+0x58>
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4093      	lsls	r3, r2
 800fbbe:	604a      	str	r2, [r1, #4]
 800fbc0:	608b      	str	r3, [r1, #8]
 800fbc2:	9803      	ldr	r0, [sp, #12]
 800fbc4:	f000 ff16 	bl	80109f4 <_Bfree>
 800fbc8:	2200      	movs	r2, #0
 800fbca:	9b03      	ldr	r3, [sp, #12]
 800fbcc:	69db      	ldr	r3, [r3, #28]
 800fbce:	601a      	str	r2, [r3, #0]
 800fbd0:	2d00      	cmp	r5, #0
 800fbd2:	da1e      	bge.n	800fc12 <_dtoa_r+0x9a>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	006b      	lsls	r3, r5, #1
 800fbda:	085b      	lsrs	r3, r3, #1
 800fbdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbde:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fbe0:	4bb8      	ldr	r3, [pc, #736]	@ (800fec4 <_dtoa_r+0x34c>)
 800fbe2:	4ab8      	ldr	r2, [pc, #736]	@ (800fec4 <_dtoa_r+0x34c>)
 800fbe4:	403b      	ands	r3, r7
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d116      	bne.n	800fc18 <_dtoa_r+0xa0>
 800fbea:	4bb7      	ldr	r3, [pc, #732]	@ (800fec8 <_dtoa_r+0x350>)
 800fbec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	033b      	lsls	r3, r7, #12
 800fbf2:	0b1b      	lsrs	r3, r3, #12
 800fbf4:	4323      	orrs	r3, r4
 800fbf6:	d101      	bne.n	800fbfc <_dtoa_r+0x84>
 800fbf8:	f000 fd83 	bl	8010702 <_dtoa_r+0xb8a>
 800fbfc:	4bb3      	ldr	r3, [pc, #716]	@ (800fecc <_dtoa_r+0x354>)
 800fbfe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fc00:	9308      	str	r3, [sp, #32]
 800fc02:	2a00      	cmp	r2, #0
 800fc04:	d002      	beq.n	800fc0c <_dtoa_r+0x94>
 800fc06:	4bb2      	ldr	r3, [pc, #712]	@ (800fed0 <_dtoa_r+0x358>)
 800fc08:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	9808      	ldr	r0, [sp, #32]
 800fc0e:	b01d      	add	sp, #116	@ 0x74
 800fc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc12:	2300      	movs	r3, #0
 800fc14:	603b      	str	r3, [r7, #0]
 800fc16:	e7e2      	b.n	800fbde <_dtoa_r+0x66>
 800fc18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc1c:	9212      	str	r2, [sp, #72]	@ 0x48
 800fc1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fc22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fc24:	2200      	movs	r2, #0
 800fc26:	2300      	movs	r3, #0
 800fc28:	f7f0 fc10 	bl	800044c <__aeabi_dcmpeq>
 800fc2c:	1e06      	subs	r6, r0, #0
 800fc2e:	d00b      	beq.n	800fc48 <_dtoa_r+0xd0>
 800fc30:	2301      	movs	r3, #1
 800fc32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <_dtoa_r+0xca>
 800fc3c:	4ba5      	ldr	r3, [pc, #660]	@ (800fed4 <_dtoa_r+0x35c>)
 800fc3e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	4ba5      	ldr	r3, [pc, #660]	@ (800fed8 <_dtoa_r+0x360>)
 800fc44:	9308      	str	r3, [sp, #32]
 800fc46:	e7e1      	b.n	800fc0c <_dtoa_r+0x94>
 800fc48:	ab1a      	add	r3, sp, #104	@ 0x68
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	9803      	ldr	r0, [sp, #12]
 800fc52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fc54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc56:	f001 fa85 	bl	8011164 <__d2b>
 800fc5a:	007a      	lsls	r2, r7, #1
 800fc5c:	9005      	str	r0, [sp, #20]
 800fc5e:	0d52      	lsrs	r2, r2, #21
 800fc60:	d100      	bne.n	800fc64 <_dtoa_r+0xec>
 800fc62:	e07b      	b.n	800fd5c <_dtoa_r+0x1e4>
 800fc64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc66:	9618      	str	r6, [sp, #96]	@ 0x60
 800fc68:	0319      	lsls	r1, r3, #12
 800fc6a:	4b9c      	ldr	r3, [pc, #624]	@ (800fedc <_dtoa_r+0x364>)
 800fc6c:	0b09      	lsrs	r1, r1, #12
 800fc6e:	430b      	orrs	r3, r1
 800fc70:	499b      	ldr	r1, [pc, #620]	@ (800fee0 <_dtoa_r+0x368>)
 800fc72:	1857      	adds	r7, r2, r1
 800fc74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fc76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fc78:	0019      	movs	r1, r3
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	4b99      	ldr	r3, [pc, #612]	@ (800fee4 <_dtoa_r+0x36c>)
 800fc7e:	f7f2 ff5b 	bl	8002b38 <__aeabi_dsub>
 800fc82:	4a99      	ldr	r2, [pc, #612]	@ (800fee8 <_dtoa_r+0x370>)
 800fc84:	4b99      	ldr	r3, [pc, #612]	@ (800feec <_dtoa_r+0x374>)
 800fc86:	f7f2 fc8f 	bl	80025a8 <__aeabi_dmul>
 800fc8a:	4a99      	ldr	r2, [pc, #612]	@ (800fef0 <_dtoa_r+0x378>)
 800fc8c:	4b99      	ldr	r3, [pc, #612]	@ (800fef4 <_dtoa_r+0x37c>)
 800fc8e:	f7f1 fce3 	bl	8001658 <__aeabi_dadd>
 800fc92:	0004      	movs	r4, r0
 800fc94:	0038      	movs	r0, r7
 800fc96:	000d      	movs	r5, r1
 800fc98:	f7f3 fb48 	bl	800332c <__aeabi_i2d>
 800fc9c:	4a96      	ldr	r2, [pc, #600]	@ (800fef8 <_dtoa_r+0x380>)
 800fc9e:	4b97      	ldr	r3, [pc, #604]	@ (800fefc <_dtoa_r+0x384>)
 800fca0:	f7f2 fc82 	bl	80025a8 <__aeabi_dmul>
 800fca4:	0002      	movs	r2, r0
 800fca6:	000b      	movs	r3, r1
 800fca8:	0020      	movs	r0, r4
 800fcaa:	0029      	movs	r1, r5
 800fcac:	f7f1 fcd4 	bl	8001658 <__aeabi_dadd>
 800fcb0:	0004      	movs	r4, r0
 800fcb2:	000d      	movs	r5, r1
 800fcb4:	f7f3 fafe 	bl	80032b4 <__aeabi_d2iz>
 800fcb8:	2200      	movs	r2, #0
 800fcba:	9004      	str	r0, [sp, #16]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	0020      	movs	r0, r4
 800fcc0:	0029      	movs	r1, r5
 800fcc2:	f7f0 fbc9 	bl	8000458 <__aeabi_dcmplt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d00b      	beq.n	800fce2 <_dtoa_r+0x16a>
 800fcca:	9804      	ldr	r0, [sp, #16]
 800fccc:	f7f3 fb2e 	bl	800332c <__aeabi_i2d>
 800fcd0:	002b      	movs	r3, r5
 800fcd2:	0022      	movs	r2, r4
 800fcd4:	f7f0 fbba 	bl	800044c <__aeabi_dcmpeq>
 800fcd8:	4243      	negs	r3, r0
 800fcda:	4158      	adcs	r0, r3
 800fcdc:	9b04      	ldr	r3, [sp, #16]
 800fcde:	1a1b      	subs	r3, r3, r0
 800fce0:	9304      	str	r3, [sp, #16]
 800fce2:	2301      	movs	r3, #1
 800fce4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fce6:	9b04      	ldr	r3, [sp, #16]
 800fce8:	2b16      	cmp	r3, #22
 800fcea:	d810      	bhi.n	800fd0e <_dtoa_r+0x196>
 800fcec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fcee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fcf0:	9a04      	ldr	r2, [sp, #16]
 800fcf2:	4b83      	ldr	r3, [pc, #524]	@ (800ff00 <_dtoa_r+0x388>)
 800fcf4:	00d2      	lsls	r2, r2, #3
 800fcf6:	189b      	adds	r3, r3, r2
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	f7f0 fbac 	bl	8000458 <__aeabi_dcmplt>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d047      	beq.n	800fd94 <_dtoa_r+0x21c>
 800fd04:	9b04      	ldr	r3, [sp, #16]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	9304      	str	r3, [sp, #16]
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fd0e:	2200      	movs	r2, #0
 800fd10:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fd12:	9206      	str	r2, [sp, #24]
 800fd14:	1bdb      	subs	r3, r3, r7
 800fd16:	1e5a      	subs	r2, r3, #1
 800fd18:	d53e      	bpl.n	800fd98 <_dtoa_r+0x220>
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	9306      	str	r3, [sp, #24]
 800fd20:	2300      	movs	r3, #0
 800fd22:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd24:	9b04      	ldr	r3, [sp, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	db38      	blt.n	800fd9c <_dtoa_r+0x224>
 800fd2a:	9a04      	ldr	r2, [sp, #16]
 800fd2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd2e:	4694      	mov	ip, r2
 800fd30:	4463      	add	r3, ip
 800fd32:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd34:	2300      	movs	r3, #0
 800fd36:	9214      	str	r2, [sp, #80]	@ 0x50
 800fd38:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fd3c:	2401      	movs	r4, #1
 800fd3e:	2b09      	cmp	r3, #9
 800fd40:	d867      	bhi.n	800fe12 <_dtoa_r+0x29a>
 800fd42:	2b05      	cmp	r3, #5
 800fd44:	dd02      	ble.n	800fd4c <_dtoa_r+0x1d4>
 800fd46:	2400      	movs	r4, #0
 800fd48:	3b04      	subs	r3, #4
 800fd4a:	9322      	str	r3, [sp, #136]	@ 0x88
 800fd4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fd4e:	1e98      	subs	r0, r3, #2
 800fd50:	2803      	cmp	r0, #3
 800fd52:	d867      	bhi.n	800fe24 <_dtoa_r+0x2ac>
 800fd54:	f7f0 f9e0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800fd58:	5b383a2b 	.word	0x5b383a2b
 800fd5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fd5e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800fd60:	18f6      	adds	r6, r6, r3
 800fd62:	4b68      	ldr	r3, [pc, #416]	@ (800ff04 <_dtoa_r+0x38c>)
 800fd64:	18f2      	adds	r2, r6, r3
 800fd66:	2a20      	cmp	r2, #32
 800fd68:	dd0f      	ble.n	800fd8a <_dtoa_r+0x212>
 800fd6a:	2340      	movs	r3, #64	@ 0x40
 800fd6c:	1a9b      	subs	r3, r3, r2
 800fd6e:	409f      	lsls	r7, r3
 800fd70:	4b65      	ldr	r3, [pc, #404]	@ (800ff08 <_dtoa_r+0x390>)
 800fd72:	0038      	movs	r0, r7
 800fd74:	18f3      	adds	r3, r6, r3
 800fd76:	40dc      	lsrs	r4, r3
 800fd78:	4320      	orrs	r0, r4
 800fd7a:	f7f3 fb05 	bl	8003388 <__aeabi_ui2d>
 800fd7e:	2201      	movs	r2, #1
 800fd80:	4b62      	ldr	r3, [pc, #392]	@ (800ff0c <_dtoa_r+0x394>)
 800fd82:	1e77      	subs	r7, r6, #1
 800fd84:	18cb      	adds	r3, r1, r3
 800fd86:	9218      	str	r2, [sp, #96]	@ 0x60
 800fd88:	e776      	b.n	800fc78 <_dtoa_r+0x100>
 800fd8a:	2320      	movs	r3, #32
 800fd8c:	0020      	movs	r0, r4
 800fd8e:	1a9b      	subs	r3, r3, r2
 800fd90:	4098      	lsls	r0, r3
 800fd92:	e7f2      	b.n	800fd7a <_dtoa_r+0x202>
 800fd94:	9015      	str	r0, [sp, #84]	@ 0x54
 800fd96:	e7ba      	b.n	800fd0e <_dtoa_r+0x196>
 800fd98:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd9a:	e7c3      	b.n	800fd24 <_dtoa_r+0x1ac>
 800fd9c:	9b06      	ldr	r3, [sp, #24]
 800fd9e:	9a04      	ldr	r2, [sp, #16]
 800fda0:	1a9b      	subs	r3, r3, r2
 800fda2:	9306      	str	r3, [sp, #24]
 800fda4:	4253      	negs	r3, r2
 800fda6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9314      	str	r3, [sp, #80]	@ 0x50
 800fdac:	e7c5      	b.n	800fd3a <_dtoa_r+0x1c2>
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fdb4:	930e      	str	r3, [sp, #56]	@ 0x38
 800fdb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dc13      	bgt.n	800fde4 <_dtoa_r+0x26c>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	001a      	movs	r2, r3
 800fdc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800fdc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdc4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800fdc6:	e00d      	b.n	800fde4 <_dtoa_r+0x26c>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e7f1      	b.n	800fdb0 <_dtoa_r+0x238>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fdd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdd2:	4694      	mov	ip, r2
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	4463      	add	r3, ip
 800fdd8:	930e      	str	r3, [sp, #56]	@ 0x38
 800fdda:	3301      	adds	r3, #1
 800fddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	dc00      	bgt.n	800fde4 <_dtoa_r+0x26c>
 800fde2:	2301      	movs	r3, #1
 800fde4:	9a03      	ldr	r2, [sp, #12]
 800fde6:	2100      	movs	r1, #0
 800fde8:	69d0      	ldr	r0, [r2, #28]
 800fdea:	2204      	movs	r2, #4
 800fdec:	0015      	movs	r5, r2
 800fdee:	3514      	adds	r5, #20
 800fdf0:	429d      	cmp	r5, r3
 800fdf2:	d91b      	bls.n	800fe2c <_dtoa_r+0x2b4>
 800fdf4:	6041      	str	r1, [r0, #4]
 800fdf6:	9803      	ldr	r0, [sp, #12]
 800fdf8:	f000 fdb8 	bl	801096c <_Balloc>
 800fdfc:	9008      	str	r0, [sp, #32]
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d117      	bne.n	800fe32 <_dtoa_r+0x2ba>
 800fe02:	21b0      	movs	r1, #176	@ 0xb0
 800fe04:	4b42      	ldr	r3, [pc, #264]	@ (800ff10 <_dtoa_r+0x398>)
 800fe06:	482e      	ldr	r0, [pc, #184]	@ (800fec0 <_dtoa_r+0x348>)
 800fe08:	9a08      	ldr	r2, [sp, #32]
 800fe0a:	31ff      	adds	r1, #255	@ 0xff
 800fe0c:	e6c9      	b.n	800fba2 <_dtoa_r+0x2a>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e7dd      	b.n	800fdce <_dtoa_r+0x256>
 800fe12:	2300      	movs	r3, #0
 800fe14:	9410      	str	r4, [sp, #64]	@ 0x40
 800fe16:	9322      	str	r3, [sp, #136]	@ 0x88
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	930e      	str	r3, [sp, #56]	@ 0x38
 800fe1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe1e:	2200      	movs	r2, #0
 800fe20:	3313      	adds	r3, #19
 800fe22:	e7cf      	b.n	800fdc4 <_dtoa_r+0x24c>
 800fe24:	2301      	movs	r3, #1
 800fe26:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe28:	3b02      	subs	r3, #2
 800fe2a:	e7f6      	b.n	800fe1a <_dtoa_r+0x2a2>
 800fe2c:	3101      	adds	r1, #1
 800fe2e:	0052      	lsls	r2, r2, #1
 800fe30:	e7dc      	b.n	800fdec <_dtoa_r+0x274>
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	9a08      	ldr	r2, [sp, #32]
 800fe36:	69db      	ldr	r3, [r3, #28]
 800fe38:	601a      	str	r2, [r3, #0]
 800fe3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe3c:	2b0e      	cmp	r3, #14
 800fe3e:	d900      	bls.n	800fe42 <_dtoa_r+0x2ca>
 800fe40:	e0d9      	b.n	800fff6 <_dtoa_r+0x47e>
 800fe42:	2c00      	cmp	r4, #0
 800fe44:	d100      	bne.n	800fe48 <_dtoa_r+0x2d0>
 800fe46:	e0d6      	b.n	800fff6 <_dtoa_r+0x47e>
 800fe48:	9b04      	ldr	r3, [sp, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	dd64      	ble.n	800ff18 <_dtoa_r+0x3a0>
 800fe4e:	210f      	movs	r1, #15
 800fe50:	9a04      	ldr	r2, [sp, #16]
 800fe52:	4b2b      	ldr	r3, [pc, #172]	@ (800ff00 <_dtoa_r+0x388>)
 800fe54:	400a      	ands	r2, r1
 800fe56:	00d2      	lsls	r2, r2, #3
 800fe58:	189b      	adds	r3, r3, r2
 800fe5a:	681e      	ldr	r6, [r3, #0]
 800fe5c:	685f      	ldr	r7, [r3, #4]
 800fe5e:	9b04      	ldr	r3, [sp, #16]
 800fe60:	2402      	movs	r4, #2
 800fe62:	111d      	asrs	r5, r3, #4
 800fe64:	05db      	lsls	r3, r3, #23
 800fe66:	d50a      	bpl.n	800fe7e <_dtoa_r+0x306>
 800fe68:	4b2a      	ldr	r3, [pc, #168]	@ (800ff14 <_dtoa_r+0x39c>)
 800fe6a:	400d      	ands	r5, r1
 800fe6c:	6a1a      	ldr	r2, [r3, #32]
 800fe6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fe72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fe74:	f7f1 ff54 	bl	8001d20 <__aeabi_ddiv>
 800fe78:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fe7c:	3401      	adds	r4, #1
 800fe7e:	4b25      	ldr	r3, [pc, #148]	@ (800ff14 <_dtoa_r+0x39c>)
 800fe80:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe82:	2d00      	cmp	r5, #0
 800fe84:	d108      	bne.n	800fe98 <_dtoa_r+0x320>
 800fe86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fe88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe8a:	0032      	movs	r2, r6
 800fe8c:	003b      	movs	r3, r7
 800fe8e:	f7f1 ff47 	bl	8001d20 <__aeabi_ddiv>
 800fe92:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fe96:	e05a      	b.n	800ff4e <_dtoa_r+0x3d6>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	421d      	tst	r5, r3
 800fe9c:	d009      	beq.n	800feb2 <_dtoa_r+0x33a>
 800fe9e:	18e4      	adds	r4, r4, r3
 800fea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fea2:	0030      	movs	r0, r6
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	0039      	movs	r1, r7
 800feaa:	f7f2 fb7d 	bl	80025a8 <__aeabi_dmul>
 800feae:	0006      	movs	r6, r0
 800feb0:	000f      	movs	r7, r1
 800feb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800feb4:	106d      	asrs	r5, r5, #1
 800feb6:	3308      	adds	r3, #8
 800feb8:	e7e2      	b.n	800fe80 <_dtoa_r+0x308>
 800feba:	46c0      	nop			@ (mov r8, r8)
 800febc:	08013bee 	.word	0x08013bee
 800fec0:	08013c05 	.word	0x08013c05
 800fec4:	7ff00000 	.word	0x7ff00000
 800fec8:	0000270f 	.word	0x0000270f
 800fecc:	08013bea 	.word	0x08013bea
 800fed0:	08013bed 	.word	0x08013bed
 800fed4:	08013bb9 	.word	0x08013bb9
 800fed8:	08013bb8 	.word	0x08013bb8
 800fedc:	3ff00000 	.word	0x3ff00000
 800fee0:	fffffc01 	.word	0xfffffc01
 800fee4:	3ff80000 	.word	0x3ff80000
 800fee8:	636f4361 	.word	0x636f4361
 800feec:	3fd287a7 	.word	0x3fd287a7
 800fef0:	8b60c8b3 	.word	0x8b60c8b3
 800fef4:	3fc68a28 	.word	0x3fc68a28
 800fef8:	509f79fb 	.word	0x509f79fb
 800fefc:	3fd34413 	.word	0x3fd34413
 800ff00:	08013d00 	.word	0x08013d00
 800ff04:	00000432 	.word	0x00000432
 800ff08:	00000412 	.word	0x00000412
 800ff0c:	fe100000 	.word	0xfe100000
 800ff10:	08013c5d 	.word	0x08013c5d
 800ff14:	08013cd8 	.word	0x08013cd8
 800ff18:	9b04      	ldr	r3, [sp, #16]
 800ff1a:	2402      	movs	r4, #2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d016      	beq.n	800ff4e <_dtoa_r+0x3d6>
 800ff20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ff22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ff24:	220f      	movs	r2, #15
 800ff26:	425d      	negs	r5, r3
 800ff28:	402a      	ands	r2, r5
 800ff2a:	4bd7      	ldr	r3, [pc, #860]	@ (8010288 <_dtoa_r+0x710>)
 800ff2c:	00d2      	lsls	r2, r2, #3
 800ff2e:	189b      	adds	r3, r3, r2
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	f7f2 fb38 	bl	80025a8 <__aeabi_dmul>
 800ff38:	2701      	movs	r7, #1
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ff40:	4ed2      	ldr	r6, [pc, #840]	@ (801028c <_dtoa_r+0x714>)
 800ff42:	112d      	asrs	r5, r5, #4
 800ff44:	2d00      	cmp	r5, #0
 800ff46:	d000      	beq.n	800ff4a <_dtoa_r+0x3d2>
 800ff48:	e0ba      	b.n	80100c0 <_dtoa_r+0x548>
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1a1      	bne.n	800fe92 <_dtoa_r+0x31a>
 800ff4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ff50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ff52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d100      	bne.n	800ff5a <_dtoa_r+0x3e2>
 800ff58:	e0bd      	b.n	80100d6 <_dtoa_r+0x55e>
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	0030      	movs	r0, r6
 800ff5e:	0039      	movs	r1, r7
 800ff60:	4bcb      	ldr	r3, [pc, #812]	@ (8010290 <_dtoa_r+0x718>)
 800ff62:	f7f0 fa79 	bl	8000458 <__aeabi_dcmplt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d100      	bne.n	800ff6c <_dtoa_r+0x3f4>
 800ff6a:	e0b4      	b.n	80100d6 <_dtoa_r+0x55e>
 800ff6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d100      	bne.n	800ff74 <_dtoa_r+0x3fc>
 800ff72:	e0b0      	b.n	80100d6 <_dtoa_r+0x55e>
 800ff74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	dd39      	ble.n	800ffee <_dtoa_r+0x476>
 800ff7a:	9b04      	ldr	r3, [sp, #16]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff82:	0030      	movs	r0, r6
 800ff84:	4bc3      	ldr	r3, [pc, #780]	@ (8010294 <_dtoa_r+0x71c>)
 800ff86:	0039      	movs	r1, r7
 800ff88:	f7f2 fb0e 	bl	80025a8 <__aeabi_dmul>
 800ff8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ff90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff92:	3401      	adds	r4, #1
 800ff94:	0020      	movs	r0, r4
 800ff96:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff98:	f7f3 f9c8 	bl	800332c <__aeabi_i2d>
 800ff9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffa0:	f7f2 fb02 	bl	80025a8 <__aeabi_dmul>
 800ffa4:	4bbc      	ldr	r3, [pc, #752]	@ (8010298 <_dtoa_r+0x720>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f7f1 fb56 	bl	8001658 <__aeabi_dadd>
 800ffac:	4bbb      	ldr	r3, [pc, #748]	@ (801029c <_dtoa_r+0x724>)
 800ffae:	0006      	movs	r6, r0
 800ffb0:	18cf      	adds	r7, r1, r3
 800ffb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d000      	beq.n	800ffba <_dtoa_r+0x442>
 800ffb8:	e091      	b.n	80100de <_dtoa_r+0x566>
 800ffba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ffbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	4bb7      	ldr	r3, [pc, #732]	@ (80102a0 <_dtoa_r+0x728>)
 800ffc2:	f7f2 fdb9 	bl	8002b38 <__aeabi_dsub>
 800ffc6:	0032      	movs	r2, r6
 800ffc8:	003b      	movs	r3, r7
 800ffca:	0004      	movs	r4, r0
 800ffcc:	000d      	movs	r5, r1
 800ffce:	f7f0 fa57 	bl	8000480 <__aeabi_dcmpgt>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d000      	beq.n	800ffd8 <_dtoa_r+0x460>
 800ffd6:	e29d      	b.n	8010514 <_dtoa_r+0x99c>
 800ffd8:	2180      	movs	r1, #128	@ 0x80
 800ffda:	0609      	lsls	r1, r1, #24
 800ffdc:	187b      	adds	r3, r7, r1
 800ffde:	0032      	movs	r2, r6
 800ffe0:	0020      	movs	r0, r4
 800ffe2:	0029      	movs	r1, r5
 800ffe4:	f7f0 fa38 	bl	8000458 <__aeabi_dcmplt>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d000      	beq.n	800ffee <_dtoa_r+0x476>
 800ffec:	e130      	b.n	8010250 <_dtoa_r+0x6d8>
 800ffee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fff0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fff2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fff4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fff6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	da00      	bge.n	800fffe <_dtoa_r+0x486>
 800fffc:	e177      	b.n	80102ee <_dtoa_r+0x776>
 800fffe:	9a04      	ldr	r2, [sp, #16]
 8010000:	2a0e      	cmp	r2, #14
 8010002:	dd00      	ble.n	8010006 <_dtoa_r+0x48e>
 8010004:	e173      	b.n	80102ee <_dtoa_r+0x776>
 8010006:	4ba0      	ldr	r3, [pc, #640]	@ (8010288 <_dtoa_r+0x710>)
 8010008:	00d2      	lsls	r2, r2, #3
 801000a:	189b      	adds	r3, r3, r2
 801000c:	685c      	ldr	r4, [r3, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	9306      	str	r3, [sp, #24]
 8010012:	9407      	str	r4, [sp, #28]
 8010014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010016:	2b00      	cmp	r3, #0
 8010018:	da03      	bge.n	8010022 <_dtoa_r+0x4aa>
 801001a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801001c:	2b00      	cmp	r3, #0
 801001e:	dc00      	bgt.n	8010022 <_dtoa_r+0x4aa>
 8010020:	e106      	b.n	8010230 <_dtoa_r+0x6b8>
 8010022:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010024:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010028:	9d08      	ldr	r5, [sp, #32]
 801002a:	3b01      	subs	r3, #1
 801002c:	195b      	adds	r3, r3, r5
 801002e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010030:	9a06      	ldr	r2, [sp, #24]
 8010032:	9b07      	ldr	r3, [sp, #28]
 8010034:	0030      	movs	r0, r6
 8010036:	0039      	movs	r1, r7
 8010038:	f7f1 fe72 	bl	8001d20 <__aeabi_ddiv>
 801003c:	f7f3 f93a 	bl	80032b4 <__aeabi_d2iz>
 8010040:	9009      	str	r0, [sp, #36]	@ 0x24
 8010042:	f7f3 f973 	bl	800332c <__aeabi_i2d>
 8010046:	9a06      	ldr	r2, [sp, #24]
 8010048:	9b07      	ldr	r3, [sp, #28]
 801004a:	f7f2 faad 	bl	80025a8 <__aeabi_dmul>
 801004e:	0002      	movs	r2, r0
 8010050:	000b      	movs	r3, r1
 8010052:	0030      	movs	r0, r6
 8010054:	0039      	movs	r1, r7
 8010056:	f7f2 fd6f 	bl	8002b38 <__aeabi_dsub>
 801005a:	002b      	movs	r3, r5
 801005c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801005e:	3501      	adds	r5, #1
 8010060:	3230      	adds	r2, #48	@ 0x30
 8010062:	701a      	strb	r2, [r3, #0]
 8010064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010066:	002c      	movs	r4, r5
 8010068:	429a      	cmp	r2, r3
 801006a:	d000      	beq.n	801006e <_dtoa_r+0x4f6>
 801006c:	e131      	b.n	80102d2 <_dtoa_r+0x75a>
 801006e:	0002      	movs	r2, r0
 8010070:	000b      	movs	r3, r1
 8010072:	f7f1 faf1 	bl	8001658 <__aeabi_dadd>
 8010076:	9a06      	ldr	r2, [sp, #24]
 8010078:	9b07      	ldr	r3, [sp, #28]
 801007a:	0006      	movs	r6, r0
 801007c:	000f      	movs	r7, r1
 801007e:	f7f0 f9ff 	bl	8000480 <__aeabi_dcmpgt>
 8010082:	2800      	cmp	r0, #0
 8010084:	d000      	beq.n	8010088 <_dtoa_r+0x510>
 8010086:	e10f      	b.n	80102a8 <_dtoa_r+0x730>
 8010088:	9a06      	ldr	r2, [sp, #24]
 801008a:	9b07      	ldr	r3, [sp, #28]
 801008c:	0030      	movs	r0, r6
 801008e:	0039      	movs	r1, r7
 8010090:	f7f0 f9dc 	bl	800044c <__aeabi_dcmpeq>
 8010094:	2800      	cmp	r0, #0
 8010096:	d003      	beq.n	80100a0 <_dtoa_r+0x528>
 8010098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801009a:	07dd      	lsls	r5, r3, #31
 801009c:	d500      	bpl.n	80100a0 <_dtoa_r+0x528>
 801009e:	e103      	b.n	80102a8 <_dtoa_r+0x730>
 80100a0:	9905      	ldr	r1, [sp, #20]
 80100a2:	9803      	ldr	r0, [sp, #12]
 80100a4:	f000 fca6 	bl	80109f4 <_Bfree>
 80100a8:	2300      	movs	r3, #0
 80100aa:	7023      	strb	r3, [r4, #0]
 80100ac:	9b04      	ldr	r3, [sp, #16]
 80100ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80100b0:	3301      	adds	r3, #1
 80100b2:	6013      	str	r3, [r2, #0]
 80100b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d100      	bne.n	80100bc <_dtoa_r+0x544>
 80100ba:	e5a7      	b.n	800fc0c <_dtoa_r+0x94>
 80100bc:	601c      	str	r4, [r3, #0]
 80100be:	e5a5      	b.n	800fc0c <_dtoa_r+0x94>
 80100c0:	423d      	tst	r5, r7
 80100c2:	d005      	beq.n	80100d0 <_dtoa_r+0x558>
 80100c4:	6832      	ldr	r2, [r6, #0]
 80100c6:	6873      	ldr	r3, [r6, #4]
 80100c8:	f7f2 fa6e 	bl	80025a8 <__aeabi_dmul>
 80100cc:	003b      	movs	r3, r7
 80100ce:	3401      	adds	r4, #1
 80100d0:	106d      	asrs	r5, r5, #1
 80100d2:	3608      	adds	r6, #8
 80100d4:	e736      	b.n	800ff44 <_dtoa_r+0x3cc>
 80100d6:	9b04      	ldr	r3, [sp, #16]
 80100d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80100da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100dc:	e75a      	b.n	800ff94 <_dtoa_r+0x41c>
 80100de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80100e0:	4b69      	ldr	r3, [pc, #420]	@ (8010288 <_dtoa_r+0x710>)
 80100e2:	3a01      	subs	r2, #1
 80100e4:	00d2      	lsls	r2, r2, #3
 80100e6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80100e8:	189b      	adds	r3, r3, r2
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	2900      	cmp	r1, #0
 80100f0:	d04c      	beq.n	801018c <_dtoa_r+0x614>
 80100f2:	2000      	movs	r0, #0
 80100f4:	496b      	ldr	r1, [pc, #428]	@ (80102a4 <_dtoa_r+0x72c>)
 80100f6:	f7f1 fe13 	bl	8001d20 <__aeabi_ddiv>
 80100fa:	0032      	movs	r2, r6
 80100fc:	003b      	movs	r3, r7
 80100fe:	f7f2 fd1b 	bl	8002b38 <__aeabi_dsub>
 8010102:	9a08      	ldr	r2, [sp, #32]
 8010104:	0006      	movs	r6, r0
 8010106:	4694      	mov	ip, r2
 8010108:	000f      	movs	r7, r1
 801010a:	9b08      	ldr	r3, [sp, #32]
 801010c:	9316      	str	r3, [sp, #88]	@ 0x58
 801010e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010110:	4463      	add	r3, ip
 8010112:	9311      	str	r3, [sp, #68]	@ 0x44
 8010114:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010116:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010118:	f7f3 f8cc 	bl	80032b4 <__aeabi_d2iz>
 801011c:	0005      	movs	r5, r0
 801011e:	f7f3 f905 	bl	800332c <__aeabi_i2d>
 8010122:	0002      	movs	r2, r0
 8010124:	000b      	movs	r3, r1
 8010126:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801012a:	f7f2 fd05 	bl	8002b38 <__aeabi_dsub>
 801012e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010130:	3530      	adds	r5, #48	@ 0x30
 8010132:	1c5c      	adds	r4, r3, #1
 8010134:	701d      	strb	r5, [r3, #0]
 8010136:	0032      	movs	r2, r6
 8010138:	003b      	movs	r3, r7
 801013a:	900a      	str	r0, [sp, #40]	@ 0x28
 801013c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801013e:	f7f0 f98b 	bl	8000458 <__aeabi_dcmplt>
 8010142:	2800      	cmp	r0, #0
 8010144:	d16a      	bne.n	801021c <_dtoa_r+0x6a4>
 8010146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801014a:	2000      	movs	r0, #0
 801014c:	4950      	ldr	r1, [pc, #320]	@ (8010290 <_dtoa_r+0x718>)
 801014e:	f7f2 fcf3 	bl	8002b38 <__aeabi_dsub>
 8010152:	0032      	movs	r2, r6
 8010154:	003b      	movs	r3, r7
 8010156:	f7f0 f97f 	bl	8000458 <__aeabi_dcmplt>
 801015a:	2800      	cmp	r0, #0
 801015c:	d000      	beq.n	8010160 <_dtoa_r+0x5e8>
 801015e:	e0a5      	b.n	80102ac <_dtoa_r+0x734>
 8010160:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010162:	42a3      	cmp	r3, r4
 8010164:	d100      	bne.n	8010168 <_dtoa_r+0x5f0>
 8010166:	e742      	b.n	800ffee <_dtoa_r+0x476>
 8010168:	2200      	movs	r2, #0
 801016a:	0030      	movs	r0, r6
 801016c:	0039      	movs	r1, r7
 801016e:	4b49      	ldr	r3, [pc, #292]	@ (8010294 <_dtoa_r+0x71c>)
 8010170:	f7f2 fa1a 	bl	80025a8 <__aeabi_dmul>
 8010174:	2200      	movs	r2, #0
 8010176:	0006      	movs	r6, r0
 8010178:	000f      	movs	r7, r1
 801017a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801017c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801017e:	4b45      	ldr	r3, [pc, #276]	@ (8010294 <_dtoa_r+0x71c>)
 8010180:	f7f2 fa12 	bl	80025a8 <__aeabi_dmul>
 8010184:	9416      	str	r4, [sp, #88]	@ 0x58
 8010186:	900a      	str	r0, [sp, #40]	@ 0x28
 8010188:	910b      	str	r1, [sp, #44]	@ 0x2c
 801018a:	e7c3      	b.n	8010114 <_dtoa_r+0x59c>
 801018c:	0030      	movs	r0, r6
 801018e:	0039      	movs	r1, r7
 8010190:	f7f2 fa0a 	bl	80025a8 <__aeabi_dmul>
 8010194:	9d08      	ldr	r5, [sp, #32]
 8010196:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010198:	002b      	movs	r3, r5
 801019a:	4694      	mov	ip, r2
 801019c:	9016      	str	r0, [sp, #88]	@ 0x58
 801019e:	9117      	str	r1, [sp, #92]	@ 0x5c
 80101a0:	4463      	add	r3, ip
 80101a2:	9319      	str	r3, [sp, #100]	@ 0x64
 80101a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80101a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101a8:	f7f3 f884 	bl	80032b4 <__aeabi_d2iz>
 80101ac:	0004      	movs	r4, r0
 80101ae:	f7f3 f8bd 	bl	800332c <__aeabi_i2d>
 80101b2:	000b      	movs	r3, r1
 80101b4:	0002      	movs	r2, r0
 80101b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80101b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101ba:	f7f2 fcbd 	bl	8002b38 <__aeabi_dsub>
 80101be:	3430      	adds	r4, #48	@ 0x30
 80101c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101c2:	702c      	strb	r4, [r5, #0]
 80101c4:	3501      	adds	r5, #1
 80101c6:	0006      	movs	r6, r0
 80101c8:	000f      	movs	r7, r1
 80101ca:	42ab      	cmp	r3, r5
 80101cc:	d129      	bne.n	8010222 <_dtoa_r+0x6aa>
 80101ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80101d0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80101d2:	9b08      	ldr	r3, [sp, #32]
 80101d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80101d6:	469c      	mov	ip, r3
 80101d8:	2200      	movs	r2, #0
 80101da:	4b32      	ldr	r3, [pc, #200]	@ (80102a4 <_dtoa_r+0x72c>)
 80101dc:	4464      	add	r4, ip
 80101de:	f7f1 fa3b 	bl	8001658 <__aeabi_dadd>
 80101e2:	0002      	movs	r2, r0
 80101e4:	000b      	movs	r3, r1
 80101e6:	0030      	movs	r0, r6
 80101e8:	0039      	movs	r1, r7
 80101ea:	f7f0 f949 	bl	8000480 <__aeabi_dcmpgt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d15c      	bne.n	80102ac <_dtoa_r+0x734>
 80101f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80101f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80101f6:	2000      	movs	r0, #0
 80101f8:	492a      	ldr	r1, [pc, #168]	@ (80102a4 <_dtoa_r+0x72c>)
 80101fa:	f7f2 fc9d 	bl	8002b38 <__aeabi_dsub>
 80101fe:	0002      	movs	r2, r0
 8010200:	000b      	movs	r3, r1
 8010202:	0030      	movs	r0, r6
 8010204:	0039      	movs	r1, r7
 8010206:	f7f0 f927 	bl	8000458 <__aeabi_dcmplt>
 801020a:	2800      	cmp	r0, #0
 801020c:	d100      	bne.n	8010210 <_dtoa_r+0x698>
 801020e:	e6ee      	b.n	800ffee <_dtoa_r+0x476>
 8010210:	0023      	movs	r3, r4
 8010212:	3c01      	subs	r4, #1
 8010214:	7822      	ldrb	r2, [r4, #0]
 8010216:	2a30      	cmp	r2, #48	@ 0x30
 8010218:	d0fa      	beq.n	8010210 <_dtoa_r+0x698>
 801021a:	001c      	movs	r4, r3
 801021c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801021e:	9304      	str	r3, [sp, #16]
 8010220:	e73e      	b.n	80100a0 <_dtoa_r+0x528>
 8010222:	2200      	movs	r2, #0
 8010224:	4b1b      	ldr	r3, [pc, #108]	@ (8010294 <_dtoa_r+0x71c>)
 8010226:	f7f2 f9bf 	bl	80025a8 <__aeabi_dmul>
 801022a:	900a      	str	r0, [sp, #40]	@ 0x28
 801022c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801022e:	e7b9      	b.n	80101a4 <_dtoa_r+0x62c>
 8010230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10c      	bne.n	8010250 <_dtoa_r+0x6d8>
 8010236:	9806      	ldr	r0, [sp, #24]
 8010238:	9907      	ldr	r1, [sp, #28]
 801023a:	2200      	movs	r2, #0
 801023c:	4b18      	ldr	r3, [pc, #96]	@ (80102a0 <_dtoa_r+0x728>)
 801023e:	f7f2 f9b3 	bl	80025a8 <__aeabi_dmul>
 8010242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010246:	f7f0 f925 	bl	8000494 <__aeabi_dcmpge>
 801024a:	2800      	cmp	r0, #0
 801024c:	d100      	bne.n	8010250 <_dtoa_r+0x6d8>
 801024e:	e164      	b.n	801051a <_dtoa_r+0x9a2>
 8010250:	2600      	movs	r6, #0
 8010252:	0037      	movs	r7, r6
 8010254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010256:	9c08      	ldr	r4, [sp, #32]
 8010258:	43db      	mvns	r3, r3
 801025a:	930c      	str	r3, [sp, #48]	@ 0x30
 801025c:	2300      	movs	r3, #0
 801025e:	9304      	str	r3, [sp, #16]
 8010260:	0031      	movs	r1, r6
 8010262:	9803      	ldr	r0, [sp, #12]
 8010264:	f000 fbc6 	bl	80109f4 <_Bfree>
 8010268:	2f00      	cmp	r7, #0
 801026a:	d0d7      	beq.n	801021c <_dtoa_r+0x6a4>
 801026c:	9b04      	ldr	r3, [sp, #16]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d005      	beq.n	801027e <_dtoa_r+0x706>
 8010272:	42bb      	cmp	r3, r7
 8010274:	d003      	beq.n	801027e <_dtoa_r+0x706>
 8010276:	0019      	movs	r1, r3
 8010278:	9803      	ldr	r0, [sp, #12]
 801027a:	f000 fbbb 	bl	80109f4 <_Bfree>
 801027e:	0039      	movs	r1, r7
 8010280:	9803      	ldr	r0, [sp, #12]
 8010282:	f000 fbb7 	bl	80109f4 <_Bfree>
 8010286:	e7c9      	b.n	801021c <_dtoa_r+0x6a4>
 8010288:	08013d00 	.word	0x08013d00
 801028c:	08013cd8 	.word	0x08013cd8
 8010290:	3ff00000 	.word	0x3ff00000
 8010294:	40240000 	.word	0x40240000
 8010298:	401c0000 	.word	0x401c0000
 801029c:	fcc00000 	.word	0xfcc00000
 80102a0:	40140000 	.word	0x40140000
 80102a4:	3fe00000 	.word	0x3fe00000
 80102a8:	9b04      	ldr	r3, [sp, #16]
 80102aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80102ac:	0023      	movs	r3, r4
 80102ae:	001c      	movs	r4, r3
 80102b0:	3b01      	subs	r3, #1
 80102b2:	781a      	ldrb	r2, [r3, #0]
 80102b4:	2a39      	cmp	r2, #57	@ 0x39
 80102b6:	d108      	bne.n	80102ca <_dtoa_r+0x752>
 80102b8:	9a08      	ldr	r2, [sp, #32]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d1f7      	bne.n	80102ae <_dtoa_r+0x736>
 80102be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80102c0:	9908      	ldr	r1, [sp, #32]
 80102c2:	3201      	adds	r2, #1
 80102c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80102c6:	2230      	movs	r2, #48	@ 0x30
 80102c8:	700a      	strb	r2, [r1, #0]
 80102ca:	781a      	ldrb	r2, [r3, #0]
 80102cc:	3201      	adds	r2, #1
 80102ce:	701a      	strb	r2, [r3, #0]
 80102d0:	e7a4      	b.n	801021c <_dtoa_r+0x6a4>
 80102d2:	2200      	movs	r2, #0
 80102d4:	4bc6      	ldr	r3, [pc, #792]	@ (80105f0 <_dtoa_r+0xa78>)
 80102d6:	f7f2 f967 	bl	80025a8 <__aeabi_dmul>
 80102da:	2200      	movs	r2, #0
 80102dc:	2300      	movs	r3, #0
 80102de:	0006      	movs	r6, r0
 80102e0:	000f      	movs	r7, r1
 80102e2:	f7f0 f8b3 	bl	800044c <__aeabi_dcmpeq>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d100      	bne.n	80102ec <_dtoa_r+0x774>
 80102ea:	e6a1      	b.n	8010030 <_dtoa_r+0x4b8>
 80102ec:	e6d8      	b.n	80100a0 <_dtoa_r+0x528>
 80102ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80102f0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80102f2:	9c06      	ldr	r4, [sp, #24]
 80102f4:	2f00      	cmp	r7, #0
 80102f6:	d014      	beq.n	8010322 <_dtoa_r+0x7aa>
 80102f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80102fa:	2a01      	cmp	r2, #1
 80102fc:	dd00      	ble.n	8010300 <_dtoa_r+0x788>
 80102fe:	e0c8      	b.n	8010492 <_dtoa_r+0x91a>
 8010300:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010302:	2a00      	cmp	r2, #0
 8010304:	d100      	bne.n	8010308 <_dtoa_r+0x790>
 8010306:	e0be      	b.n	8010486 <_dtoa_r+0x90e>
 8010308:	4aba      	ldr	r2, [pc, #744]	@ (80105f4 <_dtoa_r+0xa7c>)
 801030a:	189b      	adds	r3, r3, r2
 801030c:	9a06      	ldr	r2, [sp, #24]
 801030e:	2101      	movs	r1, #1
 8010310:	18d2      	adds	r2, r2, r3
 8010312:	9206      	str	r2, [sp, #24]
 8010314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010316:	9803      	ldr	r0, [sp, #12]
 8010318:	18d3      	adds	r3, r2, r3
 801031a:	930d      	str	r3, [sp, #52]	@ 0x34
 801031c:	f000 fc6e 	bl	8010bfc <__i2b>
 8010320:	0007      	movs	r7, r0
 8010322:	2c00      	cmp	r4, #0
 8010324:	d00e      	beq.n	8010344 <_dtoa_r+0x7cc>
 8010326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010328:	2b00      	cmp	r3, #0
 801032a:	dd0b      	ble.n	8010344 <_dtoa_r+0x7cc>
 801032c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801032e:	0023      	movs	r3, r4
 8010330:	4294      	cmp	r4, r2
 8010332:	dd00      	ble.n	8010336 <_dtoa_r+0x7be>
 8010334:	0013      	movs	r3, r2
 8010336:	9a06      	ldr	r2, [sp, #24]
 8010338:	1ae4      	subs	r4, r4, r3
 801033a:	1ad2      	subs	r2, r2, r3
 801033c:	9206      	str	r2, [sp, #24]
 801033e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	930d      	str	r3, [sp, #52]	@ 0x34
 8010344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010346:	2b00      	cmp	r3, #0
 8010348:	d01f      	beq.n	801038a <_dtoa_r+0x812>
 801034a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801034c:	2b00      	cmp	r3, #0
 801034e:	d100      	bne.n	8010352 <_dtoa_r+0x7da>
 8010350:	e0b5      	b.n	80104be <_dtoa_r+0x946>
 8010352:	2d00      	cmp	r5, #0
 8010354:	d010      	beq.n	8010378 <_dtoa_r+0x800>
 8010356:	0039      	movs	r1, r7
 8010358:	002a      	movs	r2, r5
 801035a:	9803      	ldr	r0, [sp, #12]
 801035c:	f000 fd18 	bl	8010d90 <__pow5mult>
 8010360:	9a05      	ldr	r2, [sp, #20]
 8010362:	0001      	movs	r1, r0
 8010364:	0007      	movs	r7, r0
 8010366:	9803      	ldr	r0, [sp, #12]
 8010368:	f000 fc60 	bl	8010c2c <__multiply>
 801036c:	0006      	movs	r6, r0
 801036e:	9905      	ldr	r1, [sp, #20]
 8010370:	9803      	ldr	r0, [sp, #12]
 8010372:	f000 fb3f 	bl	80109f4 <_Bfree>
 8010376:	9605      	str	r6, [sp, #20]
 8010378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801037a:	1b5a      	subs	r2, r3, r5
 801037c:	42ab      	cmp	r3, r5
 801037e:	d004      	beq.n	801038a <_dtoa_r+0x812>
 8010380:	9905      	ldr	r1, [sp, #20]
 8010382:	9803      	ldr	r0, [sp, #12]
 8010384:	f000 fd04 	bl	8010d90 <__pow5mult>
 8010388:	9005      	str	r0, [sp, #20]
 801038a:	2101      	movs	r1, #1
 801038c:	9803      	ldr	r0, [sp, #12]
 801038e:	f000 fc35 	bl	8010bfc <__i2b>
 8010392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010394:	0006      	movs	r6, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d100      	bne.n	801039c <_dtoa_r+0x824>
 801039a:	e1bc      	b.n	8010716 <_dtoa_r+0xb9e>
 801039c:	001a      	movs	r2, r3
 801039e:	0001      	movs	r1, r0
 80103a0:	9803      	ldr	r0, [sp, #12]
 80103a2:	f000 fcf5 	bl	8010d90 <__pow5mult>
 80103a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80103a8:	0006      	movs	r6, r0
 80103aa:	2500      	movs	r5, #0
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	dc16      	bgt.n	80103de <_dtoa_r+0x866>
 80103b0:	2500      	movs	r5, #0
 80103b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103b4:	42ab      	cmp	r3, r5
 80103b6:	d10e      	bne.n	80103d6 <_dtoa_r+0x85e>
 80103b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103ba:	031b      	lsls	r3, r3, #12
 80103bc:	42ab      	cmp	r3, r5
 80103be:	d10a      	bne.n	80103d6 <_dtoa_r+0x85e>
 80103c0:	4b8d      	ldr	r3, [pc, #564]	@ (80105f8 <_dtoa_r+0xa80>)
 80103c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103c4:	4213      	tst	r3, r2
 80103c6:	d006      	beq.n	80103d6 <_dtoa_r+0x85e>
 80103c8:	9b06      	ldr	r3, [sp, #24]
 80103ca:	3501      	adds	r5, #1
 80103cc:	3301      	adds	r3, #1
 80103ce:	9306      	str	r3, [sp, #24]
 80103d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103d2:	3301      	adds	r3, #1
 80103d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80103d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103d8:	2001      	movs	r0, #1
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d008      	beq.n	80103f0 <_dtoa_r+0x878>
 80103de:	6933      	ldr	r3, [r6, #16]
 80103e0:	3303      	adds	r3, #3
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	18f3      	adds	r3, r6, r3
 80103e6:	6858      	ldr	r0, [r3, #4]
 80103e8:	f000 fbb8 	bl	8010b5c <__hi0bits>
 80103ec:	2320      	movs	r3, #32
 80103ee:	1a18      	subs	r0, r3, r0
 80103f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103f2:	1818      	adds	r0, r3, r0
 80103f4:	0002      	movs	r2, r0
 80103f6:	231f      	movs	r3, #31
 80103f8:	401a      	ands	r2, r3
 80103fa:	4218      	tst	r0, r3
 80103fc:	d065      	beq.n	80104ca <_dtoa_r+0x952>
 80103fe:	3301      	adds	r3, #1
 8010400:	1a9b      	subs	r3, r3, r2
 8010402:	2b04      	cmp	r3, #4
 8010404:	dd5d      	ble.n	80104c2 <_dtoa_r+0x94a>
 8010406:	231c      	movs	r3, #28
 8010408:	1a9b      	subs	r3, r3, r2
 801040a:	9a06      	ldr	r2, [sp, #24]
 801040c:	18e4      	adds	r4, r4, r3
 801040e:	18d2      	adds	r2, r2, r3
 8010410:	9206      	str	r2, [sp, #24]
 8010412:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010414:	18d3      	adds	r3, r2, r3
 8010416:	930d      	str	r3, [sp, #52]	@ 0x34
 8010418:	9b06      	ldr	r3, [sp, #24]
 801041a:	2b00      	cmp	r3, #0
 801041c:	dd05      	ble.n	801042a <_dtoa_r+0x8b2>
 801041e:	001a      	movs	r2, r3
 8010420:	9905      	ldr	r1, [sp, #20]
 8010422:	9803      	ldr	r0, [sp, #12]
 8010424:	f000 fd10 	bl	8010e48 <__lshift>
 8010428:	9005      	str	r0, [sp, #20]
 801042a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd05      	ble.n	801043c <_dtoa_r+0x8c4>
 8010430:	0031      	movs	r1, r6
 8010432:	001a      	movs	r2, r3
 8010434:	9803      	ldr	r0, [sp, #12]
 8010436:	f000 fd07 	bl	8010e48 <__lshift>
 801043a:	0006      	movs	r6, r0
 801043c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801043e:	2b00      	cmp	r3, #0
 8010440:	d045      	beq.n	80104ce <_dtoa_r+0x956>
 8010442:	0031      	movs	r1, r6
 8010444:	9805      	ldr	r0, [sp, #20]
 8010446:	f000 fd6b 	bl	8010f20 <__mcmp>
 801044a:	2800      	cmp	r0, #0
 801044c:	da3f      	bge.n	80104ce <_dtoa_r+0x956>
 801044e:	9b04      	ldr	r3, [sp, #16]
 8010450:	220a      	movs	r2, #10
 8010452:	3b01      	subs	r3, #1
 8010454:	930c      	str	r3, [sp, #48]	@ 0x30
 8010456:	9905      	ldr	r1, [sp, #20]
 8010458:	2300      	movs	r3, #0
 801045a:	9803      	ldr	r0, [sp, #12]
 801045c:	f000 faee 	bl	8010a3c <__multadd>
 8010460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010462:	9005      	str	r0, [sp, #20]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d100      	bne.n	801046a <_dtoa_r+0x8f2>
 8010468:	e15c      	b.n	8010724 <_dtoa_r+0xbac>
 801046a:	2300      	movs	r3, #0
 801046c:	0039      	movs	r1, r7
 801046e:	220a      	movs	r2, #10
 8010470:	9803      	ldr	r0, [sp, #12]
 8010472:	f000 fae3 	bl	8010a3c <__multadd>
 8010476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010478:	0007      	movs	r7, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	dc55      	bgt.n	801052a <_dtoa_r+0x9b2>
 801047e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010480:	2b02      	cmp	r3, #2
 8010482:	dc2d      	bgt.n	80104e0 <_dtoa_r+0x968>
 8010484:	e051      	b.n	801052a <_dtoa_r+0x9b2>
 8010486:	2336      	movs	r3, #54	@ 0x36
 8010488:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801048a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801048c:	9c06      	ldr	r4, [sp, #24]
 801048e:	1a9b      	subs	r3, r3, r2
 8010490:	e73c      	b.n	801030c <_dtoa_r+0x794>
 8010492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010494:	1e5d      	subs	r5, r3, #1
 8010496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010498:	42ab      	cmp	r3, r5
 801049a:	db08      	blt.n	80104ae <_dtoa_r+0x936>
 801049c:	1b5d      	subs	r5, r3, r5
 801049e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104a0:	9c06      	ldr	r4, [sp, #24]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	db00      	blt.n	80104a8 <_dtoa_r+0x930>
 80104a6:	e731      	b.n	801030c <_dtoa_r+0x794>
 80104a8:	1ae4      	subs	r4, r4, r3
 80104aa:	2300      	movs	r3, #0
 80104ac:	e72e      	b.n	801030c <_dtoa_r+0x794>
 80104ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80104b2:	1aeb      	subs	r3, r5, r3
 80104b4:	18d3      	adds	r3, r2, r3
 80104b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80104b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80104ba:	2500      	movs	r5, #0
 80104bc:	e7ef      	b.n	801049e <_dtoa_r+0x926>
 80104be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104c0:	e75e      	b.n	8010380 <_dtoa_r+0x808>
 80104c2:	2b04      	cmp	r3, #4
 80104c4:	d0a8      	beq.n	8010418 <_dtoa_r+0x8a0>
 80104c6:	331c      	adds	r3, #28
 80104c8:	e79f      	b.n	801040a <_dtoa_r+0x892>
 80104ca:	0013      	movs	r3, r2
 80104cc:	e7fb      	b.n	80104c6 <_dtoa_r+0x94e>
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80104d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	dc23      	bgt.n	8010522 <_dtoa_r+0x9aa>
 80104da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80104dc:	2b02      	cmp	r3, #2
 80104de:	dd20      	ble.n	8010522 <_dtoa_r+0x9aa>
 80104e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d000      	beq.n	80104e8 <_dtoa_r+0x970>
 80104e6:	e6b5      	b.n	8010254 <_dtoa_r+0x6dc>
 80104e8:	0031      	movs	r1, r6
 80104ea:	2205      	movs	r2, #5
 80104ec:	9803      	ldr	r0, [sp, #12]
 80104ee:	f000 faa5 	bl	8010a3c <__multadd>
 80104f2:	0006      	movs	r6, r0
 80104f4:	0001      	movs	r1, r0
 80104f6:	9805      	ldr	r0, [sp, #20]
 80104f8:	f000 fd12 	bl	8010f20 <__mcmp>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	dc00      	bgt.n	8010502 <_dtoa_r+0x98a>
 8010500:	e6a8      	b.n	8010254 <_dtoa_r+0x6dc>
 8010502:	9b08      	ldr	r3, [sp, #32]
 8010504:	9a08      	ldr	r2, [sp, #32]
 8010506:	1c5c      	adds	r4, r3, #1
 8010508:	2331      	movs	r3, #49	@ 0x31
 801050a:	7013      	strb	r3, [r2, #0]
 801050c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801050e:	3301      	adds	r3, #1
 8010510:	930c      	str	r3, [sp, #48]	@ 0x30
 8010512:	e6a3      	b.n	801025c <_dtoa_r+0x6e4>
 8010514:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010516:	0037      	movs	r7, r6
 8010518:	e7f3      	b.n	8010502 <_dtoa_r+0x98a>
 801051a:	9b04      	ldr	r3, [sp, #16]
 801051c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801051e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010520:	e7f9      	b.n	8010516 <_dtoa_r+0x99e>
 8010522:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	d100      	bne.n	801052a <_dtoa_r+0x9b2>
 8010528:	e100      	b.n	801072c <_dtoa_r+0xbb4>
 801052a:	2c00      	cmp	r4, #0
 801052c:	dd05      	ble.n	801053a <_dtoa_r+0x9c2>
 801052e:	0039      	movs	r1, r7
 8010530:	0022      	movs	r2, r4
 8010532:	9803      	ldr	r0, [sp, #12]
 8010534:	f000 fc88 	bl	8010e48 <__lshift>
 8010538:	0007      	movs	r7, r0
 801053a:	0038      	movs	r0, r7
 801053c:	2d00      	cmp	r5, #0
 801053e:	d018      	beq.n	8010572 <_dtoa_r+0x9fa>
 8010540:	6879      	ldr	r1, [r7, #4]
 8010542:	9803      	ldr	r0, [sp, #12]
 8010544:	f000 fa12 	bl	801096c <_Balloc>
 8010548:	1e04      	subs	r4, r0, #0
 801054a:	d105      	bne.n	8010558 <_dtoa_r+0x9e0>
 801054c:	0022      	movs	r2, r4
 801054e:	4b2b      	ldr	r3, [pc, #172]	@ (80105fc <_dtoa_r+0xa84>)
 8010550:	482b      	ldr	r0, [pc, #172]	@ (8010600 <_dtoa_r+0xa88>)
 8010552:	492c      	ldr	r1, [pc, #176]	@ (8010604 <_dtoa_r+0xa8c>)
 8010554:	f7ff fb25 	bl	800fba2 <_dtoa_r+0x2a>
 8010558:	0039      	movs	r1, r7
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	310c      	adds	r1, #12
 801055e:	3202      	adds	r2, #2
 8010560:	0092      	lsls	r2, r2, #2
 8010562:	300c      	adds	r0, #12
 8010564:	f7ff fa6c 	bl	800fa40 <memcpy>
 8010568:	2201      	movs	r2, #1
 801056a:	0021      	movs	r1, r4
 801056c:	9803      	ldr	r0, [sp, #12]
 801056e:	f000 fc6b 	bl	8010e48 <__lshift>
 8010572:	9b08      	ldr	r3, [sp, #32]
 8010574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010576:	9306      	str	r3, [sp, #24]
 8010578:	3b01      	subs	r3, #1
 801057a:	189b      	adds	r3, r3, r2
 801057c:	2201      	movs	r2, #1
 801057e:	9704      	str	r7, [sp, #16]
 8010580:	0007      	movs	r7, r0
 8010582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010586:	4013      	ands	r3, r2
 8010588:	930e      	str	r3, [sp, #56]	@ 0x38
 801058a:	0031      	movs	r1, r6
 801058c:	9805      	ldr	r0, [sp, #20]
 801058e:	f7ff fa65 	bl	800fa5c <quorem>
 8010592:	9904      	ldr	r1, [sp, #16]
 8010594:	0005      	movs	r5, r0
 8010596:	900a      	str	r0, [sp, #40]	@ 0x28
 8010598:	9805      	ldr	r0, [sp, #20]
 801059a:	f000 fcc1 	bl	8010f20 <__mcmp>
 801059e:	003a      	movs	r2, r7
 80105a0:	900d      	str	r0, [sp, #52]	@ 0x34
 80105a2:	0031      	movs	r1, r6
 80105a4:	9803      	ldr	r0, [sp, #12]
 80105a6:	f000 fcd7 	bl	8010f58 <__mdiff>
 80105aa:	2201      	movs	r2, #1
 80105ac:	68c3      	ldr	r3, [r0, #12]
 80105ae:	0004      	movs	r4, r0
 80105b0:	3530      	adds	r5, #48	@ 0x30
 80105b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d104      	bne.n	80105c2 <_dtoa_r+0xa4a>
 80105b8:	0001      	movs	r1, r0
 80105ba:	9805      	ldr	r0, [sp, #20]
 80105bc:	f000 fcb0 	bl	8010f20 <__mcmp>
 80105c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80105c2:	0021      	movs	r1, r4
 80105c4:	9803      	ldr	r0, [sp, #12]
 80105c6:	f000 fa15 	bl	80109f4 <_Bfree>
 80105ca:	9b06      	ldr	r3, [sp, #24]
 80105cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105ce:	1c5c      	adds	r4, r3, #1
 80105d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80105d2:	4313      	orrs	r3, r2
 80105d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105d6:	4313      	orrs	r3, r2
 80105d8:	d116      	bne.n	8010608 <_dtoa_r+0xa90>
 80105da:	2d39      	cmp	r5, #57	@ 0x39
 80105dc:	d02f      	beq.n	801063e <_dtoa_r+0xac6>
 80105de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	dd01      	ble.n	80105e8 <_dtoa_r+0xa70>
 80105e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80105e6:	3531      	adds	r5, #49	@ 0x31
 80105e8:	9b06      	ldr	r3, [sp, #24]
 80105ea:	701d      	strb	r5, [r3, #0]
 80105ec:	e638      	b.n	8010260 <_dtoa_r+0x6e8>
 80105ee:	46c0      	nop			@ (mov r8, r8)
 80105f0:	40240000 	.word	0x40240000
 80105f4:	00000433 	.word	0x00000433
 80105f8:	7ff00000 	.word	0x7ff00000
 80105fc:	08013c5d 	.word	0x08013c5d
 8010600:	08013c05 	.word	0x08013c05
 8010604:	000002ef 	.word	0x000002ef
 8010608:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801060a:	2b00      	cmp	r3, #0
 801060c:	db04      	blt.n	8010618 <_dtoa_r+0xaa0>
 801060e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010610:	4313      	orrs	r3, r2
 8010612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010614:	4313      	orrs	r3, r2
 8010616:	d11e      	bne.n	8010656 <_dtoa_r+0xade>
 8010618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801061a:	2b00      	cmp	r3, #0
 801061c:	dde4      	ble.n	80105e8 <_dtoa_r+0xa70>
 801061e:	9905      	ldr	r1, [sp, #20]
 8010620:	2201      	movs	r2, #1
 8010622:	9803      	ldr	r0, [sp, #12]
 8010624:	f000 fc10 	bl	8010e48 <__lshift>
 8010628:	0031      	movs	r1, r6
 801062a:	9005      	str	r0, [sp, #20]
 801062c:	f000 fc78 	bl	8010f20 <__mcmp>
 8010630:	2800      	cmp	r0, #0
 8010632:	dc02      	bgt.n	801063a <_dtoa_r+0xac2>
 8010634:	d1d8      	bne.n	80105e8 <_dtoa_r+0xa70>
 8010636:	07eb      	lsls	r3, r5, #31
 8010638:	d5d6      	bpl.n	80105e8 <_dtoa_r+0xa70>
 801063a:	2d39      	cmp	r5, #57	@ 0x39
 801063c:	d1d2      	bne.n	80105e4 <_dtoa_r+0xa6c>
 801063e:	2339      	movs	r3, #57	@ 0x39
 8010640:	9a06      	ldr	r2, [sp, #24]
 8010642:	7013      	strb	r3, [r2, #0]
 8010644:	0023      	movs	r3, r4
 8010646:	001c      	movs	r4, r3
 8010648:	3b01      	subs	r3, #1
 801064a:	781a      	ldrb	r2, [r3, #0]
 801064c:	2a39      	cmp	r2, #57	@ 0x39
 801064e:	d04f      	beq.n	80106f0 <_dtoa_r+0xb78>
 8010650:	3201      	adds	r2, #1
 8010652:	701a      	strb	r2, [r3, #0]
 8010654:	e604      	b.n	8010260 <_dtoa_r+0x6e8>
 8010656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010658:	2b00      	cmp	r3, #0
 801065a:	dd03      	ble.n	8010664 <_dtoa_r+0xaec>
 801065c:	2d39      	cmp	r5, #57	@ 0x39
 801065e:	d0ee      	beq.n	801063e <_dtoa_r+0xac6>
 8010660:	3501      	adds	r5, #1
 8010662:	e7c1      	b.n	80105e8 <_dtoa_r+0xa70>
 8010664:	9b06      	ldr	r3, [sp, #24]
 8010666:	9a06      	ldr	r2, [sp, #24]
 8010668:	701d      	strb	r5, [r3, #0]
 801066a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801066c:	4293      	cmp	r3, r2
 801066e:	d02a      	beq.n	80106c6 <_dtoa_r+0xb4e>
 8010670:	2300      	movs	r3, #0
 8010672:	220a      	movs	r2, #10
 8010674:	9905      	ldr	r1, [sp, #20]
 8010676:	9803      	ldr	r0, [sp, #12]
 8010678:	f000 f9e0 	bl	8010a3c <__multadd>
 801067c:	9b04      	ldr	r3, [sp, #16]
 801067e:	9005      	str	r0, [sp, #20]
 8010680:	42bb      	cmp	r3, r7
 8010682:	d109      	bne.n	8010698 <_dtoa_r+0xb20>
 8010684:	2300      	movs	r3, #0
 8010686:	220a      	movs	r2, #10
 8010688:	9904      	ldr	r1, [sp, #16]
 801068a:	9803      	ldr	r0, [sp, #12]
 801068c:	f000 f9d6 	bl	8010a3c <__multadd>
 8010690:	9004      	str	r0, [sp, #16]
 8010692:	0007      	movs	r7, r0
 8010694:	9406      	str	r4, [sp, #24]
 8010696:	e778      	b.n	801058a <_dtoa_r+0xa12>
 8010698:	9904      	ldr	r1, [sp, #16]
 801069a:	2300      	movs	r3, #0
 801069c:	220a      	movs	r2, #10
 801069e:	9803      	ldr	r0, [sp, #12]
 80106a0:	f000 f9cc 	bl	8010a3c <__multadd>
 80106a4:	2300      	movs	r3, #0
 80106a6:	9004      	str	r0, [sp, #16]
 80106a8:	220a      	movs	r2, #10
 80106aa:	0039      	movs	r1, r7
 80106ac:	9803      	ldr	r0, [sp, #12]
 80106ae:	f000 f9c5 	bl	8010a3c <__multadd>
 80106b2:	e7ee      	b.n	8010692 <_dtoa_r+0xb1a>
 80106b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106b6:	2401      	movs	r4, #1
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	dd00      	ble.n	80106be <_dtoa_r+0xb46>
 80106bc:	001c      	movs	r4, r3
 80106be:	9b08      	ldr	r3, [sp, #32]
 80106c0:	191c      	adds	r4, r3, r4
 80106c2:	2300      	movs	r3, #0
 80106c4:	9304      	str	r3, [sp, #16]
 80106c6:	9905      	ldr	r1, [sp, #20]
 80106c8:	2201      	movs	r2, #1
 80106ca:	9803      	ldr	r0, [sp, #12]
 80106cc:	f000 fbbc 	bl	8010e48 <__lshift>
 80106d0:	0031      	movs	r1, r6
 80106d2:	9005      	str	r0, [sp, #20]
 80106d4:	f000 fc24 	bl	8010f20 <__mcmp>
 80106d8:	2800      	cmp	r0, #0
 80106da:	dcb3      	bgt.n	8010644 <_dtoa_r+0xacc>
 80106dc:	d101      	bne.n	80106e2 <_dtoa_r+0xb6a>
 80106de:	07ed      	lsls	r5, r5, #31
 80106e0:	d4b0      	bmi.n	8010644 <_dtoa_r+0xacc>
 80106e2:	0023      	movs	r3, r4
 80106e4:	001c      	movs	r4, r3
 80106e6:	3b01      	subs	r3, #1
 80106e8:	781a      	ldrb	r2, [r3, #0]
 80106ea:	2a30      	cmp	r2, #48	@ 0x30
 80106ec:	d0fa      	beq.n	80106e4 <_dtoa_r+0xb6c>
 80106ee:	e5b7      	b.n	8010260 <_dtoa_r+0x6e8>
 80106f0:	9a08      	ldr	r2, [sp, #32]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d1a7      	bne.n	8010646 <_dtoa_r+0xace>
 80106f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106f8:	3301      	adds	r3, #1
 80106fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80106fc:	2331      	movs	r3, #49	@ 0x31
 80106fe:	7013      	strb	r3, [r2, #0]
 8010700:	e5ae      	b.n	8010260 <_dtoa_r+0x6e8>
 8010702:	4b15      	ldr	r3, [pc, #84]	@ (8010758 <_dtoa_r+0xbe0>)
 8010704:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010706:	9308      	str	r3, [sp, #32]
 8010708:	4b14      	ldr	r3, [pc, #80]	@ (801075c <_dtoa_r+0xbe4>)
 801070a:	2a00      	cmp	r2, #0
 801070c:	d001      	beq.n	8010712 <_dtoa_r+0xb9a>
 801070e:	f7ff fa7b 	bl	800fc08 <_dtoa_r+0x90>
 8010712:	f7ff fa7b 	bl	800fc0c <_dtoa_r+0x94>
 8010716:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010718:	2b01      	cmp	r3, #1
 801071a:	dc00      	bgt.n	801071e <_dtoa_r+0xba6>
 801071c:	e648      	b.n	80103b0 <_dtoa_r+0x838>
 801071e:	2001      	movs	r0, #1
 8010720:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010722:	e665      	b.n	80103f0 <_dtoa_r+0x878>
 8010724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010726:	2b00      	cmp	r3, #0
 8010728:	dc00      	bgt.n	801072c <_dtoa_r+0xbb4>
 801072a:	e6d6      	b.n	80104da <_dtoa_r+0x962>
 801072c:	2400      	movs	r4, #0
 801072e:	0031      	movs	r1, r6
 8010730:	9805      	ldr	r0, [sp, #20]
 8010732:	f7ff f993 	bl	800fa5c <quorem>
 8010736:	9b08      	ldr	r3, [sp, #32]
 8010738:	3030      	adds	r0, #48	@ 0x30
 801073a:	5518      	strb	r0, [r3, r4]
 801073c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801073e:	3401      	adds	r4, #1
 8010740:	0005      	movs	r5, r0
 8010742:	429c      	cmp	r4, r3
 8010744:	dab6      	bge.n	80106b4 <_dtoa_r+0xb3c>
 8010746:	2300      	movs	r3, #0
 8010748:	220a      	movs	r2, #10
 801074a:	9905      	ldr	r1, [sp, #20]
 801074c:	9803      	ldr	r0, [sp, #12]
 801074e:	f000 f975 	bl	8010a3c <__multadd>
 8010752:	9005      	str	r0, [sp, #20]
 8010754:	e7eb      	b.n	801072e <_dtoa_r+0xbb6>
 8010756:	46c0      	nop			@ (mov r8, r8)
 8010758:	08013be1 	.word	0x08013be1
 801075c:	08013be9 	.word	0x08013be9

08010760 <_free_r>:
 8010760:	b570      	push	{r4, r5, r6, lr}
 8010762:	0005      	movs	r5, r0
 8010764:	1e0c      	subs	r4, r1, #0
 8010766:	d010      	beq.n	801078a <_free_r+0x2a>
 8010768:	3c04      	subs	r4, #4
 801076a:	6823      	ldr	r3, [r4, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	da00      	bge.n	8010772 <_free_r+0x12>
 8010770:	18e4      	adds	r4, r4, r3
 8010772:	0028      	movs	r0, r5
 8010774:	f000 f8ea 	bl	801094c <__malloc_lock>
 8010778:	4a1d      	ldr	r2, [pc, #116]	@ (80107f0 <_free_r+0x90>)
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d105      	bne.n	801078c <_free_r+0x2c>
 8010780:	6063      	str	r3, [r4, #4]
 8010782:	6014      	str	r4, [r2, #0]
 8010784:	0028      	movs	r0, r5
 8010786:	f000 f8e9 	bl	801095c <__malloc_unlock>
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	42a3      	cmp	r3, r4
 801078e:	d908      	bls.n	80107a2 <_free_r+0x42>
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	1821      	adds	r1, r4, r0
 8010794:	428b      	cmp	r3, r1
 8010796:	d1f3      	bne.n	8010780 <_free_r+0x20>
 8010798:	6819      	ldr	r1, [r3, #0]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	1809      	adds	r1, r1, r0
 801079e:	6021      	str	r1, [r4, #0]
 80107a0:	e7ee      	b.n	8010780 <_free_r+0x20>
 80107a2:	001a      	movs	r2, r3
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <_free_r+0x4e>
 80107aa:	42a3      	cmp	r3, r4
 80107ac:	d9f9      	bls.n	80107a2 <_free_r+0x42>
 80107ae:	6811      	ldr	r1, [r2, #0]
 80107b0:	1850      	adds	r0, r2, r1
 80107b2:	42a0      	cmp	r0, r4
 80107b4:	d10b      	bne.n	80107ce <_free_r+0x6e>
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	1809      	adds	r1, r1, r0
 80107ba:	1850      	adds	r0, r2, r1
 80107bc:	6011      	str	r1, [r2, #0]
 80107be:	4283      	cmp	r3, r0
 80107c0:	d1e0      	bne.n	8010784 <_free_r+0x24>
 80107c2:	6818      	ldr	r0, [r3, #0]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	1841      	adds	r1, r0, r1
 80107c8:	6011      	str	r1, [r2, #0]
 80107ca:	6053      	str	r3, [r2, #4]
 80107cc:	e7da      	b.n	8010784 <_free_r+0x24>
 80107ce:	42a0      	cmp	r0, r4
 80107d0:	d902      	bls.n	80107d8 <_free_r+0x78>
 80107d2:	230c      	movs	r3, #12
 80107d4:	602b      	str	r3, [r5, #0]
 80107d6:	e7d5      	b.n	8010784 <_free_r+0x24>
 80107d8:	6820      	ldr	r0, [r4, #0]
 80107da:	1821      	adds	r1, r4, r0
 80107dc:	428b      	cmp	r3, r1
 80107de:	d103      	bne.n	80107e8 <_free_r+0x88>
 80107e0:	6819      	ldr	r1, [r3, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	1809      	adds	r1, r1, r0
 80107e6:	6021      	str	r1, [r4, #0]
 80107e8:	6063      	str	r3, [r4, #4]
 80107ea:	6054      	str	r4, [r2, #4]
 80107ec:	e7ca      	b.n	8010784 <_free_r+0x24>
 80107ee:	46c0      	nop			@ (mov r8, r8)
 80107f0:	20004984 	.word	0x20004984

080107f4 <malloc>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	4b03      	ldr	r3, [pc, #12]	@ (8010804 <malloc+0x10>)
 80107f8:	0001      	movs	r1, r0
 80107fa:	6818      	ldr	r0, [r3, #0]
 80107fc:	f000 f826 	bl	801084c <_malloc_r>
 8010800:	bd10      	pop	{r4, pc}
 8010802:	46c0      	nop			@ (mov r8, r8)
 8010804:	20000038 	.word	0x20000038

08010808 <sbrk_aligned>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	4e0f      	ldr	r6, [pc, #60]	@ (8010848 <sbrk_aligned+0x40>)
 801080c:	000d      	movs	r5, r1
 801080e:	6831      	ldr	r1, [r6, #0]
 8010810:	0004      	movs	r4, r0
 8010812:	2900      	cmp	r1, #0
 8010814:	d102      	bne.n	801081c <sbrk_aligned+0x14>
 8010816:	f001 fe47 	bl	80124a8 <_sbrk_r>
 801081a:	6030      	str	r0, [r6, #0]
 801081c:	0029      	movs	r1, r5
 801081e:	0020      	movs	r0, r4
 8010820:	f001 fe42 	bl	80124a8 <_sbrk_r>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d103      	bne.n	8010830 <sbrk_aligned+0x28>
 8010828:	2501      	movs	r5, #1
 801082a:	426d      	negs	r5, r5
 801082c:	0028      	movs	r0, r5
 801082e:	bd70      	pop	{r4, r5, r6, pc}
 8010830:	2303      	movs	r3, #3
 8010832:	1cc5      	adds	r5, r0, #3
 8010834:	439d      	bics	r5, r3
 8010836:	42a8      	cmp	r0, r5
 8010838:	d0f8      	beq.n	801082c <sbrk_aligned+0x24>
 801083a:	1a29      	subs	r1, r5, r0
 801083c:	0020      	movs	r0, r4
 801083e:	f001 fe33 	bl	80124a8 <_sbrk_r>
 8010842:	3001      	adds	r0, #1
 8010844:	d1f2      	bne.n	801082c <sbrk_aligned+0x24>
 8010846:	e7ef      	b.n	8010828 <sbrk_aligned+0x20>
 8010848:	20004980 	.word	0x20004980

0801084c <_malloc_r>:
 801084c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801084e:	2203      	movs	r2, #3
 8010850:	1ccb      	adds	r3, r1, #3
 8010852:	4393      	bics	r3, r2
 8010854:	3308      	adds	r3, #8
 8010856:	0005      	movs	r5, r0
 8010858:	001f      	movs	r7, r3
 801085a:	2b0c      	cmp	r3, #12
 801085c:	d234      	bcs.n	80108c8 <_malloc_r+0x7c>
 801085e:	270c      	movs	r7, #12
 8010860:	42b9      	cmp	r1, r7
 8010862:	d833      	bhi.n	80108cc <_malloc_r+0x80>
 8010864:	0028      	movs	r0, r5
 8010866:	f000 f871 	bl	801094c <__malloc_lock>
 801086a:	4e37      	ldr	r6, [pc, #220]	@ (8010948 <_malloc_r+0xfc>)
 801086c:	6833      	ldr	r3, [r6, #0]
 801086e:	001c      	movs	r4, r3
 8010870:	2c00      	cmp	r4, #0
 8010872:	d12f      	bne.n	80108d4 <_malloc_r+0x88>
 8010874:	0039      	movs	r1, r7
 8010876:	0028      	movs	r0, r5
 8010878:	f7ff ffc6 	bl	8010808 <sbrk_aligned>
 801087c:	0004      	movs	r4, r0
 801087e:	1c43      	adds	r3, r0, #1
 8010880:	d15f      	bne.n	8010942 <_malloc_r+0xf6>
 8010882:	6834      	ldr	r4, [r6, #0]
 8010884:	9400      	str	r4, [sp, #0]
 8010886:	9b00      	ldr	r3, [sp, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d14a      	bne.n	8010922 <_malloc_r+0xd6>
 801088c:	2c00      	cmp	r4, #0
 801088e:	d052      	beq.n	8010936 <_malloc_r+0xea>
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	0028      	movs	r0, r5
 8010894:	18e3      	adds	r3, r4, r3
 8010896:	9900      	ldr	r1, [sp, #0]
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	f001 fe05 	bl	80124a8 <_sbrk_r>
 801089e:	9b01      	ldr	r3, [sp, #4]
 80108a0:	4283      	cmp	r3, r0
 80108a2:	d148      	bne.n	8010936 <_malloc_r+0xea>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	0028      	movs	r0, r5
 80108a8:	1aff      	subs	r7, r7, r3
 80108aa:	0039      	movs	r1, r7
 80108ac:	f7ff ffac 	bl	8010808 <sbrk_aligned>
 80108b0:	3001      	adds	r0, #1
 80108b2:	d040      	beq.n	8010936 <_malloc_r+0xea>
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	19db      	adds	r3, r3, r7
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	6833      	ldr	r3, [r6, #0]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	2a00      	cmp	r2, #0
 80108c0:	d133      	bne.n	801092a <_malloc_r+0xde>
 80108c2:	9b00      	ldr	r3, [sp, #0]
 80108c4:	6033      	str	r3, [r6, #0]
 80108c6:	e019      	b.n	80108fc <_malloc_r+0xb0>
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	dac9      	bge.n	8010860 <_malloc_r+0x14>
 80108cc:	230c      	movs	r3, #12
 80108ce:	602b      	str	r3, [r5, #0]
 80108d0:	2000      	movs	r0, #0
 80108d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108d4:	6821      	ldr	r1, [r4, #0]
 80108d6:	1bc9      	subs	r1, r1, r7
 80108d8:	d420      	bmi.n	801091c <_malloc_r+0xd0>
 80108da:	290b      	cmp	r1, #11
 80108dc:	d90a      	bls.n	80108f4 <_malloc_r+0xa8>
 80108de:	19e2      	adds	r2, r4, r7
 80108e0:	6027      	str	r7, [r4, #0]
 80108e2:	42a3      	cmp	r3, r4
 80108e4:	d104      	bne.n	80108f0 <_malloc_r+0xa4>
 80108e6:	6032      	str	r2, [r6, #0]
 80108e8:	6863      	ldr	r3, [r4, #4]
 80108ea:	6011      	str	r1, [r2, #0]
 80108ec:	6053      	str	r3, [r2, #4]
 80108ee:	e005      	b.n	80108fc <_malloc_r+0xb0>
 80108f0:	605a      	str	r2, [r3, #4]
 80108f2:	e7f9      	b.n	80108e8 <_malloc_r+0x9c>
 80108f4:	6862      	ldr	r2, [r4, #4]
 80108f6:	42a3      	cmp	r3, r4
 80108f8:	d10e      	bne.n	8010918 <_malloc_r+0xcc>
 80108fa:	6032      	str	r2, [r6, #0]
 80108fc:	0028      	movs	r0, r5
 80108fe:	f000 f82d 	bl	801095c <__malloc_unlock>
 8010902:	0020      	movs	r0, r4
 8010904:	2207      	movs	r2, #7
 8010906:	300b      	adds	r0, #11
 8010908:	1d23      	adds	r3, r4, #4
 801090a:	4390      	bics	r0, r2
 801090c:	1ac2      	subs	r2, r0, r3
 801090e:	4298      	cmp	r0, r3
 8010910:	d0df      	beq.n	80108d2 <_malloc_r+0x86>
 8010912:	1a1b      	subs	r3, r3, r0
 8010914:	50a3      	str	r3, [r4, r2]
 8010916:	e7dc      	b.n	80108d2 <_malloc_r+0x86>
 8010918:	605a      	str	r2, [r3, #4]
 801091a:	e7ef      	b.n	80108fc <_malloc_r+0xb0>
 801091c:	0023      	movs	r3, r4
 801091e:	6864      	ldr	r4, [r4, #4]
 8010920:	e7a6      	b.n	8010870 <_malloc_r+0x24>
 8010922:	9c00      	ldr	r4, [sp, #0]
 8010924:	6863      	ldr	r3, [r4, #4]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	e7ad      	b.n	8010886 <_malloc_r+0x3a>
 801092a:	001a      	movs	r2, r3
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	42a3      	cmp	r3, r4
 8010930:	d1fb      	bne.n	801092a <_malloc_r+0xde>
 8010932:	2300      	movs	r3, #0
 8010934:	e7da      	b.n	80108ec <_malloc_r+0xa0>
 8010936:	230c      	movs	r3, #12
 8010938:	0028      	movs	r0, r5
 801093a:	602b      	str	r3, [r5, #0]
 801093c:	f000 f80e 	bl	801095c <__malloc_unlock>
 8010940:	e7c6      	b.n	80108d0 <_malloc_r+0x84>
 8010942:	6007      	str	r7, [r0, #0]
 8010944:	e7da      	b.n	80108fc <_malloc_r+0xb0>
 8010946:	46c0      	nop			@ (mov r8, r8)
 8010948:	20004984 	.word	0x20004984

0801094c <__malloc_lock>:
 801094c:	b510      	push	{r4, lr}
 801094e:	4802      	ldr	r0, [pc, #8]	@ (8010958 <__malloc_lock+0xc>)
 8010950:	f7ff f869 	bl	800fa26 <__retarget_lock_acquire_recursive>
 8010954:	bd10      	pop	{r4, pc}
 8010956:	46c0      	nop			@ (mov r8, r8)
 8010958:	2000497c 	.word	0x2000497c

0801095c <__malloc_unlock>:
 801095c:	b510      	push	{r4, lr}
 801095e:	4802      	ldr	r0, [pc, #8]	@ (8010968 <__malloc_unlock+0xc>)
 8010960:	f7ff f862 	bl	800fa28 <__retarget_lock_release_recursive>
 8010964:	bd10      	pop	{r4, pc}
 8010966:	46c0      	nop			@ (mov r8, r8)
 8010968:	2000497c 	.word	0x2000497c

0801096c <_Balloc>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	69c5      	ldr	r5, [r0, #28]
 8010970:	0006      	movs	r6, r0
 8010972:	000c      	movs	r4, r1
 8010974:	2d00      	cmp	r5, #0
 8010976:	d10e      	bne.n	8010996 <_Balloc+0x2a>
 8010978:	2010      	movs	r0, #16
 801097a:	f7ff ff3b 	bl	80107f4 <malloc>
 801097e:	1e02      	subs	r2, r0, #0
 8010980:	61f0      	str	r0, [r6, #28]
 8010982:	d104      	bne.n	801098e <_Balloc+0x22>
 8010984:	216b      	movs	r1, #107	@ 0x6b
 8010986:	4b19      	ldr	r3, [pc, #100]	@ (80109ec <_Balloc+0x80>)
 8010988:	4819      	ldr	r0, [pc, #100]	@ (80109f0 <_Balloc+0x84>)
 801098a:	f001 fda5 	bl	80124d8 <__assert_func>
 801098e:	6045      	str	r5, [r0, #4]
 8010990:	6085      	str	r5, [r0, #8]
 8010992:	6005      	str	r5, [r0, #0]
 8010994:	60c5      	str	r5, [r0, #12]
 8010996:	69f5      	ldr	r5, [r6, #28]
 8010998:	68eb      	ldr	r3, [r5, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d013      	beq.n	80109c6 <_Balloc+0x5a>
 801099e:	69f3      	ldr	r3, [r6, #28]
 80109a0:	00a2      	lsls	r2, r4, #2
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	189b      	adds	r3, r3, r2
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d118      	bne.n	80109de <_Balloc+0x72>
 80109ac:	2101      	movs	r1, #1
 80109ae:	000d      	movs	r5, r1
 80109b0:	40a5      	lsls	r5, r4
 80109b2:	1d6a      	adds	r2, r5, #5
 80109b4:	0030      	movs	r0, r6
 80109b6:	0092      	lsls	r2, r2, #2
 80109b8:	f001 fdac 	bl	8012514 <_calloc_r>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d00c      	beq.n	80109da <_Balloc+0x6e>
 80109c0:	6044      	str	r4, [r0, #4]
 80109c2:	6085      	str	r5, [r0, #8]
 80109c4:	e00d      	b.n	80109e2 <_Balloc+0x76>
 80109c6:	2221      	movs	r2, #33	@ 0x21
 80109c8:	2104      	movs	r1, #4
 80109ca:	0030      	movs	r0, r6
 80109cc:	f001 fda2 	bl	8012514 <_calloc_r>
 80109d0:	69f3      	ldr	r3, [r6, #28]
 80109d2:	60e8      	str	r0, [r5, #12]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e1      	bne.n	801099e <_Balloc+0x32>
 80109da:	2000      	movs	r0, #0
 80109dc:	bd70      	pop	{r4, r5, r6, pc}
 80109de:	6802      	ldr	r2, [r0, #0]
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	2300      	movs	r3, #0
 80109e4:	6103      	str	r3, [r0, #16]
 80109e6:	60c3      	str	r3, [r0, #12]
 80109e8:	e7f8      	b.n	80109dc <_Balloc+0x70>
 80109ea:	46c0      	nop			@ (mov r8, r8)
 80109ec:	08013bee 	.word	0x08013bee
 80109f0:	08013c6e 	.word	0x08013c6e

080109f4 <_Bfree>:
 80109f4:	b570      	push	{r4, r5, r6, lr}
 80109f6:	69c6      	ldr	r6, [r0, #28]
 80109f8:	0005      	movs	r5, r0
 80109fa:	000c      	movs	r4, r1
 80109fc:	2e00      	cmp	r6, #0
 80109fe:	d10e      	bne.n	8010a1e <_Bfree+0x2a>
 8010a00:	2010      	movs	r0, #16
 8010a02:	f7ff fef7 	bl	80107f4 <malloc>
 8010a06:	1e02      	subs	r2, r0, #0
 8010a08:	61e8      	str	r0, [r5, #28]
 8010a0a:	d104      	bne.n	8010a16 <_Bfree+0x22>
 8010a0c:	218f      	movs	r1, #143	@ 0x8f
 8010a0e:	4b09      	ldr	r3, [pc, #36]	@ (8010a34 <_Bfree+0x40>)
 8010a10:	4809      	ldr	r0, [pc, #36]	@ (8010a38 <_Bfree+0x44>)
 8010a12:	f001 fd61 	bl	80124d8 <__assert_func>
 8010a16:	6046      	str	r6, [r0, #4]
 8010a18:	6086      	str	r6, [r0, #8]
 8010a1a:	6006      	str	r6, [r0, #0]
 8010a1c:	60c6      	str	r6, [r0, #12]
 8010a1e:	2c00      	cmp	r4, #0
 8010a20:	d007      	beq.n	8010a32 <_Bfree+0x3e>
 8010a22:	69eb      	ldr	r3, [r5, #28]
 8010a24:	6862      	ldr	r2, [r4, #4]
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	0092      	lsls	r2, r2, #2
 8010a2a:	189b      	adds	r3, r3, r2
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	6022      	str	r2, [r4, #0]
 8010a30:	601c      	str	r4, [r3, #0]
 8010a32:	bd70      	pop	{r4, r5, r6, pc}
 8010a34:	08013bee 	.word	0x08013bee
 8010a38:	08013c6e 	.word	0x08013c6e

08010a3c <__multadd>:
 8010a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a3e:	000f      	movs	r7, r1
 8010a40:	9001      	str	r0, [sp, #4]
 8010a42:	000c      	movs	r4, r1
 8010a44:	001e      	movs	r6, r3
 8010a46:	2000      	movs	r0, #0
 8010a48:	690d      	ldr	r5, [r1, #16]
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	3001      	adds	r0, #1
 8010a50:	b299      	uxth	r1, r3
 8010a52:	4351      	muls	r1, r2
 8010a54:	0c1b      	lsrs	r3, r3, #16
 8010a56:	4353      	muls	r3, r2
 8010a58:	1989      	adds	r1, r1, r6
 8010a5a:	0c0e      	lsrs	r6, r1, #16
 8010a5c:	199b      	adds	r3, r3, r6
 8010a5e:	0c1e      	lsrs	r6, r3, #16
 8010a60:	b289      	uxth	r1, r1
 8010a62:	041b      	lsls	r3, r3, #16
 8010a64:	185b      	adds	r3, r3, r1
 8010a66:	c708      	stmia	r7!, {r3}
 8010a68:	4285      	cmp	r5, r0
 8010a6a:	dcef      	bgt.n	8010a4c <__multadd+0x10>
 8010a6c:	2e00      	cmp	r6, #0
 8010a6e:	d022      	beq.n	8010ab6 <__multadd+0x7a>
 8010a70:	68a3      	ldr	r3, [r4, #8]
 8010a72:	42ab      	cmp	r3, r5
 8010a74:	dc19      	bgt.n	8010aaa <__multadd+0x6e>
 8010a76:	6861      	ldr	r1, [r4, #4]
 8010a78:	9801      	ldr	r0, [sp, #4]
 8010a7a:	3101      	adds	r1, #1
 8010a7c:	f7ff ff76 	bl	801096c <_Balloc>
 8010a80:	1e07      	subs	r7, r0, #0
 8010a82:	d105      	bne.n	8010a90 <__multadd+0x54>
 8010a84:	003a      	movs	r2, r7
 8010a86:	21ba      	movs	r1, #186	@ 0xba
 8010a88:	4b0c      	ldr	r3, [pc, #48]	@ (8010abc <__multadd+0x80>)
 8010a8a:	480d      	ldr	r0, [pc, #52]	@ (8010ac0 <__multadd+0x84>)
 8010a8c:	f001 fd24 	bl	80124d8 <__assert_func>
 8010a90:	0021      	movs	r1, r4
 8010a92:	6922      	ldr	r2, [r4, #16]
 8010a94:	310c      	adds	r1, #12
 8010a96:	3202      	adds	r2, #2
 8010a98:	0092      	lsls	r2, r2, #2
 8010a9a:	300c      	adds	r0, #12
 8010a9c:	f7fe ffd0 	bl	800fa40 <memcpy>
 8010aa0:	0021      	movs	r1, r4
 8010aa2:	9801      	ldr	r0, [sp, #4]
 8010aa4:	f7ff ffa6 	bl	80109f4 <_Bfree>
 8010aa8:	003c      	movs	r4, r7
 8010aaa:	1d2b      	adds	r3, r5, #4
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	18e3      	adds	r3, r4, r3
 8010ab0:	3501      	adds	r5, #1
 8010ab2:	605e      	str	r6, [r3, #4]
 8010ab4:	6125      	str	r5, [r4, #16]
 8010ab6:	0020      	movs	r0, r4
 8010ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010aba:	46c0      	nop			@ (mov r8, r8)
 8010abc:	08013c5d 	.word	0x08013c5d
 8010ac0:	08013c6e 	.word	0x08013c6e

08010ac4 <__s2b>:
 8010ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ac6:	0007      	movs	r7, r0
 8010ac8:	0018      	movs	r0, r3
 8010aca:	000c      	movs	r4, r1
 8010acc:	3008      	adds	r0, #8
 8010ace:	2109      	movs	r1, #9
 8010ad0:	9301      	str	r3, [sp, #4]
 8010ad2:	0015      	movs	r5, r2
 8010ad4:	f7ef fbbe 	bl	8000254 <__divsi3>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	2100      	movs	r1, #0
 8010adc:	4283      	cmp	r3, r0
 8010ade:	db0a      	blt.n	8010af6 <__s2b+0x32>
 8010ae0:	0038      	movs	r0, r7
 8010ae2:	f7ff ff43 	bl	801096c <_Balloc>
 8010ae6:	1e01      	subs	r1, r0, #0
 8010ae8:	d108      	bne.n	8010afc <__s2b+0x38>
 8010aea:	000a      	movs	r2, r1
 8010aec:	4b19      	ldr	r3, [pc, #100]	@ (8010b54 <__s2b+0x90>)
 8010aee:	481a      	ldr	r0, [pc, #104]	@ (8010b58 <__s2b+0x94>)
 8010af0:	31d3      	adds	r1, #211	@ 0xd3
 8010af2:	f001 fcf1 	bl	80124d8 <__assert_func>
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	3101      	adds	r1, #1
 8010afa:	e7ef      	b.n	8010adc <__s2b+0x18>
 8010afc:	9b08      	ldr	r3, [sp, #32]
 8010afe:	6143      	str	r3, [r0, #20]
 8010b00:	2301      	movs	r3, #1
 8010b02:	6103      	str	r3, [r0, #16]
 8010b04:	2d09      	cmp	r5, #9
 8010b06:	dd18      	ble.n	8010b3a <__s2b+0x76>
 8010b08:	0023      	movs	r3, r4
 8010b0a:	3309      	adds	r3, #9
 8010b0c:	001e      	movs	r6, r3
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	1964      	adds	r4, r4, r5
 8010b12:	7833      	ldrb	r3, [r6, #0]
 8010b14:	220a      	movs	r2, #10
 8010b16:	0038      	movs	r0, r7
 8010b18:	3b30      	subs	r3, #48	@ 0x30
 8010b1a:	f7ff ff8f 	bl	8010a3c <__multadd>
 8010b1e:	3601      	adds	r6, #1
 8010b20:	0001      	movs	r1, r0
 8010b22:	42a6      	cmp	r6, r4
 8010b24:	d1f5      	bne.n	8010b12 <__s2b+0x4e>
 8010b26:	002c      	movs	r4, r5
 8010b28:	9b00      	ldr	r3, [sp, #0]
 8010b2a:	3c08      	subs	r4, #8
 8010b2c:	191c      	adds	r4, r3, r4
 8010b2e:	002e      	movs	r6, r5
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	429e      	cmp	r6, r3
 8010b34:	db04      	blt.n	8010b40 <__s2b+0x7c>
 8010b36:	0008      	movs	r0, r1
 8010b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b3a:	2509      	movs	r5, #9
 8010b3c:	340a      	adds	r4, #10
 8010b3e:	e7f6      	b.n	8010b2e <__s2b+0x6a>
 8010b40:	1b63      	subs	r3, r4, r5
 8010b42:	5d9b      	ldrb	r3, [r3, r6]
 8010b44:	220a      	movs	r2, #10
 8010b46:	0038      	movs	r0, r7
 8010b48:	3b30      	subs	r3, #48	@ 0x30
 8010b4a:	f7ff ff77 	bl	8010a3c <__multadd>
 8010b4e:	3601      	adds	r6, #1
 8010b50:	0001      	movs	r1, r0
 8010b52:	e7ed      	b.n	8010b30 <__s2b+0x6c>
 8010b54:	08013c5d 	.word	0x08013c5d
 8010b58:	08013c6e 	.word	0x08013c6e

08010b5c <__hi0bits>:
 8010b5c:	2280      	movs	r2, #128	@ 0x80
 8010b5e:	0003      	movs	r3, r0
 8010b60:	0252      	lsls	r2, r2, #9
 8010b62:	2000      	movs	r0, #0
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d201      	bcs.n	8010b6c <__hi0bits+0x10>
 8010b68:	041b      	lsls	r3, r3, #16
 8010b6a:	3010      	adds	r0, #16
 8010b6c:	2280      	movs	r2, #128	@ 0x80
 8010b6e:	0452      	lsls	r2, r2, #17
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d201      	bcs.n	8010b78 <__hi0bits+0x1c>
 8010b74:	3008      	adds	r0, #8
 8010b76:	021b      	lsls	r3, r3, #8
 8010b78:	2280      	movs	r2, #128	@ 0x80
 8010b7a:	0552      	lsls	r2, r2, #21
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d201      	bcs.n	8010b84 <__hi0bits+0x28>
 8010b80:	3004      	adds	r0, #4
 8010b82:	011b      	lsls	r3, r3, #4
 8010b84:	2280      	movs	r2, #128	@ 0x80
 8010b86:	05d2      	lsls	r2, r2, #23
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d201      	bcs.n	8010b90 <__hi0bits+0x34>
 8010b8c:	3002      	adds	r0, #2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	db03      	blt.n	8010b9c <__hi0bits+0x40>
 8010b94:	3001      	adds	r0, #1
 8010b96:	4213      	tst	r3, r2
 8010b98:	d100      	bne.n	8010b9c <__hi0bits+0x40>
 8010b9a:	2020      	movs	r0, #32
 8010b9c:	4770      	bx	lr

08010b9e <__lo0bits>:
 8010b9e:	6803      	ldr	r3, [r0, #0]
 8010ba0:	0001      	movs	r1, r0
 8010ba2:	2207      	movs	r2, #7
 8010ba4:	0018      	movs	r0, r3
 8010ba6:	4010      	ands	r0, r2
 8010ba8:	4213      	tst	r3, r2
 8010baa:	d00d      	beq.n	8010bc8 <__lo0bits+0x2a>
 8010bac:	3a06      	subs	r2, #6
 8010bae:	2000      	movs	r0, #0
 8010bb0:	4213      	tst	r3, r2
 8010bb2:	d105      	bne.n	8010bc0 <__lo0bits+0x22>
 8010bb4:	3002      	adds	r0, #2
 8010bb6:	4203      	tst	r3, r0
 8010bb8:	d003      	beq.n	8010bc2 <__lo0bits+0x24>
 8010bba:	40d3      	lsrs	r3, r2
 8010bbc:	0010      	movs	r0, r2
 8010bbe:	600b      	str	r3, [r1, #0]
 8010bc0:	4770      	bx	lr
 8010bc2:	089b      	lsrs	r3, r3, #2
 8010bc4:	600b      	str	r3, [r1, #0]
 8010bc6:	e7fb      	b.n	8010bc0 <__lo0bits+0x22>
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	2a00      	cmp	r2, #0
 8010bcc:	d101      	bne.n	8010bd2 <__lo0bits+0x34>
 8010bce:	2010      	movs	r0, #16
 8010bd0:	0c1b      	lsrs	r3, r3, #16
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	2a00      	cmp	r2, #0
 8010bd6:	d101      	bne.n	8010bdc <__lo0bits+0x3e>
 8010bd8:	3008      	adds	r0, #8
 8010bda:	0a1b      	lsrs	r3, r3, #8
 8010bdc:	071a      	lsls	r2, r3, #28
 8010bde:	d101      	bne.n	8010be4 <__lo0bits+0x46>
 8010be0:	3004      	adds	r0, #4
 8010be2:	091b      	lsrs	r3, r3, #4
 8010be4:	079a      	lsls	r2, r3, #30
 8010be6:	d101      	bne.n	8010bec <__lo0bits+0x4e>
 8010be8:	3002      	adds	r0, #2
 8010bea:	089b      	lsrs	r3, r3, #2
 8010bec:	07da      	lsls	r2, r3, #31
 8010bee:	d4e9      	bmi.n	8010bc4 <__lo0bits+0x26>
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	085b      	lsrs	r3, r3, #1
 8010bf4:	d1e6      	bne.n	8010bc4 <__lo0bits+0x26>
 8010bf6:	2020      	movs	r0, #32
 8010bf8:	e7e2      	b.n	8010bc0 <__lo0bits+0x22>
	...

08010bfc <__i2b>:
 8010bfc:	b510      	push	{r4, lr}
 8010bfe:	000c      	movs	r4, r1
 8010c00:	2101      	movs	r1, #1
 8010c02:	f7ff feb3 	bl	801096c <_Balloc>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d107      	bne.n	8010c1a <__i2b+0x1e>
 8010c0a:	2146      	movs	r1, #70	@ 0x46
 8010c0c:	4c05      	ldr	r4, [pc, #20]	@ (8010c24 <__i2b+0x28>)
 8010c0e:	0002      	movs	r2, r0
 8010c10:	4b05      	ldr	r3, [pc, #20]	@ (8010c28 <__i2b+0x2c>)
 8010c12:	0020      	movs	r0, r4
 8010c14:	31ff      	adds	r1, #255	@ 0xff
 8010c16:	f001 fc5f 	bl	80124d8 <__assert_func>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	6144      	str	r4, [r0, #20]
 8010c1e:	6103      	str	r3, [r0, #16]
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	46c0      	nop			@ (mov r8, r8)
 8010c24:	08013c6e 	.word	0x08013c6e
 8010c28:	08013c5d 	.word	0x08013c5d

08010c2c <__multiply>:
 8010c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c2e:	0014      	movs	r4, r2
 8010c30:	690a      	ldr	r2, [r1, #16]
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	000d      	movs	r5, r1
 8010c36:	b08b      	sub	sp, #44	@ 0x2c
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	db02      	blt.n	8010c42 <__multiply+0x16>
 8010c3c:	0023      	movs	r3, r4
 8010c3e:	000c      	movs	r4, r1
 8010c40:	001d      	movs	r5, r3
 8010c42:	6927      	ldr	r7, [r4, #16]
 8010c44:	692e      	ldr	r6, [r5, #16]
 8010c46:	6861      	ldr	r1, [r4, #4]
 8010c48:	19bb      	adds	r3, r7, r6
 8010c4a:	9303      	str	r3, [sp, #12]
 8010c4c:	68a3      	ldr	r3, [r4, #8]
 8010c4e:	19ba      	adds	r2, r7, r6
 8010c50:	4293      	cmp	r3, r2
 8010c52:	da00      	bge.n	8010c56 <__multiply+0x2a>
 8010c54:	3101      	adds	r1, #1
 8010c56:	f7ff fe89 	bl	801096c <_Balloc>
 8010c5a:	9002      	str	r0, [sp, #8]
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d106      	bne.n	8010c6e <__multiply+0x42>
 8010c60:	21b1      	movs	r1, #177	@ 0xb1
 8010c62:	4b49      	ldr	r3, [pc, #292]	@ (8010d88 <__multiply+0x15c>)
 8010c64:	4849      	ldr	r0, [pc, #292]	@ (8010d8c <__multiply+0x160>)
 8010c66:	9a02      	ldr	r2, [sp, #8]
 8010c68:	0049      	lsls	r1, r1, #1
 8010c6a:	f001 fc35 	bl	80124d8 <__assert_func>
 8010c6e:	9b02      	ldr	r3, [sp, #8]
 8010c70:	2200      	movs	r2, #0
 8010c72:	3314      	adds	r3, #20
 8010c74:	469c      	mov	ip, r3
 8010c76:	19bb      	adds	r3, r7, r6
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	4463      	add	r3, ip
 8010c7c:	9304      	str	r3, [sp, #16]
 8010c7e:	4663      	mov	r3, ip
 8010c80:	9904      	ldr	r1, [sp, #16]
 8010c82:	428b      	cmp	r3, r1
 8010c84:	d32a      	bcc.n	8010cdc <__multiply+0xb0>
 8010c86:	0023      	movs	r3, r4
 8010c88:	00bf      	lsls	r7, r7, #2
 8010c8a:	3314      	adds	r3, #20
 8010c8c:	3514      	adds	r5, #20
 8010c8e:	9308      	str	r3, [sp, #32]
 8010c90:	00b6      	lsls	r6, r6, #2
 8010c92:	19db      	adds	r3, r3, r7
 8010c94:	9305      	str	r3, [sp, #20]
 8010c96:	19ab      	adds	r3, r5, r6
 8010c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c9a:	2304      	movs	r3, #4
 8010c9c:	9306      	str	r3, [sp, #24]
 8010c9e:	0023      	movs	r3, r4
 8010ca0:	9a05      	ldr	r2, [sp, #20]
 8010ca2:	3315      	adds	r3, #21
 8010ca4:	9501      	str	r5, [sp, #4]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d305      	bcc.n	8010cb6 <__multiply+0x8a>
 8010caa:	1b13      	subs	r3, r2, r4
 8010cac:	3b15      	subs	r3, #21
 8010cae:	089b      	lsrs	r3, r3, #2
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	9306      	str	r3, [sp, #24]
 8010cb6:	9b01      	ldr	r3, [sp, #4]
 8010cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d310      	bcc.n	8010ce0 <__multiply+0xb4>
 8010cbe:	9b03      	ldr	r3, [sp, #12]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	dd05      	ble.n	8010cd0 <__multiply+0xa4>
 8010cc4:	9b04      	ldr	r3, [sp, #16]
 8010cc6:	3b04      	subs	r3, #4
 8010cc8:	9304      	str	r3, [sp, #16]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d056      	beq.n	8010d7e <__multiply+0x152>
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	9a03      	ldr	r2, [sp, #12]
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	611a      	str	r2, [r3, #16]
 8010cd8:	b00b      	add	sp, #44	@ 0x2c
 8010cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cdc:	c304      	stmia	r3!, {r2}
 8010cde:	e7cf      	b.n	8010c80 <__multiply+0x54>
 8010ce0:	9b01      	ldr	r3, [sp, #4]
 8010ce2:	6818      	ldr	r0, [r3, #0]
 8010ce4:	b280      	uxth	r0, r0
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d01e      	beq.n	8010d28 <__multiply+0xfc>
 8010cea:	4667      	mov	r7, ip
 8010cec:	2500      	movs	r5, #0
 8010cee:	9e08      	ldr	r6, [sp, #32]
 8010cf0:	ce02      	ldmia	r6!, {r1}
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	9307      	str	r3, [sp, #28]
 8010cf6:	b28b      	uxth	r3, r1
 8010cf8:	4343      	muls	r3, r0
 8010cfa:	001a      	movs	r2, r3
 8010cfc:	466b      	mov	r3, sp
 8010cfe:	0c09      	lsrs	r1, r1, #16
 8010d00:	8b9b      	ldrh	r3, [r3, #28]
 8010d02:	4341      	muls	r1, r0
 8010d04:	18d3      	adds	r3, r2, r3
 8010d06:	9a07      	ldr	r2, [sp, #28]
 8010d08:	195b      	adds	r3, r3, r5
 8010d0a:	0c12      	lsrs	r2, r2, #16
 8010d0c:	1889      	adds	r1, r1, r2
 8010d0e:	0c1a      	lsrs	r2, r3, #16
 8010d10:	188a      	adds	r2, r1, r2
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	0c15      	lsrs	r5, r2, #16
 8010d16:	0412      	lsls	r2, r2, #16
 8010d18:	431a      	orrs	r2, r3
 8010d1a:	9b05      	ldr	r3, [sp, #20]
 8010d1c:	c704      	stmia	r7!, {r2}
 8010d1e:	42b3      	cmp	r3, r6
 8010d20:	d8e6      	bhi.n	8010cf0 <__multiply+0xc4>
 8010d22:	4663      	mov	r3, ip
 8010d24:	9a06      	ldr	r2, [sp, #24]
 8010d26:	509d      	str	r5, [r3, r2]
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	6818      	ldr	r0, [r3, #0]
 8010d2c:	0c00      	lsrs	r0, r0, #16
 8010d2e:	d020      	beq.n	8010d72 <__multiply+0x146>
 8010d30:	4663      	mov	r3, ip
 8010d32:	0025      	movs	r5, r4
 8010d34:	4661      	mov	r1, ip
 8010d36:	2700      	movs	r7, #0
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	3514      	adds	r5, #20
 8010d3c:	682a      	ldr	r2, [r5, #0]
 8010d3e:	680e      	ldr	r6, [r1, #0]
 8010d40:	b292      	uxth	r2, r2
 8010d42:	4342      	muls	r2, r0
 8010d44:	0c36      	lsrs	r6, r6, #16
 8010d46:	1992      	adds	r2, r2, r6
 8010d48:	19d2      	adds	r2, r2, r7
 8010d4a:	0416      	lsls	r6, r2, #16
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	431e      	orrs	r6, r3
 8010d50:	600e      	str	r6, [r1, #0]
 8010d52:	cd40      	ldmia	r5!, {r6}
 8010d54:	684b      	ldr	r3, [r1, #4]
 8010d56:	0c36      	lsrs	r6, r6, #16
 8010d58:	4346      	muls	r6, r0
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	0c12      	lsrs	r2, r2, #16
 8010d5e:	18f3      	adds	r3, r6, r3
 8010d60:	189b      	adds	r3, r3, r2
 8010d62:	9a05      	ldr	r2, [sp, #20]
 8010d64:	0c1f      	lsrs	r7, r3, #16
 8010d66:	3104      	adds	r1, #4
 8010d68:	42aa      	cmp	r2, r5
 8010d6a:	d8e7      	bhi.n	8010d3c <__multiply+0x110>
 8010d6c:	4662      	mov	r2, ip
 8010d6e:	9906      	ldr	r1, [sp, #24]
 8010d70:	5053      	str	r3, [r2, r1]
 8010d72:	9b01      	ldr	r3, [sp, #4]
 8010d74:	3304      	adds	r3, #4
 8010d76:	9301      	str	r3, [sp, #4]
 8010d78:	2304      	movs	r3, #4
 8010d7a:	449c      	add	ip, r3
 8010d7c:	e79b      	b.n	8010cb6 <__multiply+0x8a>
 8010d7e:	9b03      	ldr	r3, [sp, #12]
 8010d80:	3b01      	subs	r3, #1
 8010d82:	9303      	str	r3, [sp, #12]
 8010d84:	e79b      	b.n	8010cbe <__multiply+0x92>
 8010d86:	46c0      	nop			@ (mov r8, r8)
 8010d88:	08013c5d 	.word	0x08013c5d
 8010d8c:	08013c6e 	.word	0x08013c6e

08010d90 <__pow5mult>:
 8010d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d92:	2303      	movs	r3, #3
 8010d94:	0015      	movs	r5, r2
 8010d96:	0007      	movs	r7, r0
 8010d98:	000e      	movs	r6, r1
 8010d9a:	401a      	ands	r2, r3
 8010d9c:	421d      	tst	r5, r3
 8010d9e:	d008      	beq.n	8010db2 <__pow5mult+0x22>
 8010da0:	4925      	ldr	r1, [pc, #148]	@ (8010e38 <__pow5mult+0xa8>)
 8010da2:	3a01      	subs	r2, #1
 8010da4:	0092      	lsls	r2, r2, #2
 8010da6:	5852      	ldr	r2, [r2, r1]
 8010da8:	2300      	movs	r3, #0
 8010daa:	0031      	movs	r1, r6
 8010dac:	f7ff fe46 	bl	8010a3c <__multadd>
 8010db0:	0006      	movs	r6, r0
 8010db2:	10ad      	asrs	r5, r5, #2
 8010db4:	d03d      	beq.n	8010e32 <__pow5mult+0xa2>
 8010db6:	69fc      	ldr	r4, [r7, #28]
 8010db8:	2c00      	cmp	r4, #0
 8010dba:	d10f      	bne.n	8010ddc <__pow5mult+0x4c>
 8010dbc:	2010      	movs	r0, #16
 8010dbe:	f7ff fd19 	bl	80107f4 <malloc>
 8010dc2:	1e02      	subs	r2, r0, #0
 8010dc4:	61f8      	str	r0, [r7, #28]
 8010dc6:	d105      	bne.n	8010dd4 <__pow5mult+0x44>
 8010dc8:	21b4      	movs	r1, #180	@ 0xb4
 8010dca:	4b1c      	ldr	r3, [pc, #112]	@ (8010e3c <__pow5mult+0xac>)
 8010dcc:	481c      	ldr	r0, [pc, #112]	@ (8010e40 <__pow5mult+0xb0>)
 8010dce:	31ff      	adds	r1, #255	@ 0xff
 8010dd0:	f001 fb82 	bl	80124d8 <__assert_func>
 8010dd4:	6044      	str	r4, [r0, #4]
 8010dd6:	6084      	str	r4, [r0, #8]
 8010dd8:	6004      	str	r4, [r0, #0]
 8010dda:	60c4      	str	r4, [r0, #12]
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	689c      	ldr	r4, [r3, #8]
 8010de0:	9301      	str	r3, [sp, #4]
 8010de2:	2c00      	cmp	r4, #0
 8010de4:	d108      	bne.n	8010df8 <__pow5mult+0x68>
 8010de6:	0038      	movs	r0, r7
 8010de8:	4916      	ldr	r1, [pc, #88]	@ (8010e44 <__pow5mult+0xb4>)
 8010dea:	f7ff ff07 	bl	8010bfc <__i2b>
 8010dee:	9b01      	ldr	r3, [sp, #4]
 8010df0:	0004      	movs	r4, r0
 8010df2:	6098      	str	r0, [r3, #8]
 8010df4:	2300      	movs	r3, #0
 8010df6:	6003      	str	r3, [r0, #0]
 8010df8:	2301      	movs	r3, #1
 8010dfa:	421d      	tst	r5, r3
 8010dfc:	d00a      	beq.n	8010e14 <__pow5mult+0x84>
 8010dfe:	0031      	movs	r1, r6
 8010e00:	0022      	movs	r2, r4
 8010e02:	0038      	movs	r0, r7
 8010e04:	f7ff ff12 	bl	8010c2c <__multiply>
 8010e08:	0031      	movs	r1, r6
 8010e0a:	9001      	str	r0, [sp, #4]
 8010e0c:	0038      	movs	r0, r7
 8010e0e:	f7ff fdf1 	bl	80109f4 <_Bfree>
 8010e12:	9e01      	ldr	r6, [sp, #4]
 8010e14:	106d      	asrs	r5, r5, #1
 8010e16:	d00c      	beq.n	8010e32 <__pow5mult+0xa2>
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d107      	bne.n	8010e2e <__pow5mult+0x9e>
 8010e1e:	0022      	movs	r2, r4
 8010e20:	0021      	movs	r1, r4
 8010e22:	0038      	movs	r0, r7
 8010e24:	f7ff ff02 	bl	8010c2c <__multiply>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	6020      	str	r0, [r4, #0]
 8010e2c:	6003      	str	r3, [r0, #0]
 8010e2e:	0004      	movs	r4, r0
 8010e30:	e7e2      	b.n	8010df8 <__pow5mult+0x68>
 8010e32:	0030      	movs	r0, r6
 8010e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010e36:	46c0      	nop			@ (mov r8, r8)
 8010e38:	08013cc8 	.word	0x08013cc8
 8010e3c:	08013bee 	.word	0x08013bee
 8010e40:	08013c6e 	.word	0x08013c6e
 8010e44:	00000271 	.word	0x00000271

08010e48 <__lshift>:
 8010e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e4a:	000c      	movs	r4, r1
 8010e4c:	0016      	movs	r6, r2
 8010e4e:	6923      	ldr	r3, [r4, #16]
 8010e50:	1157      	asrs	r7, r2, #5
 8010e52:	b085      	sub	sp, #20
 8010e54:	18fb      	adds	r3, r7, r3
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	6849      	ldr	r1, [r1, #4]
 8010e5e:	68a3      	ldr	r3, [r4, #8]
 8010e60:	9002      	str	r0, [sp, #8]
 8010e62:	9a00      	ldr	r2, [sp, #0]
 8010e64:	4293      	cmp	r3, r2
 8010e66:	db10      	blt.n	8010e8a <__lshift+0x42>
 8010e68:	9802      	ldr	r0, [sp, #8]
 8010e6a:	f7ff fd7f 	bl	801096c <_Balloc>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	0001      	movs	r1, r0
 8010e72:	0005      	movs	r5, r0
 8010e74:	001a      	movs	r2, r3
 8010e76:	3114      	adds	r1, #20
 8010e78:	4298      	cmp	r0, r3
 8010e7a:	d10c      	bne.n	8010e96 <__lshift+0x4e>
 8010e7c:	21ef      	movs	r1, #239	@ 0xef
 8010e7e:	002a      	movs	r2, r5
 8010e80:	4b25      	ldr	r3, [pc, #148]	@ (8010f18 <__lshift+0xd0>)
 8010e82:	4826      	ldr	r0, [pc, #152]	@ (8010f1c <__lshift+0xd4>)
 8010e84:	0049      	lsls	r1, r1, #1
 8010e86:	f001 fb27 	bl	80124d8 <__assert_func>
 8010e8a:	3101      	adds	r1, #1
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	e7e8      	b.n	8010e62 <__lshift+0x1a>
 8010e90:	0098      	lsls	r0, r3, #2
 8010e92:	500a      	str	r2, [r1, r0]
 8010e94:	3301      	adds	r3, #1
 8010e96:	42bb      	cmp	r3, r7
 8010e98:	dbfa      	blt.n	8010e90 <__lshift+0x48>
 8010e9a:	43fb      	mvns	r3, r7
 8010e9c:	17db      	asrs	r3, r3, #31
 8010e9e:	401f      	ands	r7, r3
 8010ea0:	00bf      	lsls	r7, r7, #2
 8010ea2:	0023      	movs	r3, r4
 8010ea4:	201f      	movs	r0, #31
 8010ea6:	19c9      	adds	r1, r1, r7
 8010ea8:	0037      	movs	r7, r6
 8010eaa:	6922      	ldr	r2, [r4, #16]
 8010eac:	3314      	adds	r3, #20
 8010eae:	0092      	lsls	r2, r2, #2
 8010eb0:	189a      	adds	r2, r3, r2
 8010eb2:	4007      	ands	r7, r0
 8010eb4:	4206      	tst	r6, r0
 8010eb6:	d029      	beq.n	8010f0c <__lshift+0xc4>
 8010eb8:	3001      	adds	r0, #1
 8010eba:	1bc0      	subs	r0, r0, r7
 8010ebc:	9003      	str	r0, [sp, #12]
 8010ebe:	468c      	mov	ip, r1
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	681e      	ldr	r6, [r3, #0]
 8010ec4:	40be      	lsls	r6, r7
 8010ec6:	4306      	orrs	r6, r0
 8010ec8:	4660      	mov	r0, ip
 8010eca:	c040      	stmia	r0!, {r6}
 8010ecc:	4684      	mov	ip, r0
 8010ece:	9e03      	ldr	r6, [sp, #12]
 8010ed0:	cb01      	ldmia	r3!, {r0}
 8010ed2:	40f0      	lsrs	r0, r6
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d8f4      	bhi.n	8010ec2 <__lshift+0x7a>
 8010ed8:	0026      	movs	r6, r4
 8010eda:	3615      	adds	r6, #21
 8010edc:	2304      	movs	r3, #4
 8010ede:	42b2      	cmp	r2, r6
 8010ee0:	d304      	bcc.n	8010eec <__lshift+0xa4>
 8010ee2:	1b13      	subs	r3, r2, r4
 8010ee4:	3b15      	subs	r3, #21
 8010ee6:	089b      	lsrs	r3, r3, #2
 8010ee8:	3301      	adds	r3, #1
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	50c8      	str	r0, [r1, r3]
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d002      	beq.n	8010ef8 <__lshift+0xb0>
 8010ef2:	9b01      	ldr	r3, [sp, #4]
 8010ef4:	3302      	adds	r3, #2
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	9b00      	ldr	r3, [sp, #0]
 8010efa:	9802      	ldr	r0, [sp, #8]
 8010efc:	3b01      	subs	r3, #1
 8010efe:	0021      	movs	r1, r4
 8010f00:	612b      	str	r3, [r5, #16]
 8010f02:	f7ff fd77 	bl	80109f4 <_Bfree>
 8010f06:	0028      	movs	r0, r5
 8010f08:	b005      	add	sp, #20
 8010f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f0c:	cb01      	ldmia	r3!, {r0}
 8010f0e:	c101      	stmia	r1!, {r0}
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d8fb      	bhi.n	8010f0c <__lshift+0xc4>
 8010f14:	e7f0      	b.n	8010ef8 <__lshift+0xb0>
 8010f16:	46c0      	nop			@ (mov r8, r8)
 8010f18:	08013c5d 	.word	0x08013c5d
 8010f1c:	08013c6e 	.word	0x08013c6e

08010f20 <__mcmp>:
 8010f20:	b530      	push	{r4, r5, lr}
 8010f22:	690b      	ldr	r3, [r1, #16]
 8010f24:	6904      	ldr	r4, [r0, #16]
 8010f26:	0002      	movs	r2, r0
 8010f28:	1ae0      	subs	r0, r4, r3
 8010f2a:	429c      	cmp	r4, r3
 8010f2c:	d10f      	bne.n	8010f4e <__mcmp+0x2e>
 8010f2e:	3214      	adds	r2, #20
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	3114      	adds	r1, #20
 8010f34:	0014      	movs	r4, r2
 8010f36:	18c9      	adds	r1, r1, r3
 8010f38:	18d2      	adds	r2, r2, r3
 8010f3a:	3a04      	subs	r2, #4
 8010f3c:	3904      	subs	r1, #4
 8010f3e:	6815      	ldr	r5, [r2, #0]
 8010f40:	680b      	ldr	r3, [r1, #0]
 8010f42:	429d      	cmp	r5, r3
 8010f44:	d004      	beq.n	8010f50 <__mcmp+0x30>
 8010f46:	2001      	movs	r0, #1
 8010f48:	429d      	cmp	r5, r3
 8010f4a:	d200      	bcs.n	8010f4e <__mcmp+0x2e>
 8010f4c:	3802      	subs	r0, #2
 8010f4e:	bd30      	pop	{r4, r5, pc}
 8010f50:	4294      	cmp	r4, r2
 8010f52:	d3f2      	bcc.n	8010f3a <__mcmp+0x1a>
 8010f54:	e7fb      	b.n	8010f4e <__mcmp+0x2e>
	...

08010f58 <__mdiff>:
 8010f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5a:	000c      	movs	r4, r1
 8010f5c:	b087      	sub	sp, #28
 8010f5e:	9000      	str	r0, [sp, #0]
 8010f60:	0011      	movs	r1, r2
 8010f62:	0020      	movs	r0, r4
 8010f64:	0017      	movs	r7, r2
 8010f66:	f7ff ffdb 	bl	8010f20 <__mcmp>
 8010f6a:	1e05      	subs	r5, r0, #0
 8010f6c:	d110      	bne.n	8010f90 <__mdiff+0x38>
 8010f6e:	0001      	movs	r1, r0
 8010f70:	9800      	ldr	r0, [sp, #0]
 8010f72:	f7ff fcfb 	bl	801096c <_Balloc>
 8010f76:	1e02      	subs	r2, r0, #0
 8010f78:	d104      	bne.n	8010f84 <__mdiff+0x2c>
 8010f7a:	4b40      	ldr	r3, [pc, #256]	@ (801107c <__mdiff+0x124>)
 8010f7c:	4840      	ldr	r0, [pc, #256]	@ (8011080 <__mdiff+0x128>)
 8010f7e:	4941      	ldr	r1, [pc, #260]	@ (8011084 <__mdiff+0x12c>)
 8010f80:	f001 faaa 	bl	80124d8 <__assert_func>
 8010f84:	2301      	movs	r3, #1
 8010f86:	6145      	str	r5, [r0, #20]
 8010f88:	6103      	str	r3, [r0, #16]
 8010f8a:	0010      	movs	r0, r2
 8010f8c:	b007      	add	sp, #28
 8010f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f90:	2600      	movs	r6, #0
 8010f92:	42b0      	cmp	r0, r6
 8010f94:	da03      	bge.n	8010f9e <__mdiff+0x46>
 8010f96:	0023      	movs	r3, r4
 8010f98:	003c      	movs	r4, r7
 8010f9a:	001f      	movs	r7, r3
 8010f9c:	3601      	adds	r6, #1
 8010f9e:	6861      	ldr	r1, [r4, #4]
 8010fa0:	9800      	ldr	r0, [sp, #0]
 8010fa2:	f7ff fce3 	bl	801096c <_Balloc>
 8010fa6:	1e02      	subs	r2, r0, #0
 8010fa8:	d103      	bne.n	8010fb2 <__mdiff+0x5a>
 8010faa:	4b34      	ldr	r3, [pc, #208]	@ (801107c <__mdiff+0x124>)
 8010fac:	4834      	ldr	r0, [pc, #208]	@ (8011080 <__mdiff+0x128>)
 8010fae:	4936      	ldr	r1, [pc, #216]	@ (8011088 <__mdiff+0x130>)
 8010fb0:	e7e6      	b.n	8010f80 <__mdiff+0x28>
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	3414      	adds	r4, #20
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	18e3      	adds	r3, r4, r3
 8010fbc:	0021      	movs	r1, r4
 8010fbe:	9401      	str	r4, [sp, #4]
 8010fc0:	003c      	movs	r4, r7
 8010fc2:	9302      	str	r3, [sp, #8]
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	3414      	adds	r4, #20
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	18e3      	adds	r3, r4, r3
 8010fcc:	9303      	str	r3, [sp, #12]
 8010fce:	0003      	movs	r3, r0
 8010fd0:	60c6      	str	r6, [r0, #12]
 8010fd2:	468c      	mov	ip, r1
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	3314      	adds	r3, #20
 8010fd8:	9304      	str	r3, [sp, #16]
 8010fda:	9305      	str	r3, [sp, #20]
 8010fdc:	4663      	mov	r3, ip
 8010fde:	cb20      	ldmia	r3!, {r5}
 8010fe0:	b2a9      	uxth	r1, r5
 8010fe2:	000e      	movs	r6, r1
 8010fe4:	469c      	mov	ip, r3
 8010fe6:	cc08      	ldmia	r4!, {r3}
 8010fe8:	0c2d      	lsrs	r5, r5, #16
 8010fea:	b299      	uxth	r1, r3
 8010fec:	1a71      	subs	r1, r6, r1
 8010fee:	1809      	adds	r1, r1, r0
 8010ff0:	0c1b      	lsrs	r3, r3, #16
 8010ff2:	1408      	asrs	r0, r1, #16
 8010ff4:	1aeb      	subs	r3, r5, r3
 8010ff6:	181b      	adds	r3, r3, r0
 8010ff8:	1418      	asrs	r0, r3, #16
 8010ffa:	b289      	uxth	r1, r1
 8010ffc:	041b      	lsls	r3, r3, #16
 8010ffe:	4319      	orrs	r1, r3
 8011000:	9b05      	ldr	r3, [sp, #20]
 8011002:	c302      	stmia	r3!, {r1}
 8011004:	9305      	str	r3, [sp, #20]
 8011006:	9b03      	ldr	r3, [sp, #12]
 8011008:	42a3      	cmp	r3, r4
 801100a:	d8e7      	bhi.n	8010fdc <__mdiff+0x84>
 801100c:	0039      	movs	r1, r7
 801100e:	9c03      	ldr	r4, [sp, #12]
 8011010:	3115      	adds	r1, #21
 8011012:	2304      	movs	r3, #4
 8011014:	428c      	cmp	r4, r1
 8011016:	d304      	bcc.n	8011022 <__mdiff+0xca>
 8011018:	1be3      	subs	r3, r4, r7
 801101a:	3b15      	subs	r3, #21
 801101c:	089b      	lsrs	r3, r3, #2
 801101e:	3301      	adds	r3, #1
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	9901      	ldr	r1, [sp, #4]
 8011024:	18cd      	adds	r5, r1, r3
 8011026:	9904      	ldr	r1, [sp, #16]
 8011028:	002e      	movs	r6, r5
 801102a:	18cb      	adds	r3, r1, r3
 801102c:	001f      	movs	r7, r3
 801102e:	9902      	ldr	r1, [sp, #8]
 8011030:	428e      	cmp	r6, r1
 8011032:	d311      	bcc.n	8011058 <__mdiff+0x100>
 8011034:	9c02      	ldr	r4, [sp, #8]
 8011036:	1ee9      	subs	r1, r5, #3
 8011038:	2000      	movs	r0, #0
 801103a:	428c      	cmp	r4, r1
 801103c:	d304      	bcc.n	8011048 <__mdiff+0xf0>
 801103e:	0021      	movs	r1, r4
 8011040:	3103      	adds	r1, #3
 8011042:	1b49      	subs	r1, r1, r5
 8011044:	0889      	lsrs	r1, r1, #2
 8011046:	0088      	lsls	r0, r1, #2
 8011048:	181b      	adds	r3, r3, r0
 801104a:	3b04      	subs	r3, #4
 801104c:	6819      	ldr	r1, [r3, #0]
 801104e:	2900      	cmp	r1, #0
 8011050:	d010      	beq.n	8011074 <__mdiff+0x11c>
 8011052:	9b00      	ldr	r3, [sp, #0]
 8011054:	6113      	str	r3, [r2, #16]
 8011056:	e798      	b.n	8010f8a <__mdiff+0x32>
 8011058:	4684      	mov	ip, r0
 801105a:	ce02      	ldmia	r6!, {r1}
 801105c:	b288      	uxth	r0, r1
 801105e:	4460      	add	r0, ip
 8011060:	1400      	asrs	r0, r0, #16
 8011062:	0c0c      	lsrs	r4, r1, #16
 8011064:	1904      	adds	r4, r0, r4
 8011066:	4461      	add	r1, ip
 8011068:	1420      	asrs	r0, r4, #16
 801106a:	b289      	uxth	r1, r1
 801106c:	0424      	lsls	r4, r4, #16
 801106e:	4321      	orrs	r1, r4
 8011070:	c702      	stmia	r7!, {r1}
 8011072:	e7dc      	b.n	801102e <__mdiff+0xd6>
 8011074:	9900      	ldr	r1, [sp, #0]
 8011076:	3901      	subs	r1, #1
 8011078:	9100      	str	r1, [sp, #0]
 801107a:	e7e6      	b.n	801104a <__mdiff+0xf2>
 801107c:	08013c5d 	.word	0x08013c5d
 8011080:	08013c6e 	.word	0x08013c6e
 8011084:	00000237 	.word	0x00000237
 8011088:	00000245 	.word	0x00000245

0801108c <__ulp>:
 801108c:	b510      	push	{r4, lr}
 801108e:	2400      	movs	r4, #0
 8011090:	4b0c      	ldr	r3, [pc, #48]	@ (80110c4 <__ulp+0x38>)
 8011092:	4a0d      	ldr	r2, [pc, #52]	@ (80110c8 <__ulp+0x3c>)
 8011094:	400b      	ands	r3, r1
 8011096:	189b      	adds	r3, r3, r2
 8011098:	42a3      	cmp	r3, r4
 801109a:	dc06      	bgt.n	80110aa <__ulp+0x1e>
 801109c:	425b      	negs	r3, r3
 801109e:	151a      	asrs	r2, r3, #20
 80110a0:	2a13      	cmp	r2, #19
 80110a2:	dc05      	bgt.n	80110b0 <__ulp+0x24>
 80110a4:	2380      	movs	r3, #128	@ 0x80
 80110a6:	031b      	lsls	r3, r3, #12
 80110a8:	4113      	asrs	r3, r2
 80110aa:	0019      	movs	r1, r3
 80110ac:	0020      	movs	r0, r4
 80110ae:	bd10      	pop	{r4, pc}
 80110b0:	3a14      	subs	r2, #20
 80110b2:	2401      	movs	r4, #1
 80110b4:	2a1e      	cmp	r2, #30
 80110b6:	dc02      	bgt.n	80110be <__ulp+0x32>
 80110b8:	2480      	movs	r4, #128	@ 0x80
 80110ba:	0624      	lsls	r4, r4, #24
 80110bc:	40d4      	lsrs	r4, r2
 80110be:	2300      	movs	r3, #0
 80110c0:	e7f3      	b.n	80110aa <__ulp+0x1e>
 80110c2:	46c0      	nop			@ (mov r8, r8)
 80110c4:	7ff00000 	.word	0x7ff00000
 80110c8:	fcc00000 	.word	0xfcc00000

080110cc <__b2d>:
 80110cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110ce:	0006      	movs	r6, r0
 80110d0:	6903      	ldr	r3, [r0, #16]
 80110d2:	3614      	adds	r6, #20
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	18f3      	adds	r3, r6, r3
 80110d8:	1f1d      	subs	r5, r3, #4
 80110da:	682c      	ldr	r4, [r5, #0]
 80110dc:	000f      	movs	r7, r1
 80110de:	0020      	movs	r0, r4
 80110e0:	9301      	str	r3, [sp, #4]
 80110e2:	f7ff fd3b 	bl	8010b5c <__hi0bits>
 80110e6:	2220      	movs	r2, #32
 80110e8:	1a12      	subs	r2, r2, r0
 80110ea:	603a      	str	r2, [r7, #0]
 80110ec:	0003      	movs	r3, r0
 80110ee:	4a1c      	ldr	r2, [pc, #112]	@ (8011160 <__b2d+0x94>)
 80110f0:	280a      	cmp	r0, #10
 80110f2:	dc15      	bgt.n	8011120 <__b2d+0x54>
 80110f4:	210b      	movs	r1, #11
 80110f6:	0027      	movs	r7, r4
 80110f8:	1a09      	subs	r1, r1, r0
 80110fa:	40cf      	lsrs	r7, r1
 80110fc:	433a      	orrs	r2, r7
 80110fe:	468c      	mov	ip, r1
 8011100:	0011      	movs	r1, r2
 8011102:	2200      	movs	r2, #0
 8011104:	42ae      	cmp	r6, r5
 8011106:	d202      	bcs.n	801110e <__b2d+0x42>
 8011108:	9a01      	ldr	r2, [sp, #4]
 801110a:	3a08      	subs	r2, #8
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	3315      	adds	r3, #21
 8011110:	409c      	lsls	r4, r3
 8011112:	4663      	mov	r3, ip
 8011114:	0027      	movs	r7, r4
 8011116:	40da      	lsrs	r2, r3
 8011118:	4317      	orrs	r7, r2
 801111a:	0038      	movs	r0, r7
 801111c:	b003      	add	sp, #12
 801111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011120:	2700      	movs	r7, #0
 8011122:	42ae      	cmp	r6, r5
 8011124:	d202      	bcs.n	801112c <__b2d+0x60>
 8011126:	9d01      	ldr	r5, [sp, #4]
 8011128:	3d08      	subs	r5, #8
 801112a:	682f      	ldr	r7, [r5, #0]
 801112c:	210b      	movs	r1, #11
 801112e:	4249      	negs	r1, r1
 8011130:	468c      	mov	ip, r1
 8011132:	449c      	add	ip, r3
 8011134:	2b0b      	cmp	r3, #11
 8011136:	d010      	beq.n	801115a <__b2d+0x8e>
 8011138:	4661      	mov	r1, ip
 801113a:	2320      	movs	r3, #32
 801113c:	408c      	lsls	r4, r1
 801113e:	1a5b      	subs	r3, r3, r1
 8011140:	0039      	movs	r1, r7
 8011142:	40d9      	lsrs	r1, r3
 8011144:	430c      	orrs	r4, r1
 8011146:	4322      	orrs	r2, r4
 8011148:	0011      	movs	r1, r2
 801114a:	2200      	movs	r2, #0
 801114c:	42b5      	cmp	r5, r6
 801114e:	d901      	bls.n	8011154 <__b2d+0x88>
 8011150:	3d04      	subs	r5, #4
 8011152:	682a      	ldr	r2, [r5, #0]
 8011154:	4664      	mov	r4, ip
 8011156:	40a7      	lsls	r7, r4
 8011158:	e7dd      	b.n	8011116 <__b2d+0x4a>
 801115a:	4322      	orrs	r2, r4
 801115c:	0011      	movs	r1, r2
 801115e:	e7dc      	b.n	801111a <__b2d+0x4e>
 8011160:	3ff00000 	.word	0x3ff00000

08011164 <__d2b>:
 8011164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011166:	2101      	movs	r1, #1
 8011168:	0016      	movs	r6, r2
 801116a:	001f      	movs	r7, r3
 801116c:	f7ff fbfe 	bl	801096c <_Balloc>
 8011170:	1e04      	subs	r4, r0, #0
 8011172:	d105      	bne.n	8011180 <__d2b+0x1c>
 8011174:	0022      	movs	r2, r4
 8011176:	4b25      	ldr	r3, [pc, #148]	@ (801120c <__d2b+0xa8>)
 8011178:	4825      	ldr	r0, [pc, #148]	@ (8011210 <__d2b+0xac>)
 801117a:	4926      	ldr	r1, [pc, #152]	@ (8011214 <__d2b+0xb0>)
 801117c:	f001 f9ac 	bl	80124d8 <__assert_func>
 8011180:	033b      	lsls	r3, r7, #12
 8011182:	007d      	lsls	r5, r7, #1
 8011184:	0b1b      	lsrs	r3, r3, #12
 8011186:	0d6d      	lsrs	r5, r5, #21
 8011188:	d002      	beq.n	8011190 <__d2b+0x2c>
 801118a:	2280      	movs	r2, #128	@ 0x80
 801118c:	0352      	lsls	r2, r2, #13
 801118e:	4313      	orrs	r3, r2
 8011190:	9301      	str	r3, [sp, #4]
 8011192:	2e00      	cmp	r6, #0
 8011194:	d025      	beq.n	80111e2 <__d2b+0x7e>
 8011196:	4668      	mov	r0, sp
 8011198:	9600      	str	r6, [sp, #0]
 801119a:	f7ff fd00 	bl	8010b9e <__lo0bits>
 801119e:	9b01      	ldr	r3, [sp, #4]
 80111a0:	9900      	ldr	r1, [sp, #0]
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d01b      	beq.n	80111de <__d2b+0x7a>
 80111a6:	2220      	movs	r2, #32
 80111a8:	001e      	movs	r6, r3
 80111aa:	1a12      	subs	r2, r2, r0
 80111ac:	4096      	lsls	r6, r2
 80111ae:	0032      	movs	r2, r6
 80111b0:	40c3      	lsrs	r3, r0
 80111b2:	430a      	orrs	r2, r1
 80111b4:	6162      	str	r2, [r4, #20]
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	9e01      	ldr	r6, [sp, #4]
 80111ba:	61a6      	str	r6, [r4, #24]
 80111bc:	1e73      	subs	r3, r6, #1
 80111be:	419e      	sbcs	r6, r3
 80111c0:	3601      	adds	r6, #1
 80111c2:	6126      	str	r6, [r4, #16]
 80111c4:	2d00      	cmp	r5, #0
 80111c6:	d014      	beq.n	80111f2 <__d2b+0x8e>
 80111c8:	2635      	movs	r6, #53	@ 0x35
 80111ca:	4b13      	ldr	r3, [pc, #76]	@ (8011218 <__d2b+0xb4>)
 80111cc:	18ed      	adds	r5, r5, r3
 80111ce:	9b08      	ldr	r3, [sp, #32]
 80111d0:	182d      	adds	r5, r5, r0
 80111d2:	601d      	str	r5, [r3, #0]
 80111d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111d6:	1a36      	subs	r6, r6, r0
 80111d8:	601e      	str	r6, [r3, #0]
 80111da:	0020      	movs	r0, r4
 80111dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111de:	6161      	str	r1, [r4, #20]
 80111e0:	e7ea      	b.n	80111b8 <__d2b+0x54>
 80111e2:	a801      	add	r0, sp, #4
 80111e4:	f7ff fcdb 	bl	8010b9e <__lo0bits>
 80111e8:	9b01      	ldr	r3, [sp, #4]
 80111ea:	2601      	movs	r6, #1
 80111ec:	6163      	str	r3, [r4, #20]
 80111ee:	3020      	adds	r0, #32
 80111f0:	e7e7      	b.n	80111c2 <__d2b+0x5e>
 80111f2:	4b0a      	ldr	r3, [pc, #40]	@ (801121c <__d2b+0xb8>)
 80111f4:	18c0      	adds	r0, r0, r3
 80111f6:	9b08      	ldr	r3, [sp, #32]
 80111f8:	6018      	str	r0, [r3, #0]
 80111fa:	4b09      	ldr	r3, [pc, #36]	@ (8011220 <__d2b+0xbc>)
 80111fc:	18f3      	adds	r3, r6, r3
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	18e3      	adds	r3, r4, r3
 8011202:	6958      	ldr	r0, [r3, #20]
 8011204:	f7ff fcaa 	bl	8010b5c <__hi0bits>
 8011208:	0176      	lsls	r6, r6, #5
 801120a:	e7e3      	b.n	80111d4 <__d2b+0x70>
 801120c:	08013c5d 	.word	0x08013c5d
 8011210:	08013c6e 	.word	0x08013c6e
 8011214:	0000030f 	.word	0x0000030f
 8011218:	fffffbcd 	.word	0xfffffbcd
 801121c:	fffffbce 	.word	0xfffffbce
 8011220:	3fffffff 	.word	0x3fffffff

08011224 <__ratio>:
 8011224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011226:	b087      	sub	sp, #28
 8011228:	000f      	movs	r7, r1
 801122a:	a904      	add	r1, sp, #16
 801122c:	0006      	movs	r6, r0
 801122e:	f7ff ff4d 	bl	80110cc <__b2d>
 8011232:	9000      	str	r0, [sp, #0]
 8011234:	9101      	str	r1, [sp, #4]
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	9c01      	ldr	r4, [sp, #4]
 801123a:	0038      	movs	r0, r7
 801123c:	a905      	add	r1, sp, #20
 801123e:	9302      	str	r3, [sp, #8]
 8011240:	9403      	str	r4, [sp, #12]
 8011242:	f7ff ff43 	bl	80110cc <__b2d>
 8011246:	000d      	movs	r5, r1
 8011248:	0002      	movs	r2, r0
 801124a:	000b      	movs	r3, r1
 801124c:	6930      	ldr	r0, [r6, #16]
 801124e:	6939      	ldr	r1, [r7, #16]
 8011250:	9e04      	ldr	r6, [sp, #16]
 8011252:	1a40      	subs	r0, r0, r1
 8011254:	9905      	ldr	r1, [sp, #20]
 8011256:	0140      	lsls	r0, r0, #5
 8011258:	1a71      	subs	r1, r6, r1
 801125a:	1841      	adds	r1, r0, r1
 801125c:	0508      	lsls	r0, r1, #20
 801125e:	2900      	cmp	r1, #0
 8011260:	dd08      	ble.n	8011274 <__ratio+0x50>
 8011262:	9901      	ldr	r1, [sp, #4]
 8011264:	1841      	adds	r1, r0, r1
 8011266:	9103      	str	r1, [sp, #12]
 8011268:	9802      	ldr	r0, [sp, #8]
 801126a:	9903      	ldr	r1, [sp, #12]
 801126c:	f7f0 fd58 	bl	8001d20 <__aeabi_ddiv>
 8011270:	b007      	add	sp, #28
 8011272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011274:	1a2b      	subs	r3, r5, r0
 8011276:	e7f7      	b.n	8011268 <__ratio+0x44>

08011278 <__copybits>:
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	0014      	movs	r4, r2
 801127c:	0005      	movs	r5, r0
 801127e:	3901      	subs	r1, #1
 8011280:	6913      	ldr	r3, [r2, #16]
 8011282:	1149      	asrs	r1, r1, #5
 8011284:	3101      	adds	r1, #1
 8011286:	0089      	lsls	r1, r1, #2
 8011288:	3414      	adds	r4, #20
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	1841      	adds	r1, r0, r1
 801128e:	18e3      	adds	r3, r4, r3
 8011290:	42a3      	cmp	r3, r4
 8011292:	d80d      	bhi.n	80112b0 <__copybits+0x38>
 8011294:	0014      	movs	r4, r2
 8011296:	3411      	adds	r4, #17
 8011298:	2500      	movs	r5, #0
 801129a:	429c      	cmp	r4, r3
 801129c:	d803      	bhi.n	80112a6 <__copybits+0x2e>
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	3b11      	subs	r3, #17
 80112a2:	089b      	lsrs	r3, r3, #2
 80112a4:	009d      	lsls	r5, r3, #2
 80112a6:	2300      	movs	r3, #0
 80112a8:	1940      	adds	r0, r0, r5
 80112aa:	4281      	cmp	r1, r0
 80112ac:	d803      	bhi.n	80112b6 <__copybits+0x3e>
 80112ae:	bd70      	pop	{r4, r5, r6, pc}
 80112b0:	cc40      	ldmia	r4!, {r6}
 80112b2:	c540      	stmia	r5!, {r6}
 80112b4:	e7ec      	b.n	8011290 <__copybits+0x18>
 80112b6:	c008      	stmia	r0!, {r3}
 80112b8:	e7f7      	b.n	80112aa <__copybits+0x32>

080112ba <__any_on>:
 80112ba:	0002      	movs	r2, r0
 80112bc:	6900      	ldr	r0, [r0, #16]
 80112be:	b510      	push	{r4, lr}
 80112c0:	3214      	adds	r2, #20
 80112c2:	114b      	asrs	r3, r1, #5
 80112c4:	4298      	cmp	r0, r3
 80112c6:	db13      	blt.n	80112f0 <__any_on+0x36>
 80112c8:	dd0c      	ble.n	80112e4 <__any_on+0x2a>
 80112ca:	241f      	movs	r4, #31
 80112cc:	0008      	movs	r0, r1
 80112ce:	4020      	ands	r0, r4
 80112d0:	4221      	tst	r1, r4
 80112d2:	d007      	beq.n	80112e4 <__any_on+0x2a>
 80112d4:	0099      	lsls	r1, r3, #2
 80112d6:	588c      	ldr	r4, [r1, r2]
 80112d8:	0021      	movs	r1, r4
 80112da:	40c1      	lsrs	r1, r0
 80112dc:	4081      	lsls	r1, r0
 80112de:	2001      	movs	r0, #1
 80112e0:	428c      	cmp	r4, r1
 80112e2:	d104      	bne.n	80112ee <__any_on+0x34>
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	18d3      	adds	r3, r2, r3
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d803      	bhi.n	80112f4 <__any_on+0x3a>
 80112ec:	2000      	movs	r0, #0
 80112ee:	bd10      	pop	{r4, pc}
 80112f0:	0003      	movs	r3, r0
 80112f2:	e7f7      	b.n	80112e4 <__any_on+0x2a>
 80112f4:	3b04      	subs	r3, #4
 80112f6:	6819      	ldr	r1, [r3, #0]
 80112f8:	2900      	cmp	r1, #0
 80112fa:	d0f5      	beq.n	80112e8 <__any_on+0x2e>
 80112fc:	2001      	movs	r0, #1
 80112fe:	e7f6      	b.n	80112ee <__any_on+0x34>

08011300 <sulp>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	0016      	movs	r6, r2
 8011304:	000d      	movs	r5, r1
 8011306:	f7ff fec1 	bl	801108c <__ulp>
 801130a:	2e00      	cmp	r6, #0
 801130c:	d00d      	beq.n	801132a <sulp+0x2a>
 801130e:	236b      	movs	r3, #107	@ 0x6b
 8011310:	006a      	lsls	r2, r5, #1
 8011312:	0d52      	lsrs	r2, r2, #21
 8011314:	1a9b      	subs	r3, r3, r2
 8011316:	2b00      	cmp	r3, #0
 8011318:	dd07      	ble.n	801132a <sulp+0x2a>
 801131a:	2400      	movs	r4, #0
 801131c:	4a03      	ldr	r2, [pc, #12]	@ (801132c <sulp+0x2c>)
 801131e:	051b      	lsls	r3, r3, #20
 8011320:	189d      	adds	r5, r3, r2
 8011322:	002b      	movs	r3, r5
 8011324:	0022      	movs	r2, r4
 8011326:	f7f1 f93f 	bl	80025a8 <__aeabi_dmul>
 801132a:	bd70      	pop	{r4, r5, r6, pc}
 801132c:	3ff00000 	.word	0x3ff00000

08011330 <_strtod_l>:
 8011330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011332:	b0a3      	sub	sp, #140	@ 0x8c
 8011334:	921b      	str	r2, [sp, #108]	@ 0x6c
 8011336:	2200      	movs	r2, #0
 8011338:	2600      	movs	r6, #0
 801133a:	2700      	movs	r7, #0
 801133c:	9005      	str	r0, [sp, #20]
 801133e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011340:	921e      	str	r2, [sp, #120]	@ 0x78
 8011342:	911d      	str	r1, [sp, #116]	@ 0x74
 8011344:	780a      	ldrb	r2, [r1, #0]
 8011346:	2a2b      	cmp	r2, #43	@ 0x2b
 8011348:	d053      	beq.n	80113f2 <_strtod_l+0xc2>
 801134a:	d83f      	bhi.n	80113cc <_strtod_l+0x9c>
 801134c:	2a0d      	cmp	r2, #13
 801134e:	d839      	bhi.n	80113c4 <_strtod_l+0x94>
 8011350:	2a08      	cmp	r2, #8
 8011352:	d839      	bhi.n	80113c8 <_strtod_l+0x98>
 8011354:	2a00      	cmp	r2, #0
 8011356:	d042      	beq.n	80113de <_strtod_l+0xae>
 8011358:	2200      	movs	r2, #0
 801135a:	9212      	str	r2, [sp, #72]	@ 0x48
 801135c:	2100      	movs	r1, #0
 801135e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8011360:	910c      	str	r1, [sp, #48]	@ 0x30
 8011362:	782a      	ldrb	r2, [r5, #0]
 8011364:	2a30      	cmp	r2, #48	@ 0x30
 8011366:	d000      	beq.n	801136a <_strtod_l+0x3a>
 8011368:	e083      	b.n	8011472 <_strtod_l+0x142>
 801136a:	786a      	ldrb	r2, [r5, #1]
 801136c:	3120      	adds	r1, #32
 801136e:	438a      	bics	r2, r1
 8011370:	2a58      	cmp	r2, #88	@ 0x58
 8011372:	d000      	beq.n	8011376 <_strtod_l+0x46>
 8011374:	e073      	b.n	801145e <_strtod_l+0x12e>
 8011376:	9302      	str	r3, [sp, #8]
 8011378:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801137a:	4a95      	ldr	r2, [pc, #596]	@ (80115d0 <_strtod_l+0x2a0>)
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	ab1e      	add	r3, sp, #120	@ 0x78
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	9805      	ldr	r0, [sp, #20]
 8011384:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011386:	a91d      	add	r1, sp, #116	@ 0x74
 8011388:	f001 f95a 	bl	8012640 <__gethex>
 801138c:	230f      	movs	r3, #15
 801138e:	0002      	movs	r2, r0
 8011390:	401a      	ands	r2, r3
 8011392:	0004      	movs	r4, r0
 8011394:	9206      	str	r2, [sp, #24]
 8011396:	4218      	tst	r0, r3
 8011398:	d005      	beq.n	80113a6 <_strtod_l+0x76>
 801139a:	2a06      	cmp	r2, #6
 801139c:	d12b      	bne.n	80113f6 <_strtod_l+0xc6>
 801139e:	2300      	movs	r3, #0
 80113a0:	3501      	adds	r5, #1
 80113a2:	951d      	str	r5, [sp, #116]	@ 0x74
 80113a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80113a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d002      	beq.n	80113b2 <_strtod_l+0x82>
 80113ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80113ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80113b0:	6013      	str	r3, [r2, #0]
 80113b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d019      	beq.n	80113ec <_strtod_l+0xbc>
 80113b8:	2380      	movs	r3, #128	@ 0x80
 80113ba:	0030      	movs	r0, r6
 80113bc:	061b      	lsls	r3, r3, #24
 80113be:	18f9      	adds	r1, r7, r3
 80113c0:	b023      	add	sp, #140	@ 0x8c
 80113c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c4:	2a20      	cmp	r2, #32
 80113c6:	d1c7      	bne.n	8011358 <_strtod_l+0x28>
 80113c8:	3101      	adds	r1, #1
 80113ca:	e7ba      	b.n	8011342 <_strtod_l+0x12>
 80113cc:	2a2d      	cmp	r2, #45	@ 0x2d
 80113ce:	d1c3      	bne.n	8011358 <_strtod_l+0x28>
 80113d0:	3a2c      	subs	r2, #44	@ 0x2c
 80113d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80113d4:	1c4a      	adds	r2, r1, #1
 80113d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80113d8:	784a      	ldrb	r2, [r1, #1]
 80113da:	2a00      	cmp	r2, #0
 80113dc:	d1be      	bne.n	801135c <_strtod_l+0x2c>
 80113de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80113e2:	2300      	movs	r3, #0
 80113e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80113e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1df      	bne.n	80113ac <_strtod_l+0x7c>
 80113ec:	0030      	movs	r0, r6
 80113ee:	0039      	movs	r1, r7
 80113f0:	e7e6      	b.n	80113c0 <_strtod_l+0x90>
 80113f2:	2200      	movs	r2, #0
 80113f4:	e7ed      	b.n	80113d2 <_strtod_l+0xa2>
 80113f6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80113f8:	2a00      	cmp	r2, #0
 80113fa:	d007      	beq.n	801140c <_strtod_l+0xdc>
 80113fc:	2135      	movs	r1, #53	@ 0x35
 80113fe:	a820      	add	r0, sp, #128	@ 0x80
 8011400:	f7ff ff3a 	bl	8011278 <__copybits>
 8011404:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011406:	9805      	ldr	r0, [sp, #20]
 8011408:	f7ff faf4 	bl	80109f4 <_Bfree>
 801140c:	9806      	ldr	r0, [sp, #24]
 801140e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011410:	3801      	subs	r0, #1
 8011412:	2804      	cmp	r0, #4
 8011414:	d806      	bhi.n	8011424 <_strtod_l+0xf4>
 8011416:	f7ee fe7f 	bl	8000118 <__gnu_thumb1_case_uqi>
 801141a:	0312      	.short	0x0312
 801141c:	1e1c      	.short	0x1e1c
 801141e:	12          	.byte	0x12
 801141f:	00          	.byte	0x00
 8011420:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011422:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8011424:	05e4      	lsls	r4, r4, #23
 8011426:	d502      	bpl.n	801142e <_strtod_l+0xfe>
 8011428:	2380      	movs	r3, #128	@ 0x80
 801142a:	061b      	lsls	r3, r3, #24
 801142c:	431f      	orrs	r7, r3
 801142e:	4b69      	ldr	r3, [pc, #420]	@ (80115d4 <_strtod_l+0x2a4>)
 8011430:	423b      	tst	r3, r7
 8011432:	d1b8      	bne.n	80113a6 <_strtod_l+0x76>
 8011434:	f7fe facc 	bl	800f9d0 <__errno>
 8011438:	2322      	movs	r3, #34	@ 0x22
 801143a:	6003      	str	r3, [r0, #0]
 801143c:	e7b3      	b.n	80113a6 <_strtod_l+0x76>
 801143e:	4966      	ldr	r1, [pc, #408]	@ (80115d8 <_strtod_l+0x2a8>)
 8011440:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011442:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011444:	400a      	ands	r2, r1
 8011446:	4965      	ldr	r1, [pc, #404]	@ (80115dc <_strtod_l+0x2ac>)
 8011448:	185b      	adds	r3, r3, r1
 801144a:	051b      	lsls	r3, r3, #20
 801144c:	431a      	orrs	r2, r3
 801144e:	0017      	movs	r7, r2
 8011450:	e7e8      	b.n	8011424 <_strtod_l+0xf4>
 8011452:	4f60      	ldr	r7, [pc, #384]	@ (80115d4 <_strtod_l+0x2a4>)
 8011454:	e7e6      	b.n	8011424 <_strtod_l+0xf4>
 8011456:	2601      	movs	r6, #1
 8011458:	4f61      	ldr	r7, [pc, #388]	@ (80115e0 <_strtod_l+0x2b0>)
 801145a:	4276      	negs	r6, r6
 801145c:	e7e2      	b.n	8011424 <_strtod_l+0xf4>
 801145e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011460:	1c5a      	adds	r2, r3, #1
 8011462:	921d      	str	r2, [sp, #116]	@ 0x74
 8011464:	785b      	ldrb	r3, [r3, #1]
 8011466:	2b30      	cmp	r3, #48	@ 0x30
 8011468:	d0f9      	beq.n	801145e <_strtod_l+0x12e>
 801146a:	2b00      	cmp	r3, #0
 801146c:	d09b      	beq.n	80113a6 <_strtod_l+0x76>
 801146e:	2301      	movs	r3, #1
 8011470:	930c      	str	r3, [sp, #48]	@ 0x30
 8011472:	2500      	movs	r5, #0
 8011474:	220a      	movs	r2, #10
 8011476:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011478:	950d      	str	r5, [sp, #52]	@ 0x34
 801147a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801147c:	9508      	str	r5, [sp, #32]
 801147e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011480:	7804      	ldrb	r4, [r0, #0]
 8011482:	0023      	movs	r3, r4
 8011484:	3b30      	subs	r3, #48	@ 0x30
 8011486:	b2d9      	uxtb	r1, r3
 8011488:	2909      	cmp	r1, #9
 801148a:	d927      	bls.n	80114dc <_strtod_l+0x1ac>
 801148c:	2201      	movs	r2, #1
 801148e:	4955      	ldr	r1, [pc, #340]	@ (80115e4 <_strtod_l+0x2b4>)
 8011490:	f000 fff8 	bl	8012484 <strncmp>
 8011494:	2800      	cmp	r0, #0
 8011496:	d031      	beq.n	80114fc <_strtod_l+0x1cc>
 8011498:	2000      	movs	r0, #0
 801149a:	0023      	movs	r3, r4
 801149c:	4684      	mov	ip, r0
 801149e:	9a08      	ldr	r2, [sp, #32]
 80114a0:	900e      	str	r0, [sp, #56]	@ 0x38
 80114a2:	9206      	str	r2, [sp, #24]
 80114a4:	2220      	movs	r2, #32
 80114a6:	0019      	movs	r1, r3
 80114a8:	4391      	bics	r1, r2
 80114aa:	000a      	movs	r2, r1
 80114ac:	2100      	movs	r1, #0
 80114ae:	9107      	str	r1, [sp, #28]
 80114b0:	2a45      	cmp	r2, #69	@ 0x45
 80114b2:	d000      	beq.n	80114b6 <_strtod_l+0x186>
 80114b4:	e0c0      	b.n	8011638 <_strtod_l+0x308>
 80114b6:	9b06      	ldr	r3, [sp, #24]
 80114b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80114ba:	4303      	orrs	r3, r0
 80114bc:	4313      	orrs	r3, r2
 80114be:	428b      	cmp	r3, r1
 80114c0:	d08d      	beq.n	80113de <_strtod_l+0xae>
 80114c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80114c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80114c6:	3301      	adds	r3, #1
 80114c8:	931d      	str	r3, [sp, #116]	@ 0x74
 80114ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114cc:	785b      	ldrb	r3, [r3, #1]
 80114ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80114d0:	d070      	beq.n	80115b4 <_strtod_l+0x284>
 80114d2:	000c      	movs	r4, r1
 80114d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80114d6:	d173      	bne.n	80115c0 <_strtod_l+0x290>
 80114d8:	2401      	movs	r4, #1
 80114da:	e06c      	b.n	80115b6 <_strtod_l+0x286>
 80114dc:	9908      	ldr	r1, [sp, #32]
 80114de:	2908      	cmp	r1, #8
 80114e0:	dc09      	bgt.n	80114f6 <_strtod_l+0x1c6>
 80114e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80114e4:	4351      	muls	r1, r2
 80114e6:	185b      	adds	r3, r3, r1
 80114e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80114ea:	9b08      	ldr	r3, [sp, #32]
 80114ec:	3001      	adds	r0, #1
 80114ee:	3301      	adds	r3, #1
 80114f0:	9308      	str	r3, [sp, #32]
 80114f2:	901d      	str	r0, [sp, #116]	@ 0x74
 80114f4:	e7c3      	b.n	801147e <_strtod_l+0x14e>
 80114f6:	4355      	muls	r5, r2
 80114f8:	195d      	adds	r5, r3, r5
 80114fa:	e7f6      	b.n	80114ea <_strtod_l+0x1ba>
 80114fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	921d      	str	r2, [sp, #116]	@ 0x74
 8011502:	9a08      	ldr	r2, [sp, #32]
 8011504:	785b      	ldrb	r3, [r3, #1]
 8011506:	2a00      	cmp	r2, #0
 8011508:	d03a      	beq.n	8011580 <_strtod_l+0x250>
 801150a:	900e      	str	r0, [sp, #56]	@ 0x38
 801150c:	9206      	str	r2, [sp, #24]
 801150e:	001a      	movs	r2, r3
 8011510:	3a30      	subs	r2, #48	@ 0x30
 8011512:	2a09      	cmp	r2, #9
 8011514:	d912      	bls.n	801153c <_strtod_l+0x20c>
 8011516:	2201      	movs	r2, #1
 8011518:	4694      	mov	ip, r2
 801151a:	e7c3      	b.n	80114a4 <_strtod_l+0x174>
 801151c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801151e:	3001      	adds	r0, #1
 8011520:	1c5a      	adds	r2, r3, #1
 8011522:	921d      	str	r2, [sp, #116]	@ 0x74
 8011524:	785b      	ldrb	r3, [r3, #1]
 8011526:	2b30      	cmp	r3, #48	@ 0x30
 8011528:	d0f8      	beq.n	801151c <_strtod_l+0x1ec>
 801152a:	001a      	movs	r2, r3
 801152c:	3a31      	subs	r2, #49	@ 0x31
 801152e:	2a08      	cmp	r2, #8
 8011530:	d83b      	bhi.n	80115aa <_strtod_l+0x27a>
 8011532:	900e      	str	r0, [sp, #56]	@ 0x38
 8011534:	2000      	movs	r0, #0
 8011536:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011538:	9006      	str	r0, [sp, #24]
 801153a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801153c:	001a      	movs	r2, r3
 801153e:	1c41      	adds	r1, r0, #1
 8011540:	3a30      	subs	r2, #48	@ 0x30
 8011542:	2b30      	cmp	r3, #48	@ 0x30
 8011544:	d016      	beq.n	8011574 <_strtod_l+0x244>
 8011546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011548:	185b      	adds	r3, r3, r1
 801154a:	930e      	str	r3, [sp, #56]	@ 0x38
 801154c:	9b06      	ldr	r3, [sp, #24]
 801154e:	210a      	movs	r1, #10
 8011550:	469c      	mov	ip, r3
 8011552:	4484      	add	ip, r0
 8011554:	459c      	cmp	ip, r3
 8011556:	d115      	bne.n	8011584 <_strtod_l+0x254>
 8011558:	9906      	ldr	r1, [sp, #24]
 801155a:	9b06      	ldr	r3, [sp, #24]
 801155c:	3101      	adds	r1, #1
 801155e:	1809      	adds	r1, r1, r0
 8011560:	181b      	adds	r3, r3, r0
 8011562:	9106      	str	r1, [sp, #24]
 8011564:	2b08      	cmp	r3, #8
 8011566:	dc19      	bgt.n	801159c <_strtod_l+0x26c>
 8011568:	230a      	movs	r3, #10
 801156a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801156c:	434b      	muls	r3, r1
 801156e:	2100      	movs	r1, #0
 8011570:	18d3      	adds	r3, r2, r3
 8011572:	930d      	str	r3, [sp, #52]	@ 0x34
 8011574:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011576:	0008      	movs	r0, r1
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	921d      	str	r2, [sp, #116]	@ 0x74
 801157c:	785b      	ldrb	r3, [r3, #1]
 801157e:	e7c6      	b.n	801150e <_strtod_l+0x1de>
 8011580:	9808      	ldr	r0, [sp, #32]
 8011582:	e7d0      	b.n	8011526 <_strtod_l+0x1f6>
 8011584:	1c5c      	adds	r4, r3, #1
 8011586:	2b08      	cmp	r3, #8
 8011588:	dc04      	bgt.n	8011594 <_strtod_l+0x264>
 801158a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801158c:	434b      	muls	r3, r1
 801158e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011590:	0023      	movs	r3, r4
 8011592:	e7df      	b.n	8011554 <_strtod_l+0x224>
 8011594:	2c10      	cmp	r4, #16
 8011596:	dcfb      	bgt.n	8011590 <_strtod_l+0x260>
 8011598:	434d      	muls	r5, r1
 801159a:	e7f9      	b.n	8011590 <_strtod_l+0x260>
 801159c:	2100      	movs	r1, #0
 801159e:	2b0f      	cmp	r3, #15
 80115a0:	dce8      	bgt.n	8011574 <_strtod_l+0x244>
 80115a2:	230a      	movs	r3, #10
 80115a4:	435d      	muls	r5, r3
 80115a6:	1955      	adds	r5, r2, r5
 80115a8:	e7e4      	b.n	8011574 <_strtod_l+0x244>
 80115aa:	2200      	movs	r2, #0
 80115ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80115ae:	9206      	str	r2, [sp, #24]
 80115b0:	3201      	adds	r2, #1
 80115b2:	e7b1      	b.n	8011518 <_strtod_l+0x1e8>
 80115b4:	2400      	movs	r4, #0
 80115b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b8:	3302      	adds	r3, #2
 80115ba:	931d      	str	r3, [sp, #116]	@ 0x74
 80115bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115be:	789b      	ldrb	r3, [r3, #2]
 80115c0:	001a      	movs	r2, r3
 80115c2:	3a30      	subs	r2, #48	@ 0x30
 80115c4:	2a09      	cmp	r2, #9
 80115c6:	d913      	bls.n	80115f0 <_strtod_l+0x2c0>
 80115c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115ca:	921d      	str	r2, [sp, #116]	@ 0x74
 80115cc:	2200      	movs	r2, #0
 80115ce:	e032      	b.n	8011636 <_strtod_l+0x306>
 80115d0:	08013de0 	.word	0x08013de0
 80115d4:	7ff00000 	.word	0x7ff00000
 80115d8:	ffefffff 	.word	0xffefffff
 80115dc:	00000433 	.word	0x00000433
 80115e0:	7fffffff 	.word	0x7fffffff
 80115e4:	08013dc8 	.word	0x08013dc8
 80115e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80115ea:	1c5a      	adds	r2, r3, #1
 80115ec:	921d      	str	r2, [sp, #116]	@ 0x74
 80115ee:	785b      	ldrb	r3, [r3, #1]
 80115f0:	2b30      	cmp	r3, #48	@ 0x30
 80115f2:	d0f9      	beq.n	80115e8 <_strtod_l+0x2b8>
 80115f4:	2200      	movs	r2, #0
 80115f6:	9207      	str	r2, [sp, #28]
 80115f8:	001a      	movs	r2, r3
 80115fa:	3a31      	subs	r2, #49	@ 0x31
 80115fc:	2a08      	cmp	r2, #8
 80115fe:	d81b      	bhi.n	8011638 <_strtod_l+0x308>
 8011600:	3b30      	subs	r3, #48	@ 0x30
 8011602:	9310      	str	r3, [sp, #64]	@ 0x40
 8011604:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011606:	9307      	str	r3, [sp, #28]
 8011608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	911d      	str	r1, [sp, #116]	@ 0x74
 801160e:	785b      	ldrb	r3, [r3, #1]
 8011610:	001a      	movs	r2, r3
 8011612:	3a30      	subs	r2, #48	@ 0x30
 8011614:	2a09      	cmp	r2, #9
 8011616:	d93a      	bls.n	801168e <_strtod_l+0x35e>
 8011618:	9a07      	ldr	r2, [sp, #28]
 801161a:	1a8a      	subs	r2, r1, r2
 801161c:	49b4      	ldr	r1, [pc, #720]	@ (80118f0 <_strtod_l+0x5c0>)
 801161e:	9107      	str	r1, [sp, #28]
 8011620:	2a08      	cmp	r2, #8
 8011622:	dc04      	bgt.n	801162e <_strtod_l+0x2fe>
 8011624:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011626:	9207      	str	r2, [sp, #28]
 8011628:	428a      	cmp	r2, r1
 801162a:	dd00      	ble.n	801162e <_strtod_l+0x2fe>
 801162c:	9107      	str	r1, [sp, #28]
 801162e:	2c00      	cmp	r4, #0
 8011630:	d002      	beq.n	8011638 <_strtod_l+0x308>
 8011632:	9a07      	ldr	r2, [sp, #28]
 8011634:	4252      	negs	r2, r2
 8011636:	9207      	str	r2, [sp, #28]
 8011638:	9a06      	ldr	r2, [sp, #24]
 801163a:	2a00      	cmp	r2, #0
 801163c:	d14d      	bne.n	80116da <_strtod_l+0x3aa>
 801163e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011640:	4310      	orrs	r0, r2
 8011642:	d000      	beq.n	8011646 <_strtod_l+0x316>
 8011644:	e6af      	b.n	80113a6 <_strtod_l+0x76>
 8011646:	4662      	mov	r2, ip
 8011648:	2a00      	cmp	r2, #0
 801164a:	d000      	beq.n	801164e <_strtod_l+0x31e>
 801164c:	e6c7      	b.n	80113de <_strtod_l+0xae>
 801164e:	2b69      	cmp	r3, #105	@ 0x69
 8011650:	d027      	beq.n	80116a2 <_strtod_l+0x372>
 8011652:	dc23      	bgt.n	801169c <_strtod_l+0x36c>
 8011654:	2b49      	cmp	r3, #73	@ 0x49
 8011656:	d024      	beq.n	80116a2 <_strtod_l+0x372>
 8011658:	2b4e      	cmp	r3, #78	@ 0x4e
 801165a:	d000      	beq.n	801165e <_strtod_l+0x32e>
 801165c:	e6bf      	b.n	80113de <_strtod_l+0xae>
 801165e:	49a5      	ldr	r1, [pc, #660]	@ (80118f4 <_strtod_l+0x5c4>)
 8011660:	a81d      	add	r0, sp, #116	@ 0x74
 8011662:	f001 fa23 	bl	8012aac <__match>
 8011666:	2800      	cmp	r0, #0
 8011668:	d100      	bne.n	801166c <_strtod_l+0x33c>
 801166a:	e6b8      	b.n	80113de <_strtod_l+0xae>
 801166c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	2b28      	cmp	r3, #40	@ 0x28
 8011672:	d12c      	bne.n	80116ce <_strtod_l+0x39e>
 8011674:	49a0      	ldr	r1, [pc, #640]	@ (80118f8 <_strtod_l+0x5c8>)
 8011676:	aa20      	add	r2, sp, #128	@ 0x80
 8011678:	a81d      	add	r0, sp, #116	@ 0x74
 801167a:	f001 fa2b 	bl	8012ad4 <__hexnan>
 801167e:	2805      	cmp	r0, #5
 8011680:	d125      	bne.n	80116ce <_strtod_l+0x39e>
 8011682:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011684:	4a9d      	ldr	r2, [pc, #628]	@ (80118fc <_strtod_l+0x5cc>)
 8011686:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011688:	431a      	orrs	r2, r3
 801168a:	0017      	movs	r7, r2
 801168c:	e68b      	b.n	80113a6 <_strtod_l+0x76>
 801168e:	220a      	movs	r2, #10
 8011690:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011692:	434a      	muls	r2, r1
 8011694:	18d2      	adds	r2, r2, r3
 8011696:	3a30      	subs	r2, #48	@ 0x30
 8011698:	9210      	str	r2, [sp, #64]	@ 0x40
 801169a:	e7b5      	b.n	8011608 <_strtod_l+0x2d8>
 801169c:	2b6e      	cmp	r3, #110	@ 0x6e
 801169e:	d0de      	beq.n	801165e <_strtod_l+0x32e>
 80116a0:	e69d      	b.n	80113de <_strtod_l+0xae>
 80116a2:	4997      	ldr	r1, [pc, #604]	@ (8011900 <_strtod_l+0x5d0>)
 80116a4:	a81d      	add	r0, sp, #116	@ 0x74
 80116a6:	f001 fa01 	bl	8012aac <__match>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d100      	bne.n	80116b0 <_strtod_l+0x380>
 80116ae:	e696      	b.n	80113de <_strtod_l+0xae>
 80116b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80116b2:	4994      	ldr	r1, [pc, #592]	@ (8011904 <_strtod_l+0x5d4>)
 80116b4:	3b01      	subs	r3, #1
 80116b6:	a81d      	add	r0, sp, #116	@ 0x74
 80116b8:	931d      	str	r3, [sp, #116]	@ 0x74
 80116ba:	f001 f9f7 	bl	8012aac <__match>
 80116be:	2800      	cmp	r0, #0
 80116c0:	d102      	bne.n	80116c8 <_strtod_l+0x398>
 80116c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80116c4:	3301      	adds	r3, #1
 80116c6:	931d      	str	r3, [sp, #116]	@ 0x74
 80116c8:	2600      	movs	r6, #0
 80116ca:	4f8c      	ldr	r7, [pc, #560]	@ (80118fc <_strtod_l+0x5cc>)
 80116cc:	e66b      	b.n	80113a6 <_strtod_l+0x76>
 80116ce:	488e      	ldr	r0, [pc, #568]	@ (8011908 <_strtod_l+0x5d8>)
 80116d0:	f000 fefc 	bl	80124cc <nan>
 80116d4:	0006      	movs	r6, r0
 80116d6:	000f      	movs	r7, r1
 80116d8:	e665      	b.n	80113a6 <_strtod_l+0x76>
 80116da:	9b07      	ldr	r3, [sp, #28]
 80116dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116de:	1a9b      	subs	r3, r3, r2
 80116e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80116e2:	9b08      	ldr	r3, [sp, #32]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <_strtod_l+0x3bc>
 80116e8:	9b06      	ldr	r3, [sp, #24]
 80116ea:	9308      	str	r3, [sp, #32]
 80116ec:	9c06      	ldr	r4, [sp, #24]
 80116ee:	2c10      	cmp	r4, #16
 80116f0:	dd00      	ble.n	80116f4 <_strtod_l+0x3c4>
 80116f2:	2410      	movs	r4, #16
 80116f4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80116f6:	f7f1 fe47 	bl	8003388 <__aeabi_ui2d>
 80116fa:	9b06      	ldr	r3, [sp, #24]
 80116fc:	0006      	movs	r6, r0
 80116fe:	000f      	movs	r7, r1
 8011700:	2b09      	cmp	r3, #9
 8011702:	dc13      	bgt.n	801172c <_strtod_l+0x3fc>
 8011704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011706:	2b00      	cmp	r3, #0
 8011708:	d100      	bne.n	801170c <_strtod_l+0x3dc>
 801170a:	e64c      	b.n	80113a6 <_strtod_l+0x76>
 801170c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801170e:	2b00      	cmp	r3, #0
 8011710:	dc00      	bgt.n	8011714 <_strtod_l+0x3e4>
 8011712:	e07e      	b.n	8011812 <_strtod_l+0x4e2>
 8011714:	2b16      	cmp	r3, #22
 8011716:	dc63      	bgt.n	80117e0 <_strtod_l+0x4b0>
 8011718:	497c      	ldr	r1, [pc, #496]	@ (801190c <_strtod_l+0x5dc>)
 801171a:	00db      	lsls	r3, r3, #3
 801171c:	18c9      	adds	r1, r1, r3
 801171e:	0032      	movs	r2, r6
 8011720:	6808      	ldr	r0, [r1, #0]
 8011722:	6849      	ldr	r1, [r1, #4]
 8011724:	003b      	movs	r3, r7
 8011726:	f7f0 ff3f 	bl	80025a8 <__aeabi_dmul>
 801172a:	e7d3      	b.n	80116d4 <_strtod_l+0x3a4>
 801172c:	0022      	movs	r2, r4
 801172e:	4b77      	ldr	r3, [pc, #476]	@ (801190c <_strtod_l+0x5dc>)
 8011730:	3a09      	subs	r2, #9
 8011732:	00d2      	lsls	r2, r2, #3
 8011734:	189b      	adds	r3, r3, r2
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	f7f0 ff35 	bl	80025a8 <__aeabi_dmul>
 801173e:	0006      	movs	r6, r0
 8011740:	0028      	movs	r0, r5
 8011742:	000f      	movs	r7, r1
 8011744:	f7f1 fe20 	bl	8003388 <__aeabi_ui2d>
 8011748:	000b      	movs	r3, r1
 801174a:	0002      	movs	r2, r0
 801174c:	0039      	movs	r1, r7
 801174e:	0030      	movs	r0, r6
 8011750:	f7ef ff82 	bl	8001658 <__aeabi_dadd>
 8011754:	9b06      	ldr	r3, [sp, #24]
 8011756:	0006      	movs	r6, r0
 8011758:	000f      	movs	r7, r1
 801175a:	2b0f      	cmp	r3, #15
 801175c:	ddd2      	ble.n	8011704 <_strtod_l+0x3d4>
 801175e:	9b06      	ldr	r3, [sp, #24]
 8011760:	1b1c      	subs	r4, r3, r4
 8011762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011764:	18e4      	adds	r4, r4, r3
 8011766:	2c00      	cmp	r4, #0
 8011768:	dc00      	bgt.n	801176c <_strtod_l+0x43c>
 801176a:	e09b      	b.n	80118a4 <_strtod_l+0x574>
 801176c:	220f      	movs	r2, #15
 801176e:	0023      	movs	r3, r4
 8011770:	4013      	ands	r3, r2
 8011772:	4214      	tst	r4, r2
 8011774:	d00a      	beq.n	801178c <_strtod_l+0x45c>
 8011776:	4965      	ldr	r1, [pc, #404]	@ (801190c <_strtod_l+0x5dc>)
 8011778:	00db      	lsls	r3, r3, #3
 801177a:	18c9      	adds	r1, r1, r3
 801177c:	0032      	movs	r2, r6
 801177e:	6808      	ldr	r0, [r1, #0]
 8011780:	6849      	ldr	r1, [r1, #4]
 8011782:	003b      	movs	r3, r7
 8011784:	f7f0 ff10 	bl	80025a8 <__aeabi_dmul>
 8011788:	0006      	movs	r6, r0
 801178a:	000f      	movs	r7, r1
 801178c:	230f      	movs	r3, #15
 801178e:	439c      	bics	r4, r3
 8011790:	d073      	beq.n	801187a <_strtod_l+0x54a>
 8011792:	3326      	adds	r3, #38	@ 0x26
 8011794:	33ff      	adds	r3, #255	@ 0xff
 8011796:	429c      	cmp	r4, r3
 8011798:	dd4b      	ble.n	8011832 <_strtod_l+0x502>
 801179a:	2300      	movs	r3, #0
 801179c:	9306      	str	r3, [sp, #24]
 801179e:	9307      	str	r3, [sp, #28]
 80117a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80117a2:	9308      	str	r3, [sp, #32]
 80117a4:	2322      	movs	r3, #34	@ 0x22
 80117a6:	2600      	movs	r6, #0
 80117a8:	9a05      	ldr	r2, [sp, #20]
 80117aa:	4f54      	ldr	r7, [pc, #336]	@ (80118fc <_strtod_l+0x5cc>)
 80117ac:	6013      	str	r3, [r2, #0]
 80117ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117b0:	42b3      	cmp	r3, r6
 80117b2:	d100      	bne.n	80117b6 <_strtod_l+0x486>
 80117b4:	e5f7      	b.n	80113a6 <_strtod_l+0x76>
 80117b6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80117b8:	9805      	ldr	r0, [sp, #20]
 80117ba:	f7ff f91b 	bl	80109f4 <_Bfree>
 80117be:	9908      	ldr	r1, [sp, #32]
 80117c0:	9805      	ldr	r0, [sp, #20]
 80117c2:	f7ff f917 	bl	80109f4 <_Bfree>
 80117c6:	9907      	ldr	r1, [sp, #28]
 80117c8:	9805      	ldr	r0, [sp, #20]
 80117ca:	f7ff f913 	bl	80109f4 <_Bfree>
 80117ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80117d0:	9805      	ldr	r0, [sp, #20]
 80117d2:	f7ff f90f 	bl	80109f4 <_Bfree>
 80117d6:	9906      	ldr	r1, [sp, #24]
 80117d8:	9805      	ldr	r0, [sp, #20]
 80117da:	f7ff f90b 	bl	80109f4 <_Bfree>
 80117de:	e5e2      	b.n	80113a6 <_strtod_l+0x76>
 80117e0:	2325      	movs	r3, #37	@ 0x25
 80117e2:	9a06      	ldr	r2, [sp, #24]
 80117e4:	1a9b      	subs	r3, r3, r2
 80117e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80117e8:	4293      	cmp	r3, r2
 80117ea:	dbb8      	blt.n	801175e <_strtod_l+0x42e>
 80117ec:	240f      	movs	r4, #15
 80117ee:	9b06      	ldr	r3, [sp, #24]
 80117f0:	4d46      	ldr	r5, [pc, #280]	@ (801190c <_strtod_l+0x5dc>)
 80117f2:	1ae4      	subs	r4, r4, r3
 80117f4:	00e1      	lsls	r1, r4, #3
 80117f6:	1869      	adds	r1, r5, r1
 80117f8:	0032      	movs	r2, r6
 80117fa:	6808      	ldr	r0, [r1, #0]
 80117fc:	6849      	ldr	r1, [r1, #4]
 80117fe:	003b      	movs	r3, r7
 8011800:	f7f0 fed2 	bl	80025a8 <__aeabi_dmul>
 8011804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011806:	1b1c      	subs	r4, r3, r4
 8011808:	00e4      	lsls	r4, r4, #3
 801180a:	192d      	adds	r5, r5, r4
 801180c:	682a      	ldr	r2, [r5, #0]
 801180e:	686b      	ldr	r3, [r5, #4]
 8011810:	e789      	b.n	8011726 <_strtod_l+0x3f6>
 8011812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011814:	3316      	adds	r3, #22
 8011816:	dba2      	blt.n	801175e <_strtod_l+0x42e>
 8011818:	9907      	ldr	r1, [sp, #28]
 801181a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801181c:	4b3b      	ldr	r3, [pc, #236]	@ (801190c <_strtod_l+0x5dc>)
 801181e:	1a52      	subs	r2, r2, r1
 8011820:	00d2      	lsls	r2, r2, #3
 8011822:	189b      	adds	r3, r3, r2
 8011824:	0030      	movs	r0, r6
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	0039      	movs	r1, r7
 801182c:	f7f0 fa78 	bl	8001d20 <__aeabi_ddiv>
 8011830:	e750      	b.n	80116d4 <_strtod_l+0x3a4>
 8011832:	2300      	movs	r3, #0
 8011834:	0030      	movs	r0, r6
 8011836:	0039      	movs	r1, r7
 8011838:	4d35      	ldr	r5, [pc, #212]	@ (8011910 <_strtod_l+0x5e0>)
 801183a:	1124      	asrs	r4, r4, #4
 801183c:	9309      	str	r3, [sp, #36]	@ 0x24
 801183e:	2c01      	cmp	r4, #1
 8011840:	dc1e      	bgt.n	8011880 <_strtod_l+0x550>
 8011842:	2b00      	cmp	r3, #0
 8011844:	d001      	beq.n	801184a <_strtod_l+0x51a>
 8011846:	0006      	movs	r6, r0
 8011848:	000f      	movs	r7, r1
 801184a:	4b32      	ldr	r3, [pc, #200]	@ (8011914 <_strtod_l+0x5e4>)
 801184c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801184e:	18ff      	adds	r7, r7, r3
 8011850:	4b2f      	ldr	r3, [pc, #188]	@ (8011910 <_strtod_l+0x5e0>)
 8011852:	00d5      	lsls	r5, r2, #3
 8011854:	195d      	adds	r5, r3, r5
 8011856:	0032      	movs	r2, r6
 8011858:	6828      	ldr	r0, [r5, #0]
 801185a:	6869      	ldr	r1, [r5, #4]
 801185c:	003b      	movs	r3, r7
 801185e:	f7f0 fea3 	bl	80025a8 <__aeabi_dmul>
 8011862:	4b26      	ldr	r3, [pc, #152]	@ (80118fc <_strtod_l+0x5cc>)
 8011864:	4a2c      	ldr	r2, [pc, #176]	@ (8011918 <_strtod_l+0x5e8>)
 8011866:	0006      	movs	r6, r0
 8011868:	400b      	ands	r3, r1
 801186a:	4293      	cmp	r3, r2
 801186c:	d895      	bhi.n	801179a <_strtod_l+0x46a>
 801186e:	4a2b      	ldr	r2, [pc, #172]	@ (801191c <_strtod_l+0x5ec>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d913      	bls.n	801189c <_strtod_l+0x56c>
 8011874:	2601      	movs	r6, #1
 8011876:	4f2a      	ldr	r7, [pc, #168]	@ (8011920 <_strtod_l+0x5f0>)
 8011878:	4276      	negs	r6, r6
 801187a:	2300      	movs	r3, #0
 801187c:	9309      	str	r3, [sp, #36]	@ 0x24
 801187e:	e086      	b.n	801198e <_strtod_l+0x65e>
 8011880:	2201      	movs	r2, #1
 8011882:	4214      	tst	r4, r2
 8011884:	d004      	beq.n	8011890 <_strtod_l+0x560>
 8011886:	682a      	ldr	r2, [r5, #0]
 8011888:	686b      	ldr	r3, [r5, #4]
 801188a:	f7f0 fe8d 	bl	80025a8 <__aeabi_dmul>
 801188e:	2301      	movs	r3, #1
 8011890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011892:	1064      	asrs	r4, r4, #1
 8011894:	3201      	adds	r2, #1
 8011896:	9209      	str	r2, [sp, #36]	@ 0x24
 8011898:	3508      	adds	r5, #8
 801189a:	e7d0      	b.n	801183e <_strtod_l+0x50e>
 801189c:	23d4      	movs	r3, #212	@ 0xd4
 801189e:	049b      	lsls	r3, r3, #18
 80118a0:	18cf      	adds	r7, r1, r3
 80118a2:	e7ea      	b.n	801187a <_strtod_l+0x54a>
 80118a4:	2c00      	cmp	r4, #0
 80118a6:	d0e8      	beq.n	801187a <_strtod_l+0x54a>
 80118a8:	4264      	negs	r4, r4
 80118aa:	230f      	movs	r3, #15
 80118ac:	0022      	movs	r2, r4
 80118ae:	401a      	ands	r2, r3
 80118b0:	421c      	tst	r4, r3
 80118b2:	d00a      	beq.n	80118ca <_strtod_l+0x59a>
 80118b4:	4b15      	ldr	r3, [pc, #84]	@ (801190c <_strtod_l+0x5dc>)
 80118b6:	00d2      	lsls	r2, r2, #3
 80118b8:	189b      	adds	r3, r3, r2
 80118ba:	0030      	movs	r0, r6
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	0039      	movs	r1, r7
 80118c2:	f7f0 fa2d 	bl	8001d20 <__aeabi_ddiv>
 80118c6:	0006      	movs	r6, r0
 80118c8:	000f      	movs	r7, r1
 80118ca:	1124      	asrs	r4, r4, #4
 80118cc:	d0d5      	beq.n	801187a <_strtod_l+0x54a>
 80118ce:	2c1f      	cmp	r4, #31
 80118d0:	dd28      	ble.n	8011924 <_strtod_l+0x5f4>
 80118d2:	2300      	movs	r3, #0
 80118d4:	9306      	str	r3, [sp, #24]
 80118d6:	9307      	str	r3, [sp, #28]
 80118d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80118da:	9308      	str	r3, [sp, #32]
 80118dc:	2322      	movs	r3, #34	@ 0x22
 80118de:	9a05      	ldr	r2, [sp, #20]
 80118e0:	2600      	movs	r6, #0
 80118e2:	6013      	str	r3, [r2, #0]
 80118e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118e6:	2700      	movs	r7, #0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d000      	beq.n	80118ee <_strtod_l+0x5be>
 80118ec:	e763      	b.n	80117b6 <_strtod_l+0x486>
 80118ee:	e55a      	b.n	80113a6 <_strtod_l+0x76>
 80118f0:	00004e1f 	.word	0x00004e1f
 80118f4:	08013bb5 	.word	0x08013bb5
 80118f8:	08013dcc 	.word	0x08013dcc
 80118fc:	7ff00000 	.word	0x7ff00000
 8011900:	08013bad 	.word	0x08013bad
 8011904:	08013be4 	.word	0x08013be4
 8011908:	08013f75 	.word	0x08013f75
 801190c:	08013d00 	.word	0x08013d00
 8011910:	08013cd8 	.word	0x08013cd8
 8011914:	fcb00000 	.word	0xfcb00000
 8011918:	7ca00000 	.word	0x7ca00000
 801191c:	7c900000 	.word	0x7c900000
 8011920:	7fefffff 	.word	0x7fefffff
 8011924:	2310      	movs	r3, #16
 8011926:	0022      	movs	r2, r4
 8011928:	401a      	ands	r2, r3
 801192a:	9209      	str	r2, [sp, #36]	@ 0x24
 801192c:	421c      	tst	r4, r3
 801192e:	d001      	beq.n	8011934 <_strtod_l+0x604>
 8011930:	335a      	adds	r3, #90	@ 0x5a
 8011932:	9309      	str	r3, [sp, #36]	@ 0x24
 8011934:	0030      	movs	r0, r6
 8011936:	0039      	movs	r1, r7
 8011938:	2300      	movs	r3, #0
 801193a:	4dbf      	ldr	r5, [pc, #764]	@ (8011c38 <_strtod_l+0x908>)
 801193c:	2201      	movs	r2, #1
 801193e:	4214      	tst	r4, r2
 8011940:	d004      	beq.n	801194c <_strtod_l+0x61c>
 8011942:	682a      	ldr	r2, [r5, #0]
 8011944:	686b      	ldr	r3, [r5, #4]
 8011946:	f7f0 fe2f 	bl	80025a8 <__aeabi_dmul>
 801194a:	2301      	movs	r3, #1
 801194c:	1064      	asrs	r4, r4, #1
 801194e:	3508      	adds	r5, #8
 8011950:	2c00      	cmp	r4, #0
 8011952:	d1f3      	bne.n	801193c <_strtod_l+0x60c>
 8011954:	2b00      	cmp	r3, #0
 8011956:	d001      	beq.n	801195c <_strtod_l+0x62c>
 8011958:	0006      	movs	r6, r0
 801195a:	000f      	movs	r7, r1
 801195c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00d      	beq.n	801197e <_strtod_l+0x64e>
 8011962:	236b      	movs	r3, #107	@ 0x6b
 8011964:	007a      	lsls	r2, r7, #1
 8011966:	0d52      	lsrs	r2, r2, #21
 8011968:	0039      	movs	r1, r7
 801196a:	1a9b      	subs	r3, r3, r2
 801196c:	2b00      	cmp	r3, #0
 801196e:	dd06      	ble.n	801197e <_strtod_l+0x64e>
 8011970:	2b1f      	cmp	r3, #31
 8011972:	dd5a      	ble.n	8011a2a <_strtod_l+0x6fa>
 8011974:	2600      	movs	r6, #0
 8011976:	2b34      	cmp	r3, #52	@ 0x34
 8011978:	dd50      	ble.n	8011a1c <_strtod_l+0x6ec>
 801197a:	27dc      	movs	r7, #220	@ 0xdc
 801197c:	04bf      	lsls	r7, r7, #18
 801197e:	2200      	movs	r2, #0
 8011980:	2300      	movs	r3, #0
 8011982:	0030      	movs	r0, r6
 8011984:	0039      	movs	r1, r7
 8011986:	f7ee fd61 	bl	800044c <__aeabi_dcmpeq>
 801198a:	2800      	cmp	r0, #0
 801198c:	d1a1      	bne.n	80118d2 <_strtod_l+0x5a2>
 801198e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011990:	9a08      	ldr	r2, [sp, #32]
 8011992:	9300      	str	r3, [sp, #0]
 8011994:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011996:	9b06      	ldr	r3, [sp, #24]
 8011998:	9805      	ldr	r0, [sp, #20]
 801199a:	f7ff f893 	bl	8010ac4 <__s2b>
 801199e:	900d      	str	r0, [sp, #52]	@ 0x34
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d100      	bne.n	80119a6 <_strtod_l+0x676>
 80119a4:	e6f9      	b.n	801179a <_strtod_l+0x46a>
 80119a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119a8:	9907      	ldr	r1, [sp, #28]
 80119aa:	17da      	asrs	r2, r3, #31
 80119ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119ae:	1a5b      	subs	r3, r3, r1
 80119b0:	401a      	ands	r2, r3
 80119b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119b4:	9217      	str	r2, [sp, #92]	@ 0x5c
 80119b6:	43db      	mvns	r3, r3
 80119b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80119ba:	17db      	asrs	r3, r3, #31
 80119bc:	401a      	ands	r2, r3
 80119be:	2300      	movs	r3, #0
 80119c0:	921a      	str	r2, [sp, #104]	@ 0x68
 80119c2:	9306      	str	r3, [sp, #24]
 80119c4:	9307      	str	r3, [sp, #28]
 80119c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119c8:	9805      	ldr	r0, [sp, #20]
 80119ca:	6859      	ldr	r1, [r3, #4]
 80119cc:	f7fe ffce 	bl	801096c <_Balloc>
 80119d0:	9008      	str	r0, [sp, #32]
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d100      	bne.n	80119d8 <_strtod_l+0x6a8>
 80119d6:	e6e5      	b.n	80117a4 <_strtod_l+0x474>
 80119d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119da:	300c      	adds	r0, #12
 80119dc:	0019      	movs	r1, r3
 80119de:	691a      	ldr	r2, [r3, #16]
 80119e0:	310c      	adds	r1, #12
 80119e2:	3202      	adds	r2, #2
 80119e4:	0092      	lsls	r2, r2, #2
 80119e6:	f7fe f82b 	bl	800fa40 <memcpy>
 80119ea:	ab20      	add	r3, sp, #128	@ 0x80
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	0032      	movs	r2, r6
 80119f4:	003b      	movs	r3, r7
 80119f6:	9805      	ldr	r0, [sp, #20]
 80119f8:	9610      	str	r6, [sp, #64]	@ 0x40
 80119fa:	9711      	str	r7, [sp, #68]	@ 0x44
 80119fc:	f7ff fbb2 	bl	8011164 <__d2b>
 8011a00:	901e      	str	r0, [sp, #120]	@ 0x78
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d100      	bne.n	8011a08 <_strtod_l+0x6d8>
 8011a06:	e6cd      	b.n	80117a4 <_strtod_l+0x474>
 8011a08:	2101      	movs	r1, #1
 8011a0a:	9805      	ldr	r0, [sp, #20]
 8011a0c:	f7ff f8f6 	bl	8010bfc <__i2b>
 8011a10:	9007      	str	r0, [sp, #28]
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d10e      	bne.n	8011a34 <_strtod_l+0x704>
 8011a16:	2300      	movs	r3, #0
 8011a18:	9307      	str	r3, [sp, #28]
 8011a1a:	e6c3      	b.n	80117a4 <_strtod_l+0x474>
 8011a1c:	234b      	movs	r3, #75	@ 0x4b
 8011a1e:	1a9a      	subs	r2, r3, r2
 8011a20:	3b4c      	subs	r3, #76	@ 0x4c
 8011a22:	4093      	lsls	r3, r2
 8011a24:	4019      	ands	r1, r3
 8011a26:	000f      	movs	r7, r1
 8011a28:	e7a9      	b.n	801197e <_strtod_l+0x64e>
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	4252      	negs	r2, r2
 8011a2e:	409a      	lsls	r2, r3
 8011a30:	4016      	ands	r6, r2
 8011a32:	e7a4      	b.n	801197e <_strtod_l+0x64e>
 8011a34:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011a36:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a38:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8011a3a:	1ad4      	subs	r4, r2, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	db01      	blt.n	8011a44 <_strtod_l+0x714>
 8011a40:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8011a42:	195d      	adds	r5, r3, r5
 8011a44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a48:	1a5b      	subs	r3, r3, r1
 8011a4a:	2136      	movs	r1, #54	@ 0x36
 8011a4c:	189b      	adds	r3, r3, r2
 8011a4e:	1a8a      	subs	r2, r1, r2
 8011a50:	497a      	ldr	r1, [pc, #488]	@ (8011c3c <_strtod_l+0x90c>)
 8011a52:	2001      	movs	r0, #1
 8011a54:	468c      	mov	ip, r1
 8011a56:	2100      	movs	r1, #0
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	9116      	str	r1, [sp, #88]	@ 0x58
 8011a5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011a5e:	4563      	cmp	r3, ip
 8011a60:	da06      	bge.n	8011a70 <_strtod_l+0x740>
 8011a62:	4661      	mov	r1, ip
 8011a64:	1ac9      	subs	r1, r1, r3
 8011a66:	1a52      	subs	r2, r2, r1
 8011a68:	291f      	cmp	r1, #31
 8011a6a:	dc3f      	bgt.n	8011aec <_strtod_l+0x7bc>
 8011a6c:	4088      	lsls	r0, r1
 8011a6e:	9014      	str	r0, [sp, #80]	@ 0x50
 8011a70:	18ab      	adds	r3, r5, r2
 8011a72:	930e      	str	r3, [sp, #56]	@ 0x38
 8011a74:	18a4      	adds	r4, r4, r2
 8011a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a7a:	191c      	adds	r4, r3, r4
 8011a7c:	002b      	movs	r3, r5
 8011a7e:	4295      	cmp	r5, r2
 8011a80:	dd00      	ble.n	8011a84 <_strtod_l+0x754>
 8011a82:	0013      	movs	r3, r2
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	dd00      	ble.n	8011a8a <_strtod_l+0x75a>
 8011a88:	0023      	movs	r3, r4
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	dd04      	ble.n	8011a98 <_strtod_l+0x768>
 8011a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a90:	1ae4      	subs	r4, r4, r3
 8011a92:	1ad2      	subs	r2, r2, r3
 8011a94:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a96:	1aed      	subs	r5, r5, r3
 8011a98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	dd16      	ble.n	8011acc <_strtod_l+0x79c>
 8011a9e:	001a      	movs	r2, r3
 8011aa0:	9907      	ldr	r1, [sp, #28]
 8011aa2:	9805      	ldr	r0, [sp, #20]
 8011aa4:	f7ff f974 	bl	8010d90 <__pow5mult>
 8011aa8:	9007      	str	r0, [sp, #28]
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	d0b3      	beq.n	8011a16 <_strtod_l+0x6e6>
 8011aae:	0001      	movs	r1, r0
 8011ab0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8011ab2:	9805      	ldr	r0, [sp, #20]
 8011ab4:	f7ff f8ba 	bl	8010c2c <__multiply>
 8011ab8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8011aba:	2800      	cmp	r0, #0
 8011abc:	d100      	bne.n	8011ac0 <_strtod_l+0x790>
 8011abe:	e671      	b.n	80117a4 <_strtod_l+0x474>
 8011ac0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011ac2:	9805      	ldr	r0, [sp, #20]
 8011ac4:	f7fe ff96 	bl	80109f4 <_Bfree>
 8011ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011aca:	931e      	str	r3, [sp, #120]	@ 0x78
 8011acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dc12      	bgt.n	8011af8 <_strtod_l+0x7c8>
 8011ad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	dd18      	ble.n	8011b0a <_strtod_l+0x7da>
 8011ad8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011ada:	9908      	ldr	r1, [sp, #32]
 8011adc:	9805      	ldr	r0, [sp, #20]
 8011ade:	f7ff f957 	bl	8010d90 <__pow5mult>
 8011ae2:	9008      	str	r0, [sp, #32]
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d110      	bne.n	8011b0a <_strtod_l+0x7da>
 8011ae8:	2300      	movs	r3, #0
 8011aea:	e65a      	b.n	80117a2 <_strtod_l+0x472>
 8011aec:	4954      	ldr	r1, [pc, #336]	@ (8011c40 <_strtod_l+0x910>)
 8011aee:	1acb      	subs	r3, r1, r3
 8011af0:	0001      	movs	r1, r0
 8011af2:	4099      	lsls	r1, r3
 8011af4:	9116      	str	r1, [sp, #88]	@ 0x58
 8011af6:	e7ba      	b.n	8011a6e <_strtod_l+0x73e>
 8011af8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011afa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011afc:	9805      	ldr	r0, [sp, #20]
 8011afe:	f7ff f9a3 	bl	8010e48 <__lshift>
 8011b02:	901e      	str	r0, [sp, #120]	@ 0x78
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d1e4      	bne.n	8011ad2 <_strtod_l+0x7a2>
 8011b08:	e64c      	b.n	80117a4 <_strtod_l+0x474>
 8011b0a:	2c00      	cmp	r4, #0
 8011b0c:	dd07      	ble.n	8011b1e <_strtod_l+0x7ee>
 8011b0e:	0022      	movs	r2, r4
 8011b10:	9908      	ldr	r1, [sp, #32]
 8011b12:	9805      	ldr	r0, [sp, #20]
 8011b14:	f7ff f998 	bl	8010e48 <__lshift>
 8011b18:	9008      	str	r0, [sp, #32]
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d0e4      	beq.n	8011ae8 <_strtod_l+0x7b8>
 8011b1e:	2d00      	cmp	r5, #0
 8011b20:	dd08      	ble.n	8011b34 <_strtod_l+0x804>
 8011b22:	002a      	movs	r2, r5
 8011b24:	9907      	ldr	r1, [sp, #28]
 8011b26:	9805      	ldr	r0, [sp, #20]
 8011b28:	f7ff f98e 	bl	8010e48 <__lshift>
 8011b2c:	9007      	str	r0, [sp, #28]
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d100      	bne.n	8011b34 <_strtod_l+0x804>
 8011b32:	e637      	b.n	80117a4 <_strtod_l+0x474>
 8011b34:	9a08      	ldr	r2, [sp, #32]
 8011b36:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011b38:	9805      	ldr	r0, [sp, #20]
 8011b3a:	f7ff fa0d 	bl	8010f58 <__mdiff>
 8011b3e:	9006      	str	r0, [sp, #24]
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d100      	bne.n	8011b46 <_strtod_l+0x816>
 8011b44:	e62e      	b.n	80117a4 <_strtod_l+0x474>
 8011b46:	68c3      	ldr	r3, [r0, #12]
 8011b48:	9907      	ldr	r1, [sp, #28]
 8011b4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	60c3      	str	r3, [r0, #12]
 8011b50:	f7ff f9e6 	bl	8010f20 <__mcmp>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	da3b      	bge.n	8011bd0 <_strtod_l+0x8a0>
 8011b58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b5a:	4333      	orrs	r3, r6
 8011b5c:	d167      	bne.n	8011c2e <_strtod_l+0x8fe>
 8011b5e:	033b      	lsls	r3, r7, #12
 8011b60:	d165      	bne.n	8011c2e <_strtod_l+0x8fe>
 8011b62:	22d6      	movs	r2, #214	@ 0xd6
 8011b64:	4b37      	ldr	r3, [pc, #220]	@ (8011c44 <_strtod_l+0x914>)
 8011b66:	04d2      	lsls	r2, r2, #19
 8011b68:	403b      	ands	r3, r7
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d95f      	bls.n	8011c2e <_strtod_l+0x8fe>
 8011b6e:	9b06      	ldr	r3, [sp, #24]
 8011b70:	695b      	ldr	r3, [r3, #20]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d103      	bne.n	8011b7e <_strtod_l+0x84e>
 8011b76:	9b06      	ldr	r3, [sp, #24]
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	dd57      	ble.n	8011c2e <_strtod_l+0x8fe>
 8011b7e:	9906      	ldr	r1, [sp, #24]
 8011b80:	2201      	movs	r2, #1
 8011b82:	9805      	ldr	r0, [sp, #20]
 8011b84:	f7ff f960 	bl	8010e48 <__lshift>
 8011b88:	9907      	ldr	r1, [sp, #28]
 8011b8a:	9006      	str	r0, [sp, #24]
 8011b8c:	f7ff f9c8 	bl	8010f20 <__mcmp>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	dd4c      	ble.n	8011c2e <_strtod_l+0x8fe>
 8011b94:	4b2b      	ldr	r3, [pc, #172]	@ (8011c44 <_strtod_l+0x914>)
 8011b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b98:	403b      	ands	r3, r7
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	d074      	beq.n	8011c88 <_strtod_l+0x958>
 8011b9e:	22d6      	movs	r2, #214	@ 0xd6
 8011ba0:	04d2      	lsls	r2, r2, #19
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d870      	bhi.n	8011c88 <_strtod_l+0x958>
 8011ba6:	22dc      	movs	r2, #220	@ 0xdc
 8011ba8:	0492      	lsls	r2, r2, #18
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d800      	bhi.n	8011bb0 <_strtod_l+0x880>
 8011bae:	e695      	b.n	80118dc <_strtod_l+0x5ac>
 8011bb0:	0030      	movs	r0, r6
 8011bb2:	0039      	movs	r1, r7
 8011bb4:	4b24      	ldr	r3, [pc, #144]	@ (8011c48 <_strtod_l+0x918>)
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f7f0 fcf6 	bl	80025a8 <__aeabi_dmul>
 8011bbc:	4b21      	ldr	r3, [pc, #132]	@ (8011c44 <_strtod_l+0x914>)
 8011bbe:	0006      	movs	r6, r0
 8011bc0:	000f      	movs	r7, r1
 8011bc2:	420b      	tst	r3, r1
 8011bc4:	d000      	beq.n	8011bc8 <_strtod_l+0x898>
 8011bc6:	e5f6      	b.n	80117b6 <_strtod_l+0x486>
 8011bc8:	2322      	movs	r3, #34	@ 0x22
 8011bca:	9a05      	ldr	r2, [sp, #20]
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	e5f2      	b.n	80117b6 <_strtod_l+0x486>
 8011bd0:	970e      	str	r7, [sp, #56]	@ 0x38
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d175      	bne.n	8011cc2 <_strtod_l+0x992>
 8011bd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011bd8:	033b      	lsls	r3, r7, #12
 8011bda:	0b1b      	lsrs	r3, r3, #12
 8011bdc:	2a00      	cmp	r2, #0
 8011bde:	d039      	beq.n	8011c54 <_strtod_l+0x924>
 8011be0:	4a1a      	ldr	r2, [pc, #104]	@ (8011c4c <_strtod_l+0x91c>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d138      	bne.n	8011c58 <_strtod_l+0x928>
 8011be6:	2101      	movs	r1, #1
 8011be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bea:	4249      	negs	r1, r1
 8011bec:	0032      	movs	r2, r6
 8011bee:	0008      	movs	r0, r1
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00b      	beq.n	8011c0c <_strtod_l+0x8dc>
 8011bf4:	24d4      	movs	r4, #212	@ 0xd4
 8011bf6:	4b13      	ldr	r3, [pc, #76]	@ (8011c44 <_strtod_l+0x914>)
 8011bf8:	0008      	movs	r0, r1
 8011bfa:	403b      	ands	r3, r7
 8011bfc:	04e4      	lsls	r4, r4, #19
 8011bfe:	42a3      	cmp	r3, r4
 8011c00:	d804      	bhi.n	8011c0c <_strtod_l+0x8dc>
 8011c02:	306c      	adds	r0, #108	@ 0x6c
 8011c04:	0d1b      	lsrs	r3, r3, #20
 8011c06:	1ac3      	subs	r3, r0, r3
 8011c08:	4099      	lsls	r1, r3
 8011c0a:	0008      	movs	r0, r1
 8011c0c:	4282      	cmp	r2, r0
 8011c0e:	d123      	bne.n	8011c58 <_strtod_l+0x928>
 8011c10:	4b0f      	ldr	r3, [pc, #60]	@ (8011c50 <_strtod_l+0x920>)
 8011c12:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c14:	4299      	cmp	r1, r3
 8011c16:	d102      	bne.n	8011c1e <_strtod_l+0x8ee>
 8011c18:	3201      	adds	r2, #1
 8011c1a:	d100      	bne.n	8011c1e <_strtod_l+0x8ee>
 8011c1c:	e5c2      	b.n	80117a4 <_strtod_l+0x474>
 8011c1e:	4b09      	ldr	r3, [pc, #36]	@ (8011c44 <_strtod_l+0x914>)
 8011c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c22:	2600      	movs	r6, #0
 8011c24:	401a      	ands	r2, r3
 8011c26:	0013      	movs	r3, r2
 8011c28:	2280      	movs	r2, #128	@ 0x80
 8011c2a:	0352      	lsls	r2, r2, #13
 8011c2c:	189f      	adds	r7, r3, r2
 8011c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1bd      	bne.n	8011bb0 <_strtod_l+0x880>
 8011c34:	e5bf      	b.n	80117b6 <_strtod_l+0x486>
 8011c36:	46c0      	nop			@ (mov r8, r8)
 8011c38:	08013df8 	.word	0x08013df8
 8011c3c:	fffffc02 	.word	0xfffffc02
 8011c40:	fffffbe2 	.word	0xfffffbe2
 8011c44:	7ff00000 	.word	0x7ff00000
 8011c48:	39500000 	.word	0x39500000
 8011c4c:	000fffff 	.word	0x000fffff
 8011c50:	7fefffff 	.word	0x7fefffff
 8011c54:	4333      	orrs	r3, r6
 8011c56:	d09d      	beq.n	8011b94 <_strtod_l+0x864>
 8011c58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d01c      	beq.n	8011c98 <_strtod_l+0x968>
 8011c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c60:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011c62:	4213      	tst	r3, r2
 8011c64:	d0e3      	beq.n	8011c2e <_strtod_l+0x8fe>
 8011c66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011c68:	0030      	movs	r0, r6
 8011c6a:	0039      	movs	r1, r7
 8011c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d016      	beq.n	8011ca0 <_strtod_l+0x970>
 8011c72:	f7ff fb45 	bl	8011300 <sulp>
 8011c76:	0002      	movs	r2, r0
 8011c78:	000b      	movs	r3, r1
 8011c7a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011c7c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011c7e:	f7ef fceb 	bl	8001658 <__aeabi_dadd>
 8011c82:	0006      	movs	r6, r0
 8011c84:	000f      	movs	r7, r1
 8011c86:	e7d2      	b.n	8011c2e <_strtod_l+0x8fe>
 8011c88:	2601      	movs	r6, #1
 8011c8a:	4a92      	ldr	r2, [pc, #584]	@ (8011ed4 <_strtod_l+0xba4>)
 8011c8c:	4276      	negs	r6, r6
 8011c8e:	189b      	adds	r3, r3, r2
 8011c90:	4a91      	ldr	r2, [pc, #580]	@ (8011ed8 <_strtod_l+0xba8>)
 8011c92:	431a      	orrs	r2, r3
 8011c94:	0017      	movs	r7, r2
 8011c96:	e7ca      	b.n	8011c2e <_strtod_l+0x8fe>
 8011c98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c9a:	4233      	tst	r3, r6
 8011c9c:	d0c7      	beq.n	8011c2e <_strtod_l+0x8fe>
 8011c9e:	e7e2      	b.n	8011c66 <_strtod_l+0x936>
 8011ca0:	f7ff fb2e 	bl	8011300 <sulp>
 8011ca4:	0002      	movs	r2, r0
 8011ca6:	000b      	movs	r3, r1
 8011ca8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011caa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011cac:	f7f0 ff44 	bl	8002b38 <__aeabi_dsub>
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	0006      	movs	r6, r0
 8011cb6:	000f      	movs	r7, r1
 8011cb8:	f7ee fbc8 	bl	800044c <__aeabi_dcmpeq>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d0b6      	beq.n	8011c2e <_strtod_l+0x8fe>
 8011cc0:	e60c      	b.n	80118dc <_strtod_l+0x5ac>
 8011cc2:	9907      	ldr	r1, [sp, #28]
 8011cc4:	9806      	ldr	r0, [sp, #24]
 8011cc6:	f7ff faad 	bl	8011224 <__ratio>
 8011cca:	2380      	movs	r3, #128	@ 0x80
 8011ccc:	2200      	movs	r2, #0
 8011cce:	05db      	lsls	r3, r3, #23
 8011cd0:	0004      	movs	r4, r0
 8011cd2:	000d      	movs	r5, r1
 8011cd4:	f7ee fbca 	bl	800046c <__aeabi_dcmple>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d06c      	beq.n	8011db6 <_strtod_l+0xa86>
 8011cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d177      	bne.n	8011dd2 <_strtod_l+0xaa2>
 8011ce2:	2e00      	cmp	r6, #0
 8011ce4:	d157      	bne.n	8011d96 <_strtod_l+0xa66>
 8011ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce8:	031b      	lsls	r3, r3, #12
 8011cea:	d15a      	bne.n	8011da2 <_strtod_l+0xa72>
 8011cec:	2200      	movs	r2, #0
 8011cee:	0020      	movs	r0, r4
 8011cf0:	0029      	movs	r1, r5
 8011cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8011edc <_strtod_l+0xbac>)
 8011cf4:	f7ee fbb0 	bl	8000458 <__aeabi_dcmplt>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d159      	bne.n	8011db0 <_strtod_l+0xa80>
 8011cfc:	0020      	movs	r0, r4
 8011cfe:	0029      	movs	r1, r5
 8011d00:	2200      	movs	r2, #0
 8011d02:	4b77      	ldr	r3, [pc, #476]	@ (8011ee0 <_strtod_l+0xbb0>)
 8011d04:	f7f0 fc50 	bl	80025a8 <__aeabi_dmul>
 8011d08:	0004      	movs	r4, r0
 8011d0a:	000d      	movs	r5, r1
 8011d0c:	2380      	movs	r3, #128	@ 0x80
 8011d0e:	061b      	lsls	r3, r3, #24
 8011d10:	18eb      	adds	r3, r5, r3
 8011d12:	940a      	str	r4, [sp, #40]	@ 0x28
 8011d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d1a:	9214      	str	r2, [sp, #80]	@ 0x50
 8011d1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d1e:	4a71      	ldr	r2, [pc, #452]	@ (8011ee4 <_strtod_l+0xbb4>)
 8011d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d22:	4013      	ands	r3, r2
 8011d24:	9316      	str	r3, [sp, #88]	@ 0x58
 8011d26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011d28:	4b6f      	ldr	r3, [pc, #444]	@ (8011ee8 <_strtod_l+0xbb8>)
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d000      	beq.n	8011d30 <_strtod_l+0xa00>
 8011d2e:	e087      	b.n	8011e40 <_strtod_l+0xb10>
 8011d30:	4a6e      	ldr	r2, [pc, #440]	@ (8011eec <_strtod_l+0xbbc>)
 8011d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d34:	4694      	mov	ip, r2
 8011d36:	4463      	add	r3, ip
 8011d38:	001f      	movs	r7, r3
 8011d3a:	0030      	movs	r0, r6
 8011d3c:	0019      	movs	r1, r3
 8011d3e:	f7ff f9a5 	bl	801108c <__ulp>
 8011d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d46:	f7f0 fc2f 	bl	80025a8 <__aeabi_dmul>
 8011d4a:	0032      	movs	r2, r6
 8011d4c:	003b      	movs	r3, r7
 8011d4e:	f7ef fc83 	bl	8001658 <__aeabi_dadd>
 8011d52:	4a64      	ldr	r2, [pc, #400]	@ (8011ee4 <_strtod_l+0xbb4>)
 8011d54:	4b66      	ldr	r3, [pc, #408]	@ (8011ef0 <_strtod_l+0xbc0>)
 8011d56:	0006      	movs	r6, r0
 8011d58:	400a      	ands	r2, r1
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d940      	bls.n	8011de0 <_strtod_l+0xab0>
 8011d5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d60:	4a64      	ldr	r2, [pc, #400]	@ (8011ef4 <_strtod_l+0xbc4>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d103      	bne.n	8011d6e <_strtod_l+0xa3e>
 8011d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d68:	3301      	adds	r3, #1
 8011d6a:	d100      	bne.n	8011d6e <_strtod_l+0xa3e>
 8011d6c:	e51a      	b.n	80117a4 <_strtod_l+0x474>
 8011d6e:	2601      	movs	r6, #1
 8011d70:	4f60      	ldr	r7, [pc, #384]	@ (8011ef4 <_strtod_l+0xbc4>)
 8011d72:	4276      	negs	r6, r6
 8011d74:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011d76:	9805      	ldr	r0, [sp, #20]
 8011d78:	f7fe fe3c 	bl	80109f4 <_Bfree>
 8011d7c:	9908      	ldr	r1, [sp, #32]
 8011d7e:	9805      	ldr	r0, [sp, #20]
 8011d80:	f7fe fe38 	bl	80109f4 <_Bfree>
 8011d84:	9907      	ldr	r1, [sp, #28]
 8011d86:	9805      	ldr	r0, [sp, #20]
 8011d88:	f7fe fe34 	bl	80109f4 <_Bfree>
 8011d8c:	9906      	ldr	r1, [sp, #24]
 8011d8e:	9805      	ldr	r0, [sp, #20]
 8011d90:	f7fe fe30 	bl	80109f4 <_Bfree>
 8011d94:	e617      	b.n	80119c6 <_strtod_l+0x696>
 8011d96:	2e01      	cmp	r6, #1
 8011d98:	d103      	bne.n	8011da2 <_strtod_l+0xa72>
 8011d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d100      	bne.n	8011da2 <_strtod_l+0xa72>
 8011da0:	e59c      	b.n	80118dc <_strtod_l+0x5ac>
 8011da2:	2300      	movs	r3, #0
 8011da4:	4c54      	ldr	r4, [pc, #336]	@ (8011ef8 <_strtod_l+0xbc8>)
 8011da6:	4d4d      	ldr	r5, [pc, #308]	@ (8011edc <_strtod_l+0xbac>)
 8011da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011daa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011dac:	2400      	movs	r4, #0
 8011dae:	e7b2      	b.n	8011d16 <_strtod_l+0x9e6>
 8011db0:	2400      	movs	r4, #0
 8011db2:	4d4b      	ldr	r5, [pc, #300]	@ (8011ee0 <_strtod_l+0xbb0>)
 8011db4:	e7aa      	b.n	8011d0c <_strtod_l+0x9dc>
 8011db6:	0020      	movs	r0, r4
 8011db8:	0029      	movs	r1, r5
 8011dba:	4b49      	ldr	r3, [pc, #292]	@ (8011ee0 <_strtod_l+0xbb0>)
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f7f0 fbf3 	bl	80025a8 <__aeabi_dmul>
 8011dc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011dc4:	0004      	movs	r4, r0
 8011dc6:	000d      	movs	r5, r1
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d09f      	beq.n	8011d0c <_strtod_l+0x9dc>
 8011dcc:	940a      	str	r4, [sp, #40]	@ 0x28
 8011dce:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011dd0:	e7a1      	b.n	8011d16 <_strtod_l+0x9e6>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	4c41      	ldr	r4, [pc, #260]	@ (8011edc <_strtod_l+0xbac>)
 8011dd6:	0025      	movs	r5, r4
 8011dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011ddc:	001c      	movs	r4, r3
 8011dde:	e79a      	b.n	8011d16 <_strtod_l+0x9e6>
 8011de0:	23d4      	movs	r3, #212	@ 0xd4
 8011de2:	049b      	lsls	r3, r3, #18
 8011de4:	18cf      	adds	r7, r1, r3
 8011de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de8:	9710      	str	r7, [sp, #64]	@ 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1c2      	bne.n	8011d74 <_strtod_l+0xa44>
 8011dee:	4b3d      	ldr	r3, [pc, #244]	@ (8011ee4 <_strtod_l+0xbb4>)
 8011df0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011df2:	403b      	ands	r3, r7
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d1bd      	bne.n	8011d74 <_strtod_l+0xa44>
 8011df8:	0020      	movs	r0, r4
 8011dfa:	0029      	movs	r1, r5
 8011dfc:	f7ee fbfa 	bl	80005f4 <__aeabi_d2lz>
 8011e00:	f7ee fc32 	bl	8000668 <__aeabi_l2d>
 8011e04:	0002      	movs	r2, r0
 8011e06:	000b      	movs	r3, r1
 8011e08:	0020      	movs	r0, r4
 8011e0a:	0029      	movs	r1, r5
 8011e0c:	f7f0 fe94 	bl	8002b38 <__aeabi_dsub>
 8011e10:	033c      	lsls	r4, r7, #12
 8011e12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e14:	0b24      	lsrs	r4, r4, #12
 8011e16:	4334      	orrs	r4, r6
 8011e18:	900e      	str	r0, [sp, #56]	@ 0x38
 8011e1a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011e1c:	4a37      	ldr	r2, [pc, #220]	@ (8011efc <_strtod_l+0xbcc>)
 8011e1e:	431c      	orrs	r4, r3
 8011e20:	d052      	beq.n	8011ec8 <_strtod_l+0xb98>
 8011e22:	4b37      	ldr	r3, [pc, #220]	@ (8011f00 <_strtod_l+0xbd0>)
 8011e24:	f7ee fb18 	bl	8000458 <__aeabi_dcmplt>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d000      	beq.n	8011e2e <_strtod_l+0xafe>
 8011e2c:	e4c3      	b.n	80117b6 <_strtod_l+0x486>
 8011e2e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011e30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011e32:	4a34      	ldr	r2, [pc, #208]	@ (8011f04 <_strtod_l+0xbd4>)
 8011e34:	4b2a      	ldr	r3, [pc, #168]	@ (8011ee0 <_strtod_l+0xbb0>)
 8011e36:	f7ee fb23 	bl	8000480 <__aeabi_dcmpgt>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	d09a      	beq.n	8011d74 <_strtod_l+0xa44>
 8011e3e:	e4ba      	b.n	80117b6 <_strtod_l+0x486>
 8011e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d02a      	beq.n	8011e9c <_strtod_l+0xb6c>
 8011e46:	23d4      	movs	r3, #212	@ 0xd4
 8011e48:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011e4a:	04db      	lsls	r3, r3, #19
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d825      	bhi.n	8011e9c <_strtod_l+0xb6c>
 8011e50:	0020      	movs	r0, r4
 8011e52:	0029      	movs	r1, r5
 8011e54:	4a2c      	ldr	r2, [pc, #176]	@ (8011f08 <_strtod_l+0xbd8>)
 8011e56:	4b2d      	ldr	r3, [pc, #180]	@ (8011f0c <_strtod_l+0xbdc>)
 8011e58:	f7ee fb08 	bl	800046c <__aeabi_dcmple>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d016      	beq.n	8011e8e <_strtod_l+0xb5e>
 8011e60:	0020      	movs	r0, r4
 8011e62:	0029      	movs	r1, r5
 8011e64:	f7ee fba8 	bl	80005b8 <__aeabi_d2uiz>
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	d100      	bne.n	8011e6e <_strtod_l+0xb3e>
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	f7f1 fa8b 	bl	8003388 <__aeabi_ui2d>
 8011e72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e74:	0004      	movs	r4, r0
 8011e76:	000d      	movs	r5, r1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d122      	bne.n	8011ec2 <_strtod_l+0xb92>
 8011e7c:	2380      	movs	r3, #128	@ 0x80
 8011e7e:	061b      	lsls	r3, r3, #24
 8011e80:	18cb      	adds	r3, r1, r3
 8011e82:	9018      	str	r0, [sp, #96]	@ 0x60
 8011e84:	9319      	str	r3, [sp, #100]	@ 0x64
 8011e86:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011e88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e8a:	9214      	str	r2, [sp, #80]	@ 0x50
 8011e8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011e8e:	22d6      	movs	r2, #214	@ 0xd6
 8011e90:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011e92:	04d2      	lsls	r2, r2, #19
 8011e94:	189b      	adds	r3, r3, r2
 8011e96:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011e98:	1a9b      	subs	r3, r3, r2
 8011e9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8011e9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011e9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011ea0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8011ea2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011ea4:	f7ff f8f2 	bl	801108c <__ulp>
 8011ea8:	0002      	movs	r2, r0
 8011eaa:	000b      	movs	r3, r1
 8011eac:	0030      	movs	r0, r6
 8011eae:	0039      	movs	r1, r7
 8011eb0:	f7f0 fb7a 	bl	80025a8 <__aeabi_dmul>
 8011eb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011eb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011eb8:	f7ef fbce 	bl	8001658 <__aeabi_dadd>
 8011ebc:	0006      	movs	r6, r0
 8011ebe:	000f      	movs	r7, r1
 8011ec0:	e791      	b.n	8011de6 <_strtod_l+0xab6>
 8011ec2:	9418      	str	r4, [sp, #96]	@ 0x60
 8011ec4:	9519      	str	r5, [sp, #100]	@ 0x64
 8011ec6:	e7de      	b.n	8011e86 <_strtod_l+0xb56>
 8011ec8:	4b11      	ldr	r3, [pc, #68]	@ (8011f10 <_strtod_l+0xbe0>)
 8011eca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011ecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011ece:	f7ee fac3 	bl	8000458 <__aeabi_dcmplt>
 8011ed2:	e7b2      	b.n	8011e3a <_strtod_l+0xb0a>
 8011ed4:	fff00000 	.word	0xfff00000
 8011ed8:	000fffff 	.word	0x000fffff
 8011edc:	3ff00000 	.word	0x3ff00000
 8011ee0:	3fe00000 	.word	0x3fe00000
 8011ee4:	7ff00000 	.word	0x7ff00000
 8011ee8:	7fe00000 	.word	0x7fe00000
 8011eec:	fcb00000 	.word	0xfcb00000
 8011ef0:	7c9fffff 	.word	0x7c9fffff
 8011ef4:	7fefffff 	.word	0x7fefffff
 8011ef8:	bff00000 	.word	0xbff00000
 8011efc:	94a03595 	.word	0x94a03595
 8011f00:	3fdfffff 	.word	0x3fdfffff
 8011f04:	35afe535 	.word	0x35afe535
 8011f08:	ffc00000 	.word	0xffc00000
 8011f0c:	41dfffff 	.word	0x41dfffff
 8011f10:	3fcfffff 	.word	0x3fcfffff

08011f14 <_strtod_r>:
 8011f14:	b510      	push	{r4, lr}
 8011f16:	4b02      	ldr	r3, [pc, #8]	@ (8011f20 <_strtod_r+0xc>)
 8011f18:	f7ff fa0a 	bl	8011330 <_strtod_l>
 8011f1c:	bd10      	pop	{r4, pc}
 8011f1e:	46c0      	nop			@ (mov r8, r8)
 8011f20:	20000088 	.word	0x20000088

08011f24 <_strtol_l.constprop.0>:
 8011f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f26:	b085      	sub	sp, #20
 8011f28:	0017      	movs	r7, r2
 8011f2a:	001e      	movs	r6, r3
 8011f2c:	9003      	str	r0, [sp, #12]
 8011f2e:	9101      	str	r1, [sp, #4]
 8011f30:	2b24      	cmp	r3, #36	@ 0x24
 8011f32:	d844      	bhi.n	8011fbe <_strtol_l.constprop.0+0x9a>
 8011f34:	000c      	movs	r4, r1
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d041      	beq.n	8011fbe <_strtol_l.constprop.0+0x9a>
 8011f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8012030 <_strtol_l.constprop.0+0x10c>)
 8011f3c:	2208      	movs	r2, #8
 8011f3e:	469c      	mov	ip, r3
 8011f40:	0023      	movs	r3, r4
 8011f42:	4661      	mov	r1, ip
 8011f44:	781d      	ldrb	r5, [r3, #0]
 8011f46:	3401      	adds	r4, #1
 8011f48:	5d48      	ldrb	r0, [r1, r5]
 8011f4a:	0001      	movs	r1, r0
 8011f4c:	4011      	ands	r1, r2
 8011f4e:	4210      	tst	r0, r2
 8011f50:	d1f6      	bne.n	8011f40 <_strtol_l.constprop.0+0x1c>
 8011f52:	2d2d      	cmp	r5, #45	@ 0x2d
 8011f54:	d13a      	bne.n	8011fcc <_strtol_l.constprop.0+0xa8>
 8011f56:	7825      	ldrb	r5, [r4, #0]
 8011f58:	1c9c      	adds	r4, r3, #2
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	2210      	movs	r2, #16
 8011f60:	0033      	movs	r3, r6
 8011f62:	4393      	bics	r3, r2
 8011f64:	d109      	bne.n	8011f7a <_strtol_l.constprop.0+0x56>
 8011f66:	2d30      	cmp	r5, #48	@ 0x30
 8011f68:	d136      	bne.n	8011fd8 <_strtol_l.constprop.0+0xb4>
 8011f6a:	2120      	movs	r1, #32
 8011f6c:	7823      	ldrb	r3, [r4, #0]
 8011f6e:	438b      	bics	r3, r1
 8011f70:	2b58      	cmp	r3, #88	@ 0x58
 8011f72:	d131      	bne.n	8011fd8 <_strtol_l.constprop.0+0xb4>
 8011f74:	0016      	movs	r6, r2
 8011f76:	7865      	ldrb	r5, [r4, #1]
 8011f78:	3402      	adds	r4, #2
 8011f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8012034 <_strtol_l.constprop.0+0x110>)
 8011f7c:	9b00      	ldr	r3, [sp, #0]
 8011f7e:	4694      	mov	ip, r2
 8011f80:	4463      	add	r3, ip
 8011f82:	0031      	movs	r1, r6
 8011f84:	0018      	movs	r0, r3
 8011f86:	9302      	str	r3, [sp, #8]
 8011f88:	f7ee f960 	bl	800024c <__aeabi_uidivmod>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	4684      	mov	ip, r0
 8011f90:	0010      	movs	r0, r2
 8011f92:	002b      	movs	r3, r5
 8011f94:	3b30      	subs	r3, #48	@ 0x30
 8011f96:	2b09      	cmp	r3, #9
 8011f98:	d825      	bhi.n	8011fe6 <_strtol_l.constprop.0+0xc2>
 8011f9a:	001d      	movs	r5, r3
 8011f9c:	42ae      	cmp	r6, r5
 8011f9e:	dd31      	ble.n	8012004 <_strtol_l.constprop.0+0xe0>
 8011fa0:	1c53      	adds	r3, r2, #1
 8011fa2:	d009      	beq.n	8011fb8 <_strtol_l.constprop.0+0x94>
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	4252      	negs	r2, r2
 8011fa8:	4584      	cmp	ip, r0
 8011faa:	d305      	bcc.n	8011fb8 <_strtol_l.constprop.0+0x94>
 8011fac:	d101      	bne.n	8011fb2 <_strtol_l.constprop.0+0x8e>
 8011fae:	42a9      	cmp	r1, r5
 8011fb0:	db25      	blt.n	8011ffe <_strtol_l.constprop.0+0xda>
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	4370      	muls	r0, r6
 8011fb6:	1828      	adds	r0, r5, r0
 8011fb8:	7825      	ldrb	r5, [r4, #0]
 8011fba:	3401      	adds	r4, #1
 8011fbc:	e7e9      	b.n	8011f92 <_strtol_l.constprop.0+0x6e>
 8011fbe:	f7fd fd07 	bl	800f9d0 <__errno>
 8011fc2:	2316      	movs	r3, #22
 8011fc4:	6003      	str	r3, [r0, #0]
 8011fc6:	2000      	movs	r0, #0
 8011fc8:	b005      	add	sp, #20
 8011fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fcc:	9100      	str	r1, [sp, #0]
 8011fce:	2d2b      	cmp	r5, #43	@ 0x2b
 8011fd0:	d1c5      	bne.n	8011f5e <_strtol_l.constprop.0+0x3a>
 8011fd2:	7825      	ldrb	r5, [r4, #0]
 8011fd4:	1c9c      	adds	r4, r3, #2
 8011fd6:	e7c2      	b.n	8011f5e <_strtol_l.constprop.0+0x3a>
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	d1ce      	bne.n	8011f7a <_strtol_l.constprop.0+0x56>
 8011fdc:	3608      	adds	r6, #8
 8011fde:	2d30      	cmp	r5, #48	@ 0x30
 8011fe0:	d0cb      	beq.n	8011f7a <_strtol_l.constprop.0+0x56>
 8011fe2:	3602      	adds	r6, #2
 8011fe4:	e7c9      	b.n	8011f7a <_strtol_l.constprop.0+0x56>
 8011fe6:	002b      	movs	r3, r5
 8011fe8:	3b41      	subs	r3, #65	@ 0x41
 8011fea:	2b19      	cmp	r3, #25
 8011fec:	d801      	bhi.n	8011ff2 <_strtol_l.constprop.0+0xce>
 8011fee:	3d37      	subs	r5, #55	@ 0x37
 8011ff0:	e7d4      	b.n	8011f9c <_strtol_l.constprop.0+0x78>
 8011ff2:	002b      	movs	r3, r5
 8011ff4:	3b61      	subs	r3, #97	@ 0x61
 8011ff6:	2b19      	cmp	r3, #25
 8011ff8:	d804      	bhi.n	8012004 <_strtol_l.constprop.0+0xe0>
 8011ffa:	3d57      	subs	r5, #87	@ 0x57
 8011ffc:	e7ce      	b.n	8011f9c <_strtol_l.constprop.0+0x78>
 8011ffe:	2201      	movs	r2, #1
 8012000:	4252      	negs	r2, r2
 8012002:	e7d9      	b.n	8011fb8 <_strtol_l.constprop.0+0x94>
 8012004:	1c53      	adds	r3, r2, #1
 8012006:	d108      	bne.n	801201a <_strtol_l.constprop.0+0xf6>
 8012008:	2322      	movs	r3, #34	@ 0x22
 801200a:	9a03      	ldr	r2, [sp, #12]
 801200c:	9802      	ldr	r0, [sp, #8]
 801200e:	6013      	str	r3, [r2, #0]
 8012010:	2f00      	cmp	r7, #0
 8012012:	d0d9      	beq.n	8011fc8 <_strtol_l.constprop.0+0xa4>
 8012014:	1e63      	subs	r3, r4, #1
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	e007      	b.n	801202a <_strtol_l.constprop.0+0x106>
 801201a:	9b00      	ldr	r3, [sp, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d000      	beq.n	8012022 <_strtol_l.constprop.0+0xfe>
 8012020:	4240      	negs	r0, r0
 8012022:	2f00      	cmp	r7, #0
 8012024:	d0d0      	beq.n	8011fc8 <_strtol_l.constprop.0+0xa4>
 8012026:	2a00      	cmp	r2, #0
 8012028:	d1f4      	bne.n	8012014 <_strtol_l.constprop.0+0xf0>
 801202a:	9b01      	ldr	r3, [sp, #4]
 801202c:	603b      	str	r3, [r7, #0]
 801202e:	e7cb      	b.n	8011fc8 <_strtol_l.constprop.0+0xa4>
 8012030:	08013e21 	.word	0x08013e21
 8012034:	7fffffff 	.word	0x7fffffff

08012038 <_strtol_r>:
 8012038:	b510      	push	{r4, lr}
 801203a:	f7ff ff73 	bl	8011f24 <_strtol_l.constprop.0>
 801203e:	bd10      	pop	{r4, pc}

08012040 <__ssputs_r>:
 8012040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012042:	688e      	ldr	r6, [r1, #8]
 8012044:	b085      	sub	sp, #20
 8012046:	001f      	movs	r7, r3
 8012048:	000c      	movs	r4, r1
 801204a:	680b      	ldr	r3, [r1, #0]
 801204c:	9002      	str	r0, [sp, #8]
 801204e:	9203      	str	r2, [sp, #12]
 8012050:	42be      	cmp	r6, r7
 8012052:	d830      	bhi.n	80120b6 <__ssputs_r+0x76>
 8012054:	210c      	movs	r1, #12
 8012056:	5e62      	ldrsh	r2, [r4, r1]
 8012058:	2190      	movs	r1, #144	@ 0x90
 801205a:	00c9      	lsls	r1, r1, #3
 801205c:	420a      	tst	r2, r1
 801205e:	d028      	beq.n	80120b2 <__ssputs_r+0x72>
 8012060:	2003      	movs	r0, #3
 8012062:	6921      	ldr	r1, [r4, #16]
 8012064:	1a5b      	subs	r3, r3, r1
 8012066:	9301      	str	r3, [sp, #4]
 8012068:	6963      	ldr	r3, [r4, #20]
 801206a:	4343      	muls	r3, r0
 801206c:	9801      	ldr	r0, [sp, #4]
 801206e:	0fdd      	lsrs	r5, r3, #31
 8012070:	18ed      	adds	r5, r5, r3
 8012072:	1c7b      	adds	r3, r7, #1
 8012074:	181b      	adds	r3, r3, r0
 8012076:	106d      	asrs	r5, r5, #1
 8012078:	42ab      	cmp	r3, r5
 801207a:	d900      	bls.n	801207e <__ssputs_r+0x3e>
 801207c:	001d      	movs	r5, r3
 801207e:	0552      	lsls	r2, r2, #21
 8012080:	d528      	bpl.n	80120d4 <__ssputs_r+0x94>
 8012082:	0029      	movs	r1, r5
 8012084:	9802      	ldr	r0, [sp, #8]
 8012086:	f7fe fbe1 	bl	801084c <_malloc_r>
 801208a:	1e06      	subs	r6, r0, #0
 801208c:	d02c      	beq.n	80120e8 <__ssputs_r+0xa8>
 801208e:	9a01      	ldr	r2, [sp, #4]
 8012090:	6921      	ldr	r1, [r4, #16]
 8012092:	f7fd fcd5 	bl	800fa40 <memcpy>
 8012096:	89a2      	ldrh	r2, [r4, #12]
 8012098:	4b18      	ldr	r3, [pc, #96]	@ (80120fc <__ssputs_r+0xbc>)
 801209a:	401a      	ands	r2, r3
 801209c:	2380      	movs	r3, #128	@ 0x80
 801209e:	4313      	orrs	r3, r2
 80120a0:	81a3      	strh	r3, [r4, #12]
 80120a2:	9b01      	ldr	r3, [sp, #4]
 80120a4:	6126      	str	r6, [r4, #16]
 80120a6:	18f6      	adds	r6, r6, r3
 80120a8:	6026      	str	r6, [r4, #0]
 80120aa:	003e      	movs	r6, r7
 80120ac:	6165      	str	r5, [r4, #20]
 80120ae:	1aed      	subs	r5, r5, r3
 80120b0:	60a5      	str	r5, [r4, #8]
 80120b2:	42be      	cmp	r6, r7
 80120b4:	d900      	bls.n	80120b8 <__ssputs_r+0x78>
 80120b6:	003e      	movs	r6, r7
 80120b8:	0032      	movs	r2, r6
 80120ba:	9903      	ldr	r1, [sp, #12]
 80120bc:	6820      	ldr	r0, [r4, #0]
 80120be:	f000 f9ce 	bl	801245e <memmove>
 80120c2:	2000      	movs	r0, #0
 80120c4:	68a3      	ldr	r3, [r4, #8]
 80120c6:	1b9b      	subs	r3, r3, r6
 80120c8:	60a3      	str	r3, [r4, #8]
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	199b      	adds	r3, r3, r6
 80120ce:	6023      	str	r3, [r4, #0]
 80120d0:	b005      	add	sp, #20
 80120d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120d4:	002a      	movs	r2, r5
 80120d6:	9802      	ldr	r0, [sp, #8]
 80120d8:	f000 fdb6 	bl	8012c48 <_realloc_r>
 80120dc:	1e06      	subs	r6, r0, #0
 80120de:	d1e0      	bne.n	80120a2 <__ssputs_r+0x62>
 80120e0:	6921      	ldr	r1, [r4, #16]
 80120e2:	9802      	ldr	r0, [sp, #8]
 80120e4:	f7fe fb3c 	bl	8010760 <_free_r>
 80120e8:	230c      	movs	r3, #12
 80120ea:	2001      	movs	r0, #1
 80120ec:	9a02      	ldr	r2, [sp, #8]
 80120ee:	4240      	negs	r0, r0
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	89a2      	ldrh	r2, [r4, #12]
 80120f4:	3334      	adds	r3, #52	@ 0x34
 80120f6:	4313      	orrs	r3, r2
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	e7e9      	b.n	80120d0 <__ssputs_r+0x90>
 80120fc:	fffffb7f 	.word	0xfffffb7f

08012100 <_svfiprintf_r>:
 8012100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012102:	b0a1      	sub	sp, #132	@ 0x84
 8012104:	9003      	str	r0, [sp, #12]
 8012106:	001d      	movs	r5, r3
 8012108:	898b      	ldrh	r3, [r1, #12]
 801210a:	000f      	movs	r7, r1
 801210c:	0016      	movs	r6, r2
 801210e:	061b      	lsls	r3, r3, #24
 8012110:	d511      	bpl.n	8012136 <_svfiprintf_r+0x36>
 8012112:	690b      	ldr	r3, [r1, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10e      	bne.n	8012136 <_svfiprintf_r+0x36>
 8012118:	2140      	movs	r1, #64	@ 0x40
 801211a:	f7fe fb97 	bl	801084c <_malloc_r>
 801211e:	6038      	str	r0, [r7, #0]
 8012120:	6138      	str	r0, [r7, #16]
 8012122:	2800      	cmp	r0, #0
 8012124:	d105      	bne.n	8012132 <_svfiprintf_r+0x32>
 8012126:	230c      	movs	r3, #12
 8012128:	9a03      	ldr	r2, [sp, #12]
 801212a:	6013      	str	r3, [r2, #0]
 801212c:	2001      	movs	r0, #1
 801212e:	4240      	negs	r0, r0
 8012130:	e0cf      	b.n	80122d2 <_svfiprintf_r+0x1d2>
 8012132:	2340      	movs	r3, #64	@ 0x40
 8012134:	617b      	str	r3, [r7, #20]
 8012136:	2300      	movs	r3, #0
 8012138:	ac08      	add	r4, sp, #32
 801213a:	6163      	str	r3, [r4, #20]
 801213c:	3320      	adds	r3, #32
 801213e:	7663      	strb	r3, [r4, #25]
 8012140:	3310      	adds	r3, #16
 8012142:	76a3      	strb	r3, [r4, #26]
 8012144:	9507      	str	r5, [sp, #28]
 8012146:	0035      	movs	r5, r6
 8012148:	782b      	ldrb	r3, [r5, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d001      	beq.n	8012152 <_svfiprintf_r+0x52>
 801214e:	2b25      	cmp	r3, #37	@ 0x25
 8012150:	d148      	bne.n	80121e4 <_svfiprintf_r+0xe4>
 8012152:	1bab      	subs	r3, r5, r6
 8012154:	9305      	str	r3, [sp, #20]
 8012156:	42b5      	cmp	r5, r6
 8012158:	d00b      	beq.n	8012172 <_svfiprintf_r+0x72>
 801215a:	0032      	movs	r2, r6
 801215c:	0039      	movs	r1, r7
 801215e:	9803      	ldr	r0, [sp, #12]
 8012160:	f7ff ff6e 	bl	8012040 <__ssputs_r>
 8012164:	3001      	adds	r0, #1
 8012166:	d100      	bne.n	801216a <_svfiprintf_r+0x6a>
 8012168:	e0ae      	b.n	80122c8 <_svfiprintf_r+0x1c8>
 801216a:	6963      	ldr	r3, [r4, #20]
 801216c:	9a05      	ldr	r2, [sp, #20]
 801216e:	189b      	adds	r3, r3, r2
 8012170:	6163      	str	r3, [r4, #20]
 8012172:	782b      	ldrb	r3, [r5, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d100      	bne.n	801217a <_svfiprintf_r+0x7a>
 8012178:	e0a6      	b.n	80122c8 <_svfiprintf_r+0x1c8>
 801217a:	2201      	movs	r2, #1
 801217c:	2300      	movs	r3, #0
 801217e:	4252      	negs	r2, r2
 8012180:	6062      	str	r2, [r4, #4]
 8012182:	a904      	add	r1, sp, #16
 8012184:	3254      	adds	r2, #84	@ 0x54
 8012186:	1852      	adds	r2, r2, r1
 8012188:	1c6e      	adds	r6, r5, #1
 801218a:	6023      	str	r3, [r4, #0]
 801218c:	60e3      	str	r3, [r4, #12]
 801218e:	60a3      	str	r3, [r4, #8]
 8012190:	7013      	strb	r3, [r2, #0]
 8012192:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012194:	4b54      	ldr	r3, [pc, #336]	@ (80122e8 <_svfiprintf_r+0x1e8>)
 8012196:	2205      	movs	r2, #5
 8012198:	0018      	movs	r0, r3
 801219a:	7831      	ldrb	r1, [r6, #0]
 801219c:	9305      	str	r3, [sp, #20]
 801219e:	f7fd fc44 	bl	800fa2a <memchr>
 80121a2:	1c75      	adds	r5, r6, #1
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d11f      	bne.n	80121e8 <_svfiprintf_r+0xe8>
 80121a8:	6822      	ldr	r2, [r4, #0]
 80121aa:	06d3      	lsls	r3, r2, #27
 80121ac:	d504      	bpl.n	80121b8 <_svfiprintf_r+0xb8>
 80121ae:	2353      	movs	r3, #83	@ 0x53
 80121b0:	a904      	add	r1, sp, #16
 80121b2:	185b      	adds	r3, r3, r1
 80121b4:	2120      	movs	r1, #32
 80121b6:	7019      	strb	r1, [r3, #0]
 80121b8:	0713      	lsls	r3, r2, #28
 80121ba:	d504      	bpl.n	80121c6 <_svfiprintf_r+0xc6>
 80121bc:	2353      	movs	r3, #83	@ 0x53
 80121be:	a904      	add	r1, sp, #16
 80121c0:	185b      	adds	r3, r3, r1
 80121c2:	212b      	movs	r1, #43	@ 0x2b
 80121c4:	7019      	strb	r1, [r3, #0]
 80121c6:	7833      	ldrb	r3, [r6, #0]
 80121c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80121ca:	d016      	beq.n	80121fa <_svfiprintf_r+0xfa>
 80121cc:	0035      	movs	r5, r6
 80121ce:	2100      	movs	r1, #0
 80121d0:	200a      	movs	r0, #10
 80121d2:	68e3      	ldr	r3, [r4, #12]
 80121d4:	782a      	ldrb	r2, [r5, #0]
 80121d6:	1c6e      	adds	r6, r5, #1
 80121d8:	3a30      	subs	r2, #48	@ 0x30
 80121da:	2a09      	cmp	r2, #9
 80121dc:	d950      	bls.n	8012280 <_svfiprintf_r+0x180>
 80121de:	2900      	cmp	r1, #0
 80121e0:	d111      	bne.n	8012206 <_svfiprintf_r+0x106>
 80121e2:	e017      	b.n	8012214 <_svfiprintf_r+0x114>
 80121e4:	3501      	adds	r5, #1
 80121e6:	e7af      	b.n	8012148 <_svfiprintf_r+0x48>
 80121e8:	9b05      	ldr	r3, [sp, #20]
 80121ea:	6822      	ldr	r2, [r4, #0]
 80121ec:	1ac0      	subs	r0, r0, r3
 80121ee:	2301      	movs	r3, #1
 80121f0:	4083      	lsls	r3, r0
 80121f2:	4313      	orrs	r3, r2
 80121f4:	002e      	movs	r6, r5
 80121f6:	6023      	str	r3, [r4, #0]
 80121f8:	e7cc      	b.n	8012194 <_svfiprintf_r+0x94>
 80121fa:	9b07      	ldr	r3, [sp, #28]
 80121fc:	1d19      	adds	r1, r3, #4
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	9107      	str	r1, [sp, #28]
 8012202:	2b00      	cmp	r3, #0
 8012204:	db01      	blt.n	801220a <_svfiprintf_r+0x10a>
 8012206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012208:	e004      	b.n	8012214 <_svfiprintf_r+0x114>
 801220a:	425b      	negs	r3, r3
 801220c:	60e3      	str	r3, [r4, #12]
 801220e:	2302      	movs	r3, #2
 8012210:	4313      	orrs	r3, r2
 8012212:	6023      	str	r3, [r4, #0]
 8012214:	782b      	ldrb	r3, [r5, #0]
 8012216:	2b2e      	cmp	r3, #46	@ 0x2e
 8012218:	d10c      	bne.n	8012234 <_svfiprintf_r+0x134>
 801221a:	786b      	ldrb	r3, [r5, #1]
 801221c:	2b2a      	cmp	r3, #42	@ 0x2a
 801221e:	d134      	bne.n	801228a <_svfiprintf_r+0x18a>
 8012220:	9b07      	ldr	r3, [sp, #28]
 8012222:	3502      	adds	r5, #2
 8012224:	1d1a      	adds	r2, r3, #4
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	9207      	str	r2, [sp, #28]
 801222a:	2b00      	cmp	r3, #0
 801222c:	da01      	bge.n	8012232 <_svfiprintf_r+0x132>
 801222e:	2301      	movs	r3, #1
 8012230:	425b      	negs	r3, r3
 8012232:	9309      	str	r3, [sp, #36]	@ 0x24
 8012234:	4e2d      	ldr	r6, [pc, #180]	@ (80122ec <_svfiprintf_r+0x1ec>)
 8012236:	2203      	movs	r2, #3
 8012238:	0030      	movs	r0, r6
 801223a:	7829      	ldrb	r1, [r5, #0]
 801223c:	f7fd fbf5 	bl	800fa2a <memchr>
 8012240:	2800      	cmp	r0, #0
 8012242:	d006      	beq.n	8012252 <_svfiprintf_r+0x152>
 8012244:	2340      	movs	r3, #64	@ 0x40
 8012246:	1b80      	subs	r0, r0, r6
 8012248:	4083      	lsls	r3, r0
 801224a:	6822      	ldr	r2, [r4, #0]
 801224c:	3501      	adds	r5, #1
 801224e:	4313      	orrs	r3, r2
 8012250:	6023      	str	r3, [r4, #0]
 8012252:	7829      	ldrb	r1, [r5, #0]
 8012254:	2206      	movs	r2, #6
 8012256:	4826      	ldr	r0, [pc, #152]	@ (80122f0 <_svfiprintf_r+0x1f0>)
 8012258:	1c6e      	adds	r6, r5, #1
 801225a:	7621      	strb	r1, [r4, #24]
 801225c:	f7fd fbe5 	bl	800fa2a <memchr>
 8012260:	2800      	cmp	r0, #0
 8012262:	d038      	beq.n	80122d6 <_svfiprintf_r+0x1d6>
 8012264:	4b23      	ldr	r3, [pc, #140]	@ (80122f4 <_svfiprintf_r+0x1f4>)
 8012266:	2b00      	cmp	r3, #0
 8012268:	d122      	bne.n	80122b0 <_svfiprintf_r+0x1b0>
 801226a:	2207      	movs	r2, #7
 801226c:	9b07      	ldr	r3, [sp, #28]
 801226e:	3307      	adds	r3, #7
 8012270:	4393      	bics	r3, r2
 8012272:	3308      	adds	r3, #8
 8012274:	9307      	str	r3, [sp, #28]
 8012276:	6963      	ldr	r3, [r4, #20]
 8012278:	9a04      	ldr	r2, [sp, #16]
 801227a:	189b      	adds	r3, r3, r2
 801227c:	6163      	str	r3, [r4, #20]
 801227e:	e762      	b.n	8012146 <_svfiprintf_r+0x46>
 8012280:	4343      	muls	r3, r0
 8012282:	0035      	movs	r5, r6
 8012284:	2101      	movs	r1, #1
 8012286:	189b      	adds	r3, r3, r2
 8012288:	e7a4      	b.n	80121d4 <_svfiprintf_r+0xd4>
 801228a:	2300      	movs	r3, #0
 801228c:	200a      	movs	r0, #10
 801228e:	0019      	movs	r1, r3
 8012290:	3501      	adds	r5, #1
 8012292:	6063      	str	r3, [r4, #4]
 8012294:	782a      	ldrb	r2, [r5, #0]
 8012296:	1c6e      	adds	r6, r5, #1
 8012298:	3a30      	subs	r2, #48	@ 0x30
 801229a:	2a09      	cmp	r2, #9
 801229c:	d903      	bls.n	80122a6 <_svfiprintf_r+0x1a6>
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d0c8      	beq.n	8012234 <_svfiprintf_r+0x134>
 80122a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80122a4:	e7c6      	b.n	8012234 <_svfiprintf_r+0x134>
 80122a6:	4341      	muls	r1, r0
 80122a8:	0035      	movs	r5, r6
 80122aa:	2301      	movs	r3, #1
 80122ac:	1889      	adds	r1, r1, r2
 80122ae:	e7f1      	b.n	8012294 <_svfiprintf_r+0x194>
 80122b0:	aa07      	add	r2, sp, #28
 80122b2:	9200      	str	r2, [sp, #0]
 80122b4:	0021      	movs	r1, r4
 80122b6:	003a      	movs	r2, r7
 80122b8:	4b0f      	ldr	r3, [pc, #60]	@ (80122f8 <_svfiprintf_r+0x1f8>)
 80122ba:	9803      	ldr	r0, [sp, #12]
 80122bc:	f7fc fc00 	bl	800eac0 <_printf_float>
 80122c0:	9004      	str	r0, [sp, #16]
 80122c2:	9b04      	ldr	r3, [sp, #16]
 80122c4:	3301      	adds	r3, #1
 80122c6:	d1d6      	bne.n	8012276 <_svfiprintf_r+0x176>
 80122c8:	89bb      	ldrh	r3, [r7, #12]
 80122ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80122cc:	065b      	lsls	r3, r3, #25
 80122ce:	d500      	bpl.n	80122d2 <_svfiprintf_r+0x1d2>
 80122d0:	e72c      	b.n	801212c <_svfiprintf_r+0x2c>
 80122d2:	b021      	add	sp, #132	@ 0x84
 80122d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122d6:	aa07      	add	r2, sp, #28
 80122d8:	9200      	str	r2, [sp, #0]
 80122da:	0021      	movs	r1, r4
 80122dc:	003a      	movs	r2, r7
 80122de:	4b06      	ldr	r3, [pc, #24]	@ (80122f8 <_svfiprintf_r+0x1f8>)
 80122e0:	9803      	ldr	r0, [sp, #12]
 80122e2:	f7fc fe9b 	bl	800f01c <_printf_i>
 80122e6:	e7eb      	b.n	80122c0 <_svfiprintf_r+0x1c0>
 80122e8:	08013f21 	.word	0x08013f21
 80122ec:	08013f27 	.word	0x08013f27
 80122f0:	08013f2b 	.word	0x08013f2b
 80122f4:	0800eac1 	.word	0x0800eac1
 80122f8:	08012041 	.word	0x08012041

080122fc <__sflush_r>:
 80122fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122fe:	220c      	movs	r2, #12
 8012300:	5e8b      	ldrsh	r3, [r1, r2]
 8012302:	0005      	movs	r5, r0
 8012304:	000c      	movs	r4, r1
 8012306:	071a      	lsls	r2, r3, #28
 8012308:	d456      	bmi.n	80123b8 <__sflush_r+0xbc>
 801230a:	684a      	ldr	r2, [r1, #4]
 801230c:	2a00      	cmp	r2, #0
 801230e:	dc02      	bgt.n	8012316 <__sflush_r+0x1a>
 8012310:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8012312:	2a00      	cmp	r2, #0
 8012314:	dd4e      	ble.n	80123b4 <__sflush_r+0xb8>
 8012316:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012318:	2f00      	cmp	r7, #0
 801231a:	d04b      	beq.n	80123b4 <__sflush_r+0xb8>
 801231c:	2200      	movs	r2, #0
 801231e:	2080      	movs	r0, #128	@ 0x80
 8012320:	682e      	ldr	r6, [r5, #0]
 8012322:	602a      	str	r2, [r5, #0]
 8012324:	001a      	movs	r2, r3
 8012326:	0140      	lsls	r0, r0, #5
 8012328:	6a21      	ldr	r1, [r4, #32]
 801232a:	4002      	ands	r2, r0
 801232c:	4203      	tst	r3, r0
 801232e:	d033      	beq.n	8012398 <__sflush_r+0x9c>
 8012330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	075b      	lsls	r3, r3, #29
 8012336:	d506      	bpl.n	8012346 <__sflush_r+0x4a>
 8012338:	6863      	ldr	r3, [r4, #4]
 801233a:	1ad2      	subs	r2, r2, r3
 801233c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <__sflush_r+0x4a>
 8012342:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012344:	1ad2      	subs	r2, r2, r3
 8012346:	2300      	movs	r3, #0
 8012348:	0028      	movs	r0, r5
 801234a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801234c:	6a21      	ldr	r1, [r4, #32]
 801234e:	47b8      	blx	r7
 8012350:	89a2      	ldrh	r2, [r4, #12]
 8012352:	1c43      	adds	r3, r0, #1
 8012354:	d106      	bne.n	8012364 <__sflush_r+0x68>
 8012356:	6829      	ldr	r1, [r5, #0]
 8012358:	291d      	cmp	r1, #29
 801235a:	d846      	bhi.n	80123ea <__sflush_r+0xee>
 801235c:	4b29      	ldr	r3, [pc, #164]	@ (8012404 <__sflush_r+0x108>)
 801235e:	410b      	asrs	r3, r1
 8012360:	07db      	lsls	r3, r3, #31
 8012362:	d442      	bmi.n	80123ea <__sflush_r+0xee>
 8012364:	2300      	movs	r3, #0
 8012366:	6063      	str	r3, [r4, #4]
 8012368:	6923      	ldr	r3, [r4, #16]
 801236a:	6023      	str	r3, [r4, #0]
 801236c:	04d2      	lsls	r2, r2, #19
 801236e:	d505      	bpl.n	801237c <__sflush_r+0x80>
 8012370:	1c43      	adds	r3, r0, #1
 8012372:	d102      	bne.n	801237a <__sflush_r+0x7e>
 8012374:	682b      	ldr	r3, [r5, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d100      	bne.n	801237c <__sflush_r+0x80>
 801237a:	6560      	str	r0, [r4, #84]	@ 0x54
 801237c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801237e:	602e      	str	r6, [r5, #0]
 8012380:	2900      	cmp	r1, #0
 8012382:	d017      	beq.n	80123b4 <__sflush_r+0xb8>
 8012384:	0023      	movs	r3, r4
 8012386:	3344      	adds	r3, #68	@ 0x44
 8012388:	4299      	cmp	r1, r3
 801238a:	d002      	beq.n	8012392 <__sflush_r+0x96>
 801238c:	0028      	movs	r0, r5
 801238e:	f7fe f9e7 	bl	8010760 <_free_r>
 8012392:	2300      	movs	r3, #0
 8012394:	6363      	str	r3, [r4, #52]	@ 0x34
 8012396:	e00d      	b.n	80123b4 <__sflush_r+0xb8>
 8012398:	2301      	movs	r3, #1
 801239a:	0028      	movs	r0, r5
 801239c:	47b8      	blx	r7
 801239e:	0002      	movs	r2, r0
 80123a0:	1c43      	adds	r3, r0, #1
 80123a2:	d1c6      	bne.n	8012332 <__sflush_r+0x36>
 80123a4:	682b      	ldr	r3, [r5, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d0c3      	beq.n	8012332 <__sflush_r+0x36>
 80123aa:	2b1d      	cmp	r3, #29
 80123ac:	d001      	beq.n	80123b2 <__sflush_r+0xb6>
 80123ae:	2b16      	cmp	r3, #22
 80123b0:	d11a      	bne.n	80123e8 <__sflush_r+0xec>
 80123b2:	602e      	str	r6, [r5, #0]
 80123b4:	2000      	movs	r0, #0
 80123b6:	e01e      	b.n	80123f6 <__sflush_r+0xfa>
 80123b8:	690e      	ldr	r6, [r1, #16]
 80123ba:	2e00      	cmp	r6, #0
 80123bc:	d0fa      	beq.n	80123b4 <__sflush_r+0xb8>
 80123be:	680f      	ldr	r7, [r1, #0]
 80123c0:	600e      	str	r6, [r1, #0]
 80123c2:	1bba      	subs	r2, r7, r6
 80123c4:	9201      	str	r2, [sp, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	079b      	lsls	r3, r3, #30
 80123ca:	d100      	bne.n	80123ce <__sflush_r+0xd2>
 80123cc:	694a      	ldr	r2, [r1, #20]
 80123ce:	60a2      	str	r2, [r4, #8]
 80123d0:	9b01      	ldr	r3, [sp, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	ddee      	ble.n	80123b4 <__sflush_r+0xb8>
 80123d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80123d8:	0032      	movs	r2, r6
 80123da:	001f      	movs	r7, r3
 80123dc:	0028      	movs	r0, r5
 80123de:	9b01      	ldr	r3, [sp, #4]
 80123e0:	6a21      	ldr	r1, [r4, #32]
 80123e2:	47b8      	blx	r7
 80123e4:	2800      	cmp	r0, #0
 80123e6:	dc07      	bgt.n	80123f8 <__sflush_r+0xfc>
 80123e8:	89a2      	ldrh	r2, [r4, #12]
 80123ea:	2340      	movs	r3, #64	@ 0x40
 80123ec:	2001      	movs	r0, #1
 80123ee:	4313      	orrs	r3, r2
 80123f0:	b21b      	sxth	r3, r3
 80123f2:	81a3      	strh	r3, [r4, #12]
 80123f4:	4240      	negs	r0, r0
 80123f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123f8:	9b01      	ldr	r3, [sp, #4]
 80123fa:	1836      	adds	r6, r6, r0
 80123fc:	1a1b      	subs	r3, r3, r0
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	e7e6      	b.n	80123d0 <__sflush_r+0xd4>
 8012402:	46c0      	nop			@ (mov r8, r8)
 8012404:	dfbffffe 	.word	0xdfbffffe

08012408 <_fflush_r>:
 8012408:	690b      	ldr	r3, [r1, #16]
 801240a:	b570      	push	{r4, r5, r6, lr}
 801240c:	0005      	movs	r5, r0
 801240e:	000c      	movs	r4, r1
 8012410:	2b00      	cmp	r3, #0
 8012412:	d102      	bne.n	801241a <_fflush_r+0x12>
 8012414:	2500      	movs	r5, #0
 8012416:	0028      	movs	r0, r5
 8012418:	bd70      	pop	{r4, r5, r6, pc}
 801241a:	2800      	cmp	r0, #0
 801241c:	d004      	beq.n	8012428 <_fflush_r+0x20>
 801241e:	6a03      	ldr	r3, [r0, #32]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <_fflush_r+0x20>
 8012424:	f7fd f9a6 	bl	800f774 <__sinit>
 8012428:	220c      	movs	r2, #12
 801242a:	5ea3      	ldrsh	r3, [r4, r2]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d0f1      	beq.n	8012414 <_fflush_r+0xc>
 8012430:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012432:	07d2      	lsls	r2, r2, #31
 8012434:	d404      	bmi.n	8012440 <_fflush_r+0x38>
 8012436:	059b      	lsls	r3, r3, #22
 8012438:	d402      	bmi.n	8012440 <_fflush_r+0x38>
 801243a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801243c:	f7fd faf3 	bl	800fa26 <__retarget_lock_acquire_recursive>
 8012440:	0028      	movs	r0, r5
 8012442:	0021      	movs	r1, r4
 8012444:	f7ff ff5a 	bl	80122fc <__sflush_r>
 8012448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801244a:	0005      	movs	r5, r0
 801244c:	07db      	lsls	r3, r3, #31
 801244e:	d4e2      	bmi.n	8012416 <_fflush_r+0xe>
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	059b      	lsls	r3, r3, #22
 8012454:	d4df      	bmi.n	8012416 <_fflush_r+0xe>
 8012456:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012458:	f7fd fae6 	bl	800fa28 <__retarget_lock_release_recursive>
 801245c:	e7db      	b.n	8012416 <_fflush_r+0xe>

0801245e <memmove>:
 801245e:	b510      	push	{r4, lr}
 8012460:	4288      	cmp	r0, r1
 8012462:	d806      	bhi.n	8012472 <memmove+0x14>
 8012464:	2300      	movs	r3, #0
 8012466:	429a      	cmp	r2, r3
 8012468:	d008      	beq.n	801247c <memmove+0x1e>
 801246a:	5ccc      	ldrb	r4, [r1, r3]
 801246c:	54c4      	strb	r4, [r0, r3]
 801246e:	3301      	adds	r3, #1
 8012470:	e7f9      	b.n	8012466 <memmove+0x8>
 8012472:	188b      	adds	r3, r1, r2
 8012474:	4298      	cmp	r0, r3
 8012476:	d2f5      	bcs.n	8012464 <memmove+0x6>
 8012478:	3a01      	subs	r2, #1
 801247a:	d200      	bcs.n	801247e <memmove+0x20>
 801247c:	bd10      	pop	{r4, pc}
 801247e:	5c8b      	ldrb	r3, [r1, r2]
 8012480:	5483      	strb	r3, [r0, r2]
 8012482:	e7f9      	b.n	8012478 <memmove+0x1a>

08012484 <strncmp>:
 8012484:	b530      	push	{r4, r5, lr}
 8012486:	0005      	movs	r5, r0
 8012488:	1e10      	subs	r0, r2, #0
 801248a:	d00b      	beq.n	80124a4 <strncmp+0x20>
 801248c:	2400      	movs	r4, #0
 801248e:	3a01      	subs	r2, #1
 8012490:	5d2b      	ldrb	r3, [r5, r4]
 8012492:	5d08      	ldrb	r0, [r1, r4]
 8012494:	4283      	cmp	r3, r0
 8012496:	d104      	bne.n	80124a2 <strncmp+0x1e>
 8012498:	42a2      	cmp	r2, r4
 801249a:	d002      	beq.n	80124a2 <strncmp+0x1e>
 801249c:	3401      	adds	r4, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1f6      	bne.n	8012490 <strncmp+0xc>
 80124a2:	1a18      	subs	r0, r3, r0
 80124a4:	bd30      	pop	{r4, r5, pc}
	...

080124a8 <_sbrk_r>:
 80124a8:	2300      	movs	r3, #0
 80124aa:	b570      	push	{r4, r5, r6, lr}
 80124ac:	4d06      	ldr	r5, [pc, #24]	@ (80124c8 <_sbrk_r+0x20>)
 80124ae:	0004      	movs	r4, r0
 80124b0:	0008      	movs	r0, r1
 80124b2:	602b      	str	r3, [r5, #0]
 80124b4:	f7f2 fdb2 	bl	800501c <_sbrk>
 80124b8:	1c43      	adds	r3, r0, #1
 80124ba:	d103      	bne.n	80124c4 <_sbrk_r+0x1c>
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d000      	beq.n	80124c4 <_sbrk_r+0x1c>
 80124c2:	6023      	str	r3, [r4, #0]
 80124c4:	bd70      	pop	{r4, r5, r6, pc}
 80124c6:	46c0      	nop			@ (mov r8, r8)
 80124c8:	20004978 	.word	0x20004978

080124cc <nan>:
 80124cc:	2000      	movs	r0, #0
 80124ce:	4901      	ldr	r1, [pc, #4]	@ (80124d4 <nan+0x8>)
 80124d0:	4770      	bx	lr
 80124d2:	46c0      	nop			@ (mov r8, r8)
 80124d4:	7ff80000 	.word	0x7ff80000

080124d8 <__assert_func>:
 80124d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80124da:	0014      	movs	r4, r2
 80124dc:	001a      	movs	r2, r3
 80124de:	4b09      	ldr	r3, [pc, #36]	@ (8012504 <__assert_func+0x2c>)
 80124e0:	0005      	movs	r5, r0
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	000e      	movs	r6, r1
 80124e6:	68d8      	ldr	r0, [r3, #12]
 80124e8:	4b07      	ldr	r3, [pc, #28]	@ (8012508 <__assert_func+0x30>)
 80124ea:	2c00      	cmp	r4, #0
 80124ec:	d101      	bne.n	80124f2 <__assert_func+0x1a>
 80124ee:	4b07      	ldr	r3, [pc, #28]	@ (801250c <__assert_func+0x34>)
 80124f0:	001c      	movs	r4, r3
 80124f2:	4907      	ldr	r1, [pc, #28]	@ (8012510 <__assert_func+0x38>)
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	9402      	str	r4, [sp, #8]
 80124f8:	002b      	movs	r3, r5
 80124fa:	9600      	str	r6, [sp, #0]
 80124fc:	f000 fbe0 	bl	8012cc0 <fiprintf>
 8012500:	f000 fbee 	bl	8012ce0 <abort>
 8012504:	20000038 	.word	0x20000038
 8012508:	08013f3a 	.word	0x08013f3a
 801250c:	08013f75 	.word	0x08013f75
 8012510:	08013f47 	.word	0x08013f47

08012514 <_calloc_r>:
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	0c0b      	lsrs	r3, r1, #16
 8012518:	0c15      	lsrs	r5, r2, #16
 801251a:	2b00      	cmp	r3, #0
 801251c:	d11e      	bne.n	801255c <_calloc_r+0x48>
 801251e:	2d00      	cmp	r5, #0
 8012520:	d10c      	bne.n	801253c <_calloc_r+0x28>
 8012522:	b289      	uxth	r1, r1
 8012524:	b294      	uxth	r4, r2
 8012526:	434c      	muls	r4, r1
 8012528:	0021      	movs	r1, r4
 801252a:	f7fe f98f 	bl	801084c <_malloc_r>
 801252e:	1e05      	subs	r5, r0, #0
 8012530:	d01a      	beq.n	8012568 <_calloc_r+0x54>
 8012532:	0022      	movs	r2, r4
 8012534:	2100      	movs	r1, #0
 8012536:	f7fd f9f1 	bl	800f91c <memset>
 801253a:	e016      	b.n	801256a <_calloc_r+0x56>
 801253c:	1c2b      	adds	r3, r5, #0
 801253e:	1c0c      	adds	r4, r1, #0
 8012540:	b289      	uxth	r1, r1
 8012542:	b292      	uxth	r2, r2
 8012544:	434a      	muls	r2, r1
 8012546:	b29b      	uxth	r3, r3
 8012548:	b2a1      	uxth	r1, r4
 801254a:	4359      	muls	r1, r3
 801254c:	0c14      	lsrs	r4, r2, #16
 801254e:	190c      	adds	r4, r1, r4
 8012550:	0c23      	lsrs	r3, r4, #16
 8012552:	d107      	bne.n	8012564 <_calloc_r+0x50>
 8012554:	0424      	lsls	r4, r4, #16
 8012556:	b292      	uxth	r2, r2
 8012558:	4314      	orrs	r4, r2
 801255a:	e7e5      	b.n	8012528 <_calloc_r+0x14>
 801255c:	2d00      	cmp	r5, #0
 801255e:	d101      	bne.n	8012564 <_calloc_r+0x50>
 8012560:	1c14      	adds	r4, r2, #0
 8012562:	e7ed      	b.n	8012540 <_calloc_r+0x2c>
 8012564:	230c      	movs	r3, #12
 8012566:	6003      	str	r3, [r0, #0]
 8012568:	2500      	movs	r5, #0
 801256a:	0028      	movs	r0, r5
 801256c:	bd70      	pop	{r4, r5, r6, pc}

0801256e <rshift>:
 801256e:	0002      	movs	r2, r0
 8012570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012572:	6904      	ldr	r4, [r0, #16]
 8012574:	b085      	sub	sp, #20
 8012576:	3214      	adds	r2, #20
 8012578:	114b      	asrs	r3, r1, #5
 801257a:	0016      	movs	r6, r2
 801257c:	9302      	str	r3, [sp, #8]
 801257e:	429c      	cmp	r4, r3
 8012580:	dd31      	ble.n	80125e6 <rshift+0x78>
 8012582:	261f      	movs	r6, #31
 8012584:	000f      	movs	r7, r1
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	00a5      	lsls	r5, r4, #2
 801258a:	18d3      	adds	r3, r2, r3
 801258c:	4037      	ands	r7, r6
 801258e:	1955      	adds	r5, r2, r5
 8012590:	9300      	str	r3, [sp, #0]
 8012592:	9701      	str	r7, [sp, #4]
 8012594:	4231      	tst	r1, r6
 8012596:	d10d      	bne.n	80125b4 <rshift+0x46>
 8012598:	0016      	movs	r6, r2
 801259a:	0019      	movs	r1, r3
 801259c:	428d      	cmp	r5, r1
 801259e:	d836      	bhi.n	801260e <rshift+0xa0>
 80125a0:	9b00      	ldr	r3, [sp, #0]
 80125a2:	2600      	movs	r6, #0
 80125a4:	3b03      	subs	r3, #3
 80125a6:	429d      	cmp	r5, r3
 80125a8:	d302      	bcc.n	80125b0 <rshift+0x42>
 80125aa:	9b02      	ldr	r3, [sp, #8]
 80125ac:	1ae4      	subs	r4, r4, r3
 80125ae:	00a6      	lsls	r6, r4, #2
 80125b0:	1996      	adds	r6, r2, r6
 80125b2:	e018      	b.n	80125e6 <rshift+0x78>
 80125b4:	2120      	movs	r1, #32
 80125b6:	9e01      	ldr	r6, [sp, #4]
 80125b8:	9f01      	ldr	r7, [sp, #4]
 80125ba:	1b89      	subs	r1, r1, r6
 80125bc:	9e00      	ldr	r6, [sp, #0]
 80125be:	9103      	str	r1, [sp, #12]
 80125c0:	ce02      	ldmia	r6!, {r1}
 80125c2:	4694      	mov	ip, r2
 80125c4:	40f9      	lsrs	r1, r7
 80125c6:	42b5      	cmp	r5, r6
 80125c8:	d816      	bhi.n	80125f8 <rshift+0x8a>
 80125ca:	9b00      	ldr	r3, [sp, #0]
 80125cc:	2600      	movs	r6, #0
 80125ce:	3301      	adds	r3, #1
 80125d0:	429d      	cmp	r5, r3
 80125d2:	d303      	bcc.n	80125dc <rshift+0x6e>
 80125d4:	9b02      	ldr	r3, [sp, #8]
 80125d6:	1ae4      	subs	r4, r4, r3
 80125d8:	00a6      	lsls	r6, r4, #2
 80125da:	3e04      	subs	r6, #4
 80125dc:	1996      	adds	r6, r2, r6
 80125de:	6031      	str	r1, [r6, #0]
 80125e0:	2900      	cmp	r1, #0
 80125e2:	d000      	beq.n	80125e6 <rshift+0x78>
 80125e4:	3604      	adds	r6, #4
 80125e6:	1ab1      	subs	r1, r6, r2
 80125e8:	1089      	asrs	r1, r1, #2
 80125ea:	6101      	str	r1, [r0, #16]
 80125ec:	4296      	cmp	r6, r2
 80125ee:	d101      	bne.n	80125f4 <rshift+0x86>
 80125f0:	2300      	movs	r3, #0
 80125f2:	6143      	str	r3, [r0, #20]
 80125f4:	b005      	add	sp, #20
 80125f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125f8:	6837      	ldr	r7, [r6, #0]
 80125fa:	9b03      	ldr	r3, [sp, #12]
 80125fc:	409f      	lsls	r7, r3
 80125fe:	430f      	orrs	r7, r1
 8012600:	4661      	mov	r1, ip
 8012602:	c180      	stmia	r1!, {r7}
 8012604:	468c      	mov	ip, r1
 8012606:	9b01      	ldr	r3, [sp, #4]
 8012608:	ce02      	ldmia	r6!, {r1}
 801260a:	40d9      	lsrs	r1, r3
 801260c:	e7db      	b.n	80125c6 <rshift+0x58>
 801260e:	c980      	ldmia	r1!, {r7}
 8012610:	c680      	stmia	r6!, {r7}
 8012612:	e7c3      	b.n	801259c <rshift+0x2e>

08012614 <__hexdig_fun>:
 8012614:	0002      	movs	r2, r0
 8012616:	3a30      	subs	r2, #48	@ 0x30
 8012618:	0003      	movs	r3, r0
 801261a:	2a09      	cmp	r2, #9
 801261c:	d802      	bhi.n	8012624 <__hexdig_fun+0x10>
 801261e:	3b20      	subs	r3, #32
 8012620:	b2d8      	uxtb	r0, r3
 8012622:	4770      	bx	lr
 8012624:	0002      	movs	r2, r0
 8012626:	3a61      	subs	r2, #97	@ 0x61
 8012628:	2a05      	cmp	r2, #5
 801262a:	d801      	bhi.n	8012630 <__hexdig_fun+0x1c>
 801262c:	3b47      	subs	r3, #71	@ 0x47
 801262e:	e7f7      	b.n	8012620 <__hexdig_fun+0xc>
 8012630:	001a      	movs	r2, r3
 8012632:	3a41      	subs	r2, #65	@ 0x41
 8012634:	2000      	movs	r0, #0
 8012636:	2a05      	cmp	r2, #5
 8012638:	d8f3      	bhi.n	8012622 <__hexdig_fun+0xe>
 801263a:	3b27      	subs	r3, #39	@ 0x27
 801263c:	e7f0      	b.n	8012620 <__hexdig_fun+0xc>
	...

08012640 <__gethex>:
 8012640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012642:	b089      	sub	sp, #36	@ 0x24
 8012644:	9307      	str	r3, [sp, #28]
 8012646:	680b      	ldr	r3, [r1, #0]
 8012648:	9201      	str	r2, [sp, #4]
 801264a:	9003      	str	r0, [sp, #12]
 801264c:	9106      	str	r1, [sp, #24]
 801264e:	1c9a      	adds	r2, r3, #2
 8012650:	0011      	movs	r1, r2
 8012652:	3201      	adds	r2, #1
 8012654:	1e50      	subs	r0, r2, #1
 8012656:	7800      	ldrb	r0, [r0, #0]
 8012658:	2830      	cmp	r0, #48	@ 0x30
 801265a:	d0f9      	beq.n	8012650 <__gethex+0x10>
 801265c:	1acb      	subs	r3, r1, r3
 801265e:	3b02      	subs	r3, #2
 8012660:	9305      	str	r3, [sp, #20]
 8012662:	9100      	str	r1, [sp, #0]
 8012664:	f7ff ffd6 	bl	8012614 <__hexdig_fun>
 8012668:	2300      	movs	r3, #0
 801266a:	001d      	movs	r5, r3
 801266c:	9302      	str	r3, [sp, #8]
 801266e:	4298      	cmp	r0, r3
 8012670:	d11e      	bne.n	80126b0 <__gethex+0x70>
 8012672:	2201      	movs	r2, #1
 8012674:	49a6      	ldr	r1, [pc, #664]	@ (8012910 <__gethex+0x2d0>)
 8012676:	9800      	ldr	r0, [sp, #0]
 8012678:	f7ff ff04 	bl	8012484 <strncmp>
 801267c:	0007      	movs	r7, r0
 801267e:	42a8      	cmp	r0, r5
 8012680:	d000      	beq.n	8012684 <__gethex+0x44>
 8012682:	e06a      	b.n	801275a <__gethex+0x11a>
 8012684:	9b00      	ldr	r3, [sp, #0]
 8012686:	7858      	ldrb	r0, [r3, #1]
 8012688:	1c5c      	adds	r4, r3, #1
 801268a:	f7ff ffc3 	bl	8012614 <__hexdig_fun>
 801268e:	2301      	movs	r3, #1
 8012690:	9302      	str	r3, [sp, #8]
 8012692:	42a8      	cmp	r0, r5
 8012694:	d02f      	beq.n	80126f6 <__gethex+0xb6>
 8012696:	9400      	str	r4, [sp, #0]
 8012698:	9b00      	ldr	r3, [sp, #0]
 801269a:	7818      	ldrb	r0, [r3, #0]
 801269c:	2830      	cmp	r0, #48	@ 0x30
 801269e:	d009      	beq.n	80126b4 <__gethex+0x74>
 80126a0:	f7ff ffb8 	bl	8012614 <__hexdig_fun>
 80126a4:	4242      	negs	r2, r0
 80126a6:	4142      	adcs	r2, r0
 80126a8:	2301      	movs	r3, #1
 80126aa:	0025      	movs	r5, r4
 80126ac:	9202      	str	r2, [sp, #8]
 80126ae:	9305      	str	r3, [sp, #20]
 80126b0:	9c00      	ldr	r4, [sp, #0]
 80126b2:	e004      	b.n	80126be <__gethex+0x7e>
 80126b4:	9b00      	ldr	r3, [sp, #0]
 80126b6:	3301      	adds	r3, #1
 80126b8:	9300      	str	r3, [sp, #0]
 80126ba:	e7ed      	b.n	8012698 <__gethex+0x58>
 80126bc:	3401      	adds	r4, #1
 80126be:	7820      	ldrb	r0, [r4, #0]
 80126c0:	f7ff ffa8 	bl	8012614 <__hexdig_fun>
 80126c4:	1e07      	subs	r7, r0, #0
 80126c6:	d1f9      	bne.n	80126bc <__gethex+0x7c>
 80126c8:	2201      	movs	r2, #1
 80126ca:	0020      	movs	r0, r4
 80126cc:	4990      	ldr	r1, [pc, #576]	@ (8012910 <__gethex+0x2d0>)
 80126ce:	f7ff fed9 	bl	8012484 <strncmp>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	d10d      	bne.n	80126f2 <__gethex+0xb2>
 80126d6:	2d00      	cmp	r5, #0
 80126d8:	d106      	bne.n	80126e8 <__gethex+0xa8>
 80126da:	3401      	adds	r4, #1
 80126dc:	0025      	movs	r5, r4
 80126de:	7820      	ldrb	r0, [r4, #0]
 80126e0:	f7ff ff98 	bl	8012614 <__hexdig_fun>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d102      	bne.n	80126ee <__gethex+0xae>
 80126e8:	1b2d      	subs	r5, r5, r4
 80126ea:	00af      	lsls	r7, r5, #2
 80126ec:	e003      	b.n	80126f6 <__gethex+0xb6>
 80126ee:	3401      	adds	r4, #1
 80126f0:	e7f5      	b.n	80126de <__gethex+0x9e>
 80126f2:	2d00      	cmp	r5, #0
 80126f4:	d1f8      	bne.n	80126e8 <__gethex+0xa8>
 80126f6:	2220      	movs	r2, #32
 80126f8:	7823      	ldrb	r3, [r4, #0]
 80126fa:	0026      	movs	r6, r4
 80126fc:	4393      	bics	r3, r2
 80126fe:	2b50      	cmp	r3, #80	@ 0x50
 8012700:	d11d      	bne.n	801273e <__gethex+0xfe>
 8012702:	7863      	ldrb	r3, [r4, #1]
 8012704:	2b2b      	cmp	r3, #43	@ 0x2b
 8012706:	d02d      	beq.n	8012764 <__gethex+0x124>
 8012708:	2b2d      	cmp	r3, #45	@ 0x2d
 801270a:	d02f      	beq.n	801276c <__gethex+0x12c>
 801270c:	2300      	movs	r3, #0
 801270e:	1c66      	adds	r6, r4, #1
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	7830      	ldrb	r0, [r6, #0]
 8012714:	f7ff ff7e 	bl	8012614 <__hexdig_fun>
 8012718:	1e43      	subs	r3, r0, #1
 801271a:	b2db      	uxtb	r3, r3
 801271c:	0005      	movs	r5, r0
 801271e:	2b18      	cmp	r3, #24
 8012720:	d82a      	bhi.n	8012778 <__gethex+0x138>
 8012722:	7870      	ldrb	r0, [r6, #1]
 8012724:	f7ff ff76 	bl	8012614 <__hexdig_fun>
 8012728:	1e43      	subs	r3, r0, #1
 801272a:	b2db      	uxtb	r3, r3
 801272c:	3601      	adds	r6, #1
 801272e:	3d10      	subs	r5, #16
 8012730:	2b18      	cmp	r3, #24
 8012732:	d91d      	bls.n	8012770 <__gethex+0x130>
 8012734:	9b04      	ldr	r3, [sp, #16]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d000      	beq.n	801273c <__gethex+0xfc>
 801273a:	426d      	negs	r5, r5
 801273c:	197f      	adds	r7, r7, r5
 801273e:	9b06      	ldr	r3, [sp, #24]
 8012740:	601e      	str	r6, [r3, #0]
 8012742:	9b02      	ldr	r3, [sp, #8]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d019      	beq.n	801277c <__gethex+0x13c>
 8012748:	9b05      	ldr	r3, [sp, #20]
 801274a:	2606      	movs	r6, #6
 801274c:	425a      	negs	r2, r3
 801274e:	4153      	adcs	r3, r2
 8012750:	425b      	negs	r3, r3
 8012752:	401e      	ands	r6, r3
 8012754:	0030      	movs	r0, r6
 8012756:	b009      	add	sp, #36	@ 0x24
 8012758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801275a:	2301      	movs	r3, #1
 801275c:	2700      	movs	r7, #0
 801275e:	9c00      	ldr	r4, [sp, #0]
 8012760:	9302      	str	r3, [sp, #8]
 8012762:	e7c8      	b.n	80126f6 <__gethex+0xb6>
 8012764:	2300      	movs	r3, #0
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	1ca6      	adds	r6, r4, #2
 801276a:	e7d2      	b.n	8012712 <__gethex+0xd2>
 801276c:	2301      	movs	r3, #1
 801276e:	e7fa      	b.n	8012766 <__gethex+0x126>
 8012770:	230a      	movs	r3, #10
 8012772:	435d      	muls	r5, r3
 8012774:	182d      	adds	r5, r5, r0
 8012776:	e7d4      	b.n	8012722 <__gethex+0xe2>
 8012778:	0026      	movs	r6, r4
 801277a:	e7e0      	b.n	801273e <__gethex+0xfe>
 801277c:	9b00      	ldr	r3, [sp, #0]
 801277e:	9902      	ldr	r1, [sp, #8]
 8012780:	1ae3      	subs	r3, r4, r3
 8012782:	3b01      	subs	r3, #1
 8012784:	2b07      	cmp	r3, #7
 8012786:	dc0a      	bgt.n	801279e <__gethex+0x15e>
 8012788:	9803      	ldr	r0, [sp, #12]
 801278a:	f7fe f8ef 	bl	801096c <_Balloc>
 801278e:	1e05      	subs	r5, r0, #0
 8012790:	d108      	bne.n	80127a4 <__gethex+0x164>
 8012792:	002a      	movs	r2, r5
 8012794:	21e4      	movs	r1, #228	@ 0xe4
 8012796:	4b5f      	ldr	r3, [pc, #380]	@ (8012914 <__gethex+0x2d4>)
 8012798:	485f      	ldr	r0, [pc, #380]	@ (8012918 <__gethex+0x2d8>)
 801279a:	f7ff fe9d 	bl	80124d8 <__assert_func>
 801279e:	3101      	adds	r1, #1
 80127a0:	105b      	asrs	r3, r3, #1
 80127a2:	e7ef      	b.n	8012784 <__gethex+0x144>
 80127a4:	0003      	movs	r3, r0
 80127a6:	3314      	adds	r3, #20
 80127a8:	9302      	str	r3, [sp, #8]
 80127aa:	9305      	str	r3, [sp, #20]
 80127ac:	2300      	movs	r3, #0
 80127ae:	001e      	movs	r6, r3
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	9b00      	ldr	r3, [sp, #0]
 80127b4:	42a3      	cmp	r3, r4
 80127b6:	d338      	bcc.n	801282a <__gethex+0x1ea>
 80127b8:	9c05      	ldr	r4, [sp, #20]
 80127ba:	9b02      	ldr	r3, [sp, #8]
 80127bc:	c440      	stmia	r4!, {r6}
 80127be:	1ae4      	subs	r4, r4, r3
 80127c0:	10a4      	asrs	r4, r4, #2
 80127c2:	0030      	movs	r0, r6
 80127c4:	612c      	str	r4, [r5, #16]
 80127c6:	f7fe f9c9 	bl	8010b5c <__hi0bits>
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	0164      	lsls	r4, r4, #5
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	1a26      	subs	r6, r4, r0
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	429e      	cmp	r6, r3
 80127d6:	dd52      	ble.n	801287e <__gethex+0x23e>
 80127d8:	1af6      	subs	r6, r6, r3
 80127da:	0031      	movs	r1, r6
 80127dc:	0028      	movs	r0, r5
 80127de:	f7fe fd6c 	bl	80112ba <__any_on>
 80127e2:	1e04      	subs	r4, r0, #0
 80127e4:	d00f      	beq.n	8012806 <__gethex+0x1c6>
 80127e6:	2401      	movs	r4, #1
 80127e8:	231f      	movs	r3, #31
 80127ea:	0020      	movs	r0, r4
 80127ec:	1e72      	subs	r2, r6, #1
 80127ee:	4013      	ands	r3, r2
 80127f0:	4098      	lsls	r0, r3
 80127f2:	0003      	movs	r3, r0
 80127f4:	1151      	asrs	r1, r2, #5
 80127f6:	9802      	ldr	r0, [sp, #8]
 80127f8:	0089      	lsls	r1, r1, #2
 80127fa:	5809      	ldr	r1, [r1, r0]
 80127fc:	4219      	tst	r1, r3
 80127fe:	d002      	beq.n	8012806 <__gethex+0x1c6>
 8012800:	42a2      	cmp	r2, r4
 8012802:	dc34      	bgt.n	801286e <__gethex+0x22e>
 8012804:	2402      	movs	r4, #2
 8012806:	0031      	movs	r1, r6
 8012808:	0028      	movs	r0, r5
 801280a:	f7ff feb0 	bl	801256e <rshift>
 801280e:	19bf      	adds	r7, r7, r6
 8012810:	9b01      	ldr	r3, [sp, #4]
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	42bb      	cmp	r3, r7
 8012816:	da42      	bge.n	801289e <__gethex+0x25e>
 8012818:	0029      	movs	r1, r5
 801281a:	9803      	ldr	r0, [sp, #12]
 801281c:	f7fe f8ea 	bl	80109f4 <_Bfree>
 8012820:	2300      	movs	r3, #0
 8012822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012824:	26a3      	movs	r6, #163	@ 0xa3
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	e794      	b.n	8012754 <__gethex+0x114>
 801282a:	3c01      	subs	r4, #1
 801282c:	7823      	ldrb	r3, [r4, #0]
 801282e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012830:	d012      	beq.n	8012858 <__gethex+0x218>
 8012832:	9b04      	ldr	r3, [sp, #16]
 8012834:	2b20      	cmp	r3, #32
 8012836:	d104      	bne.n	8012842 <__gethex+0x202>
 8012838:	9b05      	ldr	r3, [sp, #20]
 801283a:	c340      	stmia	r3!, {r6}
 801283c:	2600      	movs	r6, #0
 801283e:	9305      	str	r3, [sp, #20]
 8012840:	9604      	str	r6, [sp, #16]
 8012842:	7820      	ldrb	r0, [r4, #0]
 8012844:	f7ff fee6 	bl	8012614 <__hexdig_fun>
 8012848:	230f      	movs	r3, #15
 801284a:	4018      	ands	r0, r3
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	4098      	lsls	r0, r3
 8012850:	3304      	adds	r3, #4
 8012852:	4306      	orrs	r6, r0
 8012854:	9304      	str	r3, [sp, #16]
 8012856:	e7ac      	b.n	80127b2 <__gethex+0x172>
 8012858:	9b00      	ldr	r3, [sp, #0]
 801285a:	42a3      	cmp	r3, r4
 801285c:	d8e9      	bhi.n	8012832 <__gethex+0x1f2>
 801285e:	2201      	movs	r2, #1
 8012860:	0020      	movs	r0, r4
 8012862:	492b      	ldr	r1, [pc, #172]	@ (8012910 <__gethex+0x2d0>)
 8012864:	f7ff fe0e 	bl	8012484 <strncmp>
 8012868:	2800      	cmp	r0, #0
 801286a:	d1e2      	bne.n	8012832 <__gethex+0x1f2>
 801286c:	e7a1      	b.n	80127b2 <__gethex+0x172>
 801286e:	0028      	movs	r0, r5
 8012870:	1eb1      	subs	r1, r6, #2
 8012872:	f7fe fd22 	bl	80112ba <__any_on>
 8012876:	2800      	cmp	r0, #0
 8012878:	d0c4      	beq.n	8012804 <__gethex+0x1c4>
 801287a:	2403      	movs	r4, #3
 801287c:	e7c3      	b.n	8012806 <__gethex+0x1c6>
 801287e:	9b00      	ldr	r3, [sp, #0]
 8012880:	2400      	movs	r4, #0
 8012882:	429e      	cmp	r6, r3
 8012884:	dac4      	bge.n	8012810 <__gethex+0x1d0>
 8012886:	1b9e      	subs	r6, r3, r6
 8012888:	0029      	movs	r1, r5
 801288a:	0032      	movs	r2, r6
 801288c:	9803      	ldr	r0, [sp, #12]
 801288e:	f7fe fadb 	bl	8010e48 <__lshift>
 8012892:	0003      	movs	r3, r0
 8012894:	3314      	adds	r3, #20
 8012896:	0005      	movs	r5, r0
 8012898:	1bbf      	subs	r7, r7, r6
 801289a:	9302      	str	r3, [sp, #8]
 801289c:	e7b8      	b.n	8012810 <__gethex+0x1d0>
 801289e:	9b01      	ldr	r3, [sp, #4]
 80128a0:	685e      	ldr	r6, [r3, #4]
 80128a2:	42be      	cmp	r6, r7
 80128a4:	dd6f      	ble.n	8012986 <__gethex+0x346>
 80128a6:	9b00      	ldr	r3, [sp, #0]
 80128a8:	1bf6      	subs	r6, r6, r7
 80128aa:	42b3      	cmp	r3, r6
 80128ac:	dc36      	bgt.n	801291c <__gethex+0x2dc>
 80128ae:	9b01      	ldr	r3, [sp, #4]
 80128b0:	68db      	ldr	r3, [r3, #12]
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d024      	beq.n	8012900 <__gethex+0x2c0>
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d026      	beq.n	8012908 <__gethex+0x2c8>
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d117      	bne.n	80128ee <__gethex+0x2ae>
 80128be:	9b00      	ldr	r3, [sp, #0]
 80128c0:	42b3      	cmp	r3, r6
 80128c2:	d114      	bne.n	80128ee <__gethex+0x2ae>
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d10b      	bne.n	80128e0 <__gethex+0x2a0>
 80128c8:	9b01      	ldr	r3, [sp, #4]
 80128ca:	9a07      	ldr	r2, [sp, #28]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	2662      	movs	r6, #98	@ 0x62
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	2301      	movs	r3, #1
 80128d4:	9a02      	ldr	r2, [sp, #8]
 80128d6:	612b      	str	r3, [r5, #16]
 80128d8:	6013      	str	r3, [r2, #0]
 80128da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128dc:	601d      	str	r5, [r3, #0]
 80128de:	e739      	b.n	8012754 <__gethex+0x114>
 80128e0:	9900      	ldr	r1, [sp, #0]
 80128e2:	0028      	movs	r0, r5
 80128e4:	3901      	subs	r1, #1
 80128e6:	f7fe fce8 	bl	80112ba <__any_on>
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d1ec      	bne.n	80128c8 <__gethex+0x288>
 80128ee:	0029      	movs	r1, r5
 80128f0:	9803      	ldr	r0, [sp, #12]
 80128f2:	f7fe f87f 	bl	80109f4 <_Bfree>
 80128f6:	2300      	movs	r3, #0
 80128f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128fa:	2650      	movs	r6, #80	@ 0x50
 80128fc:	6013      	str	r3, [r2, #0]
 80128fe:	e729      	b.n	8012754 <__gethex+0x114>
 8012900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012902:	2b00      	cmp	r3, #0
 8012904:	d1f3      	bne.n	80128ee <__gethex+0x2ae>
 8012906:	e7df      	b.n	80128c8 <__gethex+0x288>
 8012908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1dc      	bne.n	80128c8 <__gethex+0x288>
 801290e:	e7ee      	b.n	80128ee <__gethex+0x2ae>
 8012910:	08013dc8 	.word	0x08013dc8
 8012914:	08013c5d 	.word	0x08013c5d
 8012918:	08013f76 	.word	0x08013f76
 801291c:	1e77      	subs	r7, r6, #1
 801291e:	2c00      	cmp	r4, #0
 8012920:	d12f      	bne.n	8012982 <__gethex+0x342>
 8012922:	2f00      	cmp	r7, #0
 8012924:	d004      	beq.n	8012930 <__gethex+0x2f0>
 8012926:	0039      	movs	r1, r7
 8012928:	0028      	movs	r0, r5
 801292a:	f7fe fcc6 	bl	80112ba <__any_on>
 801292e:	0004      	movs	r4, r0
 8012930:	231f      	movs	r3, #31
 8012932:	117a      	asrs	r2, r7, #5
 8012934:	401f      	ands	r7, r3
 8012936:	3b1e      	subs	r3, #30
 8012938:	40bb      	lsls	r3, r7
 801293a:	9902      	ldr	r1, [sp, #8]
 801293c:	0092      	lsls	r2, r2, #2
 801293e:	5852      	ldr	r2, [r2, r1]
 8012940:	421a      	tst	r2, r3
 8012942:	d001      	beq.n	8012948 <__gethex+0x308>
 8012944:	2302      	movs	r3, #2
 8012946:	431c      	orrs	r4, r3
 8012948:	9b00      	ldr	r3, [sp, #0]
 801294a:	0031      	movs	r1, r6
 801294c:	1b9b      	subs	r3, r3, r6
 801294e:	2602      	movs	r6, #2
 8012950:	0028      	movs	r0, r5
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	f7ff fe0b 	bl	801256e <rshift>
 8012958:	9b01      	ldr	r3, [sp, #4]
 801295a:	685f      	ldr	r7, [r3, #4]
 801295c:	2c00      	cmp	r4, #0
 801295e:	d03f      	beq.n	80129e0 <__gethex+0x3a0>
 8012960:	9b01      	ldr	r3, [sp, #4]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	2b02      	cmp	r3, #2
 8012966:	d010      	beq.n	801298a <__gethex+0x34a>
 8012968:	2b03      	cmp	r3, #3
 801296a:	d012      	beq.n	8012992 <__gethex+0x352>
 801296c:	2b01      	cmp	r3, #1
 801296e:	d106      	bne.n	801297e <__gethex+0x33e>
 8012970:	07a2      	lsls	r2, r4, #30
 8012972:	d504      	bpl.n	801297e <__gethex+0x33e>
 8012974:	9a02      	ldr	r2, [sp, #8]
 8012976:	6812      	ldr	r2, [r2, #0]
 8012978:	4314      	orrs	r4, r2
 801297a:	421c      	tst	r4, r3
 801297c:	d10c      	bne.n	8012998 <__gethex+0x358>
 801297e:	2310      	movs	r3, #16
 8012980:	e02d      	b.n	80129de <__gethex+0x39e>
 8012982:	2401      	movs	r4, #1
 8012984:	e7d4      	b.n	8012930 <__gethex+0x2f0>
 8012986:	2601      	movs	r6, #1
 8012988:	e7e8      	b.n	801295c <__gethex+0x31c>
 801298a:	2301      	movs	r3, #1
 801298c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801298e:	1a9b      	subs	r3, r3, r2
 8012990:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0f2      	beq.n	801297e <__gethex+0x33e>
 8012998:	692b      	ldr	r3, [r5, #16]
 801299a:	2000      	movs	r0, #0
 801299c:	9302      	str	r3, [sp, #8]
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	002b      	movs	r3, r5
 80129a4:	9a04      	ldr	r2, [sp, #16]
 80129a6:	3314      	adds	r3, #20
 80129a8:	1899      	adds	r1, r3, r2
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	1c54      	adds	r4, r2, #1
 80129ae:	d01c      	beq.n	80129ea <__gethex+0x3aa>
 80129b0:	3201      	adds	r2, #1
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	002b      	movs	r3, r5
 80129b6:	3314      	adds	r3, #20
 80129b8:	2e02      	cmp	r6, #2
 80129ba:	d13f      	bne.n	8012a3c <__gethex+0x3fc>
 80129bc:	9a01      	ldr	r2, [sp, #4]
 80129be:	9900      	ldr	r1, [sp, #0]
 80129c0:	6812      	ldr	r2, [r2, #0]
 80129c2:	3a01      	subs	r2, #1
 80129c4:	428a      	cmp	r2, r1
 80129c6:	d109      	bne.n	80129dc <__gethex+0x39c>
 80129c8:	000a      	movs	r2, r1
 80129ca:	201f      	movs	r0, #31
 80129cc:	4010      	ands	r0, r2
 80129ce:	2201      	movs	r2, #1
 80129d0:	4082      	lsls	r2, r0
 80129d2:	1149      	asrs	r1, r1, #5
 80129d4:	0089      	lsls	r1, r1, #2
 80129d6:	58cb      	ldr	r3, [r1, r3]
 80129d8:	4213      	tst	r3, r2
 80129da:	d13d      	bne.n	8012a58 <__gethex+0x418>
 80129dc:	2320      	movs	r3, #32
 80129de:	431e      	orrs	r6, r3
 80129e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129e2:	601d      	str	r5, [r3, #0]
 80129e4:	9b07      	ldr	r3, [sp, #28]
 80129e6:	601f      	str	r7, [r3, #0]
 80129e8:	e6b4      	b.n	8012754 <__gethex+0x114>
 80129ea:	c301      	stmia	r3!, {r0}
 80129ec:	4299      	cmp	r1, r3
 80129ee:	d8dc      	bhi.n	80129aa <__gethex+0x36a>
 80129f0:	68ab      	ldr	r3, [r5, #8]
 80129f2:	9a02      	ldr	r2, [sp, #8]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	db18      	blt.n	8012a2a <__gethex+0x3ea>
 80129f8:	6869      	ldr	r1, [r5, #4]
 80129fa:	9803      	ldr	r0, [sp, #12]
 80129fc:	3101      	adds	r1, #1
 80129fe:	f7fd ffb5 	bl	801096c <_Balloc>
 8012a02:	1e04      	subs	r4, r0, #0
 8012a04:	d104      	bne.n	8012a10 <__gethex+0x3d0>
 8012a06:	0022      	movs	r2, r4
 8012a08:	2184      	movs	r1, #132	@ 0x84
 8012a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8012a80 <__gethex+0x440>)
 8012a0c:	481d      	ldr	r0, [pc, #116]	@ (8012a84 <__gethex+0x444>)
 8012a0e:	e6c4      	b.n	801279a <__gethex+0x15a>
 8012a10:	0029      	movs	r1, r5
 8012a12:	692a      	ldr	r2, [r5, #16]
 8012a14:	310c      	adds	r1, #12
 8012a16:	3202      	adds	r2, #2
 8012a18:	0092      	lsls	r2, r2, #2
 8012a1a:	300c      	adds	r0, #12
 8012a1c:	f7fd f810 	bl	800fa40 <memcpy>
 8012a20:	0029      	movs	r1, r5
 8012a22:	9803      	ldr	r0, [sp, #12]
 8012a24:	f7fd ffe6 	bl	80109f4 <_Bfree>
 8012a28:	0025      	movs	r5, r4
 8012a2a:	692b      	ldr	r3, [r5, #16]
 8012a2c:	1c5a      	adds	r2, r3, #1
 8012a2e:	612a      	str	r2, [r5, #16]
 8012a30:	2201      	movs	r2, #1
 8012a32:	3304      	adds	r3, #4
 8012a34:	009b      	lsls	r3, r3, #2
 8012a36:	18eb      	adds	r3, r5, r3
 8012a38:	605a      	str	r2, [r3, #4]
 8012a3a:	e7bb      	b.n	80129b4 <__gethex+0x374>
 8012a3c:	692a      	ldr	r2, [r5, #16]
 8012a3e:	9902      	ldr	r1, [sp, #8]
 8012a40:	428a      	cmp	r2, r1
 8012a42:	dd0b      	ble.n	8012a5c <__gethex+0x41c>
 8012a44:	2101      	movs	r1, #1
 8012a46:	0028      	movs	r0, r5
 8012a48:	f7ff fd91 	bl	801256e <rshift>
 8012a4c:	9b01      	ldr	r3, [sp, #4]
 8012a4e:	3701      	adds	r7, #1
 8012a50:	689b      	ldr	r3, [r3, #8]
 8012a52:	42bb      	cmp	r3, r7
 8012a54:	da00      	bge.n	8012a58 <__gethex+0x418>
 8012a56:	e6df      	b.n	8012818 <__gethex+0x1d8>
 8012a58:	2601      	movs	r6, #1
 8012a5a:	e7bf      	b.n	80129dc <__gethex+0x39c>
 8012a5c:	221f      	movs	r2, #31
 8012a5e:	9c00      	ldr	r4, [sp, #0]
 8012a60:	9900      	ldr	r1, [sp, #0]
 8012a62:	4014      	ands	r4, r2
 8012a64:	4211      	tst	r1, r2
 8012a66:	d0f7      	beq.n	8012a58 <__gethex+0x418>
 8012a68:	9a04      	ldr	r2, [sp, #16]
 8012a6a:	189b      	adds	r3, r3, r2
 8012a6c:	3b04      	subs	r3, #4
 8012a6e:	6818      	ldr	r0, [r3, #0]
 8012a70:	f7fe f874 	bl	8010b5c <__hi0bits>
 8012a74:	2320      	movs	r3, #32
 8012a76:	1b1b      	subs	r3, r3, r4
 8012a78:	4298      	cmp	r0, r3
 8012a7a:	dbe3      	blt.n	8012a44 <__gethex+0x404>
 8012a7c:	e7ec      	b.n	8012a58 <__gethex+0x418>
 8012a7e:	46c0      	nop			@ (mov r8, r8)
 8012a80:	08013c5d 	.word	0x08013c5d
 8012a84:	08013f76 	.word	0x08013f76

08012a88 <L_shift>:
 8012a88:	2308      	movs	r3, #8
 8012a8a:	b570      	push	{r4, r5, r6, lr}
 8012a8c:	2520      	movs	r5, #32
 8012a8e:	1a9a      	subs	r2, r3, r2
 8012a90:	0092      	lsls	r2, r2, #2
 8012a92:	1aad      	subs	r5, r5, r2
 8012a94:	6843      	ldr	r3, [r0, #4]
 8012a96:	6804      	ldr	r4, [r0, #0]
 8012a98:	001e      	movs	r6, r3
 8012a9a:	40ae      	lsls	r6, r5
 8012a9c:	40d3      	lsrs	r3, r2
 8012a9e:	4334      	orrs	r4, r6
 8012aa0:	6004      	str	r4, [r0, #0]
 8012aa2:	6043      	str	r3, [r0, #4]
 8012aa4:	3004      	adds	r0, #4
 8012aa6:	4288      	cmp	r0, r1
 8012aa8:	d3f4      	bcc.n	8012a94 <L_shift+0xc>
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}

08012aac <__match>:
 8012aac:	b530      	push	{r4, r5, lr}
 8012aae:	6803      	ldr	r3, [r0, #0]
 8012ab0:	780c      	ldrb	r4, [r1, #0]
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	2c00      	cmp	r4, #0
 8012ab6:	d102      	bne.n	8012abe <__match+0x12>
 8012ab8:	6003      	str	r3, [r0, #0]
 8012aba:	2001      	movs	r0, #1
 8012abc:	bd30      	pop	{r4, r5, pc}
 8012abe:	781a      	ldrb	r2, [r3, #0]
 8012ac0:	0015      	movs	r5, r2
 8012ac2:	3d41      	subs	r5, #65	@ 0x41
 8012ac4:	2d19      	cmp	r5, #25
 8012ac6:	d800      	bhi.n	8012aca <__match+0x1e>
 8012ac8:	3220      	adds	r2, #32
 8012aca:	3101      	adds	r1, #1
 8012acc:	42a2      	cmp	r2, r4
 8012ace:	d0ef      	beq.n	8012ab0 <__match+0x4>
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	e7f3      	b.n	8012abc <__match+0x10>

08012ad4 <__hexnan>:
 8012ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ad6:	680b      	ldr	r3, [r1, #0]
 8012ad8:	b08b      	sub	sp, #44	@ 0x2c
 8012ada:	9201      	str	r2, [sp, #4]
 8012adc:	9901      	ldr	r1, [sp, #4]
 8012ade:	115a      	asrs	r2, r3, #5
 8012ae0:	0092      	lsls	r2, r2, #2
 8012ae2:	188a      	adds	r2, r1, r2
 8012ae4:	9202      	str	r2, [sp, #8]
 8012ae6:	0019      	movs	r1, r3
 8012ae8:	221f      	movs	r2, #31
 8012aea:	4011      	ands	r1, r2
 8012aec:	9008      	str	r0, [sp, #32]
 8012aee:	9106      	str	r1, [sp, #24]
 8012af0:	4213      	tst	r3, r2
 8012af2:	d002      	beq.n	8012afa <__hexnan+0x26>
 8012af4:	9b02      	ldr	r3, [sp, #8]
 8012af6:	3304      	adds	r3, #4
 8012af8:	9302      	str	r3, [sp, #8]
 8012afa:	9b02      	ldr	r3, [sp, #8]
 8012afc:	2500      	movs	r5, #0
 8012afe:	1f1f      	subs	r7, r3, #4
 8012b00:	003e      	movs	r6, r7
 8012b02:	003c      	movs	r4, r7
 8012b04:	9b08      	ldr	r3, [sp, #32]
 8012b06:	603d      	str	r5, [r7, #0]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	9507      	str	r5, [sp, #28]
 8012b0c:	9305      	str	r3, [sp, #20]
 8012b0e:	9503      	str	r5, [sp, #12]
 8012b10:	9b05      	ldr	r3, [sp, #20]
 8012b12:	3301      	adds	r3, #1
 8012b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b16:	9b05      	ldr	r3, [sp, #20]
 8012b18:	785b      	ldrb	r3, [r3, #1]
 8012b1a:	9304      	str	r3, [sp, #16]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d028      	beq.n	8012b72 <__hexnan+0x9e>
 8012b20:	9804      	ldr	r0, [sp, #16]
 8012b22:	f7ff fd77 	bl	8012614 <__hexdig_fun>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d155      	bne.n	8012bd6 <__hexnan+0x102>
 8012b2a:	9b04      	ldr	r3, [sp, #16]
 8012b2c:	2b20      	cmp	r3, #32
 8012b2e:	d819      	bhi.n	8012b64 <__hexnan+0x90>
 8012b30:	9b03      	ldr	r3, [sp, #12]
 8012b32:	9a07      	ldr	r2, [sp, #28]
 8012b34:	4293      	cmp	r3, r2
 8012b36:	dd12      	ble.n	8012b5e <__hexnan+0x8a>
 8012b38:	42b4      	cmp	r4, r6
 8012b3a:	d206      	bcs.n	8012b4a <__hexnan+0x76>
 8012b3c:	2d07      	cmp	r5, #7
 8012b3e:	dc04      	bgt.n	8012b4a <__hexnan+0x76>
 8012b40:	002a      	movs	r2, r5
 8012b42:	0031      	movs	r1, r6
 8012b44:	0020      	movs	r0, r4
 8012b46:	f7ff ff9f 	bl	8012a88 <L_shift>
 8012b4a:	9b01      	ldr	r3, [sp, #4]
 8012b4c:	2508      	movs	r5, #8
 8012b4e:	429c      	cmp	r4, r3
 8012b50:	d905      	bls.n	8012b5e <__hexnan+0x8a>
 8012b52:	1f26      	subs	r6, r4, #4
 8012b54:	2500      	movs	r5, #0
 8012b56:	0034      	movs	r4, r6
 8012b58:	9b03      	ldr	r3, [sp, #12]
 8012b5a:	6035      	str	r5, [r6, #0]
 8012b5c:	9307      	str	r3, [sp, #28]
 8012b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b60:	9305      	str	r3, [sp, #20]
 8012b62:	e7d5      	b.n	8012b10 <__hexnan+0x3c>
 8012b64:	9b04      	ldr	r3, [sp, #16]
 8012b66:	2b29      	cmp	r3, #41	@ 0x29
 8012b68:	d15a      	bne.n	8012c20 <__hexnan+0x14c>
 8012b6a:	9b05      	ldr	r3, [sp, #20]
 8012b6c:	9a08      	ldr	r2, [sp, #32]
 8012b6e:	3302      	adds	r3, #2
 8012b70:	6013      	str	r3, [r2, #0]
 8012b72:	9b03      	ldr	r3, [sp, #12]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d053      	beq.n	8012c20 <__hexnan+0x14c>
 8012b78:	42b4      	cmp	r4, r6
 8012b7a:	d206      	bcs.n	8012b8a <__hexnan+0xb6>
 8012b7c:	2d07      	cmp	r5, #7
 8012b7e:	dc04      	bgt.n	8012b8a <__hexnan+0xb6>
 8012b80:	002a      	movs	r2, r5
 8012b82:	0031      	movs	r1, r6
 8012b84:	0020      	movs	r0, r4
 8012b86:	f7ff ff7f 	bl	8012a88 <L_shift>
 8012b8a:	9b01      	ldr	r3, [sp, #4]
 8012b8c:	429c      	cmp	r4, r3
 8012b8e:	d936      	bls.n	8012bfe <__hexnan+0x12a>
 8012b90:	001a      	movs	r2, r3
 8012b92:	0023      	movs	r3, r4
 8012b94:	cb02      	ldmia	r3!, {r1}
 8012b96:	c202      	stmia	r2!, {r1}
 8012b98:	429f      	cmp	r7, r3
 8012b9a:	d2fb      	bcs.n	8012b94 <__hexnan+0xc0>
 8012b9c:	9b02      	ldr	r3, [sp, #8]
 8012b9e:	1c61      	adds	r1, r4, #1
 8012ba0:	1eda      	subs	r2, r3, #3
 8012ba2:	2304      	movs	r3, #4
 8012ba4:	4291      	cmp	r1, r2
 8012ba6:	d805      	bhi.n	8012bb4 <__hexnan+0xe0>
 8012ba8:	9b02      	ldr	r3, [sp, #8]
 8012baa:	3b04      	subs	r3, #4
 8012bac:	1b1b      	subs	r3, r3, r4
 8012bae:	089b      	lsrs	r3, r3, #2
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	9a01      	ldr	r2, [sp, #4]
 8012bb6:	18d3      	adds	r3, r2, r3
 8012bb8:	2200      	movs	r2, #0
 8012bba:	c304      	stmia	r3!, {r2}
 8012bbc:	429f      	cmp	r7, r3
 8012bbe:	d2fc      	bcs.n	8012bba <__hexnan+0xe6>
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d104      	bne.n	8012bd0 <__hexnan+0xfc>
 8012bc6:	9b01      	ldr	r3, [sp, #4]
 8012bc8:	429f      	cmp	r7, r3
 8012bca:	d127      	bne.n	8012c1c <__hexnan+0x148>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	603b      	str	r3, [r7, #0]
 8012bd0:	2005      	movs	r0, #5
 8012bd2:	b00b      	add	sp, #44	@ 0x2c
 8012bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bd6:	9b03      	ldr	r3, [sp, #12]
 8012bd8:	3501      	adds	r5, #1
 8012bda:	3301      	adds	r3, #1
 8012bdc:	9303      	str	r3, [sp, #12]
 8012bde:	2d08      	cmp	r5, #8
 8012be0:	dd06      	ble.n	8012bf0 <__hexnan+0x11c>
 8012be2:	9b01      	ldr	r3, [sp, #4]
 8012be4:	429c      	cmp	r4, r3
 8012be6:	d9ba      	bls.n	8012b5e <__hexnan+0x8a>
 8012be8:	2300      	movs	r3, #0
 8012bea:	2501      	movs	r5, #1
 8012bec:	3c04      	subs	r4, #4
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	220f      	movs	r2, #15
 8012bf2:	6823      	ldr	r3, [r4, #0]
 8012bf4:	4010      	ands	r0, r2
 8012bf6:	011b      	lsls	r3, r3, #4
 8012bf8:	4303      	orrs	r3, r0
 8012bfa:	6023      	str	r3, [r4, #0]
 8012bfc:	e7af      	b.n	8012b5e <__hexnan+0x8a>
 8012bfe:	9b06      	ldr	r3, [sp, #24]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0dd      	beq.n	8012bc0 <__hexnan+0xec>
 8012c04:	2320      	movs	r3, #32
 8012c06:	9a06      	ldr	r2, [sp, #24]
 8012c08:	9902      	ldr	r1, [sp, #8]
 8012c0a:	1a9b      	subs	r3, r3, r2
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	4252      	negs	r2, r2
 8012c10:	40da      	lsrs	r2, r3
 8012c12:	3904      	subs	r1, #4
 8012c14:	680b      	ldr	r3, [r1, #0]
 8012c16:	4013      	ands	r3, r2
 8012c18:	600b      	str	r3, [r1, #0]
 8012c1a:	e7d1      	b.n	8012bc0 <__hexnan+0xec>
 8012c1c:	3f04      	subs	r7, #4
 8012c1e:	e7cf      	b.n	8012bc0 <__hexnan+0xec>
 8012c20:	2004      	movs	r0, #4
 8012c22:	e7d6      	b.n	8012bd2 <__hexnan+0xfe>

08012c24 <__ascii_mbtowc>:
 8012c24:	b082      	sub	sp, #8
 8012c26:	2900      	cmp	r1, #0
 8012c28:	d100      	bne.n	8012c2c <__ascii_mbtowc+0x8>
 8012c2a:	a901      	add	r1, sp, #4
 8012c2c:	1e10      	subs	r0, r2, #0
 8012c2e:	d006      	beq.n	8012c3e <__ascii_mbtowc+0x1a>
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d006      	beq.n	8012c42 <__ascii_mbtowc+0x1e>
 8012c34:	7813      	ldrb	r3, [r2, #0]
 8012c36:	600b      	str	r3, [r1, #0]
 8012c38:	7810      	ldrb	r0, [r2, #0]
 8012c3a:	1e43      	subs	r3, r0, #1
 8012c3c:	4198      	sbcs	r0, r3
 8012c3e:	b002      	add	sp, #8
 8012c40:	4770      	bx	lr
 8012c42:	2002      	movs	r0, #2
 8012c44:	4240      	negs	r0, r0
 8012c46:	e7fa      	b.n	8012c3e <__ascii_mbtowc+0x1a>

08012c48 <_realloc_r>:
 8012c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c4a:	0006      	movs	r6, r0
 8012c4c:	000c      	movs	r4, r1
 8012c4e:	0015      	movs	r5, r2
 8012c50:	2900      	cmp	r1, #0
 8012c52:	d105      	bne.n	8012c60 <_realloc_r+0x18>
 8012c54:	0011      	movs	r1, r2
 8012c56:	f7fd fdf9 	bl	801084c <_malloc_r>
 8012c5a:	0004      	movs	r4, r0
 8012c5c:	0020      	movs	r0, r4
 8012c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c60:	2a00      	cmp	r2, #0
 8012c62:	d103      	bne.n	8012c6c <_realloc_r+0x24>
 8012c64:	f7fd fd7c 	bl	8010760 <_free_r>
 8012c68:	2400      	movs	r4, #0
 8012c6a:	e7f7      	b.n	8012c5c <_realloc_r+0x14>
 8012c6c:	f000 f83f 	bl	8012cee <_malloc_usable_size_r>
 8012c70:	0007      	movs	r7, r0
 8012c72:	4285      	cmp	r5, r0
 8012c74:	d802      	bhi.n	8012c7c <_realloc_r+0x34>
 8012c76:	0843      	lsrs	r3, r0, #1
 8012c78:	42ab      	cmp	r3, r5
 8012c7a:	d3ef      	bcc.n	8012c5c <_realloc_r+0x14>
 8012c7c:	0029      	movs	r1, r5
 8012c7e:	0030      	movs	r0, r6
 8012c80:	f7fd fde4 	bl	801084c <_malloc_r>
 8012c84:	9001      	str	r0, [sp, #4]
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d0ee      	beq.n	8012c68 <_realloc_r+0x20>
 8012c8a:	002a      	movs	r2, r5
 8012c8c:	42bd      	cmp	r5, r7
 8012c8e:	d900      	bls.n	8012c92 <_realloc_r+0x4a>
 8012c90:	003a      	movs	r2, r7
 8012c92:	0021      	movs	r1, r4
 8012c94:	9801      	ldr	r0, [sp, #4]
 8012c96:	f7fc fed3 	bl	800fa40 <memcpy>
 8012c9a:	0021      	movs	r1, r4
 8012c9c:	0030      	movs	r0, r6
 8012c9e:	f7fd fd5f 	bl	8010760 <_free_r>
 8012ca2:	9c01      	ldr	r4, [sp, #4]
 8012ca4:	e7da      	b.n	8012c5c <_realloc_r+0x14>

08012ca6 <__ascii_wctomb>:
 8012ca6:	0003      	movs	r3, r0
 8012ca8:	1e08      	subs	r0, r1, #0
 8012caa:	d005      	beq.n	8012cb8 <__ascii_wctomb+0x12>
 8012cac:	2aff      	cmp	r2, #255	@ 0xff
 8012cae:	d904      	bls.n	8012cba <__ascii_wctomb+0x14>
 8012cb0:	228a      	movs	r2, #138	@ 0x8a
 8012cb2:	2001      	movs	r0, #1
 8012cb4:	601a      	str	r2, [r3, #0]
 8012cb6:	4240      	negs	r0, r0
 8012cb8:	4770      	bx	lr
 8012cba:	2001      	movs	r0, #1
 8012cbc:	700a      	strb	r2, [r1, #0]
 8012cbe:	e7fb      	b.n	8012cb8 <__ascii_wctomb+0x12>

08012cc0 <fiprintf>:
 8012cc0:	b40e      	push	{r1, r2, r3}
 8012cc2:	b517      	push	{r0, r1, r2, r4, lr}
 8012cc4:	4c05      	ldr	r4, [pc, #20]	@ (8012cdc <fiprintf+0x1c>)
 8012cc6:	ab05      	add	r3, sp, #20
 8012cc8:	cb04      	ldmia	r3!, {r2}
 8012cca:	0001      	movs	r1, r0
 8012ccc:	6820      	ldr	r0, [r4, #0]
 8012cce:	9301      	str	r3, [sp, #4]
 8012cd0:	f000 f83c 	bl	8012d4c <_vfiprintf_r>
 8012cd4:	bc1e      	pop	{r1, r2, r3, r4}
 8012cd6:	bc08      	pop	{r3}
 8012cd8:	b003      	add	sp, #12
 8012cda:	4718      	bx	r3
 8012cdc:	20000038 	.word	0x20000038

08012ce0 <abort>:
 8012ce0:	2006      	movs	r0, #6
 8012ce2:	b510      	push	{r4, lr}
 8012ce4:	f000 fa18 	bl	8013118 <raise>
 8012ce8:	2001      	movs	r0, #1
 8012cea:	f7f2 f925 	bl	8004f38 <_exit>

08012cee <_malloc_usable_size_r>:
 8012cee:	1f0b      	subs	r3, r1, #4
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	1f18      	subs	r0, r3, #4
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	da01      	bge.n	8012cfc <_malloc_usable_size_r+0xe>
 8012cf8:	580b      	ldr	r3, [r1, r0]
 8012cfa:	18c0      	adds	r0, r0, r3
 8012cfc:	4770      	bx	lr

08012cfe <__sfputc_r>:
 8012cfe:	6893      	ldr	r3, [r2, #8]
 8012d00:	b510      	push	{r4, lr}
 8012d02:	3b01      	subs	r3, #1
 8012d04:	6093      	str	r3, [r2, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	da04      	bge.n	8012d14 <__sfputc_r+0x16>
 8012d0a:	6994      	ldr	r4, [r2, #24]
 8012d0c:	42a3      	cmp	r3, r4
 8012d0e:	db07      	blt.n	8012d20 <__sfputc_r+0x22>
 8012d10:	290a      	cmp	r1, #10
 8012d12:	d005      	beq.n	8012d20 <__sfputc_r+0x22>
 8012d14:	6813      	ldr	r3, [r2, #0]
 8012d16:	1c58      	adds	r0, r3, #1
 8012d18:	6010      	str	r0, [r2, #0]
 8012d1a:	7019      	strb	r1, [r3, #0]
 8012d1c:	0008      	movs	r0, r1
 8012d1e:	bd10      	pop	{r4, pc}
 8012d20:	f000 f930 	bl	8012f84 <__swbuf_r>
 8012d24:	0001      	movs	r1, r0
 8012d26:	e7f9      	b.n	8012d1c <__sfputc_r+0x1e>

08012d28 <__sfputs_r>:
 8012d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2a:	0006      	movs	r6, r0
 8012d2c:	000f      	movs	r7, r1
 8012d2e:	0014      	movs	r4, r2
 8012d30:	18d5      	adds	r5, r2, r3
 8012d32:	42ac      	cmp	r4, r5
 8012d34:	d101      	bne.n	8012d3a <__sfputs_r+0x12>
 8012d36:	2000      	movs	r0, #0
 8012d38:	e007      	b.n	8012d4a <__sfputs_r+0x22>
 8012d3a:	7821      	ldrb	r1, [r4, #0]
 8012d3c:	003a      	movs	r2, r7
 8012d3e:	0030      	movs	r0, r6
 8012d40:	f7ff ffdd 	bl	8012cfe <__sfputc_r>
 8012d44:	3401      	adds	r4, #1
 8012d46:	1c43      	adds	r3, r0, #1
 8012d48:	d1f3      	bne.n	8012d32 <__sfputs_r+0xa>
 8012d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d4c <_vfiprintf_r>:
 8012d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d4e:	b0a1      	sub	sp, #132	@ 0x84
 8012d50:	000f      	movs	r7, r1
 8012d52:	0015      	movs	r5, r2
 8012d54:	001e      	movs	r6, r3
 8012d56:	9003      	str	r0, [sp, #12]
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d004      	beq.n	8012d66 <_vfiprintf_r+0x1a>
 8012d5c:	6a03      	ldr	r3, [r0, #32]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <_vfiprintf_r+0x1a>
 8012d62:	f7fc fd07 	bl	800f774 <__sinit>
 8012d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012d68:	07db      	lsls	r3, r3, #31
 8012d6a:	d405      	bmi.n	8012d78 <_vfiprintf_r+0x2c>
 8012d6c:	89bb      	ldrh	r3, [r7, #12]
 8012d6e:	059b      	lsls	r3, r3, #22
 8012d70:	d402      	bmi.n	8012d78 <_vfiprintf_r+0x2c>
 8012d72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012d74:	f7fc fe57 	bl	800fa26 <__retarget_lock_acquire_recursive>
 8012d78:	89bb      	ldrh	r3, [r7, #12]
 8012d7a:	071b      	lsls	r3, r3, #28
 8012d7c:	d502      	bpl.n	8012d84 <_vfiprintf_r+0x38>
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d113      	bne.n	8012dac <_vfiprintf_r+0x60>
 8012d84:	0039      	movs	r1, r7
 8012d86:	9803      	ldr	r0, [sp, #12]
 8012d88:	f000 f93e 	bl	8013008 <__swsetup_r>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d00d      	beq.n	8012dac <_vfiprintf_r+0x60>
 8012d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012d92:	07db      	lsls	r3, r3, #31
 8012d94:	d503      	bpl.n	8012d9e <_vfiprintf_r+0x52>
 8012d96:	2001      	movs	r0, #1
 8012d98:	4240      	negs	r0, r0
 8012d9a:	b021      	add	sp, #132	@ 0x84
 8012d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d9e:	89bb      	ldrh	r3, [r7, #12]
 8012da0:	059b      	lsls	r3, r3, #22
 8012da2:	d4f8      	bmi.n	8012d96 <_vfiprintf_r+0x4a>
 8012da4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012da6:	f7fc fe3f 	bl	800fa28 <__retarget_lock_release_recursive>
 8012daa:	e7f4      	b.n	8012d96 <_vfiprintf_r+0x4a>
 8012dac:	2300      	movs	r3, #0
 8012dae:	ac08      	add	r4, sp, #32
 8012db0:	6163      	str	r3, [r4, #20]
 8012db2:	3320      	adds	r3, #32
 8012db4:	7663      	strb	r3, [r4, #25]
 8012db6:	3310      	adds	r3, #16
 8012db8:	76a3      	strb	r3, [r4, #26]
 8012dba:	9607      	str	r6, [sp, #28]
 8012dbc:	002e      	movs	r6, r5
 8012dbe:	7833      	ldrb	r3, [r6, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <_vfiprintf_r+0x7c>
 8012dc4:	2b25      	cmp	r3, #37	@ 0x25
 8012dc6:	d148      	bne.n	8012e5a <_vfiprintf_r+0x10e>
 8012dc8:	1b73      	subs	r3, r6, r5
 8012dca:	9305      	str	r3, [sp, #20]
 8012dcc:	42ae      	cmp	r6, r5
 8012dce:	d00b      	beq.n	8012de8 <_vfiprintf_r+0x9c>
 8012dd0:	002a      	movs	r2, r5
 8012dd2:	0039      	movs	r1, r7
 8012dd4:	9803      	ldr	r0, [sp, #12]
 8012dd6:	f7ff ffa7 	bl	8012d28 <__sfputs_r>
 8012dda:	3001      	adds	r0, #1
 8012ddc:	d100      	bne.n	8012de0 <_vfiprintf_r+0x94>
 8012dde:	e0ae      	b.n	8012f3e <_vfiprintf_r+0x1f2>
 8012de0:	6963      	ldr	r3, [r4, #20]
 8012de2:	9a05      	ldr	r2, [sp, #20]
 8012de4:	189b      	adds	r3, r3, r2
 8012de6:	6163      	str	r3, [r4, #20]
 8012de8:	7833      	ldrb	r3, [r6, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d100      	bne.n	8012df0 <_vfiprintf_r+0xa4>
 8012dee:	e0a6      	b.n	8012f3e <_vfiprintf_r+0x1f2>
 8012df0:	2201      	movs	r2, #1
 8012df2:	2300      	movs	r3, #0
 8012df4:	4252      	negs	r2, r2
 8012df6:	6062      	str	r2, [r4, #4]
 8012df8:	a904      	add	r1, sp, #16
 8012dfa:	3254      	adds	r2, #84	@ 0x54
 8012dfc:	1852      	adds	r2, r2, r1
 8012dfe:	1c75      	adds	r5, r6, #1
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	60e3      	str	r3, [r4, #12]
 8012e04:	60a3      	str	r3, [r4, #8]
 8012e06:	7013      	strb	r3, [r2, #0]
 8012e08:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012e0a:	4b59      	ldr	r3, [pc, #356]	@ (8012f70 <_vfiprintf_r+0x224>)
 8012e0c:	2205      	movs	r2, #5
 8012e0e:	0018      	movs	r0, r3
 8012e10:	7829      	ldrb	r1, [r5, #0]
 8012e12:	9305      	str	r3, [sp, #20]
 8012e14:	f7fc fe09 	bl	800fa2a <memchr>
 8012e18:	1c6e      	adds	r6, r5, #1
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d11f      	bne.n	8012e5e <_vfiprintf_r+0x112>
 8012e1e:	6822      	ldr	r2, [r4, #0]
 8012e20:	06d3      	lsls	r3, r2, #27
 8012e22:	d504      	bpl.n	8012e2e <_vfiprintf_r+0xe2>
 8012e24:	2353      	movs	r3, #83	@ 0x53
 8012e26:	a904      	add	r1, sp, #16
 8012e28:	185b      	adds	r3, r3, r1
 8012e2a:	2120      	movs	r1, #32
 8012e2c:	7019      	strb	r1, [r3, #0]
 8012e2e:	0713      	lsls	r3, r2, #28
 8012e30:	d504      	bpl.n	8012e3c <_vfiprintf_r+0xf0>
 8012e32:	2353      	movs	r3, #83	@ 0x53
 8012e34:	a904      	add	r1, sp, #16
 8012e36:	185b      	adds	r3, r3, r1
 8012e38:	212b      	movs	r1, #43	@ 0x2b
 8012e3a:	7019      	strb	r1, [r3, #0]
 8012e3c:	782b      	ldrb	r3, [r5, #0]
 8012e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e40:	d016      	beq.n	8012e70 <_vfiprintf_r+0x124>
 8012e42:	002e      	movs	r6, r5
 8012e44:	2100      	movs	r1, #0
 8012e46:	200a      	movs	r0, #10
 8012e48:	68e3      	ldr	r3, [r4, #12]
 8012e4a:	7832      	ldrb	r2, [r6, #0]
 8012e4c:	1c75      	adds	r5, r6, #1
 8012e4e:	3a30      	subs	r2, #48	@ 0x30
 8012e50:	2a09      	cmp	r2, #9
 8012e52:	d950      	bls.n	8012ef6 <_vfiprintf_r+0x1aa>
 8012e54:	2900      	cmp	r1, #0
 8012e56:	d111      	bne.n	8012e7c <_vfiprintf_r+0x130>
 8012e58:	e017      	b.n	8012e8a <_vfiprintf_r+0x13e>
 8012e5a:	3601      	adds	r6, #1
 8012e5c:	e7af      	b.n	8012dbe <_vfiprintf_r+0x72>
 8012e5e:	9b05      	ldr	r3, [sp, #20]
 8012e60:	6822      	ldr	r2, [r4, #0]
 8012e62:	1ac0      	subs	r0, r0, r3
 8012e64:	2301      	movs	r3, #1
 8012e66:	4083      	lsls	r3, r0
 8012e68:	4313      	orrs	r3, r2
 8012e6a:	0035      	movs	r5, r6
 8012e6c:	6023      	str	r3, [r4, #0]
 8012e6e:	e7cc      	b.n	8012e0a <_vfiprintf_r+0xbe>
 8012e70:	9b07      	ldr	r3, [sp, #28]
 8012e72:	1d19      	adds	r1, r3, #4
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	9107      	str	r1, [sp, #28]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	db01      	blt.n	8012e80 <_vfiprintf_r+0x134>
 8012e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e7e:	e004      	b.n	8012e8a <_vfiprintf_r+0x13e>
 8012e80:	425b      	negs	r3, r3
 8012e82:	60e3      	str	r3, [r4, #12]
 8012e84:	2302      	movs	r3, #2
 8012e86:	4313      	orrs	r3, r2
 8012e88:	6023      	str	r3, [r4, #0]
 8012e8a:	7833      	ldrb	r3, [r6, #0]
 8012e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e8e:	d10c      	bne.n	8012eaa <_vfiprintf_r+0x15e>
 8012e90:	7873      	ldrb	r3, [r6, #1]
 8012e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e94:	d134      	bne.n	8012f00 <_vfiprintf_r+0x1b4>
 8012e96:	9b07      	ldr	r3, [sp, #28]
 8012e98:	3602      	adds	r6, #2
 8012e9a:	1d1a      	adds	r2, r3, #4
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	9207      	str	r2, [sp, #28]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	da01      	bge.n	8012ea8 <_vfiprintf_r+0x15c>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	425b      	negs	r3, r3
 8012ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eaa:	4d32      	ldr	r5, [pc, #200]	@ (8012f74 <_vfiprintf_r+0x228>)
 8012eac:	2203      	movs	r2, #3
 8012eae:	0028      	movs	r0, r5
 8012eb0:	7831      	ldrb	r1, [r6, #0]
 8012eb2:	f7fc fdba 	bl	800fa2a <memchr>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	d006      	beq.n	8012ec8 <_vfiprintf_r+0x17c>
 8012eba:	2340      	movs	r3, #64	@ 0x40
 8012ebc:	1b40      	subs	r0, r0, r5
 8012ebe:	4083      	lsls	r3, r0
 8012ec0:	6822      	ldr	r2, [r4, #0]
 8012ec2:	3601      	adds	r6, #1
 8012ec4:	4313      	orrs	r3, r2
 8012ec6:	6023      	str	r3, [r4, #0]
 8012ec8:	7831      	ldrb	r1, [r6, #0]
 8012eca:	2206      	movs	r2, #6
 8012ecc:	482a      	ldr	r0, [pc, #168]	@ (8012f78 <_vfiprintf_r+0x22c>)
 8012ece:	1c75      	adds	r5, r6, #1
 8012ed0:	7621      	strb	r1, [r4, #24]
 8012ed2:	f7fc fdaa 	bl	800fa2a <memchr>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d040      	beq.n	8012f5c <_vfiprintf_r+0x210>
 8012eda:	4b28      	ldr	r3, [pc, #160]	@ (8012f7c <_vfiprintf_r+0x230>)
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d122      	bne.n	8012f26 <_vfiprintf_r+0x1da>
 8012ee0:	2207      	movs	r2, #7
 8012ee2:	9b07      	ldr	r3, [sp, #28]
 8012ee4:	3307      	adds	r3, #7
 8012ee6:	4393      	bics	r3, r2
 8012ee8:	3308      	adds	r3, #8
 8012eea:	9307      	str	r3, [sp, #28]
 8012eec:	6963      	ldr	r3, [r4, #20]
 8012eee:	9a04      	ldr	r2, [sp, #16]
 8012ef0:	189b      	adds	r3, r3, r2
 8012ef2:	6163      	str	r3, [r4, #20]
 8012ef4:	e762      	b.n	8012dbc <_vfiprintf_r+0x70>
 8012ef6:	4343      	muls	r3, r0
 8012ef8:	002e      	movs	r6, r5
 8012efa:	2101      	movs	r1, #1
 8012efc:	189b      	adds	r3, r3, r2
 8012efe:	e7a4      	b.n	8012e4a <_vfiprintf_r+0xfe>
 8012f00:	2300      	movs	r3, #0
 8012f02:	200a      	movs	r0, #10
 8012f04:	0019      	movs	r1, r3
 8012f06:	3601      	adds	r6, #1
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	7832      	ldrb	r2, [r6, #0]
 8012f0c:	1c75      	adds	r5, r6, #1
 8012f0e:	3a30      	subs	r2, #48	@ 0x30
 8012f10:	2a09      	cmp	r2, #9
 8012f12:	d903      	bls.n	8012f1c <_vfiprintf_r+0x1d0>
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d0c8      	beq.n	8012eaa <_vfiprintf_r+0x15e>
 8012f18:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f1a:	e7c6      	b.n	8012eaa <_vfiprintf_r+0x15e>
 8012f1c:	4341      	muls	r1, r0
 8012f1e:	002e      	movs	r6, r5
 8012f20:	2301      	movs	r3, #1
 8012f22:	1889      	adds	r1, r1, r2
 8012f24:	e7f1      	b.n	8012f0a <_vfiprintf_r+0x1be>
 8012f26:	aa07      	add	r2, sp, #28
 8012f28:	9200      	str	r2, [sp, #0]
 8012f2a:	0021      	movs	r1, r4
 8012f2c:	003a      	movs	r2, r7
 8012f2e:	4b14      	ldr	r3, [pc, #80]	@ (8012f80 <_vfiprintf_r+0x234>)
 8012f30:	9803      	ldr	r0, [sp, #12]
 8012f32:	f7fb fdc5 	bl	800eac0 <_printf_float>
 8012f36:	9004      	str	r0, [sp, #16]
 8012f38:	9b04      	ldr	r3, [sp, #16]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	d1d6      	bne.n	8012eec <_vfiprintf_r+0x1a0>
 8012f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f40:	07db      	lsls	r3, r3, #31
 8012f42:	d405      	bmi.n	8012f50 <_vfiprintf_r+0x204>
 8012f44:	89bb      	ldrh	r3, [r7, #12]
 8012f46:	059b      	lsls	r3, r3, #22
 8012f48:	d402      	bmi.n	8012f50 <_vfiprintf_r+0x204>
 8012f4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012f4c:	f7fc fd6c 	bl	800fa28 <__retarget_lock_release_recursive>
 8012f50:	89bb      	ldrh	r3, [r7, #12]
 8012f52:	065b      	lsls	r3, r3, #25
 8012f54:	d500      	bpl.n	8012f58 <_vfiprintf_r+0x20c>
 8012f56:	e71e      	b.n	8012d96 <_vfiprintf_r+0x4a>
 8012f58:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012f5a:	e71e      	b.n	8012d9a <_vfiprintf_r+0x4e>
 8012f5c:	aa07      	add	r2, sp, #28
 8012f5e:	9200      	str	r2, [sp, #0]
 8012f60:	0021      	movs	r1, r4
 8012f62:	003a      	movs	r2, r7
 8012f64:	4b06      	ldr	r3, [pc, #24]	@ (8012f80 <_vfiprintf_r+0x234>)
 8012f66:	9803      	ldr	r0, [sp, #12]
 8012f68:	f7fc f858 	bl	800f01c <_printf_i>
 8012f6c:	e7e3      	b.n	8012f36 <_vfiprintf_r+0x1ea>
 8012f6e:	46c0      	nop			@ (mov r8, r8)
 8012f70:	08013f21 	.word	0x08013f21
 8012f74:	08013f27 	.word	0x08013f27
 8012f78:	08013f2b 	.word	0x08013f2b
 8012f7c:	0800eac1 	.word	0x0800eac1
 8012f80:	08012d29 	.word	0x08012d29

08012f84 <__swbuf_r>:
 8012f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f86:	0006      	movs	r6, r0
 8012f88:	000d      	movs	r5, r1
 8012f8a:	0014      	movs	r4, r2
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d004      	beq.n	8012f9a <__swbuf_r+0x16>
 8012f90:	6a03      	ldr	r3, [r0, #32]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d101      	bne.n	8012f9a <__swbuf_r+0x16>
 8012f96:	f7fc fbed 	bl	800f774 <__sinit>
 8012f9a:	69a3      	ldr	r3, [r4, #24]
 8012f9c:	60a3      	str	r3, [r4, #8]
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	071b      	lsls	r3, r3, #28
 8012fa2:	d502      	bpl.n	8012faa <__swbuf_r+0x26>
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d109      	bne.n	8012fbe <__swbuf_r+0x3a>
 8012faa:	0021      	movs	r1, r4
 8012fac:	0030      	movs	r0, r6
 8012fae:	f000 f82b 	bl	8013008 <__swsetup_r>
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	d003      	beq.n	8012fbe <__swbuf_r+0x3a>
 8012fb6:	2501      	movs	r5, #1
 8012fb8:	426d      	negs	r5, r5
 8012fba:	0028      	movs	r0, r5
 8012fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fbe:	6923      	ldr	r3, [r4, #16]
 8012fc0:	6820      	ldr	r0, [r4, #0]
 8012fc2:	b2ef      	uxtb	r7, r5
 8012fc4:	1ac0      	subs	r0, r0, r3
 8012fc6:	6963      	ldr	r3, [r4, #20]
 8012fc8:	b2ed      	uxtb	r5, r5
 8012fca:	4283      	cmp	r3, r0
 8012fcc:	dc05      	bgt.n	8012fda <__swbuf_r+0x56>
 8012fce:	0021      	movs	r1, r4
 8012fd0:	0030      	movs	r0, r6
 8012fd2:	f7ff fa19 	bl	8012408 <_fflush_r>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	d1ed      	bne.n	8012fb6 <__swbuf_r+0x32>
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	3001      	adds	r0, #1
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	60a3      	str	r3, [r4, #8]
 8012fe2:	6823      	ldr	r3, [r4, #0]
 8012fe4:	1c5a      	adds	r2, r3, #1
 8012fe6:	6022      	str	r2, [r4, #0]
 8012fe8:	701f      	strb	r7, [r3, #0]
 8012fea:	6963      	ldr	r3, [r4, #20]
 8012fec:	4283      	cmp	r3, r0
 8012fee:	d004      	beq.n	8012ffa <__swbuf_r+0x76>
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	07db      	lsls	r3, r3, #31
 8012ff4:	d5e1      	bpl.n	8012fba <__swbuf_r+0x36>
 8012ff6:	2d0a      	cmp	r5, #10
 8012ff8:	d1df      	bne.n	8012fba <__swbuf_r+0x36>
 8012ffa:	0021      	movs	r1, r4
 8012ffc:	0030      	movs	r0, r6
 8012ffe:	f7ff fa03 	bl	8012408 <_fflush_r>
 8013002:	2800      	cmp	r0, #0
 8013004:	d0d9      	beq.n	8012fba <__swbuf_r+0x36>
 8013006:	e7d6      	b.n	8012fb6 <__swbuf_r+0x32>

08013008 <__swsetup_r>:
 8013008:	4b2d      	ldr	r3, [pc, #180]	@ (80130c0 <__swsetup_r+0xb8>)
 801300a:	b570      	push	{r4, r5, r6, lr}
 801300c:	0005      	movs	r5, r0
 801300e:	6818      	ldr	r0, [r3, #0]
 8013010:	000c      	movs	r4, r1
 8013012:	2800      	cmp	r0, #0
 8013014:	d004      	beq.n	8013020 <__swsetup_r+0x18>
 8013016:	6a03      	ldr	r3, [r0, #32]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d101      	bne.n	8013020 <__swsetup_r+0x18>
 801301c:	f7fc fbaa 	bl	800f774 <__sinit>
 8013020:	230c      	movs	r3, #12
 8013022:	5ee2      	ldrsh	r2, [r4, r3]
 8013024:	0713      	lsls	r3, r2, #28
 8013026:	d423      	bmi.n	8013070 <__swsetup_r+0x68>
 8013028:	06d3      	lsls	r3, r2, #27
 801302a:	d407      	bmi.n	801303c <__swsetup_r+0x34>
 801302c:	2309      	movs	r3, #9
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	2340      	movs	r3, #64	@ 0x40
 8013032:	2001      	movs	r0, #1
 8013034:	4313      	orrs	r3, r2
 8013036:	81a3      	strh	r3, [r4, #12]
 8013038:	4240      	negs	r0, r0
 801303a:	e03a      	b.n	80130b2 <__swsetup_r+0xaa>
 801303c:	0752      	lsls	r2, r2, #29
 801303e:	d513      	bpl.n	8013068 <__swsetup_r+0x60>
 8013040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013042:	2900      	cmp	r1, #0
 8013044:	d008      	beq.n	8013058 <__swsetup_r+0x50>
 8013046:	0023      	movs	r3, r4
 8013048:	3344      	adds	r3, #68	@ 0x44
 801304a:	4299      	cmp	r1, r3
 801304c:	d002      	beq.n	8013054 <__swsetup_r+0x4c>
 801304e:	0028      	movs	r0, r5
 8013050:	f7fd fb86 	bl	8010760 <_free_r>
 8013054:	2300      	movs	r3, #0
 8013056:	6363      	str	r3, [r4, #52]	@ 0x34
 8013058:	2224      	movs	r2, #36	@ 0x24
 801305a:	89a3      	ldrh	r3, [r4, #12]
 801305c:	4393      	bics	r3, r2
 801305e:	81a3      	strh	r3, [r4, #12]
 8013060:	2300      	movs	r3, #0
 8013062:	6063      	str	r3, [r4, #4]
 8013064:	6923      	ldr	r3, [r4, #16]
 8013066:	6023      	str	r3, [r4, #0]
 8013068:	2308      	movs	r3, #8
 801306a:	89a2      	ldrh	r2, [r4, #12]
 801306c:	4313      	orrs	r3, r2
 801306e:	81a3      	strh	r3, [r4, #12]
 8013070:	6923      	ldr	r3, [r4, #16]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d10b      	bne.n	801308e <__swsetup_r+0x86>
 8013076:	21a0      	movs	r1, #160	@ 0xa0
 8013078:	2280      	movs	r2, #128	@ 0x80
 801307a:	89a3      	ldrh	r3, [r4, #12]
 801307c:	0089      	lsls	r1, r1, #2
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	400b      	ands	r3, r1
 8013082:	4293      	cmp	r3, r2
 8013084:	d003      	beq.n	801308e <__swsetup_r+0x86>
 8013086:	0021      	movs	r1, r4
 8013088:	0028      	movs	r0, r5
 801308a:	f000 f88f 	bl	80131ac <__smakebuf_r>
 801308e:	230c      	movs	r3, #12
 8013090:	5ee2      	ldrsh	r2, [r4, r3]
 8013092:	2101      	movs	r1, #1
 8013094:	0013      	movs	r3, r2
 8013096:	400b      	ands	r3, r1
 8013098:	420a      	tst	r2, r1
 801309a:	d00b      	beq.n	80130b4 <__swsetup_r+0xac>
 801309c:	2300      	movs	r3, #0
 801309e:	60a3      	str	r3, [r4, #8]
 80130a0:	6963      	ldr	r3, [r4, #20]
 80130a2:	425b      	negs	r3, r3
 80130a4:	61a3      	str	r3, [r4, #24]
 80130a6:	2000      	movs	r0, #0
 80130a8:	6923      	ldr	r3, [r4, #16]
 80130aa:	4283      	cmp	r3, r0
 80130ac:	d101      	bne.n	80130b2 <__swsetup_r+0xaa>
 80130ae:	0613      	lsls	r3, r2, #24
 80130b0:	d4be      	bmi.n	8013030 <__swsetup_r+0x28>
 80130b2:	bd70      	pop	{r4, r5, r6, pc}
 80130b4:	0791      	lsls	r1, r2, #30
 80130b6:	d400      	bmi.n	80130ba <__swsetup_r+0xb2>
 80130b8:	6963      	ldr	r3, [r4, #20]
 80130ba:	60a3      	str	r3, [r4, #8]
 80130bc:	e7f3      	b.n	80130a6 <__swsetup_r+0x9e>
 80130be:	46c0      	nop			@ (mov r8, r8)
 80130c0:	20000038 	.word	0x20000038

080130c4 <_raise_r>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	0004      	movs	r4, r0
 80130c8:	000d      	movs	r5, r1
 80130ca:	291f      	cmp	r1, #31
 80130cc:	d904      	bls.n	80130d8 <_raise_r+0x14>
 80130ce:	2316      	movs	r3, #22
 80130d0:	6003      	str	r3, [r0, #0]
 80130d2:	2001      	movs	r0, #1
 80130d4:	4240      	negs	r0, r0
 80130d6:	bd70      	pop	{r4, r5, r6, pc}
 80130d8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <_raise_r+0x24>
 80130de:	008a      	lsls	r2, r1, #2
 80130e0:	189b      	adds	r3, r3, r2
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	2a00      	cmp	r2, #0
 80130e6:	d108      	bne.n	80130fa <_raise_r+0x36>
 80130e8:	0020      	movs	r0, r4
 80130ea:	f000 f831 	bl	8013150 <_getpid_r>
 80130ee:	002a      	movs	r2, r5
 80130f0:	0001      	movs	r1, r0
 80130f2:	0020      	movs	r0, r4
 80130f4:	f000 f81a 	bl	801312c <_kill_r>
 80130f8:	e7ed      	b.n	80130d6 <_raise_r+0x12>
 80130fa:	2a01      	cmp	r2, #1
 80130fc:	d009      	beq.n	8013112 <_raise_r+0x4e>
 80130fe:	1c51      	adds	r1, r2, #1
 8013100:	d103      	bne.n	801310a <_raise_r+0x46>
 8013102:	2316      	movs	r3, #22
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	2001      	movs	r0, #1
 8013108:	e7e5      	b.n	80130d6 <_raise_r+0x12>
 801310a:	2100      	movs	r1, #0
 801310c:	0028      	movs	r0, r5
 801310e:	6019      	str	r1, [r3, #0]
 8013110:	4790      	blx	r2
 8013112:	2000      	movs	r0, #0
 8013114:	e7df      	b.n	80130d6 <_raise_r+0x12>
	...

08013118 <raise>:
 8013118:	b510      	push	{r4, lr}
 801311a:	4b03      	ldr	r3, [pc, #12]	@ (8013128 <raise+0x10>)
 801311c:	0001      	movs	r1, r0
 801311e:	6818      	ldr	r0, [r3, #0]
 8013120:	f7ff ffd0 	bl	80130c4 <_raise_r>
 8013124:	bd10      	pop	{r4, pc}
 8013126:	46c0      	nop			@ (mov r8, r8)
 8013128:	20000038 	.word	0x20000038

0801312c <_kill_r>:
 801312c:	2300      	movs	r3, #0
 801312e:	b570      	push	{r4, r5, r6, lr}
 8013130:	4d06      	ldr	r5, [pc, #24]	@ (801314c <_kill_r+0x20>)
 8013132:	0004      	movs	r4, r0
 8013134:	0008      	movs	r0, r1
 8013136:	0011      	movs	r1, r2
 8013138:	602b      	str	r3, [r5, #0]
 801313a:	f7f1 feed 	bl	8004f18 <_kill>
 801313e:	1c43      	adds	r3, r0, #1
 8013140:	d103      	bne.n	801314a <_kill_r+0x1e>
 8013142:	682b      	ldr	r3, [r5, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d000      	beq.n	801314a <_kill_r+0x1e>
 8013148:	6023      	str	r3, [r4, #0]
 801314a:	bd70      	pop	{r4, r5, r6, pc}
 801314c:	20004978 	.word	0x20004978

08013150 <_getpid_r>:
 8013150:	b510      	push	{r4, lr}
 8013152:	f7f1 fedb 	bl	8004f0c <_getpid>
 8013156:	bd10      	pop	{r4, pc}

08013158 <__swhatbuf_r>:
 8013158:	b570      	push	{r4, r5, r6, lr}
 801315a:	000e      	movs	r6, r1
 801315c:	001d      	movs	r5, r3
 801315e:	230e      	movs	r3, #14
 8013160:	5ec9      	ldrsh	r1, [r1, r3]
 8013162:	0014      	movs	r4, r2
 8013164:	b096      	sub	sp, #88	@ 0x58
 8013166:	2900      	cmp	r1, #0
 8013168:	da0c      	bge.n	8013184 <__swhatbuf_r+0x2c>
 801316a:	89b2      	ldrh	r2, [r6, #12]
 801316c:	2380      	movs	r3, #128	@ 0x80
 801316e:	0011      	movs	r1, r2
 8013170:	4019      	ands	r1, r3
 8013172:	421a      	tst	r2, r3
 8013174:	d114      	bne.n	80131a0 <__swhatbuf_r+0x48>
 8013176:	2380      	movs	r3, #128	@ 0x80
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	2000      	movs	r0, #0
 801317c:	6029      	str	r1, [r5, #0]
 801317e:	6023      	str	r3, [r4, #0]
 8013180:	b016      	add	sp, #88	@ 0x58
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	466a      	mov	r2, sp
 8013186:	f000 f853 	bl	8013230 <_fstat_r>
 801318a:	2800      	cmp	r0, #0
 801318c:	dbed      	blt.n	801316a <__swhatbuf_r+0x12>
 801318e:	23f0      	movs	r3, #240	@ 0xf0
 8013190:	9901      	ldr	r1, [sp, #4]
 8013192:	021b      	lsls	r3, r3, #8
 8013194:	4019      	ands	r1, r3
 8013196:	4b04      	ldr	r3, [pc, #16]	@ (80131a8 <__swhatbuf_r+0x50>)
 8013198:	18c9      	adds	r1, r1, r3
 801319a:	424b      	negs	r3, r1
 801319c:	4159      	adcs	r1, r3
 801319e:	e7ea      	b.n	8013176 <__swhatbuf_r+0x1e>
 80131a0:	2100      	movs	r1, #0
 80131a2:	2340      	movs	r3, #64	@ 0x40
 80131a4:	e7e9      	b.n	801317a <__swhatbuf_r+0x22>
 80131a6:	46c0      	nop			@ (mov r8, r8)
 80131a8:	ffffe000 	.word	0xffffe000

080131ac <__smakebuf_r>:
 80131ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ae:	2602      	movs	r6, #2
 80131b0:	898b      	ldrh	r3, [r1, #12]
 80131b2:	0005      	movs	r5, r0
 80131b4:	000c      	movs	r4, r1
 80131b6:	b085      	sub	sp, #20
 80131b8:	4233      	tst	r3, r6
 80131ba:	d007      	beq.n	80131cc <__smakebuf_r+0x20>
 80131bc:	0023      	movs	r3, r4
 80131be:	3347      	adds	r3, #71	@ 0x47
 80131c0:	6023      	str	r3, [r4, #0]
 80131c2:	6123      	str	r3, [r4, #16]
 80131c4:	2301      	movs	r3, #1
 80131c6:	6163      	str	r3, [r4, #20]
 80131c8:	b005      	add	sp, #20
 80131ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131cc:	ab03      	add	r3, sp, #12
 80131ce:	aa02      	add	r2, sp, #8
 80131d0:	f7ff ffc2 	bl	8013158 <__swhatbuf_r>
 80131d4:	9f02      	ldr	r7, [sp, #8]
 80131d6:	9001      	str	r0, [sp, #4]
 80131d8:	0039      	movs	r1, r7
 80131da:	0028      	movs	r0, r5
 80131dc:	f7fd fb36 	bl	801084c <_malloc_r>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d108      	bne.n	80131f6 <__smakebuf_r+0x4a>
 80131e4:	220c      	movs	r2, #12
 80131e6:	5ea3      	ldrsh	r3, [r4, r2]
 80131e8:	059a      	lsls	r2, r3, #22
 80131ea:	d4ed      	bmi.n	80131c8 <__smakebuf_r+0x1c>
 80131ec:	2203      	movs	r2, #3
 80131ee:	4393      	bics	r3, r2
 80131f0:	431e      	orrs	r6, r3
 80131f2:	81a6      	strh	r6, [r4, #12]
 80131f4:	e7e2      	b.n	80131bc <__smakebuf_r+0x10>
 80131f6:	2380      	movs	r3, #128	@ 0x80
 80131f8:	89a2      	ldrh	r2, [r4, #12]
 80131fa:	6020      	str	r0, [r4, #0]
 80131fc:	4313      	orrs	r3, r2
 80131fe:	81a3      	strh	r3, [r4, #12]
 8013200:	9b03      	ldr	r3, [sp, #12]
 8013202:	6120      	str	r0, [r4, #16]
 8013204:	6167      	str	r7, [r4, #20]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00c      	beq.n	8013224 <__smakebuf_r+0x78>
 801320a:	0028      	movs	r0, r5
 801320c:	230e      	movs	r3, #14
 801320e:	5ee1      	ldrsh	r1, [r4, r3]
 8013210:	f000 f820 	bl	8013254 <_isatty_r>
 8013214:	2800      	cmp	r0, #0
 8013216:	d005      	beq.n	8013224 <__smakebuf_r+0x78>
 8013218:	2303      	movs	r3, #3
 801321a:	89a2      	ldrh	r2, [r4, #12]
 801321c:	439a      	bics	r2, r3
 801321e:	3b02      	subs	r3, #2
 8013220:	4313      	orrs	r3, r2
 8013222:	81a3      	strh	r3, [r4, #12]
 8013224:	89a3      	ldrh	r3, [r4, #12]
 8013226:	9a01      	ldr	r2, [sp, #4]
 8013228:	4313      	orrs	r3, r2
 801322a:	81a3      	strh	r3, [r4, #12]
 801322c:	e7cc      	b.n	80131c8 <__smakebuf_r+0x1c>
	...

08013230 <_fstat_r>:
 8013230:	2300      	movs	r3, #0
 8013232:	b570      	push	{r4, r5, r6, lr}
 8013234:	4d06      	ldr	r5, [pc, #24]	@ (8013250 <_fstat_r+0x20>)
 8013236:	0004      	movs	r4, r0
 8013238:	0008      	movs	r0, r1
 801323a:	0011      	movs	r1, r2
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	f7f1 fecb 	bl	8004fd8 <_fstat>
 8013242:	1c43      	adds	r3, r0, #1
 8013244:	d103      	bne.n	801324e <_fstat_r+0x1e>
 8013246:	682b      	ldr	r3, [r5, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d000      	beq.n	801324e <_fstat_r+0x1e>
 801324c:	6023      	str	r3, [r4, #0]
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	20004978 	.word	0x20004978

08013254 <_isatty_r>:
 8013254:	2300      	movs	r3, #0
 8013256:	b570      	push	{r4, r5, r6, lr}
 8013258:	4d06      	ldr	r5, [pc, #24]	@ (8013274 <_isatty_r+0x20>)
 801325a:	0004      	movs	r4, r0
 801325c:	0008      	movs	r0, r1
 801325e:	602b      	str	r3, [r5, #0]
 8013260:	f7f1 fec8 	bl	8004ff4 <_isatty>
 8013264:	1c43      	adds	r3, r0, #1
 8013266:	d103      	bne.n	8013270 <_isatty_r+0x1c>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d000      	beq.n	8013270 <_isatty_r+0x1c>
 801326e:	6023      	str	r3, [r4, #0]
 8013270:	bd70      	pop	{r4, r5, r6, pc}
 8013272:	46c0      	nop			@ (mov r8, r8)
 8013274:	20004978 	.word	0x20004978

08013278 <expf>:
 8013278:	b570      	push	{r4, r5, r6, lr}
 801327a:	1c04      	adds	r4, r0, #0
 801327c:	f000 f876 	bl	801336c <__ieee754_expf>
 8013280:	1c05      	adds	r5, r0, #0
 8013282:	1c20      	adds	r0, r4, #0
 8013284:	f000 f820 	bl	80132c8 <finitef>
 8013288:	2800      	cmp	r0, #0
 801328a:	d00b      	beq.n	80132a4 <expf+0x2c>
 801328c:	490c      	ldr	r1, [pc, #48]	@ (80132c0 <expf+0x48>)
 801328e:	1c20      	adds	r0, r4, #0
 8013290:	f7ed f930 	bl	80004f4 <__aeabi_fcmpgt>
 8013294:	2800      	cmp	r0, #0
 8013296:	d007      	beq.n	80132a8 <expf+0x30>
 8013298:	f7fc fb9a 	bl	800f9d0 <__errno>
 801329c:	25ff      	movs	r5, #255	@ 0xff
 801329e:	2322      	movs	r3, #34	@ 0x22
 80132a0:	05ed      	lsls	r5, r5, #23
 80132a2:	6003      	str	r3, [r0, #0]
 80132a4:	1c28      	adds	r0, r5, #0
 80132a6:	bd70      	pop	{r4, r5, r6, pc}
 80132a8:	4906      	ldr	r1, [pc, #24]	@ (80132c4 <expf+0x4c>)
 80132aa:	1c20      	adds	r0, r4, #0
 80132ac:	f7ed f90e 	bl	80004cc <__aeabi_fcmplt>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d0f7      	beq.n	80132a4 <expf+0x2c>
 80132b4:	f7fc fb8c 	bl	800f9d0 <__errno>
 80132b8:	2322      	movs	r3, #34	@ 0x22
 80132ba:	2500      	movs	r5, #0
 80132bc:	6003      	str	r3, [r0, #0]
 80132be:	e7f1      	b.n	80132a4 <expf+0x2c>
 80132c0:	42b17217 	.word	0x42b17217
 80132c4:	c2cff1b5 	.word	0xc2cff1b5

080132c8 <finitef>:
 80132c8:	22ff      	movs	r2, #255	@ 0xff
 80132ca:	0043      	lsls	r3, r0, #1
 80132cc:	085b      	lsrs	r3, r3, #1
 80132ce:	2001      	movs	r0, #1
 80132d0:	05d2      	lsls	r2, r2, #23
 80132d2:	4293      	cmp	r3, r2
 80132d4:	db00      	blt.n	80132d8 <finitef+0x10>
 80132d6:	2000      	movs	r0, #0
 80132d8:	4770      	bx	lr

080132da <fmaxf>:
 80132da:	b570      	push	{r4, r5, r6, lr}
 80132dc:	1c04      	adds	r4, r0, #0
 80132de:	1c0d      	adds	r5, r1, #0
 80132e0:	f000 f828 	bl	8013334 <__fpclassifyf>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d102      	bne.n	80132ee <fmaxf+0x14>
 80132e8:	1c2c      	adds	r4, r5, #0
 80132ea:	1c20      	adds	r0, r4, #0
 80132ec:	bd70      	pop	{r4, r5, r6, pc}
 80132ee:	1c28      	adds	r0, r5, #0
 80132f0:	f000 f820 	bl	8013334 <__fpclassifyf>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d0f8      	beq.n	80132ea <fmaxf+0x10>
 80132f8:	1c29      	adds	r1, r5, #0
 80132fa:	1c20      	adds	r0, r4, #0
 80132fc:	f7ed f8fa 	bl	80004f4 <__aeabi_fcmpgt>
 8013300:	2800      	cmp	r0, #0
 8013302:	d0f1      	beq.n	80132e8 <fmaxf+0xe>
 8013304:	e7f1      	b.n	80132ea <fmaxf+0x10>

08013306 <fminf>:
 8013306:	b570      	push	{r4, r5, r6, lr}
 8013308:	1c04      	adds	r4, r0, #0
 801330a:	1c0d      	adds	r5, r1, #0
 801330c:	f000 f812 	bl	8013334 <__fpclassifyf>
 8013310:	2800      	cmp	r0, #0
 8013312:	d102      	bne.n	801331a <fminf+0x14>
 8013314:	1c2c      	adds	r4, r5, #0
 8013316:	1c20      	adds	r0, r4, #0
 8013318:	bd70      	pop	{r4, r5, r6, pc}
 801331a:	1c28      	adds	r0, r5, #0
 801331c:	f000 f80a 	bl	8013334 <__fpclassifyf>
 8013320:	2800      	cmp	r0, #0
 8013322:	d0f8      	beq.n	8013316 <fminf+0x10>
 8013324:	1c29      	adds	r1, r5, #0
 8013326:	1c20      	adds	r0, r4, #0
 8013328:	f7ed f8d0 	bl	80004cc <__aeabi_fcmplt>
 801332c:	2800      	cmp	r0, #0
 801332e:	d0f1      	beq.n	8013314 <fminf+0xe>
 8013330:	e7f1      	b.n	8013316 <fminf+0x10>
	...

08013334 <__fpclassifyf>:
 8013334:	0043      	lsls	r3, r0, #1
 8013336:	085a      	lsrs	r2, r3, #1
 8013338:	2002      	movs	r0, #2
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00f      	beq.n	801335e <__fpclassifyf+0x2a>
 801333e:	21fe      	movs	r1, #254	@ 0xfe
 8013340:	4b07      	ldr	r3, [pc, #28]	@ (8013360 <__fpclassifyf+0x2c>)
 8013342:	05c9      	lsls	r1, r1, #23
 8013344:	18d3      	adds	r3, r2, r3
 8013346:	1800      	adds	r0, r0, r0
 8013348:	428b      	cmp	r3, r1
 801334a:	d308      	bcc.n	801335e <__fpclassifyf+0x2a>
 801334c:	4905      	ldr	r1, [pc, #20]	@ (8013364 <__fpclassifyf+0x30>)
 801334e:	1e53      	subs	r3, r2, #1
 8013350:	3801      	subs	r0, #1
 8013352:	428b      	cmp	r3, r1
 8013354:	d903      	bls.n	801335e <__fpclassifyf+0x2a>
 8013356:	4b04      	ldr	r3, [pc, #16]	@ (8013368 <__fpclassifyf+0x34>)
 8013358:	18d0      	adds	r0, r2, r3
 801335a:	4243      	negs	r3, r0
 801335c:	4158      	adcs	r0, r3
 801335e:	4770      	bx	lr
 8013360:	ff800000 	.word	0xff800000
 8013364:	007ffffe 	.word	0x007ffffe
 8013368:	80800000 	.word	0x80800000

0801336c <__ieee754_expf>:
 801336c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801336e:	21ff      	movs	r1, #255	@ 0xff
 8013370:	0043      	lsls	r3, r0, #1
 8013372:	1c04      	adds	r4, r0, #0
 8013374:	085b      	lsrs	r3, r3, #1
 8013376:	05c9      	lsls	r1, r1, #23
 8013378:	428b      	cmp	r3, r1
 801337a:	d904      	bls.n	8013386 <__ieee754_expf+0x1a>
 801337c:	1c01      	adds	r1, r0, #0
 801337e:	1c20      	adds	r0, r4, #0
 8013380:	f7ed fa54 	bl	800082c <__aeabi_fadd>
 8013384:	e00d      	b.n	80133a2 <__ieee754_expf+0x36>
 8013386:	0fc6      	lsrs	r6, r0, #31
 8013388:	428b      	cmp	r3, r1
 801338a:	d104      	bne.n	8013396 <__ieee754_expf+0x2a>
 801338c:	2e00      	cmp	r6, #0
 801338e:	d000      	beq.n	8013392 <__ieee754_expf+0x26>
 8013390:	e0ba      	b.n	8013508 <__ieee754_expf+0x19c>
 8013392:	1c20      	adds	r0, r4, #0
 8013394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013396:	495d      	ldr	r1, [pc, #372]	@ (801350c <__ieee754_expf+0x1a0>)
 8013398:	4288      	cmp	r0, r1
 801339a:	dd04      	ble.n	80133a6 <__ieee754_expf+0x3a>
 801339c:	2000      	movs	r0, #0
 801339e:	f000 f8f1 	bl	8013584 <__math_oflowf>
 80133a2:	1c04      	adds	r4, r0, #0
 80133a4:	e7f5      	b.n	8013392 <__ieee754_expf+0x26>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	da06      	bge.n	80133b8 <__ieee754_expf+0x4c>
 80133aa:	4a59      	ldr	r2, [pc, #356]	@ (8013510 <__ieee754_expf+0x1a4>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d903      	bls.n	80133b8 <__ieee754_expf+0x4c>
 80133b0:	2000      	movs	r0, #0
 80133b2:	f000 f8e1 	bl	8013578 <__math_uflowf>
 80133b6:	e7f4      	b.n	80133a2 <__ieee754_expf+0x36>
 80133b8:	4a56      	ldr	r2, [pc, #344]	@ (8013514 <__ieee754_expf+0x1a8>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d96e      	bls.n	801349c <__ieee754_expf+0x130>
 80133be:	4a56      	ldr	r2, [pc, #344]	@ (8013518 <__ieee754_expf+0x1ac>)
 80133c0:	00b5      	lsls	r5, r6, #2
 80133c2:	4293      	cmp	r3, r2
 80133c4:	d84e      	bhi.n	8013464 <__ieee754_expf+0xf8>
 80133c6:	4b55      	ldr	r3, [pc, #340]	@ (801351c <__ieee754_expf+0x1b0>)
 80133c8:	1c20      	adds	r0, r4, #0
 80133ca:	5959      	ldr	r1, [r3, r5]
 80133cc:	f7ed fedc 	bl	8001188 <__aeabi_fsub>
 80133d0:	4b53      	ldr	r3, [pc, #332]	@ (8013520 <__ieee754_expf+0x1b4>)
 80133d2:	1c07      	adds	r7, r0, #0
 80133d4:	595b      	ldr	r3, [r3, r5]
 80133d6:	2501      	movs	r5, #1
 80133d8:	1bad      	subs	r5, r5, r6
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	1bad      	subs	r5, r5, r6
 80133de:	9900      	ldr	r1, [sp, #0]
 80133e0:	1c38      	adds	r0, r7, #0
 80133e2:	f7ed fed1 	bl	8001188 <__aeabi_fsub>
 80133e6:	1c04      	adds	r4, r0, #0
 80133e8:	1c21      	adds	r1, r4, #0
 80133ea:	1c20      	adds	r0, r4, #0
 80133ec:	f7ed fd8e 	bl	8000f0c <__aeabi_fmul>
 80133f0:	494c      	ldr	r1, [pc, #304]	@ (8013524 <__ieee754_expf+0x1b8>)
 80133f2:	1c06      	adds	r6, r0, #0
 80133f4:	f7ed fd8a 	bl	8000f0c <__aeabi_fmul>
 80133f8:	494b      	ldr	r1, [pc, #300]	@ (8013528 <__ieee754_expf+0x1bc>)
 80133fa:	f7ed fec5 	bl	8001188 <__aeabi_fsub>
 80133fe:	1c31      	adds	r1, r6, #0
 8013400:	f7ed fd84 	bl	8000f0c <__aeabi_fmul>
 8013404:	4949      	ldr	r1, [pc, #292]	@ (801352c <__ieee754_expf+0x1c0>)
 8013406:	f7ed fa11 	bl	800082c <__aeabi_fadd>
 801340a:	1c31      	adds	r1, r6, #0
 801340c:	f7ed fd7e 	bl	8000f0c <__aeabi_fmul>
 8013410:	4947      	ldr	r1, [pc, #284]	@ (8013530 <__ieee754_expf+0x1c4>)
 8013412:	f7ed feb9 	bl	8001188 <__aeabi_fsub>
 8013416:	1c31      	adds	r1, r6, #0
 8013418:	f7ed fd78 	bl	8000f0c <__aeabi_fmul>
 801341c:	4945      	ldr	r1, [pc, #276]	@ (8013534 <__ieee754_expf+0x1c8>)
 801341e:	f7ed fa05 	bl	800082c <__aeabi_fadd>
 8013422:	1c31      	adds	r1, r6, #0
 8013424:	f7ed fd72 	bl	8000f0c <__aeabi_fmul>
 8013428:	1c01      	adds	r1, r0, #0
 801342a:	1c20      	adds	r0, r4, #0
 801342c:	f7ed feac 	bl	8001188 <__aeabi_fsub>
 8013430:	1c01      	adds	r1, r0, #0
 8013432:	1c06      	adds	r6, r0, #0
 8013434:	1c20      	adds	r0, r4, #0
 8013436:	f7ed fd69 	bl	8000f0c <__aeabi_fmul>
 801343a:	9001      	str	r0, [sp, #4]
 801343c:	2d00      	cmp	r5, #0
 801343e:	d140      	bne.n	80134c2 <__ieee754_expf+0x156>
 8013440:	2180      	movs	r1, #128	@ 0x80
 8013442:	1c30      	adds	r0, r6, #0
 8013444:	05c9      	lsls	r1, r1, #23
 8013446:	f7ed fe9f 	bl	8001188 <__aeabi_fsub>
 801344a:	1c01      	adds	r1, r0, #0
 801344c:	9801      	ldr	r0, [sp, #4]
 801344e:	f7ed fb77 	bl	8000b40 <__aeabi_fdiv>
 8013452:	1c21      	adds	r1, r4, #0
 8013454:	f7ed fe98 	bl	8001188 <__aeabi_fsub>
 8013458:	1c01      	adds	r1, r0, #0
 801345a:	20fe      	movs	r0, #254	@ 0xfe
 801345c:	0580      	lsls	r0, r0, #22
 801345e:	f7ed fe93 	bl	8001188 <__aeabi_fsub>
 8013462:	e79e      	b.n	80133a2 <__ieee754_expf+0x36>
 8013464:	4934      	ldr	r1, [pc, #208]	@ (8013538 <__ieee754_expf+0x1cc>)
 8013466:	1c20      	adds	r0, r4, #0
 8013468:	f7ed fd50 	bl	8000f0c <__aeabi_fmul>
 801346c:	4b33      	ldr	r3, [pc, #204]	@ (801353c <__ieee754_expf+0x1d0>)
 801346e:	5959      	ldr	r1, [r3, r5]
 8013470:	f7ed f9dc 	bl	800082c <__aeabi_fadd>
 8013474:	f7ee f842 	bl	80014fc <__aeabi_f2iz>
 8013478:	0005      	movs	r5, r0
 801347a:	f7ee f85f 	bl	800153c <__aeabi_i2f>
 801347e:	4930      	ldr	r1, [pc, #192]	@ (8013540 <__ieee754_expf+0x1d4>)
 8013480:	1c06      	adds	r6, r0, #0
 8013482:	f7ed fd43 	bl	8000f0c <__aeabi_fmul>
 8013486:	1c01      	adds	r1, r0, #0
 8013488:	1c20      	adds	r0, r4, #0
 801348a:	f7ed fe7d 	bl	8001188 <__aeabi_fsub>
 801348e:	492d      	ldr	r1, [pc, #180]	@ (8013544 <__ieee754_expf+0x1d8>)
 8013490:	1c07      	adds	r7, r0, #0
 8013492:	1c30      	adds	r0, r6, #0
 8013494:	f7ed fd3a 	bl	8000f0c <__aeabi_fmul>
 8013498:	9000      	str	r0, [sp, #0]
 801349a:	e7a0      	b.n	80133de <__ieee754_expf+0x72>
 801349c:	22d0      	movs	r2, #208	@ 0xd0
 801349e:	0592      	lsls	r2, r2, #22
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d20c      	bcs.n	80134be <__ieee754_expf+0x152>
 80134a4:	4928      	ldr	r1, [pc, #160]	@ (8013548 <__ieee754_expf+0x1dc>)
 80134a6:	1c20      	adds	r0, r4, #0
 80134a8:	f7ed f9c0 	bl	800082c <__aeabi_fadd>
 80134ac:	21fe      	movs	r1, #254	@ 0xfe
 80134ae:	0589      	lsls	r1, r1, #22
 80134b0:	f7ed f820 	bl	80004f4 <__aeabi_fcmpgt>
 80134b4:	1e05      	subs	r5, r0, #0
 80134b6:	d097      	beq.n	80133e8 <__ieee754_expf+0x7c>
 80134b8:	21fe      	movs	r1, #254	@ 0xfe
 80134ba:	0589      	lsls	r1, r1, #22
 80134bc:	e75f      	b.n	801337e <__ieee754_expf+0x12>
 80134be:	2500      	movs	r5, #0
 80134c0:	e792      	b.n	80133e8 <__ieee754_expf+0x7c>
 80134c2:	2080      	movs	r0, #128	@ 0x80
 80134c4:	1c31      	adds	r1, r6, #0
 80134c6:	05c0      	lsls	r0, r0, #23
 80134c8:	f7ed fe5e 	bl	8001188 <__aeabi_fsub>
 80134cc:	1c01      	adds	r1, r0, #0
 80134ce:	9801      	ldr	r0, [sp, #4]
 80134d0:	f7ed fb36 	bl	8000b40 <__aeabi_fdiv>
 80134d4:	1c01      	adds	r1, r0, #0
 80134d6:	9800      	ldr	r0, [sp, #0]
 80134d8:	f7ed fe56 	bl	8001188 <__aeabi_fsub>
 80134dc:	1c39      	adds	r1, r7, #0
 80134de:	f7ed fe53 	bl	8001188 <__aeabi_fsub>
 80134e2:	1c01      	adds	r1, r0, #0
 80134e4:	20fe      	movs	r0, #254	@ 0xfe
 80134e6:	0580      	lsls	r0, r0, #22
 80134e8:	f7ed fe4e 	bl	8001188 <__aeabi_fsub>
 80134ec:	002b      	movs	r3, r5
 80134ee:	337d      	adds	r3, #125	@ 0x7d
 80134f0:	db02      	blt.n	80134f8 <__ieee754_expf+0x18c>
 80134f2:	05ec      	lsls	r4, r5, #23
 80134f4:	1824      	adds	r4, r4, r0
 80134f6:	e74c      	b.n	8013392 <__ieee754_expf+0x26>
 80134f8:	21d8      	movs	r1, #216	@ 0xd8
 80134fa:	3564      	adds	r5, #100	@ 0x64
 80134fc:	05ed      	lsls	r5, r5, #23
 80134fe:	1828      	adds	r0, r5, r0
 8013500:	0509      	lsls	r1, r1, #20
 8013502:	f7ed fd03 	bl	8000f0c <__aeabi_fmul>
 8013506:	e74c      	b.n	80133a2 <__ieee754_expf+0x36>
 8013508:	2400      	movs	r4, #0
 801350a:	e742      	b.n	8013392 <__ieee754_expf+0x26>
 801350c:	42b17217 	.word	0x42b17217
 8013510:	42cff1b5 	.word	0x42cff1b5
 8013514:	3eb17218 	.word	0x3eb17218
 8013518:	3f851591 	.word	0x3f851591
 801351c:	08013fe0 	.word	0x08013fe0
 8013520:	08013fd8 	.word	0x08013fd8
 8013524:	3331bb4c 	.word	0x3331bb4c
 8013528:	35ddea0e 	.word	0x35ddea0e
 801352c:	388ab355 	.word	0x388ab355
 8013530:	3b360b61 	.word	0x3b360b61
 8013534:	3e2aaaab 	.word	0x3e2aaaab
 8013538:	3fb8aa3b 	.word	0x3fb8aa3b
 801353c:	08013fe8 	.word	0x08013fe8
 8013540:	3f317180 	.word	0x3f317180
 8013544:	3717f7d1 	.word	0x3717f7d1
 8013548:	7149f2ca 	.word	0x7149f2ca

0801354c <with_errnof>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	000d      	movs	r5, r1
 8013550:	1c04      	adds	r4, r0, #0
 8013552:	f7fc fa3d 	bl	800f9d0 <__errno>
 8013556:	6005      	str	r5, [r0, #0]
 8013558:	1c20      	adds	r0, r4, #0
 801355a:	bd70      	pop	{r4, r5, r6, pc}

0801355c <xflowf>:
 801355c:	b510      	push	{r4, lr}
 801355e:	1c0b      	adds	r3, r1, #0
 8013560:	2800      	cmp	r0, #0
 8013562:	d002      	beq.n	801356a <xflowf+0xe>
 8013564:	2380      	movs	r3, #128	@ 0x80
 8013566:	061b      	lsls	r3, r3, #24
 8013568:	18cb      	adds	r3, r1, r3
 801356a:	1c18      	adds	r0, r3, #0
 801356c:	f7ed fcce 	bl	8000f0c <__aeabi_fmul>
 8013570:	2122      	movs	r1, #34	@ 0x22
 8013572:	f7ff ffeb 	bl	801354c <with_errnof>
 8013576:	bd10      	pop	{r4, pc}

08013578 <__math_uflowf>:
 8013578:	2180      	movs	r1, #128	@ 0x80
 801357a:	b510      	push	{r4, lr}
 801357c:	0549      	lsls	r1, r1, #21
 801357e:	f7ff ffed 	bl	801355c <xflowf>
 8013582:	bd10      	pop	{r4, pc}

08013584 <__math_oflowf>:
 8013584:	21e0      	movs	r1, #224	@ 0xe0
 8013586:	b510      	push	{r4, lr}
 8013588:	05c9      	lsls	r1, r1, #23
 801358a:	f7ff ffe7 	bl	801355c <xflowf>
 801358e:	bd10      	pop	{r4, pc}

08013590 <_init>:
 8013590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013592:	46c0      	nop			@ (mov r8, r8)
 8013594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013596:	bc08      	pop	{r3}
 8013598:	469e      	mov	lr, r3
 801359a:	4770      	bx	lr

0801359c <_fini>:
 801359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801359e:	46c0      	nop			@ (mov r8, r8)
 80135a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a2:	bc08      	pop	{r3}
 80135a4:	469e      	mov	lr, r3
 80135a6:	4770      	bx	lr
