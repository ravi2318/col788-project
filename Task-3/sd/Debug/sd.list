
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08007608  08007608  00008608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007924  08007924  00008924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800792c  0800792c  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007934  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000074  080079a8  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  080079a8  00009408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de9c  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  00016f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  000192b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000969  00000000  00000000  00019ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016556  00000000  00000000  0001a851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fde  00000000  00000000  00030da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080dea  00000000  00000000  00042d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003034  00000000  00000000  000c3bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c6be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080075f0 	.word	0x080075f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080075f0 	.word	0x080075f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80004cc:	b40f      	push	{r0, r1, r2, r3}
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80004d4:	2314      	movs	r3, #20
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	693a      	ldr	r2, [r7, #16]
 80004de:	2180      	movs	r1, #128	@ 0x80
 80004e0:	0049      	lsls	r1, r1, #1
 80004e2:	480c      	ldr	r0, [pc, #48]	@ (8000514 <myprintf+0x48>)
 80004e4:	f006 fbfa 	bl	8006cdc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80004e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <myprintf+0x48>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff fe0c 	bl	8000108 <strlen>
 80004f0:	0003      	movs	r3, r0
 80004f2:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	4905      	ldr	r1, [pc, #20]	@ (8000514 <myprintf+0x48>)
 80004fe:	4806      	ldr	r0, [pc, #24]	@ (8000518 <myprintf+0x4c>)
 8000500:	f002 fb0e 	bl	8002b20 <HAL_UART_Transmit>

}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bc80      	pop	{r7}
 800050c:	bc08      	pop	{r3}
 800050e:	b004      	add	sp, #16
 8000510:	4718      	bx	r3
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	20000170 	.word	0x20000170
 8000518:	200000e8 	.word	0x200000e8

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	4c7e      	ldr	r4, [pc, #504]	@ (8000718 <main+0x1fc>)
 8000520:	44a5      	add	sp, r4
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fb84 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f91a 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f9ec 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f9ba 	bl	80008a8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000534:	f000 f980 	bl	8000838 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000538:	f003 f85a 	bl	80035f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800053c:	4b77      	ldr	r3, [pc, #476]	@ (800071c <main+0x200>)
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff ffc4 	bl	80004cc <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000544:	23fa      	movs	r3, #250	@ 0xfa
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fbe1 	bl	8000d10 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800054e:	4d74      	ldr	r5, [pc, #464]	@ (8000720 <main+0x204>)
 8000550:	197c      	adds	r4, r7, r5
 8000552:	4974      	ldr	r1, [pc, #464]	@ (8000724 <main+0x208>)
 8000554:	2398      	movs	r3, #152	@ 0x98
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	2201      	movs	r2, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f005 fc73 	bl	8005e48 <f_mount>
 8000562:	0003      	movs	r3, r0
 8000564:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000566:	197b      	adds	r3, r7, r5
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <main+0x64>
	myprintf("f_mount error (%i)\r\n", fres);
 800056e:	197b      	adds	r3, r7, r5
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b6d      	ldr	r3, [pc, #436]	@ (8000728 <main+0x20c>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ffa8 	bl	80004cc <myprintf>
	while(1);
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	e7fd      	b.n	800057c <main+0x60>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000580:	4d67      	ldr	r5, [pc, #412]	@ (8000720 <main+0x204>)
 8000582:	197c      	adds	r4, r7, r5
 8000584:	2328      	movs	r3, #40	@ 0x28
 8000586:	18fa      	adds	r2, r7, r3
 8000588:	232c      	movs	r3, #44	@ 0x2c
 800058a:	18f9      	adds	r1, r7, r3
 800058c:	4b65      	ldr	r3, [pc, #404]	@ (8000724 <main+0x208>)
 800058e:	0018      	movs	r0, r3
 8000590:	f006 fa12 	bl	80069b8 <f_getfree>
 8000594:	0003      	movs	r3, r0
 8000596:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000598:	197b      	adds	r3, r7, r5
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <main+0x96>
	myprintf("f_getfree error (%i)\r\n", fres);
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b61      	ldr	r3, [pc, #388]	@ (800072c <main+0x210>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff8f 	bl	80004cc <myprintf>
	while(1);
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	e7fd      	b.n	80005ae <main+0x92>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80005b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	3b02      	subs	r3, #2
 80005b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005ba:	8952      	ldrh	r2, [r2, #10]
 80005bc:	4353      	muls	r3, r2
 80005be:	2193      	movs	r1, #147	@ 0x93
 80005c0:	00c9      	lsls	r1, r1, #3
 80005c2:	187a      	adds	r2, r7, r1
 80005c4:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 80005c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c8:	895b      	ldrh	r3, [r3, #10]
 80005ca:	001a      	movs	r2, r3
 80005cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ce:	4353      	muls	r3, r2
 80005d0:	4a57      	ldr	r2, [pc, #348]	@ (8000730 <main+0x214>)
 80005d2:	18b8      	adds	r0, r7, r2
 80005d4:	6003      	str	r3, [r0, #0]

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	0859      	lsrs	r1, r3, #1
 80005dc:	18bb      	adds	r3, r7, r2
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	085a      	lsrs	r2, r3, #1
 80005e2:	4b54      	ldr	r3, [pc, #336]	@ (8000734 <main+0x218>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff71 	bl	80004cc <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80005ea:	4d4d      	ldr	r5, [pc, #308]	@ (8000720 <main+0x204>)
 80005ec:	197c      	adds	r4, r7, r5
 80005ee:	4952      	ldr	r1, [pc, #328]	@ (8000738 <main+0x21c>)
 80005f0:	2330      	movs	r3, #48	@ 0x30
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2201      	movs	r2, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f005 fc72 	bl	8005ee0 <f_open>
 80005fc:	0003      	movs	r3, r0
 80005fe:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000600:	197b      	adds	r3, r7, r5
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <main+0xf8>
	myprintf("f_open error (%i)\r\n");
 8000608:	4b4c      	ldr	r3, [pc, #304]	@ (800073c <main+0x220>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff5e 	bl	80004cc <myprintf>
	while(1);
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <main+0xf4>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000614:	4b4a      	ldr	r3, [pc, #296]	@ (8000740 <main+0x224>)
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff58 	bl	80004cc <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800061c:	2330      	movs	r3, #48	@ 0x30
 800061e:	18fa      	adds	r2, r7, r3
 8000620:	2408      	movs	r4, #8
 8000622:	193b      	adds	r3, r7, r4
 8000624:	211e      	movs	r1, #30
 8000626:	0018      	movs	r0, r3
 8000628:	f006 fa83 	bl	8006b32 <f_gets>
 800062c:	0003      	movs	r3, r0
 800062e:	2292      	movs	r2, #146	@ 0x92
 8000630:	00d2      	lsls	r2, r2, #3
 8000632:	18b9      	adds	r1, r7, r2
 8000634:	600b      	str	r3, [r1, #0]
  if(rres != 0) {
 8000636:	18bb      	adds	r3, r7, r2
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <main+0x130>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800063e:	193a      	adds	r2, r7, r4
 8000640:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <main+0x228>)
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff41 	bl	80004cc <myprintf>
 800064a:	e007      	b.n	800065c <main+0x140>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <main+0x204>)
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	4b3d      	ldr	r3, [pc, #244]	@ (8000748 <main+0x22c>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff38 	bl	80004cc <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800065c:	2530      	movs	r5, #48	@ 0x30
 800065e:	197b      	adds	r3, r7, r5
 8000660:	0018      	movs	r0, r3
 8000662:	f006 f975 	bl	8006950 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000666:	4e2e      	ldr	r6, [pc, #184]	@ (8000720 <main+0x204>)
 8000668:	19bc      	adds	r4, r7, r6
 800066a:	4938      	ldr	r1, [pc, #224]	@ (800074c <main+0x230>)
 800066c:	197b      	adds	r3, r7, r5
 800066e:	221a      	movs	r2, #26
 8000670:	0018      	movs	r0, r3
 8000672:	f005 fc35 	bl	8005ee0 <f_open>
 8000676:	0003      	movs	r3, r0
 8000678:	7023      	strb	r3, [r4, #0]
  if(fres == FR_OK) {
 800067a:	19bb      	adds	r3, r7, r6
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d104      	bne.n	800068c <main+0x170>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000682:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <main+0x234>)
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ff21 	bl	80004cc <myprintf>
 800068a:	e007      	b.n	800069c <main+0x180>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <main+0x204>)
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <main+0x220>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff ff18 	bl	80004cc <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 800069c:	2508      	movs	r5, #8
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <main+0x238>)
 80006a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a4:	c313      	stmia	r3!, {r0, r1, r4}
 80006a6:	6811      	ldr	r1, [r2, #0]
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	8891      	ldrh	r1, [r2, #4]
 80006ac:	8099      	strh	r1, [r3, #4]
 80006ae:	7992      	ldrb	r2, [r2, #6]
 80006b0:	719a      	strb	r2, [r3, #6]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80006b2:	4e1b      	ldr	r6, [pc, #108]	@ (8000720 <main+0x204>)
 80006b4:	19bc      	adds	r4, r7, r6
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	1979      	adds	r1, r7, r5
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	18b8      	adds	r0, r7, r2
 80006be:	2213      	movs	r2, #19
 80006c0:	f005 ff43 	bl	800654a <f_write>
 80006c4:	0003      	movs	r3, r0
 80006c6:	7023      	strb	r3, [r4, #0]
  if(fres == FR_OK) {
 80006c8:	19bb      	adds	r3, r7, r6
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d106      	bne.n	80006de <main+0x1c2>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <main+0x23c>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff fef8 	bl	80004cc <myprintf>
 80006dc:	e003      	b.n	80006e6 <main+0x1ca>
  } else {
	myprintf("f_write error (%i)\r\n");
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <main+0x240>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff fef3 	bl	80004cc <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80006e6:	2330      	movs	r3, #48	@ 0x30
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	f006 f930 	bl	8006950 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <main+0x208>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	0019      	movs	r1, r3
 80006f6:	2000      	movs	r0, #0
 80006f8:	f005 fba6 	bl	8005e48 <f_mount>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2120      	movs	r1, #32
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fd77 	bl	80011f6 <HAL_GPIO_TogglePin>
	   HAL_Delay(1000);
 8000708:	23fa      	movs	r3, #250	@ 0xfa
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 faff 	bl	8000d10 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	e7f2      	b.n	80006fc <main+0x1e0>
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	fffffb5c 	.word	0xfffffb5c
 800071c:	08007608 	.word	0x08007608
 8000720:	0000049f 	.word	0x0000049f
 8000724:	08007628 	.word	0x08007628
 8000728:	0800762c 	.word	0x0800762c
 800072c:	08007644 	.word	0x08007644
 8000730:	00000494 	.word	0x00000494
 8000734:	0800765c 	.word	0x0800765c
 8000738:	080076a4 	.word	0x080076a4
 800073c:	080076b0 	.word	0x080076b0
 8000740:	080076c4 	.word	0x080076c4
 8000744:	080076f4 	.word	0x080076f4
 8000748:	08007720 	.word	0x08007720
 800074c:	08007734 	.word	0x08007734
 8000750:	08007740 	.word	0x08007740
 8000754:	08007770 	.word	0x08007770
 8000758:	08007784 	.word	0x08007784
 800075c:	080077a8 	.word	0x080077a8

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b09f      	sub	sp, #124	@ 0x7c
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	2440      	movs	r4, #64	@ 0x40
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2338      	movs	r3, #56	@ 0x38
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f006 fabf 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	232c      	movs	r3, #44	@ 0x2c
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2314      	movs	r3, #20
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f006 fab7 	bl	8006cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	0018      	movs	r0, r3
 800078a:	2328      	movs	r3, #40	@ 0x28
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f006 fab0 	bl	8006cf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a26      	ldr	r2, [pc, #152]	@ (8000834 <SystemClock_Config+0xd4>)
 800079a:	401a      	ands	r2, r3
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <SystemClock_Config+0xd0>)
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	0109      	lsls	r1, r1, #4
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2210      	movs	r2, #16
 80007ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	22a0      	movs	r2, #160	@ 0xa0
 80007be:	0212      	lsls	r2, r2, #8
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fd2e 	bl	800122c <HAL_RCC_OscConfig>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007d4:	f000 f908 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	212c      	movs	r1, #44	@ 0x2c
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	220f      	movs	r2, #15
 80007de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f8e9 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000806:	f000 f8ef 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	f001 faff 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000822:	f000 f8e1 	bl	80009e8 <Error_Handler>
  }
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b01f      	add	sp, #124	@ 0x7c
 800082c:	bd90      	pop	{r4, r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	40007000 	.word	0x40007000
 8000834:	ffffe7ff 	.word	0xffffe7ff

08000838 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800083e:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <MX_SPI2_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000844:	2282      	movs	r2, #130	@ 0x82
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	02d2      	lsls	r2, r2, #11
 8000868:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800086c:	2230      	movs	r2, #48	@ 0x30
 800086e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000876:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_SPI2_Init+0x68>)
 8000884:	2207      	movs	r2, #7
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <MX_SPI2_Init+0x68>)
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fc64 	bl	8002158 <HAL_SPI_Init>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f8a8 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40003800 	.word	0x40003800

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	22e1      	movs	r2, #225	@ 0xe1
 80008b6:	0252      	lsls	r2, r2, #9
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 f8c3 	bl	8002a78 <HAL_UART_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f877 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000e8 	.word	0x200000e8
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b08b      	sub	sp, #44	@ 0x2c
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	2414      	movs	r4, #20
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2314      	movs	r3, #20
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f006 f9eb 	bl	8006cf4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000924:	2104      	movs	r1, #4
 8000926:	430a      	orrs	r2, r1
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	2204      	movs	r2, #4
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	430a      	orrs	r2, r1
 8000940:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000946:	2280      	movs	r2, #128	@ 0x80
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800096c:	2102      	movs	r1, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000976:	2202      	movs	r2, #2
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097e:	23a0      	movs	r3, #160	@ 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fc18 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	0192      	lsls	r2, r2, #6
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2284      	movs	r2, #132	@ 0x84
 8000998:	0392      	lsls	r2, r2, #14
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <MX_GPIO_Init+0xdc>)
 80009a6:	0019      	movs	r1, r3
 80009a8:	0010      	movs	r0, r2
 80009aa:	f000 fa89 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2220      	movs	r2, #32
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	23a0      	movs	r3, #160	@ 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fa75 	bl	8000ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b00b      	add	sp, #44	@ 0x2c
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000800 	.word	0x50000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <HAL_MspInit+0x24>)
 80009fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x24>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <HAL_MspInit+0x24>)
 8000a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_MspInit+0x24>)
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	0549      	lsls	r1, r1, #21
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	240c      	movs	r4, #12
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f006 f960 	bl	8006cf4 <memset>
  if(hspi->Instance==SPI2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <HAL_SPI_MspInit+0x80>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d129      	bne.n	8000a92 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	01c9      	lsls	r1, r1, #7
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a52:	2102      	movs	r1, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = cs_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	22f0      	movs	r2, #240	@ 0xf0
 8000a68:	0212      	lsls	r2, r2, #8
 8000a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	0021      	movs	r1, r4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	4a06      	ldr	r2, [pc, #24]	@ (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0010      	movs	r0, r2
 8000a8e:	f000 fa17 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b009      	add	sp, #36	@ 0x24
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40003800 	.word	0x40003800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	50000400 	.word	0x50000400

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	240c      	movs	r4, #12
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2314      	movs	r3, #20
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f006 f91a 	bl	8006cf4 <memset>
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_UART_MspInit+0x80>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d129      	bne.n	8000b1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0289      	lsls	r1, r1, #10
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af0:	0021      	movs	r1, r4
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	220c      	movs	r2, #12
 8000af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2202      	movs	r2, #2
 8000afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2203      	movs	r2, #3
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	187a      	adds	r2, r7, r1
 8000b12:	23a0      	movs	r3, #160	@ 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 f9d1 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b009      	add	sp, #36	@ 0x24
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8be 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f006 f8b6 	bl	8006d04 <__errno>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	18d2      	adds	r2, r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <_sbrk+0x64>)
 8000bb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b006      	add	sp, #24
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20005000 	.word	0x20005000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000270 	.word	0x20000270
 8000bcc:	20000408 	.word	0x20000408

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff fff6 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f006 f881 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc85 	bl	800051c <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
   ldr   r0, =_estack
 8000c14:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c20:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 8000c24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c28:	20000408 	.word	0x20000408

08000c2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_COMP_IRQHandler>
	...

08000c30 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_Init+0x3c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Init+0x3c>)
 8000c42:	2140      	movs	r1, #64	@ 0x40
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f811 	bl	8000c70 <HAL_InitTick>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e001      	b.n	8000c5e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5a:	f7ff fecb 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_InitTick+0x5c>)
 8000c7a:	681c      	ldr	r4, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	23fa      	movs	r3, #250	@ 0xfa
 8000c84:	0098      	lsls	r0, r3, #2
 8000c86:	f7ff fa51 	bl	800012c <__udivsi3>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0020      	movs	r0, r4
 8000c90:	f7ff fa4c 	bl	800012c <__udivsi3>
 8000c94:	0003      	movs	r3, r0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f905 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e00f      	b.n	8000cc4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d80b      	bhi.n	8000cc2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2301      	movs	r3, #1
 8000cae:	425b      	negs	r3, r3
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 f8e2 	bl	8000e7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_InitTick+0x64>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b003      	add	sp, #12
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	18d2      	adds	r2, r2, r3
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000274 	.word	0x20000274

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b02      	ldr	r3, [pc, #8]	@ (8000d0c <HAL_GetTick+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000274 	.word	0x20000274

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff fff0 	bl	8000cfc <HAL_GetTick>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001a      	movs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	189b      	adds	r3, r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	f7ff ffe0 	bl	8000cfc <HAL_GetTick>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	@ 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	@ 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	@ 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	@ 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	045b      	lsls	r3, r3, #17
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d301      	bcc.n	8000e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e010      	b.n	8000e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <SysTick_Config+0x44>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	3a01      	subs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff7c 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x44>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ffbf 	bl	8000e34 <SysTick_Config>
 8000eb6:	0003      	movs	r3, r0
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ed6:	e155      	b.n	8001184 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x30>
 8000eee:	e146      	b.n	800117e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	2201      	movs	r2, #1
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	58d3      	ldr	r3, [r2, r3]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2107      	movs	r1, #7
 8000fde:	400b      	ands	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	6939      	ldr	r1, [r7, #16]
 8000ff8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	23c0      	movs	r3, #192	@ 0xc0
 8001034:	029b      	lsls	r3, r3, #10
 8001036:	4013      	ands	r3, r2
 8001038:	d100      	bne.n	800103c <HAL_GPIO_Init+0x17c>
 800103a:	e0a0      	b.n	800117e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b57      	ldr	r3, [pc, #348]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 800103e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001040:	4b56      	ldr	r3, [pc, #344]	@ (800119c <HAL_GPIO_Init+0x2dc>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001048:	4a55      	ldr	r2, [pc, #340]	@ (80011a0 <HAL_GPIO_Init+0x2e0>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x1f6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4a      	ldr	r2, [pc, #296]	@ (80011a4 <HAL_GPIO_Init+0x2e4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x1f2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a49      	ldr	r2, [pc, #292]	@ (80011a8 <HAL_GPIO_Init+0x2e8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x1ee>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_GPIO_Init+0x2ec>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x1ea>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a47      	ldr	r2, [pc, #284]	@ (80011b0 <HAL_GPIO_Init+0x2f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x1e6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a46      	ldr	r2, [pc, #280]	@ (80011b4 <HAL_GPIO_Init+0x2f4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x1e2>
 800109e:	2305      	movs	r3, #5
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x1f8>
 80010b6:	2300      	movs	r3, #0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	2103      	movs	r1, #3
 80010bc:	400a      	ands	r2, r1
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <HAL_GPIO_Init+0x2e0>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	039b      	lsls	r3, r3, #14
 8001118:	4013      	ands	r3, r2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_GPIO_Init+0x2f8>)
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	40da      	lsrs	r2, r3
 800118c:	1e13      	subs	r3, r2, #0
 800118e:	d000      	beq.n	8001192 <HAL_GPIO_Init+0x2d2>
 8001190:	e6a2      	b.n	8000ed8 <HAL_GPIO_Init+0x18>
  }
}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	50000400 	.word	0x50000400
 80011a8:	50000800 	.word	0x50000800
 80011ac:	50000c00 	.word	0x50000c00
 80011b0:	50001000 	.word	0x50001000
 80011b4:	50001c00 	.word	0x50001c00
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	0008      	movs	r0, r1
 80011c6:	0011      	movs	r1, r2
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	1c02      	adds	r2, r0, #0
 80011cc:	801a      	strh	r2, [r3, #0]
 80011ce:	1c7b      	adds	r3, r7, #1
 80011d0:	1c0a      	adds	r2, r1, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	1c7b      	adds	r3, r7, #1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	881a      	ldrh	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	000a      	movs	r2, r1
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	1cb9      	adds	r1, r7, #2
 800121a:	8809      	ldrh	r1, [r1, #0]
 800121c:	400b      	ands	r3, r1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 fbbf 	bl	80019be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001240:	4bc9      	ldr	r3, [pc, #804]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124a:	4bc7      	ldr	r3, [pc, #796]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	2380      	movs	r3, #128	@ 0x80
 8001250:	025b      	lsls	r3, r3, #9
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x36>
 8001260:	e07e      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	429a      	cmp	r2, r3
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4bbb      	ldr	r3, [pc, #748]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x5a>
 8001284:	e06b      	b.n	800135e <HAL_RCC_OscConfig+0x132>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d167      	bne.n	800135e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 fb95 	bl	80019be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	429a      	cmp	r2, r3
 800129e:	d107      	bne.n	80012b0 <HAL_RCC_OscConfig+0x84>
 80012a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012a6:	2180      	movs	r1, #128	@ 0x80
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e027      	b.n	8001300 <HAL_RCC_OscConfig+0xd4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	23a0      	movs	r3, #160	@ 0xa0
 80012b6:	02db      	lsls	r3, r3, #11
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0xae>
 80012bc:	4baa      	ldr	r3, [pc, #680]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4ba9      	ldr	r3, [pc, #676]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	02c9      	lsls	r1, r1, #11
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4ba7      	ldr	r3, [pc, #668]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba6      	ldr	r3, [pc, #664]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012d0:	2180      	movs	r1, #128	@ 0x80
 80012d2:	0249      	lsls	r1, r1, #9
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e012      	b.n	8001300 <HAL_RCC_OscConfig+0xd4>
 80012da:	4ba3      	ldr	r3, [pc, #652]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba2      	ldr	r3, [pc, #648]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012e0:	49a2      	ldr	r1, [pc, #648]	@ (800156c <HAL_RCC_OscConfig+0x340>)
 80012e2:	400a      	ands	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba0      	ldr	r3, [pc, #640]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80012fa:	499d      	ldr	r1, [pc, #628]	@ (8001570 <HAL_RCC_OscConfig+0x344>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d015      	beq.n	8001334 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcf8 	bl	8000cfc <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001310:	e009      	b.n	8001326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fcf3 	bl	8000cfc <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	@ 0x64
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 fb4c 	bl	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001326:	4b90      	ldr	r3, [pc, #576]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	029b      	lsls	r3, r3, #10
 800132e:	4013      	ands	r3, r2
 8001330:	d0ef      	beq.n	8001312 <HAL_RCC_OscConfig+0xe6>
 8001332:	e015      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fce2 	bl	8000cfc <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fcdd 	bl	8000cfc <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	@ 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e336      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001350:	4b85      	ldr	r3, [pc, #532]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x112>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x140>
 800136a:	e099      	b.n	80014a0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	2220      	movs	r2, #32
 8001376:	4013      	ands	r3, r2
 8001378:	d009      	beq.n	800138e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800137a:	4b7b      	ldr	r3, [pc, #492]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b7a      	ldr	r3, [pc, #488]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001380:	2120      	movs	r1, #32
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	2220      	movs	r2, #32
 800138a:	4393      	bics	r3, r2
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d13e      	bne.n	8001418 <HAL_RCC_OscConfig+0x1ec>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d13b      	bne.n	8001418 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013a0:	4b71      	ldr	r3, [pc, #452]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2204      	movs	r2, #4
 80013a6:	4013      	ands	r3, r2
 80013a8:	d004      	beq.n	80013b4 <HAL_RCC_OscConfig+0x188>
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e304      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001574 <HAL_RCC_OscConfig+0x348>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	021a      	lsls	r2, r3, #8
 80013c4:	4b68      	ldr	r3, [pc, #416]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ca:	4b67      	ldr	r3, [pc, #412]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2209      	movs	r2, #9
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013dc:	f000 fc42 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 80013e0:	0001      	movs	r1, r0
 80013e2:	4b61      	ldr	r3, [pc, #388]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	220f      	movs	r2, #15
 80013ea:	4013      	ands	r3, r2
 80013ec:	4a62      	ldr	r2, [pc, #392]	@ (8001578 <HAL_RCC_OscConfig+0x34c>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	000a      	movs	r2, r1
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4b61      	ldr	r3, [pc, #388]	@ (800157c <HAL_RCC_OscConfig+0x350>)
 80013f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013f8:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <HAL_RCC_OscConfig+0x354>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2513      	movs	r5, #19
 80013fe:	197c      	adds	r4, r7, r5
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff fc35 	bl	8000c70 <HAL_InitTick>
 8001406:	0003      	movs	r3, r0
 8001408:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800140a:	197b      	adds	r3, r7, r5
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d046      	beq.n	80014a0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001412:	197b      	adds	r3, r7, r5
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	e2d2      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d027      	beq.n	800146e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800141e:	4b52      	ldr	r3, [pc, #328]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2209      	movs	r2, #9
 8001424:	4393      	bics	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fc64 	bl	8000cfc <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc5f 	bl	8000cfc <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2b8      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144c:	4b46      	ldr	r3, [pc, #280]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2204      	movs	r2, #4
 8001452:	4013      	ands	r3, r2
 8001454:	d0f1      	beq.n	800143a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a46      	ldr	r2, [pc, #280]	@ (8001574 <HAL_RCC_OscConfig+0x348>)
 800145c:	4013      	ands	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	e018      	b.n	80014a0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001474:	2101      	movs	r1, #1
 8001476:	438a      	bics	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fc3f 	bl	8000cfc <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc3a 	bl	8000cfc <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e293      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001496:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	4013      	ands	r3, r2
 800149e:	d1f1      	bne.n	8001484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2210      	movs	r2, #16
 80014a6:	4013      	ands	r3, r2
 80014a8:	d100      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
 80014aa:	e0a2      	b.n	80015f2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d140      	bne.n	8001534 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x29e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e279      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001584 <HAL_RCC_OscConfig+0x358>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d8:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	0a19      	lsrs	r1, r3, #8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	061a      	lsls	r2, r3, #24
 80014ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	0b5b      	lsrs	r3, r3, #13
 80014f8:	3301      	adds	r3, #1
 80014fa:	2280      	movs	r2, #128	@ 0x80
 80014fc:	0212      	lsls	r2, r2, #8
 80014fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	210f      	movs	r1, #15
 8001508:	400b      	ands	r3, r1
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x34c>)
 800150c:	5ccb      	ldrb	r3, [r1, r3]
 800150e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_RCC_OscConfig+0x350>)
 8001512:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_RCC_OscConfig+0x354>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2513      	movs	r5, #19
 800151a:	197c      	adds	r4, r7, r5
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff fba7 	bl	8000c70 <HAL_InitTick>
 8001522:	0003      	movs	r3, r0
 8001524:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001526:	197b      	adds	r3, r7, r5
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d061      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800152e:	197b      	adds	r3, r7, r5
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	e244      	b.n	80019be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d040      	beq.n	80015be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_RCC_OscConfig+0x33c>)
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	0049      	lsls	r1, r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fbd7 	bl	8000cfc <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001552:	e019      	b.n	8001588 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001554:	f7ff fbd2 	bl	8000cfc <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d912      	bls.n	8001588 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e22b      	b.n	80019be <HAL_RCC_OscConfig+0x792>
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	fffeffff 	.word	0xfffeffff
 8001570:	fffbffff 	.word	0xfffbffff
 8001574:	ffffe0ff 	.word	0xffffe0ff
 8001578:	08007804 	.word	0x08007804
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004
 8001584:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001588:	4bca      	ldr	r3, [pc, #808]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d0df      	beq.n	8001554 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4bc7      	ldr	r3, [pc, #796]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4ac7      	ldr	r2, [pc, #796]	@ (80018b8 <HAL_RCC_OscConfig+0x68c>)
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a2:	4bc4      	ldr	r3, [pc, #784]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a8:	4bc2      	ldr	r3, [pc, #776]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	0a19      	lsrs	r1, r3, #8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	061a      	lsls	r2, r3, #24
 80015b6:	4bbf      	ldr	r3, [pc, #764]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	e019      	b.n	80015f2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015be:	4bbd      	ldr	r3, [pc, #756]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4bbc      	ldr	r3, [pc, #752]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015c4:	49bd      	ldr	r1, [pc, #756]	@ (80018bc <HAL_RCC_OscConfig+0x690>)
 80015c6:	400a      	ands	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb97 	bl	8000cfc <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff fb92 	bl	8000cfc <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1eb      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015e6:	4bb3      	ldr	r3, [pc, #716]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	@ 0x80
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2208      	movs	r2, #8
 80015f8:	4013      	ands	r3, r2
 80015fa:	d036      	beq.n	800166a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d019      	beq.n	8001638 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4bab      	ldr	r3, [pc, #684]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001608:	4baa      	ldr	r3, [pc, #680]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb74 	bl	8000cfc <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fb6f 	bl	8000cfc <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1c8      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162c:	4ba1      	ldr	r3, [pc, #644]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800162e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d0f1      	beq.n	800161a <HAL_RCC_OscConfig+0x3ee>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b9e      	ldr	r3, [pc, #632]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800163a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800163c:	4b9d      	ldr	r3, [pc, #628]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb5a 	bl	8000cfc <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fb55 	bl	8000cfc <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1ae      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001660:	4b94      	ldr	r3, [pc, #592]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d1f1      	bne.n	800164e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d100      	bne.n	8001676 <HAL_RCC_OscConfig+0x44a>
 8001674:	e0ae      	b.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2023      	movs	r0, #35	@ 0x23
 8001678:	183b      	adds	r3, r7, r0
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b8d      	ldr	r3, [pc, #564]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	055b      	lsls	r3, r3, #21
 8001686:	4013      	ands	r3, r2
 8001688:	d109      	bne.n	800169e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b8a      	ldr	r3, [pc, #552]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800168c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800168e:	4b89      	ldr	r3, [pc, #548]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001690:	2180      	movs	r1, #128	@ 0x80
 8001692:	0549      	lsls	r1, r1, #21
 8001694:	430a      	orrs	r2, r1
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001698:	183b      	adds	r3, r7, r0
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x694>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b85      	ldr	r3, [pc, #532]	@ (80018c0 <HAL_RCC_OscConfig+0x694>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b84      	ldr	r3, [pc, #528]	@ (80018c0 <HAL_RCC_OscConfig+0x694>)
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	0049      	lsls	r1, r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb20 	bl	8000cfc <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fb1b 	bl	8000cfc <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	@ 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e174      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b7a      	ldr	r3, [pc, #488]	@ (80018c0 <HAL_RCC_OscConfig+0x694>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x4d0>
 80016ec:	4b71      	ldr	r3, [pc, #452]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016f0:	4b70      	ldr	r3, [pc, #448]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	0049      	lsls	r1, r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80016fa:	e031      	b.n	8001760 <HAL_RCC_OscConfig+0x534>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x4f2>
 8001704:	4b6b      	ldr	r3, [pc, #428]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001708:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800170a:	496c      	ldr	r1, [pc, #432]	@ (80018bc <HAL_RCC_OscConfig+0x690>)
 800170c:	400a      	ands	r2, r1
 800170e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001710:	4b68      	ldr	r3, [pc, #416]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001714:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001716:	496b      	ldr	r1, [pc, #428]	@ (80018c4 <HAL_RCC_OscConfig+0x698>)
 8001718:	400a      	ands	r2, r1
 800171a:	651a      	str	r2, [r3, #80]	@ 0x50
 800171c:	e020      	b.n	8001760 <HAL_RCC_OscConfig+0x534>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	23a0      	movs	r3, #160	@ 0xa0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	429a      	cmp	r2, r3
 8001728:	d10e      	bne.n	8001748 <HAL_RCC_OscConfig+0x51c>
 800172a:	4b62      	ldr	r3, [pc, #392]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800172e:	4b61      	ldr	r3, [pc, #388]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	00c9      	lsls	r1, r1, #3
 8001734:	430a      	orrs	r2, r1
 8001736:	651a      	str	r2, [r3, #80]	@ 0x50
 8001738:	4b5e      	ldr	r3, [pc, #376]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800173c:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	0049      	lsls	r1, r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	651a      	str	r2, [r3, #80]	@ 0x50
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x534>
 8001748:	4b5a      	ldr	r3, [pc, #360]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800174a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800174e:	495b      	ldr	r1, [pc, #364]	@ (80018bc <HAL_RCC_OscConfig+0x690>)
 8001750:	400a      	ands	r2, r1
 8001752:	651a      	str	r2, [r3, #80]	@ 0x50
 8001754:	4b57      	ldr	r3, [pc, #348]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001758:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800175a:	495a      	ldr	r1, [pc, #360]	@ (80018c4 <HAL_RCC_OscConfig+0x698>)
 800175c:	400a      	ands	r2, r1
 800175e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fac8 	bl	8000cfc <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001770:	e009      	b.n	8001786 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fac3 	bl	8000cfc <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a52      	ldr	r2, [pc, #328]	@ (80018c8 <HAL_RCC_OscConfig+0x69c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e11b      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001786:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d0ef      	beq.n	8001772 <HAL_RCC_OscConfig+0x546>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fab2 	bl	8000cfc <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff faad 	bl	8000cfc <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a47      	ldr	r2, [pc, #284]	@ (80018c8 <HAL_RCC_OscConfig+0x69c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e105      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b2:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017be:	2323      	movs	r3, #35	@ 0x23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017ce:	493f      	ldr	r1, [pc, #252]	@ (80018cc <HAL_RCC_OscConfig+0x6a0>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2220      	movs	r2, #32
 80017da:	4013      	ands	r3, r2
 80017dc:	d049      	beq.n	8001872 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d026      	beq.n	8001834 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017e6:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f6:	4b2f      	ldr	r3, [pc, #188]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x6a4>)
 8001800:	6a1a      	ldr	r2, [r3, #32]
 8001802:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <HAL_RCC_OscConfig+0x6a4>)
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0189      	lsls	r1, r1, #6
 8001808:	430a      	orrs	r2, r1
 800180a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa76 	bl	8000cfc <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001816:	f7ff fa71 	bl	8000cfc <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0ca      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d0f1      	beq.n	8001816 <HAL_RCC_OscConfig+0x5ea>
 8001832:	e01e      	b.n	8001872 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800183a:	2101      	movs	r1, #1
 800183c:	438a      	bics	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <HAL_RCC_OscConfig+0x6a4>)
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_RCC_OscConfig+0x6a4>)
 8001846:	4923      	ldr	r1, [pc, #140]	@ (80018d4 <HAL_RCC_OscConfig+0x6a8>)
 8001848:	400a      	ands	r2, r1
 800184a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fa56 	bl	8000cfc <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001856:	f7ff fa51 	bl	8000cfc <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0aa      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f1      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x650>
 800187a:	e09f      	b.n	80019bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d100      	bne.n	8001884 <HAL_RCC_OscConfig+0x658>
 8001882:	e078      	b.n	8001976 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	2b02      	cmp	r3, #2
 800188a:	d159      	bne.n	8001940 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_RCC_OscConfig+0x688>)
 8001892:	4911      	ldr	r1, [pc, #68]	@ (80018d8 <HAL_RCC_OscConfig+0x6ac>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fa30 	bl	8000cfc <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff fa2b 	bl	8000cfc <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d915      	bls.n	80018dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e084      	b.n	80019be <HAL_RCC_OscConfig+0x792>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	ffff1fff 	.word	0xffff1fff
 80018bc:	fffffeff 	.word	0xfffffeff
 80018c0:	40007000 	.word	0x40007000
 80018c4:	fffffbff 	.word	0xfffffbff
 80018c8:	00001388 	.word	0x00001388
 80018cc:	efffffff 	.word	0xefffffff
 80018d0:	40010000 	.word	0x40010000
 80018d4:	ffffdfff 	.word	0xffffdfff
 80018d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018dc:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	049b      	lsls	r3, r3, #18
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1dc      	bne.n	80018a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a37      	ldr	r2, [pc, #220]	@ (80019cc <HAL_RCC_OscConfig+0x7a0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001900:	431a      	orrs	r2, r3
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	0449      	lsls	r1, r1, #17
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff f9f1 	bl	8000cfc <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f9ec 	bl	8000cfc <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e045      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x6f4>
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 8001946:	4922      	ldr	r1, [pc, #136]	@ (80019d0 <HAL_RCC_OscConfig+0x7a4>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff f9d6 	bl	8000cfc <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f9d1 	bl	8000cfc <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e02a      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	049b      	lsls	r3, r3, #18
 8001970:	4013      	ands	r3, r2
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x72a>
 8001974:	e022      	b.n	80019bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e01d      	b.n	80019be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_RCC_OscConfig+0x79c>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	429a      	cmp	r2, r3
 8001996:	d10f      	bne.n	80019b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	23f0      	movs	r3, #240	@ 0xf0
 800199c:	039b      	lsls	r3, r3, #14
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	23c0      	movs	r3, #192	@ 0xc0
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b00a      	add	sp, #40	@ 0x28
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	ff02ffff 	.word	0xff02ffff
 80019d0:	feffffff 	.word	0xfeffffff

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e128      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b96      	ldr	r3, [pc, #600]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d91e      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b93      	ldr	r3, [pc, #588]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4393      	bics	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	4b90      	ldr	r3, [pc, #576]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f978 	bl	8000cfc <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7ff f973 	bl	8000cfc <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a8a      	ldr	r2, [pc, #552]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e109      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b87      	ldr	r3, [pc, #540]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3e:	4b83      	ldr	r3, [pc, #524]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	22f0      	movs	r2, #240	@ 0xf0
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
 8001a5c:	e089      	b.n	8001b72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a66:	4b79      	ldr	r3, [pc, #484]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	029b      	lsls	r3, r3, #10
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d120      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0e1      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a7e:	4b73      	ldr	r3, [pc, #460]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d114      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0d5      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a96:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0ca      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aa4:	4b69      	ldr	r3, [pc, #420]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0c2      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab4:	4b65      	ldr	r3, [pc, #404]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4b62      	ldr	r3, [pc, #392]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f918 	bl	8000cfc <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f90f 	bl	8000cfc <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a58      	ldr	r2, [pc, #352]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0a5      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aee:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	220c      	movs	r2, #12
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_ClockConfig+0x106>
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7ff f8f9 	bl	8000cfc <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a4d      	ldr	r2, [pc, #308]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e08f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x132>
 8001b26:	e024      	b.n	8001b72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d11b      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f8e3 	bl	8000cfc <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e079      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x15e>
 8001b52:	e00e      	b.n	8001b72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff f8d2 	bl	8000cfc <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e068      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b68:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b72:	4b34      	ldr	r3, [pc, #208]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d21e      	bcs.n	8001bbe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4393      	bics	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b92:	f7ff f8b3 	bl	8000cfc <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f8ae 	bl	8000cfc <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e044      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d1ee      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a20      	ldr	r2, [pc, #128]	@ (8001c50 <HAL_RCC_ClockConfig+0x27c>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2208      	movs	r2, #8
 8001be2:	4013      	ands	r3, r2
 8001be4:	d00a      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be6:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a1a      	ldr	r2, [pc, #104]	@ (8001c54 <HAL_RCC_ClockConfig+0x280>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00da      	lsls	r2, r3, #3
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfc:	f000 f832 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c00:	0001      	movs	r1, r0
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_RCC_ClockConfig+0x278>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	220f      	movs	r2, #15
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <HAL_RCC_ClockConfig+0x284>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	000a      	movs	r2, r1
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_ClockConfig+0x288>)
 8001c16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_RCC_ClockConfig+0x28c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	250b      	movs	r5, #11
 8001c1e:	197c      	adds	r4, r7, r5
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff f825 	bl	8000c70 <HAL_InitTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c2a:	197b      	adds	r3, r7, r5
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c32:	197b      	adds	r3, r7, r5
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	40022000 	.word	0x40022000
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	fffff8ff 	.word	0xfffff8ff
 8001c54:	ffffc7ff 	.word	0xffffc7ff
 8001c58:	08007804 	.word	0x08007804
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b08e      	sub	sp, #56	@ 0x38
 8001c68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c72:	230c      	movs	r3, #12
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d014      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7a:	d900      	bls.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c7c:	e07b      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x112>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x24>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c86:	e076      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c92:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c96:	e07c      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c98:	4b42      	ldr	r3, [pc, #264]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c9c:	e079      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9e:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ca2:	e076      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca6:	0c9a      	lsrs	r2, r3, #18
 8001ca8:	230f      	movs	r3, #15
 8001caa:	401a      	ands	r2, r3
 8001cac:	4b3f      	ldr	r3, [pc, #252]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x148>)
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb4:	0d9a      	lsrs	r2, r3, #22
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	3301      	adds	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbe:	4b37      	ldr	r3, [pc, #220]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	025b      	lsls	r3, r3, #9
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d01a      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	4a35      	ldr	r2, [pc, #212]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	69b8      	ldr	r0, [r7, #24]
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	f7fe fad3 	bl	8000284 <__aeabi_lmul>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f7fe faa7 	bl	8000244 <__aeabi_uldivmod>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfe:	e037      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d00:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	4013      	ands	r3, r2
 8001d08:	d01a      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d14:	2300      	movs	r3, #0
 8001d16:	68b8      	ldr	r0, [r7, #8]
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	f7fe fab3 	bl	8000284 <__aeabi_lmul>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	000b      	movs	r3, r1
 8001d22:	0010      	movs	r0, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f7fe fa87 	bl	8000244 <__aeabi_uldivmod>
 8001d36:	0002      	movs	r2, r0
 8001d38:	000b      	movs	r3, r1
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3e:	e017      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d42:	0018      	movs	r0, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	0019      	movs	r1, r3
 8001d48:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f7fe fa9a 	bl	8000284 <__aeabi_lmul>
 8001d50:	0002      	movs	r2, r0
 8001d52:	000b      	movs	r3, r1
 8001d54:	0010      	movs	r0, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	001d      	movs	r5, r3
 8001d60:	0022      	movs	r2, r4
 8001d62:	002b      	movs	r3, r5
 8001d64:	f7fe fa6e 	bl	8000244 <__aeabi_uldivmod>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d74:	e00d      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0b5b      	lsrs	r3, r3, #13
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	3301      	adds	r3, #1
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	0212      	lsls	r2, r2, #8
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d90:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b00e      	add	sp, #56	@ 0x38
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	003d0900 	.word	0x003d0900
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200
 8001dac:	0800781c 	.word	0x0800781c

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b02      	ldr	r3, [pc, #8]	@ (8001dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff2 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	000b      	movs	r3, r1
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08007814 	.word	0x08007814

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffdc 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df8:	0001      	movs	r1, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	2207      	movs	r2, #7
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	40d9      	lsrs	r1, r3
 8001e0a:	000b      	movs	r3, r1
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08007814 	.word	0x08007814

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e24:	2317      	movs	r3, #23
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2220      	movs	r2, #32
 8001e32:	4013      	ands	r3, r2
 8001e34:	d106      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e42:	e104      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e44:	4bb9      	ldr	r3, [pc, #740]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d10a      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4bb6      	ldr	r3, [pc, #728]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e54:	4bb5      	ldr	r3, [pc, #724]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e56:	2180      	movs	r1, #128	@ 0x80
 8001e58:	0549      	lsls	r1, r1, #21
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001e5e:	2317      	movs	r3, #23
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4bb2      	ldr	r3, [pc, #712]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d11a      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4baf      	ldr	r3, [pc, #700]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4bae      	ldr	r3, [pc, #696]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	0049      	lsls	r1, r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e80:	f7fe ff3c 	bl	8000cfc <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7fe ff37 	bl	8000cfc <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	@ 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e143      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4ba4      	ldr	r3, [pc, #656]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	23c0      	movs	r3, #192	@ 0xc0
 8001eae:	039b      	lsls	r3, r3, #14
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	@ 0xc0
 8001eba:	039b      	lsls	r3, r3, #14
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	23c0      	movs	r3, #192	@ 0xc0
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d013      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	23c0      	movs	r3, #192	@ 0xc0
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	401a      	ands	r2, r3
 8001ede:	23c0      	movs	r3, #192	@ 0xc0
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10a      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ee6:	4b91      	ldr	r3, [pc, #580]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	401a      	ands	r2, r3
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d101      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e113      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001efc:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001efe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f00:	23c0      	movs	r3, #192	@ 0xc0
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d049      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	23c0      	movs	r3, #192	@ 0xc0
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	4013      	ands	r3, r2
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d004      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	4013      	ands	r3, r2
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	23c0      	movs	r3, #192	@ 0xc0
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4013      	ands	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d034      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4013      	ands	r3, r2
 8001f42:	d02e      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f44:	4b79      	ldr	r3, [pc, #484]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f48:	4a7a      	ldr	r2, [pc, #488]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f4e:	4b77      	ldr	r3, [pc, #476]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f52:	4b76      	ldr	r3, [pc, #472]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0309      	lsls	r1, r1, #12
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	4b73      	ldr	r3, [pc, #460]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f60:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f62:	4975      	ldr	r1, [pc, #468]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f68:	4b70      	ldr	r3, [pc, #448]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d014      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fec0 	bl	8000cfc <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f80:	e009      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe febb 	bl	8000cfc <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a6b      	ldr	r2, [pc, #428]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0c6      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f96:	4b65      	ldr	r3, [pc, #404]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0ef      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d01f      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	23c0      	movs	r3, #192	@ 0xc0
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	23c0      	movs	r3, #192	@ 0xc0
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001fc0:	4b5a      	ldr	r3, [pc, #360]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	23c0      	movs	r3, #192	@ 0xc0
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	4b55      	ldr	r3, [pc, #340]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	4b54      	ldr	r3, [pc, #336]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fdc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	23c0      	movs	r3, #192	@ 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d01f      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	@ 0xc0
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	401a      	ands	r2, r3
 8002002:	23c0      	movs	r3, #192	@ 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	429a      	cmp	r2, r3
 8002008:	d10c      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800200a:	4b48      	ldr	r3, [pc, #288]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	23c0      	movs	r3, #192	@ 0xc0
 800201a:	039b      	lsls	r3, r3, #14
 800201c:	401a      	ands	r2, r3
 800201e:	4b43      	ldr	r3, [pc, #268]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002026:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	23c0      	movs	r3, #192	@ 0xc0
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	401a      	ands	r2, r3
 8002032:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002034:	430a      	orrs	r2, r1
 8002036:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002038:	2317      	movs	r3, #23
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b3a      	ldr	r3, [pc, #232]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002046:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002048:	493e      	ldr	r1, [pc, #248]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800204a:	400a      	ands	r2, r1
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d009      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002058:	4b34      	ldr	r3, [pc, #208]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205c:	2203      	movs	r2, #3
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	4b31      	ldr	r3, [pc, #196]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002068:	430a      	orrs	r2, r1
 800206a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2202      	movs	r2, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	220c      	movs	r2, #12
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	4b29      	ldr	r3, [pc, #164]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002086:	430a      	orrs	r2, r1
 8002088:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2204      	movs	r2, #4
 8002090:	4013      	ands	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2208      	movs	r2, #8
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	4013      	ands	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020f0:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a16      	ldr	r2, [pc, #88]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020fe:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002100:	430a      	orrs	r2, r1
 8002102:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2280      	movs	r2, #128	@ 0x80
 800210a:	4013      	ands	r3, r2
 800210c:	d009      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a10      	ldr	r2, [pc, #64]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800211e:	430a      	orrs	r2, r1
 8002120:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b006      	add	sp, #24
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	fffcffff 	.word	0xfffcffff
 8002138:	fff7ffff 	.word	0xfff7ffff
 800213c:	00001388 	.word	0x00001388
 8002140:	ffcfffff 	.word	0xffcfffff
 8002144:	efffffff 	.word	0xefffffff
 8002148:	fffff3ff 	.word	0xfffff3ff
 800214c:	ffffcfff 	.word	0xffffcfff
 8002150:	fbffffff 	.word	0xfbffffff
 8002154:	fff3ffff 	.word	0xfff3ffff

08002158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e083      	b.n	8002272 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	2382      	movs	r3, #130	@ 0x82
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	429a      	cmp	r2, r3
 800217c:	d009      	beq.n	8002192 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	61da      	str	r2, [r3, #28]
 8002184:	e005      	b.n	8002192 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2251      	movs	r2, #81	@ 0x51
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2250      	movs	r2, #80	@ 0x50
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7fe fc34 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2251      	movs	r2, #81	@ 0x51
 80021b8:	2102      	movs	r1, #2
 80021ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	438a      	bics	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2382      	movs	r3, #130	@ 0x82
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	2384      	movs	r3, #132	@ 0x84
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	400b      	ands	r3, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2102      	movs	r1, #2
 80021f4:	400b      	ands	r3, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	2101      	movs	r1, #1
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6999      	ldr	r1, [r3, #24]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2138      	movs	r1, #56	@ 0x38
 8002214:	400b      	ands	r3, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	0011      	movs	r1, r2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	019b      	lsls	r3, r3, #6
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	2204      	movs	r2, #4
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	2210      	movs	r2, #16
 8002248:	401a      	ands	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <HAL_SPI_Init+0x124>)
 800225e:	400a      	ands	r2, r1
 8002260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2251      	movs	r2, #81	@ 0x51
 800226c:	2101      	movs	r1, #1
 800226e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	fffff7ff 	.word	0xfffff7ff

08002280 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002290:	231f      	movs	r3, #31
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2250      	movs	r2, #80	@ 0x50
 800229c:	5c9b      	ldrb	r3, [r3, r2]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_SPI_Transmit+0x26>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e145      	b.n	8002532 <HAL_SPI_Transmit+0x2b2>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2250      	movs	r2, #80	@ 0x50
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ae:	f7fe fd25 	bl	8000cfc <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022b6:	2316      	movs	r3, #22
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	1dba      	adds	r2, r7, #6
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2251      	movs	r2, #81	@ 0x51
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d004      	beq.n	80022d6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80022cc:	231f      	movs	r3, #31
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2202      	movs	r2, #2
 80022d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80022d4:	e126      	b.n	8002524 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_SPI_Transmit+0x64>
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ec:	e11a      	b.n	8002524 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2251      	movs	r2, #81	@ 0x51
 80022f2:	2103      	movs	r1, #3
 80022f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1dba      	adds	r2, r7, #6
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1dba      	adds	r2, r7, #6
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	429a      	cmp	r2, r3
 800233a:	d110      	bne.n	800235e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2140      	movs	r1, #64	@ 0x40
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	01c9      	lsls	r1, r1, #7
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	4013      	ands	r3, r2
 8002368:	2b40      	cmp	r3, #64	@ 0x40
 800236a:	d007      	beq.n	800237c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	429a      	cmp	r2, r3
 8002386:	d152      	bne.n	800242e <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_SPI_Transmit+0x11a>
 8002390:	2316      	movs	r3, #22
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d143      	bne.n	8002422 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	1c9a      	adds	r2, r3, #2
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023be:	e030      	b.n	8002422 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d112      	bne.n	80023f4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	1c9a      	adds	r2, r3, #2
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023f2:	e016      	b.n	8002422 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f4:	f7fe fc82 	bl	8000cfc <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d802      	bhi.n	800240a <HAL_SPI_Transmit+0x18a>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_SPI_Transmit+0x190>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d108      	bne.n	8002422 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002410:	231f      	movs	r3, #31
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2203      	movs	r2, #3
 8002416:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2251      	movs	r2, #81	@ 0x51
 800241c:	2101      	movs	r1, #1
 800241e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002420:	e080      	b.n	8002524 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1c9      	bne.n	80023c0 <HAL_SPI_Transmit+0x140>
 800242c:	e053      	b.n	80024d6 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_SPI_Transmit+0x1c0>
 8002436:	2316      	movs	r3, #22
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d145      	bne.n	80024cc <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002466:	e031      	b.n	80024cc <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d113      	bne.n	800249e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800249c:	e016      	b.n	80024cc <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249e:	f7fe fc2d 	bl	8000cfc <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d802      	bhi.n	80024b4 <HAL_SPI_Transmit+0x234>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Transmit+0x23a>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2251      	movs	r2, #81	@ 0x51
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
          goto error;
 80024ca:	e02b      	b.n	8002524 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1c8      	bne.n	8002468 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fa85 	bl	80029ec <SPI_EndRxTxTransaction>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002512:	231f      	movs	r3, #31
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e003      	b.n	8002524 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2251      	movs	r2, #81	@ 0x51
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2250      	movs	r2, #80	@ 0x50
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800252c:	231f      	movs	r3, #31
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b008      	add	sp, #32
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b08c      	sub	sp, #48	@ 0x30
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	001a      	movs	r2, r3
 8002548:	1cbb      	adds	r3, r7, #2
 800254a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800254c:	2301      	movs	r3, #1
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002550:	232b      	movs	r3, #43	@ 0x2b
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2250      	movs	r2, #80	@ 0x50
 800255c:	5c9b      	ldrb	r3, [r3, r2]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x2c>
 8002562:	2302      	movs	r3, #2
 8002564:	e1b0      	b.n	80028c8 <HAL_SPI_TransmitReceive+0x38e>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2250      	movs	r2, #80	@ 0x50
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800256e:	f7fe fbc5 	bl	8000cfc <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002576:	2023      	movs	r0, #35	@ 0x23
 8002578:	183b      	adds	r3, r7, r0
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	2151      	movs	r1, #81	@ 0x51
 800257e:	5c52      	ldrb	r2, [r2, r1]
 8002580:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002588:	231a      	movs	r3, #26
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	1cba      	adds	r2, r7, #2
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002592:	183b      	adds	r3, r7, r0
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d011      	beq.n	80025be <HAL_SPI_TransmitReceive+0x84>
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	2382      	movs	r3, #130	@ 0x82
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x7a>
 80025ac:	183b      	adds	r3, r7, r0
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d004      	beq.n	80025be <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80025b4:	232b      	movs	r3, #43	@ 0x2b
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80025bc:	e17d      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x98>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x98>
 80025ca:	1cbb      	adds	r3, r7, #2
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80025d2:	232b      	movs	r3, #43	@ 0x2b
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80025da:	e16e      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2251      	movs	r2, #81	@ 0x51
 80025e0:	5c9b      	ldrb	r3, [r3, r2]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d003      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2251      	movs	r2, #81	@ 0x51
 80025ec:	2105      	movs	r1, #5
 80025ee:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1cba      	adds	r2, r7, #2
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1cba      	adds	r2, r7, #2
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1cba      	adds	r2, r7, #2
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1cba      	adds	r2, r7, #2
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2240      	movs	r2, #64	@ 0x40
 8002636:	4013      	ands	r3, r2
 8002638:	2b40      	cmp	r3, #64	@ 0x40
 800263a:	d007      	beq.n	800264c <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2140      	movs	r1, #64	@ 0x40
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	429a      	cmp	r2, r3
 8002656:	d000      	beq.n	800265a <HAL_SPI_TransmitReceive+0x120>
 8002658:	e07f      	b.n	800275a <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_SPI_TransmitReceive+0x134>
 8002662:	231a      	movs	r3, #26
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d000      	beq.n	800266e <HAL_SPI_TransmitReceive+0x134>
 800266c:	e06a      	b.n	8002744 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002692:	e057      	b.n	8002744 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d11b      	bne.n	80026da <HAL_SPI_TransmitReceive+0x1a0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d016      	beq.n	80026da <HAL_SPI_TransmitReceive+0x1a0>
 80026ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d113      	bne.n	80026da <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d119      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1e2>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d014      	beq.n	800271c <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	b292      	uxth	r2, r2
 80026fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800271c:	f7fe faee 	bl	8000cfc <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002728:	429a      	cmp	r2, r3
 800272a:	d80b      	bhi.n	8002744 <HAL_SPI_TransmitReceive+0x20a>
 800272c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272e:	3301      	adds	r3, #1
 8002730:	d008      	beq.n	8002744 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8002732:	232b      	movs	r3, #43	@ 0x2b
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2251      	movs	r2, #81	@ 0x51
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
        goto error;
 8002742:	e0ba      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1a2      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x15a>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d19d      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x15a>
 8002758:	e083      	b.n	8002862 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_SPI_TransmitReceive+0x234>
 8002762:	231a      	movs	r3, #26
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d000      	beq.n	800276e <HAL_SPI_TransmitReceive+0x234>
 800276c:	e06f      	b.n	800284e <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002794:	e05b      	b.n	800284e <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d11c      	bne.n	80027de <HAL_SPI_TransmitReceive+0x2a4>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d017      	beq.n	80027de <HAL_SPI_TransmitReceive+0x2a4>
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d114      	bne.n	80027de <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x2e6>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d014      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002820:	f7fe fa6c 	bl	8000cfc <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800282c:	429a      	cmp	r2, r3
 800282e:	d802      	bhi.n	8002836 <HAL_SPI_TransmitReceive+0x2fc>
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	3301      	adds	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_SPI_TransmitReceive+0x302>
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800283c:	232b      	movs	r3, #43	@ 0x2b
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2251      	movs	r2, #81	@ 0x51
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]
        goto error;
 800284c:	e035      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d19e      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x25c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d199      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f8bf 	bl	80029ec <SPI_EndRxTxTransaction>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d007      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002872:	232b      	movs	r3, #43	@ 0x2b
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002880:	e01b      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80028a8:	232b      	movs	r3, #43	@ 0x2b
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e003      	b.n	80028ba <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2251      	movs	r2, #81	@ 0x51
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2250      	movs	r2, #80	@ 0x50
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028c2:	232b      	movs	r3, #43	@ 0x2b
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b00c      	add	sp, #48	@ 0x30
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e0:	f7fe fa0c 	bl	8000cfc <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028f0:	f7fe fa04 	bl	8000cfc <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f8:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	0d1b      	lsrs	r3, r3, #20
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	4353      	muls	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002906:	e058      	b.n	80029ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	d055      	beq.n	80029ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290e:	f7fe f9f5 	bl	8000cfc <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	429a      	cmp	r2, r3
 800291c:	d902      	bls.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x54>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d142      	bne.n	80029aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	21e0      	movs	r1, #224	@ 0xe0
 8002930:	438a      	bics	r2, r1
 8002932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	2382      	movs	r3, #130	@ 0x82
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	429a      	cmp	r2, r3
 800293e:	d113      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	429a      	cmp	r2, r3
 800294a:	d005      	beq.n	8002958 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	429a      	cmp	r2, r3
 8002956:	d107      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2140      	movs	r1, #64	@ 0x40
 8002964:	438a      	bics	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	019b      	lsls	r3, r3, #6
 8002970:	429a      	cmp	r2, r3
 8002972:	d110      	bne.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	491a      	ldr	r1, [pc, #104]	@ (80029e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0189      	lsls	r1, r1, #6
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2251      	movs	r2, #81	@ 0x51
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2250      	movs	r2, #80	@ 0x50
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e017      	b.n	80029da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	425a      	negs	r2, r3
 80029ca:	4153      	adcs	r3, r2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	001a      	movs	r2, r3
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d197      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b008      	add	sp, #32
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	20000000 	.word	0x20000000
 80029e8:	ffffdfff 	.word	0xffffdfff

080029ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <SPI_EndRxTxTransaction+0x84>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	491d      	ldr	r1, [pc, #116]	@ (8002a74 <SPI_EndRxTxTransaction+0x88>)
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fd fb94 	bl	800012c <__udivsi3>
 8002a04:	0003      	movs	r3, r0
 8002a06:	001a      	movs	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	2382      	movs	r3, #130	@ 0x82
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d112      	bne.n	8002a48 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	@ 0x80
 8002a30:	f7ff ff4e 	bl	80028d0 <SPI_WaitFlagStateUntilTimeout>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d016      	beq.n	8002a66 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e00f      	b.n	8002a68 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2280      	movs	r2, #128	@ 0x80
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b80      	cmp	r3, #128	@ 0x80
 8002a60:	d0f2      	beq.n	8002a48 <SPI_EndRxTxTransaction+0x5c>
 8002a62:	e000      	b.n	8002a66 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002a64:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b006      	add	sp, #24
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000000 	.word	0x20000000
 8002a74:	016e3600 	.word	0x016e3600

08002a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e044      	b.n	8002b14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2278      	movs	r2, #120	@ 0x78
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fe f803 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2224      	movs	r2, #36	@ 0x24
 8002aa6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f8d0 	bl	8002c60 <UART_SetConfig>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e024      	b.n	8002b14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fb61 	bl	800319c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	490d      	ldr	r1, [pc, #52]	@ (8002b1c <HAL_UART_Init+0xa4>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	212a      	movs	r1, #42	@ 0x2a
 8002af6:	438a      	bics	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fbf9 	bl	8003304 <UART_CheckIdleState>
 8002b12:	0003      	movs	r3, r0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	ffffb7ff 	.word	0xffffb7ff

08002b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	1dbb      	adds	r3, r7, #6
 8002b2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d000      	beq.n	8002b3a <HAL_UART_Transmit+0x1a>
 8002b38:	e08c      	b.n	8002c54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_UART_Transmit+0x28>
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e084      	b.n	8002c56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	015b      	lsls	r3, r3, #5
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d109      	bne.n	8002b6c <HAL_UART_Transmit+0x4c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2201      	movs	r2, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e074      	b.n	8002c56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2284      	movs	r2, #132	@ 0x84
 8002b70:	2100      	movs	r1, #0
 8002b72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2221      	movs	r2, #33	@ 0x21
 8002b78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe f8bf 	bl	8000cfc <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1dba      	adds	r2, r7, #6
 8002b86:	2150      	movs	r1, #80	@ 0x50
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1dba      	adds	r2, r7, #6
 8002b90:	2152      	movs	r1, #82	@ 0x52
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <HAL_UART_Transmit+0x94>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e003      	b.n	8002bbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bbc:	e02f      	b.n	8002c1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	f000 fc42 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e03b      	b.n	8002c56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	001a      	movs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	05d2      	lsls	r2, r2, #23
 8002bf0:	0dd2      	lsrs	r2, r2, #23
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e007      	b.n	8002c0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2252      	movs	r2, #82	@ 0x52
 8002c10:	5a9b      	ldrh	r3, [r3, r2]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b299      	uxth	r1, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2252      	movs	r2, #82	@ 0x52
 8002c1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2252      	movs	r2, #82	@ 0x52
 8002c22:	5a9b      	ldrh	r3, [r3, r2]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1c9      	bne.n	8002bbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	0013      	movs	r3, r2
 8002c34:	2200      	movs	r2, #0
 8002c36:	2140      	movs	r1, #64	@ 0x40
 8002c38:	f000 fc0c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e005      	b.n	8002c56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b008      	add	sp, #32
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b08e      	sub	sp, #56	@ 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c68:	231a      	movs	r3, #26
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	189b      	adds	r3, r3, r2
 8002c6e:	19db      	adds	r3, r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4ac3      	ldr	r2, [pc, #780]	@ (8002fa0 <UART_SetConfig+0x340>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4abe      	ldr	r2, [pc, #760]	@ (8002fa4 <UART_SetConfig+0x344>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4ab8      	ldr	r2, [pc, #736]	@ (8002fa8 <UART_SetConfig+0x348>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4ab4      	ldr	r2, [pc, #720]	@ (8002fac <UART_SetConfig+0x34c>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4ab0      	ldr	r2, [pc, #704]	@ (8002fb0 <UART_SetConfig+0x350>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d131      	bne.n	8002d58 <UART_SetConfig+0xf8>
 8002cf4:	4baf      	ldr	r3, [pc, #700]	@ (8002fb4 <UART_SetConfig+0x354>)
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d01d      	beq.n	8002d3c <UART_SetConfig+0xdc>
 8002d00:	d823      	bhi.n	8002d4a <UART_SetConfig+0xea>
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d00c      	beq.n	8002d20 <UART_SetConfig+0xc0>
 8002d06:	d820      	bhi.n	8002d4a <UART_SetConfig+0xea>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <UART_SetConfig+0xb2>
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d00e      	beq.n	8002d2e <UART_SetConfig+0xce>
 8002d10:	e01b      	b.n	8002d4a <UART_SetConfig+0xea>
 8002d12:	231b      	movs	r3, #27
 8002d14:	2218      	movs	r2, #24
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	19db      	adds	r3, r3, r7
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e0b4      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d20:	231b      	movs	r3, #27
 8002d22:	2218      	movs	r2, #24
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e0ad      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d2e:	231b      	movs	r3, #27
 8002d30:	2218      	movs	r2, #24
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	19db      	adds	r3, r3, r7
 8002d36:	2204      	movs	r2, #4
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e0a6      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d3c:	231b      	movs	r3, #27
 8002d3e:	2218      	movs	r2, #24
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	19db      	adds	r3, r3, r7
 8002d44:	2208      	movs	r2, #8
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e09f      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d4a:	231b      	movs	r3, #27
 8002d4c:	2218      	movs	r2, #24
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	19db      	adds	r3, r3, r7
 8002d52:	2210      	movs	r2, #16
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e098      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a96      	ldr	r2, [pc, #600]	@ (8002fb8 <UART_SetConfig+0x358>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d131      	bne.n	8002dc6 <UART_SetConfig+0x166>
 8002d62:	4b94      	ldr	r3, [pc, #592]	@ (8002fb4 <UART_SetConfig+0x354>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	220c      	movs	r2, #12
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d01d      	beq.n	8002daa <UART_SetConfig+0x14a>
 8002d6e:	d823      	bhi.n	8002db8 <UART_SetConfig+0x158>
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d00c      	beq.n	8002d8e <UART_SetConfig+0x12e>
 8002d74:	d820      	bhi.n	8002db8 <UART_SetConfig+0x158>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <UART_SetConfig+0x120>
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00e      	beq.n	8002d9c <UART_SetConfig+0x13c>
 8002d7e:	e01b      	b.n	8002db8 <UART_SetConfig+0x158>
 8002d80:	231b      	movs	r3, #27
 8002d82:	2218      	movs	r2, #24
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e07d      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d8e:	231b      	movs	r3, #27
 8002d90:	2218      	movs	r2, #24
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	19db      	adds	r3, r3, r7
 8002d96:	2202      	movs	r2, #2
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e076      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002d9c:	231b      	movs	r3, #27
 8002d9e:	2218      	movs	r2, #24
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	19db      	adds	r3, r3, r7
 8002da4:	2204      	movs	r2, #4
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e06f      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002daa:	231b      	movs	r3, #27
 8002dac:	2218      	movs	r2, #24
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	19db      	adds	r3, r3, r7
 8002db2:	2208      	movs	r2, #8
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e068      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002db8:	231b      	movs	r3, #27
 8002dba:	2218      	movs	r2, #24
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e061      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7c      	ldr	r2, [pc, #496]	@ (8002fbc <UART_SetConfig+0x35c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d106      	bne.n	8002dde <UART_SetConfig+0x17e>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	19db      	adds	r3, r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e055      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a77      	ldr	r2, [pc, #476]	@ (8002fc0 <UART_SetConfig+0x360>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d106      	bne.n	8002df6 <UART_SetConfig+0x196>
 8002de8:	231b      	movs	r3, #27
 8002dea:	2218      	movs	r2, #24
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	19db      	adds	r3, r3, r7
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e049      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa8 <UART_SetConfig+0x348>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d13e      	bne.n	8002e7e <UART_SetConfig+0x21e>
 8002e00:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb4 <UART_SetConfig+0x354>)
 8002e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e04:	23c0      	movs	r3, #192	@ 0xc0
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	22c0      	movs	r2, #192	@ 0xc0
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d027      	beq.n	8002e62 <UART_SetConfig+0x202>
 8002e12:	22c0      	movs	r2, #192	@ 0xc0
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d82a      	bhi.n	8002e70 <UART_SetConfig+0x210>
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d011      	beq.n	8002e46 <UART_SetConfig+0x1e6>
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d822      	bhi.n	8002e70 <UART_SetConfig+0x210>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <UART_SetConfig+0x1d8>
 8002e2e:	2280      	movs	r2, #128	@ 0x80
 8002e30:	00d2      	lsls	r2, r2, #3
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <UART_SetConfig+0x1f4>
 8002e36:	e01b      	b.n	8002e70 <UART_SetConfig+0x210>
 8002e38:	231b      	movs	r3, #27
 8002e3a:	2218      	movs	r2, #24
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	19db      	adds	r3, r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e021      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002e46:	231b      	movs	r3, #27
 8002e48:	2218      	movs	r2, #24
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	19db      	adds	r3, r3, r7
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e01a      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002e54:	231b      	movs	r3, #27
 8002e56:	2218      	movs	r2, #24
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	19db      	adds	r3, r3, r7
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e013      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002e62:	231b      	movs	r3, #27
 8002e64:	2218      	movs	r2, #24
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	19db      	adds	r3, r3, r7
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e00c      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002e70:	231b      	movs	r3, #27
 8002e72:	2218      	movs	r2, #24
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	19db      	adds	r3, r3, r7
 8002e78:	2210      	movs	r2, #16
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e005      	b.n	8002e8a <UART_SetConfig+0x22a>
 8002e7e:	231b      	movs	r3, #27
 8002e80:	2218      	movs	r2, #24
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	19db      	adds	r3, r3, r7
 8002e86:	2210      	movs	r2, #16
 8002e88:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a46      	ldr	r2, [pc, #280]	@ (8002fa8 <UART_SetConfig+0x348>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d000      	beq.n	8002e96 <UART_SetConfig+0x236>
 8002e94:	e09a      	b.n	8002fcc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e96:	231b      	movs	r3, #27
 8002e98:	2218      	movs	r2, #24
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	19db      	adds	r3, r3, r7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d01d      	beq.n	8002ee0 <UART_SetConfig+0x280>
 8002ea4:	dc20      	bgt.n	8002ee8 <UART_SetConfig+0x288>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d015      	beq.n	8002ed6 <UART_SetConfig+0x276>
 8002eaa:	dc1d      	bgt.n	8002ee8 <UART_SetConfig+0x288>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <UART_SetConfig+0x256>
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d005      	beq.n	8002ec0 <UART_SetConfig+0x260>
 8002eb4:	e018      	b.n	8002ee8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb6:	f7fe ff85 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ebe:	e01c      	b.n	8002efa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb4 <UART_SetConfig+0x354>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d002      	beq.n	8002ed0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <UART_SetConfig+0x364>)
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ece:	e014      	b.n	8002efa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <UART_SetConfig+0x368>)
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ed4:	e011      	b.n	8002efa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed6:	f7fe fec5 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002eda:	0003      	movs	r3, r0
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ede:	e00c      	b.n	8002efa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ee6:	e008      	b.n	8002efa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002eec:	231a      	movs	r3, #26
 8002eee:	2218      	movs	r2, #24
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
        break;
 8002ef8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d100      	bne.n	8002f02 <UART_SetConfig+0x2a2>
 8002f00:	e133      	b.n	800316a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	0013      	movs	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d305      	bcc.n	8002f1e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d906      	bls.n	8002f2c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002f1e:	231a      	movs	r3, #26
 8002f20:	2218      	movs	r2, #24
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	19db      	adds	r3, r3, r7
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e11e      	b.n	800316a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	6939      	ldr	r1, [r7, #16]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	000b      	movs	r3, r1
 8002f3a:	0e1b      	lsrs	r3, r3, #24
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	0205      	lsls	r5, r0, #8
 8002f40:	431d      	orrs	r5, r3
 8002f42:	000b      	movs	r3, r1
 8002f44:	021c      	lsls	r4, r3, #8
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68b8      	ldr	r0, [r7, #8]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	1900      	adds	r0, r0, r4
 8002f58:	4169      	adcs	r1, r5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f7fd f96c 	bl	8000244 <__aeabi_uldivmod>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	000b      	movs	r3, r1
 8002f70:	0013      	movs	r3, r2
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f76:	23c0      	movs	r3, #192	@ 0xc0
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d309      	bcc.n	8002f92 <UART_SetConfig+0x332>
 8002f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	035b      	lsls	r3, r3, #13
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d204      	bcs.n	8002f92 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e0eb      	b.n	800316a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002f92:	231a      	movs	r3, #26
 8002f94:	2218      	movs	r2, #24
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e0e4      	b.n	800316a <UART_SetConfig+0x50a>
 8002fa0:	efff69f3 	.word	0xefff69f3
 8002fa4:	ffffcfff 	.word	0xffffcfff
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	fffff4ff 	.word	0xfffff4ff
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	40004c00 	.word	0x40004c00
 8002fc0:	40005000 	.word	0x40005000
 8002fc4:	003d0900 	.word	0x003d0900
 8002fc8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d000      	beq.n	8002fda <UART_SetConfig+0x37a>
 8002fd8:	e070      	b.n	80030bc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002fda:	231b      	movs	r3, #27
 8002fdc:	2218      	movs	r2, #24
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	19db      	adds	r3, r3, r7
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d822      	bhi.n	800302e <UART_SetConfig+0x3ce>
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	4b67      	ldr	r3, [pc, #412]	@ (8003188 <UART_SetConfig+0x528>)
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff2:	f7fe fee7 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ffa:	e021      	b.n	8003040 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ffc:	f7fe fef8 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8003000:	0003      	movs	r3, r0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003004:	e01c      	b.n	8003040 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003006:	4b61      	ldr	r3, [pc, #388]	@ (800318c <UART_SetConfig+0x52c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2210      	movs	r2, #16
 800300c:	4013      	ands	r3, r2
 800300e:	d002      	beq.n	8003016 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003010:	4b5f      	ldr	r3, [pc, #380]	@ (8003190 <UART_SetConfig+0x530>)
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003014:	e014      	b.n	8003040 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003016:	4b5f      	ldr	r3, [pc, #380]	@ (8003194 <UART_SetConfig+0x534>)
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800301a:	e011      	b.n	8003040 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301c:	f7fe fe22 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8003020:	0003      	movs	r3, r0
 8003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003024:	e00c      	b.n	8003040 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800302c:	e008      	b.n	8003040 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003032:	231a      	movs	r3, #26
 8003034:	2218      	movs	r2, #24
 8003036:	189b      	adds	r3, r3, r2
 8003038:	19db      	adds	r3, r3, r7
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
        break;
 800303e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d100      	bne.n	8003048 <UART_SetConfig+0x3e8>
 8003046:	e090      	b.n	800316a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	005a      	lsls	r2, r3, #1
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	18d2      	adds	r2, r2, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0019      	movs	r1, r3
 800305a:	0010      	movs	r0, r2
 800305c:	f7fd f866 	bl	800012c <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	2b0f      	cmp	r3, #15
 8003068:	d921      	bls.n	80030ae <UART_SetConfig+0x44e>
 800306a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	429a      	cmp	r2, r3
 8003072:	d21c      	bcs.n	80030ae <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	b29a      	uxth	r2, r3
 8003078:	200e      	movs	r0, #14
 800307a:	2418      	movs	r4, #24
 800307c:	1903      	adds	r3, r0, r4
 800307e:	19db      	adds	r3, r3, r7
 8003080:	210f      	movs	r1, #15
 8003082:	438a      	bics	r2, r1
 8003084:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	b29b      	uxth	r3, r3
 800308c:	2207      	movs	r2, #7
 800308e:	4013      	ands	r3, r2
 8003090:	b299      	uxth	r1, r3
 8003092:	1903      	adds	r3, r0, r4
 8003094:	19db      	adds	r3, r3, r7
 8003096:	1902      	adds	r2, r0, r4
 8003098:	19d2      	adds	r2, r2, r7
 800309a:	8812      	ldrh	r2, [r2, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1902      	adds	r2, r0, r4
 80030a6:	19d2      	adds	r2, r2, r7
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	e05d      	b.n	800316a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80030ae:	231a      	movs	r3, #26
 80030b0:	2218      	movs	r2, #24
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e056      	b.n	800316a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030bc:	231b      	movs	r3, #27
 80030be:	2218      	movs	r2, #24
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d822      	bhi.n	8003110 <UART_SetConfig+0x4b0>
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	4b32      	ldr	r3, [pc, #200]	@ (8003198 <UART_SetConfig+0x538>)
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7fe fe76 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80030d8:	0003      	movs	r3, r0
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030dc:	e021      	b.n	8003122 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030de:	f7fe fe87 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 80030e2:	0003      	movs	r3, r0
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030e6:	e01c      	b.n	8003122 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e8:	4b28      	ldr	r3, [pc, #160]	@ (800318c <UART_SetConfig+0x52c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d002      	beq.n	80030f8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <UART_SetConfig+0x530>)
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030f6:	e014      	b.n	8003122 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <UART_SetConfig+0x534>)
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030fc:	e011      	b.n	8003122 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fe:	f7fe fdb1 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8003102:	0003      	movs	r3, r0
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003106:	e00c      	b.n	8003122 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800310e:	e008      	b.n	8003122 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003114:	231a      	movs	r3, #26
 8003116:	2218      	movs	r2, #24
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19db      	adds	r3, r3, r7
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
        break;
 8003120:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085a      	lsrs	r2, r3, #1
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	18d2      	adds	r2, r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f7fc fff7 	bl	800012c <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d90a      	bls.n	800315e <UART_SetConfig+0x4fe>
 8003148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	429a      	cmp	r2, r3
 8003150:	d205      	bcs.n	800315e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	b29a      	uxth	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e005      	b.n	800316a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800315e:	231a      	movs	r3, #26
 8003160:	2218      	movs	r2, #24
 8003162:	189b      	adds	r3, r3, r2
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2200      	movs	r2, #0
 800316e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2200      	movs	r2, #0
 8003174:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003176:	231a      	movs	r3, #26
 8003178:	2218      	movs	r2, #24
 800317a:	189b      	adds	r3, r3, r2
 800317c:	19db      	adds	r3, r3, r7
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b00e      	add	sp, #56	@ 0x38
 8003186:	bdb0      	pop	{r4, r5, r7, pc}
 8003188:	08007828 	.word	0x08007828
 800318c:	40021000 	.word	0x40021000
 8003190:	003d0900 	.word	0x003d0900
 8003194:	00f42400 	.word	0x00f42400
 8003198:	0800784c 	.word	0x0800784c

0800319c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	@ (80032e0 <UART_AdvFeatureConfig+0x144>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	2202      	movs	r2, #2
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a43      	ldr	r2, [pc, #268]	@ (80032e4 <UART_AdvFeatureConfig+0x148>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	2204      	movs	r2, #4
 80031ee:	4013      	ands	r3, r2
 80031f0:	d00b      	beq.n	800320a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a3b      	ldr	r2, [pc, #236]	@ (80032e8 <UART_AdvFeatureConfig+0x14c>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	2208      	movs	r2, #8
 8003210:	4013      	ands	r3, r2
 8003212:	d00b      	beq.n	800322c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a34      	ldr	r2, [pc, #208]	@ (80032ec <UART_AdvFeatureConfig+0x150>)
 800321c:	4013      	ands	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	2210      	movs	r2, #16
 8003232:	4013      	ands	r3, r2
 8003234:	d00b      	beq.n	800324e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a2c      	ldr	r2, [pc, #176]	@ (80032f0 <UART_AdvFeatureConfig+0x154>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	2220      	movs	r2, #32
 8003254:	4013      	ands	r3, r2
 8003256:	d00b      	beq.n	8003270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	4a25      	ldr	r2, [pc, #148]	@ (80032f4 <UART_AdvFeatureConfig+0x158>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	4013      	ands	r3, r2
 8003278:	d01d      	beq.n	80032b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <UART_AdvFeatureConfig+0x15c>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	035b      	lsls	r3, r3, #13
 800329a:	429a      	cmp	r2, r3
 800329c:	d10b      	bne.n	80032b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <UART_AdvFeatureConfig+0x160>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	2280      	movs	r2, #128	@ 0x80
 80032bc:	4013      	ands	r3, r2
 80032be:	d00b      	beq.n	80032d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003300 <UART_AdvFeatureConfig+0x164>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fffdffff 	.word	0xfffdffff
 80032e4:	fffeffff 	.word	0xfffeffff
 80032e8:	fffbffff 	.word	0xfffbffff
 80032ec:	ffff7fff 	.word	0xffff7fff
 80032f0:	ffffefff 	.word	0xffffefff
 80032f4:	ffffdfff 	.word	0xffffdfff
 80032f8:	ffefffff 	.word	0xffefffff
 80032fc:	ff9fffff 	.word	0xff9fffff
 8003300:	fff7ffff 	.word	0xfff7ffff

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b092      	sub	sp, #72	@ 0x48
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2284      	movs	r2, #132	@ 0x84
 8003310:	2100      	movs	r1, #0
 8003312:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd fcf2 	bl	8000cfc <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	4013      	ands	r3, r2
 8003326:	2b08      	cmp	r3, #8
 8003328:	d12c      	bne.n	8003384 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	0391      	lsls	r1, r2, #14
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4a46      	ldr	r2, [pc, #280]	@ (800344c <UART_CheckIdleState+0x148>)
 8003334:	9200      	str	r2, [sp, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	f000 f88c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d021      	beq.n	8003384 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003340:	f3ef 8310 	mrs	r3, PRIMASK
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800334a:	2301      	movs	r3, #1
 800334c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	438a      	bics	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2278      	movs	r2, #120	@ 0x78
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e05f      	b.n	8003444 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2204      	movs	r2, #4
 800338c:	4013      	ands	r3, r2
 800338e:	2b04      	cmp	r3, #4
 8003390:	d146      	bne.n	8003420 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003394:	2280      	movs	r2, #128	@ 0x80
 8003396:	03d1      	lsls	r1, r2, #15
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4a2c      	ldr	r2, [pc, #176]	@ (800344c <UART_CheckIdleState+0x148>)
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	f000 f858 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d03b      	beq.n	8003420 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b2:	2301      	movs	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4921      	ldr	r1, [pc, #132]	@ (8003450 <UART_CheckIdleState+0x14c>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033da:	f3ef 8310 	mrs	r3, PRIMASK
 80033de:	61bb      	str	r3, [r7, #24]
  return(result);
 80033e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e4:	2301      	movs	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	2120      	movs	r1, #32
 8003412:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2278      	movs	r2, #120	@ 0x78
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e011      	b.n	8003444 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	2120      	movs	r1, #32
 800342c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2278      	movs	r2, #120	@ 0x78
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b010      	add	sp, #64	@ 0x40
 800344a:	bd80      	pop	{r7, pc}
 800344c:	01ffffff 	.word	0x01ffffff
 8003450:	fffffedf 	.word	0xfffffedf

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e04b      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	3301      	adds	r3, #1
 800346a:	d048      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fd fc46 	bl	8000cfc <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <UART_WaitOnFlagUntilTimeout+0x2e>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04b      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2204      	movs	r2, #4
 800348e:	4013      	ands	r3, r2
 8003490:	d035      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2208      	movs	r2, #8
 800349a:	4013      	ands	r3, r2
 800349c:	2b08      	cmp	r3, #8
 800349e:	d111      	bne.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f83c 	bl	8003528 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2284      	movs	r2, #132	@ 0x84
 80034b4:	2108      	movs	r1, #8
 80034b6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2278      	movs	r2, #120	@ 0x78
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e02c      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	401a      	ands	r2, r3
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d112      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2280      	movs	r2, #128	@ 0x80
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 f81f 	bl	8003528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2284      	movs	r2, #132	@ 0x84
 80034ee:	2120      	movs	r1, #32
 80034f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2278      	movs	r2, #120	@ 0x78
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	425a      	negs	r2, r3
 800350e:	4153      	adcs	r3, r2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	001a      	movs	r2, r3
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0a4      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	@ 0x38
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003530:	f3ef 8310 	mrs	r3, PRIMASK
 8003534:	617b      	str	r3, [r7, #20]
  return(result);
 8003536:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4926      	ldr	r1, [pc, #152]	@ (80035ec <UART_EndRxTransfer+0xc4>)
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003562:	f3ef 8310 	mrs	r3, PRIMASK
 8003566:	623b      	str	r3, [r7, #32]
  return(result);
 8003568:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	633b      	str	r3, [r7, #48]	@ 0x30
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2101      	movs	r1, #1
 8003584:	438a      	bics	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003598:	2b01      	cmp	r3, #1
 800359a:	d118      	bne.n	80035ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359c:	f3ef 8310 	mrs	r3, PRIMASK
 80035a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a6:	2301      	movs	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2110      	movs	r1, #16
 80035be:	438a      	bics	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2280      	movs	r2, #128	@ 0x80
 80035d2:	2120      	movs	r1, #32
 80035d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b00e      	add	sp, #56	@ 0x38
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	fffffedf 	.word	0xfffffedf

080035f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035f4:	4a06      	ldr	r2, [pc, #24]	@ (8003610 <MX_FATFS_Init+0x20>)
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <MX_FATFS_Init+0x24>)
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f003 fb32 	bl	8006c64 <FATFS_LinkDriver>
 8003600:	0003      	movs	r3, r0
 8003602:	001a      	movs	r2, r3
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <MX_FATFS_Init+0x28>)
 8003606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	2000027c 	.word	0x2000027c
 8003614:	2000000c 	.word	0x2000000c
 8003618:	20000278 	.word	0x20000278

0800361c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003620:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f000 fa1d 	bl	8003a78 <USER_SPI_initialize>
 800363e:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END INIT */
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}

08003648 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	0002      	movs	r2, r0
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003654:	1dfb      	adds	r3, r7, #7
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fb25 	bl	8003ca8 <USER_SPI_status>
 800365e:	0003      	movs	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END STATUS */
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	250f      	movs	r5, #15
 8003676:	197b      	adds	r3, r7, r5
 8003678:	1c02      	adds	r2, r0, #0
 800367a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800367c:	683c      	ldr	r4, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	197b      	adds	r3, r7, r5
 8003684:	7818      	ldrb	r0, [r3, #0]
 8003686:	0023      	movs	r3, r4
 8003688:	f000 fb24 	bl	8003cd4 <USER_SPI_read>
 800368c:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b004      	add	sp, #16
 8003694:	bdb0      	pop	{r4, r5, r7, pc}

08003696 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003696:	b5b0      	push	{r4, r5, r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	250f      	movs	r5, #15
 80036a4:	197b      	adds	r3, r7, r5
 80036a6:	1c02      	adds	r2, r0, #0
 80036a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80036aa:	683c      	ldr	r4, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	197b      	adds	r3, r7, r5
 80036b2:	7818      	ldrb	r0, [r3, #0]
 80036b4:	0023      	movs	r3, r4
 80036b6:	f000 fb79 	bl	8003dac <USER_SPI_write>
 80036ba:	0003      	movs	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}

080036c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	603a      	str	r2, [r7, #0]
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	1c0a      	adds	r2, r1, #0
 80036d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	1dbb      	adds	r3, r7, #6
 80036dc:	7819      	ldrb	r1, [r3, #0]
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 fbe2 	bl	8003eac <USER_SPI_ioctl>
 80036e8:	0003      	movs	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80036fc:	f7fd fafe 	bl	8000cfc <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <SPI_Timer_On+0x20>)
 8003704:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8003706:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <SPI_Timer_On+0x24>)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	46c0      	nop			@ (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000284 	.word	0x20000284
 8003718:	20000288 	.word	0x20000288

0800371c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003720:	f7fd faec 	bl	8000cfc <HAL_GetTick>
 8003724:	0002      	movs	r2, r0
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <SPI_Timer_Status+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1ad2      	subs	r2, r2, r3
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <SPI_Timer_Status+0x28>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	419b      	sbcs	r3, r3
 8003734:	425b      	negs	r3, r3
 8003736:	b2db      	uxtb	r3, r3
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	20000284 	.word	0x20000284
 8003744:	20000288 	.word	0x20000288

08003748 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af02      	add	r7, sp, #8
 800374e:	0002      	movs	r2, r0
 8003750:	1dfb      	adds	r3, r7, #7
 8003752:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003754:	240f      	movs	r4, #15
 8003756:	193a      	adds	r2, r7, r4
 8003758:	1df9      	adds	r1, r7, #7
 800375a:	4806      	ldr	r0, [pc, #24]	@ (8003774 <xchg_spi+0x2c>)
 800375c:	2332      	movs	r3, #50	@ 0x32
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2301      	movs	r3, #1
 8003762:	f7fe feea 	bl	800253a <HAL_SPI_TransmitReceive>
    return rxDat;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	781b      	ldrb	r3, [r3, #0]
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b005      	add	sp, #20
 8003770:	bd90      	pop	{r4, r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	20000090 	.word	0x20000090

08003778 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e00a      	b.n	800379e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	18d4      	adds	r4, r2, r3
 800378e:	20ff      	movs	r0, #255	@ 0xff
 8003790:	f7ff ffda 	bl	8003748 <xchg_spi>
 8003794:	0003      	movs	r3, r0
 8003796:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3301      	adds	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3f0      	bcc.n	8003788 <rcvr_spi_multi+0x10>
	}
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b005      	add	sp, #20
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	2301      	movs	r3, #1
 80037c0:	425b      	negs	r3, r3
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4803      	ldr	r0, [pc, #12]	@ (80037d4 <xmit_spi_multi+0x24>)
 80037c6:	f7fe fd5b 	bl	8002280 <HAL_SPI_Transmit>
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	20000090 	.word	0x20000090

080037d8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80037e0:	f7fd fa8c 	bl	8000cfc <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80037ec:	250f      	movs	r5, #15
 80037ee:	197c      	adds	r4, r7, r5
 80037f0:	20ff      	movs	r0, #255	@ 0xff
 80037f2:	f7ff ffa9 	bl	8003748 <xchg_spi>
 80037f6:	0003      	movs	r3, r0
 80037f8:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80037fa:	197b      	adds	r3, r7, r5
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2bff      	cmp	r3, #255	@ 0xff
 8003800:	d007      	beq.n	8003812 <wait_ready+0x3a>
 8003802:	f7fd fa7b 	bl	8000cfc <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d8ec      	bhi.n	80037ec <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3bff      	subs	r3, #255	@ 0xff
 800381a:	425a      	negs	r2, r3
 800381c:	4153      	adcs	r3, r2
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bdb0      	pop	{r4, r5, r7, pc}

08003828 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800382c:	2380      	movs	r3, #128	@ 0x80
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	4805      	ldr	r0, [pc, #20]	@ (8003848 <despiselect+0x20>)
 8003832:	2201      	movs	r2, #1
 8003834:	0019      	movs	r1, r3
 8003836:	f7fd fcc1 	bl	80011bc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800383a:	20ff      	movs	r0, #255	@ 0xff
 800383c:	f7ff ff84 	bl	8003748 <xchg_spi>

}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	50000400 	.word	0x50000400

0800384c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	015b      	lsls	r3, r3, #5
 8003854:	480b      	ldr	r0, [pc, #44]	@ (8003884 <spiselect+0x38>)
 8003856:	2200      	movs	r2, #0
 8003858:	0019      	movs	r1, r3
 800385a:	f7fd fcaf 	bl	80011bc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800385e:	20ff      	movs	r0, #255	@ 0xff
 8003860:	f7ff ff72 	bl	8003748 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003864:	23fa      	movs	r3, #250	@ 0xfa
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ffb5 	bl	80037d8 <wait_ready>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <spiselect+0x2a>
 8003872:	2301      	movs	r3, #1
 8003874:	e002      	b.n	800387c <spiselect+0x30>

	despiselect();
 8003876:	f7ff ffd7 	bl	8003828 <despiselect>
	return 0;	/* Timeout */
 800387a:	2300      	movs	r3, #0
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	50000400 	.word	0x50000400

08003888 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003892:	20c8      	movs	r0, #200	@ 0xc8
 8003894:	f7ff ff2e 	bl	80036f4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003898:	250f      	movs	r5, #15
 800389a:	197c      	adds	r4, r7, r5
 800389c:	20ff      	movs	r0, #255	@ 0xff
 800389e:	f7ff ff53 	bl	8003748 <xchg_spi>
 80038a2:	0003      	movs	r3, r0
 80038a4:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80038a6:	197b      	adds	r3, r7, r5
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2bff      	cmp	r3, #255	@ 0xff
 80038ac:	d103      	bne.n	80038b6 <rcvr_datablock+0x2e>
 80038ae:	f7ff ff35 	bl	800371c <SPI_Timer_Status>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d1f0      	bne.n	8003898 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80038b6:	230f      	movs	r3, #15
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80038be:	d001      	beq.n	80038c4 <rcvr_datablock+0x3c>
 80038c0:	2300      	movs	r3, #0
 80038c2:	e00c      	b.n	80038de <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0011      	movs	r1, r2
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff ff54 	bl	8003778 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80038d0:	20ff      	movs	r0, #255	@ 0xff
 80038d2:	f7ff ff39 	bl	8003748 <xchg_spi>
 80038d6:	20ff      	movs	r0, #255	@ 0xff
 80038d8:	f7ff ff36 	bl	8003748 <xchg_spi>

	return 1;						/* Function succeeded */
 80038dc:	2301      	movs	r3, #1
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bdb0      	pop	{r4, r5, r7, pc}

080038e6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80038e6:	b5b0      	push	{r4, r5, r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	000a      	movs	r2, r1
 80038f0:	1cfb      	adds	r3, r7, #3
 80038f2:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80038f4:	23fa      	movs	r3, #250	@ 0xfa
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7ff ff6d 	bl	80037d8 <wait_ready>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d101      	bne.n	8003906 <xmit_datablock+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	e025      	b.n	8003952 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8003906:	1cfb      	adds	r3, r7, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff ff1c 	bl	8003748 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003910:	1cfb      	adds	r3, r7, #3
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2bfd      	cmp	r3, #253	@ 0xfd
 8003916:	d01b      	beq.n	8003950 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff ff45 	bl	80037b0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003926:	20ff      	movs	r0, #255	@ 0xff
 8003928:	f7ff ff0e 	bl	8003748 <xchg_spi>
 800392c:	20ff      	movs	r0, #255	@ 0xff
 800392e:	f7ff ff0b 	bl	8003748 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003932:	250f      	movs	r5, #15
 8003934:	197c      	adds	r4, r7, r5
 8003936:	20ff      	movs	r0, #255	@ 0xff
 8003938:	f7ff ff06 	bl	8003748 <xchg_spi>
 800393c:	0003      	movs	r3, r0
 800393e:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003940:	197b      	adds	r3, r7, r5
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	221f      	movs	r2, #31
 8003946:	4013      	ands	r3, r2
 8003948:	2b05      	cmp	r3, #5
 800394a:	d001      	beq.n	8003950 <xmit_datablock+0x6a>
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <xmit_datablock+0x6c>
	}
	return 1;
 8003950:	2301      	movs	r3, #1
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bdb0      	pop	{r4, r5, r7, pc}

0800395a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800395a:	b5b0      	push	{r4, r5, r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	0002      	movs	r2, r0
 8003962:	6039      	str	r1, [r7, #0]
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b25b      	sxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	da15      	bge.n	800399e <send_cmd+0x44>
		cmd &= 0x7F;
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	1dfa      	adds	r2, r7, #7
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	217f      	movs	r1, #127	@ 0x7f
 800397a:	400a      	ands	r2, r1
 800397c:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 800397e:	250e      	movs	r5, #14
 8003980:	197c      	adds	r4, r7, r5
 8003982:	2100      	movs	r1, #0
 8003984:	2037      	movs	r0, #55	@ 0x37
 8003986:	f7ff ffe8 	bl	800395a <send_cmd>
 800398a:	0003      	movs	r3, r0
 800398c:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 800398e:	002a      	movs	r2, r5
 8003990:	18bb      	adds	r3, r7, r2
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d902      	bls.n	800399e <send_cmd+0x44>
 8003998:	18bb      	adds	r3, r7, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	e067      	b.n	8003a6e <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d007      	beq.n	80039b6 <send_cmd+0x5c>
		despiselect();
 80039a6:	f7ff ff3f 	bl	8003828 <despiselect>
		if (!spiselect()) return 0xFF;
 80039aa:	f7ff ff4f 	bl	800384c <spiselect>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d101      	bne.n	80039b6 <send_cmd+0x5c>
 80039b2:	23ff      	movs	r3, #255	@ 0xff
 80039b4:	e05b      	b.n	8003a6e <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	4313      	orrs	r3, r2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fec1 	bl	8003748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	0e1b      	lsrs	r3, r3, #24
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff febb 	bl	8003748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff feb5 	bl	8003748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	0018      	movs	r0, r3
 80039e6:	f7ff feaf 	bl	8003748 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff feaa 	bl	8003748 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80039f4:	210f      	movs	r1, #15
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <send_cmd+0xb0>
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2295      	movs	r2, #149	@ 0x95
 8003a08:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d103      	bne.n	8003a1a <send_cmd+0xc0>
 8003a12:	230f      	movs	r3, #15
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	2287      	movs	r2, #135	@ 0x87
 8003a18:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8003a1a:	230f      	movs	r3, #15
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7ff fe91 	bl	8003748 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d102      	bne.n	8003a34 <send_cmd+0xda>
 8003a2e:	20ff      	movs	r0, #255	@ 0xff
 8003a30:	f7ff fe8a 	bl	8003748 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003a34:	230f      	movs	r3, #15
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	220a      	movs	r2, #10
 8003a3a:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8003a3c:	250e      	movs	r5, #14
 8003a3e:	197c      	adds	r4, r7, r5
 8003a40:	20ff      	movs	r0, #255	@ 0xff
 8003a42:	f7ff fe81 	bl	8003748 <xchg_spi>
 8003a46:	0003      	movs	r3, r0
 8003a48:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da09      	bge.n	8003a68 <send_cmd+0x10e>
 8003a54:	210f      	movs	r1, #15
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	187a      	adds	r2, r7, r1
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e9      	bne.n	8003a3c <send_cmd+0xe2>

	return res;							/* Return received response */
 8003a68:	230e      	movs	r3, #14
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a78 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	0002      	movs	r2, r0
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <USER_SPI_initialize+0x18>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e100      	b.n	8003c92 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003a90:	4b82      	ldr	r3, [pc, #520]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	001a      	movs	r2, r3
 8003a98:	2302      	movs	r3, #2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <USER_SPI_initialize+0x2e>
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e0f5      	b.n	8003c92 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8003aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ca0 <USER_SPI_initialize+0x228>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2238      	movs	r2, #56	@ 0x38
 8003aae:	4393      	bics	r3, r2
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca0 <USER_SPI_initialize+0x228>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2130      	movs	r1, #48	@ 0x30
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003abc:	230f      	movs	r3, #15
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	220a      	movs	r2, #10
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e008      	b.n	8003ad8 <USER_SPI_initialize+0x60>
 8003ac6:	20ff      	movs	r0, #255	@ 0xff
 8003ac8:	f7ff fe3e 	bl	8003748 <xchg_spi>
 8003acc:	210f      	movs	r1, #15
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	240f      	movs	r4, #15
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f1      	bne.n	8003ac6 <USER_SPI_initialize+0x4e>

	ty = 0;
 8003ae2:	230d      	movs	r3, #13
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003aea:	2100      	movs	r1, #0
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7ff ff34 	bl	800395a <send_cmd>
 8003af2:	0003      	movs	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d000      	beq.n	8003afa <USER_SPI_initialize+0x82>
 8003af8:	e0a6      	b.n	8003c48 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003afa:	23fa      	movs	r3, #250	@ 0xfa
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff fdf8 	bl	80036f4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003b04:	23d5      	movs	r3, #213	@ 0xd5
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	0019      	movs	r1, r3
 8003b0a:	2008      	movs	r0, #8
 8003b0c:	f7ff ff25 	bl	800395a <send_cmd>
 8003b10:	0003      	movs	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d162      	bne.n	8003bdc <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e00f      	b.n	8003b3e <USER_SPI_initialize+0xc6>
 8003b1e:	250f      	movs	r5, #15
 8003b20:	197b      	adds	r3, r7, r5
 8003b22:	781c      	ldrb	r4, [r3, #0]
 8003b24:	20ff      	movs	r0, #255	@ 0xff
 8003b26:	f7ff fe0f 	bl	8003748 <xchg_spi>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	2308      	movs	r3, #8
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	551a      	strb	r2, [r3, r4]
 8003b34:	197b      	adds	r3, r7, r5
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	197b      	adds	r3, r7, r5
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	230f      	movs	r3, #15
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d9ea      	bls.n	8003b1e <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003b48:	2208      	movs	r2, #8
 8003b4a:	18bb      	adds	r3, r7, r2
 8003b4c:	789b      	ldrb	r3, [r3, #2]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d000      	beq.n	8003b54 <USER_SPI_initialize+0xdc>
 8003b52:	e079      	b.n	8003c48 <USER_SPI_initialize+0x1d0>
 8003b54:	18bb      	adds	r3, r7, r2
 8003b56:	78db      	ldrb	r3, [r3, #3]
 8003b58:	2baa      	cmp	r3, #170	@ 0xaa
 8003b5a:	d000      	beq.n	8003b5e <USER_SPI_initialize+0xe6>
 8003b5c:	e074      	b.n	8003c48 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	f7ff fddc 	bl	800371c <SPI_Timer_Status>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d007      	beq.n	8003b78 <USER_SPI_initialize+0x100>
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	20a9      	movs	r0, #169	@ 0xa9
 8003b70:	f7ff fef3 	bl	800395a <send_cmd>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d1f3      	bne.n	8003b60 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003b78:	f7ff fdd0 	bl	800371c <SPI_Timer_Status>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d063      	beq.n	8003c48 <USER_SPI_initialize+0x1d0>
 8003b80:	2100      	movs	r1, #0
 8003b82:	203a      	movs	r0, #58	@ 0x3a
 8003b84:	f7ff fee9 	bl	800395a <send_cmd>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d15d      	bne.n	8003c48 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e00f      	b.n	8003bb6 <USER_SPI_initialize+0x13e>
 8003b96:	250f      	movs	r5, #15
 8003b98:	197b      	adds	r3, r7, r5
 8003b9a:	781c      	ldrb	r4, [r3, #0]
 8003b9c:	20ff      	movs	r0, #255	@ 0xff
 8003b9e:	f7ff fdd3 	bl	8003748 <xchg_spi>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	551a      	strb	r2, [r3, r4]
 8003bac:	197b      	adds	r3, r7, r5
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	197b      	adds	r3, r7, r5
 8003bb2:	3201      	adds	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	230f      	movs	r3, #15
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d9ea      	bls.n	8003b96 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	2340      	movs	r3, #64	@ 0x40
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d001      	beq.n	8003bd2 <USER_SPI_initialize+0x15a>
 8003bce:	220c      	movs	r2, #12
 8003bd0:	e000      	b.n	8003bd4 <USER_SPI_initialize+0x15c>
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	230d      	movs	r3, #13
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e035      	b.n	8003c48 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003bdc:	2100      	movs	r1, #0
 8003bde:	20a9      	movs	r0, #169	@ 0xa9
 8003be0:	f7ff febb 	bl	800395a <send_cmd>
 8003be4:	0003      	movs	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d808      	bhi.n	8003bfc <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003bea:	230d      	movs	r3, #13
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	230e      	movs	r3, #14
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	22a9      	movs	r2, #169	@ 0xa9
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e007      	b.n	8003c0c <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003bfc:	230d      	movs	r3, #13
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	230e      	movs	r3, #14
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	f7ff fd85 	bl	800371c <SPI_Timer_Status>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d008      	beq.n	8003c28 <USER_SPI_initialize+0x1b0>
 8003c16:	230e      	movs	r3, #14
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff fe9b 	bl	800395a <send_cmd>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d1f2      	bne.n	8003c0e <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003c28:	f7ff fd78 	bl	800371c <SPI_Timer_Status>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d007      	beq.n	8003c40 <USER_SPI_initialize+0x1c8>
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	0019      	movs	r1, r3
 8003c36:	2010      	movs	r0, #16
 8003c38:	f7ff fe8f 	bl	800395a <send_cmd>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d003      	beq.n	8003c48 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8003c40:	230d      	movs	r3, #13
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <USER_SPI_initialize+0x22c>)
 8003c4a:	240d      	movs	r4, #13
 8003c4c:	193a      	adds	r2, r7, r4
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	701a      	strb	r2, [r3, #0]
	despiselect();
 8003c52:	f7ff fde9 	bl	8003828 <despiselect>

	if (ty) {			/* OK */
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d013      	beq.n	8003c86 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <USER_SPI_initialize+0x228>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2238      	movs	r2, #56	@ 0x38
 8003c66:	4393      	bics	r3, r2
 8003c68:	001a      	movs	r2, r3
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <USER_SPI_initialize+0x228>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2110      	movs	r1, #16
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e002      	b.n	8003c8c <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <USER_SPI_initialize+0x224>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bdb0      	pop	{r4, r5, r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	20000020 	.word	0x20000020
 8003ca0:	20000090 	.word	0x20000090
 8003ca4:	20000280 	.word	0x20000280

08003ca8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	0002      	movs	r2, r0
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003cb4:	1dfb      	adds	r3, r7, #7
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <USER_SPI_status+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e002      	b.n	8003cc6 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <USER_SPI_status+0x28>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	20000020 	.word	0x20000020

08003cd4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	210f      	movs	r1, #15
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	1c02      	adds	r2, r0, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <USER_SPI_read+0x22>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <USER_SPI_read+0x26>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e04f      	b.n	8003d9a <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <USER_SPI_read+0xd0>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	001a      	movs	r2, r3
 8003d02:	2301      	movs	r3, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	d001      	beq.n	8003d0c <USER_SPI_read+0x38>
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e046      	b.n	8003d9a <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003d0c:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <USER_SPI_read+0xd4>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	001a      	movs	r2, r3
 8003d12:	2308      	movs	r3, #8
 8003d14:	4013      	ands	r3, r2
 8003d16:	d102      	bne.n	8003d1e <USER_SPI_read+0x4a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d112      	bne.n	8003d4a <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0019      	movs	r1, r3
 8003d28:	2011      	movs	r0, #17
 8003d2a:	f7ff fe16 	bl	800395a <send_cmd>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d12d      	bne.n	8003d8e <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	009a      	lsls	r2, r3, #2
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fda4 	bl	8003888 <rcvr_datablock>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d024      	beq.n	8003d8e <USER_SPI_read+0xba>
			count = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	e021      	b.n	8003d8e <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	2012      	movs	r0, #18
 8003d50:	f7ff fe03 	bl	800395a <send_cmd>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d11a      	bne.n	8003d8e <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	009a      	lsls	r2, r3, #2
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0011      	movs	r1, r2
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fd91 	bl	8003888 <rcvr_datablock>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d00c      	beq.n	8003d84 <USER_SPI_read+0xb0>
				buff += 512;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4694      	mov	ip, r2
 8003d72:	4463      	add	r3, ip
 8003d74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ea      	bne.n	8003d58 <USER_SPI_read+0x84>
 8003d82:	e000      	b.n	8003d86 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8003d84:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003d86:	2100      	movs	r1, #0
 8003d88:	200c      	movs	r0, #12
 8003d8a:	f7ff fde6 	bl	800395a <send_cmd>
		}
	}
	despiselect();
 8003d8e:	f7ff fd4b 	bl	8003828 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	4193      	sbcs	r3, r2
 8003d98:	b2db      	uxtb	r3, r3
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	20000020 	.word	0x20000020
 8003da8:	20000280 	.word	0x20000280

08003dac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	210f      	movs	r1, #15
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	1c02      	adds	r2, r0, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <USER_SPI_write+0x22>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <USER_SPI_write+0x26>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e063      	b.n	8003e9a <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <USER_SPI_write+0xf8>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	001a      	movs	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d001      	beq.n	8003de4 <USER_SPI_write+0x38>
 8003de0:	2303      	movs	r3, #3
 8003de2:	e05a      	b.n	8003e9a <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003de4:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <USER_SPI_write+0xf8>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	001a      	movs	r2, r3
 8003dec:	2304      	movs	r3, #4
 8003dee:	4013      	ands	r3, r2
 8003df0:	d001      	beq.n	8003df6 <USER_SPI_write+0x4a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e051      	b.n	8003e9a <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003df6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea8 <USER_SPI_write+0xfc>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d102      	bne.n	8003e08 <USER_SPI_write+0x5c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	025b      	lsls	r3, r3, #9
 8003e06:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d110      	bne.n	8003e30 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0019      	movs	r1, r3
 8003e12:	2018      	movs	r0, #24
 8003e14:	f7ff fda1 	bl	800395a <send_cmd>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d138      	bne.n	8003e8e <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	21fe      	movs	r1, #254	@ 0xfe
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff fd60 	bl	80038e6 <xmit_datablock>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d031      	beq.n	8003e8e <USER_SPI_write+0xe2>
			count = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	e02e      	b.n	8003e8e <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <USER_SPI_write+0xfc>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	001a      	movs	r2, r3
 8003e36:	2306      	movs	r3, #6
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <USER_SPI_write+0x9a>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	0019      	movs	r1, r3
 8003e40:	2097      	movs	r0, #151	@ 0x97
 8003e42:	f7ff fd8a 	bl	800395a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0019      	movs	r1, r3
 8003e4a:	2019      	movs	r0, #25
 8003e4c:	f7ff fd85 	bl	800395a <send_cmd>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d11c      	bne.n	8003e8e <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	21fc      	movs	r1, #252	@ 0xfc
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fd44 	bl	80038e6 <xmit_datablock>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d00c      	beq.n	8003e7c <USER_SPI_write+0xd0>
				buff += 512;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2280      	movs	r2, #128	@ 0x80
 8003e66:	0092      	lsls	r2, r2, #2
 8003e68:	4694      	mov	ip, r2
 8003e6a:	4463      	add	r3, ip
 8003e6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1ec      	bne.n	8003e54 <USER_SPI_write+0xa8>
 8003e7a:	e000      	b.n	8003e7e <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003e7c:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003e7e:	21fd      	movs	r1, #253	@ 0xfd
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7ff fd30 	bl	80038e6 <xmit_datablock>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d101      	bne.n	8003e8e <USER_SPI_write+0xe2>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003e8e:	f7ff fccb 	bl	8003828 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	4193      	sbcs	r3, r2
 8003e98:	b2db      	uxtb	r3, r3
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	20000020 	.word	0x20000020
 8003ea8:	20000280 	.word	0x20000280

08003eac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b08d      	sub	sp, #52	@ 0x34
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	603a      	str	r2, [r7, #0]
 8003eb4:	1dfb      	adds	r3, r7, #7
 8003eb6:	1c02      	adds	r2, r0, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	1dbb      	adds	r3, r7, #6
 8003ebc:	1c0a      	adds	r2, r1, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <USER_SPI_ioctl+0x20>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	e178      	b.n	80041be <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003ecc:	4bbe      	ldr	r3, [pc, #760]	@ (80041c8 <USER_SPI_ioctl+0x31c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d001      	beq.n	8003ede <USER_SPI_ioctl+0x32>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e16f      	b.n	80041be <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8003ede:	232f      	movs	r3, #47	@ 0x2f
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8003ee6:	1dbb      	adds	r3, r7, #6
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d100      	bne.n	8003ef0 <USER_SPI_ioctl+0x44>
 8003eee:	e100      	b.n	80040f2 <USER_SPI_ioctl+0x246>
 8003ef0:	dd00      	ble.n	8003ef4 <USER_SPI_ioctl+0x48>
 8003ef2:	e14d      	b.n	8004190 <USER_SPI_ioctl+0x2e4>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d100      	bne.n	8003efa <USER_SPI_ioctl+0x4e>
 8003ef8:	e074      	b.n	8003fe4 <USER_SPI_ioctl+0x138>
 8003efa:	dd00      	ble.n	8003efe <USER_SPI_ioctl+0x52>
 8003efc:	e148      	b.n	8004190 <USER_SPI_ioctl+0x2e4>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <USER_SPI_ioctl+0x5c>
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d00a      	beq.n	8003f1c <USER_SPI_ioctl+0x70>
 8003f06:	e143      	b.n	8004190 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003f08:	f7ff fca0 	bl	800384c <spiselect>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d100      	bne.n	8003f12 <USER_SPI_ioctl+0x66>
 8003f10:	e143      	b.n	800419a <USER_SPI_ioctl+0x2ee>
 8003f12:	232f      	movs	r3, #47	@ 0x2f
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
		break;
 8003f1a:	e13e      	b.n	800419a <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2009      	movs	r0, #9
 8003f20:	f7ff fd1b 	bl	800395a <send_cmd>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d000      	beq.n	8003f2a <USER_SPI_ioctl+0x7e>
 8003f28:	e139      	b.n	800419e <USER_SPI_ioctl+0x2f2>
 8003f2a:	240c      	movs	r4, #12
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	2110      	movs	r1, #16
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff fca9 	bl	8003888 <rcvr_datablock>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d100      	bne.n	8003f3c <USER_SPI_ioctl+0x90>
 8003f3a:	e130      	b.n	800419e <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	183b      	adds	r3, r7, r0
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d115      	bne.n	8003f76 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	7a5b      	ldrb	r3, [r3, #9]
 8003f4e:	001a      	movs	r2, r3
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	7a1b      	ldrb	r3, [r3, #8]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	18d3      	adds	r3, r2, r3
 8003f58:	0019      	movs	r1, r3
 8003f5a:	183b      	adds	r3, r7, r0
 8003f5c:	79db      	ldrb	r3, [r3, #7]
 8003f5e:	041a      	lsls	r2, r3, #16
 8003f60:	23fc      	movs	r3, #252	@ 0xfc
 8003f62:	039b      	lsls	r3, r3, #14
 8003f64:	4013      	ands	r3, r2
 8003f66:	18cb      	adds	r3, r1, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	029a      	lsls	r2, r3, #10
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e031      	b.n	8003fda <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003f76:	200c      	movs	r0, #12
 8003f78:	183b      	adds	r3, r7, r0
 8003f7a:	795b      	ldrb	r3, [r3, #5]
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	183b      	adds	r3, r7, r0
 8003f84:	7a9b      	ldrb	r3, [r3, #10]
 8003f86:	09db      	lsrs	r3, r3, #7
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	183b      	adds	r3, r7, r0
 8003f90:	7a5b      	ldrb	r3, [r3, #9]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2106      	movs	r1, #6
 8003f98:	400b      	ands	r3, r1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	242e      	movs	r4, #46	@ 0x2e
 8003fa2:	193b      	adds	r3, r7, r4
 8003fa4:	3202      	adds	r2, #2
 8003fa6:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	7a1b      	ldrb	r3, [r3, #8]
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	183b      	adds	r3, r7, r0
 8003fb4:	79db      	ldrb	r3, [r3, #7]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d2      	adds	r2, r2, r3
 8003fba:	183b      	adds	r3, r7, r0
 8003fbc:	799b      	ldrb	r3, [r3, #6]
 8003fbe:	0299      	lsls	r1, r3, #10
 8003fc0:	23c0      	movs	r3, #192	@ 0xc0
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	18d3      	adds	r3, r2, r3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	3b09      	subs	r3, #9
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003fda:	232f      	movs	r3, #47	@ 0x2f
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003fe2:	e0dc      	b.n	800419e <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003fe4:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <USER_SPI_ioctl+0x320>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	001a      	movs	r2, r3
 8003fea:	2304      	movs	r3, #4
 8003fec:	4013      	ands	r3, r2
 8003fee:	d035      	beq.n	800405c <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	208d      	movs	r0, #141	@ 0x8d
 8003ff4:	f7ff fcb1 	bl	800395a <send_cmd>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d000      	beq.n	8003ffe <USER_SPI_ioctl+0x152>
 8003ffc:	e0d1      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8003ffe:	20ff      	movs	r0, #255	@ 0xff
 8004000:	f7ff fba2 	bl	8003748 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004004:	230c      	movs	r3, #12
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2110      	movs	r1, #16
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fc3c 	bl	8003888 <rcvr_datablock>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d100      	bne.n	8004016 <USER_SPI_ioctl+0x16a>
 8004014:	e0c5      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004016:	232e      	movs	r3, #46	@ 0x2e
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2230      	movs	r2, #48	@ 0x30
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e008      	b.n	8004032 <USER_SPI_ioctl+0x186>
 8004020:	20ff      	movs	r0, #255	@ 0xff
 8004022:	f7ff fb91 	bl	8003748 <xchg_spi>
 8004026:	212e      	movs	r1, #46	@ 0x2e
 8004028:	187b      	adds	r3, r7, r1
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	187b      	adds	r3, r7, r1
 800402e:	3a01      	subs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	232e      	movs	r3, #46	@ 0x2e
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f1      	bne.n	8004020 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800403c:	230c      	movs	r3, #12
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	7a9b      	ldrb	r3, [r3, #10]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	b2db      	uxtb	r3, r3
 8004046:	001a      	movs	r2, r3
 8004048:	2310      	movs	r3, #16
 800404a:	4093      	lsls	r3, r2
 800404c:	001a      	movs	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004052:	232f      	movs	r3, #47	@ 0x2f
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800405a:	e0a2      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800405c:	2100      	movs	r1, #0
 800405e:	2009      	movs	r0, #9
 8004060:	f7ff fc7b 	bl	800395a <send_cmd>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d000      	beq.n	800406a <USER_SPI_ioctl+0x1be>
 8004068:	e09b      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>
 800406a:	240c      	movs	r4, #12
 800406c:	193b      	adds	r3, r7, r4
 800406e:	2110      	movs	r1, #16
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff fc09 	bl	8003888 <rcvr_datablock>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d100      	bne.n	800407c <USER_SPI_ioctl+0x1d0>
 800407a:	e092      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <USER_SPI_ioctl+0x320>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	001a      	movs	r2, r3
 8004082:	2302      	movs	r3, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d016      	beq.n	80040b6 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004088:	0021      	movs	r1, r4
 800408a:	187b      	adds	r3, r7, r1
 800408c:	7a9b      	ldrb	r3, [r3, #10]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	227e      	movs	r2, #126	@ 0x7e
 8004092:	4013      	ands	r3, r2
 8004094:	187a      	adds	r2, r7, r1
 8004096:	7ad2      	ldrb	r2, [r2, #11]
 8004098:	09d2      	lsrs	r2, r2, #7
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	189b      	adds	r3, r3, r2
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	7b5b      	ldrb	r3, [r3, #13]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	0013      	movs	r3, r2
 80040ae:	001a      	movs	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e018      	b.n	80040e8 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80040b6:	210c      	movs	r1, #12
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	7a9b      	ldrb	r3, [r3, #10]
 80040bc:	109b      	asrs	r3, r3, #2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	001a      	movs	r2, r3
 80040c2:	231f      	movs	r3, #31
 80040c4:	4013      	ands	r3, r2
 80040c6:	3301      	adds	r3, #1
 80040c8:	0008      	movs	r0, r1
 80040ca:	187a      	adds	r2, r7, r1
 80040cc:	7ad2      	ldrb	r2, [r2, #11]
 80040ce:	00d2      	lsls	r2, r2, #3
 80040d0:	2118      	movs	r1, #24
 80040d2:	400a      	ands	r2, r1
 80040d4:	1839      	adds	r1, r7, r0
 80040d6:	7ac9      	ldrb	r1, [r1, #11]
 80040d8:	0949      	lsrs	r1, r1, #5
 80040da:	b2c9      	uxtb	r1, r1
 80040dc:	1852      	adds	r2, r2, r1
 80040de:	3201      	adds	r2, #1
 80040e0:	4353      	muls	r3, r2
 80040e2:	001a      	movs	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80040e8:	232f      	movs	r3, #47	@ 0x2f
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
		break;
 80040f0:	e057      	b.n	80041a2 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <USER_SPI_ioctl+0x320>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	001a      	movs	r2, r3
 80040f8:	2306      	movs	r3, #6
 80040fa:	4013      	ands	r3, r2
 80040fc:	d053      	beq.n	80041a6 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80040fe:	240c      	movs	r4, #12
 8004100:	193a      	adds	r2, r7, r4
 8004102:	1dfb      	adds	r3, r7, #7
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	210b      	movs	r1, #11
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fecf 	bl	8003eac <USER_SPI_ioctl>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d14b      	bne.n	80041aa <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004112:	193b      	adds	r3, r7, r4
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <USER_SPI_ioctl+0x27e>
 800411e:	193b      	adds	r3, r7, r4
 8004120:	7a9b      	ldrb	r3, [r3, #10]
 8004122:	001a      	movs	r2, r3
 8004124:	2340      	movs	r3, #64	@ 0x40
 8004126:	4013      	ands	r3, r2
 8004128:	d041      	beq.n	80041ae <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800413a:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <USER_SPI_ioctl+0x320>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	001a      	movs	r2, r3
 8004140:	2308      	movs	r3, #8
 8004142:	4013      	ands	r3, r2
 8004144:	d105      	bne.n	8004152 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	025b      	lsls	r3, r3, #9
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	0019      	movs	r1, r3
 8004156:	2020      	movs	r0, #32
 8004158:	f7ff fbff 	bl	800395a <send_cmd>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d128      	bne.n	80041b2 <USER_SPI_ioctl+0x306>
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	0019      	movs	r1, r3
 8004164:	2021      	movs	r0, #33	@ 0x21
 8004166:	f7ff fbf8 	bl	800395a <send_cmd>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d121      	bne.n	80041b2 <USER_SPI_ioctl+0x306>
 800416e:	2100      	movs	r1, #0
 8004170:	2026      	movs	r0, #38	@ 0x26
 8004172:	f7ff fbf2 	bl	800395a <send_cmd>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d11b      	bne.n	80041b2 <USER_SPI_ioctl+0x306>
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <USER_SPI_ioctl+0x324>)
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fb2b 	bl	80037d8 <wait_ready>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d015      	beq.n	80041b2 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004186:	232f      	movs	r3, #47	@ 0x2f
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800418e:	e010      	b.n	80041b2 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8004190:	232f      	movs	r3, #47	@ 0x2f
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	e00c      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		break;
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	e00a      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		break;
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	e008      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		break;
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	e006      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	e004      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	e002      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	e000      	b.n	80041b4 <USER_SPI_ioctl+0x308>
		break;
 80041b2:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 80041b4:	f7ff fb38 	bl	8003828 <despiselect>

	return res;
 80041b8:	232f      	movs	r3, #47	@ 0x2f
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b00d      	add	sp, #52	@ 0x34
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	20000020 	.word	0x20000020
 80041cc:	20000280 	.word	0x20000280
 80041d0:	00007530 	.word	0x00007530

080041d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	0002      	movs	r2, r0
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004214 <disk_status+0x40>)
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	3304      	adds	r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	1dfa      	adds	r2, r7, #7
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	4907      	ldr	r1, [pc, #28]	@ (8004214 <disk_status+0x40>)
 80041f6:	188a      	adds	r2, r1, r2
 80041f8:	7a12      	ldrb	r2, [r2, #8]
 80041fa:	250f      	movs	r5, #15
 80041fc:	197c      	adds	r4, r7, r5
 80041fe:	0010      	movs	r0, r2
 8004200:	4798      	blx	r3
 8004202:	0003      	movs	r3, r0
 8004204:	7023      	strb	r3, [r4, #0]
  return stat;
 8004206:	197b      	adds	r3, r7, r5
 8004208:	781b      	ldrb	r3, [r3, #0]
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bdb0      	pop	{r4, r5, r7, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	200002b4 	.word	0x200002b4

08004218 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	0002      	movs	r2, r0
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004224:	200f      	movs	r0, #15
 8004226:	183b      	adds	r3, r7, r0
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	4a10      	ldr	r2, [pc, #64]	@ (8004274 <disk_initialize+0x5c>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <disk_initialize+0x5c>)
 800423e:	2101      	movs	r1, #1
 8004240:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004242:	1dfb      	adds	r3, r7, #7
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	4a0b      	ldr	r2, [pc, #44]	@ (8004274 <disk_initialize+0x5c>)
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	18d3      	adds	r3, r2, r3
 800424c:	3304      	adds	r3, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1dfa      	adds	r2, r7, #7
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	4907      	ldr	r1, [pc, #28]	@ (8004274 <disk_initialize+0x5c>)
 8004258:	188a      	adds	r2, r1, r2
 800425a:	7a12      	ldrb	r2, [r2, #8]
 800425c:	183c      	adds	r4, r7, r0
 800425e:	0010      	movs	r0, r2
 8004260:	4798      	blx	r3
 8004262:	0003      	movs	r3, r0
 8004264:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8004266:	230f      	movs	r3, #15
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b005      	add	sp, #20
 8004272:	bd90      	pop	{r4, r7, pc}
 8004274:	200002b4 	.word	0x200002b4

08004278 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	210f      	movs	r1, #15
 8004286:	187b      	adds	r3, r7, r1
 8004288:	1c02      	adds	r2, r0, #0
 800428a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800428c:	187b      	adds	r3, r7, r1
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4a0c      	ldr	r2, [pc, #48]	@ (80042c4 <disk_read+0x4c>)
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	3304      	adds	r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689d      	ldr	r5, [r3, #8]
 800429c:	187b      	adds	r3, r7, r1
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <disk_read+0x4c>)
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	7a18      	ldrb	r0, [r3, #8]
 80042a6:	2617      	movs	r6, #23
 80042a8:	19bc      	adds	r4, r7, r6
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	47a8      	blx	r5
 80042b2:	0003      	movs	r3, r0
 80042b4:	7023      	strb	r3, [r4, #0]
  return res;
 80042b6:	19bb      	adds	r3, r7, r6
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b007      	add	sp, #28
 80042c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	200002b4 	.word	0x200002b4

080042c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	210f      	movs	r1, #15
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	1c02      	adds	r2, r0, #0
 80042da:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <disk_write+0x4c>)
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	3304      	adds	r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68dd      	ldr	r5, [r3, #12]
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <disk_write+0x4c>)
 80042f2:	18d3      	adds	r3, r2, r3
 80042f4:	7a18      	ldrb	r0, [r3, #8]
 80042f6:	2617      	movs	r6, #23
 80042f8:	19bc      	adds	r4, r7, r6
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	47a8      	blx	r5
 8004302:	0003      	movs	r3, r0
 8004304:	7023      	strb	r3, [r4, #0]
  return res;
 8004306:	19bb      	adds	r3, r7, r6
 8004308:	781b      	ldrb	r3, [r3, #0]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b007      	add	sp, #28
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	200002b4 	.word	0x200002b4

08004318 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	603a      	str	r2, [r7, #0]
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	1c02      	adds	r2, r0, #0
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	1c0a      	adds	r2, r1, #0
 800432a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4a0c      	ldr	r2, [pc, #48]	@ (8004364 <disk_ioctl+0x4c>)
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	3304      	adds	r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	1dfa      	adds	r2, r7, #7
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	4908      	ldr	r1, [pc, #32]	@ (8004364 <disk_ioctl+0x4c>)
 8004342:	188a      	adds	r2, r1, r2
 8004344:	7a10      	ldrb	r0, [r2, #8]
 8004346:	260f      	movs	r6, #15
 8004348:	19bc      	adds	r4, r7, r6
 800434a:	683d      	ldr	r5, [r7, #0]
 800434c:	1dba      	adds	r2, r7, #6
 800434e:	7811      	ldrb	r1, [r2, #0]
 8004350:	002a      	movs	r2, r5
 8004352:	4798      	blx	r3
 8004354:	0003      	movs	r3, r0
 8004356:	7023      	strb	r3, [r4, #0]
  return res;
 8004358:	19bb      	adds	r3, r7, r6
 800435a:	781b      	ldrb	r3, [r3, #0]
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b005      	add	sp, #20
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	200002b4 	.word	0x200002b4

08004368 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3301      	adds	r3, #1
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	210e      	movs	r1, #14
 8004378:	187b      	adds	r3, r7, r1
 800437a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	b21a      	sxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b21b      	sxth	r3, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	b21a      	sxth	r2, r3
 800438e:	187b      	adds	r3, r7, r1
 8004390:	801a      	strh	r2, [r3, #0]
	return rv;
 8004392:	187b      	adds	r3, r7, r1
 8004394:	881b      	ldrh	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}

0800439e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3303      	adds	r3, #3
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	3202      	adds	r2, #2
 80043b6:	7812      	ldrb	r2, [r2, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	3201      	adds	r2, #1
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
	return rv;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}

080043e0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	000a      	movs	r2, r1
 80043ea:	1cbb      	adds	r3, r7, #2
 80043ec:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	1cba      	adds	r2, r7, #2
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	1cbb      	adds	r3, r7, #2
 80043fe:	1cba      	adds	r2, r7, #2
 8004400:	8812      	ldrh	r2, [r2, #0]
 8004402:	0a12      	lsrs	r2, r2, #8
 8004404:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	1cba      	adds	r2, r7, #2
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
}
 8004414:	46c0      	nop			@ (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}

08004470 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	1c53      	adds	r3, r2, #1
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	6179      	str	r1, [r7, #20]
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3b01      	subs	r3, #1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f1      	bne.n	800448a <mem_cpy+0x1a>
	}
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}

080044ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	617a      	str	r2, [r7, #20]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f3      	bne.n	80044be <mem_set+0x10>
}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b006      	add	sp, #24
 80044de:	bd80      	pop	{r7, pc}

080044e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	61fa      	str	r2, [r7, #28]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	0019      	movs	r1, r3
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	61ba      	str	r2, [r7, #24]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	1acb      	subs	r3, r1, r3
 800450c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3b01      	subs	r3, #1
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <mem_cmp+0x40>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0eb      	beq.n	80044f8 <mem_cmp+0x18>

	return r;
 8004520:	697b      	ldr	r3, [r7, #20]
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b008      	add	sp, #32
 8004528:	bd80      	pop	{r7, pc}

0800452a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004534:	e002      	b.n	800453c <chk_chr+0x12>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3301      	adds	r3, #1
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <chk_chr+0x26>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	001a      	movs	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	d1f2      	bne.n	8004536 <chk_chr+0xc>
	return *str;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	781b      	ldrb	r3, [r3, #0]
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b002      	add	sp, #8
 800455a:	bd80      	pop	{r7, pc}

0800455c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e027      	b.n	80045c0 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8004570:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <chk_lock+0xac>)
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	58d3      	ldr	r3, [r2, r3]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01c      	beq.n	80045b6 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800457c:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <chk_lock+0xac>)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	58d2      	ldr	r2, [r2, r3]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d116      	bne.n	80045ba <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <chk_lock+0xac>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	3304      	adds	r3, #4
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800459c:	429a      	cmp	r2, r3
 800459e:	d10c      	bne.n	80045ba <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80045a0:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <chk_lock+0xac>)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	18d3      	adds	r3, r2, r3
 80045a8:	3308      	adds	r3, #8
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d102      	bne.n	80045ba <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80045b4:	e007      	b.n	80045c6 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d9d4      	bls.n	8004570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d109      	bne.n	80045e0 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <chk_lock+0x7c>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d101      	bne.n	80045dc <chk_lock+0x80>
 80045d8:	2300      	movs	r3, #0
 80045da:	e011      	b.n	8004600 <chk_lock+0xa4>
 80045dc:	2312      	movs	r3, #18
 80045de:	e00f      	b.n	8004600 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <chk_lock+0x9e>
 80045e6:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <chk_lock+0xac>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	18d3      	adds	r3, r2, r3
 80045ee:	330c      	adds	r3, #12
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d101      	bne.n	80045fe <chk_lock+0xa2>
 80045fa:	2310      	movs	r3, #16
 80045fc:	e000      	b.n	8004600 <chk_lock+0xa4>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000294 	.word	0x20000294

0800460c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	e002      	b.n	800461e <enq_lock+0x12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d805      	bhi.n	8004630 <enq_lock+0x24>
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <enq_lock+0x38>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	0112      	lsls	r2, r2, #4
 800462a:	58d3      	ldr	r3, [r2, r3]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f3      	bne.n	8004618 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b02      	subs	r3, #2
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	4193      	sbcs	r3, r2
 8004638:	b2db      	uxtb	r3, r3
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b002      	add	sp, #8
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	20000294 	.word	0x20000294

08004648 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e01e      	b.n	8004696 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8004658:	4b3f      	ldr	r3, [pc, #252]	@ (8004758 <inc_lock+0x110>)
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	0112      	lsls	r2, r2, #4
 800465e:	58d2      	ldr	r2, [r2, r3]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d113      	bne.n	8004690 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8004668:	4a3b      	ldr	r2, [pc, #236]	@ (8004758 <inc_lock+0x110>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	18d3      	adds	r3, r2, r3
 8004670:	3304      	adds	r3, #4
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004678:	429a      	cmp	r2, r3
 800467a:	d109      	bne.n	8004690 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 800467c:	4a36      	ldr	r2, [pc, #216]	@ (8004758 <inc_lock+0x110>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	18d3      	adds	r3, r2, r3
 8004684:	3308      	adds	r3, #8
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800468c:	429a      	cmp	r2, r3
 800468e:	d006      	beq.n	800469e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d9dd      	bls.n	8004658 <inc_lock+0x10>
 800469c:	e000      	b.n	80046a0 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800469e:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d130      	bne.n	8004708 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e002      	b.n	80046b2 <inc_lock+0x6a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d805      	bhi.n	80046c4 <inc_lock+0x7c>
 80046b8:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <inc_lock+0x110>)
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	0112      	lsls	r2, r2, #4
 80046be:	58d3      	ldr	r3, [r2, r3]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f3      	bne.n	80046ac <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d101      	bne.n	80046ce <inc_lock+0x86>
 80046ca:	2300      	movs	r3, #0
 80046cc:	e03f      	b.n	800474e <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <inc_lock+0x110>)
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	491e      	ldr	r1, [pc, #120]	@ (8004758 <inc_lock+0x110>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	18cb      	adds	r3, r1, r3
 80046e6:	3304      	adds	r3, #4
 80046e8:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	491a      	ldr	r1, [pc, #104]	@ (8004758 <inc_lock+0x110>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	18cb      	adds	r3, r1, r3
 80046f6:	3308      	adds	r3, #8
 80046f8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <inc_lock+0x110>)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	18d3      	adds	r3, r2, r3
 8004702:	330c      	adds	r3, #12
 8004704:	2200      	movs	r2, #0
 8004706:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <inc_lock+0xda>
 800470e:	4a12      	ldr	r2, [pc, #72]	@ (8004758 <inc_lock+0x110>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	330c      	adds	r3, #12
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <inc_lock+0xda>
 800471e:	2300      	movs	r3, #0
 8004720:	e015      	b.n	800474e <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d108      	bne.n	800473a <inc_lock+0xf2>
 8004728:	4a0b      	ldr	r2, [pc, #44]	@ (8004758 <inc_lock+0x110>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	330c      	adds	r3, #12
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	b29b      	uxth	r3, r3
 8004738:	e001      	b.n	800473e <inc_lock+0xf6>
 800473a:	2380      	movs	r3, #128	@ 0x80
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4906      	ldr	r1, [pc, #24]	@ (8004758 <inc_lock+0x110>)
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	188a      	adds	r2, r1, r2
 8004746:	320c      	adds	r2, #12
 8004748:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	20000294 	.word	0x20000294

0800475c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d832      	bhi.n	80047d6 <dec_lock+0x7a>
		n = Files[i].ctr;
 8004770:	200e      	movs	r0, #14
 8004772:	183b      	adds	r3, r7, r0
 8004774:	491d      	ldr	r1, [pc, #116]	@ (80047ec <dec_lock+0x90>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	188a      	adds	r2, r1, r2
 800477c:	320c      	adds	r2, #12
 800477e:	8812      	ldrh	r2, [r2, #0]
 8004780:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004782:	183b      	adds	r3, r7, r0
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	2380      	movs	r3, #128	@ 0x80
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	429a      	cmp	r2, r3
 800478c:	d102      	bne.n	8004794 <dec_lock+0x38>
 800478e:	183b      	adds	r3, r7, r0
 8004790:	2200      	movs	r2, #0
 8004792:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004794:	210e      	movs	r1, #14
 8004796:	187b      	adds	r3, r7, r1
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <dec_lock+0x4c>
 800479e:	187b      	adds	r3, r7, r1
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	3a01      	subs	r2, #1
 80047a6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 80047a8:	4a10      	ldr	r2, [pc, #64]	@ (80047ec <dec_lock+0x90>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	330c      	adds	r3, #12
 80047b2:	210e      	movs	r1, #14
 80047b4:	187a      	adds	r2, r7, r1
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <dec_lock+0x70>
 80047c2:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <dec_lock+0x90>)
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 80047cc:	230d      	movs	r3, #13
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e003      	b.n	80047de <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047d6:	230d      	movs	r3, #13
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80047de:	230d      	movs	r3, #13
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000294 	.word	0x20000294

080047f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e00e      	b.n	800481c <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <clear_lock+0x3c>)
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	58d3      	ldr	r3, [r2, r3]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d104      	bne.n	8004816 <clear_lock+0x26>
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <clear_lock+0x3c>)
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	2100      	movs	r1, #0
 8004814:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d9ed      	bls.n	80047fe <clear_lock+0xe>
	}
}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	46c0      	nop			@ (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b004      	add	sp, #16
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000294 	.word	0x20000294

08004830 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004838:	240f      	movs	r4, #15
 800483a:	193b      	adds	r3, r7, r4
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d034      	beq.n	80048b2 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7858      	ldrb	r0, [r3, #1]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3330      	adds	r3, #48	@ 0x30
 8004856:	0019      	movs	r1, r3
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	2301      	movs	r3, #1
 800485c:	f7ff fd34 	bl	80042c8 <disk_write>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d003      	beq.n	800486c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8004864:	193b      	adds	r3, r7, r4
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e022      	b.n	80048b2 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d217      	bcs.n	80048b2 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e010      	b.n	80048ac <sync_window+0x7c>
					wsect += fs->fsize;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	18d3      	adds	r3, r2, r3
 8004892:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7858      	ldrb	r0, [r3, #1]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3330      	adds	r3, #48	@ 0x30
 800489c:	0019      	movs	r1, r3
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	2301      	movs	r3, #1
 80048a2:	f7ff fd11 	bl	80042c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d8eb      	bhi.n	800488a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 80048b2:	230f      	movs	r3, #15
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	781b      	ldrb	r3, [r3, #0]
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b007      	add	sp, #28
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048ca:	250f      	movs	r5, #15
 80048cc:	197b      	adds	r3, r7, r5
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d01f      	beq.n	800491c <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048dc:	197c      	adds	r4, r7, r5
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff ffa5 	bl	8004830 <sync_window>
 80048e6:	0003      	movs	r3, r0
 80048e8:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048ea:	002c      	movs	r4, r5
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d113      	bne.n	800491c <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7858      	ldrb	r0, [r3, #1]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3330      	adds	r3, #48	@ 0x30
 80048fc:	0019      	movs	r1, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	2301      	movs	r3, #1
 8004902:	f7ff fcb9 	bl	8004278 <disk_read>
 8004906:	1e03      	subs	r3, r0, #0
 8004908:	d005      	beq.n	8004916 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800490a:	2301      	movs	r3, #1
 800490c:	425b      	negs	r3, r3
 800490e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004910:	193b      	adds	r3, r7, r4
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800491c:	230f      	movs	r3, #15
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	781b      	ldrb	r3, [r3, #0]
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b004      	add	sp, #16
 8004928:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800492c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004934:	250f      	movs	r5, #15
 8004936:	197c      	adds	r4, r7, r5
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f7ff ff78 	bl	8004830 <sync_window>
 8004940:	0003      	movs	r3, r0
 8004942:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004944:	197b      	adds	r3, r7, r5
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d15d      	bne.n	8004a08 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d14c      	bne.n	80049ee <sync_fs+0xc2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	791b      	ldrb	r3, [r3, #4]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d148      	bne.n	80049ee <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3330      	adds	r3, #48	@ 0x30
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	2100      	movs	r1, #0
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff fda1 	bl	80044ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3330      	adds	r3, #48	@ 0x30
 8004970:	33ff      	adds	r3, #255	@ 0xff
 8004972:	33ff      	adds	r3, #255	@ 0xff
 8004974:	4a28      	ldr	r2, [pc, #160]	@ (8004a18 <sync_fs+0xec>)
 8004976:	0011      	movs	r1, r2
 8004978:	0018      	movs	r0, r3
 800497a:	f7ff fd31 	bl	80043e0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3330      	adds	r3, #48	@ 0x30
 8004982:	4a26      	ldr	r2, [pc, #152]	@ (8004a1c <sync_fs+0xf0>)
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff fd48 	bl	800441c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3330      	adds	r3, #48	@ 0x30
 8004990:	33e5      	adds	r3, #229	@ 0xe5
 8004992:	33ff      	adds	r3, #255	@ 0xff
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <sync_fs+0xf4>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff fd3f 	bl	800441c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3330      	adds	r3, #48	@ 0x30
 80049a2:	33e9      	adds	r3, #233	@ 0xe9
 80049a4:	33ff      	adds	r3, #255	@ 0xff
 80049a6:	001a      	movs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	0019      	movs	r1, r3
 80049ae:	0010      	movs	r0, r2
 80049b0:	f7ff fd34 	bl	800441c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3330      	adds	r3, #48	@ 0x30
 80049b8:	33ed      	adds	r3, #237	@ 0xed
 80049ba:	33ff      	adds	r3, #255	@ 0xff
 80049bc:	001a      	movs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	0019      	movs	r1, r3
 80049c4:	0010      	movs	r0, r2
 80049c6:	f7ff fd29 	bl	800441c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7858      	ldrb	r0, [r3, #1]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3330      	adds	r3, #48	@ 0x30
 80049dc:	0019      	movs	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e2:	2301      	movs	r3, #1
 80049e4:	f7ff fc70 	bl	80042c8 <disk_write>
			fs->fsi_flag = 0;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff fc8e 	bl	8004318 <disk_ioctl>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d003      	beq.n	8004a08 <sync_fs+0xdc>
 8004a00:	230f      	movs	r3, #15
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8004a08:	230f      	movs	r3, #15
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bdb0      	pop	{r4, r5, r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	0000aa55 	.word	0x0000aa55
 8004a1c:	41615252 	.word	0x41615252
 8004a20:	61417272 	.word	0x61417272

08004a24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	3b02      	subs	r3, #2
 8004a32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	3b02      	subs	r3, #2
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d301      	bcc.n	8004a44 <clust2sect+0x20>
 8004a40:	2300      	movs	r3, #0
 8004a42:	e007      	b.n	8004a54 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	895b      	ldrh	r3, [r3, #10]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	435a      	muls	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	18d3      	adds	r3, r2, r3
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d904      	bls.n	8004a7c <get_fat+0x20>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e091      	b.n	8004ba6 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a82:	2301      	movs	r3, #1
 8004a84:	425b      	negs	r3, r3
 8004a86:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d063      	beq.n	8004b58 <get_fat+0xfc>
 8004a90:	dd00      	ble.n	8004a94 <get_fat+0x38>
 8004a92:	e07e      	b.n	8004b92 <get_fat+0x136>
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d002      	beq.n	8004a9e <get_fat+0x42>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d042      	beq.n	8004b22 <get_fat+0xc6>
 8004a9c:	e079      	b.n	8004b92 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	0a5b      	lsrs	r3, r3, #9
 8004ab4:	18d2      	adds	r2, r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	0011      	movs	r1, r2
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7ff ff00 	bl	80048c0 <move_window>
 8004ac0:	1e03      	subs	r3, r0, #0
 8004ac2:	d169      	bne.n	8004b98 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	60fa      	str	r2, [r7, #12]
 8004aca:	05db      	lsls	r3, r3, #23
 8004acc:	0ddb      	lsrs	r3, r3, #23
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	2130      	movs	r1, #48	@ 0x30
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	185b      	adds	r3, r3, r1
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6a1a      	ldr	r2, [r3, #32]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	0a5b      	lsrs	r3, r3, #9
 8004ae2:	18d2      	adds	r2, r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff fee9 	bl	80048c0 <move_window>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d154      	bne.n	8004b9c <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	05db      	lsls	r3, r3, #23
 8004af6:	0ddb      	lsrs	r3, r3, #23
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	2130      	movs	r1, #48	@ 0x30
 8004afc:	18d3      	adds	r3, r2, r3
 8004afe:	185b      	adds	r3, r3, r1
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d002      	beq.n	8004b18 <get_fat+0xbc>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	e002      	b.n	8004b1e <get_fat+0xc2>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	051b      	lsls	r3, r3, #20
 8004b1c:	0d1b      	lsrs	r3, r3, #20
 8004b1e:	617b      	str	r3, [r7, #20]
			break;
 8004b20:	e041      	b.n	8004ba6 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	18d2      	adds	r2, r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	0011      	movs	r1, r2
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff fec5 	bl	80048c0 <move_window>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d132      	bne.n	8004ba0 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3330      	adds	r3, #48	@ 0x30
 8004b3e:	001a      	movs	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	0059      	lsls	r1, r3, #1
 8004b44:	23ff      	movs	r3, #255	@ 0xff
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	400b      	ands	r3, r1
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fc0b 	bl	8004368 <ld_word>
 8004b52:	0003      	movs	r3, r0
 8004b54:	617b      	str	r3, [r7, #20]
			break;
 8004b56:	e026      	b.n	8004ba6 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	09db      	lsrs	r3, r3, #7
 8004b60:	18d2      	adds	r2, r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7ff feaa 	bl	80048c0 <move_window>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d119      	bne.n	8004ba4 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3330      	adds	r3, #48	@ 0x30
 8004b74:	001a      	movs	r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	0099      	lsls	r1, r3, #2
 8004b7a:	23fe      	movs	r3, #254	@ 0xfe
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	400b      	ands	r3, r1
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff fc0b 	bl	800439e <ld_dword>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	617b      	str	r3, [r7, #20]
			break;
 8004b90:	e009      	b.n	8004ba6 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004b92:	2301      	movs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e006      	b.n	8004ba6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	e004      	b.n	8004ba6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	e002      	b.n	8004ba6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	e000      	b.n	8004ba6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ba4:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8004ba6:	697b      	ldr	r3, [r7, #20]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b006      	add	sp, #24
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d800      	bhi.n	8004bcc <put_fat+0x1c>
 8004bca:	e0eb      	b.n	8004da4 <put_fat+0x1f4>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d300      	bcc.n	8004bd8 <put_fat+0x28>
 8004bd6:	e0e5      	b.n	8004da4 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d100      	bne.n	8004be2 <put_fat+0x32>
 8004be0:	e0a1      	b.n	8004d26 <put_fat+0x176>
 8004be2:	dd00      	ble.n	8004be6 <put_fat+0x36>
 8004be4:	e0de      	b.n	8004da4 <put_fat+0x1f4>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <put_fat+0x42>
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d100      	bne.n	8004bf0 <put_fat+0x40>
 8004bee:	e075      	b.n	8004cdc <put_fat+0x12c>
 8004bf0:	e0d8      	b.n	8004da4 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	0a5b      	lsrs	r3, r3, #9
 8004c08:	18d2      	adds	r2, r2, r3
 8004c0a:	251f      	movs	r5, #31
 8004c0c:	197c      	adds	r4, r7, r5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7ff fe54 	bl	80048c0 <move_window>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004c1c:	197b      	adds	r3, r7, r5
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d000      	beq.n	8004c26 <put_fat+0x76>
 8004c24:	e0b7      	b.n	8004d96 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3330      	adds	r3, #48	@ 0x30
 8004c2a:	001a      	movs	r2, r3
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	61b9      	str	r1, [r7, #24]
 8004c32:	05db      	lsls	r3, r3, #23
 8004c34:	0ddb      	lsrs	r3, r3, #23
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d00d      	beq.n	8004c5e <put_fat+0xae>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	220f      	movs	r2, #15
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b25a      	sxtb	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	4313      	orrs	r3, r2
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	e001      	b.n	8004c62 <put_fat+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	18d2      	adds	r2, r2, r3
 8004c76:	251f      	movs	r5, #31
 8004c78:	197c      	adds	r4, r7, r5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	0011      	movs	r1, r2
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7ff fe1e 	bl	80048c0 <move_window>
 8004c84:	0003      	movs	r3, r0
 8004c86:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004c88:	197b      	adds	r3, r7, r5
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d000      	beq.n	8004c92 <put_fat+0xe2>
 8004c90:	e083      	b.n	8004d9a <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3330      	adds	r3, #48	@ 0x30
 8004c96:	001a      	movs	r2, r3
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	05db      	lsls	r3, r3, #23
 8004c9c:	0ddb      	lsrs	r3, r3, #23
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <put_fat+0x102>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e00e      	b.n	8004cd0 <put_fat+0x120>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	220f      	movs	r2, #15
 8004cba:	4393      	bics	r3, r2
 8004cbc:	b25a      	sxtb	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	210f      	movs	r1, #15
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	70da      	strb	r2, [r3, #3]
			break;
 8004cda:	e063      	b.n	8004da4 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	18d2      	adds	r2, r2, r3
 8004ce6:	251f      	movs	r5, #31
 8004ce8:	197c      	adds	r4, r7, r5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff fde6 	bl	80048c0 <move_window>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004cf8:	197b      	adds	r3, r7, r5
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d14e      	bne.n	8004d9e <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3330      	adds	r3, #48	@ 0x30
 8004d04:	001a      	movs	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0059      	lsls	r1, r3, #1
 8004d0a:	23ff      	movs	r3, #255	@ 0xff
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	400b      	ands	r3, r1
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	b292      	uxth	r2, r2
 8004d16:	0011      	movs	r1, r2
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7ff fb61 	bl	80043e0 <st_word>
			fs->wflag = 1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	70da      	strb	r2, [r3, #3]
			break;
 8004d24:	e03e      	b.n	8004da4 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	09db      	lsrs	r3, r3, #7
 8004d2e:	18d2      	adds	r2, r2, r3
 8004d30:	251f      	movs	r5, #31
 8004d32:	197c      	adds	r4, r7, r5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0011      	movs	r1, r2
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f7ff fdc1 	bl	80048c0 <move_window>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004d42:	197b      	adds	r3, r7, r5
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d12b      	bne.n	8004da2 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	091c      	lsrs	r4, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3330      	adds	r3, #48	@ 0x30
 8004d54:	001a      	movs	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0099      	lsls	r1, r3, #2
 8004d5a:	23fe      	movs	r3, #254	@ 0xfe
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	400b      	ands	r3, r1
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fb1b 	bl	800439e <ld_dword>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	0f1b      	lsrs	r3, r3, #28
 8004d6c:	071b      	lsls	r3, r3, #28
 8004d6e:	4323      	orrs	r3, r4
 8004d70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3330      	adds	r3, #48	@ 0x30
 8004d76:	001a      	movs	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	0099      	lsls	r1, r3, #2
 8004d7c:	23fe      	movs	r3, #254	@ 0xfe
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	400b      	ands	r3, r1
 8004d82:	18d3      	adds	r3, r2, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	0011      	movs	r1, r2
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7ff fb47 	bl	800441c <st_dword>
			fs->wflag = 1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	70da      	strb	r2, [r3, #3]
			break;
 8004d94:	e006      	b.n	8004da4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	e004      	b.n	8004da4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	e002      	b.n	8004da4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	e000      	b.n	8004da4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004da2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8004da4:	231f      	movs	r3, #31
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b008      	add	sp, #32
 8004db0:	bdb0      	pop	{r4, r5, r7, pc}

08004db2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004db2:	b5b0      	push	{r4, r5, r7, lr}
 8004db4:	b088      	sub	sp, #32
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004dbe:	231f      	movs	r3, #31
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d904      	bls.n	8004ddc <remove_chain+0x2a>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d301      	bcc.n	8004de0 <remove_chain+0x2e>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e057      	b.n	8004e90 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004de6:	251f      	movs	r5, #31
 8004de8:	197c      	adds	r4, r7, r5
 8004dea:	2301      	movs	r3, #1
 8004dec:	425a      	negs	r2, r3
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7ff fedc 	bl	8004bb0 <put_fat>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8004dfc:	197b      	adds	r3, r7, r5
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <remove_chain+0x58>
 8004e04:	197b      	adds	r3, r7, r5
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	e042      	b.n	8004e90 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	0011      	movs	r1, r2
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff fe23 	bl	8004a5c <get_fat>
 8004e16:	0003      	movs	r3, r0
 8004e18:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d035      	beq.n	8004e8c <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <remove_chain+0x78>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e032      	b.n	8004e90 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <remove_chain+0x82>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e02d      	b.n	8004e90 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e34:	251f      	movs	r5, #31
 8004e36:	197c      	adds	r4, r7, r5
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7ff feb6 	bl	8004bb0 <put_fat>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8004e48:	197b      	adds	r3, r7, r5
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <remove_chain+0xa4>
 8004e50:	197b      	adds	r3, r7, r5
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	e01c      	b.n	8004e90 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	3b02      	subs	r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d20b      	bcs.n	8004e7c <remove_chain+0xca>
			fs->free_clst++;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3bf      	bcc.n	8004e0a <remove_chain+0x58>
 8004e8a:	e000      	b.n	8004e8e <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e8c:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b008      	add	sp, #32
 8004e96:	bdb0      	pop	{r4, r5, r7, pc}

08004e98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <create_chain+0x2c>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d31d      	bcc.n	8004f00 <create_chain+0x68>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e01a      	b.n	8004f00 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff fdc3 	bl	8004a5c <get_fat>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d801      	bhi.n	8004ee4 <create_chain+0x4c>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e07b      	b.n	8004fdc <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	d101      	bne.n	8004eee <create_chain+0x56>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	e076      	b.n	8004fdc <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d201      	bcs.n	8004efc <create_chain+0x64>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	e06f      	b.n	8004fdc <create_chain+0x144>
		scl = clst;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d307      	bcc.n	8004f24 <create_chain+0x8c>
				ncl = 2;
 8004f14:	2302      	movs	r3, #2
 8004f16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d901      	bls.n	8004f24 <create_chain+0x8c>
 8004f20:	2300      	movs	r3, #0
 8004f22:	e05b      	b.n	8004fdc <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0011      	movs	r1, r2
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7ff fd96 	bl	8004a5c <get_fat>
 8004f30:	0003      	movs	r3, r0
 8004f32:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d002      	beq.n	8004f46 <create_chain+0xae>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	d101      	bne.n	8004f4a <create_chain+0xb2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	e048      	b.n	8004fdc <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d1d8      	bne.n	8004f04 <create_chain+0x6c>
 8004f52:	2300      	movs	r3, #0
 8004f54:	e042      	b.n	8004fdc <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8004f56:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f58:	2517      	movs	r5, #23
 8004f5a:	197c      	adds	r4, r7, r5
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	425a      	negs	r2, r3
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7ff fe23 	bl	8004bb0 <put_fat>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8004f6e:	197b      	adds	r3, r7, r5
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <create_chain+0xf6>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004f7c:	197c      	adds	r4, r7, r5
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff fe13 	bl	8004bb0 <put_fat>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f8e:	2317      	movs	r3, #23
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d116      	bne.n	8004fc6 <create_chain+0x12e>
		fs->last_clst = ncl;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	3b02      	subs	r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d804      	bhi.n	8004fb6 <create_chain+0x11e>
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	1e5a      	subs	r2, r3, #1
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	791b      	ldrb	r3, [r3, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	711a      	strb	r2, [r3, #4]
 8004fc4:	e009      	b.n	8004fda <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004fc6:	2317      	movs	r3, #23
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <create_chain+0x13e>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	425b      	negs	r3, r3
 8004fd4:	e000      	b.n	8004fd8 <create_chain+0x140>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b008      	add	sp, #32
 8004fe2:	bdb0      	pop	{r4, r5, r7, pc}

08004fe4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	0a5a      	lsrs	r2, r3, #9
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	895b      	ldrh	r3, [r3, #10]
 8005004:	0019      	movs	r1, r3
 8005006:	0010      	movs	r0, r2
 8005008:	f7fb f890 	bl	800012c <__udivsi3>
 800500c:	0003      	movs	r3, r0
 800500e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	613a      	str	r2, [r7, #16]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <clmt_clust+0x40>
 8005020:	2300      	movs	r3, #0
 8005022:	e010      	b.n	8005046 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d307      	bcc.n	800503c <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3304      	adds	r3, #4
 8005038:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800503a:	e7e9      	b.n	8005010 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800503c:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	18d3      	adds	r3, r2, r3
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b006      	add	sp, #24
 800504c:	bd80      	pop	{r7, pc}

0800504e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	039b      	lsls	r3, r3, #14
 8005064:	429a      	cmp	r2, r3
 8005066:	d203      	bcs.n	8005070 <dir_sdi+0x22>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	221f      	movs	r2, #31
 800506c:	4013      	ands	r3, r2
 800506e:	d001      	beq.n	8005074 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005070:	2302      	movs	r3, #2
 8005072:	e066      	b.n	8005142 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <dir_sdi+0x46>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d902      	bls.n	8005094 <dir_sdi+0x46>
		clst = fs->dirbase;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10c      	bne.n	80050b4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	8912      	ldrh	r2, [r2, #8]
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d301      	bcc.n	80050aa <dir_sdi+0x5c>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e04b      	b.n	8005142 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	61da      	str	r2, [r3, #28]
 80050b2:	e02c      	b.n	800510e <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	895b      	ldrh	r3, [r3, #10]
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050bc:	e01a      	b.n	80050f4 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7ff fcc9 	bl	8004a5c <get_fat>
 80050ca:	0003      	movs	r3, r0
 80050cc:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3301      	adds	r3, #1
 80050d2:	d101      	bne.n	80050d8 <dir_sdi+0x8a>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e034      	b.n	8005142 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d904      	bls.n	80050e8 <dir_sdi+0x9a>
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d301      	bcc.n	80050ec <dir_sdi+0x9e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e02a      	b.n	8005142 <dir_sdi+0xf4>
			ofs -= csz;
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d2e0      	bcs.n	80050be <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f7ff fc8e 	bl	8004a24 <clust2sect>
 8005108:	0002      	movs	r2, r0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <dir_sdi+0xd2>
 800511c:	2302      	movs	r3, #2
 800511e:	e010      	b.n	8005142 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	0a5b      	lsrs	r3, r3, #9
 8005128:	18d2      	adds	r2, r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3330      	adds	r3, #48	@ 0x30
 8005132:	001a      	movs	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	05db      	lsls	r3, r3, #23
 8005138:	0ddb      	lsrs	r3, r3, #23
 800513a:	18d2      	adds	r2, r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b006      	add	sp, #24
 8005148:	bd80      	pop	{r7, pc}

0800514a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	3320      	adds	r3, #32
 8005160:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <dir_next+0x2a>
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	039b      	lsls	r3, r3, #14
 8005170:	429a      	cmp	r2, r3
 8005172:	d301      	bcc.n	8005178 <dir_next+0x2e>
 8005174:	2304      	movs	r3, #4
 8005176:	e0ad      	b.n	80052d4 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	0ddb      	lsrs	r3, r3, #23
 800517e:	d000      	beq.n	8005182 <dir_next+0x38>
 8005180:	e09b      	b.n	80052ba <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	8912      	ldrh	r2, [r2, #8]
 800519c:	4293      	cmp	r3, r2
 800519e:	d200      	bcs.n	80051a2 <dir_next+0x58>
 80051a0:	e08b      	b.n	80052ba <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
 80051a8:	2304      	movs	r3, #4
 80051aa:	e093      	b.n	80052d4 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	0a5b      	lsrs	r3, r3, #9
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	8952      	ldrh	r2, [r2, #10]
 80051b4:	3a01      	subs	r2, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d000      	beq.n	80051bc <dir_next+0x72>
 80051ba:	e07e      	b.n	80052ba <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	0019      	movs	r1, r3
 80051c4:	0010      	movs	r0, r2
 80051c6:	f7ff fc49 	bl	8004a5c <get_fat>
 80051ca:	0003      	movs	r3, r0
 80051cc:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d801      	bhi.n	80051d8 <dir_next+0x8e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e07d      	b.n	80052d4 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3301      	adds	r3, #1
 80051dc:	d101      	bne.n	80051e2 <dir_next+0x98>
 80051de:	2301      	movs	r3, #1
 80051e0:	e078      	b.n	80052d4 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d35a      	bcc.n	80052a2 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d104      	bne.n	80051fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	61da      	str	r2, [r3, #28]
 80051f8:	2304      	movs	r3, #4
 80051fa:	e06b      	b.n	80052d4 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	0019      	movs	r1, r3
 8005204:	0010      	movs	r0, r2
 8005206:	f7ff fe47 	bl	8004e98 <create_chain>
 800520a:	0003      	movs	r3, r0
 800520c:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <dir_next+0xce>
 8005214:	2307      	movs	r3, #7
 8005216:	e05d      	b.n	80052d4 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <dir_next+0xd8>
 800521e:	2302      	movs	r3, #2
 8005220:	e058      	b.n	80052d4 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3301      	adds	r3, #1
 8005226:	d101      	bne.n	800522c <dir_next+0xe2>
 8005228:	2301      	movs	r3, #1
 800522a:	e053      	b.n	80052d4 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	0018      	movs	r0, r3
 8005230:	f7ff fafe 	bl	8004830 <sync_window>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d001      	beq.n	800523c <dir_next+0xf2>
 8005238:	2301      	movs	r3, #1
 800523a:	e04b      	b.n	80052d4 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3330      	adds	r3, #48	@ 0x30
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	2100      	movs	r1, #0
 8005246:	0018      	movs	r0, r3
 8005248:	f7ff f931 	bl	80044ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff fbe4 	bl	8004a24 <clust2sect>
 800525c:	0002      	movs	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005262:	e012      	b.n	800528a <dir_next+0x140>
						fs->wflag = 1;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f7ff fadf 	bl	8004830 <sync_window>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <dir_next+0x130>
 8005276:	2301      	movs	r3, #1
 8005278:	e02c      	b.n	80052d4 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	62da      	str	r2, [r3, #44]	@ 0x2c
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	895b      	ldrh	r3, [r3, #10]
 800528e:	001a      	movs	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4293      	cmp	r3, r2
 8005294:	d3e6      	bcc.n	8005264 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0011      	movs	r1, r2
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7ff fbb8 	bl	8004a24 <clust2sect>
 80052b4:	0002      	movs	r2, r0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3330      	adds	r3, #48	@ 0x30
 80052c4:	001a      	movs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	0ddb      	lsrs	r3, r3, #23
 80052cc:	18d2      	adds	r2, r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b006      	add	sp, #24
 80052da:	bd80      	pop	{r7, pc}

080052dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80052ec:	2517      	movs	r5, #23
 80052ee:	197c      	adds	r4, r7, r5
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2100      	movs	r1, #0
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff feaa 	bl	800504e <dir_sdi>
 80052fa:	0003      	movs	r3, r0
 80052fc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80052fe:	197b      	adds	r3, r7, r5
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d133      	bne.n	800536e <dir_alloc+0x92>
		n = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	2517      	movs	r5, #23
 8005310:	197c      	adds	r4, r7, r5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0011      	movs	r1, r2
 8005316:	0018      	movs	r0, r3
 8005318:	f7ff fad2 	bl	80048c0 <move_window>
 800531c:	0003      	movs	r3, r0
 800531e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005320:	197b      	adds	r3, r7, r5
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d121      	bne.n	800536c <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2be5      	cmp	r3, #229	@ 0xe5
 8005330:	d004      	beq.n	800533c <dir_alloc+0x60>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d102      	bne.n	8005350 <dir_alloc+0x74>
 800534a:	e010      	b.n	800536e <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005350:	2517      	movs	r5, #23
 8005352:	197c      	adds	r4, r7, r5
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2101      	movs	r1, #1
 8005358:	0018      	movs	r0, r3
 800535a:	f7ff fef6 	bl	800514a <dir_next>
 800535e:	0003      	movs	r3, r0
 8005360:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005362:	197b      	adds	r3, r7, r5
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0cf      	beq.n	800530a <dir_alloc+0x2e>
 800536a:	e000      	b.n	800536e <dir_alloc+0x92>
			if (res != FR_OK) break;
 800536c:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800536e:	2217      	movs	r2, #23
 8005370:	18bb      	adds	r3, r7, r2
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d102      	bne.n	800537e <dir_alloc+0xa2>
 8005378:	18bb      	adds	r3, r7, r2
 800537a:	2207      	movs	r2, #7
 800537c:	701a      	strb	r2, [r3, #0]
	return res;
 800537e:	2317      	movs	r3, #23
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b006      	add	sp, #24
 800538a:	bdb0      	pop	{r4, r5, r7, pc}

0800538c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	331a      	adds	r3, #26
 800539a:	0018      	movs	r0, r3
 800539c:	f7fe ffe4 	bl	8004368 <ld_word>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d109      	bne.n	80053c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7fe ffd9 	bl	8004368 <ld_word>
 80053b6:	0003      	movs	r3, r0
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}

080053ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	331a      	adds	r3, #26
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	b292      	uxth	r2, r2
 80053de:	0011      	movs	r1, r2
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fe fffd 	bl	80043e0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d109      	bne.n	8005402 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	3314      	adds	r3, #20
 80053f2:	001a      	movs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	0019      	movs	r1, r3
 80053fc:	0010      	movs	r0, r2
 80053fe:	f7fe ffef 	bl	80043e0 <st_word>
	}
}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}

0800540a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800540a:	b5b0      	push	{r4, r5, r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005418:	2517      	movs	r5, #23
 800541a:	197c      	adds	r4, r7, r5
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2100      	movs	r1, #0
 8005420:	0018      	movs	r0, r3
 8005422:	f7ff fe14 	bl	800504e <dir_sdi>
 8005426:	0003      	movs	r3, r0
 8005428:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800542a:	197b      	adds	r3, r7, r5
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <dir_find+0x2e>
 8005432:	197b      	adds	r3, r7, r5
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	e04c      	b.n	80054d2 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	2517      	movs	r5, #23
 800543e:	197c      	adds	r4, r7, r5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	0011      	movs	r1, r2
 8005444:	0018      	movs	r0, r3
 8005446:	f7ff fa3b 	bl	80048c0 <move_window>
 800544a:	0003      	movs	r3, r0
 800544c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800544e:	0029      	movs	r1, r5
 8005450:	187b      	adds	r3, r7, r1
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d136      	bne.n	80054c6 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	200f      	movs	r0, #15
 800545e:	183b      	adds	r3, r7, r0
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005464:	183b      	adds	r3, r7, r0
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d103      	bne.n	8005474 <dir_find+0x6a>
 800546c:	187b      	adds	r3, r7, r1
 800546e:	2204      	movs	r2, #4
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e02b      	b.n	80054cc <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	330b      	adds	r3, #11
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	223f      	movs	r2, #63	@ 0x3f
 800547e:	4013      	ands	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	330b      	adds	r3, #11
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	001a      	movs	r2, r3
 8005490:	2308      	movs	r3, #8
 8005492:	4013      	ands	r3, r2
 8005494:	d109      	bne.n	80054aa <dir_find+0xa0>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a18      	ldr	r0, [r3, #32]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	220b      	movs	r2, #11
 80054a0:	0019      	movs	r1, r3
 80054a2:	f7ff f81d 	bl	80044e0 <mem_cmp>
 80054a6:	1e03      	subs	r3, r0, #0
 80054a8:	d00f      	beq.n	80054ca <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054aa:	2517      	movs	r5, #23
 80054ac:	197c      	adds	r4, r7, r5
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2100      	movs	r1, #0
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7ff fe49 	bl	800514a <dir_next>
 80054b8:	0003      	movs	r3, r0
 80054ba:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80054bc:	197b      	adds	r3, r7, r5
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0b9      	beq.n	8005438 <dir_find+0x2e>
 80054c4:	e002      	b.n	80054cc <dir_find+0xc2>
		if (res != FR_OK) break;
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	e000      	b.n	80054cc <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80054ca:	46c0      	nop			@ (mov r8, r8)

	return res;
 80054cc:	2317      	movs	r3, #23
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b006      	add	sp, #24
 80054d8:	bdb0      	pop	{r4, r5, r7, pc}

080054da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054da:	b5b0      	push	{r4, r5, r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80054e8:	250f      	movs	r5, #15
 80054ea:	197c      	adds	r4, r7, r5
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2101      	movs	r1, #1
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7ff fef3 	bl	80052dc <dir_alloc>
 80054f6:	0003      	movs	r3, r0
 80054f8:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80054fa:	197b      	adds	r3, r7, r5
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11f      	bne.n	8005542 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	197c      	adds	r4, r7, r5
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f7ff f9d7 	bl	80048c0 <move_window>
 8005512:	0003      	movs	r3, r0
 8005514:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005516:	197b      	adds	r3, r7, r5
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d111      	bne.n	8005542 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	2220      	movs	r2, #32
 8005524:	2100      	movs	r1, #0
 8005526:	0018      	movs	r0, r3
 8005528:	f7fe ffc1 	bl	80044ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a18      	ldr	r0, [r3, #32]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3324      	adds	r3, #36	@ 0x24
 8005534:	220b      	movs	r2, #11
 8005536:	0019      	movs	r1, r3
 8005538:	f7fe ff9a 	bl	8004470 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2201      	movs	r2, #1
 8005540:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005542:	230f      	movs	r3, #15
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b004      	add	sp, #16
 800554e:	bdb0      	pop	{r4, r5, r7, pc}

08005550 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3324      	adds	r3, #36	@ 0x24
 8005564:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	220b      	movs	r2, #11
 800556a:	2120      	movs	r1, #32
 800556c:	0018      	movs	r0, r3
 800556e:	f7fe ff9e 	bl	80044ae <mem_set>
	si = i = 0; ni = 8;
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	2308      	movs	r3, #8
 800557c:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	18d2      	adds	r2, r2, r3
 8005588:	211b      	movs	r1, #27
 800558a:	187b      	adds	r3, r7, r1
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005590:	000a      	movs	r2, r1
 8005592:	18bb      	adds	r3, r7, r2
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b20      	cmp	r3, #32
 8005598:	d800      	bhi.n	800559c <create_name+0x4c>
 800559a:	e062      	b.n	8005662 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800559c:	18bb      	adds	r3, r7, r2
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80055a2:	d007      	beq.n	80055b4 <create_name+0x64>
 80055a4:	18bb      	adds	r3, r7, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80055aa:	d110      	bne.n	80055ce <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80055ac:	e002      	b.n	80055b4 <create_name+0x64>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	18d3      	adds	r3, r2, r3
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80055be:	d0f6      	beq.n	80055ae <create_name+0x5e>
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80055ca:	d0f0      	beq.n	80055ae <create_name+0x5e>
			break;
 80055cc:	e04a      	b.n	8005664 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80055ce:	231b      	movs	r3, #27
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d6:	d003      	beq.n	80055e0 <create_name+0x90>
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d30e      	bcc.n	80055fe <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b0b      	cmp	r3, #11
 80055e4:	d004      	beq.n	80055f0 <create_name+0xa0>
 80055e6:	231b      	movs	r3, #27
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80055ee:	d001      	beq.n	80055f4 <create_name+0xa4>
 80055f0:	2306      	movs	r3, #6
 80055f2:	e054      	b.n	800569e <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80055f4:	2308      	movs	r3, #8
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	230b      	movs	r3, #11
 80055fa:	617b      	str	r3, [r7, #20]
			continue;
 80055fc:	e030      	b.n	8005660 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80055fe:	211b      	movs	r1, #27
 8005600:	187b      	adds	r3, r7, r1
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b25b      	sxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	da07      	bge.n	800561a <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800560a:	187b      	adds	r3, r7, r1
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	3b80      	subs	r3, #128	@ 0x80
 8005610:	001a      	movs	r2, r3
 8005612:	187b      	adds	r3, r7, r1
 8005614:	4924      	ldr	r1, [pc, #144]	@ (80056a8 <create_name+0x158>)
 8005616:	5c8a      	ldrb	r2, [r1, r2]
 8005618:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800561a:	231b      	movs	r3, #27
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	781a      	ldrb	r2, [r3, #0]
 8005620:	4b22      	ldr	r3, [pc, #136]	@ (80056ac <create_name+0x15c>)
 8005622:	0011      	movs	r1, r2
 8005624:	0018      	movs	r0, r3
 8005626:	f7fe ff80 	bl	800452a <chk_chr>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d001      	beq.n	8005632 <create_name+0xe2>
 800562e:	2306      	movs	r3, #6
 8005630:	e035      	b.n	800569e <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005632:	221b      	movs	r2, #27
 8005634:	18bb      	adds	r3, r7, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b60      	cmp	r3, #96	@ 0x60
 800563a:	d908      	bls.n	800564e <create_name+0xfe>
 800563c:	18bb      	adds	r3, r7, r2
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b7a      	cmp	r3, #122	@ 0x7a
 8005642:	d804      	bhi.n	800564e <create_name+0xfe>
 8005644:	18bb      	adds	r3, r7, r2
 8005646:	18ba      	adds	r2, r7, r2
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	3a20      	subs	r2, #32
 800564c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	613a      	str	r2, [r7, #16]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	18d3      	adds	r3, r2, r3
 8005658:	221b      	movs	r2, #27
 800565a:	18ba      	adds	r2, r7, r2
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005660:	e78d      	b.n	800557e <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005662:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	18d2      	adds	r2, r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <create_name+0x128>
 8005674:	2306      	movs	r3, #6
 8005676:	e012      	b.n	800569e <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2be5      	cmp	r3, #229	@ 0xe5
 800567e:	d102      	bne.n	8005686 <create_name+0x136>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2205      	movs	r2, #5
 8005684:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005686:	231b      	movs	r3, #27
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b20      	cmp	r3, #32
 800568e:	d801      	bhi.n	8005694 <create_name+0x144>
 8005690:	2204      	movs	r2, #4
 8005692:	e000      	b.n	8005696 <create_name+0x146>
 8005694:	2200      	movs	r2, #0
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	330b      	adds	r3, #11
 800569a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800569c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b008      	add	sp, #32
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	08007870 	.word	0x08007870
 80056ac:	080077c0 	.word	0x080077c0

080056b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80056b0:	b5b0      	push	{r4, r5, r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80056c4:	e002      	b.n	80056cc <follow_path+0x1c>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80056d2:	d0f8      	beq.n	80056c6 <follow_path+0x16>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80056da:	d0f4      	beq.n	80056c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b1f      	cmp	r3, #31
 80056e8:	d80d      	bhi.n	8005706 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	222f      	movs	r2, #47	@ 0x2f
 80056ee:	2180      	movs	r1, #128	@ 0x80
 80056f0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80056f2:	2317      	movs	r3, #23
 80056f4:	18fc      	adds	r4, r7, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fca7 	bl	800504e <dir_sdi>
 8005700:	0003      	movs	r3, r0
 8005702:	7023      	strb	r3, [r4, #0]
 8005704:	e052      	b.n	80057ac <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005706:	2517      	movs	r5, #23
 8005708:	197c      	adds	r4, r7, r5
 800570a:	003a      	movs	r2, r7
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f7ff ff1d 	bl	8005550 <create_name>
 8005716:	0003      	movs	r3, r0
 8005718:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800571a:	197b      	adds	r3, r7, r5
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d13f      	bne.n	80057a2 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005722:	197c      	adds	r4, r7, r5
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff fe6f 	bl	800540a <dir_find>
 800572c:	0003      	movs	r3, r0
 800572e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8005730:	200b      	movs	r0, #11
 8005732:	183b      	adds	r3, r7, r0
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	212f      	movs	r1, #47	@ 0x2f
 8005738:	5c52      	ldrb	r2, [r2, r1]
 800573a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800573c:	197b      	adds	r3, r7, r5
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00c      	beq.n	800575e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005744:	197b      	adds	r3, r7, r5
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d12c      	bne.n	80057a6 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800574c:	183b      	adds	r3, r7, r0
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2204      	movs	r2, #4
 8005752:	4013      	ands	r3, r2
 8005754:	d127      	bne.n	80057a6 <follow_path+0xf6>
 8005756:	197b      	adds	r3, r7, r5
 8005758:	2205      	movs	r2, #5
 800575a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800575c:	e023      	b.n	80057a6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800575e:	230b      	movs	r3, #11
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2204      	movs	r2, #4
 8005766:	4013      	ands	r3, r2
 8005768:	d11f      	bne.n	80057aa <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	799b      	ldrb	r3, [r3, #6]
 800576e:	001a      	movs	r2, r3
 8005770:	2310      	movs	r3, #16
 8005772:	4013      	ands	r3, r2
 8005774:	d104      	bne.n	8005780 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8005776:	2317      	movs	r3, #23
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	2205      	movs	r2, #5
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e015      	b.n	80057ac <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3330      	adds	r3, #48	@ 0x30
 8005784:	001a      	movs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	05db      	lsls	r3, r3, #23
 800578c:	0ddb      	lsrs	r3, r3, #23
 800578e:	18d2      	adds	r2, r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	0011      	movs	r1, r2
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff fdf9 	bl	800538c <ld_clust>
 800579a:	0002      	movs	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057a0:	e7b1      	b.n	8005706 <follow_path+0x56>
			if (res != FR_OK) break;
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	e002      	b.n	80057ac <follow_path+0xfc>
				break;
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	e000      	b.n	80057ac <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057aa:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 80057ac:	2317      	movs	r3, #23
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	781b      	ldrb	r3, [r3, #0]
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b006      	add	sp, #24
 80057b8:	bdb0      	pop	{r4, r5, r7, pc}

080057ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b086      	sub	sp, #24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	425b      	negs	r3, r3
 80057c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d031      	beq.n	8005834 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e002      	b.n	80057de <get_ldnumber+0x24>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d903      	bls.n	80057ee <get_ldnumber+0x34>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80057ec:	d1f4      	bne.n	80057d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80057f4:	d11c      	bne.n	8005830 <get_ldnumber+0x76>
			tp = *path;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	60fa      	str	r2, [r7, #12]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	3b30      	subs	r3, #48	@ 0x30
 8005806:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b09      	cmp	r3, #9
 800580c:	d80e      	bhi.n	800582c <get_ldnumber+0x72>
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10a      	bne.n	800582c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <get_ldnumber+0x72>
					vol = (int)i;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3301      	adds	r3, #1
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e002      	b.n	8005836 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005834:	693b      	ldr	r3, [r7, #16]
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b006      	add	sp, #24
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	70da      	strb	r2, [r3, #3]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	4252      	negs	r2, r2
 8005856:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0011      	movs	r1, r2
 800585e:	0018      	movs	r0, r3
 8005860:	f7ff f82e 	bl	80048c0 <move_window>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <check_fs+0x2c>
 8005868:	2304      	movs	r3, #4
 800586a:	e037      	b.n	80058dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3330      	adds	r3, #48	@ 0x30
 8005870:	33ff      	adds	r3, #255	@ 0xff
 8005872:	33ff      	adds	r3, #255	@ 0xff
 8005874:	0018      	movs	r0, r3
 8005876:	f7fe fd77 	bl	8004368 <ld_word>
 800587a:	0003      	movs	r3, r0
 800587c:	001a      	movs	r2, r3
 800587e:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <check_fs+0xa4>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <check_fs+0x48>
 8005884:	2303      	movs	r3, #3
 8005886:	e029      	b.n	80058dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2230      	movs	r2, #48	@ 0x30
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	2be9      	cmp	r3, #233	@ 0xe9
 8005890:	d009      	beq.n	80058a6 <check_fs+0x66>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2230      	movs	r2, #48	@ 0x30
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	2beb      	cmp	r3, #235	@ 0xeb
 800589a:	d11e      	bne.n	80058da <check_fs+0x9a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2232      	movs	r2, #50	@ 0x32
 80058a0:	5c9b      	ldrb	r3, [r3, r2]
 80058a2:	2b90      	cmp	r3, #144	@ 0x90
 80058a4:	d119      	bne.n	80058da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3330      	adds	r3, #48	@ 0x30
 80058aa:	3336      	adds	r3, #54	@ 0x36
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7fe fd76 	bl	800439e <ld_dword>
 80058b2:	0003      	movs	r3, r0
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	4a0b      	ldr	r2, [pc, #44]	@ (80058e8 <check_fs+0xa8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <check_fs+0x82>
 80058be:	2300      	movs	r3, #0
 80058c0:	e00c      	b.n	80058dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3330      	adds	r3, #48	@ 0x30
 80058c6:	3352      	adds	r3, #82	@ 0x52
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fe fd68 	bl	800439e <ld_dword>
 80058ce:	0003      	movs	r3, r0
 80058d0:	4a06      	ldr	r2, [pc, #24]	@ (80058ec <check_fs+0xac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <check_fs+0x9a>
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80058da:	2302      	movs	r3, #2
}
 80058dc:	0018      	movs	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	b002      	add	sp, #8
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0000aa55 	.word	0x0000aa55
 80058e8:	00544146 	.word	0x00544146
 80058ec:	33544146 	.word	0x33544146

080058f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058f0:	b5b0      	push	{r4, r5, r7, lr}
 80058f2:	b096      	sub	sp, #88	@ 0x58
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	1dfb      	adds	r3, r7, #7
 80058fc:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	0018      	movs	r0, r3
 8005908:	f7ff ff57 	bl	80057ba <get_ldnumber>
 800590c:	0003      	movs	r3, r0
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005912:	2b00      	cmp	r3, #0
 8005914:	da01      	bge.n	800591a <find_volume+0x2a>
 8005916:	230b      	movs	r3, #11
 8005918:	e24b      	b.n	8005db2 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800591a:	4bcc      	ldr	r3, [pc, #816]	@ (8005c4c <find_volume+0x35c>)
 800591c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	58d3      	ldr	r3, [r2, r3]
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <find_volume+0x3e>
 800592a:	230c      	movs	r3, #12
 800592c:	e241      	b.n	8005db2 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005932:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005934:	1dfb      	adds	r3, r7, #7
 8005936:	1dfa      	adds	r2, r7, #7
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	2101      	movs	r1, #1
 800593c:	438a      	bics	r2, r1
 800593e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2537      	movs	r5, #55	@ 0x37
 800594e:	197c      	adds	r4, r7, r5
 8005950:	0018      	movs	r0, r3
 8005952:	f7fe fc3f 	bl	80041d4 <disk_status>
 8005956:	0003      	movs	r3, r0
 8005958:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800595a:	0029      	movs	r1, r5
 800595c:	187b      	adds	r3, r7, r1
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	4013      	ands	r3, r2
 8005964:	d10c      	bne.n	8005980 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005966:	1dfb      	adds	r3, r7, #7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d006      	beq.n	800597c <find_volume+0x8c>
 800596e:	187b      	adds	r3, r7, r1
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2204      	movs	r2, #4
 8005974:	4013      	ands	r3, r2
 8005976:	d001      	beq.n	800597c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8005978:	230a      	movs	r3, #10
 800597a:	e21a      	b.n	8005db2 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 800597c:	2300      	movs	r3, #0
 800597e:	e218      	b.n	8005db2 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2537      	movs	r5, #55	@ 0x37
 8005994:	197c      	adds	r4, r7, r5
 8005996:	0018      	movs	r0, r3
 8005998:	f7fe fc3e 	bl	8004218 <disk_initialize>
 800599c:	0003      	movs	r3, r0
 800599e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059a0:	197b      	adds	r3, r7, r5
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	4013      	ands	r3, r2
 80059a8:	d001      	beq.n	80059ae <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059aa:	2303      	movs	r3, #3
 80059ac:	e201      	b.n	8005db2 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059ae:	1dfb      	adds	r3, r7, #7
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <find_volume+0xd6>
 80059b6:	2337      	movs	r3, #55	@ 0x37
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	d001      	beq.n	80059c6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80059c2:	230a      	movs	r3, #10
 80059c4:	e1f5      	b.n	8005db2 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80059ca:	2557      	movs	r5, #87	@ 0x57
 80059cc:	197c      	adds	r4, r7, r5
 80059ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	0011      	movs	r1, r2
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7ff ff33 	bl	8005840 <check_fs>
 80059da:	0003      	movs	r3, r0
 80059dc:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80059de:	197b      	adds	r3, r7, r5
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d14b      	bne.n	8005a7e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059e6:	2300      	movs	r3, #0
 80059e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ea:	e01d      	b.n	8005a28 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	3330      	adds	r3, #48	@ 0x30
 80059f0:	001a      	movs	r2, r3
 80059f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	33bf      	adds	r3, #191	@ 0xbf
 80059f8:	33ff      	adds	r3, #255	@ 0xff
 80059fa:	18d3      	adds	r3, r2, r3
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	3304      	adds	r3, #4
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <find_volume+0x126>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7fe fcc6 	bl	800439e <ld_dword>
 8005a12:	0003      	movs	r3, r0
 8005a14:	e000      	b.n	8005a18 <find_volume+0x128>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2214      	movs	r2, #20
 8005a1a:	18ba      	adds	r2, r7, r2
 8005a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a1e:	0089      	lsls	r1, r1, #2
 8005a20:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a24:	3301      	adds	r3, #1
 8005a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d9de      	bls.n	80059ec <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a2e:	2300      	movs	r3, #0
 8005a30:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <find_volume+0x14e>
 8005a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a3e:	2314      	movs	r3, #20
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	58d3      	ldr	r3, [r2, r3]
 8005a48:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <find_volume+0x172>
 8005a50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	0011      	movs	r1, r2
 8005a56:	0018      	movs	r0, r3
 8005a58:	f7ff fef2 	bl	8005840 <check_fs>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	001a      	movs	r2, r3
 8005a60:	e000      	b.n	8005a64 <find_volume+0x174>
 8005a62:	2203      	movs	r2, #3
 8005a64:	2157      	movs	r1, #87	@ 0x57
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a6a:	187b      	adds	r3, r7, r1
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d905      	bls.n	8005a7e <find_volume+0x18e>
 8005a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a74:	3301      	adds	r3, #1
 8005a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d9df      	bls.n	8005a3e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a7e:	2357      	movs	r3, #87	@ 0x57
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d101      	bne.n	8005a8c <find_volume+0x19c>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e192      	b.n	8005db2 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a8c:	2357      	movs	r3, #87	@ 0x57
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d901      	bls.n	8005a9a <find_volume+0x1aa>
 8005a96:	230d      	movs	r3, #13
 8005a98:	e18b      	b.n	8005db2 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	3330      	adds	r3, #48	@ 0x30
 8005a9e:	330b      	adds	r3, #11
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7fe fc61 	bl	8004368 <ld_word>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	001a      	movs	r2, r3
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <find_volume+0x1c6>
 8005ab2:	230d      	movs	r3, #13
 8005ab4:	e17d      	b.n	8005db2 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	3330      	adds	r3, #48	@ 0x30
 8005aba:	3316      	adds	r3, #22
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fe fc53 	bl	8004368 <ld_word>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <find_volume+0x1ec>
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	3330      	adds	r3, #48	@ 0x30
 8005ad0:	3324      	adds	r3, #36	@ 0x24
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7fe fc63 	bl	800439e <ld_dword>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ae0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	2240      	movs	r2, #64	@ 0x40
 8005ae6:	5c9a      	ldrb	r2, [r3, r2]
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	789b      	ldrb	r3, [r3, #2]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d005      	beq.n	8005b00 <find_volume+0x210>
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	789b      	ldrb	r3, [r3, #2]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d001      	beq.n	8005b00 <find_volume+0x210>
 8005afc:	230d      	movs	r3, #13
 8005afe:	e158      	b.n	8005db2 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	001a      	movs	r2, r3
 8005b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b08:	4353      	muls	r3, r2
 8005b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	223d      	movs	r2, #61	@ 0x3d
 8005b10:	5c9b      	ldrb	r3, [r3, r2]
 8005b12:	001a      	movs	r2, r3
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <find_volume+0x240>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	895b      	ldrh	r3, [r3, #10]
 8005b24:	001a      	movs	r2, r3
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d001      	beq.n	8005b34 <find_volume+0x244>
 8005b30:	230d      	movs	r3, #13
 8005b32:	e13e      	b.n	8005db2 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	3330      	adds	r3, #48	@ 0x30
 8005b38:	3311      	adds	r3, #17
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fe fc14 	bl	8004368 <ld_word>
 8005b40:	0003      	movs	r3, r0
 8005b42:	001a      	movs	r2, r3
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	891b      	ldrh	r3, [r3, #8]
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <find_volume+0x26a>
 8005b56:	230d      	movs	r3, #13
 8005b58:	e12b      	b.n	8005db2 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	3330      	adds	r3, #48	@ 0x30
 8005b5e:	3313      	adds	r3, #19
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7fe fc01 	bl	8004368 <ld_word>
 8005b66:	0003      	movs	r3, r0
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <find_volume+0x290>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	3330      	adds	r3, #48	@ 0x30
 8005b74:	3320      	adds	r3, #32
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fe fc11 	bl	800439e <ld_dword>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	3330      	adds	r3, #48	@ 0x30
 8005b84:	330e      	adds	r3, #14
 8005b86:	252e      	movs	r5, #46	@ 0x2e
 8005b88:	197c      	adds	r4, r7, r5
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7fe fbec 	bl	8004368 <ld_word>
 8005b90:	0003      	movs	r3, r0
 8005b92:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b94:	197b      	adds	r3, r7, r5
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <find_volume+0x2b0>
 8005b9c:	230d      	movs	r3, #13
 8005b9e:	e108      	b.n	8005db2 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005ba0:	232e      	movs	r3, #46	@ 0x2e
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba8:	18d3      	adds	r3, r2, r3
 8005baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bac:	8912      	ldrh	r2, [r2, #8]
 8005bae:	0912      	lsrs	r2, r2, #4
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d201      	bcs.n	8005bc2 <find_volume+0x2d2>
 8005bbe:	230d      	movs	r3, #13
 8005bc0:	e0f7      	b.n	8005db2 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bca:	895b      	ldrh	r3, [r3, #10]
 8005bcc:	0019      	movs	r1, r3
 8005bce:	0010      	movs	r0, r2
 8005bd0:	f7fa faac 	bl	800012c <__udivsi3>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <find_volume+0x2f2>
 8005bde:	230d      	movs	r3, #13
 8005be0:	e0e7      	b.n	8005db2 <find_volume+0x4c2>
		fmt = FS_FAT32;
 8005be2:	2157      	movs	r1, #87	@ 0x57
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	2203      	movs	r2, #3
 8005be8:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	4a18      	ldr	r2, [pc, #96]	@ (8005c50 <find_volume+0x360>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d802      	bhi.n	8005bf8 <find_volume+0x308>
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <find_volume+0x364>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d803      	bhi.n	8005c08 <find_volume+0x318>
 8005c00:	2357      	movs	r3, #87	@ 0x57
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c14:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c16:	232e      	movs	r3, #46	@ 0x2e
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c1e:	18d2      	adds	r2, r2, r3
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005c24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	18d2      	adds	r2, r2, r3
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005c2e:	2357      	movs	r3, #87	@ 0x57
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d123      	bne.n	8005c80 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	3330      	adds	r3, #48	@ 0x30
 8005c3c:	332a      	adds	r3, #42	@ 0x2a
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7fe fb92 	bl	8004368 <ld_word>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d007      	beq.n	8005c58 <find_volume+0x368>
 8005c48:	230d      	movs	r3, #13
 8005c4a:	e0b2      	b.n	8005db2 <find_volume+0x4c2>
 8005c4c:	2000028c 	.word	0x2000028c
 8005c50:	0000fff5 	.word	0x0000fff5
 8005c54:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	891b      	ldrh	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <find_volume+0x374>
 8005c60:	230d      	movs	r3, #13
 8005c62:	e0a6      	b.n	8005db2 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	3330      	adds	r3, #48	@ 0x30
 8005c68:	332c      	adds	r3, #44	@ 0x2c
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7fe fb97 	bl	800439e <ld_dword>
 8005c70:	0002      	movs	r2, r0
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	e020      	b.n	8005cc2 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	891b      	ldrh	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <find_volume+0x39c>
 8005c88:	230d      	movs	r3, #13
 8005c8a:	e092      	b.n	8005db2 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c92:	18d2      	adds	r2, r2, r3
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c98:	2357      	movs	r3, #87	@ 0x57
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <find_volume+0x3ba>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	e00a      	b.n	8005cc0 <find_volume+0x3d0>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	0013      	movs	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	085a      	lsrs	r2, r3, #1
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	400b      	ands	r3, r1
 8005cbe:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005cc0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc8:	493c      	ldr	r1, [pc, #240]	@ (8005dbc <find_volume+0x4cc>)
 8005cca:	468c      	mov	ip, r1
 8005ccc:	4463      	add	r3, ip
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d201      	bcs.n	8005cd8 <find_volume+0x3e8>
 8005cd4:	230d      	movs	r3, #13
 8005cd6:	e06c      	b.n	8005db2 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4252      	negs	r2, r2
 8005cde:	611a      	str	r2, [r3, #16]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005cee:	2357      	movs	r3, #87	@ 0x57
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d148      	bne.n	8005d8a <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	3330      	adds	r3, #48	@ 0x30
 8005cfc:	3330      	adds	r3, #48	@ 0x30
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7fe fb32 	bl	8004368 <ld_word>
 8005d04:	0003      	movs	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d13f      	bne.n	8005d8a <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7fe fdd4 	bl	80048c0 <move_window>
 8005d18:	1e03      	subs	r3, r0, #0
 8005d1a:	d136      	bne.n	8005d8a <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	2200      	movs	r2, #0
 8005d20:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	3330      	adds	r3, #48	@ 0x30
 8005d26:	33ff      	adds	r3, #255	@ 0xff
 8005d28:	33ff      	adds	r3, #255	@ 0xff
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7fe fb1c 	bl	8004368 <ld_word>
 8005d30:	0003      	movs	r3, r0
 8005d32:	001a      	movs	r2, r3
 8005d34:	4b22      	ldr	r3, [pc, #136]	@ (8005dc0 <find_volume+0x4d0>)
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d127      	bne.n	8005d8a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	3330      	adds	r3, #48	@ 0x30
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe fb2d 	bl	800439e <ld_dword>
 8005d44:	0003      	movs	r3, r0
 8005d46:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc4 <find_volume+0x4d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d11e      	bne.n	8005d8a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	3330      	adds	r3, #48	@ 0x30
 8005d50:	33e5      	adds	r3, #229	@ 0xe5
 8005d52:	33ff      	adds	r3, #255	@ 0xff
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7fe fb22 	bl	800439e <ld_dword>
 8005d5a:	0003      	movs	r3, r0
 8005d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc8 <find_volume+0x4d8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d113      	bne.n	8005d8a <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	3330      	adds	r3, #48	@ 0x30
 8005d66:	33e9      	adds	r3, #233	@ 0xe9
 8005d68:	33ff      	adds	r3, #255	@ 0xff
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fe fb17 	bl	800439e <ld_dword>
 8005d70:	0002      	movs	r2, r0
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	3330      	adds	r3, #48	@ 0x30
 8005d7a:	33ed      	adds	r3, #237	@ 0xed
 8005d7c:	33ff      	adds	r3, #255	@ 0xff
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7fe fb0d 	bl	800439e <ld_dword>
 8005d84:	0002      	movs	r2, r0
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2257      	movs	r2, #87	@ 0x57
 8005d8e:	18ba      	adds	r2, r7, r2
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005d94:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <find_volume+0x4dc>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <find_volume+0x4dc>)
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <find_volume+0x4dc>)
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	0018      	movs	r0, r3
 8005dac:	f7fe fd20 	bl	80047f0 <clear_lock>
#endif
	return FR_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b016      	add	sp, #88	@ 0x58
 8005db8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	000001ff 	.word	0x000001ff
 8005dc0:	0000aa55 	.word	0x0000aa55
 8005dc4:	41615252 	.word	0x41615252
 8005dc8:	61417272 	.word	0x61417272
 8005dcc:	20000290 	.word	0x20000290

08005dd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005dda:	240f      	movs	r4, #15
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	2209      	movs	r2, #9
 8005de0:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01d      	beq.n	8005e24 <validate+0x54>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <validate+0x54>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d014      	beq.n	8005e24 <validate+0x54>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	889a      	ldrh	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	88db      	ldrh	r3, [r3, #6]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d10d      	bne.n	8005e24 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7fe f9e0 	bl	80041d4 <disk_status>
 8005e14:	0003      	movs	r3, r0
 8005e16:	001a      	movs	r2, r3
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d102      	bne.n	8005e24 <validate+0x54>
			res = FR_OK;
 8005e1e:	193b      	adds	r3, r7, r4
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e24:	230f      	movs	r3, #15
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <validate+0x64>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	e000      	b.n	8005e36 <validate+0x66>
 8005e34:	2200      	movs	r2, #0
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	601a      	str	r2, [r3, #0]
	return res;
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	781b      	ldrb	r3, [r3, #0]
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b005      	add	sp, #20
 8005e46:	bd90      	pop	{r4, r7, pc}

08005e48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e48:	b5b0      	push	{r4, r5, r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	1dfb      	adds	r3, r7, #7
 8005e54:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f7ff fcab 	bl	80057ba <get_ldnumber>
 8005e64:	0003      	movs	r3, r0
 8005e66:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da01      	bge.n	8005e72 <f_mount+0x2a>
 8005e6e:	230b      	movs	r3, #11
 8005e70:	e030      	b.n	8005ed4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e72:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <f_mount+0x94>)
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	58d3      	ldr	r3, [r2, r3]
 8005e7a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7fe fcb3 	bl	80047f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <f_mount+0x94>)
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <f_mount+0x6c>
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <f_mount+0x70>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e00d      	b.n	8005ed4 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005eb8:	2517      	movs	r5, #23
 8005eba:	197c      	adds	r4, r7, r5
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	18f9      	adds	r1, r7, r3
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7ff fd12 	bl	80058f0 <find_volume>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8005ed0:	197b      	adds	r3, r7, r5
 8005ed2:	781b      	ldrb	r3, [r3, #0]
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b008      	add	sp, #32
 8005eda:	bdb0      	pop	{r4, r5, r7, pc}
 8005edc:	2000028c 	.word	0x2000028c

08005ee0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	b099      	sub	sp, #100	@ 0x64
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	1dfb      	adds	r3, r7, #7
 8005eec:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <f_open+0x18>
 8005ef4:	2309      	movs	r3, #9
 8005ef6:	e1e3      	b.n	80062c0 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005ef8:	1dfb      	adds	r3, r7, #7
 8005efa:	1dfa      	adds	r2, r7, #7
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	213f      	movs	r1, #63	@ 0x3f
 8005f00:	400a      	ands	r2, r1
 8005f02:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8005f04:	255f      	movs	r5, #95	@ 0x5f
 8005f06:	197c      	adds	r4, r7, r5
 8005f08:	1dfb      	adds	r3, r7, #7
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	18f9      	adds	r1, r7, r3
 8005f10:	2308      	movs	r3, #8
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7ff fceb 	bl	80058f0 <find_volume>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005f1e:	197b      	adds	r3, r7, r5
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <f_open+0x48>
 8005f26:	e1c0      	b.n	80062aa <f_open+0x3ca>
		dj.obj.fs = fs;
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	2614      	movs	r6, #20
 8005f2c:	19bb      	adds	r3, r7, r6
 8005f2e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	197c      	adds	r4, r7, r5
 8005f34:	19bb      	adds	r3, r7, r6
 8005f36:	0011      	movs	r1, r2
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7ff fbb9 	bl	80056b0 <follow_path>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f42:	0029      	movs	r1, r5
 8005f44:	197b      	adds	r3, r7, r5
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11b      	bne.n	8005f84 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f4c:	19bb      	adds	r3, r7, r6
 8005f4e:	222f      	movs	r2, #47	@ 0x2f
 8005f50:	5c9b      	ldrb	r3, [r3, r2]
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da03      	bge.n	8005f60 <f_open+0x80>
				res = FR_INVALID_NAME;
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	2206      	movs	r2, #6
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e011      	b.n	8005f84 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f60:	1dfb      	adds	r3, r7, #7
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	429a      	cmp	r2, r3
 8005f68:	419b      	sbcs	r3, r3
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	001a      	movs	r2, r3
 8005f70:	235f      	movs	r3, #95	@ 0x5f
 8005f72:	18fc      	adds	r4, r7, r3
 8005f74:	2314      	movs	r3, #20
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	0011      	movs	r1, r2
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7fe faee 	bl	800455c <chk_lock>
 8005f80:	0003      	movs	r3, r0
 8005f82:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	221c      	movs	r2, #28
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d100      	bne.n	8005f90 <f_open+0xb0>
 8005f8e:	e096      	b.n	80060be <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8005f90:	225f      	movs	r2, #95	@ 0x5f
 8005f92:	18bb      	adds	r3, r7, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01a      	beq.n	8005fd0 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005f9a:	18bb      	adds	r3, r7, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d10f      	bne.n	8005fc2 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fa2:	f7fe fb33 	bl	800460c <enq_lock>
 8005fa6:	1e03      	subs	r3, r0, #0
 8005fa8:	d007      	beq.n	8005fba <f_open+0xda>
 8005faa:	2314      	movs	r3, #20
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff fa93 	bl	80054da <dir_register>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	e000      	b.n	8005fbc <f_open+0xdc>
 8005fba:	2212      	movs	r2, #18
 8005fbc:	235f      	movs	r3, #95	@ 0x5f
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fc2:	1dfb      	adds	r3, r7, #7
 8005fc4:	1dfa      	adds	r2, r7, #7
 8005fc6:	7812      	ldrb	r2, [r2, #0]
 8005fc8:	2108      	movs	r1, #8
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e014      	b.n	8005ffa <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005fd0:	2314      	movs	r3, #20
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	799b      	ldrb	r3, [r3, #6]
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	2311      	movs	r3, #17
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <f_open+0x108>
					res = FR_DENIED;
 8005fde:	235f      	movs	r3, #95	@ 0x5f
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	2207      	movs	r2, #7
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e008      	b.n	8005ffa <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005fe8:	1dfb      	adds	r3, r7, #7
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2204      	movs	r2, #4
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <f_open+0x11a>
 8005ff2:	235f      	movs	r3, #95	@ 0x5f
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ffa:	245f      	movs	r4, #95	@ 0x5f
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d000      	beq.n	8006006 <f_open+0x126>
 8006004:	e07b      	b.n	80060fe <f_open+0x21e>
 8006006:	1dfb      	adds	r3, r7, #7
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2208      	movs	r2, #8
 800600c:	4013      	ands	r3, r2
 800600e:	d100      	bne.n	8006012 <f_open+0x132>
 8006010:	e075      	b.n	80060fe <f_open+0x21e>
				dw = GET_FATTIME();
 8006012:	f7fd fb03 	bl	800361c <get_fattime>
 8006016:	0003      	movs	r3, r0
 8006018:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800601a:	2514      	movs	r5, #20
 800601c:	197b      	adds	r3, r7, r5
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	330e      	adds	r3, #14
 8006022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006024:	0011      	movs	r1, r2
 8006026:	0018      	movs	r0, r3
 8006028:	f7fe f9f8 	bl	800441c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800602c:	197b      	adds	r3, r7, r5
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	3316      	adds	r3, #22
 8006032:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f7fe f9f0 	bl	800441c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800603c:	197b      	adds	r3, r7, r5
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	330b      	adds	r3, #11
 8006042:	2220      	movs	r2, #32
 8006044:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	197b      	adds	r3, r7, r5
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	0019      	movs	r1, r3
 800604e:	0010      	movs	r0, r2
 8006050:	f7ff f99c 	bl	800538c <ld_clust>
 8006054:	0003      	movs	r3, r0
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006058:	6938      	ldr	r0, [r7, #16]
 800605a:	197b      	adds	r3, r7, r5
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	2200      	movs	r2, #0
 8006060:	0019      	movs	r1, r3
 8006062:	f7ff f9b2 	bl	80053ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006066:	197b      	adds	r3, r7, r5
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	331c      	adds	r3, #28
 800606c:	2100      	movs	r1, #0
 800606e:	0018      	movs	r0, r3
 8006070:	f7fe f9d4 	bl	800441c <st_dword>
					fs->wflag = 1;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2201      	movs	r2, #1
 8006078:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800607a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03e      	beq.n	80060fe <f_open+0x21e>
						dw = fs->winsect;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006086:	0026      	movs	r6, r4
 8006088:	193c      	adds	r4, r7, r4
 800608a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800608c:	197b      	adds	r3, r7, r5
 800608e:	2200      	movs	r2, #0
 8006090:	0018      	movs	r0, r3
 8006092:	f7fe fe8e 	bl	8004db2 <remove_chain>
 8006096:	0003      	movs	r3, r0
 8006098:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800609a:	19bb      	adds	r3, r7, r6
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d12d      	bne.n	80060fe <f_open+0x21e>
							res = move_window(fs, dw);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	19bc      	adds	r4, r7, r6
 80060a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80060a8:	0011      	movs	r1, r2
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7fe fc08 	bl	80048c0 <move_window>
 80060b0:	0003      	movs	r3, r0
 80060b2:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060b8:	3a01      	subs	r2, #1
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	e01f      	b.n	80060fe <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060be:	215f      	movs	r1, #95	@ 0x5f
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11a      	bne.n	80060fe <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060c8:	2314      	movs	r3, #20
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	799b      	ldrb	r3, [r3, #6]
 80060ce:	001a      	movs	r2, r3
 80060d0:	2310      	movs	r3, #16
 80060d2:	4013      	ands	r3, r2
 80060d4:	d003      	beq.n	80060de <f_open+0x1fe>
					res = FR_NO_FILE;
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	2204      	movs	r2, #4
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e00f      	b.n	80060fe <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060de:	1dfb      	adds	r3, r7, #7
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2202      	movs	r2, #2
 80060e4:	4013      	ands	r3, r2
 80060e6:	d00a      	beq.n	80060fe <f_open+0x21e>
 80060e8:	2314      	movs	r3, #20
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	799b      	ldrb	r3, [r3, #6]
 80060ee:	001a      	movs	r2, r3
 80060f0:	2301      	movs	r3, #1
 80060f2:	4013      	ands	r3, r2
 80060f4:	d003      	beq.n	80060fe <f_open+0x21e>
						res = FR_DENIED;
 80060f6:	235f      	movs	r3, #95	@ 0x5f
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	2207      	movs	r2, #7
 80060fc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80060fe:	235f      	movs	r3, #95	@ 0x5f
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d12b      	bne.n	8006160 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006108:	1dfb      	adds	r3, r7, #7
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2208      	movs	r2, #8
 800610e:	4013      	ands	r3, r2
 8006110:	d005      	beq.n	800611e <f_open+0x23e>
				mode |= FA_MODIFIED;
 8006112:	1dfb      	adds	r3, r7, #7
 8006114:	1dfa      	adds	r2, r7, #7
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	2140      	movs	r1, #64	@ 0x40
 800611a:	430a      	orrs	r2, r1
 800611c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006126:	2114      	movs	r1, #20
 8006128:	187b      	adds	r3, r7, r1
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006130:	1dfb      	adds	r3, r7, #7
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	429a      	cmp	r2, r3
 8006138:	419b      	sbcs	r3, r3
 800613a:	425b      	negs	r3, r3
 800613c:	b2db      	uxtb	r3, r3
 800613e:	001a      	movs	r2, r3
 8006140:	187b      	adds	r3, r7, r1
 8006142:	0011      	movs	r1, r2
 8006144:	0018      	movs	r0, r3
 8006146:	f7fe fa7f 	bl	8004648 <inc_lock>
 800614a:	0002      	movs	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <f_open+0x280>
 8006158:	235f      	movs	r3, #95	@ 0x5f
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2202      	movs	r2, #2
 800615e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006160:	235f      	movs	r3, #95	@ 0x5f
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d000      	beq.n	800616c <f_open+0x28c>
 800616a:	e09e      	b.n	80062aa <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	2414      	movs	r4, #20
 8006170:	193b      	adds	r3, r7, r4
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	0019      	movs	r1, r3
 8006176:	0010      	movs	r0, r2
 8006178:	f7ff f908 	bl	800538c <ld_clust>
 800617c:	0002      	movs	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006182:	193b      	adds	r3, r7, r4
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	331c      	adds	r3, #28
 8006188:	0018      	movs	r0, r3
 800618a:	f7fe f908 	bl	800439e <ld_dword>
 800618e:	0002      	movs	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	88da      	ldrh	r2, [r3, #6]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1dfa      	adds	r2, r7, #7
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3330      	adds	r3, #48	@ 0x30
 80061c6:	2280      	movs	r2, #128	@ 0x80
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	2100      	movs	r1, #0
 80061cc:	0018      	movs	r0, r3
 80061ce:	f7fe f96e 	bl	80044ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061d2:	1dfb      	adds	r3, r7, #7
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2220      	movs	r2, #32
 80061d8:	4013      	ands	r3, r2
 80061da:	d066      	beq.n	80062aa <f_open+0x3ca>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d062      	beq.n	80062aa <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	895b      	ldrh	r3, [r3, #10]
 80061f0:	025b      	lsls	r3, r3, #9
 80061f2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006200:	e019      	b.n	8006236 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006206:	0011      	movs	r1, r2
 8006208:	0018      	movs	r0, r3
 800620a:	f7fe fc27 	bl	8004a5c <get_fat>
 800620e:	0003      	movs	r3, r0
 8006210:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006214:	2b01      	cmp	r3, #1
 8006216:	d803      	bhi.n	8006220 <f_open+0x340>
 8006218:	235f      	movs	r3, #95	@ 0x5f
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2202      	movs	r2, #2
 800621e:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006222:	3301      	adds	r3, #1
 8006224:	d103      	bne.n	800622e <f_open+0x34e>
 8006226:	235f      	movs	r3, #95	@ 0x5f
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800622e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	657b      	str	r3, [r7, #84]	@ 0x54
 8006236:	235f      	movs	r3, #95	@ 0x5f
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <f_open+0x368>
 8006240:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006244:	429a      	cmp	r2, r3
 8006246:	d8dc      	bhi.n	8006202 <f_open+0x322>
				}
				fp->clust = clst;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800624c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800624e:	245f      	movs	r4, #95	@ 0x5f
 8006250:	193b      	adds	r3, r7, r4
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d128      	bne.n	80062aa <f_open+0x3ca>
 8006258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800625a:	05db      	lsls	r3, r3, #23
 800625c:	0ddb      	lsrs	r3, r3, #23
 800625e:	d024      	beq.n	80062aa <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006264:	0011      	movs	r1, r2
 8006266:	0018      	movs	r0, r3
 8006268:	f7fe fbdc 	bl	8004a24 <clust2sect>
 800626c:	0003      	movs	r3, r0
 800626e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <f_open+0x39e>
						res = FR_INT_ERR;
 8006276:	193b      	adds	r3, r7, r4
 8006278:	2202      	movs	r2, #2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e015      	b.n	80062aa <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800627e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006280:	0a5a      	lsrs	r2, r3, #9
 8006282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006284:	18d2      	adds	r2, r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	7858      	ldrb	r0, [r3, #1]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3330      	adds	r3, #48	@ 0x30
 8006292:	0019      	movs	r1, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	2301      	movs	r3, #1
 800629a:	f7fd ffed 	bl	8004278 <disk_read>
 800629e:	1e03      	subs	r3, r0, #0
 80062a0:	d003      	beq.n	80062aa <f_open+0x3ca>
 80062a2:	235f      	movs	r3, #95	@ 0x5f
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80062aa:	235f      	movs	r3, #95	@ 0x5f
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <f_open+0x3da>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80062ba:	235f      	movs	r3, #95	@ 0x5f
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	781b      	ldrb	r3, [r3, #0]
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b019      	add	sp, #100	@ 0x64
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b08e      	sub	sp, #56	@ 0x38
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2537      	movs	r5, #55	@ 0x37
 80062e4:	197c      	adds	r4, r7, r5
 80062e6:	2214      	movs	r2, #20
 80062e8:	18ba      	adds	r2, r7, r2
 80062ea:	0011      	movs	r1, r2
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff fd6f 	bl	8005dd0 <validate>
 80062f2:	0003      	movs	r3, r0
 80062f4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062f6:	197b      	adds	r3, r7, r5
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d107      	bne.n	800630e <f_read+0x46>
 80062fe:	197b      	adds	r3, r7, r5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	7d52      	ldrb	r2, [r2, #21]
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	197b      	adds	r3, r7, r5
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <f_read+0x4e>
 800630e:	2337      	movs	r3, #55	@ 0x37
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	e115      	b.n	8006542 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	001a      	movs	r2, r3
 800631c:	2301      	movs	r3, #1
 800631e:	4013      	ands	r3, r2
 8006320:	d101      	bne.n	8006326 <f_read+0x5e>
 8006322:	2307      	movs	r3, #7
 8006324:	e10d      	b.n	8006542 <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	429a      	cmp	r2, r3
 8006338:	d800      	bhi.n	800633c <f_read+0x74>
 800633a:	e0fd      	b.n	8006538 <f_read+0x270>
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006340:	e0fa      	b.n	8006538 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	05db      	lsls	r3, r3, #23
 8006348:	0ddb      	lsrs	r3, r3, #23
 800634a:	d000      	beq.n	800634e <f_read+0x86>
 800634c:	e0c5      	b.n	80064da <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	0a5b      	lsrs	r3, r3, #9
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	8952      	ldrh	r2, [r2, #10]
 8006358:	3a01      	subs	r2, #1
 800635a:	4013      	ands	r3, r2
 800635c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d131      	bne.n	80063c8 <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
 8006372:	e016      	b.n	80063a2 <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f7fe fe2d 	bl	8004fe4 <clmt_clust>
 800638a:	0003      	movs	r3, r0
 800638c:	633b      	str	r3, [r7, #48]	@ 0x30
 800638e:	e008      	b.n	80063a2 <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	0019      	movs	r1, r3
 8006398:	0010      	movs	r0, r2
 800639a:	f7fe fb5f 	bl	8004a5c <get_fat>
 800639e:	0003      	movs	r3, r0
 80063a0:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d804      	bhi.n	80063b2 <f_read+0xea>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2202      	movs	r2, #2
 80063ac:	755a      	strb	r2, [r3, #21]
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0c7      	b.n	8006542 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	3301      	adds	r3, #1
 80063b6:	d104      	bne.n	80063c2 <f_read+0xfa>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	755a      	strb	r2, [r3, #21]
 80063be:	2301      	movs	r3, #1
 80063c0:	e0bf      	b.n	8006542 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	0019      	movs	r1, r3
 80063d0:	0010      	movs	r0, r2
 80063d2:	f7fe fb27 	bl	8004a24 <clust2sect>
 80063d6:	0003      	movs	r3, r0
 80063d8:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <f_read+0x122>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2202      	movs	r2, #2
 80063e4:	755a      	strb	r2, [r3, #21]
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0ab      	b.n	8006542 <f_read+0x27a>
			sect += csect;
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	18d3      	adds	r3, r2, r3
 80063f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0a5b      	lsrs	r3, r3, #9
 80063f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d038      	beq.n	8006470 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	8952      	ldrh	r2, [r2, #10]
 8006408:	4293      	cmp	r3, r2
 800640a:	d905      	bls.n	8006418 <f_read+0x150>
					cc = fs->csize - csect;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	895b      	ldrh	r3, [r3, #10]
 8006410:	001a      	movs	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	7858      	ldrb	r0, [r3, #1]
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006422:	f7fd ff29 	bl	8004278 <disk_read>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d004      	beq.n	8006434 <f_read+0x16c>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	755a      	strb	r2, [r3, #21]
 8006430:	2301      	movs	r3, #1
 8006432:	e086      	b.n	8006542 <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	7d1b      	ldrb	r3, [r3, #20]
 8006438:	b25b      	sxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	da14      	bge.n	8006468 <f_read+0x1a0>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1a      	ldr	r2, [r3, #32]
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006448:	429a      	cmp	r2, r3
 800644a:	d90d      	bls.n	8006468 <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	025b      	lsls	r3, r3, #9
 8006456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006458:	18d0      	adds	r0, r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3330      	adds	r3, #48	@ 0x30
 800645e:	2280      	movs	r2, #128	@ 0x80
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	0019      	movs	r1, r3
 8006464:	f7fe f804 	bl	8004470 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	025b      	lsls	r3, r3, #9
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800646e:	e04f      	b.n	8006510 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d02c      	beq.n	80064d4 <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	7d1b      	ldrb	r3, [r3, #20]
 800647e:	b25b      	sxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	da17      	bge.n	80064b4 <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	7858      	ldrb	r0, [r3, #1]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3330      	adds	r3, #48	@ 0x30
 800648c:	0019      	movs	r1, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	2301      	movs	r3, #1
 8006494:	f7fd ff18 	bl	80042c8 <disk_write>
 8006498:	1e03      	subs	r3, r0, #0
 800649a:	d004      	beq.n	80064a6 <f_read+0x1de>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	755a      	strb	r2, [r3, #21]
 80064a2:	2301      	movs	r3, #1
 80064a4:	e04d      	b.n	8006542 <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	7d1b      	ldrb	r3, [r3, #20]
 80064aa:	227f      	movs	r2, #127	@ 0x7f
 80064ac:	4013      	ands	r3, r2
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	7858      	ldrb	r0, [r3, #1]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3330      	adds	r3, #48	@ 0x30
 80064bc:	0019      	movs	r1, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	2301      	movs	r3, #1
 80064c2:	f7fd fed9 	bl	8004278 <disk_read>
 80064c6:	1e03      	subs	r3, r0, #0
 80064c8:	d004      	beq.n	80064d4 <f_read+0x20c>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	755a      	strb	r2, [r3, #21]
 80064d0:	2301      	movs	r3, #1
 80064d2:	e036      	b.n	8006542 <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	0ddb      	lsrs	r3, r3, #23
 80064e2:	2280      	movs	r2, #128	@ 0x80
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80064ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d901      	bls.n	80064f6 <f_read+0x22e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3330      	adds	r3, #48	@ 0x30
 80064fa:	001a      	movs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	05db      	lsls	r3, r3, #23
 8006502:	0ddb      	lsrs	r3, r3, #23
 8006504:	18d1      	adds	r1, r2, r3
 8006506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	0018      	movs	r0, r3
 800650c:	f7fd ffb0 	bl	8004470 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	18d3      	adds	r3, r2, r3
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	18d2      	adds	r2, r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	619a      	str	r2, [r3, #24]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	18d2      	adds	r2, r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d000      	beq.n	8006540 <f_read+0x278>
 800653e:	e700      	b.n	8006342 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006540:	2300      	movs	r3, #0
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b00e      	add	sp, #56	@ 0x38
 8006548:	bdb0      	pop	{r4, r5, r7, pc}

0800654a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800654a:	b5b0      	push	{r4, r5, r7, lr}
 800654c:	b08c      	sub	sp, #48	@ 0x30
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	252f      	movs	r5, #47	@ 0x2f
 8006566:	197c      	adds	r4, r7, r5
 8006568:	2210      	movs	r2, #16
 800656a:	18ba      	adds	r2, r7, r2
 800656c:	0011      	movs	r1, r2
 800656e:	0018      	movs	r0, r3
 8006570:	f7ff fc2e 	bl	8005dd0 <validate>
 8006574:	0003      	movs	r3, r0
 8006576:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006578:	197b      	adds	r3, r7, r5
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d107      	bne.n	8006590 <f_write+0x46>
 8006580:	197b      	adds	r3, r7, r5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	7d52      	ldrb	r2, [r2, #21]
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	197b      	adds	r3, r7, r5
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <f_write+0x4e>
 8006590:	232f      	movs	r3, #47	@ 0x2f
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	e14e      	b.n	8006836 <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7d1b      	ldrb	r3, [r3, #20]
 800659c:	001a      	movs	r2, r3
 800659e:	2302      	movs	r3, #2
 80065a0:	4013      	ands	r3, r2
 80065a2:	d101      	bne.n	80065a8 <f_write+0x5e>
 80065a4:	2307      	movs	r3, #7
 80065a6:	e146      	b.n	8006836 <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	18d2      	adds	r2, r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d300      	bcc.n	80065ba <f_write+0x70>
 80065b8:	e12f      	b.n	800681a <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	43db      	mvns	r3, r3
 80065c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80065c2:	e12a      	b.n	800681a <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	05db      	lsls	r3, r3, #23
 80065ca:	0ddb      	lsrs	r3, r3, #23
 80065cc:	d000      	beq.n	80065d0 <f_write+0x86>
 80065ce:	e0e3      	b.n	8006798 <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	0a5b      	lsrs	r3, r3, #9
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	8952      	ldrh	r2, [r2, #10]
 80065da:	3a01      	subs	r2, #1
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d146      	bne.n	8006674 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10d      	bne.n	800660a <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11e      	bne.n	8006638 <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2100      	movs	r1, #0
 80065fe:	0018      	movs	r0, r3
 8006600:	f7fe fc4a 	bl	8004e98 <create_chain>
 8006604:	0003      	movs	r3, r0
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006608:	e016      	b.n	8006638 <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	0011      	movs	r1, r2
 800661a:	0018      	movs	r0, r3
 800661c:	f7fe fce2 	bl	8004fe4 <clmt_clust>
 8006620:	0003      	movs	r3, r0
 8006622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006624:	e008      	b.n	8006638 <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	0019      	movs	r1, r3
 800662e:	0010      	movs	r0, r2
 8006630:	f7fe fc32 	bl	8004e98 <create_chain>
 8006634:	0003      	movs	r3, r0
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d100      	bne.n	8006640 <f_write+0xf6>
 800663e:	e0f1      	b.n	8006824 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	2b01      	cmp	r3, #1
 8006644:	d104      	bne.n	8006650 <f_write+0x106>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2202      	movs	r2, #2
 800664a:	755a      	strb	r2, [r3, #21]
 800664c:	2302      	movs	r3, #2
 800664e:	e0f2      	b.n	8006836 <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	3301      	adds	r3, #1
 8006654:	d104      	bne.n	8006660 <f_write+0x116>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	755a      	strb	r2, [r3, #21]
 800665c:	2301      	movs	r3, #1
 800665e:	e0ea      	b.n	8006836 <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006664:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <f_write+0x12a>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006672:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	7d1b      	ldrb	r3, [r3, #20]
 8006678:	b25b      	sxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	da17      	bge.n	80066ae <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	7858      	ldrb	r0, [r3, #1]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3330      	adds	r3, #48	@ 0x30
 8006686:	0019      	movs	r1, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1a      	ldr	r2, [r3, #32]
 800668c:	2301      	movs	r3, #1
 800668e:	f7fd fe1b 	bl	80042c8 <disk_write>
 8006692:	1e03      	subs	r3, r0, #0
 8006694:	d004      	beq.n	80066a0 <f_write+0x156>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	755a      	strb	r2, [r3, #21]
 800669c:	2301      	movs	r3, #1
 800669e:	e0ca      	b.n	8006836 <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7d1b      	ldrb	r3, [r3, #20]
 80066a4:	227f      	movs	r2, #127	@ 0x7f
 80066a6:	4013      	ands	r3, r2
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	0019      	movs	r1, r3
 80066b6:	0010      	movs	r0, r2
 80066b8:	f7fe f9b4 	bl	8004a24 <clust2sect>
 80066bc:	0003      	movs	r3, r0
 80066be:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <f_write+0x186>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2202      	movs	r2, #2
 80066ca:	755a      	strb	r2, [r3, #21]
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0b2      	b.n	8006836 <f_write+0x2ec>
			sect += csect;
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	0a5b      	lsrs	r3, r3, #9
 80066dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d03b      	beq.n	800675c <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	18d3      	adds	r3, r2, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	8952      	ldrh	r2, [r2, #10]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d905      	bls.n	80066fe <f_write+0x1b4>
					cc = fs->csize - csect;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	895b      	ldrh	r3, [r3, #10]
 80066f6:	001a      	movs	r2, r3
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	7858      	ldrb	r0, [r3, #1]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	69f9      	ldr	r1, [r7, #28]
 8006708:	f7fd fdde 	bl	80042c8 <disk_write>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d004      	beq.n	800671a <f_write+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	755a      	strb	r2, [r3, #21]
 8006716:	2301      	movs	r3, #1
 8006718:	e08d      	b.n	8006836 <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	429a      	cmp	r2, r3
 8006726:	d915      	bls.n	8006754 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3330      	adds	r3, #48	@ 0x30
 800672c:	0018      	movs	r0, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	18d3      	adds	r3, r2, r3
 800673c:	2280      	movs	r2, #128	@ 0x80
 800673e:	0092      	lsls	r2, r2, #2
 8006740:	0019      	movs	r1, r3
 8006742:	f7fd fe95 	bl	8004470 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	7d1b      	ldrb	r3, [r3, #20]
 800674a:	227f      	movs	r2, #127	@ 0x7f
 800674c:	4013      	ands	r3, r2
 800674e:	b2da      	uxtb	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	025b      	lsls	r3, r3, #9
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800675a:	e040      	b.n	80067de <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d015      	beq.n	8006792 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800676e:	429a      	cmp	r2, r3
 8006770:	d20f      	bcs.n	8006792 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	7858      	ldrb	r0, [r3, #1]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3330      	adds	r3, #48	@ 0x30
 800677a:	0019      	movs	r1, r3
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	2301      	movs	r3, #1
 8006780:	f7fd fd7a 	bl	8004278 <disk_read>
 8006784:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8006786:	d004      	beq.n	8006792 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	755a      	strb	r2, [r3, #21]
 800678e:	2301      	movs	r3, #1
 8006790:	e051      	b.n	8006836 <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	05db      	lsls	r3, r3, #23
 800679e:	0ddb      	lsrs	r3, r3, #23
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80067a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d901      	bls.n	80067b4 <f_write+0x26a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3330      	adds	r3, #48	@ 0x30
 80067b8:	001a      	movs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	05db      	lsls	r3, r3, #23
 80067c0:	0ddb      	lsrs	r3, r3, #23
 80067c2:	18d3      	adds	r3, r2, r3
 80067c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c6:	69f9      	ldr	r1, [r7, #28]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7fd fe51 	bl	8004470 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7d1b      	ldrb	r3, [r3, #20]
 80067d2:	2280      	movs	r2, #128	@ 0x80
 80067d4:	4252      	negs	r2, r2
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	18d3      	adds	r3, r2, r3
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	18d2      	adds	r2, r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	619a      	str	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	000b      	movs	r3, r1
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d200      	bcs.n	8006802 <f_write+0x2b8>
 8006800:	0013      	movs	r3, r2
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	60d3      	str	r3, [r2, #12]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	18d2      	adds	r2, r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d000      	beq.n	8006822 <f_write+0x2d8>
 8006820:	e6d0      	b.n	80065c4 <f_write+0x7a>
 8006822:	e000      	b.n	8006826 <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006824:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7d1b      	ldrb	r3, [r3, #20]
 800682a:	2240      	movs	r2, #64	@ 0x40
 800682c:	4313      	orrs	r3, r2
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006834:	2300      	movs	r3, #0
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b00c      	add	sp, #48	@ 0x30
 800683c:	bdb0      	pop	{r4, r5, r7, pc}

0800683e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800683e:	b5b0      	push	{r4, r5, r7, lr}
 8006840:	b086      	sub	sp, #24
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2517      	movs	r5, #23
 800684a:	197c      	adds	r4, r7, r5
 800684c:	2208      	movs	r2, #8
 800684e:	18ba      	adds	r2, r7, r2
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7ff fabc 	bl	8005dd0 <validate>
 8006858:	0003      	movs	r3, r0
 800685a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800685c:	197b      	adds	r3, r7, r5
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d16e      	bne.n	8006942 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7d1b      	ldrb	r3, [r3, #20]
 8006868:	001a      	movs	r2, r3
 800686a:	2340      	movs	r3, #64	@ 0x40
 800686c:	4013      	ands	r3, r2
 800686e:	d068      	beq.n	8006942 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7d1b      	ldrb	r3, [r3, #20]
 8006874:	b25b      	sxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	da14      	bge.n	80068a4 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	7858      	ldrb	r0, [r3, #1]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3330      	adds	r3, #48	@ 0x30
 8006882:	0019      	movs	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1a      	ldr	r2, [r3, #32]
 8006888:	2301      	movs	r3, #1
 800688a:	f7fd fd1d 	bl	80042c8 <disk_write>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d001      	beq.n	8006896 <f_sync+0x58>
 8006892:	2301      	movs	r3, #1
 8006894:	e058      	b.n	8006948 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7d1b      	ldrb	r3, [r3, #20]
 800689a:	227f      	movs	r2, #127	@ 0x7f
 800689c:	4013      	ands	r3, r2
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80068a4:	f7fc feba 	bl	800361c <get_fattime>
 80068a8:	0003      	movs	r3, r0
 80068aa:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	2517      	movs	r5, #23
 80068b4:	197c      	adds	r4, r7, r5
 80068b6:	0019      	movs	r1, r3
 80068b8:	0010      	movs	r0, r2
 80068ba:	f7fe f801 	bl	80048c0 <move_window>
 80068be:	0003      	movs	r3, r0
 80068c0:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80068c2:	002c      	movs	r4, r5
 80068c4:	193b      	adds	r3, r7, r4
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13a      	bne.n	8006942 <f_sync+0x104>
					dir = fp->dir_ptr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	330b      	adds	r3, #11
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	330b      	adds	r3, #11
 80068dc:	2120      	movs	r1, #32
 80068de:	430a      	orrs	r2, r1
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	0019      	movs	r1, r3
 80068f0:	f7fe fd6b 	bl	80053ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	331c      	adds	r3, #28
 80068f8:	001a      	movs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	0019      	movs	r1, r3
 8006900:	0010      	movs	r0, r2
 8006902:	f7fd fd8b 	bl	800441c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3316      	adds	r3, #22
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f7fd fd84 	bl	800441c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3312      	adds	r3, #18
 8006918:	2100      	movs	r1, #0
 800691a:	0018      	movs	r0, r3
 800691c:	f7fd fd60 	bl	80043e0 <st_word>
					fs->wflag = 1;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	193c      	adds	r4, r7, r4
 800692a:	0018      	movs	r0, r3
 800692c:	f7fd fffe 	bl	800492c <sync_fs>
 8006930:	0003      	movs	r3, r0
 8006932:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7d1b      	ldrb	r3, [r3, #20]
 8006938:	2240      	movs	r2, #64	@ 0x40
 800693a:	4393      	bics	r3, r2
 800693c:	b2da      	uxtb	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006942:	2317      	movs	r3, #23
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	781b      	ldrb	r3, [r3, #0]
}
 8006948:	0018      	movs	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	b006      	add	sp, #24
 800694e:	bdb0      	pop	{r4, r5, r7, pc}

08006950 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006958:	250f      	movs	r5, #15
 800695a:	197c      	adds	r4, r7, r5
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	0018      	movs	r0, r3
 8006960:	f7ff ff6d 	bl	800683e <f_sync>
 8006964:	0003      	movs	r3, r0
 8006966:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006968:	197b      	adds	r3, r7, r5
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	197c      	adds	r4, r7, r5
 8006974:	2208      	movs	r2, #8
 8006976:	18ba      	adds	r2, r7, r2
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f7ff fa28 	bl	8005dd0 <validate>
 8006980:	0003      	movs	r3, r0
 8006982:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006984:	197b      	adds	r3, r7, r5
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	197c      	adds	r4, r7, r5
 8006992:	0018      	movs	r0, r3
 8006994:	f7fd fee2 	bl	800475c <dec_lock>
 8006998:	0003      	movs	r3, r0
 800699a:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800699c:	197b      	adds	r3, r7, r5
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80069aa:	230f      	movs	r3, #15
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	781b      	ldrb	r3, [r3, #0]
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b004      	add	sp, #16
 80069b6:	bdb0      	pop	{r4, r5, r7, pc}

080069b8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80069b8:	b5b0      	push	{r4, r5, r7, lr}
 80069ba:	b092      	sub	sp, #72	@ 0x48
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80069c4:	2547      	movs	r5, #71	@ 0x47
 80069c6:	197c      	adds	r4, r7, r5
 80069c8:	2328      	movs	r3, #40	@ 0x28
 80069ca:	18f9      	adds	r1, r7, r3
 80069cc:	230c      	movs	r3, #12
 80069ce:	18fb      	adds	r3, r7, r3
 80069d0:	2200      	movs	r2, #0
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fe ff8c 	bl	80058f0 <find_volume>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80069dc:	197b      	adds	r3, r7, r5
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d000      	beq.n	80069e6 <f_getfree+0x2e>
 80069e4:	e09e      	b.n	8006b24 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80069e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	3b02      	subs	r3, #2
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d804      	bhi.n	8006a04 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e08f      	b.n	8006b24 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d12d      	bne.n	8006a6c <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 8006a10:	2302      	movs	r3, #2
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a16:	2314      	movs	r3, #20
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 8006a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a1e:	2314      	movs	r3, #20
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fe f819 	bl	8004a5c <get_fat>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	3301      	adds	r3, #1
 8006a32:	d104      	bne.n	8006a3e <f_getfree+0x86>
 8006a34:	2347      	movs	r3, #71	@ 0x47
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e065      	b.n	8006b0a <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d104      	bne.n	8006a4e <f_getfree+0x96>
 8006a44:	2347      	movs	r3, #71	@ 0x47
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	2202      	movs	r2, #2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e05d      	b.n	8006b0a <f_getfree+0x152>
					if (stat == 0) nfree++;
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <f_getfree+0xa2>
 8006a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a56:	3301      	adds	r3, #1
 8006a58:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3d8      	bcc.n	8006a1c <f_getfree+0x64>
 8006a6a:	e04e      	b.n	8006b0a <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d114      	bne.n	8006ab0 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 8006a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a8e:	2547      	movs	r5, #71	@ 0x47
 8006a90:	197c      	adds	r4, r7, r5
 8006a92:	0019      	movs	r1, r3
 8006a94:	f7fd ff14 	bl	80048c0 <move_window>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8006a9c:	197b      	adds	r3, r7, r5
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d131      	bne.n	8006b08 <f_getfree+0x150>
							p = fs->win;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	3330      	adds	r3, #48	@ 0x30
 8006aa8:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8006aaa:	2380      	movs	r3, #128	@ 0x80
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d10f      	bne.n	8006ad8 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fd fc54 	bl	8004368 <ld_word>
 8006ac0:	1e03      	subs	r3, r0, #0
 8006ac2:	d102      	bne.n	8006aca <f_getfree+0x112>
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	3302      	adds	r3, #2
 8006ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad2:	3b02      	subs	r3, #2
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	e010      	b.n	8006afa <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7fd fc5f 	bl	800439e <ld_dword>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	091b      	lsrs	r3, r3, #4
 8006ae6:	d102      	bne.n	8006aee <f_getfree+0x136>
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aea:	3301      	adds	r3, #1
 8006aec:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	3304      	adds	r3, #4
 8006af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af6:	3b04      	subs	r3, #4
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8006afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afc:	3b01      	subs	r3, #1
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1bc      	bne.n	8006a80 <f_getfree+0xc8>
 8006b06:	e000      	b.n	8006b0a <f_getfree+0x152>
							if (res != FR_OK) break;
 8006b08:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b0e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b14:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	791a      	ldrb	r2, [r3, #4]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006b24:	2347      	movs	r3, #71	@ 0x47
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	781b      	ldrb	r3, [r3, #0]
}
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b012      	add	sp, #72	@ 0x48
 8006b30:	bdb0      	pop	{r4, r5, r7, pc}

08006b32 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006b32:	b590      	push	{r4, r7, lr}
 8006b34:	b089      	sub	sp, #36	@ 0x24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006b46:	e022      	b.n	8006b8e <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006b48:	2310      	movs	r3, #16
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2414      	movs	r4, #20
 8006b4e:	1939      	adds	r1, r7, r4
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f7ff fbb8 	bl	80062c8 <f_read>
		if (rc != 1) break;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d11d      	bne.n	8006b9a <f_gets+0x68>
		c = s[0];
 8006b5e:	2117      	movs	r1, #23
 8006b60:	187b      	adds	r3, r7, r1
 8006b62:	193a      	adds	r2, r7, r4
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006b68:	187b      	adds	r3, r7, r1
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b0d      	cmp	r3, #13
 8006b6e:	d00d      	beq.n	8006b8c <f_gets+0x5a>
		*p++ = c;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	61ba      	str	r2, [r7, #24]
 8006b76:	187a      	adds	r2, r7, r1
 8006b78:	7812      	ldrb	r2, [r2, #0]
 8006b7a:	701a      	strb	r2, [r3, #0]
		n++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006b82:	187b      	adds	r3, r7, r1
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b0a      	cmp	r3, #10
 8006b88:	d009      	beq.n	8006b9e <f_gets+0x6c>
 8006b8a:	e000      	b.n	8006b8e <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006b8c:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	dbd7      	blt.n	8006b48 <f_gets+0x16>
 8006b98:	e002      	b.n	8006ba0 <f_gets+0x6e>
		if (rc != 1) break;
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	e000      	b.n	8006ba0 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8006b9e:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <f_gets+0x7e>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e000      	b.n	8006bb2 <f_gets+0x80>
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b009      	add	sp, #36	@ 0x24
 8006bb8:	bd90      	pop	{r4, r7, pc}
	...

08006bbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006bbc:	b590      	push	{r4, r7, lr}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	1dfb      	adds	r3, r7, #7
 8006bc8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8006bca:	2417      	movs	r4, #23
 8006bcc:	193b      	adds	r3, r7, r4
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8006bd2:	2016      	movs	r0, #22
 8006bd4:	183b      	adds	r3, r7, r0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8006bda:	4b21      	ldr	r3, [pc, #132]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006bdc:	7a5b      	ldrb	r3, [r3, #9]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d136      	bne.n	8006c52 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006be4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006be6:	7a5b      	ldrb	r3, [r3, #9]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	001a      	movs	r2, r3
 8006bec:	4b1c      	ldr	r3, [pc, #112]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006bee:	2100      	movs	r1, #0
 8006bf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006bf4:	7a5b      	ldrb	r3, [r3, #9]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	18d3      	adds	r3, r2, r3
 8006bfe:	3304      	adds	r3, #4
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8006c04:	4b16      	ldr	r3, [pc, #88]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006c06:	7a5b      	ldrb	r3, [r3, #9]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	001a      	movs	r2, r3
 8006c0c:	4b14      	ldr	r3, [pc, #80]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	1dfa      	adds	r2, r7, #7
 8006c12:	7812      	ldrb	r2, [r2, #0]
 8006c14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c16:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006c18:	7a5b      	ldrb	r3, [r3, #9]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	b2d1      	uxtb	r1, r2
 8006c20:	4a0f      	ldr	r2, [pc, #60]	@ (8006c60 <FATFS_LinkDriverEx+0xa4>)
 8006c22:	7251      	strb	r1, [r2, #9]
 8006c24:	183a      	adds	r2, r7, r0
 8006c26:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8006c28:	183b      	adds	r3, r7, r0
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	3330      	adds	r3, #48	@ 0x30
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3301      	adds	r3, #1
 8006c38:	223a      	movs	r2, #58	@ 0x3a
 8006c3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3302      	adds	r3, #2
 8006c40:	222f      	movs	r2, #47	@ 0x2f
 8006c42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3303      	adds	r3, #3
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006c52:	2317      	movs	r3, #23
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	781b      	ldrb	r3, [r3, #0]
}
 8006c58:	0018      	movs	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b007      	add	sp, #28
 8006c5e:	bd90      	pop	{r4, r7, pc}
 8006c60:	200002b4 	.word	0x200002b4

08006c64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	0018      	movs	r0, r3
 8006c76:	f7ff ffa1 	bl	8006bbc <FATFS_LinkDriverEx>
 8006c7a:	0003      	movs	r3, r0
}
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_vsniprintf_r>:
 8006c84:	b530      	push	{r4, r5, lr}
 8006c86:	0014      	movs	r4, r2
 8006c88:	0005      	movs	r5, r0
 8006c8a:	001a      	movs	r2, r3
 8006c8c:	b09b      	sub	sp, #108	@ 0x6c
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	da05      	bge.n	8006c9e <_vsniprintf_r+0x1a>
 8006c92:	238b      	movs	r3, #139	@ 0x8b
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	2001      	movs	r0, #1
 8006c98:	4240      	negs	r0, r0
 8006c9a:	b01b      	add	sp, #108	@ 0x6c
 8006c9c:	bd30      	pop	{r4, r5, pc}
 8006c9e:	2382      	movs	r3, #130	@ 0x82
 8006ca0:	4668      	mov	r0, sp
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	8183      	strh	r3, [r0, #12]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9100      	str	r1, [sp, #0]
 8006caa:	9104      	str	r1, [sp, #16]
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d000      	beq.n	8006cb2 <_vsniprintf_r+0x2e>
 8006cb0:	1e63      	subs	r3, r4, #1
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4669      	mov	r1, sp
 8006cba:	425b      	negs	r3, r3
 8006cbc:	81cb      	strh	r3, [r1, #14]
 8006cbe:	0028      	movs	r0, r5
 8006cc0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006cc2:	f000 f9a7 	bl	8007014 <_svfiprintf_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	da01      	bge.n	8006cce <_vsniprintf_r+0x4a>
 8006cca:	238b      	movs	r3, #139	@ 0x8b
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d0e3      	beq.n	8006c9a <_vsniprintf_r+0x16>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e7df      	b.n	8006c9a <_vsniprintf_r+0x16>
	...

08006cdc <vsniprintf>:
 8006cdc:	b513      	push	{r0, r1, r4, lr}
 8006cde:	4c04      	ldr	r4, [pc, #16]	@ (8006cf0 <vsniprintf+0x14>)
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	0013      	movs	r3, r2
 8006ce4:	000a      	movs	r2, r1
 8006ce6:	0001      	movs	r1, r0
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	f7ff ffcb 	bl	8006c84 <_vsniprintf_r>
 8006cee:	bd16      	pop	{r1, r2, r4, pc}
 8006cf0:	20000024 	.word	0x20000024

08006cf4 <memset>:
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	1882      	adds	r2, r0, r2
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	7019      	strb	r1, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <__errno>:
 8006d04:	4b01      	ldr	r3, [pc, #4]	@ (8006d0c <__errno+0x8>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	46c0      	nop			@ (mov r8, r8)
 8006d0c:	20000024 	.word	0x20000024

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	2600      	movs	r6, #0
 8006d14:	4c0c      	ldr	r4, [pc, #48]	@ (8006d48 <__libc_init_array+0x38>)
 8006d16:	4d0d      	ldr	r5, [pc, #52]	@ (8006d4c <__libc_init_array+0x3c>)
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	2600      	movs	r6, #0
 8006d22:	f000 fc65 	bl	80075f0 <_init>
 8006d26:	4c0a      	ldr	r4, [pc, #40]	@ (8006d50 <__libc_init_array+0x40>)
 8006d28:	4d0a      	ldr	r5, [pc, #40]	@ (8006d54 <__libc_init_array+0x44>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	00b3      	lsls	r3, r6, #2
 8006d36:	58eb      	ldr	r3, [r5, r3]
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	00b3      	lsls	r3, r6, #2
 8006d40:	58eb      	ldr	r3, [r5, r3]
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	0800792c 	.word	0x0800792c
 8006d4c:	0800792c 	.word	0x0800792c
 8006d50:	08007930 	.word	0x08007930
 8006d54:	0800792c 	.word	0x0800792c

08006d58 <__retarget_lock_acquire_recursive>:
 8006d58:	4770      	bx	lr

08006d5a <__retarget_lock_release_recursive>:
 8006d5a:	4770      	bx	lr

08006d5c <_free_r>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	0005      	movs	r5, r0
 8006d60:	1e0c      	subs	r4, r1, #0
 8006d62:	d010      	beq.n	8006d86 <_free_r+0x2a>
 8006d64:	3c04      	subs	r4, #4
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da00      	bge.n	8006d6e <_free_r+0x12>
 8006d6c:	18e4      	adds	r4, r4, r3
 8006d6e:	0028      	movs	r0, r5
 8006d70:	f000 f8e0 	bl	8006f34 <__malloc_lock>
 8006d74:	4a1d      	ldr	r2, [pc, #116]	@ (8006dec <_free_r+0x90>)
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d105      	bne.n	8006d88 <_free_r+0x2c>
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	6014      	str	r4, [r2, #0]
 8006d80:	0028      	movs	r0, r5
 8006d82:	f000 f8df 	bl	8006f44 <__malloc_unlock>
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d908      	bls.n	8006d9e <_free_r+0x42>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	1821      	adds	r1, r4, r0
 8006d90:	428b      	cmp	r3, r1
 8006d92:	d1f3      	bne.n	8006d7c <_free_r+0x20>
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	1809      	adds	r1, r1, r0
 8006d9a:	6021      	str	r1, [r4, #0]
 8006d9c:	e7ee      	b.n	8006d7c <_free_r+0x20>
 8006d9e:	001a      	movs	r2, r3
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <_free_r+0x4e>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	d9f9      	bls.n	8006d9e <_free_r+0x42>
 8006daa:	6811      	ldr	r1, [r2, #0]
 8006dac:	1850      	adds	r0, r2, r1
 8006dae:	42a0      	cmp	r0, r4
 8006db0:	d10b      	bne.n	8006dca <_free_r+0x6e>
 8006db2:	6820      	ldr	r0, [r4, #0]
 8006db4:	1809      	adds	r1, r1, r0
 8006db6:	1850      	adds	r0, r2, r1
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	4283      	cmp	r3, r0
 8006dbc:	d1e0      	bne.n	8006d80 <_free_r+0x24>
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	1841      	adds	r1, r0, r1
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	6053      	str	r3, [r2, #4]
 8006dc8:	e7da      	b.n	8006d80 <_free_r+0x24>
 8006dca:	42a0      	cmp	r0, r4
 8006dcc:	d902      	bls.n	8006dd4 <_free_r+0x78>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	e7d5      	b.n	8006d80 <_free_r+0x24>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	1821      	adds	r1, r4, r0
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	d103      	bne.n	8006de4 <_free_r+0x88>
 8006ddc:	6819      	ldr	r1, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	1809      	adds	r1, r1, r0
 8006de2:	6021      	str	r1, [r4, #0]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	6054      	str	r4, [r2, #4]
 8006de8:	e7ca      	b.n	8006d80 <_free_r+0x24>
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	20000404 	.word	0x20000404

08006df0 <sbrk_aligned>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4e0f      	ldr	r6, [pc, #60]	@ (8006e30 <sbrk_aligned+0x40>)
 8006df4:	000d      	movs	r5, r1
 8006df6:	6831      	ldr	r1, [r6, #0]
 8006df8:	0004      	movs	r4, r0
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d102      	bne.n	8006e04 <sbrk_aligned+0x14>
 8006dfe:	f000 fb99 	bl	8007534 <_sbrk_r>
 8006e02:	6030      	str	r0, [r6, #0]
 8006e04:	0029      	movs	r1, r5
 8006e06:	0020      	movs	r0, r4
 8006e08:	f000 fb94 	bl	8007534 <_sbrk_r>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d103      	bne.n	8006e18 <sbrk_aligned+0x28>
 8006e10:	2501      	movs	r5, #1
 8006e12:	426d      	negs	r5, r5
 8006e14:	0028      	movs	r0, r5
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	2303      	movs	r3, #3
 8006e1a:	1cc5      	adds	r5, r0, #3
 8006e1c:	439d      	bics	r5, r3
 8006e1e:	42a8      	cmp	r0, r5
 8006e20:	d0f8      	beq.n	8006e14 <sbrk_aligned+0x24>
 8006e22:	1a29      	subs	r1, r5, r0
 8006e24:	0020      	movs	r0, r4
 8006e26:	f000 fb85 	bl	8007534 <_sbrk_r>
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d1f2      	bne.n	8006e14 <sbrk_aligned+0x24>
 8006e2e:	e7ef      	b.n	8006e10 <sbrk_aligned+0x20>
 8006e30:	20000400 	.word	0x20000400

08006e34 <_malloc_r>:
 8006e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e36:	2203      	movs	r2, #3
 8006e38:	1ccb      	adds	r3, r1, #3
 8006e3a:	4393      	bics	r3, r2
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	0005      	movs	r5, r0
 8006e40:	001f      	movs	r7, r3
 8006e42:	2b0c      	cmp	r3, #12
 8006e44:	d234      	bcs.n	8006eb0 <_malloc_r+0x7c>
 8006e46:	270c      	movs	r7, #12
 8006e48:	42b9      	cmp	r1, r7
 8006e4a:	d833      	bhi.n	8006eb4 <_malloc_r+0x80>
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	f000 f871 	bl	8006f34 <__malloc_lock>
 8006e52:	4e37      	ldr	r6, [pc, #220]	@ (8006f30 <_malloc_r+0xfc>)
 8006e54:	6833      	ldr	r3, [r6, #0]
 8006e56:	001c      	movs	r4, r3
 8006e58:	2c00      	cmp	r4, #0
 8006e5a:	d12f      	bne.n	8006ebc <_malloc_r+0x88>
 8006e5c:	0039      	movs	r1, r7
 8006e5e:	0028      	movs	r0, r5
 8006e60:	f7ff ffc6 	bl	8006df0 <sbrk_aligned>
 8006e64:	0004      	movs	r4, r0
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d15f      	bne.n	8006f2a <_malloc_r+0xf6>
 8006e6a:	6834      	ldr	r4, [r6, #0]
 8006e6c:	9400      	str	r4, [sp, #0]
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d14a      	bne.n	8006f0a <_malloc_r+0xd6>
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	d052      	beq.n	8006f1e <_malloc_r+0xea>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	0028      	movs	r0, r5
 8006e7c:	18e3      	adds	r3, r4, r3
 8006e7e:	9900      	ldr	r1, [sp, #0]
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	f000 fb57 	bl	8007534 <_sbrk_r>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	4283      	cmp	r3, r0
 8006e8a:	d148      	bne.n	8006f1e <_malloc_r+0xea>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	0028      	movs	r0, r5
 8006e90:	1aff      	subs	r7, r7, r3
 8006e92:	0039      	movs	r1, r7
 8006e94:	f7ff ffac 	bl	8006df0 <sbrk_aligned>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d040      	beq.n	8006f1e <_malloc_r+0xea>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	19db      	adds	r3, r3, r7
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6833      	ldr	r3, [r6, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	d133      	bne.n	8006f12 <_malloc_r+0xde>
 8006eaa:	9b00      	ldr	r3, [sp, #0]
 8006eac:	6033      	str	r3, [r6, #0]
 8006eae:	e019      	b.n	8006ee4 <_malloc_r+0xb0>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dac9      	bge.n	8006e48 <_malloc_r+0x14>
 8006eb4:	230c      	movs	r3, #12
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	2000      	movs	r0, #0
 8006eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1bc9      	subs	r1, r1, r7
 8006ec0:	d420      	bmi.n	8006f04 <_malloc_r+0xd0>
 8006ec2:	290b      	cmp	r1, #11
 8006ec4:	d90a      	bls.n	8006edc <_malloc_r+0xa8>
 8006ec6:	19e2      	adds	r2, r4, r7
 8006ec8:	6027      	str	r7, [r4, #0]
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d104      	bne.n	8006ed8 <_malloc_r+0xa4>
 8006ece:	6032      	str	r2, [r6, #0]
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	6011      	str	r1, [r2, #0]
 8006ed4:	6053      	str	r3, [r2, #4]
 8006ed6:	e005      	b.n	8006ee4 <_malloc_r+0xb0>
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	e7f9      	b.n	8006ed0 <_malloc_r+0x9c>
 8006edc:	6862      	ldr	r2, [r4, #4]
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	d10e      	bne.n	8006f00 <_malloc_r+0xcc>
 8006ee2:	6032      	str	r2, [r6, #0]
 8006ee4:	0028      	movs	r0, r5
 8006ee6:	f000 f82d 	bl	8006f44 <__malloc_unlock>
 8006eea:	0020      	movs	r0, r4
 8006eec:	2207      	movs	r2, #7
 8006eee:	300b      	adds	r0, #11
 8006ef0:	1d23      	adds	r3, r4, #4
 8006ef2:	4390      	bics	r0, r2
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	d0df      	beq.n	8006eba <_malloc_r+0x86>
 8006efa:	1a1b      	subs	r3, r3, r0
 8006efc:	50a3      	str	r3, [r4, r2]
 8006efe:	e7dc      	b.n	8006eba <_malloc_r+0x86>
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	e7ef      	b.n	8006ee4 <_malloc_r+0xb0>
 8006f04:	0023      	movs	r3, r4
 8006f06:	6864      	ldr	r4, [r4, #4]
 8006f08:	e7a6      	b.n	8006e58 <_malloc_r+0x24>
 8006f0a:	9c00      	ldr	r4, [sp, #0]
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	e7ad      	b.n	8006e6e <_malloc_r+0x3a>
 8006f12:	001a      	movs	r2, r3
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	d1fb      	bne.n	8006f12 <_malloc_r+0xde>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e7da      	b.n	8006ed4 <_malloc_r+0xa0>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	0028      	movs	r0, r5
 8006f22:	602b      	str	r3, [r5, #0]
 8006f24:	f000 f80e 	bl	8006f44 <__malloc_unlock>
 8006f28:	e7c6      	b.n	8006eb8 <_malloc_r+0x84>
 8006f2a:	6007      	str	r7, [r0, #0]
 8006f2c:	e7da      	b.n	8006ee4 <_malloc_r+0xb0>
 8006f2e:	46c0      	nop			@ (mov r8, r8)
 8006f30:	20000404 	.word	0x20000404

08006f34 <__malloc_lock>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	4802      	ldr	r0, [pc, #8]	@ (8006f40 <__malloc_lock+0xc>)
 8006f38:	f7ff ff0e 	bl	8006d58 <__retarget_lock_acquire_recursive>
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	200003fc 	.word	0x200003fc

08006f44 <__malloc_unlock>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4802      	ldr	r0, [pc, #8]	@ (8006f50 <__malloc_unlock+0xc>)
 8006f48:	f7ff ff07 	bl	8006d5a <__retarget_lock_release_recursive>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	200003fc 	.word	0x200003fc

08006f54 <__ssputs_r>:
 8006f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f56:	688e      	ldr	r6, [r1, #8]
 8006f58:	b085      	sub	sp, #20
 8006f5a:	001f      	movs	r7, r3
 8006f5c:	000c      	movs	r4, r1
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	42be      	cmp	r6, r7
 8006f66:	d830      	bhi.n	8006fca <__ssputs_r+0x76>
 8006f68:	210c      	movs	r1, #12
 8006f6a:	5e62      	ldrsh	r2, [r4, r1]
 8006f6c:	2190      	movs	r1, #144	@ 0x90
 8006f6e:	00c9      	lsls	r1, r1, #3
 8006f70:	420a      	tst	r2, r1
 8006f72:	d028      	beq.n	8006fc6 <__ssputs_r+0x72>
 8006f74:	2003      	movs	r0, #3
 8006f76:	6921      	ldr	r1, [r4, #16]
 8006f78:	1a5b      	subs	r3, r3, r1
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	6963      	ldr	r3, [r4, #20]
 8006f7e:	4343      	muls	r3, r0
 8006f80:	9801      	ldr	r0, [sp, #4]
 8006f82:	0fdd      	lsrs	r5, r3, #31
 8006f84:	18ed      	adds	r5, r5, r3
 8006f86:	1c7b      	adds	r3, r7, #1
 8006f88:	181b      	adds	r3, r3, r0
 8006f8a:	106d      	asrs	r5, r5, #1
 8006f8c:	42ab      	cmp	r3, r5
 8006f8e:	d900      	bls.n	8006f92 <__ssputs_r+0x3e>
 8006f90:	001d      	movs	r5, r3
 8006f92:	0552      	lsls	r2, r2, #21
 8006f94:	d528      	bpl.n	8006fe8 <__ssputs_r+0x94>
 8006f96:	0029      	movs	r1, r5
 8006f98:	9802      	ldr	r0, [sp, #8]
 8006f9a:	f7ff ff4b 	bl	8006e34 <_malloc_r>
 8006f9e:	1e06      	subs	r6, r0, #0
 8006fa0:	d02c      	beq.n	8006ffc <__ssputs_r+0xa8>
 8006fa2:	9a01      	ldr	r2, [sp, #4]
 8006fa4:	6921      	ldr	r1, [r4, #16]
 8006fa6:	f000 fae2 	bl	800756e <memcpy>
 8006faa:	89a2      	ldrh	r2, [r4, #12]
 8006fac:	4b18      	ldr	r3, [pc, #96]	@ (8007010 <__ssputs_r+0xbc>)
 8006fae:	401a      	ands	r2, r3
 8006fb0:	2380      	movs	r3, #128	@ 0x80
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	9b01      	ldr	r3, [sp, #4]
 8006fb8:	6126      	str	r6, [r4, #16]
 8006fba:	18f6      	adds	r6, r6, r3
 8006fbc:	6026      	str	r6, [r4, #0]
 8006fbe:	003e      	movs	r6, r7
 8006fc0:	6165      	str	r5, [r4, #20]
 8006fc2:	1aed      	subs	r5, r5, r3
 8006fc4:	60a5      	str	r5, [r4, #8]
 8006fc6:	42be      	cmp	r6, r7
 8006fc8:	d900      	bls.n	8006fcc <__ssputs_r+0x78>
 8006fca:	003e      	movs	r6, r7
 8006fcc:	0032      	movs	r2, r6
 8006fce:	9903      	ldr	r1, [sp, #12]
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	f000 fa9b 	bl	800750c <memmove>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	68a3      	ldr	r3, [r4, #8]
 8006fda:	1b9b      	subs	r3, r3, r6
 8006fdc:	60a3      	str	r3, [r4, #8]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	199b      	adds	r3, r3, r6
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	b005      	add	sp, #20
 8006fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe8:	002a      	movs	r2, r5
 8006fea:	9802      	ldr	r0, [sp, #8]
 8006fec:	f000 fac8 	bl	8007580 <_realloc_r>
 8006ff0:	1e06      	subs	r6, r0, #0
 8006ff2:	d1e0      	bne.n	8006fb6 <__ssputs_r+0x62>
 8006ff4:	6921      	ldr	r1, [r4, #16]
 8006ff6:	9802      	ldr	r0, [sp, #8]
 8006ff8:	f7ff feb0 	bl	8006d5c <_free_r>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	2001      	movs	r0, #1
 8007000:	9a02      	ldr	r2, [sp, #8]
 8007002:	4240      	negs	r0, r0
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	89a2      	ldrh	r2, [r4, #12]
 8007008:	3334      	adds	r3, #52	@ 0x34
 800700a:	4313      	orrs	r3, r2
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7e9      	b.n	8006fe4 <__ssputs_r+0x90>
 8007010:	fffffb7f 	.word	0xfffffb7f

08007014 <_svfiprintf_r>:
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b0a1      	sub	sp, #132	@ 0x84
 8007018:	9003      	str	r0, [sp, #12]
 800701a:	001d      	movs	r5, r3
 800701c:	898b      	ldrh	r3, [r1, #12]
 800701e:	000f      	movs	r7, r1
 8007020:	0016      	movs	r6, r2
 8007022:	061b      	lsls	r3, r3, #24
 8007024:	d511      	bpl.n	800704a <_svfiprintf_r+0x36>
 8007026:	690b      	ldr	r3, [r1, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10e      	bne.n	800704a <_svfiprintf_r+0x36>
 800702c:	2140      	movs	r1, #64	@ 0x40
 800702e:	f7ff ff01 	bl	8006e34 <_malloc_r>
 8007032:	6038      	str	r0, [r7, #0]
 8007034:	6138      	str	r0, [r7, #16]
 8007036:	2800      	cmp	r0, #0
 8007038:	d105      	bne.n	8007046 <_svfiprintf_r+0x32>
 800703a:	230c      	movs	r3, #12
 800703c:	9a03      	ldr	r2, [sp, #12]
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	2001      	movs	r0, #1
 8007042:	4240      	negs	r0, r0
 8007044:	e0cf      	b.n	80071e6 <_svfiprintf_r+0x1d2>
 8007046:	2340      	movs	r3, #64	@ 0x40
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	2300      	movs	r3, #0
 800704c:	ac08      	add	r4, sp, #32
 800704e:	6163      	str	r3, [r4, #20]
 8007050:	3320      	adds	r3, #32
 8007052:	7663      	strb	r3, [r4, #25]
 8007054:	3310      	adds	r3, #16
 8007056:	76a3      	strb	r3, [r4, #26]
 8007058:	9507      	str	r5, [sp, #28]
 800705a:	0035      	movs	r5, r6
 800705c:	782b      	ldrb	r3, [r5, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <_svfiprintf_r+0x52>
 8007062:	2b25      	cmp	r3, #37	@ 0x25
 8007064:	d148      	bne.n	80070f8 <_svfiprintf_r+0xe4>
 8007066:	1bab      	subs	r3, r5, r6
 8007068:	9305      	str	r3, [sp, #20]
 800706a:	42b5      	cmp	r5, r6
 800706c:	d00b      	beq.n	8007086 <_svfiprintf_r+0x72>
 800706e:	0032      	movs	r2, r6
 8007070:	0039      	movs	r1, r7
 8007072:	9803      	ldr	r0, [sp, #12]
 8007074:	f7ff ff6e 	bl	8006f54 <__ssputs_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d100      	bne.n	800707e <_svfiprintf_r+0x6a>
 800707c:	e0ae      	b.n	80071dc <_svfiprintf_r+0x1c8>
 800707e:	6963      	ldr	r3, [r4, #20]
 8007080:	9a05      	ldr	r2, [sp, #20]
 8007082:	189b      	adds	r3, r3, r2
 8007084:	6163      	str	r3, [r4, #20]
 8007086:	782b      	ldrb	r3, [r5, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d100      	bne.n	800708e <_svfiprintf_r+0x7a>
 800708c:	e0a6      	b.n	80071dc <_svfiprintf_r+0x1c8>
 800708e:	2201      	movs	r2, #1
 8007090:	2300      	movs	r3, #0
 8007092:	4252      	negs	r2, r2
 8007094:	6062      	str	r2, [r4, #4]
 8007096:	a904      	add	r1, sp, #16
 8007098:	3254      	adds	r2, #84	@ 0x54
 800709a:	1852      	adds	r2, r2, r1
 800709c:	1c6e      	adds	r6, r5, #1
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	60e3      	str	r3, [r4, #12]
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	7013      	strb	r3, [r2, #0]
 80070a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80070a8:	4b54      	ldr	r3, [pc, #336]	@ (80071fc <_svfiprintf_r+0x1e8>)
 80070aa:	2205      	movs	r2, #5
 80070ac:	0018      	movs	r0, r3
 80070ae:	7831      	ldrb	r1, [r6, #0]
 80070b0:	9305      	str	r3, [sp, #20]
 80070b2:	f000 fa51 	bl	8007558 <memchr>
 80070b6:	1c75      	adds	r5, r6, #1
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d11f      	bne.n	80070fc <_svfiprintf_r+0xe8>
 80070bc:	6822      	ldr	r2, [r4, #0]
 80070be:	06d3      	lsls	r3, r2, #27
 80070c0:	d504      	bpl.n	80070cc <_svfiprintf_r+0xb8>
 80070c2:	2353      	movs	r3, #83	@ 0x53
 80070c4:	a904      	add	r1, sp, #16
 80070c6:	185b      	adds	r3, r3, r1
 80070c8:	2120      	movs	r1, #32
 80070ca:	7019      	strb	r1, [r3, #0]
 80070cc:	0713      	lsls	r3, r2, #28
 80070ce:	d504      	bpl.n	80070da <_svfiprintf_r+0xc6>
 80070d0:	2353      	movs	r3, #83	@ 0x53
 80070d2:	a904      	add	r1, sp, #16
 80070d4:	185b      	adds	r3, r3, r1
 80070d6:	212b      	movs	r1, #43	@ 0x2b
 80070d8:	7019      	strb	r1, [r3, #0]
 80070da:	7833      	ldrb	r3, [r6, #0]
 80070dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80070de:	d016      	beq.n	800710e <_svfiprintf_r+0xfa>
 80070e0:	0035      	movs	r5, r6
 80070e2:	2100      	movs	r1, #0
 80070e4:	200a      	movs	r0, #10
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	782a      	ldrb	r2, [r5, #0]
 80070ea:	1c6e      	adds	r6, r5, #1
 80070ec:	3a30      	subs	r2, #48	@ 0x30
 80070ee:	2a09      	cmp	r2, #9
 80070f0:	d950      	bls.n	8007194 <_svfiprintf_r+0x180>
 80070f2:	2900      	cmp	r1, #0
 80070f4:	d111      	bne.n	800711a <_svfiprintf_r+0x106>
 80070f6:	e017      	b.n	8007128 <_svfiprintf_r+0x114>
 80070f8:	3501      	adds	r5, #1
 80070fa:	e7af      	b.n	800705c <_svfiprintf_r+0x48>
 80070fc:	9b05      	ldr	r3, [sp, #20]
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	1ac0      	subs	r0, r0, r3
 8007102:	2301      	movs	r3, #1
 8007104:	4083      	lsls	r3, r0
 8007106:	4313      	orrs	r3, r2
 8007108:	002e      	movs	r6, r5
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	e7cc      	b.n	80070a8 <_svfiprintf_r+0x94>
 800710e:	9b07      	ldr	r3, [sp, #28]
 8007110:	1d19      	adds	r1, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9107      	str	r1, [sp, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	db01      	blt.n	800711e <_svfiprintf_r+0x10a>
 800711a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800711c:	e004      	b.n	8007128 <_svfiprintf_r+0x114>
 800711e:	425b      	negs	r3, r3
 8007120:	60e3      	str	r3, [r4, #12]
 8007122:	2302      	movs	r3, #2
 8007124:	4313      	orrs	r3, r2
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	782b      	ldrb	r3, [r5, #0]
 800712a:	2b2e      	cmp	r3, #46	@ 0x2e
 800712c:	d10c      	bne.n	8007148 <_svfiprintf_r+0x134>
 800712e:	786b      	ldrb	r3, [r5, #1]
 8007130:	2b2a      	cmp	r3, #42	@ 0x2a
 8007132:	d134      	bne.n	800719e <_svfiprintf_r+0x18a>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	3502      	adds	r5, #2
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	da01      	bge.n	8007146 <_svfiprintf_r+0x132>
 8007142:	2301      	movs	r3, #1
 8007144:	425b      	negs	r3, r3
 8007146:	9309      	str	r3, [sp, #36]	@ 0x24
 8007148:	4e2d      	ldr	r6, [pc, #180]	@ (8007200 <_svfiprintf_r+0x1ec>)
 800714a:	2203      	movs	r2, #3
 800714c:	0030      	movs	r0, r6
 800714e:	7829      	ldrb	r1, [r5, #0]
 8007150:	f000 fa02 	bl	8007558 <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d006      	beq.n	8007166 <_svfiprintf_r+0x152>
 8007158:	2340      	movs	r3, #64	@ 0x40
 800715a:	1b80      	subs	r0, r0, r6
 800715c:	4083      	lsls	r3, r0
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	3501      	adds	r5, #1
 8007162:	4313      	orrs	r3, r2
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	7829      	ldrb	r1, [r5, #0]
 8007168:	2206      	movs	r2, #6
 800716a:	4826      	ldr	r0, [pc, #152]	@ (8007204 <_svfiprintf_r+0x1f0>)
 800716c:	1c6e      	adds	r6, r5, #1
 800716e:	7621      	strb	r1, [r4, #24]
 8007170:	f000 f9f2 	bl	8007558 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d038      	beq.n	80071ea <_svfiprintf_r+0x1d6>
 8007178:	4b23      	ldr	r3, [pc, #140]	@ (8007208 <_svfiprintf_r+0x1f4>)
 800717a:	2b00      	cmp	r3, #0
 800717c:	d122      	bne.n	80071c4 <_svfiprintf_r+0x1b0>
 800717e:	2207      	movs	r2, #7
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	3307      	adds	r3, #7
 8007184:	4393      	bics	r3, r2
 8007186:	3308      	adds	r3, #8
 8007188:	9307      	str	r3, [sp, #28]
 800718a:	6963      	ldr	r3, [r4, #20]
 800718c:	9a04      	ldr	r2, [sp, #16]
 800718e:	189b      	adds	r3, r3, r2
 8007190:	6163      	str	r3, [r4, #20]
 8007192:	e762      	b.n	800705a <_svfiprintf_r+0x46>
 8007194:	4343      	muls	r3, r0
 8007196:	0035      	movs	r5, r6
 8007198:	2101      	movs	r1, #1
 800719a:	189b      	adds	r3, r3, r2
 800719c:	e7a4      	b.n	80070e8 <_svfiprintf_r+0xd4>
 800719e:	2300      	movs	r3, #0
 80071a0:	200a      	movs	r0, #10
 80071a2:	0019      	movs	r1, r3
 80071a4:	3501      	adds	r5, #1
 80071a6:	6063      	str	r3, [r4, #4]
 80071a8:	782a      	ldrb	r2, [r5, #0]
 80071aa:	1c6e      	adds	r6, r5, #1
 80071ac:	3a30      	subs	r2, #48	@ 0x30
 80071ae:	2a09      	cmp	r2, #9
 80071b0:	d903      	bls.n	80071ba <_svfiprintf_r+0x1a6>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c8      	beq.n	8007148 <_svfiprintf_r+0x134>
 80071b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80071b8:	e7c6      	b.n	8007148 <_svfiprintf_r+0x134>
 80071ba:	4341      	muls	r1, r0
 80071bc:	0035      	movs	r5, r6
 80071be:	2301      	movs	r3, #1
 80071c0:	1889      	adds	r1, r1, r2
 80071c2:	e7f1      	b.n	80071a8 <_svfiprintf_r+0x194>
 80071c4:	aa07      	add	r2, sp, #28
 80071c6:	9200      	str	r2, [sp, #0]
 80071c8:	0021      	movs	r1, r4
 80071ca:	003a      	movs	r2, r7
 80071cc:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <_svfiprintf_r+0x1f8>)
 80071ce:	9803      	ldr	r0, [sp, #12]
 80071d0:	e000      	b.n	80071d4 <_svfiprintf_r+0x1c0>
 80071d2:	bf00      	nop
 80071d4:	9004      	str	r0, [sp, #16]
 80071d6:	9b04      	ldr	r3, [sp, #16]
 80071d8:	3301      	adds	r3, #1
 80071da:	d1d6      	bne.n	800718a <_svfiprintf_r+0x176>
 80071dc:	89bb      	ldrh	r3, [r7, #12]
 80071de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80071e0:	065b      	lsls	r3, r3, #25
 80071e2:	d500      	bpl.n	80071e6 <_svfiprintf_r+0x1d2>
 80071e4:	e72c      	b.n	8007040 <_svfiprintf_r+0x2c>
 80071e6:	b021      	add	sp, #132	@ 0x84
 80071e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ea:	aa07      	add	r2, sp, #28
 80071ec:	9200      	str	r2, [sp, #0]
 80071ee:	0021      	movs	r1, r4
 80071f0:	003a      	movs	r2, r7
 80071f2:	4b06      	ldr	r3, [pc, #24]	@ (800720c <_svfiprintf_r+0x1f8>)
 80071f4:	9803      	ldr	r0, [sp, #12]
 80071f6:	f000 f87b 	bl	80072f0 <_printf_i>
 80071fa:	e7eb      	b.n	80071d4 <_svfiprintf_r+0x1c0>
 80071fc:	080078f0 	.word	0x080078f0
 8007200:	080078f6 	.word	0x080078f6
 8007204:	080078fa 	.word	0x080078fa
 8007208:	00000000 	.word	0x00000000
 800720c:	08006f55 	.word	0x08006f55

08007210 <_printf_common>:
 8007210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007212:	0016      	movs	r6, r2
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	688a      	ldr	r2, [r1, #8]
 8007218:	690b      	ldr	r3, [r1, #16]
 800721a:	000c      	movs	r4, r1
 800721c:	9000      	str	r0, [sp, #0]
 800721e:	4293      	cmp	r3, r2
 8007220:	da00      	bge.n	8007224 <_printf_common+0x14>
 8007222:	0013      	movs	r3, r2
 8007224:	0022      	movs	r2, r4
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	3243      	adds	r2, #67	@ 0x43
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	2a00      	cmp	r2, #0
 800722e:	d001      	beq.n	8007234 <_printf_common+0x24>
 8007230:	3301      	adds	r3, #1
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	069b      	lsls	r3, r3, #26
 8007238:	d502      	bpl.n	8007240 <_printf_common+0x30>
 800723a:	6833      	ldr	r3, [r6, #0]
 800723c:	3302      	adds	r3, #2
 800723e:	6033      	str	r3, [r6, #0]
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	2306      	movs	r3, #6
 8007244:	0015      	movs	r5, r2
 8007246:	401d      	ands	r5, r3
 8007248:	421a      	tst	r2, r3
 800724a:	d027      	beq.n	800729c <_printf_common+0x8c>
 800724c:	0023      	movs	r3, r4
 800724e:	3343      	adds	r3, #67	@ 0x43
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	1e5a      	subs	r2, r3, #1
 8007254:	4193      	sbcs	r3, r2
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d430      	bmi.n	80072be <_printf_common+0xae>
 800725c:	0022      	movs	r2, r4
 800725e:	9901      	ldr	r1, [sp, #4]
 8007260:	9800      	ldr	r0, [sp, #0]
 8007262:	9d08      	ldr	r5, [sp, #32]
 8007264:	3243      	adds	r2, #67	@ 0x43
 8007266:	47a8      	blx	r5
 8007268:	3001      	adds	r0, #1
 800726a:	d025      	beq.n	80072b8 <_printf_common+0xa8>
 800726c:	2206      	movs	r2, #6
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	2500      	movs	r5, #0
 8007272:	4013      	ands	r3, r2
 8007274:	2b04      	cmp	r3, #4
 8007276:	d105      	bne.n	8007284 <_printf_common+0x74>
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	68e5      	ldr	r5, [r4, #12]
 800727c:	1aed      	subs	r5, r5, r3
 800727e:	43eb      	mvns	r3, r5
 8007280:	17db      	asrs	r3, r3, #31
 8007282:	401d      	ands	r5, r3
 8007284:	68a3      	ldr	r3, [r4, #8]
 8007286:	6922      	ldr	r2, [r4, #16]
 8007288:	4293      	cmp	r3, r2
 800728a:	dd01      	ble.n	8007290 <_printf_common+0x80>
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	18ed      	adds	r5, r5, r3
 8007290:	2600      	movs	r6, #0
 8007292:	42b5      	cmp	r5, r6
 8007294:	d120      	bne.n	80072d8 <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e010      	b.n	80072bc <_printf_common+0xac>
 800729a:	3501      	adds	r5, #1
 800729c:	68e3      	ldr	r3, [r4, #12]
 800729e:	6832      	ldr	r2, [r6, #0]
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	ddd2      	ble.n	800724c <_printf_common+0x3c>
 80072a6:	0022      	movs	r2, r4
 80072a8:	2301      	movs	r3, #1
 80072aa:	9901      	ldr	r1, [sp, #4]
 80072ac:	9800      	ldr	r0, [sp, #0]
 80072ae:	9f08      	ldr	r7, [sp, #32]
 80072b0:	3219      	adds	r2, #25
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	d1f0      	bne.n	800729a <_printf_common+0x8a>
 80072b8:	2001      	movs	r0, #1
 80072ba:	4240      	negs	r0, r0
 80072bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072be:	2030      	movs	r0, #48	@ 0x30
 80072c0:	18e1      	adds	r1, r4, r3
 80072c2:	3143      	adds	r1, #67	@ 0x43
 80072c4:	7008      	strb	r0, [r1, #0]
 80072c6:	0021      	movs	r1, r4
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	3145      	adds	r1, #69	@ 0x45
 80072cc:	7809      	ldrb	r1, [r1, #0]
 80072ce:	18a2      	adds	r2, r4, r2
 80072d0:	3243      	adds	r2, #67	@ 0x43
 80072d2:	3302      	adds	r3, #2
 80072d4:	7011      	strb	r1, [r2, #0]
 80072d6:	e7c1      	b.n	800725c <_printf_common+0x4c>
 80072d8:	0022      	movs	r2, r4
 80072da:	2301      	movs	r3, #1
 80072dc:	9901      	ldr	r1, [sp, #4]
 80072de:	9800      	ldr	r0, [sp, #0]
 80072e0:	9f08      	ldr	r7, [sp, #32]
 80072e2:	321a      	adds	r2, #26
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0e6      	beq.n	80072b8 <_printf_common+0xa8>
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7d1      	b.n	8007292 <_printf_common+0x82>
	...

080072f0 <_printf_i>:
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	b08b      	sub	sp, #44	@ 0x2c
 80072f4:	9206      	str	r2, [sp, #24]
 80072f6:	000a      	movs	r2, r1
 80072f8:	3243      	adds	r2, #67	@ 0x43
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	9005      	str	r0, [sp, #20]
 80072fe:	9203      	str	r2, [sp, #12]
 8007300:	7e0a      	ldrb	r2, [r1, #24]
 8007302:	000c      	movs	r4, r1
 8007304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007306:	2a78      	cmp	r2, #120	@ 0x78
 8007308:	d809      	bhi.n	800731e <_printf_i+0x2e>
 800730a:	2a62      	cmp	r2, #98	@ 0x62
 800730c:	d80b      	bhi.n	8007326 <_printf_i+0x36>
 800730e:	2a00      	cmp	r2, #0
 8007310:	d100      	bne.n	8007314 <_printf_i+0x24>
 8007312:	e0bc      	b.n	800748e <_printf_i+0x19e>
 8007314:	497b      	ldr	r1, [pc, #492]	@ (8007504 <_printf_i+0x214>)
 8007316:	9104      	str	r1, [sp, #16]
 8007318:	2a58      	cmp	r2, #88	@ 0x58
 800731a:	d100      	bne.n	800731e <_printf_i+0x2e>
 800731c:	e090      	b.n	8007440 <_printf_i+0x150>
 800731e:	0025      	movs	r5, r4
 8007320:	3542      	adds	r5, #66	@ 0x42
 8007322:	702a      	strb	r2, [r5, #0]
 8007324:	e022      	b.n	800736c <_printf_i+0x7c>
 8007326:	0010      	movs	r0, r2
 8007328:	3863      	subs	r0, #99	@ 0x63
 800732a:	2815      	cmp	r0, #21
 800732c:	d8f7      	bhi.n	800731e <_printf_i+0x2e>
 800732e:	f7f8 fef3 	bl	8000118 <__gnu_thumb1_case_shi>
 8007332:	0016      	.short	0x0016
 8007334:	fff6001f 	.word	0xfff6001f
 8007338:	fff6fff6 	.word	0xfff6fff6
 800733c:	001ffff6 	.word	0x001ffff6
 8007340:	fff6fff6 	.word	0xfff6fff6
 8007344:	fff6fff6 	.word	0xfff6fff6
 8007348:	003600a1 	.word	0x003600a1
 800734c:	fff60080 	.word	0xfff60080
 8007350:	00b2fff6 	.word	0x00b2fff6
 8007354:	0036fff6 	.word	0x0036fff6
 8007358:	fff6fff6 	.word	0xfff6fff6
 800735c:	0084      	.short	0x0084
 800735e:	0025      	movs	r5, r4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	3542      	adds	r5, #66	@ 0x42
 8007364:	1d11      	adds	r1, r2, #4
 8007366:	6019      	str	r1, [r3, #0]
 8007368:	6813      	ldr	r3, [r2, #0]
 800736a:	702b      	strb	r3, [r5, #0]
 800736c:	2301      	movs	r3, #1
 800736e:	e0a0      	b.n	80074b2 <_printf_i+0x1c2>
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	6809      	ldr	r1, [r1, #0]
 8007374:	1d02      	adds	r2, r0, #4
 8007376:	060d      	lsls	r5, r1, #24
 8007378:	d50b      	bpl.n	8007392 <_printf_i+0xa2>
 800737a:	6806      	ldr	r6, [r0, #0]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	2e00      	cmp	r6, #0
 8007380:	da03      	bge.n	800738a <_printf_i+0x9a>
 8007382:	232d      	movs	r3, #45	@ 0x2d
 8007384:	9a03      	ldr	r2, [sp, #12]
 8007386:	4276      	negs	r6, r6
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	4b5e      	ldr	r3, [pc, #376]	@ (8007504 <_printf_i+0x214>)
 800738c:	270a      	movs	r7, #10
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	e018      	b.n	80073c4 <_printf_i+0xd4>
 8007392:	6806      	ldr	r6, [r0, #0]
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	0649      	lsls	r1, r1, #25
 8007398:	d5f1      	bpl.n	800737e <_printf_i+0x8e>
 800739a:	b236      	sxth	r6, r6
 800739c:	e7ef      	b.n	800737e <_printf_i+0x8e>
 800739e:	6808      	ldr	r0, [r1, #0]
 80073a0:	6819      	ldr	r1, [r3, #0]
 80073a2:	c940      	ldmia	r1!, {r6}
 80073a4:	0605      	lsls	r5, r0, #24
 80073a6:	d402      	bmi.n	80073ae <_printf_i+0xbe>
 80073a8:	0640      	lsls	r0, r0, #25
 80073aa:	d500      	bpl.n	80073ae <_printf_i+0xbe>
 80073ac:	b2b6      	uxth	r6, r6
 80073ae:	6019      	str	r1, [r3, #0]
 80073b0:	4b54      	ldr	r3, [pc, #336]	@ (8007504 <_printf_i+0x214>)
 80073b2:	270a      	movs	r7, #10
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80073b8:	d100      	bne.n	80073bc <_printf_i+0xcc>
 80073ba:	3f02      	subs	r7, #2
 80073bc:	0023      	movs	r3, r4
 80073be:	2200      	movs	r2, #0
 80073c0:	3343      	adds	r3, #67	@ 0x43
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db03      	blt.n	80073d4 <_printf_i+0xe4>
 80073cc:	2104      	movs	r1, #4
 80073ce:	6822      	ldr	r2, [r4, #0]
 80073d0:	438a      	bics	r2, r1
 80073d2:	6022      	str	r2, [r4, #0]
 80073d4:	2e00      	cmp	r6, #0
 80073d6:	d102      	bne.n	80073de <_printf_i+0xee>
 80073d8:	9d03      	ldr	r5, [sp, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <_printf_i+0x108>
 80073de:	9d03      	ldr	r5, [sp, #12]
 80073e0:	0030      	movs	r0, r6
 80073e2:	0039      	movs	r1, r7
 80073e4:	f7f8 ff28 	bl	8000238 <__aeabi_uidivmod>
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	3d01      	subs	r5, #1
 80073ec:	5c5b      	ldrb	r3, [r3, r1]
 80073ee:	702b      	strb	r3, [r5, #0]
 80073f0:	0033      	movs	r3, r6
 80073f2:	0006      	movs	r6, r0
 80073f4:	429f      	cmp	r7, r3
 80073f6:	d9f3      	bls.n	80073e0 <_printf_i+0xf0>
 80073f8:	2f08      	cmp	r7, #8
 80073fa:	d109      	bne.n	8007410 <_printf_i+0x120>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	07db      	lsls	r3, r3, #31
 8007400:	d506      	bpl.n	8007410 <_printf_i+0x120>
 8007402:	6862      	ldr	r2, [r4, #4]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	429a      	cmp	r2, r3
 8007408:	dc02      	bgt.n	8007410 <_printf_i+0x120>
 800740a:	2330      	movs	r3, #48	@ 0x30
 800740c:	3d01      	subs	r5, #1
 800740e:	702b      	strb	r3, [r5, #0]
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	1b5b      	subs	r3, r3, r5
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	9b07      	ldr	r3, [sp, #28]
 8007418:	0021      	movs	r1, r4
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	aa09      	add	r2, sp, #36	@ 0x24
 8007422:	f7ff fef5 	bl	8007210 <_printf_common>
 8007426:	3001      	adds	r0, #1
 8007428:	d148      	bne.n	80074bc <_printf_i+0x1cc>
 800742a:	2001      	movs	r0, #1
 800742c:	4240      	negs	r0, r0
 800742e:	b00b      	add	sp, #44	@ 0x2c
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	2220      	movs	r2, #32
 8007434:	6809      	ldr	r1, [r1, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	6022      	str	r2, [r4, #0]
 800743a:	2278      	movs	r2, #120	@ 0x78
 800743c:	4932      	ldr	r1, [pc, #200]	@ (8007508 <_printf_i+0x218>)
 800743e:	9104      	str	r1, [sp, #16]
 8007440:	0021      	movs	r1, r4
 8007442:	3145      	adds	r1, #69	@ 0x45
 8007444:	700a      	strb	r2, [r1, #0]
 8007446:	6819      	ldr	r1, [r3, #0]
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	c940      	ldmia	r1!, {r6}
 800744c:	0610      	lsls	r0, r2, #24
 800744e:	d402      	bmi.n	8007456 <_printf_i+0x166>
 8007450:	0650      	lsls	r0, r2, #25
 8007452:	d500      	bpl.n	8007456 <_printf_i+0x166>
 8007454:	b2b6      	uxth	r6, r6
 8007456:	6019      	str	r1, [r3, #0]
 8007458:	07d3      	lsls	r3, r2, #31
 800745a:	d502      	bpl.n	8007462 <_printf_i+0x172>
 800745c:	2320      	movs	r3, #32
 800745e:	4313      	orrs	r3, r2
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	2e00      	cmp	r6, #0
 8007464:	d001      	beq.n	800746a <_printf_i+0x17a>
 8007466:	2710      	movs	r7, #16
 8007468:	e7a8      	b.n	80073bc <_printf_i+0xcc>
 800746a:	2220      	movs	r2, #32
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	4393      	bics	r3, r2
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	e7f8      	b.n	8007466 <_printf_i+0x176>
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	680d      	ldr	r5, [r1, #0]
 8007478:	1d10      	adds	r0, r2, #4
 800747a:	6949      	ldr	r1, [r1, #20]
 800747c:	6018      	str	r0, [r3, #0]
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	062e      	lsls	r6, r5, #24
 8007482:	d501      	bpl.n	8007488 <_printf_i+0x198>
 8007484:	6019      	str	r1, [r3, #0]
 8007486:	e002      	b.n	800748e <_printf_i+0x19e>
 8007488:	066d      	lsls	r5, r5, #25
 800748a:	d5fb      	bpl.n	8007484 <_printf_i+0x194>
 800748c:	8019      	strh	r1, [r3, #0]
 800748e:	2300      	movs	r3, #0
 8007490:	9d03      	ldr	r5, [sp, #12]
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	e7bf      	b.n	8007416 <_printf_i+0x126>
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	1d11      	adds	r1, r2, #4
 800749a:	6019      	str	r1, [r3, #0]
 800749c:	6815      	ldr	r5, [r2, #0]
 800749e:	2100      	movs	r1, #0
 80074a0:	0028      	movs	r0, r5
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	f000 f858 	bl	8007558 <memchr>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d001      	beq.n	80074b0 <_printf_i+0x1c0>
 80074ac:	1b40      	subs	r0, r0, r5
 80074ae:	6060      	str	r0, [r4, #4]
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	6123      	str	r3, [r4, #16]
 80074b4:	2300      	movs	r3, #0
 80074b6:	9a03      	ldr	r2, [sp, #12]
 80074b8:	7013      	strb	r3, [r2, #0]
 80074ba:	e7ac      	b.n	8007416 <_printf_i+0x126>
 80074bc:	002a      	movs	r2, r5
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	9906      	ldr	r1, [sp, #24]
 80074c2:	9805      	ldr	r0, [sp, #20]
 80074c4:	9d07      	ldr	r5, [sp, #28]
 80074c6:	47a8      	blx	r5
 80074c8:	3001      	adds	r0, #1
 80074ca:	d0ae      	beq.n	800742a <_printf_i+0x13a>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	079b      	lsls	r3, r3, #30
 80074d0:	d415      	bmi.n	80074fe <_printf_i+0x20e>
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	68e0      	ldr	r0, [r4, #12]
 80074d6:	4298      	cmp	r0, r3
 80074d8:	daa9      	bge.n	800742e <_printf_i+0x13e>
 80074da:	0018      	movs	r0, r3
 80074dc:	e7a7      	b.n	800742e <_printf_i+0x13e>
 80074de:	0022      	movs	r2, r4
 80074e0:	2301      	movs	r3, #1
 80074e2:	9906      	ldr	r1, [sp, #24]
 80074e4:	9805      	ldr	r0, [sp, #20]
 80074e6:	9e07      	ldr	r6, [sp, #28]
 80074e8:	3219      	adds	r2, #25
 80074ea:	47b0      	blx	r6
 80074ec:	3001      	adds	r0, #1
 80074ee:	d09c      	beq.n	800742a <_printf_i+0x13a>
 80074f0:	3501      	adds	r5, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf0      	bgt.n	80074de <_printf_i+0x1ee>
 80074fc:	e7e9      	b.n	80074d2 <_printf_i+0x1e2>
 80074fe:	2500      	movs	r5, #0
 8007500:	e7f7      	b.n	80074f2 <_printf_i+0x202>
 8007502:	46c0      	nop			@ (mov r8, r8)
 8007504:	08007901 	.word	0x08007901
 8007508:	08007912 	.word	0x08007912

0800750c <memmove>:
 800750c:	b510      	push	{r4, lr}
 800750e:	4288      	cmp	r0, r1
 8007510:	d806      	bhi.n	8007520 <memmove+0x14>
 8007512:	2300      	movs	r3, #0
 8007514:	429a      	cmp	r2, r3
 8007516:	d008      	beq.n	800752a <memmove+0x1e>
 8007518:	5ccc      	ldrb	r4, [r1, r3]
 800751a:	54c4      	strb	r4, [r0, r3]
 800751c:	3301      	adds	r3, #1
 800751e:	e7f9      	b.n	8007514 <memmove+0x8>
 8007520:	188b      	adds	r3, r1, r2
 8007522:	4298      	cmp	r0, r3
 8007524:	d2f5      	bcs.n	8007512 <memmove+0x6>
 8007526:	3a01      	subs	r2, #1
 8007528:	d200      	bcs.n	800752c <memmove+0x20>
 800752a:	bd10      	pop	{r4, pc}
 800752c:	5c8b      	ldrb	r3, [r1, r2]
 800752e:	5483      	strb	r3, [r0, r2]
 8007530:	e7f9      	b.n	8007526 <memmove+0x1a>
	...

08007534 <_sbrk_r>:
 8007534:	2300      	movs	r3, #0
 8007536:	b570      	push	{r4, r5, r6, lr}
 8007538:	4d06      	ldr	r5, [pc, #24]	@ (8007554 <_sbrk_r+0x20>)
 800753a:	0004      	movs	r4, r0
 800753c:	0008      	movs	r0, r1
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f7f9 fb10 	bl	8000b64 <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d103      	bne.n	8007550 <_sbrk_r+0x1c>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d000      	beq.n	8007550 <_sbrk_r+0x1c>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd70      	pop	{r4, r5, r6, pc}
 8007552:	46c0      	nop			@ (mov r8, r8)
 8007554:	200003f8 	.word	0x200003f8

08007558 <memchr>:
 8007558:	b2c9      	uxtb	r1, r1
 800755a:	1882      	adds	r2, r0, r2
 800755c:	4290      	cmp	r0, r2
 800755e:	d101      	bne.n	8007564 <memchr+0xc>
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr
 8007564:	7803      	ldrb	r3, [r0, #0]
 8007566:	428b      	cmp	r3, r1
 8007568:	d0fb      	beq.n	8007562 <memchr+0xa>
 800756a:	3001      	adds	r0, #1
 800756c:	e7f6      	b.n	800755c <memchr+0x4>

0800756e <memcpy>:
 800756e:	2300      	movs	r3, #0
 8007570:	b510      	push	{r4, lr}
 8007572:	429a      	cmp	r2, r3
 8007574:	d100      	bne.n	8007578 <memcpy+0xa>
 8007576:	bd10      	pop	{r4, pc}
 8007578:	5ccc      	ldrb	r4, [r1, r3]
 800757a:	54c4      	strb	r4, [r0, r3]
 800757c:	3301      	adds	r3, #1
 800757e:	e7f8      	b.n	8007572 <memcpy+0x4>

08007580 <_realloc_r>:
 8007580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007582:	0006      	movs	r6, r0
 8007584:	000c      	movs	r4, r1
 8007586:	0015      	movs	r5, r2
 8007588:	2900      	cmp	r1, #0
 800758a:	d105      	bne.n	8007598 <_realloc_r+0x18>
 800758c:	0011      	movs	r1, r2
 800758e:	f7ff fc51 	bl	8006e34 <_malloc_r>
 8007592:	0004      	movs	r4, r0
 8007594:	0020      	movs	r0, r4
 8007596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007598:	2a00      	cmp	r2, #0
 800759a:	d103      	bne.n	80075a4 <_realloc_r+0x24>
 800759c:	f7ff fbde 	bl	8006d5c <_free_r>
 80075a0:	2400      	movs	r4, #0
 80075a2:	e7f7      	b.n	8007594 <_realloc_r+0x14>
 80075a4:	f000 f81b 	bl	80075de <_malloc_usable_size_r>
 80075a8:	0007      	movs	r7, r0
 80075aa:	4285      	cmp	r5, r0
 80075ac:	d802      	bhi.n	80075b4 <_realloc_r+0x34>
 80075ae:	0843      	lsrs	r3, r0, #1
 80075b0:	42ab      	cmp	r3, r5
 80075b2:	d3ef      	bcc.n	8007594 <_realloc_r+0x14>
 80075b4:	0029      	movs	r1, r5
 80075b6:	0030      	movs	r0, r6
 80075b8:	f7ff fc3c 	bl	8006e34 <_malloc_r>
 80075bc:	9001      	str	r0, [sp, #4]
 80075be:	2800      	cmp	r0, #0
 80075c0:	d0ee      	beq.n	80075a0 <_realloc_r+0x20>
 80075c2:	002a      	movs	r2, r5
 80075c4:	42bd      	cmp	r5, r7
 80075c6:	d900      	bls.n	80075ca <_realloc_r+0x4a>
 80075c8:	003a      	movs	r2, r7
 80075ca:	0021      	movs	r1, r4
 80075cc:	9801      	ldr	r0, [sp, #4]
 80075ce:	f7ff ffce 	bl	800756e <memcpy>
 80075d2:	0021      	movs	r1, r4
 80075d4:	0030      	movs	r0, r6
 80075d6:	f7ff fbc1 	bl	8006d5c <_free_r>
 80075da:	9c01      	ldr	r4, [sp, #4]
 80075dc:	e7da      	b.n	8007594 <_realloc_r+0x14>

080075de <_malloc_usable_size_r>:
 80075de:	1f0b      	subs	r3, r1, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1f18      	subs	r0, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da01      	bge.n	80075ec <_malloc_usable_size_r+0xe>
 80075e8:	580b      	ldr	r3, [r1, r0]
 80075ea:	18c0      	adds	r0, r0, r3
 80075ec:	4770      	bx	lr
	...

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	46c0      	nop			@ (mov r8, r8)
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	46c0      	nop			@ (mov r8, r8)
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
